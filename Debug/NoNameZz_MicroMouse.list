
NoNameZz_MicroMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006628  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08006734  08006734  00016734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006768  08006768  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006768  08006768  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006768  08006768  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006768  08006768  00016768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800676c  0800676c  0001676c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  2000000c  0800677c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  0800677c  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baf5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204d  00000000  00000000  0002bb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002db78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  0002e720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183e6  00000000  00000000  0002f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0d8  00000000  00000000  000475b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cc21  00000000  00000000  0005568e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e22af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003128  00000000  00000000  000e2300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800671c 	.word	0x0800671c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800671c 	.word	0x0800671c

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_frsub>:
 8000a90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	e002      	b.n	8000a9c <__addsf3>
 8000a96:	bf00      	nop

08000a98 <__aeabi_fsub>:
 8000a98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a9c <__addsf3>:
 8000a9c:	0042      	lsls	r2, r0, #1
 8000a9e:	bf1f      	itttt	ne
 8000aa0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa4:	ea92 0f03 	teqne	r2, r3
 8000aa8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab0:	d06a      	beq.n	8000b88 <__addsf3+0xec>
 8000ab2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ab6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aba:	bfc1      	itttt	gt
 8000abc:	18d2      	addgt	r2, r2, r3
 8000abe:	4041      	eorgt	r1, r0
 8000ac0:	4048      	eorgt	r0, r1
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	bfb8      	it	lt
 8000ac6:	425b      	neglt	r3, r3
 8000ac8:	2b19      	cmp	r3, #25
 8000aca:	bf88      	it	hi
 8000acc:	4770      	bxhi	lr
 8000ace:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ae6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aea:	bf18      	it	ne
 8000aec:	4249      	negne	r1, r1
 8000aee:	ea92 0f03 	teq	r2, r3
 8000af2:	d03f      	beq.n	8000b74 <__addsf3+0xd8>
 8000af4:	f1a2 0201 	sub.w	r2, r2, #1
 8000af8:	fa41 fc03 	asr.w	ip, r1, r3
 8000afc:	eb10 000c 	adds.w	r0, r0, ip
 8000b00:	f1c3 0320 	rsb	r3, r3, #32
 8000b04:	fa01 f103 	lsl.w	r1, r1, r3
 8000b08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0c:	d502      	bpl.n	8000b14 <__addsf3+0x78>
 8000b0e:	4249      	negs	r1, r1
 8000b10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b18:	d313      	bcc.n	8000b42 <__addsf3+0xa6>
 8000b1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b1e:	d306      	bcc.n	8000b2e <__addsf3+0x92>
 8000b20:	0840      	lsrs	r0, r0, #1
 8000b22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b26:	f102 0201 	add.w	r2, r2, #1
 8000b2a:	2afe      	cmp	r2, #254	; 0xfe
 8000b2c:	d251      	bcs.n	8000bd2 <__addsf3+0x136>
 8000b2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b36:	bf08      	it	eq
 8000b38:	f020 0001 	biceq.w	r0, r0, #1
 8000b3c:	ea40 0003 	orr.w	r0, r0, r3
 8000b40:	4770      	bx	lr
 8000b42:	0049      	lsls	r1, r1, #1
 8000b44:	eb40 0000 	adc.w	r0, r0, r0
 8000b48:	3a01      	subs	r2, #1
 8000b4a:	bf28      	it	cs
 8000b4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b50:	d2ed      	bcs.n	8000b2e <__addsf3+0x92>
 8000b52:	fab0 fc80 	clz	ip, r0
 8000b56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b62:	bfaa      	itet	ge
 8000b64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b68:	4252      	neglt	r2, r2
 8000b6a:	4318      	orrge	r0, r3
 8000b6c:	bfbc      	itt	lt
 8000b6e:	40d0      	lsrlt	r0, r2
 8000b70:	4318      	orrlt	r0, r3
 8000b72:	4770      	bx	lr
 8000b74:	f092 0f00 	teq	r2, #0
 8000b78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b7c:	bf06      	itte	eq
 8000b7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b82:	3201      	addeq	r2, #1
 8000b84:	3b01      	subne	r3, #1
 8000b86:	e7b5      	b.n	8000af4 <__addsf3+0x58>
 8000b88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b90:	bf18      	it	ne
 8000b92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b96:	d021      	beq.n	8000bdc <__addsf3+0x140>
 8000b98:	ea92 0f03 	teq	r2, r3
 8000b9c:	d004      	beq.n	8000ba8 <__addsf3+0x10c>
 8000b9e:	f092 0f00 	teq	r2, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	4608      	moveq	r0, r1
 8000ba6:	4770      	bx	lr
 8000ba8:	ea90 0f01 	teq	r0, r1
 8000bac:	bf1c      	itt	ne
 8000bae:	2000      	movne	r0, #0
 8000bb0:	4770      	bxne	lr
 8000bb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bb6:	d104      	bne.n	8000bc2 <__addsf3+0x126>
 8000bb8:	0040      	lsls	r0, r0, #1
 8000bba:	bf28      	it	cs
 8000bbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc0:	4770      	bx	lr
 8000bc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bc6:	bf3c      	itt	cc
 8000bc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bxcc	lr
 8000bce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bda:	4770      	bx	lr
 8000bdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be0:	bf16      	itet	ne
 8000be2:	4608      	movne	r0, r1
 8000be4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be8:	4601      	movne	r1, r0
 8000bea:	0242      	lsls	r2, r0, #9
 8000bec:	bf06      	itte	eq
 8000bee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf2:	ea90 0f01 	teqeq	r0, r1
 8000bf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_ui2f>:
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e004      	b.n	8000c0c <__aeabi_i2f+0x8>
 8000c02:	bf00      	nop

08000c04 <__aeabi_i2f>:
 8000c04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c08:	bf48      	it	mi
 8000c0a:	4240      	negmi	r0, r0
 8000c0c:	ea5f 0c00 	movs.w	ip, r0
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c18:	4601      	mov	r1, r0
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	e01c      	b.n	8000c5a <__aeabi_l2f+0x2a>

08000c20 <__aeabi_ul2f>:
 8000c20:	ea50 0201 	orrs.w	r2, r0, r1
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e00a      	b.n	8000c44 <__aeabi_l2f+0x14>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_l2f>:
 8000c30:	ea50 0201 	orrs.w	r2, r0, r1
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c3c:	d502      	bpl.n	8000c44 <__aeabi_l2f+0x14>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	ea5f 0c01 	movs.w	ip, r1
 8000c48:	bf02      	ittt	eq
 8000c4a:	4684      	moveq	ip, r0
 8000c4c:	4601      	moveq	r1, r0
 8000c4e:	2000      	moveq	r0, #0
 8000c50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c54:	bf08      	it	eq
 8000c56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c5e:	fabc f28c 	clz	r2, ip
 8000c62:	3a08      	subs	r2, #8
 8000c64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c68:	db10      	blt.n	8000c8c <__aeabi_l2f+0x5c>
 8000c6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6e:	4463      	add	r3, ip
 8000c70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c74:	f1c2 0220 	rsb	r2, r2, #32
 8000c78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c80:	eb43 0002 	adc.w	r0, r3, r2
 8000c84:	bf08      	it	eq
 8000c86:	f020 0001 	biceq.w	r0, r0, #1
 8000c8a:	4770      	bx	lr
 8000c8c:	f102 0220 	add.w	r2, r2, #32
 8000c90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c94:	f1c2 0220 	rsb	r2, r2, #32
 8000c98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca0:	eb43 0002 	adc.w	r0, r3, r2
 8000ca4:	bf08      	it	eq
 8000ca6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000caa:	4770      	bx	lr

08000cac <start_fill>:
const float d2 = (float)(square_size - (halfSize_MicroMouse * 2))/2;

void found(int16_t index);
void set_wall(bool rbl, bool rbr, bool rbf);

void start_fill() {
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
	memset(visited, false, sizeof(visited));
 8000cb2:	2264      	movs	r2, #100	; 0x64
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	48a9      	ldr	r0, [pc, #676]	; (8000f5c <start_fill+0x2b0>)
 8000cb8:	f005 fce0 	bl	800667c <memset>
	memset(maze, 0, sizeof(maze));
 8000cbc:	2264      	movs	r2, #100	; 0x64
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	48a7      	ldr	r0, [pc, #668]	; (8000f60 <start_fill+0x2b4>)
 8000cc2:	f005 fcdb 	bl	800667c <memset>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000cc6:	4ba7      	ldr	r3, [pc, #668]	; (8000f64 <start_fill+0x2b8>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000cce:	4ba6      	ldr	r3, [pc, #664]	; (8000f68 <start_fill+0x2bc>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
	current_speed = 0;
 8000cd6:	4ba5      	ldr	r3, [pc, #660]	; (8000f6c <start_fill+0x2c0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
	stack[0][0] = straight;
 8000cdc:	4ba4      	ldr	r3, [pc, #656]	; (8000f70 <start_fill+0x2c4>)
 8000cde:	22fa      	movs	r2, #250	; 0xfa
 8000ce0:	701a      	strb	r2, [r3, #0]
	stack[0][1] = starting_coordinates[0];
 8000ce2:	4ba4      	ldr	r3, [pc, #656]	; (8000f74 <start_fill+0x2c8>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b25a      	sxtb	r2, r3
 8000ce8:	4ba1      	ldr	r3, [pc, #644]	; (8000f70 <start_fill+0x2c4>)
 8000cea:	705a      	strb	r2, [r3, #1]
	stack[0][2] = starting_coordinates[1];
 8000cec:	4ba1      	ldr	r3, [pc, #644]	; (8000f74 <start_fill+0x2c8>)
 8000cee:	785b      	ldrb	r3, [r3, #1]
 8000cf0:	b25a      	sxtb	r2, r3
 8000cf2:	4b9f      	ldr	r3, [pc, #636]	; (8000f70 <start_fill+0x2c4>)
 8000cf4:	709a      	strb	r2, [r3, #2]
	visited[starting_coordinates[1]][starting_coordinates[0]] = true;
 8000cf6:	4b9f      	ldr	r3, [pc, #636]	; (8000f74 <start_fill+0x2c8>)
 8000cf8:	785b      	ldrb	r3, [r3, #1]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4b9d      	ldr	r3, [pc, #628]	; (8000f74 <start_fill+0x2c8>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	4a96      	ldr	r2, [pc, #600]	; (8000f5c <start_fill+0x2b0>)
 8000d04:	460b      	mov	r3, r1
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	440b      	add	r3, r1
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4403      	add	r3, r0
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
	int16_t i = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	81fb      	strh	r3, [r7, #14]
	x = starting_coordinates[0];
 8000d18:	4b96      	ldr	r3, [pc, #600]	; (8000f74 <start_fill+0x2c8>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	4b96      	ldr	r3, [pc, #600]	; (8000f78 <start_fill+0x2cc>)
 8000d20:	701a      	strb	r2, [r3, #0]
	y = starting_coordinates[1] + 1;
 8000d22:	4b94      	ldr	r3, [pc, #592]	; (8000f74 <start_fill+0x2c8>)
 8000d24:	785b      	ldrb	r3, [r3, #1]
 8000d26:	3301      	adds	r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	b25a      	sxtb	r2, r3
 8000d2c:	4b93      	ldr	r3, [pc, #588]	; (8000f7c <start_fill+0x2d0>)
 8000d2e:	701a      	strb	r2, [r3, #0]
	maze[y - 1][x] |= bottom_wall;
 8000d30:	4b92      	ldr	r3, [pc, #584]	; (8000f7c <start_fill+0x2d0>)
 8000d32:	f993 3000 	ldrsb.w	r3, [r3]
 8000d36:	1e5a      	subs	r2, r3, #1
 8000d38:	4b8f      	ldr	r3, [pc, #572]	; (8000f78 <start_fill+0x2cc>)
 8000d3a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	4987      	ldr	r1, [pc, #540]	; (8000f60 <start_fill+0x2b4>)
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	440b      	add	r3, r1
 8000d4c:	4403      	add	r3, r0
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4a8a      	ldr	r2, [pc, #552]	; (8000f7c <start_fill+0x2d0>)
 8000d52:	f992 2000 	ldrsb.w	r2, [r2]
 8000d56:	3a01      	subs	r2, #1
 8000d58:	4987      	ldr	r1, [pc, #540]	; (8000f78 <start_fill+0x2cc>)
 8000d5a:	f991 1000 	ldrsb.w	r1, [r1]
 8000d5e:	460c      	mov	r4, r1
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	b2d8      	uxtb	r0, r3
 8000d66:	497e      	ldr	r1, [pc, #504]	; (8000f60 <start_fill+0x2b4>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	440b      	add	r3, r1
 8000d72:	4423      	add	r3, r4
 8000d74:	4602      	mov	r2, r0
 8000d76:	701a      	strb	r2, [r3, #0]
	direction = north;
 8000d78:	4b81      	ldr	r3, [pc, #516]	; (8000f80 <start_fill+0x2d4>)
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	701a      	strb	r2, [r3, #0]
	bool frontfree, leftfree, rightfree;
	while(i > -1){
 8000d7e:	f001 b99e 	b.w	80020be <start_fill+0x1412>
		frontfree = adc_value[0] < frontWallValue;
 8000d82:	4b80      	ldr	r3, [pc, #512]	; (8000f84 <start_fill+0x2d8>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	2b63      	cmp	r3, #99	; 0x63
 8000d8a:	bf94      	ite	ls
 8000d8c:	2301      	movls	r3, #1
 8000d8e:	2300      	movhi	r3, #0
 8000d90:	737b      	strb	r3, [r7, #13]
		rightfree = adc_value[1] < rightWallValue;
 8000d92:	4b7c      	ldr	r3, [pc, #496]	; (8000f84 <start_fill+0x2d8>)
 8000d94:	885b      	ldrh	r3, [r3, #2]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	2b63      	cmp	r3, #99	; 0x63
 8000d9a:	bf94      	ite	ls
 8000d9c:	2301      	movls	r3, #1
 8000d9e:	2300      	movhi	r3, #0
 8000da0:	72fb      	strb	r3, [r7, #11]
		leftfree  = adc_value[2] < leftWallValue;
 8000da2:	4b78      	ldr	r3, [pc, #480]	; (8000f84 <start_fill+0x2d8>)
 8000da4:	889b      	ldrh	r3, [r3, #4]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	2b63      	cmp	r3, #99	; 0x63
 8000daa:	bf94      	ite	ls
 8000dac:	2301      	movls	r3, #1
 8000dae:	2300      	movhi	r3, #0
 8000db0:	733b      	strb	r3, [r7, #12]
		set_wall(!leftfree, !rightfree, !frontfree);
 8000db2:	7b3b      	ldrb	r3, [r7, #12]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	bf14      	ite	ne
 8000db8:	2301      	movne	r3, #1
 8000dba:	2300      	moveq	r3, #0
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f083 0301 	eor.w	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	b2d8      	uxtb	r0, r3
 8000dca:	7afb      	ldrb	r3, [r7, #11]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	bf14      	ite	ne
 8000dd0:	2301      	movne	r3, #1
 8000dd2:	2300      	moveq	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	f083 0301 	eor.w	r3, r3, #1
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	b2d9      	uxtb	r1, r3
 8000de2:	7b7b      	ldrb	r3, [r7, #13]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	bf14      	ite	ne
 8000de8:	2301      	movne	r3, #1
 8000dea:	2300      	moveq	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	f083 0301 	eor.w	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	f001 f9e0 	bl	80021c0 <set_wall>
		if(x == ending_coordinates[0] && y == ending_coordinates[1]){
 8000e00:	4b5d      	ldr	r3, [pc, #372]	; (8000f78 <start_fill+0x2cc>)
 8000e02:	f993 3000 	ldrsb.w	r3, [r3]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b5f      	ldr	r3, [pc, #380]	; (8000f88 <start_fill+0x2dc>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d132      	bne.n	8000e76 <start_fill+0x1ca>
 8000e10:	4b5a      	ldr	r3, [pc, #360]	; (8000f7c <start_fill+0x2d0>)
 8000e12:	f993 3000 	ldrsb.w	r3, [r3]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b5b      	ldr	r3, [pc, #364]	; (8000f88 <start_fill+0x2dc>)
 8000e1a:	785b      	ldrb	r3, [r3, #1]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d12a      	bne.n	8000e76 <start_fill+0x1ca>
			found(i);
 8000e20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 f965 	bl	80020f4 <found>
			maze[y][x] |= top_wall;
 8000e2a:	4b54      	ldr	r3, [pc, #336]	; (8000f7c <start_fill+0x2d0>)
 8000e2c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e30:	4619      	mov	r1, r3
 8000e32:	4b51      	ldr	r3, [pc, #324]	; (8000f78 <start_fill+0x2cc>)
 8000e34:	f993 3000 	ldrsb.w	r3, [r3]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	4a49      	ldr	r2, [pc, #292]	; (8000f60 <start_fill+0x2b4>)
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	440b      	add	r3, r1
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	4403      	add	r3, r0
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4a4c      	ldr	r2, [pc, #304]	; (8000f7c <start_fill+0x2d0>)
 8000e4c:	f992 2000 	ldrsb.w	r2, [r2]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4a49      	ldr	r2, [pc, #292]	; (8000f78 <start_fill+0x2cc>)
 8000e54:	f992 2000 	ldrsb.w	r2, [r2]
 8000e58:	4614      	mov	r4, r2
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	b2d8      	uxtb	r0, r3
 8000e60:	4a3f      	ldr	r2, [pc, #252]	; (8000f60 <start_fill+0x2b4>)
 8000e62:	460b      	mov	r3, r1
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4423      	add	r3, r4
 8000e6e:	4602      	mov	r2, r0
 8000e70:	701a      	strb	r2, [r3, #0]
			break;
 8000e72:	f001 b92a 	b.w	80020ca <start_fill+0x141e>
		}
		switch(direction){
 8000e76:	4b42      	ldr	r3, [pc, #264]	; (8000f80 <start_fill+0x2d4>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	f200 81a9 	bhi.w	80011d2 <start_fill+0x526>
 8000e80:	a201      	add	r2, pc, #4	; (adr r2, 8000e88 <start_fill+0x1dc>)
 8000e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e86:	bf00      	nop
 8000e88:	08000e99 	.word	0x08000e99
 8000e8c:	08000f8d 	.word	0x08000f8d
 8000e90:	0800104f 	.word	0x0800104f
 8000e94:	08001111 	.word	0x08001111
			case west:
				frontfree = frontfree && !visited[y][x - 1];
 8000e98:	7b7b      	ldrb	r3, [r7, #13]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d016      	beq.n	8000ecc <start_fill+0x220>
 8000e9e:	4b37      	ldr	r3, [pc, #220]	; (8000f7c <start_fill+0x2d0>)
 8000ea0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <start_fill+0x2cc>)
 8000ea8:	f993 3000 	ldrsb.w	r3, [r3]
 8000eac:	1e5a      	subs	r2, r3, #1
 8000eae:	492b      	ldr	r1, [pc, #172]	; (8000f5c <start_fill+0x2b0>)
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4403      	add	r3, r0
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	440b      	add	r3, r1
 8000eba:	4413      	add	r3, r2
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	f083 0301 	eor.w	r3, r3, #1
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <start_fill+0x220>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <start_fill+0x222>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	737b      	strb	r3, [r7, #13]
 8000ed0:	7b7b      	ldrb	r3, [r7, #13]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y + 1][x];
 8000ed8:	7b3b      	ldrb	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d016      	beq.n	8000f0c <start_fill+0x260>
 8000ede:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <start_fill+0x2d0>)
 8000ee0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ee4:	1c5a      	adds	r2, r3, #1
 8000ee6:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <start_fill+0x2cc>)
 8000ee8:	f993 3000 	ldrsb.w	r3, [r3]
 8000eec:	4618      	mov	r0, r3
 8000eee:	491b      	ldr	r1, [pc, #108]	; (8000f5c <start_fill+0x2b0>)
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	440b      	add	r3, r1
 8000efa:	4403      	add	r3, r0
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	f083 0301 	eor.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <start_fill+0x260>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <start_fill+0x262>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	733b      	strb	r3, [r7, #12]
 8000f10:	7b3b      	ldrb	r3, [r7, #12]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y - 1][x];
 8000f18:	7afb      	ldrb	r3, [r7, #11]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d016      	beq.n	8000f4c <start_fill+0x2a0>
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <start_fill+0x2d0>)
 8000f20:	f993 3000 	ldrsb.w	r3, [r3]
 8000f24:	1e5a      	subs	r2, r3, #1
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <start_fill+0x2cc>)
 8000f28:	f993 3000 	ldrsb.w	r3, [r3]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	490b      	ldr	r1, [pc, #44]	; (8000f5c <start_fill+0x2b0>)
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	440b      	add	r3, r1
 8000f3a:	4403      	add	r3, r0
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	f083 0301 	eor.w	r3, r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <start_fill+0x2a0>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <start_fill+0x2a2>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	72fb      	strb	r3, [r7, #11]
 8000f50:	7afb      	ldrb	r3, [r7, #11]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	72fb      	strb	r3, [r7, #11]
				break;
 8000f58:	e13b      	b.n	80011d2 <start_fill+0x526>
 8000f5a:	bf00      	nop
 8000f5c:	20000308 	.word	0x20000308
 8000f60:	200002a4 	.word	0x200002a4
 8000f64:	200001cc 	.word	0x200001cc
 8000f68:	2000025c 	.word	0x2000025c
 8000f6c:	20000374 	.word	0x20000374
 8000f70:	20000028 	.word	0x20000028
 8000f74:	08006734 	.word	0x08006734
 8000f78:	20000154 	.word	0x20000154
 8000f7c:	20000155 	.word	0x20000155
 8000f80:	20000156 	.word	0x20000156
 8000f84:	2000036c 	.word	0x2000036c
 8000f88:	08006738 	.word	0x08006738
			case east:
				frontfree = frontfree && !visited[y][x + 1];
 8000f8c:	7b7b      	ldrb	r3, [r7, #13]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d016      	beq.n	8000fc0 <start_fill+0x314>
 8000f92:	4bba      	ldr	r3, [pc, #744]	; (800127c <start_fill+0x5d0>)
 8000f94:	f993 3000 	ldrsb.w	r3, [r3]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	4bb9      	ldr	r3, [pc, #740]	; (8001280 <start_fill+0x5d4>)
 8000f9c:	f993 3000 	ldrsb.w	r3, [r3]
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	49b8      	ldr	r1, [pc, #736]	; (8001284 <start_fill+0x5d8>)
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4403      	add	r3, r0
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	440b      	add	r3, r1
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	f083 0301 	eor.w	r3, r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <start_fill+0x314>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <start_fill+0x316>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	737b      	strb	r3, [r7, #13]
 8000fc4:	7b7b      	ldrb	r3, [r7, #13]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y - 1][x];
 8000fcc:	7b3b      	ldrb	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d016      	beq.n	8001000 <start_fill+0x354>
 8000fd2:	4baa      	ldr	r3, [pc, #680]	; (800127c <start_fill+0x5d0>)
 8000fd4:	f993 3000 	ldrsb.w	r3, [r3]
 8000fd8:	1e5a      	subs	r2, r3, #1
 8000fda:	4ba9      	ldr	r3, [pc, #676]	; (8001280 <start_fill+0x5d4>)
 8000fdc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	49a8      	ldr	r1, [pc, #672]	; (8001284 <start_fill+0x5d8>)
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	440b      	add	r3, r1
 8000fee:	4403      	add	r3, r0
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	f083 0301 	eor.w	r3, r3, #1
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <start_fill+0x354>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <start_fill+0x356>
 8001000:	2300      	movs	r3, #0
 8001002:	733b      	strb	r3, [r7, #12]
 8001004:	7b3b      	ldrb	r3, [r7, #12]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y + 1][x];
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d016      	beq.n	8001040 <start_fill+0x394>
 8001012:	4b9a      	ldr	r3, [pc, #616]	; (800127c <start_fill+0x5d0>)
 8001014:	f993 3000 	ldrsb.w	r3, [r3]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	4b99      	ldr	r3, [pc, #612]	; (8001280 <start_fill+0x5d4>)
 800101c:	f993 3000 	ldrsb.w	r3, [r3]
 8001020:	4618      	mov	r0, r3
 8001022:	4998      	ldr	r1, [pc, #608]	; (8001284 <start_fill+0x5d8>)
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	440b      	add	r3, r1
 800102e:	4403      	add	r3, r0
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	f083 0301 	eor.w	r3, r3, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <start_fill+0x394>
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <start_fill+0x396>
 8001040:	2300      	movs	r3, #0
 8001042:	72fb      	strb	r3, [r7, #11]
 8001044:	7afb      	ldrb	r3, [r7, #11]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	72fb      	strb	r3, [r7, #11]
				break;
 800104c:	e0c1      	b.n	80011d2 <start_fill+0x526>
			case north:
				frontfree = frontfree && !visited[y - 1][x];
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d016      	beq.n	8001082 <start_fill+0x3d6>
 8001054:	4b89      	ldr	r3, [pc, #548]	; (800127c <start_fill+0x5d0>)
 8001056:	f993 3000 	ldrsb.w	r3, [r3]
 800105a:	1e5a      	subs	r2, r3, #1
 800105c:	4b88      	ldr	r3, [pc, #544]	; (8001280 <start_fill+0x5d4>)
 800105e:	f993 3000 	ldrsb.w	r3, [r3]
 8001062:	4618      	mov	r0, r3
 8001064:	4987      	ldr	r1, [pc, #540]	; (8001284 <start_fill+0x5d8>)
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	440b      	add	r3, r1
 8001070:	4403      	add	r3, r0
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	f083 0301 	eor.w	r3, r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <start_fill+0x3d6>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <start_fill+0x3d8>
 8001082:	2300      	movs	r3, #0
 8001084:	737b      	strb	r3, [r7, #13]
 8001086:	7b7b      	ldrb	r3, [r7, #13]
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y][x - 1];
 800108e:	7b3b      	ldrb	r3, [r7, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d016      	beq.n	80010c2 <start_fill+0x416>
 8001094:	4b79      	ldr	r3, [pc, #484]	; (800127c <start_fill+0x5d0>)
 8001096:	f993 3000 	ldrsb.w	r3, [r3]
 800109a:	4618      	mov	r0, r3
 800109c:	4b78      	ldr	r3, [pc, #480]	; (8001280 <start_fill+0x5d4>)
 800109e:	f993 3000 	ldrsb.w	r3, [r3]
 80010a2:	1e5a      	subs	r2, r3, #1
 80010a4:	4977      	ldr	r1, [pc, #476]	; (8001284 <start_fill+0x5d8>)
 80010a6:	4603      	mov	r3, r0
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4403      	add	r3, r0
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	440b      	add	r3, r1
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f083 0301 	eor.w	r3, r3, #1
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <start_fill+0x416>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <start_fill+0x418>
 80010c2:	2300      	movs	r3, #0
 80010c4:	733b      	strb	r3, [r7, #12]
 80010c6:	7b3b      	ldrb	r3, [r7, #12]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y][x + 1];
 80010ce:	7afb      	ldrb	r3, [r7, #11]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d016      	beq.n	8001102 <start_fill+0x456>
 80010d4:	4b69      	ldr	r3, [pc, #420]	; (800127c <start_fill+0x5d0>)
 80010d6:	f993 3000 	ldrsb.w	r3, [r3]
 80010da:	4618      	mov	r0, r3
 80010dc:	4b68      	ldr	r3, [pc, #416]	; (8001280 <start_fill+0x5d4>)
 80010de:	f993 3000 	ldrsb.w	r3, [r3]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	4967      	ldr	r1, [pc, #412]	; (8001284 <start_fill+0x5d8>)
 80010e6:	4603      	mov	r3, r0
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4403      	add	r3, r0
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	440b      	add	r3, r1
 80010f0:	4413      	add	r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	f083 0301 	eor.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <start_fill+0x456>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <start_fill+0x458>
 8001102:	2300      	movs	r3, #0
 8001104:	72fb      	strb	r3, [r7, #11]
 8001106:	7afb      	ldrb	r3, [r7, #11]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	72fb      	strb	r3, [r7, #11]
				break;
 800110e:	e060      	b.n	80011d2 <start_fill+0x526>
			case south:
				frontfree = frontfree && !visited[y + 1][x];
 8001110:	7b7b      	ldrb	r3, [r7, #13]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d016      	beq.n	8001144 <start_fill+0x498>
 8001116:	4b59      	ldr	r3, [pc, #356]	; (800127c <start_fill+0x5d0>)
 8001118:	f993 3000 	ldrsb.w	r3, [r3]
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	4b58      	ldr	r3, [pc, #352]	; (8001280 <start_fill+0x5d4>)
 8001120:	f993 3000 	ldrsb.w	r3, [r3]
 8001124:	4618      	mov	r0, r3
 8001126:	4957      	ldr	r1, [pc, #348]	; (8001284 <start_fill+0x5d8>)
 8001128:	4613      	mov	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	440b      	add	r3, r1
 8001132:	4403      	add	r3, r0
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	f083 0301 	eor.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <start_fill+0x498>
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <start_fill+0x49a>
 8001144:	2300      	movs	r3, #0
 8001146:	737b      	strb	r3, [r7, #13]
 8001148:	7b7b      	ldrb	r3, [r7, #13]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y][x + 1];
 8001150:	7b3b      	ldrb	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d016      	beq.n	8001184 <start_fill+0x4d8>
 8001156:	4b49      	ldr	r3, [pc, #292]	; (800127c <start_fill+0x5d0>)
 8001158:	f993 3000 	ldrsb.w	r3, [r3]
 800115c:	4618      	mov	r0, r3
 800115e:	4b48      	ldr	r3, [pc, #288]	; (8001280 <start_fill+0x5d4>)
 8001160:	f993 3000 	ldrsb.w	r3, [r3]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	4947      	ldr	r1, [pc, #284]	; (8001284 <start_fill+0x5d8>)
 8001168:	4603      	mov	r3, r0
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4403      	add	r3, r0
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	440b      	add	r3, r1
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	f083 0301 	eor.w	r3, r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <start_fill+0x4d8>
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <start_fill+0x4da>
 8001184:	2300      	movs	r3, #0
 8001186:	733b      	strb	r3, [r7, #12]
 8001188:	7b3b      	ldrb	r3, [r7, #12]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y][x - 1];
 8001190:	7afb      	ldrb	r3, [r7, #11]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d016      	beq.n	80011c4 <start_fill+0x518>
 8001196:	4b39      	ldr	r3, [pc, #228]	; (800127c <start_fill+0x5d0>)
 8001198:	f993 3000 	ldrsb.w	r3, [r3]
 800119c:	4618      	mov	r0, r3
 800119e:	4b38      	ldr	r3, [pc, #224]	; (8001280 <start_fill+0x5d4>)
 80011a0:	f993 3000 	ldrsb.w	r3, [r3]
 80011a4:	1e5a      	subs	r2, r3, #1
 80011a6:	4937      	ldr	r1, [pc, #220]	; (8001284 <start_fill+0x5d8>)
 80011a8:	4603      	mov	r3, r0
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4403      	add	r3, r0
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	440b      	add	r3, r1
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f083 0301 	eor.w	r3, r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <start_fill+0x518>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <start_fill+0x51a>
 80011c4:	2300      	movs	r3, #0
 80011c6:	72fb      	strb	r3, [r7, #11]
 80011c8:	7afb      	ldrb	r3, [r7, #11]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	72fb      	strb	r3, [r7, #11]
				break;
 80011d0:	bf00      	nop
		}
		visited[y][x] = true;
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <start_fill+0x5d0>)
 80011d4:	f993 3000 	ldrsb.w	r3, [r3]
 80011d8:	4619      	mov	r1, r3
 80011da:	4b29      	ldr	r3, [pc, #164]	; (8001280 <start_fill+0x5d4>)
 80011dc:	f993 3000 	ldrsb.w	r3, [r3]
 80011e0:	4618      	mov	r0, r3
 80011e2:	4a28      	ldr	r2, [pc, #160]	; (8001284 <start_fill+0x5d8>)
 80011e4:	460b      	mov	r3, r1
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	4403      	add	r3, r0
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
		if((leftfree && rightfree) || (leftfree && frontfree) || (rightfree && frontfree)){
 80011f4:	7b3b      	ldrb	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <start_fill+0x554>
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10b      	bne.n	8001218 <start_fill+0x56c>
 8001200:	7b3b      	ldrb	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <start_fill+0x560>
 8001206:	7b7b      	ldrb	r3, [r7, #13]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d105      	bne.n	8001218 <start_fill+0x56c>
 800120c:	7afb      	ldrb	r3, [r7, #11]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d075      	beq.n	80012fe <start_fill+0x652>
 8001212:	7b7b      	ldrb	r3, [r7, #13]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d072      	beq.n	80012fe <start_fill+0x652>
			i++;
 8001218:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800121c:	b29b      	uxth	r3, r3
 800121e:	3301      	adds	r3, #1
 8001220:	b29b      	uxth	r3, r3
 8001222:	81fb      	strh	r3, [r7, #14]
			stack[i][1] = x;
 8001224:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <start_fill+0x5d4>)
 800122a:	f993 0000 	ldrsb.w	r0, [r3]
 800122e:	4916      	ldr	r1, [pc, #88]	; (8001288 <start_fill+0x5dc>)
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	440b      	add	r3, r1
 8001238:	3301      	adds	r3, #1
 800123a:	4602      	mov	r2, r0
 800123c:	701a      	strb	r2, [r3, #0]
			stack[i][2] = y;
 800123e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <start_fill+0x5d0>)
 8001244:	f993 0000 	ldrsb.w	r0, [r3]
 8001248:	490f      	ldr	r1, [pc, #60]	; (8001288 <start_fill+0x5dc>)
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	440b      	add	r3, r1
 8001252:	3302      	adds	r3, #2
 8001254:	4602      	mov	r2, r0
 8001256:	701a      	strb	r2, [r3, #0]
			if(frontfree){
 8001258:	7b7b      	ldrb	r3, [r7, #13]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d018      	beq.n	8001290 <start_fill+0x5e4>
				stack[i][0] = straight;
 800125e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001262:	4909      	ldr	r1, [pc, #36]	; (8001288 <start_fill+0x5dc>)
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	440b      	add	r3, r1
 800126c:	22fa      	movs	r2, #250	; 0xfa
 800126e:	701a      	strb	r2, [r3, #0]
				go_straight(square_size, 0);
 8001270:	2100      	movs	r1, #0
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <start_fill+0x5e0>)
 8001274:	f002 fbd0 	bl	8003a18 <go_straight>
			if(frontfree){
 8001278:	f000 be66 	b.w	8001f48 <start_fill+0x129c>
 800127c:	20000155 	.word	0x20000155
 8001280:	20000154 	.word	0x20000154
 8001284:	20000308 	.word	0x20000308
 8001288:	20000028 	.word	0x20000028
 800128c:	43960000 	.word	0x43960000
			} else if(leftfree){
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d017      	beq.n	80012c6 <start_fill+0x61a>
				stack[i][0] = turn_left_90;
 8001296:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800129a:	499c      	ldr	r1, [pc, #624]	; (800150c <start_fill+0x860>)
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	22fc      	movs	r2, #252	; 0xfc
 80012a6:	701a      	strb	r2, [r3, #0]
				go_straight(d2, 1);
 80012a8:	4b99      	ldr	r3, [pc, #612]	; (8001510 <start_fill+0x864>)
 80012aa:	2101      	movs	r1, #1
 80012ac:	4618      	mov	r0, r3
 80012ae:	f002 fbb3 	bl	8003a18 <go_straight>
				turn_left90(&direction);
 80012b2:	4898      	ldr	r0, [pc, #608]	; (8001514 <start_fill+0x868>)
 80012b4:	f002 fa00 	bl	80036b8 <turn_left90>
				go_straight(d2, 0);
 80012b8:	4b95      	ldr	r3, [pc, #596]	; (8001510 <start_fill+0x864>)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 fbab 	bl	8003a18 <go_straight>
			if(frontfree){
 80012c2:	f000 be41 	b.w	8001f48 <start_fill+0x129c>
			} else if(rightfree){
 80012c6:	7afb      	ldrb	r3, [r7, #11]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 863d 	beq.w	8001f48 <start_fill+0x129c>
				stack[i][0] = turn_right_90;
 80012ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80012d2:	498e      	ldr	r1, [pc, #568]	; (800150c <start_fill+0x860>)
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	440b      	add	r3, r1
 80012dc:	22ff      	movs	r2, #255	; 0xff
 80012de:	701a      	strb	r2, [r3, #0]
				go_straight(d2, 1);
 80012e0:	4b8b      	ldr	r3, [pc, #556]	; (8001510 <start_fill+0x864>)
 80012e2:	2101      	movs	r1, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 fb97 	bl	8003a18 <go_straight>
				turn_right90(&direction);
 80012ea:	488a      	ldr	r0, [pc, #552]	; (8001514 <start_fill+0x868>)
 80012ec:	f002 fabc 	bl	8003868 <turn_right90>
				go_straight(d2, 0);
 80012f0:	4b87      	ldr	r3, [pc, #540]	; (8001510 <start_fill+0x864>)
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 fb8f 	bl	8003a18 <go_straight>
			if(frontfree){
 80012fa:	f000 be25 	b.w	8001f48 <start_fill+0x129c>
			}
		} else if(leftfree || rightfree || frontfree){
 80012fe:	7b3b      	ldrb	r3, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d106      	bne.n	8001312 <start_fill+0x666>
 8001304:	7afb      	ldrb	r3, [r7, #11]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d103      	bne.n	8001312 <start_fill+0x666>
 800130a:	7b7b      	ldrb	r3, [r7, #13]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80b3 	beq.w	8001478 <start_fill+0x7cc>
			if(frontfree){
 8001312:	7b7b      	ldrb	r3, [r7, #13]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d058      	beq.n	80013ca <start_fill+0x71e>
				if(stack[i][0] == straight && stack[i][1] == -1){
 8001318:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800131c:	497b      	ldr	r1, [pc, #492]	; (800150c <start_fill+0x860>)
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	440b      	add	r3, r1
 8001326:	f993 3000 	ldrsb.w	r3, [r3]
 800132a:	f113 0f06 	cmn.w	r3, #6
 800132e:	d123      	bne.n	8001378 <start_fill+0x6cc>
 8001330:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001334:	4975      	ldr	r1, [pc, #468]	; (800150c <start_fill+0x860>)
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	440b      	add	r3, r1
 800133e:	3301      	adds	r3, #1
 8001340:	f993 3000 	ldrsb.w	r3, [r3]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d116      	bne.n	8001378 <start_fill+0x6cc>
					stack[i][2]++;
 800134a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800134e:	496f      	ldr	r1, [pc, #444]	; (800150c <start_fill+0x860>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	440b      	add	r3, r1
 8001358:	3302      	adds	r3, #2
 800135a:	f993 3000 	ldrsb.w	r3, [r3]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	3301      	adds	r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	b258      	sxtb	r0, r3
 8001366:	4969      	ldr	r1, [pc, #420]	; (800150c <start_fill+0x860>)
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	440b      	add	r3, r1
 8001370:	3302      	adds	r3, #2
 8001372:	4602      	mov	r2, r0
 8001374:	701a      	strb	r2, [r3, #0]
 8001376:	e022      	b.n	80013be <start_fill+0x712>
				} else {
					i++;
 8001378:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800137c:	b29b      	uxth	r3, r3
 800137e:	3301      	adds	r3, #1
 8001380:	b29b      	uxth	r3, r3
 8001382:	81fb      	strh	r3, [r7, #14]
					stack[i][0] = straight;
 8001384:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001388:	4960      	ldr	r1, [pc, #384]	; (800150c <start_fill+0x860>)
 800138a:	4613      	mov	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	440b      	add	r3, r1
 8001392:	22fa      	movs	r2, #250	; 0xfa
 8001394:	701a      	strb	r2, [r3, #0]
					stack[i][1] = -1;
 8001396:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800139a:	495c      	ldr	r1, [pc, #368]	; (800150c <start_fill+0x860>)
 800139c:	4613      	mov	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4413      	add	r3, r2
 80013a2:	440b      	add	r3, r1
 80013a4:	3301      	adds	r3, #1
 80013a6:	22ff      	movs	r2, #255	; 0xff
 80013a8:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 80013aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013ae:	4957      	ldr	r1, [pc, #348]	; (800150c <start_fill+0x860>)
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	3302      	adds	r3, #2
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
				}
				go_straight(square_size, 0);
 80013be:	2100      	movs	r1, #0
 80013c0:	4855      	ldr	r0, [pc, #340]	; (8001518 <start_fill+0x86c>)
 80013c2:	f002 fb29 	bl	8003a18 <go_straight>
			if(frontfree){
 80013c6:	f000 bdc1 	b.w	8001f4c <start_fill+0x12a0>
			} else if(leftfree){
 80013ca:	7b3b      	ldrb	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d027      	beq.n	8001420 <start_fill+0x774>
				i++;
 80013d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	b29b      	uxth	r3, r3
 80013da:	81fb      	strh	r3, [r7, #14]
				stack[i][0] = turn_left_90;
 80013dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013e0:	494a      	ldr	r1, [pc, #296]	; (800150c <start_fill+0x860>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	22fc      	movs	r2, #252	; 0xfc
 80013ec:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 80013ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013f2:	4946      	ldr	r1, [pc, #280]	; (800150c <start_fill+0x860>)
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	3301      	adds	r3, #1
 80013fe:	22ff      	movs	r2, #255	; 0xff
 8001400:	701a      	strb	r2, [r3, #0]
				go_straight(d2, 1);
 8001402:	4b43      	ldr	r3, [pc, #268]	; (8001510 <start_fill+0x864>)
 8001404:	2101      	movs	r1, #1
 8001406:	4618      	mov	r0, r3
 8001408:	f002 fb06 	bl	8003a18 <go_straight>
				turn_left90(&direction);
 800140c:	4841      	ldr	r0, [pc, #260]	; (8001514 <start_fill+0x868>)
 800140e:	f002 f953 	bl	80036b8 <turn_left90>
				go_straight(d2, 0);
 8001412:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <start_fill+0x864>)
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fafe 	bl	8003a18 <go_straight>
			if(frontfree){
 800141c:	f000 bd96 	b.w	8001f4c <start_fill+0x12a0>
			} else if(rightfree){
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 8592 	beq.w	8001f4c <start_fill+0x12a0>
				i++;
 8001428:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800142c:	b29b      	uxth	r3, r3
 800142e:	3301      	adds	r3, #1
 8001430:	b29b      	uxth	r3, r3
 8001432:	81fb      	strh	r3, [r7, #14]
				stack[i][0] = turn_right_90;
 8001434:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001438:	4934      	ldr	r1, [pc, #208]	; (800150c <start_fill+0x860>)
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	440b      	add	r3, r1
 8001442:	22ff      	movs	r2, #255	; 0xff
 8001444:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 8001446:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800144a:	4930      	ldr	r1, [pc, #192]	; (800150c <start_fill+0x860>)
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	440b      	add	r3, r1
 8001454:	3301      	adds	r3, #1
 8001456:	22ff      	movs	r2, #255	; 0xff
 8001458:	701a      	strb	r2, [r3, #0]
				go_straight(d2, 1);
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <start_fill+0x864>)
 800145c:	2101      	movs	r1, #1
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fada 	bl	8003a18 <go_straight>
				turn_right90(&direction);
 8001464:	482b      	ldr	r0, [pc, #172]	; (8001514 <start_fill+0x868>)
 8001466:	f002 f9ff 	bl	8003868 <turn_right90>
				go_straight(d2, 0);
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <start_fill+0x864>)
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f002 fad2 	bl	8003a18 <go_straight>
			if(frontfree){
 8001474:	f000 bd6a 	b.w	8001f4c <start_fill+0x12a0>
			}
		} else {
			go_straight(d2, 1);
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <start_fill+0x864>)
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f002 facb 	bl	8003a18 <go_straight>
			u_turnf(&direction);
 8001482:	4824      	ldr	r0, [pc, #144]	; (8001514 <start_fill+0x868>)
 8001484:	f002 f83c 	bl	8003500 <u_turnf>
			go_straight(d2, 0);
 8001488:	4b21      	ldr	r3, [pc, #132]	; (8001510 <start_fill+0x864>)
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f002 fac3 	bl	8003a18 <go_straight>
			while(i != 0 && stack[i][1] == -1){
 8001492:	e188      	b.n	80017a6 <start_fill+0xafa>
				switch(stack[i][0]){
 8001494:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001498:	491c      	ldr	r1, [pc, #112]	; (800150c <start_fill+0x860>)
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	f993 3000 	ldrsb.w	r3, [r3]
 80014a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014aa:	d037      	beq.n	800151c <start_fill+0x870>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	da43      	bge.n	8001538 <start_fill+0x88c>
 80014b0:	f113 0f06 	cmn.w	r3, #6
 80014b4:	d003      	beq.n	80014be <start_fill+0x812>
 80014b6:	f113 0f04 	cmn.w	r3, #4
 80014ba:	d018      	beq.n	80014ee <start_fill+0x842>
 80014bc:	e03c      	b.n	8001538 <start_fill+0x88c>
					case straight:
						go_straight((float)stack[i][2] * square_size, 0);
 80014be:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014c2:	4912      	ldr	r1, [pc, #72]	; (800150c <start_fill+0x860>)
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	3302      	adds	r3, #2
 80014ce:	f993 3000 	ldrsb.w	r3, [r3]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fb96 	bl	8000c04 <__aeabi_i2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	490f      	ldr	r1, [pc, #60]	; (8001518 <start_fill+0x86c>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f7fe fe35 	bl	800014c <__aeabi_fmul>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 fa96 	bl	8003a18 <go_straight>
						break;
 80014ec:	e024      	b.n	8001538 <start_fill+0x88c>
					case turn_left_90:
						go_straight(d2, 1);
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <start_fill+0x864>)
 80014f0:	2101      	movs	r1, #1
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fa90 	bl	8003a18 <go_straight>
						turn_right90(&direction);
 80014f8:	4806      	ldr	r0, [pc, #24]	; (8001514 <start_fill+0x868>)
 80014fa:	f002 f9b5 	bl	8003868 <turn_right90>
						go_straight(d2, 0);
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <start_fill+0x864>)
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fa88 	bl	8003a18 <go_straight>
						break;
 8001508:	e016      	b.n	8001538 <start_fill+0x88c>
 800150a:	bf00      	nop
 800150c:	20000028 	.word	0x20000028
 8001510:	42e80000 	.word	0x42e80000
 8001514:	20000156 	.word	0x20000156
 8001518:	43960000 	.word	0x43960000
					case turn_right_90:
						go_straight(d2, 1);
 800151c:	4bc3      	ldr	r3, [pc, #780]	; (800182c <start_fill+0xb80>)
 800151e:	2101      	movs	r1, #1
 8001520:	4618      	mov	r0, r3
 8001522:	f002 fa79 	bl	8003a18 <go_straight>
						turn_left90(&direction);
 8001526:	48c2      	ldr	r0, [pc, #776]	; (8001830 <start_fill+0xb84>)
 8001528:	f002 f8c6 	bl	80036b8 <turn_left90>
						go_straight(d2, 0);
 800152c:	4bbf      	ldr	r3, [pc, #764]	; (800182c <start_fill+0xb80>)
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fa71 	bl	8003a18 <go_straight>
						break;
 8001536:	bf00      	nop
				}
				i--;
 8001538:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800153c:	b29b      	uxth	r3, r3
 800153e:	3b01      	subs	r3, #1
 8001540:	b29b      	uxth	r3, r3
 8001542:	81fb      	strh	r3, [r7, #14]
				if((i != 0 && stack[i][1] != -1) &&
 8001544:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 812c 	beq.w	80017a6 <start_fill+0xafa>
 800154e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001552:	49b8      	ldr	r1, [pc, #736]	; (8001834 <start_fill+0xb88>)
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	440b      	add	r3, r1
 800155c:	3301      	adds	r3, #1
 800155e:	f993 3000 	ldrsb.w	r3, [r3]
 8001562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001566:	f000 811e 	beq.w	80017a6 <start_fill+0xafa>
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 800156a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800156e:	49b1      	ldr	r1, [pc, #708]	; (8001834 <start_fill+0xb88>)
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	440b      	add	r3, r1
 8001578:	3302      	adds	r3, #2
 800157a:	f993 3000 	ldrsb.w	r3, [r3]
 800157e:	4618      	mov	r0, r3
 8001580:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001584:	49ab      	ldr	r1, [pc, #684]	; (8001834 <start_fill+0xb88>)
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	440b      	add	r3, r1
 800158e:	3301      	adds	r3, #1
 8001590:	f993 3000 	ldrsb.w	r3, [r3]
 8001594:	4619      	mov	r1, r3
 8001596:	4aa8      	ldr	r2, [pc, #672]	; (8001838 <start_fill+0xb8c>)
 8001598:	4603      	mov	r3, r0
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4403      	add	r3, r0
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
				if((i != 0 && stack[i][1] != -1) &&
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d120      	bne.n	80015f0 <start_fill+0x944>
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 80015ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015b2:	49a0      	ldr	r1, [pc, #640]	; (8001834 <start_fill+0xb88>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	3302      	adds	r3, #2
 80015be:	f993 3000 	ldrsb.w	r3, [r3]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015c8:	499a      	ldr	r1, [pc, #616]	; (8001834 <start_fill+0xb88>)
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	3301      	adds	r3, #1
 80015d4:	f993 3000 	ldrsb.w	r3, [r3]
 80015d8:	1e5a      	subs	r2, r3, #1
 80015da:	4998      	ldr	r1, [pc, #608]	; (800183c <start_fill+0xb90>)
 80015dc:	4603      	mov	r3, r0
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4403      	add	r3, r0
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	440b      	add	r3, r1
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80db 	beq.w	80017a6 <start_fill+0xafa>
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80015f0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015f4:	498f      	ldr	r1, [pc, #572]	; (8001834 <start_fill+0xb88>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	3302      	adds	r3, #2
 8001600:	f993 3000 	ldrsb.w	r3, [r3]
 8001604:	4618      	mov	r0, r3
 8001606:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800160a:	498a      	ldr	r1, [pc, #552]	; (8001834 <start_fill+0xb88>)
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	440b      	add	r3, r1
 8001614:	3301      	adds	r3, #1
 8001616:	f993 3000 	ldrsb.w	r3, [r3]
 800161a:	4619      	mov	r1, r3
 800161c:	4a86      	ldr	r2, [pc, #536]	; (8001838 <start_fill+0xb8c>)
 800161e:	4603      	mov	r3, r0
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4403      	add	r3, r0
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	440b      	add	r3, r1
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001630:	2b00      	cmp	r3, #0
 8001632:	d120      	bne.n	8001676 <start_fill+0x9ca>
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001634:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001638:	497e      	ldr	r1, [pc, #504]	; (8001834 <start_fill+0xb88>)
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	440b      	add	r3, r1
 8001642:	3302      	adds	r3, #2
 8001644:	f993 3000 	ldrsb.w	r3, [r3]
 8001648:	4618      	mov	r0, r3
 800164a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800164e:	4979      	ldr	r1, [pc, #484]	; (8001834 <start_fill+0xb88>)
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	440b      	add	r3, r1
 8001658:	3301      	adds	r3, #1
 800165a:	f993 3000 	ldrsb.w	r3, [r3]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	4976      	ldr	r1, [pc, #472]	; (800183c <start_fill+0xb90>)
 8001662:	4603      	mov	r3, r0
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4403      	add	r3, r0
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	440b      	add	r3, r1
 800166c:	4413      	add	r3, r2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 8098 	beq.w	80017a6 <start_fill+0xafa>
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001676:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800167a:	496e      	ldr	r1, [pc, #440]	; (8001834 <start_fill+0xb88>)
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	440b      	add	r3, r1
 8001684:	3302      	adds	r3, #2
 8001686:	f993 3000 	ldrsb.w	r3, [r3]
 800168a:	4618      	mov	r0, r3
 800168c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001690:	4968      	ldr	r1, [pc, #416]	; (8001834 <start_fill+0xb88>)
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	440b      	add	r3, r1
 800169a:	3301      	adds	r3, #1
 800169c:	f993 3000 	ldrsb.w	r3, [r3]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4a65      	ldr	r2, [pc, #404]	; (8001838 <start_fill+0xb8c>)
 80016a4:	4603      	mov	r3, r0
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4403      	add	r3, r0
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11f      	bne.n	80016fa <start_fill+0xa4e>
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 80016ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016be:	495d      	ldr	r1, [pc, #372]	; (8001834 <start_fill+0xb88>)
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	3302      	adds	r3, #2
 80016ca:	f993 3000 	ldrsb.w	r3, [r3]
 80016ce:	1e5a      	subs	r2, r3, #1
 80016d0:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80016d4:	4857      	ldr	r0, [pc, #348]	; (8001834 <start_fill+0xb88>)
 80016d6:	460b      	mov	r3, r1
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	440b      	add	r3, r1
 80016dc:	4403      	add	r3, r0
 80016de:	3301      	adds	r3, #1
 80016e0:	f993 3000 	ldrsb.w	r3, [r3]
 80016e4:	4618      	mov	r0, r3
 80016e6:	4955      	ldr	r1, [pc, #340]	; (800183c <start_fill+0xb90>)
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	440b      	add	r3, r1
 80016f2:	4403      	add	r3, r0
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d055      	beq.n	80017a6 <start_fill+0xafa>
						((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 80016fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016fe:	494d      	ldr	r1, [pc, #308]	; (8001834 <start_fill+0xb88>)
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	440b      	add	r3, r1
 8001708:	3302      	adds	r3, #2
 800170a:	f993 3000 	ldrsb.w	r3, [r3]
 800170e:	4618      	mov	r0, r3
 8001710:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001714:	4947      	ldr	r1, [pc, #284]	; (8001834 <start_fill+0xb88>)
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	440b      	add	r3, r1
 800171e:	3301      	adds	r3, #1
 8001720:	f993 3000 	ldrsb.w	r3, [r3]
 8001724:	4619      	mov	r1, r3
 8001726:	4a44      	ldr	r2, [pc, #272]	; (8001838 <start_fill+0xb8c>)
 8001728:	4603      	mov	r3, r0
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4403      	add	r3, r0
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	440b      	add	r3, r1
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 800173a:	2b00      	cmp	r3, #0
 800173c:	d11f      	bne.n	800177e <start_fill+0xad2>
						((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 800173e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001742:	493c      	ldr	r1, [pc, #240]	; (8001834 <start_fill+0xb88>)
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	440b      	add	r3, r1
 800174c:	3302      	adds	r3, #2
 800174e:	f993 3000 	ldrsb.w	r3, [r3]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001758:	4836      	ldr	r0, [pc, #216]	; (8001834 <start_fill+0xb88>)
 800175a:	460b      	mov	r3, r1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	440b      	add	r3, r1
 8001760:	4403      	add	r3, r0
 8001762:	3301      	adds	r3, #1
 8001764:	f993 3000 	ldrsb.w	r3, [r3]
 8001768:	4618      	mov	r0, r3
 800176a:	4934      	ldr	r1, [pc, #208]	; (800183c <start_fill+0xb90>)
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	440b      	add	r3, r1
 8001776:	4403      	add	r3, r0
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d013      	beq.n	80017a6 <start_fill+0xafa>
					stack[i][1] = -1;
 800177e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001782:	492c      	ldr	r1, [pc, #176]	; (8001834 <start_fill+0xb88>)
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	440b      	add	r3, r1
 800178c:	3301      	adds	r3, #1
 800178e:	22ff      	movs	r2, #255	; 0xff
 8001790:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 8001792:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001796:	4927      	ldr	r1, [pc, #156]	; (8001834 <start_fill+0xb88>)
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	440b      	add	r3, r1
 80017a0:	3302      	adds	r3, #2
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
			while(i != 0 && stack[i][1] == -1){
 80017a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00d      	beq.n	80017ca <start_fill+0xb1e>
 80017ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017b2:	4920      	ldr	r1, [pc, #128]	; (8001834 <start_fill+0xb88>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	3301      	adds	r3, #1
 80017be:	f993 3000 	ldrsb.w	r3, [r3]
 80017c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c6:	f43f ae65 	beq.w	8001494 <start_fill+0x7e8>
				}
			}
			if(i == 0){
 80017ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d104      	bne.n	80017dc <start_fill+0xb30>
				u_turnf(&direction);
 80017d2:	4817      	ldr	r0, [pc, #92]	; (8001830 <start_fill+0xb84>)
 80017d4:	f001 fe94 	bl	8003500 <u_turnf>
				break;
 80017d8:	f000 bc77 	b.w	80020ca <start_fill+0x141e>
			}
			x = stack[i][1];
 80017dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017e0:	4914      	ldr	r1, [pc, #80]	; (8001834 <start_fill+0xb88>)
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	3301      	adds	r3, #1
 80017ec:	f993 2000 	ldrsb.w	r2, [r3]
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <start_fill+0xb94>)
 80017f2:	701a      	strb	r2, [r3, #0]
			y = stack[i][2];
 80017f4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017f8:	490e      	ldr	r1, [pc, #56]	; (8001834 <start_fill+0xb88>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	440b      	add	r3, r1
 8001802:	3302      	adds	r3, #2
 8001804:	f993 2000 	ldrsb.w	r2, [r3]
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <start_fill+0xb98>)
 800180a:	701a      	strb	r2, [r3, #0]
			switch(direction){
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <start_fill+0xb84>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b03      	cmp	r3, #3
 8001812:	f200 83a4 	bhi.w	8001f5e <start_fill+0x12b2>
 8001816:	a201      	add	r2, pc, #4	; (adr r2, 800181c <start_fill+0xb70>)
 8001818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181c:	08001849 	.word	0x08001849
 8001820:	080019fb 	.word	0x080019fb
 8001824:	08001bcd 	.word	0x08001bcd
 8001828:	08001d7f 	.word	0x08001d7f
 800182c:	42e80000 	.word	0x42e80000
 8001830:	20000156 	.word	0x20000156
 8001834:	20000028 	.word	0x20000028
 8001838:	200002a4 	.word	0x200002a4
 800183c:	20000308 	.word	0x20000308
 8001840:	20000154 	.word	0x20000154
 8001844:	20000155 	.word	0x20000155
				case west:
					if(stack[i][0] == straight){
 8001848:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800184c:	49b2      	ldr	r1, [pc, #712]	; (8001b18 <start_fill+0xe6c>)
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	440b      	add	r3, r1
 8001856:	f993 3000 	ldrsb.w	r3, [r3]
 800185a:	f113 0f06 	cmn.w	r3, #6
 800185e:	f040 8082 	bne.w	8001966 <start_fill+0xcba>
						if((maze[y][x] & top_wall) == 0 && !visited[y - 1][x]){
 8001862:	4bae      	ldr	r3, [pc, #696]	; (8001b1c <start_fill+0xe70>)
 8001864:	f993 3000 	ldrsb.w	r3, [r3]
 8001868:	4619      	mov	r1, r3
 800186a:	4bad      	ldr	r3, [pc, #692]	; (8001b20 <start_fill+0xe74>)
 800186c:	f993 3000 	ldrsb.w	r3, [r3]
 8001870:	4618      	mov	r0, r3
 8001872:	4aac      	ldr	r2, [pc, #688]	; (8001b24 <start_fill+0xe78>)
 8001874:	460b      	mov	r3, r1
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	4403      	add	r3, r0
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d12b      	bne.n	80018e2 <start_fill+0xc36>
 800188a:	4ba4      	ldr	r3, [pc, #656]	; (8001b1c <start_fill+0xe70>)
 800188c:	f993 3000 	ldrsb.w	r3, [r3]
 8001890:	1e5a      	subs	r2, r3, #1
 8001892:	4ba3      	ldr	r3, [pc, #652]	; (8001b20 <start_fill+0xe74>)
 8001894:	f993 3000 	ldrsb.w	r3, [r3]
 8001898:	4618      	mov	r0, r3
 800189a:	49a3      	ldr	r1, [pc, #652]	; (8001b28 <start_fill+0xe7c>)
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	440b      	add	r3, r1
 80018a6:	4403      	add	r3, r0
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	f083 0301 	eor.w	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d016      	beq.n	80018e2 <start_fill+0xc36>
							stack[i][0] = turn_left_90;
 80018b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018b8:	4997      	ldr	r1, [pc, #604]	; (8001b18 <start_fill+0xe6c>)
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	22fc      	movs	r2, #252	; 0xfc
 80018c4:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 80018c6:	4b99      	ldr	r3, [pc, #612]	; (8001b2c <start_fill+0xe80>)
 80018c8:	2101      	movs	r1, #1
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 f8a4 	bl	8003a18 <go_straight>
							turn_right90(&direction);
 80018d0:	4897      	ldr	r0, [pc, #604]	; (8001b30 <start_fill+0xe84>)
 80018d2:	f001 ffc9 	bl	8003868 <turn_right90>
							go_straight(d2, 0);
 80018d6:	4b95      	ldr	r3, [pc, #596]	; (8001b2c <start_fill+0xe80>)
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 f89c 	bl	8003a18 <go_straight>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
							go_straight(square_size, 0);
						}
					}
					break;
 80018e0:	e336      	b.n	8001f50 <start_fill+0x12a4>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 80018e2:	4b8e      	ldr	r3, [pc, #568]	; (8001b1c <start_fill+0xe70>)
 80018e4:	f993 3000 	ldrsb.w	r3, [r3]
 80018e8:	4619      	mov	r1, r3
 80018ea:	4b8d      	ldr	r3, [pc, #564]	; (8001b20 <start_fill+0xe74>)
 80018ec:	f993 3000 	ldrsb.w	r3, [r3]
 80018f0:	4618      	mov	r0, r3
 80018f2:	4a8c      	ldr	r2, [pc, #560]	; (8001b24 <start_fill+0xe78>)
 80018f4:	460b      	mov	r3, r1
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	4403      	add	r3, r0
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 8322 	bne.w	8001f50 <start_fill+0x12a4>
 800190c:	4b83      	ldr	r3, [pc, #524]	; (8001b1c <start_fill+0xe70>)
 800190e:	f993 3000 	ldrsb.w	r3, [r3]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	4b82      	ldr	r3, [pc, #520]	; (8001b20 <start_fill+0xe74>)
 8001916:	f993 3000 	ldrsb.w	r3, [r3]
 800191a:	4618      	mov	r0, r3
 800191c:	4982      	ldr	r1, [pc, #520]	; (8001b28 <start_fill+0xe7c>)
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	440b      	add	r3, r1
 8001928:	4403      	add	r3, r0
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	f083 0301 	eor.w	r3, r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 830c 	beq.w	8001f50 <start_fill+0x12a4>
							stack[i][0] = turn_right_90;
 8001938:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800193c:	4976      	ldr	r1, [pc, #472]	; (8001b18 <start_fill+0xe6c>)
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	440b      	add	r3, r1
 8001946:	22ff      	movs	r2, #255	; 0xff
 8001948:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 800194a:	4b78      	ldr	r3, [pc, #480]	; (8001b2c <start_fill+0xe80>)
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f002 f862 	bl	8003a18 <go_straight>
							turn_left90(&direction);
 8001954:	4876      	ldr	r0, [pc, #472]	; (8001b30 <start_fill+0xe84>)
 8001956:	f001 feaf 	bl	80036b8 <turn_left90>
							go_straight(d2, 0);
 800195a:	4b74      	ldr	r3, [pc, #464]	; (8001b2c <start_fill+0xe80>)
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f002 f85a 	bl	8003a18 <go_straight>
					break;
 8001964:	e2f4      	b.n	8001f50 <start_fill+0x12a4>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 8001966:	4b6d      	ldr	r3, [pc, #436]	; (8001b1c <start_fill+0xe70>)
 8001968:	f993 3000 	ldrsb.w	r3, [r3]
 800196c:	4619      	mov	r1, r3
 800196e:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <start_fill+0xe74>)
 8001970:	f993 3000 	ldrsb.w	r3, [r3]
 8001974:	4618      	mov	r0, r3
 8001976:	4a6b      	ldr	r2, [pc, #428]	; (8001b24 <start_fill+0xe78>)
 8001978:	460b      	mov	r3, r1
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	4403      	add	r3, r0
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	f040 82e0 	bne.w	8001f50 <start_fill+0x12a4>
 8001990:	4b62      	ldr	r3, [pc, #392]	; (8001b1c <start_fill+0xe70>)
 8001992:	f993 3000 	ldrsb.w	r3, [r3]
 8001996:	4618      	mov	r0, r3
 8001998:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <start_fill+0xe74>)
 800199a:	f993 3000 	ldrsb.w	r3, [r3]
 800199e:	1e5a      	subs	r2, r3, #1
 80019a0:	4961      	ldr	r1, [pc, #388]	; (8001b28 <start_fill+0xe7c>)
 80019a2:	4603      	mov	r3, r0
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4403      	add	r3, r0
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	440b      	add	r3, r1
 80019ac:	4413      	add	r3, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	f083 0301 	eor.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 82ca 	beq.w	8001f50 <start_fill+0x12a4>
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 80019bc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019c0:	4955      	ldr	r1, [pc, #340]	; (8001b18 <start_fill+0xe6c>)
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	f993 3000 	ldrsb.w	r3, [r3]
 80019ce:	f113 0f04 	cmn.w	r3, #4
 80019d2:	d102      	bne.n	80019da <start_fill+0xd2e>
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	e001      	b.n	80019de <start_fill+0xd32>
 80019da:	f06f 0003 	mvn.w	r0, #3
 80019de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019e2:	494d      	ldr	r1, [pc, #308]	; (8001b18 <start_fill+0xe6c>)
 80019e4:	4613      	mov	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	4602      	mov	r2, r0
 80019ee:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 80019f0:	2100      	movs	r1, #0
 80019f2:	4850      	ldr	r0, [pc, #320]	; (8001b34 <start_fill+0xe88>)
 80019f4:	f002 f810 	bl	8003a18 <go_straight>
					break;
 80019f8:	e2aa      	b.n	8001f50 <start_fill+0x12a4>
				case east:
					if(stack[i][0] == straight){
 80019fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019fe:	4946      	ldr	r1, [pc, #280]	; (8001b18 <start_fill+0xe6c>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f993 3000 	ldrsb.w	r3, [r3]
 8001a0c:	f113 0f06 	cmn.w	r3, #6
 8001a10:	f040 8092 	bne.w	8001b38 <start_fill+0xe8c>
						if(((maze[y][x] & top_wall) == 0) && !visited[y - 1][x]){
 8001a14:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <start_fill+0xe70>)
 8001a16:	f993 3000 	ldrsb.w	r3, [r3]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <start_fill+0xe74>)
 8001a1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a22:	4618      	mov	r0, r3
 8001a24:	4a3f      	ldr	r2, [pc, #252]	; (8001b24 <start_fill+0xe78>)
 8001a26:	460b      	mov	r3, r1
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	4403      	add	r3, r0
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d12b      	bne.n	8001a94 <start_fill+0xde8>
 8001a3c:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <start_fill+0xe70>)
 8001a3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a42:	1e5a      	subs	r2, r3, #1
 8001a44:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <start_fill+0xe74>)
 8001a46:	f993 3000 	ldrsb.w	r3, [r3]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	4936      	ldr	r1, [pc, #216]	; (8001b28 <start_fill+0xe7c>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	440b      	add	r3, r1
 8001a58:	4403      	add	r3, r0
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	f083 0301 	eor.w	r3, r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d016      	beq.n	8001a94 <start_fill+0xde8>
							stack[i][0] = turn_right_90;
 8001a66:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a6a:	492b      	ldr	r1, [pc, #172]	; (8001b18 <start_fill+0xe6c>)
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	440b      	add	r3, r1
 8001a74:	22ff      	movs	r2, #255	; 0xff
 8001a76:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001a78:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <start_fill+0xe80>)
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 ffcb 	bl	8003a18 <go_straight>
							turn_left90(&direction);
 8001a82:	482b      	ldr	r0, [pc, #172]	; (8001b30 <start_fill+0xe84>)
 8001a84:	f001 fe18 	bl	80036b8 <turn_left90>
							go_straight(d2, 0);
 8001a88:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <start_fill+0xe80>)
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 ffc3 	bl	8003a18 <go_straight>
						if((maze[y][x] & right_wall) == 0 && !visited[y][x + 1]){
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
							go_straight(square_size, 0);
						}
					}
					break;
 8001a92:	e25f      	b.n	8001f54 <start_fill+0x12a8>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <start_fill+0xe70>)
 8001a96:	f993 3000 	ldrsb.w	r3, [r3]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <start_fill+0xe74>)
 8001a9e:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <start_fill+0xe78>)
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	4403      	add	r3, r0
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f040 824b 	bne.w	8001f54 <start_fill+0x12a8>
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <start_fill+0xe70>)
 8001ac0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <start_fill+0xe74>)
 8001ac8:	f993 3000 	ldrsb.w	r3, [r3]
 8001acc:	4618      	mov	r0, r3
 8001ace:	4916      	ldr	r1, [pc, #88]	; (8001b28 <start_fill+0xe7c>)
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	440b      	add	r3, r1
 8001ada:	4403      	add	r3, r0
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	f083 0301 	eor.w	r3, r3, #1
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 8235 	beq.w	8001f54 <start_fill+0x12a8>
							stack[i][0] = turn_left_90;
 8001aea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001aee:	490a      	ldr	r1, [pc, #40]	; (8001b18 <start_fill+0xe6c>)
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	22fc      	movs	r2, #252	; 0xfc
 8001afa:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <start_fill+0xe80>)
 8001afe:	2101      	movs	r1, #1
 8001b00:	4618      	mov	r0, r3
 8001b02:	f001 ff89 	bl	8003a18 <go_straight>
							turn_right90(&direction);
 8001b06:	480a      	ldr	r0, [pc, #40]	; (8001b30 <start_fill+0xe84>)
 8001b08:	f001 feae 	bl	8003868 <turn_right90>
							go_straight(d2, 0);
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <start_fill+0xe80>)
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 ff81 	bl	8003a18 <go_straight>
					break;
 8001b16:	e21d      	b.n	8001f54 <start_fill+0x12a8>
 8001b18:	20000028 	.word	0x20000028
 8001b1c:	20000155 	.word	0x20000155
 8001b20:	20000154 	.word	0x20000154
 8001b24:	200002a4 	.word	0x200002a4
 8001b28:	20000308 	.word	0x20000308
 8001b2c:	42e80000 	.word	0x42e80000
 8001b30:	20000156 	.word	0x20000156
 8001b34:	43960000 	.word	0x43960000
						if((maze[y][x] & right_wall) == 0 && !visited[y][x + 1]){
 8001b38:	4bb7      	ldr	r3, [pc, #732]	; (8001e18 <start_fill+0x116c>)
 8001b3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4bb6      	ldr	r3, [pc, #728]	; (8001e1c <start_fill+0x1170>)
 8001b42:	f993 3000 	ldrsb.w	r3, [r3]
 8001b46:	4618      	mov	r0, r3
 8001b48:	4ab5      	ldr	r2, [pc, #724]	; (8001e20 <start_fill+0x1174>)
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	4403      	add	r3, r0
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f040 81f9 	bne.w	8001f54 <start_fill+0x12a8>
 8001b62:	4bad      	ldr	r3, [pc, #692]	; (8001e18 <start_fill+0x116c>)
 8001b64:	f993 3000 	ldrsb.w	r3, [r3]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	4bac      	ldr	r3, [pc, #688]	; (8001e1c <start_fill+0x1170>)
 8001b6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	49ac      	ldr	r1, [pc, #688]	; (8001e24 <start_fill+0x1178>)
 8001b74:	4603      	mov	r3, r0
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4403      	add	r3, r0
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	440b      	add	r3, r1
 8001b7e:	4413      	add	r3, r2
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	f083 0301 	eor.w	r3, r3, #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 81e3 	beq.w	8001f54 <start_fill+0x12a8>
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001b8e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b92:	49a5      	ldr	r1, [pc, #660]	; (8001e28 <start_fill+0x117c>)
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f993 3000 	ldrsb.w	r3, [r3]
 8001ba0:	f113 0f04 	cmn.w	r3, #4
 8001ba4:	d102      	bne.n	8001bac <start_fill+0xf00>
 8001ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8001baa:	e001      	b.n	8001bb0 <start_fill+0xf04>
 8001bac:	f06f 0003 	mvn.w	r0, #3
 8001bb0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bb4:	499c      	ldr	r1, [pc, #624]	; (8001e28 <start_fill+0x117c>)
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4899      	ldr	r0, [pc, #612]	; (8001e2c <start_fill+0x1180>)
 8001bc6:	f001 ff27 	bl	8003a18 <go_straight>
					break;
 8001bca:	e1c3      	b.n	8001f54 <start_fill+0x12a8>
				case north:
					if(stack[i][0] == straight){
 8001bcc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bd0:	4995      	ldr	r1, [pc, #596]	; (8001e28 <start_fill+0x117c>)
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	f993 3000 	ldrsb.w	r3, [r3]
 8001bde:	f113 0f06 	cmn.w	r3, #6
 8001be2:	f040 8082 	bne.w	8001cea <start_fill+0x103e>
						if((maze[y][x] & left_wall) == 0 && !visited[y][x - 1]){
 8001be6:	4b8c      	ldr	r3, [pc, #560]	; (8001e18 <start_fill+0x116c>)
 8001be8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bec:	4619      	mov	r1, r3
 8001bee:	4b8b      	ldr	r3, [pc, #556]	; (8001e1c <start_fill+0x1170>)
 8001bf0:	f993 3000 	ldrsb.w	r3, [r3]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	4a8a      	ldr	r2, [pc, #552]	; (8001e20 <start_fill+0x1174>)
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	4403      	add	r3, r0
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d12b      	bne.n	8001c66 <start_fill+0xfba>
 8001c0e:	4b82      	ldr	r3, [pc, #520]	; (8001e18 <start_fill+0x116c>)
 8001c10:	f993 3000 	ldrsb.w	r3, [r3]
 8001c14:	4618      	mov	r0, r3
 8001c16:	4b81      	ldr	r3, [pc, #516]	; (8001e1c <start_fill+0x1170>)
 8001c18:	f993 3000 	ldrsb.w	r3, [r3]
 8001c1c:	1e5a      	subs	r2, r3, #1
 8001c1e:	4981      	ldr	r1, [pc, #516]	; (8001e24 <start_fill+0x1178>)
 8001c20:	4603      	mov	r3, r0
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4403      	add	r3, r0
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	440b      	add	r3, r1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	f083 0301 	eor.w	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d016      	beq.n	8001c66 <start_fill+0xfba>
							stack[i][0] = turn_right_90;
 8001c38:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c3c:	497a      	ldr	r1, [pc, #488]	; (8001e28 <start_fill+0x117c>)
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	440b      	add	r3, r1
 8001c46:	22ff      	movs	r2, #255	; 0xff
 8001c48:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001c4a:	4b79      	ldr	r3, [pc, #484]	; (8001e30 <start_fill+0x1184>)
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f001 fee2 	bl	8003a18 <go_straight>
							turn_left90(&direction);
 8001c54:	4877      	ldr	r0, [pc, #476]	; (8001e34 <start_fill+0x1188>)
 8001c56:	f001 fd2f 	bl	80036b8 <turn_left90>
							go_straight(d2, 0);
 8001c5a:	4b75      	ldr	r3, [pc, #468]	; (8001e30 <start_fill+0x1184>)
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 feda 	bl	8003a18 <go_straight>
						if((maze[y][x] & top_wall) == 0 && !visited[y - 1][x]){
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
							go_straight(square_size, 0);
						}
					}
					break;
 8001c64:	e178      	b.n	8001f58 <start_fill+0x12ac>
						} else if((maze[y][x] & right_wall) == 0 && !visited[y][x + 1]) {
 8001c66:	4b6c      	ldr	r3, [pc, #432]	; (8001e18 <start_fill+0x116c>)
 8001c68:	f993 3000 	ldrsb.w	r3, [r3]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4b6b      	ldr	r3, [pc, #428]	; (8001e1c <start_fill+0x1170>)
 8001c70:	f993 3000 	ldrsb.w	r3, [r3]
 8001c74:	4618      	mov	r0, r3
 8001c76:	4a6a      	ldr	r2, [pc, #424]	; (8001e20 <start_fill+0x1174>)
 8001c78:	460b      	mov	r3, r1
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	4403      	add	r3, r0
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 8164 	bne.w	8001f58 <start_fill+0x12ac>
 8001c90:	4b61      	ldr	r3, [pc, #388]	; (8001e18 <start_fill+0x116c>)
 8001c92:	f993 3000 	ldrsb.w	r3, [r3]
 8001c96:	4618      	mov	r0, r3
 8001c98:	4b60      	ldr	r3, [pc, #384]	; (8001e1c <start_fill+0x1170>)
 8001c9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	4960      	ldr	r1, [pc, #384]	; (8001e24 <start_fill+0x1178>)
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4403      	add	r3, r0
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	440b      	add	r3, r1
 8001cac:	4413      	add	r3, r2
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	f083 0301 	eor.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 814e 	beq.w	8001f58 <start_fill+0x12ac>
							stack[i][0] = turn_left_90;
 8001cbc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001cc0:	4959      	ldr	r1, [pc, #356]	; (8001e28 <start_fill+0x117c>)
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	22fc      	movs	r2, #252	; 0xfc
 8001ccc:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001cce:	4b58      	ldr	r3, [pc, #352]	; (8001e30 <start_fill+0x1184>)
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 fea0 	bl	8003a18 <go_straight>
							turn_right90(&direction);
 8001cd8:	4856      	ldr	r0, [pc, #344]	; (8001e34 <start_fill+0x1188>)
 8001cda:	f001 fdc5 	bl	8003868 <turn_right90>
							go_straight(d2, 0);
 8001cde:	4b54      	ldr	r3, [pc, #336]	; (8001e30 <start_fill+0x1184>)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 fe98 	bl	8003a18 <go_straight>
					break;
 8001ce8:	e136      	b.n	8001f58 <start_fill+0x12ac>
						if((maze[y][x] & top_wall) == 0 && !visited[y - 1][x]){
 8001cea:	4b4b      	ldr	r3, [pc, #300]	; (8001e18 <start_fill+0x116c>)
 8001cec:	f993 3000 	ldrsb.w	r3, [r3]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4b4a      	ldr	r3, [pc, #296]	; (8001e1c <start_fill+0x1170>)
 8001cf4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	4a49      	ldr	r2, [pc, #292]	; (8001e20 <start_fill+0x1174>)
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	4403      	add	r3, r0
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 8122 	bne.w	8001f58 <start_fill+0x12ac>
 8001d14:	4b40      	ldr	r3, [pc, #256]	; (8001e18 <start_fill+0x116c>)
 8001d16:	f993 3000 	ldrsb.w	r3, [r3]
 8001d1a:	1e5a      	subs	r2, r3, #1
 8001d1c:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <start_fill+0x1170>)
 8001d1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d22:	4618      	mov	r0, r3
 8001d24:	493f      	ldr	r1, [pc, #252]	; (8001e24 <start_fill+0x1178>)
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	440b      	add	r3, r1
 8001d30:	4403      	add	r3, r0
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 810c 	beq.w	8001f58 <start_fill+0x12ac>
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001d40:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d44:	4938      	ldr	r1, [pc, #224]	; (8001e28 <start_fill+0x117c>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d52:	f113 0f04 	cmn.w	r3, #4
 8001d56:	d102      	bne.n	8001d5e <start_fill+0x10b2>
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	e001      	b.n	8001d62 <start_fill+0x10b6>
 8001d5e:	f06f 0003 	mvn.w	r0, #3
 8001d62:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d66:	4930      	ldr	r1, [pc, #192]	; (8001e28 <start_fill+0x117c>)
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	4602      	mov	r2, r0
 8001d72:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 8001d74:	2100      	movs	r1, #0
 8001d76:	482d      	ldr	r0, [pc, #180]	; (8001e2c <start_fill+0x1180>)
 8001d78:	f001 fe4e 	bl	8003a18 <go_straight>
					break;
 8001d7c:	e0ec      	b.n	8001f58 <start_fill+0x12ac>
				case south:
					if(stack[i][0] == straight){
 8001d7e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d82:	4929      	ldr	r1, [pc, #164]	; (8001e28 <start_fill+0x117c>)
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d90:	f113 0f06 	cmn.w	r3, #6
 8001d94:	f040 8090 	bne.w	8001eb8 <start_fill+0x120c>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 8001d98:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <start_fill+0x116c>)
 8001d9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <start_fill+0x1170>)
 8001da2:	f993 3000 	ldrsb.w	r3, [r3]
 8001da6:	4618      	mov	r0, r3
 8001da8:	4a1d      	ldr	r2, [pc, #116]	; (8001e20 <start_fill+0x1174>)
 8001daa:	460b      	mov	r3, r1
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	4403      	add	r3, r0
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d13b      	bne.n	8001e38 <start_fill+0x118c>
 8001dc0:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <start_fill+0x116c>)
 8001dc2:	f993 3000 	ldrsb.w	r3, [r3]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <start_fill+0x1170>)
 8001dca:	f993 3000 	ldrsb.w	r3, [r3]
 8001dce:	1e5a      	subs	r2, r3, #1
 8001dd0:	4914      	ldr	r1, [pc, #80]	; (8001e24 <start_fill+0x1178>)
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4403      	add	r3, r0
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	440b      	add	r3, r1
 8001ddc:	4413      	add	r3, r2
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	f083 0301 	eor.w	r3, r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d026      	beq.n	8001e38 <start_fill+0x118c>
							stack[i][0] = turn_left_90;
 8001dea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001dee:	490e      	ldr	r1, [pc, #56]	; (8001e28 <start_fill+0x117c>)
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	440b      	add	r3, r1
 8001df8:	22fc      	movs	r2, #252	; 0xfc
 8001dfa:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <start_fill+0x1184>)
 8001dfe:	2101      	movs	r1, #1
 8001e00:	4618      	mov	r0, r3
 8001e02:	f001 fe09 	bl	8003a18 <go_straight>
							turn_right90(&direction);
 8001e06:	480b      	ldr	r0, [pc, #44]	; (8001e34 <start_fill+0x1188>)
 8001e08:	f001 fd2e 	bl	8003868 <turn_right90>
							go_straight(d2, 0);
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <start_fill+0x1184>)
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f001 fe01 	bl	8003a18 <go_straight>
						if((maze[y][x] & bottom_wall) == 0 && !visited[y + 1][x]){
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
							go_straight(square_size, 0);
						}
					}
					break;
 8001e16:	e0a1      	b.n	8001f5c <start_fill+0x12b0>
 8001e18:	20000155 	.word	0x20000155
 8001e1c:	20000154 	.word	0x20000154
 8001e20:	200002a4 	.word	0x200002a4
 8001e24:	20000308 	.word	0x20000308
 8001e28:	20000028 	.word	0x20000028
 8001e2c:	43960000 	.word	0x43960000
 8001e30:	42e80000 	.word	0x42e80000
 8001e34:	20000156 	.word	0x20000156
						} else if(((maze[y][x] & right_wall) == 0) && !visited[y][x + 1]){
 8001e38:	4ba6      	ldr	r3, [pc, #664]	; (80020d4 <start_fill+0x1428>)
 8001e3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4ba5      	ldr	r3, [pc, #660]	; (80020d8 <start_fill+0x142c>)
 8001e42:	f993 3000 	ldrsb.w	r3, [r3]
 8001e46:	4618      	mov	r0, r3
 8001e48:	4aa4      	ldr	r2, [pc, #656]	; (80020dc <start_fill+0x1430>)
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	4403      	add	r3, r0
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d17d      	bne.n	8001f5c <start_fill+0x12b0>
 8001e60:	4b9c      	ldr	r3, [pc, #624]	; (80020d4 <start_fill+0x1428>)
 8001e62:	f993 3000 	ldrsb.w	r3, [r3]
 8001e66:	4618      	mov	r0, r3
 8001e68:	4b9b      	ldr	r3, [pc, #620]	; (80020d8 <start_fill+0x142c>)
 8001e6a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	499b      	ldr	r1, [pc, #620]	; (80020e0 <start_fill+0x1434>)
 8001e72:	4603      	mov	r3, r0
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4403      	add	r3, r0
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	440b      	add	r3, r1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	f083 0301 	eor.w	r3, r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d068      	beq.n	8001f5c <start_fill+0x12b0>
							stack[i][0] = turn_right_90;
 8001e8a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e8e:	4995      	ldr	r1, [pc, #596]	; (80020e4 <start_fill+0x1438>)
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	22ff      	movs	r2, #255	; 0xff
 8001e9a:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001e9c:	4b92      	ldr	r3, [pc, #584]	; (80020e8 <start_fill+0x143c>)
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f001 fdb9 	bl	8003a18 <go_straight>
							turn_left90(&direction);
 8001ea6:	4891      	ldr	r0, [pc, #580]	; (80020ec <start_fill+0x1440>)
 8001ea8:	f001 fc06 	bl	80036b8 <turn_left90>
							go_straight(d2, 0);
 8001eac:	4b8e      	ldr	r3, [pc, #568]	; (80020e8 <start_fill+0x143c>)
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f001 fdb1 	bl	8003a18 <go_straight>
					break;
 8001eb6:	e051      	b.n	8001f5c <start_fill+0x12b0>
						if((maze[y][x] & bottom_wall) == 0 && !visited[y + 1][x]){
 8001eb8:	4b86      	ldr	r3, [pc, #536]	; (80020d4 <start_fill+0x1428>)
 8001eba:	f993 3000 	ldrsb.w	r3, [r3]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4b85      	ldr	r3, [pc, #532]	; (80020d8 <start_fill+0x142c>)
 8001ec2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	4a84      	ldr	r2, [pc, #528]	; (80020dc <start_fill+0x1430>)
 8001eca:	460b      	mov	r3, r1
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	4403      	add	r3, r0
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d13d      	bne.n	8001f5c <start_fill+0x12b0>
 8001ee0:	4b7c      	ldr	r3, [pc, #496]	; (80020d4 <start_fill+0x1428>)
 8001ee2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	4b7b      	ldr	r3, [pc, #492]	; (80020d8 <start_fill+0x142c>)
 8001eea:	f993 3000 	ldrsb.w	r3, [r3]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	497b      	ldr	r1, [pc, #492]	; (80020e0 <start_fill+0x1434>)
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	440b      	add	r3, r1
 8001efc:	4403      	add	r3, r0
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	f083 0301 	eor.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d028      	beq.n	8001f5c <start_fill+0x12b0>
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001f0a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f0e:	4975      	ldr	r1, [pc, #468]	; (80020e4 <start_fill+0x1438>)
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f993 3000 	ldrsb.w	r3, [r3]
 8001f1c:	f113 0f04 	cmn.w	r3, #4
 8001f20:	d102      	bne.n	8001f28 <start_fill+0x127c>
 8001f22:	f04f 30ff 	mov.w	r0, #4294967295
 8001f26:	e001      	b.n	8001f2c <start_fill+0x1280>
 8001f28:	f06f 0003 	mvn.w	r0, #3
 8001f2c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f30:	496c      	ldr	r1, [pc, #432]	; (80020e4 <start_fill+0x1438>)
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	440b      	add	r3, r1
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 8001f3e:	2100      	movs	r1, #0
 8001f40:	486b      	ldr	r0, [pc, #428]	; (80020f0 <start_fill+0x1444>)
 8001f42:	f001 fd69 	bl	8003a18 <go_straight>
					break;
 8001f46:	e009      	b.n	8001f5c <start_fill+0x12b0>
			if(frontfree){
 8001f48:	bf00      	nop
 8001f4a:	e008      	b.n	8001f5e <start_fill+0x12b2>
			if(frontfree){
 8001f4c:	bf00      	nop
 8001f4e:	e006      	b.n	8001f5e <start_fill+0x12b2>
					break;
 8001f50:	bf00      	nop
 8001f52:	e004      	b.n	8001f5e <start_fill+0x12b2>
					break;
 8001f54:	bf00      	nop
 8001f56:	e002      	b.n	8001f5e <start_fill+0x12b2>
					break;
 8001f58:	bf00      	nop
 8001f5a:	e000      	b.n	8001f5e <start_fill+0x12b2>
					break;
 8001f5c:	bf00      	nop
			}
		}
		for(int n = 0; n < grid_size; n++){
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	e0a8      	b.n	80020b6 <start_fill+0x140a>
			for(int m = 0; m < grid_size; m++){
 8001f64:	2300      	movs	r3, #0
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	e09e      	b.n	80020a8 <start_fill+0x13fc>
				if(!visited[n][m]){
 8001f6a:	495d      	ldr	r1, [pc, #372]	; (80020e0 <start_fill+0x1434>)
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	18ca      	adds	r2, r1, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	f083 0301 	eor.w	r3, r3, #1
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 808c 	beq.w	80020a2 <start_fill+0x13f6>
					maze[n][m] |= 15;
 8001f8a:	4954      	ldr	r1, [pc, #336]	; (80020dc <start_fill+0x1430>)
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	18ca      	adds	r2, r1, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	f043 030f 	orr.w	r3, r3, #15
 8001fa2:	b2d8      	uxtb	r0, r3
 8001fa4:	494d      	ldr	r1, [pc, #308]	; (80020dc <start_fill+0x1430>)
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	18ca      	adds	r2, r1, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	701a      	strb	r2, [r3, #0]
					if(n > 0){ maze[n - 1][m] |= bottom_wall; }
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	dd19      	ble.n	8001ff4 <start_fill+0x1348>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	1e5a      	subs	r2, r3, #1
 8001fc4:	4945      	ldr	r1, [pc, #276]	; (80020dc <start_fill+0x1430>)
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	18ca      	adds	r2, r1, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	3a01      	subs	r2, #1
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	b2d8      	uxtb	r0, r3
 8001fe0:	493e      	ldr	r1, [pc, #248]	; (80020dc <start_fill+0x1430>)
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	18ca      	adds	r2, r1, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	701a      	strb	r2, [r3, #0]
					if(n + 1 < grid_size){ maze[n + 1][m] |= top_wall; }
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	dc19      	bgt.n	800202e <start_fill+0x1382>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	4937      	ldr	r1, [pc, #220]	; (80020dc <start_fill+0x1430>)
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	18ca      	adds	r2, r1, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	4413      	add	r3, r2
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	3201      	adds	r2, #1
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	b2d8      	uxtb	r0, r3
 800201a:	4930      	ldr	r1, [pc, #192]	; (80020dc <start_fill+0x1430>)
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	18ca      	adds	r2, r1, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	4413      	add	r3, r2
 800202a:	4602      	mov	r2, r0
 800202c:	701a      	strb	r2, [r3, #0]
					if(m > 0){ maze[n][m - 1] |= right_wall; }
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	dd19      	ble.n	8002068 <start_fill+0x13bc>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	1e59      	subs	r1, r3, #1
 8002038:	4828      	ldr	r0, [pc, #160]	; (80020dc <start_fill+0x1430>)
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4403      	add	r3, r0
 8002046:	440b      	add	r3, r1
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	1e51      	subs	r1, r2, #1
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	b2dc      	uxtb	r4, r3
 8002054:	4821      	ldr	r0, [pc, #132]	; (80020dc <start_fill+0x1430>)
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4403      	add	r3, r0
 8002062:	440b      	add	r3, r1
 8002064:	4622      	mov	r2, r4
 8002066:	701a      	strb	r2, [r3, #0]
					if(m + 1 < grid_size){ maze[n][m + 1] |= left_wall; }
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2b08      	cmp	r3, #8
 800206c:	dc19      	bgt.n	80020a2 <start_fill+0x13f6>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	1c59      	adds	r1, r3, #1
 8002072:	481a      	ldr	r0, [pc, #104]	; (80020dc <start_fill+0x1430>)
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4403      	add	r3, r0
 8002080:	440b      	add	r3, r1
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	1c51      	adds	r1, r2, #1
 8002088:	f043 0308 	orr.w	r3, r3, #8
 800208c:	b2dc      	uxtb	r4, r3
 800208e:	4813      	ldr	r0, [pc, #76]	; (80020dc <start_fill+0x1430>)
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4403      	add	r3, r0
 800209c:	440b      	add	r3, r1
 800209e:	4622      	mov	r2, r4
 80020a0:	701a      	strb	r2, [r3, #0]
			for(int m = 0; m < grid_size; m++){
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b09      	cmp	r3, #9
 80020ac:	f77f af5d 	ble.w	8001f6a <start_fill+0x12be>
		for(int n = 0; n < grid_size; n++){
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3301      	adds	r3, #1
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b09      	cmp	r3, #9
 80020ba:	f77f af53 	ble.w	8001f64 <start_fill+0x12b8>
	while(i > -1){
 80020be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f6be ae5d 	bge.w	8000d82 <start_fill+0xd6>
				}
			}
		}
	}
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd90      	pop	{r4, r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000155 	.word	0x20000155
 80020d8:	20000154 	.word	0x20000154
 80020dc:	200002a4 	.word	0x200002a4
 80020e0:	20000308 	.word	0x20000308
 80020e4:	20000028 	.word	0x20000028
 80020e8:	42e80000 	.word	0x42e80000
 80020ec:	20000156 	.word	0x20000156
 80020f0:	43960000 	.word	0x43960000

080020f4 <found>:

void found(int16_t index){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
	switch(direction){
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <found+0xb8>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d02a      	beq.n	800215c <found+0x68>
 8002106:	2b02      	cmp	r3, #2
 8002108:	dc42      	bgt.n	8002190 <found+0x9c>
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <found+0x20>
 800210e:	2b01      	cmp	r3, #1
 8002110:	d012      	beq.n	8002138 <found+0x44>
 8002112:	e028      	b.n	8002166 <found+0x72>
		case west:
			go_straight(d2, 1);
 8002114:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <found+0xbc>)
 8002116:	2101      	movs	r1, #1
 8002118:	4618      	mov	r0, r3
 800211a:	f001 fc7d 	bl	8003a18 <go_straight>
			turn_right90(&direction);
 800211e:	4823      	ldr	r0, [pc, #140]	; (80021ac <found+0xb8>)
 8002120:	f001 fba2 	bl	8003868 <turn_right90>
			go_straight(d2, 1);
 8002124:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <found+0xbc>)
 8002126:	2101      	movs	r1, #1
 8002128:	4618      	mov	r0, r3
 800212a:	f001 fc75 	bl	8003a18 <go_straight>
			go_straight(square_size, 1);
 800212e:	2101      	movs	r1, #1
 8002130:	4820      	ldr	r0, [pc, #128]	; (80021b4 <found+0xc0>)
 8002132:	f001 fc71 	bl	8003a18 <go_straight>
			break;
 8002136:	e016      	b.n	8002166 <found+0x72>
		case east:
			go_straight(d2, 1);
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <found+0xbc>)
 800213a:	2101      	movs	r1, #1
 800213c:	4618      	mov	r0, r3
 800213e:	f001 fc6b 	bl	8003a18 <go_straight>
			turn_left90(&direction);
 8002142:	481a      	ldr	r0, [pc, #104]	; (80021ac <found+0xb8>)
 8002144:	f001 fab8 	bl	80036b8 <turn_left90>
			go_straight(d2, 1);
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <found+0xbc>)
 800214a:	2101      	movs	r1, #1
 800214c:	4618      	mov	r0, r3
 800214e:	f001 fc63 	bl	8003a18 <go_straight>
			go_straight(square_size, 1);
 8002152:	2101      	movs	r1, #1
 8002154:	4817      	ldr	r0, [pc, #92]	; (80021b4 <found+0xc0>)
 8002156:	f001 fc5f 	bl	8003a18 <go_straight>
			break;
 800215a:	e004      	b.n	8002166 <found+0x72>
		case north:
			go_straight(square_size * 2, 1);
 800215c:	2101      	movs	r1, #1
 800215e:	4816      	ldr	r0, [pc, #88]	; (80021b8 <found+0xc4>)
 8002160:	f001 fc5a 	bl	8003a18 <go_straight>
			break;
 8002164:	bf00      	nop
	}
	while(--index > 0){
 8002166:	e013      	b.n	8002190 <found+0x9c>
		stack[index][1] = -1;
 8002168:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800216c:	4913      	ldr	r1, [pc, #76]	; (80021bc <found+0xc8>)
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	440b      	add	r3, r1
 8002176:	3301      	adds	r3, #1
 8002178:	22ff      	movs	r2, #255	; 0xff
 800217a:	701a      	strb	r2, [r3, #0]
		stack[index][2] = 1;
 800217c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002180:	490e      	ldr	r1, [pc, #56]	; (80021bc <found+0xc8>)
 8002182:	4613      	mov	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	440b      	add	r3, r1
 800218a:	3302      	adds	r3, #2
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
	while(--index > 0){
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	3b01      	subs	r3, #1
 8002194:	b29b      	uxth	r3, r3
 8002196:	80fb      	strh	r3, [r7, #6]
 8002198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800219c:	2b00      	cmp	r3, #0
 800219e:	dce3      	bgt.n	8002168 <found+0x74>
	}
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000156 	.word	0x20000156
 80021b0:	42e80000 	.word	0x42e80000
 80021b4:	43960000 	.word	0x43960000
 80021b8:	44160000 	.word	0x44160000
 80021bc:	20000028 	.word	0x20000028

080021c0 <set_wall>:

void set_wall(bool rbl, bool rbr, bool rbf){
 80021c0:	b490      	push	{r4, r7}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
 80021ca:	460b      	mov	r3, r1
 80021cc:	71bb      	strb	r3, [r7, #6]
 80021ce:	4613      	mov	r3, r2
 80021d0:	717b      	strb	r3, [r7, #5]
	switch(direction){
 80021d2:	4b86      	ldr	r3, [pc, #536]	; (80023ec <set_wall+0x22c>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	f200 8415 	bhi.w	8002a06 <set_wall+0x846>
 80021dc:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <set_wall+0x24>)
 80021de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e2:	bf00      	nop
 80021e4:	080021f5 	.word	0x080021f5
 80021e8:	080023fd 	.word	0x080023fd
 80021ec:	08002601 	.word	0x08002601
 80021f0:	08002805 	.word	0x08002805
		case west:
			x--;
 80021f4:	4b7e      	ldr	r3, [pc, #504]	; (80023f0 <set_wall+0x230>)
 80021f6:	f993 3000 	ldrsb.w	r3, [r3]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	b25a      	sxtb	r2, r3
 8002202:	4b7b      	ldr	r3, [pc, #492]	; (80023f0 <set_wall+0x230>)
 8002204:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d04c      	beq.n	80022a6 <set_wall+0xe6>
				maze[y][x] |= bottom_wall;
 800220c:	4b79      	ldr	r3, [pc, #484]	; (80023f4 <set_wall+0x234>)
 800220e:	f993 3000 	ldrsb.w	r3, [r3]
 8002212:	4619      	mov	r1, r3
 8002214:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <set_wall+0x230>)
 8002216:	f993 3000 	ldrsb.w	r3, [r3]
 800221a:	4618      	mov	r0, r3
 800221c:	4a76      	ldr	r2, [pc, #472]	; (80023f8 <set_wall+0x238>)
 800221e:	460b      	mov	r3, r1
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	4403      	add	r3, r0
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	4a71      	ldr	r2, [pc, #452]	; (80023f4 <set_wall+0x234>)
 800222e:	f992 2000 	ldrsb.w	r2, [r2]
 8002232:	4611      	mov	r1, r2
 8002234:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <set_wall+0x230>)
 8002236:	f992 2000 	ldrsb.w	r2, [r2]
 800223a:	4614      	mov	r4, r2
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	b2d8      	uxtb	r0, r3
 8002242:	4a6d      	ldr	r2, [pc, #436]	; (80023f8 <set_wall+0x238>)
 8002244:	460b      	mov	r3, r1
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	4423      	add	r3, r4
 8002250:	4602      	mov	r2, r0
 8002252:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002254:	4b67      	ldr	r3, [pc, #412]	; (80023f4 <set_wall+0x234>)
 8002256:	f993 3000 	ldrsb.w	r3, [r3]
 800225a:	2b08      	cmp	r3, #8
 800225c:	dc23      	bgt.n	80022a6 <set_wall+0xe6>
 800225e:	4b65      	ldr	r3, [pc, #404]	; (80023f4 <set_wall+0x234>)
 8002260:	f993 3000 	ldrsb.w	r3, [r3]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	4b62      	ldr	r3, [pc, #392]	; (80023f0 <set_wall+0x230>)
 8002268:	f993 3000 	ldrsb.w	r3, [r3]
 800226c:	4618      	mov	r0, r3
 800226e:	4962      	ldr	r1, [pc, #392]	; (80023f8 <set_wall+0x238>)
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	440b      	add	r3, r1
 800227a:	4403      	add	r3, r0
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4a5d      	ldr	r2, [pc, #372]	; (80023f4 <set_wall+0x234>)
 8002280:	f992 2000 	ldrsb.w	r2, [r2]
 8002284:	3201      	adds	r2, #1
 8002286:	495a      	ldr	r1, [pc, #360]	; (80023f0 <set_wall+0x230>)
 8002288:	f991 1000 	ldrsb.w	r1, [r1]
 800228c:	460c      	mov	r4, r1
 800228e:	f043 0302 	orr.w	r3, r3, #2
 8002292:	b2d8      	uxtb	r0, r3
 8002294:	4958      	ldr	r1, [pc, #352]	; (80023f8 <set_wall+0x238>)
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	440b      	add	r3, r1
 80022a0:	4423      	add	r3, r4
 80022a2:	4602      	mov	r2, r0
 80022a4:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 80022a6:	79bb      	ldrb	r3, [r7, #6]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d04c      	beq.n	8002346 <set_wall+0x186>
				maze[y][x] |= top_wall;
 80022ac:	4b51      	ldr	r3, [pc, #324]	; (80023f4 <set_wall+0x234>)
 80022ae:	f993 3000 	ldrsb.w	r3, [r3]
 80022b2:	4619      	mov	r1, r3
 80022b4:	4b4e      	ldr	r3, [pc, #312]	; (80023f0 <set_wall+0x230>)
 80022b6:	f993 3000 	ldrsb.w	r3, [r3]
 80022ba:	4618      	mov	r0, r3
 80022bc:	4a4e      	ldr	r2, [pc, #312]	; (80023f8 <set_wall+0x238>)
 80022be:	460b      	mov	r3, r1
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	4403      	add	r3, r0
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4a49      	ldr	r2, [pc, #292]	; (80023f4 <set_wall+0x234>)
 80022ce:	f992 2000 	ldrsb.w	r2, [r2]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4a46      	ldr	r2, [pc, #280]	; (80023f0 <set_wall+0x230>)
 80022d6:	f992 2000 	ldrsb.w	r2, [r2]
 80022da:	4614      	mov	r4, r2
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	b2d8      	uxtb	r0, r3
 80022e2:	4a45      	ldr	r2, [pc, #276]	; (80023f8 <set_wall+0x238>)
 80022e4:	460b      	mov	r3, r1
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	4423      	add	r3, r4
 80022f0:	4602      	mov	r2, r0
 80022f2:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 80022f4:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <set_wall+0x234>)
 80022f6:	f993 3000 	ldrsb.w	r3, [r3]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	dd23      	ble.n	8002346 <set_wall+0x186>
 80022fe:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <set_wall+0x234>)
 8002300:	f993 3000 	ldrsb.w	r3, [r3]
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	4b3a      	ldr	r3, [pc, #232]	; (80023f0 <set_wall+0x230>)
 8002308:	f993 3000 	ldrsb.w	r3, [r3]
 800230c:	4618      	mov	r0, r3
 800230e:	493a      	ldr	r1, [pc, #232]	; (80023f8 <set_wall+0x238>)
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	440b      	add	r3, r1
 800231a:	4403      	add	r3, r0
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	4a35      	ldr	r2, [pc, #212]	; (80023f4 <set_wall+0x234>)
 8002320:	f992 2000 	ldrsb.w	r2, [r2]
 8002324:	3a01      	subs	r2, #1
 8002326:	4932      	ldr	r1, [pc, #200]	; (80023f0 <set_wall+0x230>)
 8002328:	f991 1000 	ldrsb.w	r1, [r1]
 800232c:	460c      	mov	r4, r1
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	b2d8      	uxtb	r0, r3
 8002334:	4930      	ldr	r1, [pc, #192]	; (80023f8 <set_wall+0x238>)
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	440b      	add	r3, r1
 8002340:	4423      	add	r3, r4
 8002342:	4602      	mov	r2, r0
 8002344:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002346:	797b      	ldrb	r3, [r7, #5]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8355 	beq.w	80029f8 <set_wall+0x838>
				maze[y][x] |= left_wall;
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <set_wall+0x234>)
 8002350:	f993 3000 	ldrsb.w	r3, [r3]
 8002354:	4619      	mov	r1, r3
 8002356:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <set_wall+0x230>)
 8002358:	f993 3000 	ldrsb.w	r3, [r3]
 800235c:	4618      	mov	r0, r3
 800235e:	4a26      	ldr	r2, [pc, #152]	; (80023f8 <set_wall+0x238>)
 8002360:	460b      	mov	r3, r1
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	4403      	add	r3, r0
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <set_wall+0x234>)
 8002370:	f992 2000 	ldrsb.w	r2, [r2]
 8002374:	4611      	mov	r1, r2
 8002376:	4a1e      	ldr	r2, [pc, #120]	; (80023f0 <set_wall+0x230>)
 8002378:	f992 2000 	ldrsb.w	r2, [r2]
 800237c:	4614      	mov	r4, r2
 800237e:	f043 0308 	orr.w	r3, r3, #8
 8002382:	b2d8      	uxtb	r0, r3
 8002384:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <set_wall+0x238>)
 8002386:	460b      	mov	r3, r1
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	4423      	add	r3, r4
 8002392:	4602      	mov	r2, r0
 8002394:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <set_wall+0x230>)
 8002398:	f993 3000 	ldrsb.w	r3, [r3]
 800239c:	2b00      	cmp	r3, #0
 800239e:	f340 832b 	ble.w	80029f8 <set_wall+0x838>
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <set_wall+0x234>)
 80023a4:	f993 3000 	ldrsb.w	r3, [r3]
 80023a8:	4618      	mov	r0, r3
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <set_wall+0x230>)
 80023ac:	f993 3000 	ldrsb.w	r3, [r3]
 80023b0:	1e5a      	subs	r2, r3, #1
 80023b2:	4911      	ldr	r1, [pc, #68]	; (80023f8 <set_wall+0x238>)
 80023b4:	4603      	mov	r3, r0
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4403      	add	r3, r0
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	440b      	add	r3, r1
 80023be:	4413      	add	r3, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <set_wall+0x234>)
 80023c4:	f992 2000 	ldrsb.w	r2, [r2]
 80023c8:	4610      	mov	r0, r2
 80023ca:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <set_wall+0x230>)
 80023cc:	f992 2000 	ldrsb.w	r2, [r2]
 80023d0:	3a01      	subs	r2, #1
 80023d2:	f043 0304 	orr.w	r3, r3, #4
 80023d6:	b2dc      	uxtb	r4, r3
 80023d8:	4907      	ldr	r1, [pc, #28]	; (80023f8 <set_wall+0x238>)
 80023da:	4603      	mov	r3, r0
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4403      	add	r3, r0
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	440b      	add	r3, r1
 80023e4:	4413      	add	r3, r2
 80023e6:	4622      	mov	r2, r4
 80023e8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80023ea:	e305      	b.n	80029f8 <set_wall+0x838>
 80023ec:	20000156 	.word	0x20000156
 80023f0:	20000154 	.word	0x20000154
 80023f4:	20000155 	.word	0x20000155
 80023f8:	200002a4 	.word	0x200002a4
		case east:
			x++;
 80023fc:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <set_wall+0x434>)
 80023fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	3301      	adds	r3, #1
 8002406:	b2db      	uxtb	r3, r3
 8002408:	b25a      	sxtb	r2, r3
 800240a:	4b7a      	ldr	r3, [pc, #488]	; (80025f4 <set_wall+0x434>)
 800240c:	701a      	strb	r2, [r3, #0]
			if(rbl){
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d04c      	beq.n	80024ae <set_wall+0x2ee>
				maze[y][x] |= top_wall;
 8002414:	4b78      	ldr	r3, [pc, #480]	; (80025f8 <set_wall+0x438>)
 8002416:	f993 3000 	ldrsb.w	r3, [r3]
 800241a:	4619      	mov	r1, r3
 800241c:	4b75      	ldr	r3, [pc, #468]	; (80025f4 <set_wall+0x434>)
 800241e:	f993 3000 	ldrsb.w	r3, [r3]
 8002422:	4618      	mov	r0, r3
 8002424:	4a75      	ldr	r2, [pc, #468]	; (80025fc <set_wall+0x43c>)
 8002426:	460b      	mov	r3, r1
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	4403      	add	r3, r0
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	4a70      	ldr	r2, [pc, #448]	; (80025f8 <set_wall+0x438>)
 8002436:	f992 2000 	ldrsb.w	r2, [r2]
 800243a:	4611      	mov	r1, r2
 800243c:	4a6d      	ldr	r2, [pc, #436]	; (80025f4 <set_wall+0x434>)
 800243e:	f992 2000 	ldrsb.w	r2, [r2]
 8002442:	4614      	mov	r4, r2
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	b2d8      	uxtb	r0, r3
 800244a:	4a6c      	ldr	r2, [pc, #432]	; (80025fc <set_wall+0x43c>)
 800244c:	460b      	mov	r3, r1
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4413      	add	r3, r2
 8002456:	4423      	add	r3, r4
 8002458:	4602      	mov	r2, r0
 800245a:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 800245c:	4b66      	ldr	r3, [pc, #408]	; (80025f8 <set_wall+0x438>)
 800245e:	f993 3000 	ldrsb.w	r3, [r3]
 8002462:	2b00      	cmp	r3, #0
 8002464:	dd23      	ble.n	80024ae <set_wall+0x2ee>
 8002466:	4b64      	ldr	r3, [pc, #400]	; (80025f8 <set_wall+0x438>)
 8002468:	f993 3000 	ldrsb.w	r3, [r3]
 800246c:	1e5a      	subs	r2, r3, #1
 800246e:	4b61      	ldr	r3, [pc, #388]	; (80025f4 <set_wall+0x434>)
 8002470:	f993 3000 	ldrsb.w	r3, [r3]
 8002474:	4618      	mov	r0, r3
 8002476:	4961      	ldr	r1, [pc, #388]	; (80025fc <set_wall+0x43c>)
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	440b      	add	r3, r1
 8002482:	4403      	add	r3, r0
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	4a5c      	ldr	r2, [pc, #368]	; (80025f8 <set_wall+0x438>)
 8002488:	f992 2000 	ldrsb.w	r2, [r2]
 800248c:	3a01      	subs	r2, #1
 800248e:	4959      	ldr	r1, [pc, #356]	; (80025f4 <set_wall+0x434>)
 8002490:	f991 1000 	ldrsb.w	r1, [r1]
 8002494:	460c      	mov	r4, r1
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	b2d8      	uxtb	r0, r3
 800249c:	4957      	ldr	r1, [pc, #348]	; (80025fc <set_wall+0x43c>)
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	440b      	add	r3, r1
 80024a8:	4423      	add	r3, r4
 80024aa:	4602      	mov	r2, r0
 80024ac:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d04c      	beq.n	800254e <set_wall+0x38e>
				maze[y][x] |= bottom_wall;
 80024b4:	4b50      	ldr	r3, [pc, #320]	; (80025f8 <set_wall+0x438>)
 80024b6:	f993 3000 	ldrsb.w	r3, [r3]
 80024ba:	4619      	mov	r1, r3
 80024bc:	4b4d      	ldr	r3, [pc, #308]	; (80025f4 <set_wall+0x434>)
 80024be:	f993 3000 	ldrsb.w	r3, [r3]
 80024c2:	4618      	mov	r0, r3
 80024c4:	4a4d      	ldr	r2, [pc, #308]	; (80025fc <set_wall+0x43c>)
 80024c6:	460b      	mov	r3, r1
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	4403      	add	r3, r0
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	4a48      	ldr	r2, [pc, #288]	; (80025f8 <set_wall+0x438>)
 80024d6:	f992 2000 	ldrsb.w	r2, [r2]
 80024da:	4611      	mov	r1, r2
 80024dc:	4a45      	ldr	r2, [pc, #276]	; (80025f4 <set_wall+0x434>)
 80024de:	f992 2000 	ldrsb.w	r2, [r2]
 80024e2:	4614      	mov	r4, r2
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2d8      	uxtb	r0, r3
 80024ea:	4a44      	ldr	r2, [pc, #272]	; (80025fc <set_wall+0x43c>)
 80024ec:	460b      	mov	r3, r1
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	4423      	add	r3, r4
 80024f8:	4602      	mov	r2, r0
 80024fa:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 80024fc:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <set_wall+0x438>)
 80024fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002502:	2b08      	cmp	r3, #8
 8002504:	dc23      	bgt.n	800254e <set_wall+0x38e>
 8002506:	4b3c      	ldr	r3, [pc, #240]	; (80025f8 <set_wall+0x438>)
 8002508:	f993 3000 	ldrsb.w	r3, [r3]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <set_wall+0x434>)
 8002510:	f993 3000 	ldrsb.w	r3, [r3]
 8002514:	4618      	mov	r0, r3
 8002516:	4939      	ldr	r1, [pc, #228]	; (80025fc <set_wall+0x43c>)
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	440b      	add	r3, r1
 8002522:	4403      	add	r3, r0
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	4a34      	ldr	r2, [pc, #208]	; (80025f8 <set_wall+0x438>)
 8002528:	f992 2000 	ldrsb.w	r2, [r2]
 800252c:	3201      	adds	r2, #1
 800252e:	4931      	ldr	r1, [pc, #196]	; (80025f4 <set_wall+0x434>)
 8002530:	f991 1000 	ldrsb.w	r1, [r1]
 8002534:	460c      	mov	r4, r1
 8002536:	f043 0302 	orr.w	r3, r3, #2
 800253a:	b2d8      	uxtb	r0, r3
 800253c:	492f      	ldr	r1, [pc, #188]	; (80025fc <set_wall+0x43c>)
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	440b      	add	r3, r1
 8002548:	4423      	add	r3, r4
 800254a:	4602      	mov	r2, r0
 800254c:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 800254e:	797b      	ldrb	r3, [r7, #5]
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 8253 	beq.w	80029fc <set_wall+0x83c>
				maze[y][x] |= right_wall;
 8002556:	4b28      	ldr	r3, [pc, #160]	; (80025f8 <set_wall+0x438>)
 8002558:	f993 3000 	ldrsb.w	r3, [r3]
 800255c:	4619      	mov	r1, r3
 800255e:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <set_wall+0x434>)
 8002560:	f993 3000 	ldrsb.w	r3, [r3]
 8002564:	4618      	mov	r0, r3
 8002566:	4a25      	ldr	r2, [pc, #148]	; (80025fc <set_wall+0x43c>)
 8002568:	460b      	mov	r3, r1
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4413      	add	r3, r2
 8002572:	4403      	add	r3, r0
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4a20      	ldr	r2, [pc, #128]	; (80025f8 <set_wall+0x438>)
 8002578:	f992 2000 	ldrsb.w	r2, [r2]
 800257c:	4611      	mov	r1, r2
 800257e:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <set_wall+0x434>)
 8002580:	f992 2000 	ldrsb.w	r2, [r2]
 8002584:	4614      	mov	r4, r2
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	b2d8      	uxtb	r0, r3
 800258c:	4a1b      	ldr	r2, [pc, #108]	; (80025fc <set_wall+0x43c>)
 800258e:	460b      	mov	r3, r1
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	4423      	add	r3, r4
 800259a:	4602      	mov	r2, r0
 800259c:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <set_wall+0x434>)
 80025a0:	f993 3000 	ldrsb.w	r3, [r3]
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	f300 8229 	bgt.w	80029fc <set_wall+0x83c>
 80025aa:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <set_wall+0x438>)
 80025ac:	f993 3000 	ldrsb.w	r3, [r3]
 80025b0:	4618      	mov	r0, r3
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <set_wall+0x434>)
 80025b4:	f993 3000 	ldrsb.w	r3, [r3]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	4910      	ldr	r1, [pc, #64]	; (80025fc <set_wall+0x43c>)
 80025bc:	4603      	mov	r3, r0
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4403      	add	r3, r0
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	440b      	add	r3, r1
 80025c6:	4413      	add	r3, r2
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <set_wall+0x438>)
 80025cc:	f992 2000 	ldrsb.w	r2, [r2]
 80025d0:	4610      	mov	r0, r2
 80025d2:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <set_wall+0x434>)
 80025d4:	f992 2000 	ldrsb.w	r2, [r2]
 80025d8:	3201      	adds	r2, #1
 80025da:	f043 0308 	orr.w	r3, r3, #8
 80025de:	b2dc      	uxtb	r4, r3
 80025e0:	4906      	ldr	r1, [pc, #24]	; (80025fc <set_wall+0x43c>)
 80025e2:	4603      	mov	r3, r0
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4403      	add	r3, r0
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	440b      	add	r3, r1
 80025ec:	4413      	add	r3, r2
 80025ee:	4622      	mov	r2, r4
 80025f0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80025f2:	e203      	b.n	80029fc <set_wall+0x83c>
 80025f4:	20000154 	.word	0x20000154
 80025f8:	20000155 	.word	0x20000155
 80025fc:	200002a4 	.word	0x200002a4
		case north:
			y--;
 8002600:	4b7d      	ldr	r3, [pc, #500]	; (80027f8 <set_wall+0x638>)
 8002602:	f993 3000 	ldrsb.w	r3, [r3]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b2db      	uxtb	r3, r3
 800260c:	b25a      	sxtb	r2, r3
 800260e:	4b7a      	ldr	r3, [pc, #488]	; (80027f8 <set_wall+0x638>)
 8002610:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d04c      	beq.n	80026b2 <set_wall+0x4f2>
				maze[y][x] |= left_wall;
 8002618:	4b77      	ldr	r3, [pc, #476]	; (80027f8 <set_wall+0x638>)
 800261a:	f993 3000 	ldrsb.w	r3, [r3]
 800261e:	4619      	mov	r1, r3
 8002620:	4b76      	ldr	r3, [pc, #472]	; (80027fc <set_wall+0x63c>)
 8002622:	f993 3000 	ldrsb.w	r3, [r3]
 8002626:	4618      	mov	r0, r3
 8002628:	4a75      	ldr	r2, [pc, #468]	; (8002800 <set_wall+0x640>)
 800262a:	460b      	mov	r3, r1
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	4403      	add	r3, r0
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4a6f      	ldr	r2, [pc, #444]	; (80027f8 <set_wall+0x638>)
 800263a:	f992 2000 	ldrsb.w	r2, [r2]
 800263e:	4611      	mov	r1, r2
 8002640:	4a6e      	ldr	r2, [pc, #440]	; (80027fc <set_wall+0x63c>)
 8002642:	f992 2000 	ldrsb.w	r2, [r2]
 8002646:	4614      	mov	r4, r2
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	b2d8      	uxtb	r0, r3
 800264e:	4a6c      	ldr	r2, [pc, #432]	; (8002800 <set_wall+0x640>)
 8002650:	460b      	mov	r3, r1
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	4423      	add	r3, r4
 800265c:	4602      	mov	r2, r0
 800265e:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002660:	4b66      	ldr	r3, [pc, #408]	; (80027fc <set_wall+0x63c>)
 8002662:	f993 3000 	ldrsb.w	r3, [r3]
 8002666:	2b00      	cmp	r3, #0
 8002668:	dd23      	ble.n	80026b2 <set_wall+0x4f2>
 800266a:	4b63      	ldr	r3, [pc, #396]	; (80027f8 <set_wall+0x638>)
 800266c:	f993 3000 	ldrsb.w	r3, [r3]
 8002670:	4618      	mov	r0, r3
 8002672:	4b62      	ldr	r3, [pc, #392]	; (80027fc <set_wall+0x63c>)
 8002674:	f993 3000 	ldrsb.w	r3, [r3]
 8002678:	1e5a      	subs	r2, r3, #1
 800267a:	4961      	ldr	r1, [pc, #388]	; (8002800 <set_wall+0x640>)
 800267c:	4603      	mov	r3, r0
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4403      	add	r3, r0
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	440b      	add	r3, r1
 8002686:	4413      	add	r3, r2
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	4a5b      	ldr	r2, [pc, #364]	; (80027f8 <set_wall+0x638>)
 800268c:	f992 2000 	ldrsb.w	r2, [r2]
 8002690:	4610      	mov	r0, r2
 8002692:	4a5a      	ldr	r2, [pc, #360]	; (80027fc <set_wall+0x63c>)
 8002694:	f992 2000 	ldrsb.w	r2, [r2]
 8002698:	3a01      	subs	r2, #1
 800269a:	f043 0304 	orr.w	r3, r3, #4
 800269e:	b2dc      	uxtb	r4, r3
 80026a0:	4957      	ldr	r1, [pc, #348]	; (8002800 <set_wall+0x640>)
 80026a2:	4603      	mov	r3, r0
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4403      	add	r3, r0
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	440b      	add	r3, r1
 80026ac:	4413      	add	r3, r2
 80026ae:	4622      	mov	r2, r4
 80026b0:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 80026b2:	79bb      	ldrb	r3, [r7, #6]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d04c      	beq.n	8002752 <set_wall+0x592>
				maze[y][x] |= right_wall;
 80026b8:	4b4f      	ldr	r3, [pc, #316]	; (80027f8 <set_wall+0x638>)
 80026ba:	f993 3000 	ldrsb.w	r3, [r3]
 80026be:	4619      	mov	r1, r3
 80026c0:	4b4e      	ldr	r3, [pc, #312]	; (80027fc <set_wall+0x63c>)
 80026c2:	f993 3000 	ldrsb.w	r3, [r3]
 80026c6:	4618      	mov	r0, r3
 80026c8:	4a4d      	ldr	r2, [pc, #308]	; (8002800 <set_wall+0x640>)
 80026ca:	460b      	mov	r3, r1
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	4403      	add	r3, r0
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4a47      	ldr	r2, [pc, #284]	; (80027f8 <set_wall+0x638>)
 80026da:	f992 2000 	ldrsb.w	r2, [r2]
 80026de:	4611      	mov	r1, r2
 80026e0:	4a46      	ldr	r2, [pc, #280]	; (80027fc <set_wall+0x63c>)
 80026e2:	f992 2000 	ldrsb.w	r2, [r2]
 80026e6:	4614      	mov	r4, r2
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	b2d8      	uxtb	r0, r3
 80026ee:	4a44      	ldr	r2, [pc, #272]	; (8002800 <set_wall+0x640>)
 80026f0:	460b      	mov	r3, r1
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	4423      	add	r3, r4
 80026fc:	4602      	mov	r2, r0
 80026fe:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002700:	4b3e      	ldr	r3, [pc, #248]	; (80027fc <set_wall+0x63c>)
 8002702:	f993 3000 	ldrsb.w	r3, [r3]
 8002706:	2b08      	cmp	r3, #8
 8002708:	dc23      	bgt.n	8002752 <set_wall+0x592>
 800270a:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <set_wall+0x638>)
 800270c:	f993 3000 	ldrsb.w	r3, [r3]
 8002710:	4618      	mov	r0, r3
 8002712:	4b3a      	ldr	r3, [pc, #232]	; (80027fc <set_wall+0x63c>)
 8002714:	f993 3000 	ldrsb.w	r3, [r3]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	4939      	ldr	r1, [pc, #228]	; (8002800 <set_wall+0x640>)
 800271c:	4603      	mov	r3, r0
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4403      	add	r3, r0
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	440b      	add	r3, r1
 8002726:	4413      	add	r3, r2
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4a33      	ldr	r2, [pc, #204]	; (80027f8 <set_wall+0x638>)
 800272c:	f992 2000 	ldrsb.w	r2, [r2]
 8002730:	4610      	mov	r0, r2
 8002732:	4a32      	ldr	r2, [pc, #200]	; (80027fc <set_wall+0x63c>)
 8002734:	f992 2000 	ldrsb.w	r2, [r2]
 8002738:	3201      	adds	r2, #1
 800273a:	f043 0308 	orr.w	r3, r3, #8
 800273e:	b2dc      	uxtb	r4, r3
 8002740:	492f      	ldr	r1, [pc, #188]	; (8002800 <set_wall+0x640>)
 8002742:	4603      	mov	r3, r0
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4403      	add	r3, r0
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	440b      	add	r3, r1
 800274c:	4413      	add	r3, r2
 800274e:	4622      	mov	r2, r4
 8002750:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002752:	797b      	ldrb	r3, [r7, #5]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8153 	beq.w	8002a00 <set_wall+0x840>
				maze[y][x] |= top_wall;
 800275a:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <set_wall+0x638>)
 800275c:	f993 3000 	ldrsb.w	r3, [r3]
 8002760:	4619      	mov	r1, r3
 8002762:	4b26      	ldr	r3, [pc, #152]	; (80027fc <set_wall+0x63c>)
 8002764:	f993 3000 	ldrsb.w	r3, [r3]
 8002768:	4618      	mov	r0, r3
 800276a:	4a25      	ldr	r2, [pc, #148]	; (8002800 <set_wall+0x640>)
 800276c:	460b      	mov	r3, r1
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	4403      	add	r3, r0
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <set_wall+0x638>)
 800277c:	f992 2000 	ldrsb.w	r2, [r2]
 8002780:	4611      	mov	r1, r2
 8002782:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <set_wall+0x63c>)
 8002784:	f992 2000 	ldrsb.w	r2, [r2]
 8002788:	4614      	mov	r4, r2
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	b2d8      	uxtb	r0, r3
 8002790:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <set_wall+0x640>)
 8002792:	460b      	mov	r3, r1
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	4423      	add	r3, r4
 800279e:	4602      	mov	r2, r0
 80027a0:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <set_wall+0x638>)
 80027a4:	f993 3000 	ldrsb.w	r3, [r3]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f340 8129 	ble.w	8002a00 <set_wall+0x840>
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <set_wall+0x638>)
 80027b0:	f993 3000 	ldrsb.w	r3, [r3]
 80027b4:	1e5a      	subs	r2, r3, #1
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <set_wall+0x63c>)
 80027b8:	f993 3000 	ldrsb.w	r3, [r3]
 80027bc:	4618      	mov	r0, r3
 80027be:	4910      	ldr	r1, [pc, #64]	; (8002800 <set_wall+0x640>)
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	440b      	add	r3, r1
 80027ca:	4403      	add	r3, r0
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <set_wall+0x638>)
 80027d0:	f992 2000 	ldrsb.w	r2, [r2]
 80027d4:	3a01      	subs	r2, #1
 80027d6:	4909      	ldr	r1, [pc, #36]	; (80027fc <set_wall+0x63c>)
 80027d8:	f991 1000 	ldrsb.w	r1, [r1]
 80027dc:	460c      	mov	r4, r1
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	b2d8      	uxtb	r0, r3
 80027e4:	4906      	ldr	r1, [pc, #24]	; (8002800 <set_wall+0x640>)
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	440b      	add	r3, r1
 80027f0:	4423      	add	r3, r4
 80027f2:	4602      	mov	r2, r0
 80027f4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80027f6:	e103      	b.n	8002a00 <set_wall+0x840>
 80027f8:	20000155 	.word	0x20000155
 80027fc:	20000154 	.word	0x20000154
 8002800:	200002a4 	.word	0x200002a4
		case south:
			y++;
 8002804:	4b82      	ldr	r3, [pc, #520]	; (8002a10 <set_wall+0x850>)
 8002806:	f993 3000 	ldrsb.w	r3, [r3]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	3301      	adds	r3, #1
 800280e:	b2db      	uxtb	r3, r3
 8002810:	b25a      	sxtb	r2, r3
 8002812:	4b7f      	ldr	r3, [pc, #508]	; (8002a10 <set_wall+0x850>)
 8002814:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d04c      	beq.n	80028b6 <set_wall+0x6f6>
				maze[y][x] |= right_wall;
 800281c:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <set_wall+0x850>)
 800281e:	f993 3000 	ldrsb.w	r3, [r3]
 8002822:	4619      	mov	r1, r3
 8002824:	4b7b      	ldr	r3, [pc, #492]	; (8002a14 <set_wall+0x854>)
 8002826:	f993 3000 	ldrsb.w	r3, [r3]
 800282a:	4618      	mov	r0, r3
 800282c:	4a7a      	ldr	r2, [pc, #488]	; (8002a18 <set_wall+0x858>)
 800282e:	460b      	mov	r3, r1
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	4403      	add	r3, r0
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	4a74      	ldr	r2, [pc, #464]	; (8002a10 <set_wall+0x850>)
 800283e:	f992 2000 	ldrsb.w	r2, [r2]
 8002842:	4611      	mov	r1, r2
 8002844:	4a73      	ldr	r2, [pc, #460]	; (8002a14 <set_wall+0x854>)
 8002846:	f992 2000 	ldrsb.w	r2, [r2]
 800284a:	4614      	mov	r4, r2
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	b2d8      	uxtb	r0, r3
 8002852:	4a71      	ldr	r2, [pc, #452]	; (8002a18 <set_wall+0x858>)
 8002854:	460b      	mov	r3, r1
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	4423      	add	r3, r4
 8002860:	4602      	mov	r2, r0
 8002862:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002864:	4b6b      	ldr	r3, [pc, #428]	; (8002a14 <set_wall+0x854>)
 8002866:	f993 3000 	ldrsb.w	r3, [r3]
 800286a:	2b08      	cmp	r3, #8
 800286c:	dc23      	bgt.n	80028b6 <set_wall+0x6f6>
 800286e:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <set_wall+0x850>)
 8002870:	f993 3000 	ldrsb.w	r3, [r3]
 8002874:	4618      	mov	r0, r3
 8002876:	4b67      	ldr	r3, [pc, #412]	; (8002a14 <set_wall+0x854>)
 8002878:	f993 3000 	ldrsb.w	r3, [r3]
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	4966      	ldr	r1, [pc, #408]	; (8002a18 <set_wall+0x858>)
 8002880:	4603      	mov	r3, r0
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4403      	add	r3, r0
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	440b      	add	r3, r1
 800288a:	4413      	add	r3, r2
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	4a60      	ldr	r2, [pc, #384]	; (8002a10 <set_wall+0x850>)
 8002890:	f992 2000 	ldrsb.w	r2, [r2]
 8002894:	4610      	mov	r0, r2
 8002896:	4a5f      	ldr	r2, [pc, #380]	; (8002a14 <set_wall+0x854>)
 8002898:	f992 2000 	ldrsb.w	r2, [r2]
 800289c:	3201      	adds	r2, #1
 800289e:	f043 0308 	orr.w	r3, r3, #8
 80028a2:	b2dc      	uxtb	r4, r3
 80028a4:	495c      	ldr	r1, [pc, #368]	; (8002a18 <set_wall+0x858>)
 80028a6:	4603      	mov	r3, r0
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4403      	add	r3, r0
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	440b      	add	r3, r1
 80028b0:	4413      	add	r3, r2
 80028b2:	4622      	mov	r2, r4
 80028b4:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 80028b6:	79bb      	ldrb	r3, [r7, #6]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d04c      	beq.n	8002956 <set_wall+0x796>
				maze[y][x] |= left_wall;
 80028bc:	4b54      	ldr	r3, [pc, #336]	; (8002a10 <set_wall+0x850>)
 80028be:	f993 3000 	ldrsb.w	r3, [r3]
 80028c2:	4619      	mov	r1, r3
 80028c4:	4b53      	ldr	r3, [pc, #332]	; (8002a14 <set_wall+0x854>)
 80028c6:	f993 3000 	ldrsb.w	r3, [r3]
 80028ca:	4618      	mov	r0, r3
 80028cc:	4a52      	ldr	r2, [pc, #328]	; (8002a18 <set_wall+0x858>)
 80028ce:	460b      	mov	r3, r1
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	4403      	add	r3, r0
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	4a4c      	ldr	r2, [pc, #304]	; (8002a10 <set_wall+0x850>)
 80028de:	f992 2000 	ldrsb.w	r2, [r2]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4a4b      	ldr	r2, [pc, #300]	; (8002a14 <set_wall+0x854>)
 80028e6:	f992 2000 	ldrsb.w	r2, [r2]
 80028ea:	4614      	mov	r4, r2
 80028ec:	f043 0308 	orr.w	r3, r3, #8
 80028f0:	b2d8      	uxtb	r0, r3
 80028f2:	4a49      	ldr	r2, [pc, #292]	; (8002a18 <set_wall+0x858>)
 80028f4:	460b      	mov	r3, r1
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	4423      	add	r3, r4
 8002900:	4602      	mov	r2, r0
 8002902:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002904:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <set_wall+0x854>)
 8002906:	f993 3000 	ldrsb.w	r3, [r3]
 800290a:	2b00      	cmp	r3, #0
 800290c:	dd23      	ble.n	8002956 <set_wall+0x796>
 800290e:	4b40      	ldr	r3, [pc, #256]	; (8002a10 <set_wall+0x850>)
 8002910:	f993 3000 	ldrsb.w	r3, [r3]
 8002914:	4618      	mov	r0, r3
 8002916:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <set_wall+0x854>)
 8002918:	f993 3000 	ldrsb.w	r3, [r3]
 800291c:	1e5a      	subs	r2, r3, #1
 800291e:	493e      	ldr	r1, [pc, #248]	; (8002a18 <set_wall+0x858>)
 8002920:	4603      	mov	r3, r0
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4403      	add	r3, r0
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	440b      	add	r3, r1
 800292a:	4413      	add	r3, r2
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	4a38      	ldr	r2, [pc, #224]	; (8002a10 <set_wall+0x850>)
 8002930:	f992 2000 	ldrsb.w	r2, [r2]
 8002934:	4610      	mov	r0, r2
 8002936:	4a37      	ldr	r2, [pc, #220]	; (8002a14 <set_wall+0x854>)
 8002938:	f992 2000 	ldrsb.w	r2, [r2]
 800293c:	3a01      	subs	r2, #1
 800293e:	f043 0304 	orr.w	r3, r3, #4
 8002942:	b2dc      	uxtb	r4, r3
 8002944:	4934      	ldr	r1, [pc, #208]	; (8002a18 <set_wall+0x858>)
 8002946:	4603      	mov	r3, r0
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4403      	add	r3, r0
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	440b      	add	r3, r1
 8002950:	4413      	add	r3, r2
 8002952:	4622      	mov	r2, r4
 8002954:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002956:	797b      	ldrb	r3, [r7, #5]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d053      	beq.n	8002a04 <set_wall+0x844>
				maze[y][x] |= bottom_wall;
 800295c:	4b2c      	ldr	r3, [pc, #176]	; (8002a10 <set_wall+0x850>)
 800295e:	f993 3000 	ldrsb.w	r3, [r3]
 8002962:	4619      	mov	r1, r3
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <set_wall+0x854>)
 8002966:	f993 3000 	ldrsb.w	r3, [r3]
 800296a:	4618      	mov	r0, r3
 800296c:	4a2a      	ldr	r2, [pc, #168]	; (8002a18 <set_wall+0x858>)
 800296e:	460b      	mov	r3, r1
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	4403      	add	r3, r0
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	4a24      	ldr	r2, [pc, #144]	; (8002a10 <set_wall+0x850>)
 800297e:	f992 2000 	ldrsb.w	r2, [r2]
 8002982:	4611      	mov	r1, r2
 8002984:	4a23      	ldr	r2, [pc, #140]	; (8002a14 <set_wall+0x854>)
 8002986:	f992 2000 	ldrsb.w	r2, [r2]
 800298a:	4614      	mov	r4, r2
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	b2d8      	uxtb	r0, r3
 8002992:	4a21      	ldr	r2, [pc, #132]	; (8002a18 <set_wall+0x858>)
 8002994:	460b      	mov	r3, r1
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	4423      	add	r3, r4
 80029a0:	4602      	mov	r2, r0
 80029a2:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <set_wall+0x850>)
 80029a6:	f993 3000 	ldrsb.w	r3, [r3]
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	dc2a      	bgt.n	8002a04 <set_wall+0x844>
 80029ae:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <set_wall+0x850>)
 80029b0:	f993 3000 	ldrsb.w	r3, [r3]
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <set_wall+0x854>)
 80029b8:	f993 3000 	ldrsb.w	r3, [r3]
 80029bc:	4618      	mov	r0, r3
 80029be:	4916      	ldr	r1, [pc, #88]	; (8002a18 <set_wall+0x858>)
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	440b      	add	r3, r1
 80029ca:	4403      	add	r3, r0
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <set_wall+0x850>)
 80029d0:	f992 2000 	ldrsb.w	r2, [r2]
 80029d4:	3201      	adds	r2, #1
 80029d6:	490f      	ldr	r1, [pc, #60]	; (8002a14 <set_wall+0x854>)
 80029d8:	f991 1000 	ldrsb.w	r1, [r1]
 80029dc:	460c      	mov	r4, r1
 80029de:	f043 0302 	orr.w	r3, r3, #2
 80029e2:	b2d8      	uxtb	r0, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	; (8002a18 <set_wall+0x858>)
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	440b      	add	r3, r1
 80029f0:	4423      	add	r3, r4
 80029f2:	4602      	mov	r2, r0
 80029f4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80029f6:	e005      	b.n	8002a04 <set_wall+0x844>
			break;
 80029f8:	bf00      	nop
 80029fa:	e004      	b.n	8002a06 <set_wall+0x846>
			break;
 80029fc:	bf00      	nop
 80029fe:	e002      	b.n	8002a06 <set_wall+0x846>
			break;
 8002a00:	bf00      	nop
 8002a02:	e000      	b.n	8002a06 <set_wall+0x846>
			break;
 8002a04:	bf00      	nop
	}
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc90      	pop	{r4, r7}
 8002a0e:	4770      	bx	lr
 8002a10:	20000155 	.word	0x20000155
 8002a14:	20000154 	.word	0x20000154
 8002a18:	200002a4 	.word	0x200002a4

08002a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a20:	f001 f944 	bl	8003cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a24:	f000 f888 	bl	8002b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a28:	f000 fa9e 	bl	8002f68 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a2c:	f000 fa86 	bl	8002f3c <MX_DMA_Init>
  MX_ADC1_Init();
 8002a30:	f000 f8de 	bl	8002bf0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002a34:	f000 f946 	bl	8002cc4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002a38:	f000 f998 	bl	8002d6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002a3c:	f000 fa2c 	bl	8002e98 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002a40:	2100      	movs	r1, #0
 8002a42:	4830      	ldr	r0, [pc, #192]	; (8002b04 <main+0xe8>)
 8002a44:	f002 feae 	bl	80057a4 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002a48:	2104      	movs	r1, #4
 8002a4a:	482e      	ldr	r0, [pc, #184]	; (8002b04 <main+0xe8>)
 8002a4c:	f002 feaa 	bl	80057a4 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002a50:	2108      	movs	r1, #8
 8002a52:	482c      	ldr	r0, [pc, #176]	; (8002b04 <main+0xe8>)
 8002a54:	f002 fea6 	bl	80057a4 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002a58:	210c      	movs	r1, #12
 8002a5a:	482a      	ldr	r0, [pc, #168]	; (8002b04 <main+0xe8>)
 8002a5c:	f002 fea2 	bl	80057a4 <HAL_TIM_PWM_Start>
  	HAL_TIM_Base_Start_IT(&htim1);
 8002a60:	4829      	ldr	r0, [pc, #164]	; (8002b08 <main+0xec>)
 8002a62:	f002 fdf5 	bl	8005650 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim3);
 8002a66:	4829      	ldr	r0, [pc, #164]	; (8002b0c <main+0xf0>)
 8002a68:	f002 fdf2 	bl	8005650 <HAL_TIM_Base_Start_IT>
	HAL_Delay(2000);
 8002a6c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a70:	f001 f97e 	bl	8003d70 <HAL_Delay>
	mmode = 0;
 8002a74:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <main+0xf4>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
	status = 0;
 8002a7a:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <main+0xf8>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
	current_speed = 0;
 8002a80:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <main+0xfc>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, 8);
 8002a86:	2208      	movs	r2, #8
 8002a88:	4924      	ldr	r1, [pc, #144]	; (8002b1c <main+0x100>)
 8002a8a:	4825      	ldr	r0, [pc, #148]	; (8002b20 <main+0x104>)
 8002a8c:	f001 fa6c 	bl	8003f68 <HAL_ADC_Start_DMA>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, htim2.Init.Period);
 8002a90:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <main+0xe8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <main+0xe8>)
 8002a96:	68d2      	ldr	r2, [r2, #12]
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, htim2.Init.Period);
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <main+0xe8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a19      	ldr	r2, [pc, #100]	; (8002b04 <main+0xe8>)
 8002aa0:	68d2      	ldr	r2, [r2, #12]
 8002aa2:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, htim2.Init.Period);
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <main+0xe8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <main+0xe8>)
 8002aaa:	68d2      	ldr	r2, [r2, #12]
 8002aac:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, htim2.Init.Period);
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <main+0xe8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a14      	ldr	r2, [pc, #80]	; (8002b04 <main+0xe8>)
 8002ab4:	68d2      	ldr	r2, [r2, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (mmode == 1) {
 8002ab8:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <main+0xf4>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d10c      	bne.n	8002adc <main+0xc0>
			HAL_Delay(2000);
 8002ac2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ac6:	f001 f953 	bl	8003d70 <HAL_Delay>
			go_straight(238, 1);
 8002aca:	2101      	movs	r1, #1
 8002acc:	4815      	ldr	r0, [pc, #84]	; (8002b24 <main+0x108>)
 8002ace:	f000 ffa3 	bl	8003a18 <go_straight>
			start_fill();
 8002ad2:	f7fe f8eb 	bl	8000cac <start_fill>
			mmode = 0;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <main+0xf4>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
		}
		if (mmode == 2) {
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <main+0xf4>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d102      	bne.n	8002aec <main+0xd0>
			mmode = 0;
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <main+0xf4>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
		}
		a = TIM1->CNT;
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <main+0x10c>)
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <main+0x110>)
 8002af4:	601a      	str	r2, [r3, #0]
		b = TIM3->CNT;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <main+0x114>)
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <main+0x118>)
 8002afe:	601a      	str	r2, [r3, #0]
		if (mmode == 1) {
 8002b00:	e7da      	b.n	8002ab8 <main+0x9c>
 8002b02:	bf00      	nop
 8002b04:	20000214 	.word	0x20000214
 8002b08:	200001cc 	.word	0x200001cc
 8002b0c:	2000025c 	.word	0x2000025c
 8002b10:	20000375 	.word	0x20000375
 8002b14:	20000376 	.word	0x20000376
 8002b18:	20000374 	.word	0x20000374
 8002b1c:	2000036c 	.word	0x2000036c
 8002b20:	20000158 	.word	0x20000158
 8002b24:	436e0000 	.word	0x436e0000
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	20000378 	.word	0x20000378
 8002b30:	40000400 	.word	0x40000400
 8002b34:	2000037c 	.word	0x2000037c

08002b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b094      	sub	sp, #80	; 0x50
 8002b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b42:	2228      	movs	r2, #40	; 0x28
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fd98 	bl	800667c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b72:	2300      	movs	r3, #0
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b76:	2301      	movs	r3, #1
 8002b78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b84:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 f87a 	bl	8004c88 <HAL_RCC_OscConfig>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002b9a:	f000 fa39 	bl	8003010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b9e:	230f      	movs	r3, #15
 8002ba0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	2102      	movs	r1, #2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 fae6 	bl	800518c <HAL_RCC_ClockConfig>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002bc6:	f000 fa23 	bl	8003010 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 fc34 	bl	8005444 <HAL_RCCEx_PeriphCLKConfig>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002be2:	f000 fa15 	bl	8003010 <Error_Handler>
  }
}
 8002be6:	bf00      	nop
 8002be8:	3750      	adds	r7, #80	; 0x50
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bf6:	1d3b      	adds	r3, r7, #4
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002c00:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <MX_ADC1_Init+0xcc>)
 8002c02:	4a2f      	ldr	r2, [pc, #188]	; (8002cc0 <MX_ADC1_Init+0xd0>)
 8002c04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <MX_ADC1_Init+0xcc>)
 8002c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <MX_ADC1_Init+0xcc>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c14:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <MX_ADC1_Init+0xcc>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c1a:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <MX_ADC1_Init+0xcc>)
 8002c1c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002c20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <MX_ADC1_Init+0xcc>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002c28:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <MX_ADC1_Init+0xcc>)
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c2e:	4823      	ldr	r0, [pc, #140]	; (8002cbc <MX_ADC1_Init+0xcc>)
 8002c30:	f001 f8c2 	bl	8003db8 <HAL_ADC_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002c3a:	f000 f9e9 	bl	8003010 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c42:	2301      	movs	r3, #1
 8002c44:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002c46:	2302      	movs	r3, #2
 8002c48:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	481b      	ldr	r0, [pc, #108]	; (8002cbc <MX_ADC1_Init+0xcc>)
 8002c50:	f001 fa84 	bl	800415c <HAL_ADC_ConfigChannel>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002c5a:	f000 f9d9 	bl	8003010 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002c62:	2302      	movs	r3, #2
 8002c64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4814      	ldr	r0, [pc, #80]	; (8002cbc <MX_ADC1_Init+0xcc>)
 8002c6c:	f001 fa76 	bl	800415c <HAL_ADC_ConfigChannel>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002c76:	f000 f9cb 	bl	8003010 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	4619      	mov	r1, r3
 8002c86:	480d      	ldr	r0, [pc, #52]	; (8002cbc <MX_ADC1_Init+0xcc>)
 8002c88:	f001 fa68 	bl	800415c <HAL_ADC_ConfigChannel>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002c92:	f000 f9bd 	bl	8003010 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002c96:	2305      	movs	r3, #5
 8002c98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c9e:	1d3b      	adds	r3, r7, #4
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4806      	ldr	r0, [pc, #24]	; (8002cbc <MX_ADC1_Init+0xcc>)
 8002ca4:	f001 fa5a 	bl	800415c <HAL_ADC_ConfigChannel>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002cae:	f000 f9af 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000158 	.word	0x20000158
 8002cc0:	40012400 	.word	0x40012400

08002cc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002cca:	f107 030c 	add.w	r3, r7, #12
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	60da      	str	r2, [r3, #12]
 8002cd8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ce2:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <MX_TIM1_Init+0xa0>)
 8002ce4:	4a20      	ldr	r2, [pc, #128]	; (8002d68 <MX_TIM1_Init+0xa4>)
 8002ce6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ce8:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <MX_TIM1_Init+0xa0>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cee:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <MX_TIM1_Init+0xa0>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <MX_TIM1_Init+0xa0>)
 8002cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cfa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <MX_TIM1_Init+0xa0>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d02:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <MX_TIM1_Init+0xa0>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d08:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <MX_TIM1_Init+0xa0>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d0e:	4815      	ldr	r0, [pc, #84]	; (8002d64 <MX_TIM1_Init+0xa0>)
 8002d10:	f002 fc4e 	bl	80055b0 <HAL_TIM_Base_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002d1a:	f000 f979 	bl	8003010 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002d1e:	2307      	movs	r3, #7
 8002d20:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8002d22:	2340      	movs	r3, #64	; 0x40
 8002d24:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 12;
 8002d26:	230c      	movs	r3, #12
 8002d28:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	4619      	mov	r1, r3
 8002d30:	480c      	ldr	r0, [pc, #48]	; (8002d64 <MX_TIM1_Init+0xa0>)
 8002d32:	f003 f86a 	bl	8005e0a <HAL_TIM_SlaveConfigSynchro>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002d3c:	f000 f968 	bl	8003010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d40:	2300      	movs	r3, #0
 8002d42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d48:	1d3b      	adds	r3, r7, #4
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4805      	ldr	r0, [pc, #20]	; (8002d64 <MX_TIM1_Init+0xa0>)
 8002d4e:	f003 fc01 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002d58:	f000 f95a 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d5c:	bf00      	nop
 8002d5e:	3720      	adds	r7, #32
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	200001cc 	.word	0x200001cc
 8002d68:	40012c00 	.word	0x40012c00

08002d6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08e      	sub	sp, #56	; 0x38
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d80:	f107 0320 	add.w	r3, r7, #32
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	611a      	str	r2, [r3, #16]
 8002d98:	615a      	str	r2, [r3, #20]
 8002d9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d9c:	4b3d      	ldr	r3, [pc, #244]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002da2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8002da4:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002da6:	2263      	movs	r2, #99	; 0x63
 8002da8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002daa:	4b3a      	ldr	r3, [pc, #232]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8002db0:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002db2:	f242 720f 	movw	r2, #9999	; 0x270f
 8002db6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db8:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dbe:	4b35      	ldr	r3, [pc, #212]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dc4:	4833      	ldr	r0, [pc, #204]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002dc6:	f002 fbf3 	bl	80055b0 <HAL_TIM_Base_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002dd0:	f000 f91e 	bl	8003010 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dde:	4619      	mov	r1, r3
 8002de0:	482c      	ldr	r0, [pc, #176]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002de2:	f002 ff4b 	bl	8005c7c <HAL_TIM_ConfigClockSource>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002dec:	f000 f910 	bl	8003010 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002df0:	4828      	ldr	r0, [pc, #160]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002df2:	f002 fc7f 	bl	80056f4 <HAL_TIM_PWM_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002dfc:	f000 f908 	bl	8003010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e00:	2300      	movs	r3, #0
 8002e02:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e08:	f107 0320 	add.w	r3, r7, #32
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4821      	ldr	r0, [pc, #132]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002e10:	f003 fba0 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002e1a:	f000 f8f9 	bl	8003010 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e1e:	2360      	movs	r3, #96	; 0x60
 8002e20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	2200      	movs	r2, #0
 8002e32:	4619      	mov	r1, r3
 8002e34:	4817      	ldr	r0, [pc, #92]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002e36:	f002 fe5f 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002e40:	f000 f8e6 	bl	8003010 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	2204      	movs	r2, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4812      	ldr	r0, [pc, #72]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002e4c:	f002 fe54 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002e56:	f000 f8db 	bl	8003010 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	4619      	mov	r1, r3
 8002e60:	480c      	ldr	r0, [pc, #48]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002e62:	f002 fe49 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002e6c:	f000 f8d0 	bl	8003010 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e70:	1d3b      	adds	r3, r7, #4
 8002e72:	220c      	movs	r2, #12
 8002e74:	4619      	mov	r1, r3
 8002e76:	4807      	ldr	r0, [pc, #28]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002e78:	f002 fe3e 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002e82:	f000 f8c5 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e86:	4803      	ldr	r0, [pc, #12]	; (8002e94 <MX_TIM2_Init+0x128>)
 8002e88:	f000 f9f0 	bl	800326c <HAL_TIM_MspPostInit>

}
 8002e8c:	bf00      	nop
 8002e8e:	3738      	adds	r7, #56	; 0x38
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000214 	.word	0x20000214

08002e98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002e9e:	f107 030c 	add.w	r3, r7, #12
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <MX_TIM3_Init+0x9c>)
 8002eb8:	4a1f      	ldr	r2, [pc, #124]	; (8002f38 <MX_TIM3_Init+0xa0>)
 8002eba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <MX_TIM3_Init+0x9c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <MX_TIM3_Init+0x9c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <MX_TIM3_Init+0x9c>)
 8002eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ece:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed0:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <MX_TIM3_Init+0x9c>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed6:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <MX_TIM3_Init+0x9c>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002edc:	4815      	ldr	r0, [pc, #84]	; (8002f34 <MX_TIM3_Init+0x9c>)
 8002ede:	f002 fb67 	bl	80055b0 <HAL_TIM_Base_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ee8:	f000 f892 	bl	8003010 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002eec:	2307      	movs	r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8002ef0:	2340      	movs	r3, #64	; 0x40
 8002ef2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 12;
 8002ef4:	230c      	movs	r3, #12
 8002ef6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002ef8:	f107 030c 	add.w	r3, r7, #12
 8002efc:	4619      	mov	r1, r3
 8002efe:	480d      	ldr	r0, [pc, #52]	; (8002f34 <MX_TIM3_Init+0x9c>)
 8002f00:	f002 ff83 	bl	8005e0a <HAL_TIM_SlaveConfigSynchro>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002f0a:	f000 f881 	bl	8003010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f16:	1d3b      	adds	r3, r7, #4
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4806      	ldr	r0, [pc, #24]	; (8002f34 <MX_TIM3_Init+0x9c>)
 8002f1c:	f003 fb1a 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002f26:	f000 f873 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f2a:	bf00      	nop
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	2000025c 	.word	0x2000025c
 8002f38:	40000400 	.word	0x40000400

08002f3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <MX_DMA_Init+0x28>)
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <MX_DMA_Init+0x28>)
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	6153      	str	r3, [r2, #20]
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <MX_DMA_Init+0x28>)
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]

}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	40021000 	.word	0x40021000

08002f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6e:	f107 0310 	add.w	r3, r7, #16
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f7c:	4b21      	ldr	r3, [pc, #132]	; (8003004 <MX_GPIO_Init+0x9c>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	4a20      	ldr	r2, [pc, #128]	; (8003004 <MX_GPIO_Init+0x9c>)
 8002f82:	f043 0320 	orr.w	r3, r3, #32
 8002f86:	6193      	str	r3, [r2, #24]
 8002f88:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <MX_GPIO_Init+0x9c>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f94:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <MX_GPIO_Init+0x9c>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	4a1a      	ldr	r2, [pc, #104]	; (8003004 <MX_GPIO_Init+0x9c>)
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	6193      	str	r3, [r2, #24]
 8002fa0:	4b18      	ldr	r3, [pc, #96]	; (8003004 <MX_GPIO_Init+0x9c>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <MX_GPIO_Init+0x9c>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	4a14      	ldr	r2, [pc, #80]	; (8003004 <MX_GPIO_Init+0x9c>)
 8002fb2:	f043 0308 	orr.w	r3, r3, #8
 8002fb6:	6193      	str	r3, [r2, #24]
 8002fb8:	4b12      	ldr	r3, [pc, #72]	; (8003004 <MX_GPIO_Init+0x9c>)
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <MX_GPIO_Init+0xa0>)
 8002fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd0:	f107 0310 	add.w	r3, r7, #16
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	480d      	ldr	r0, [pc, #52]	; (800300c <MX_GPIO_Init+0xa4>)
 8002fd8:	f001 fcb0 	bl	800493c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2100      	movs	r1, #0
 8002fe0:	2006      	movs	r0, #6
 8002fe2:	f001 fb8c 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002fe6:	2006      	movs	r0, #6
 8002fe8:	f001 fba5 	bl	8004736 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002fec:	2200      	movs	r2, #0
 8002fee:	2100      	movs	r1, #0
 8002ff0:	2007      	movs	r0, #7
 8002ff2:	f001 fb84 	bl	80046fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002ff6:	2007      	movs	r0, #7
 8002ff8:	f001 fb9d 	bl	8004736 <HAL_NVIC_EnableIRQ>

}
 8002ffc:	bf00      	nop
 8002ffe:	3720      	adds	r7, #32
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	10210000 	.word	0x10210000
 800300c:	40010c00 	.word	0x40010c00

08003010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003014:	b672      	cpsid	i
}
 8003016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003018:	e7fe      	b.n	8003018 <Error_Handler+0x8>
	...

0800301c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <HAL_MspInit+0x5c>)
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <HAL_MspInit+0x5c>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6193      	str	r3, [r2, #24]
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_MspInit+0x5c>)
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800303a:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <HAL_MspInit+0x5c>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4a0e      	ldr	r2, [pc, #56]	; (8003078 <HAL_MspInit+0x5c>)
 8003040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003044:	61d3      	str	r3, [r2, #28]
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <HAL_MspInit+0x5c>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_MspInit+0x60>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	4a04      	ldr	r2, [pc, #16]	; (800307c <HAL_MspInit+0x60>)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	40021000 	.word	0x40021000
 800307c:	40010000 	.word	0x40010000

08003080 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a28      	ldr	r2, [pc, #160]	; (800313c <HAL_ADC_MspInit+0xbc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d149      	bne.n	8003134 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030a0:	4b27      	ldr	r3, [pc, #156]	; (8003140 <HAL_ADC_MspInit+0xc0>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	4a26      	ldr	r2, [pc, #152]	; (8003140 <HAL_ADC_MspInit+0xc0>)
 80030a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030aa:	6193      	str	r3, [r2, #24]
 80030ac:	4b24      	ldr	r3, [pc, #144]	; (8003140 <HAL_ADC_MspInit+0xc0>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b8:	4b21      	ldr	r3, [pc, #132]	; (8003140 <HAL_ADC_MspInit+0xc0>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	4a20      	ldr	r2, [pc, #128]	; (8003140 <HAL_ADC_MspInit+0xc0>)
 80030be:	f043 0304 	orr.w	r3, r3, #4
 80030c2:	6193      	str	r3, [r2, #24]
 80030c4:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <HAL_ADC_MspInit+0xc0>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80030d0:	233c      	movs	r3, #60	; 0x3c
 80030d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030d4:	2303      	movs	r3, #3
 80030d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d8:	f107 0310 	add.w	r3, r7, #16
 80030dc:	4619      	mov	r1, r3
 80030de:	4819      	ldr	r0, [pc, #100]	; (8003144 <HAL_ADC_MspInit+0xc4>)
 80030e0:	f001 fc2c 	bl	800493c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80030e4:	4b18      	ldr	r3, [pc, #96]	; (8003148 <HAL_ADC_MspInit+0xc8>)
 80030e6:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_ADC_MspInit+0xcc>)
 80030e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ea:	4b17      	ldr	r3, [pc, #92]	; (8003148 <HAL_ADC_MspInit+0xc8>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f0:	4b15      	ldr	r3, [pc, #84]	; (8003148 <HAL_ADC_MspInit+0xc8>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030f6:	4b14      	ldr	r3, [pc, #80]	; (8003148 <HAL_ADC_MspInit+0xc8>)
 80030f8:	2280      	movs	r2, #128	; 0x80
 80030fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_ADC_MspInit+0xc8>)
 80030fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003102:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003104:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_ADC_MspInit+0xc8>)
 8003106:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800310a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800310c:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <HAL_ADC_MspInit+0xc8>)
 800310e:	2220      	movs	r2, #32
 8003110:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003112:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <HAL_ADC_MspInit+0xc8>)
 8003114:	2200      	movs	r2, #0
 8003116:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003118:	480b      	ldr	r0, [pc, #44]	; (8003148 <HAL_ADC_MspInit+0xc8>)
 800311a:	f001 fb27 	bl	800476c <HAL_DMA_Init>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8003124:	f7ff ff74 	bl	8003010 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a07      	ldr	r2, [pc, #28]	; (8003148 <HAL_ADC_MspInit+0xc8>)
 800312c:	621a      	str	r2, [r3, #32]
 800312e:	4a06      	ldr	r2, [pc, #24]	; (8003148 <HAL_ADC_MspInit+0xc8>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003134:	bf00      	nop
 8003136:	3720      	adds	r7, #32
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40012400 	.word	0x40012400
 8003140:	40021000 	.word	0x40021000
 8003144:	40010800 	.word	0x40010800
 8003148:	20000188 	.word	0x20000188
 800314c:	40020008 	.word	0x40020008

08003150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08c      	sub	sp, #48	; 0x30
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0320 	add.w	r3, r7, #32
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a3c      	ldr	r2, [pc, #240]	; (800325c <HAL_TIM_Base_MspInit+0x10c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d12d      	bne.n	80031cc <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003170:	4b3b      	ldr	r3, [pc, #236]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	4a3a      	ldr	r2, [pc, #232]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 8003176:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800317a:	6193      	str	r3, [r2, #24]
 800317c:	4b38      	ldr	r3, [pc, #224]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003188:	4b35      	ldr	r3, [pc, #212]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	4a34      	ldr	r2, [pc, #208]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 800318e:	f043 0304 	orr.w	r3, r3, #4
 8003192:	6193      	str	r3, [r2, #24]
 8003194:	4b32      	ldr	r3, [pc, #200]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a6:	2300      	movs	r3, #0
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ae:	f107 0320 	add.w	r3, r7, #32
 80031b2:	4619      	mov	r1, r3
 80031b4:	482b      	ldr	r0, [pc, #172]	; (8003264 <HAL_TIM_Base_MspInit+0x114>)
 80031b6:	f001 fbc1 	bl	800493c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	2019      	movs	r0, #25
 80031c0:	f001 fa9d 	bl	80046fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80031c4:	2019      	movs	r0, #25
 80031c6:	f001 fab6 	bl	8004736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80031ca:	e042      	b.n	8003252 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d4:	d10c      	bne.n	80031f0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031d6:	4b22      	ldr	r3, [pc, #136]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	4a21      	ldr	r2, [pc, #132]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	61d3      	str	r3, [r2, #28]
 80031e2:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	697b      	ldr	r3, [r7, #20]
}
 80031ee:	e030      	b.n	8003252 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1c      	ldr	r2, [pc, #112]	; (8003268 <HAL_TIM_Base_MspInit+0x118>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d12b      	bne.n	8003252 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031fa:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4a18      	ldr	r2, [pc, #96]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 8003200:	f043 0302 	orr.w	r3, r3, #2
 8003204:	61d3      	str	r3, [r2, #28]
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003212:	4b13      	ldr	r3, [pc, #76]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	6193      	str	r3, [r2, #24]
 800321e:	4b10      	ldr	r3, [pc, #64]	; (8003260 <HAL_TIM_Base_MspInit+0x110>)
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800322a:	2340      	movs	r3, #64	; 0x40
 800322c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	2300      	movs	r3, #0
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003236:	f107 0320 	add.w	r3, r7, #32
 800323a:	4619      	mov	r1, r3
 800323c:	4809      	ldr	r0, [pc, #36]	; (8003264 <HAL_TIM_Base_MspInit+0x114>)
 800323e:	f001 fb7d 	bl	800493c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003242:	2200      	movs	r2, #0
 8003244:	2100      	movs	r1, #0
 8003246:	201d      	movs	r0, #29
 8003248:	f001 fa59 	bl	80046fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800324c:	201d      	movs	r0, #29
 800324e:	f001 fa72 	bl	8004736 <HAL_NVIC_EnableIRQ>
}
 8003252:	bf00      	nop
 8003254:	3730      	adds	r7, #48	; 0x30
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40021000 	.word	0x40021000
 8003264:	40010800 	.word	0x40010800
 8003268:	40000400 	.word	0x40000400

0800326c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328a:	d142      	bne.n	8003312 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328c:	4b23      	ldr	r3, [pc, #140]	; (800331c <HAL_TIM_MspPostInit+0xb0>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	4a22      	ldr	r2, [pc, #136]	; (800331c <HAL_TIM_MspPostInit+0xb0>)
 8003292:	f043 0304 	orr.w	r3, r3, #4
 8003296:	6193      	str	r3, [r2, #24]
 8003298:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_TIM_MspPostInit+0xb0>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_TIM_MspPostInit+0xb0>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	4a1c      	ldr	r2, [pc, #112]	; (800331c <HAL_TIM_MspPostInit+0xb0>)
 80032aa:	f043 0308 	orr.w	r3, r3, #8
 80032ae:	6193      	str	r3, [r2, #24]
 80032b0:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_TIM_MspPostInit+0xb0>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032bc:	2303      	movs	r3, #3
 80032be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c0:	2302      	movs	r3, #2
 80032c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c4:	2302      	movs	r3, #2
 80032c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4619      	mov	r1, r3
 80032ce:	4814      	ldr	r0, [pc, #80]	; (8003320 <HAL_TIM_MspPostInit+0xb4>)
 80032d0:	f001 fb34 	bl	800493c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032de:	2302      	movs	r3, #2
 80032e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e2:	f107 0314 	add.w	r3, r7, #20
 80032e6:	4619      	mov	r1, r3
 80032e8:	480e      	ldr	r0, [pc, #56]	; (8003324 <HAL_TIM_MspPostInit+0xb8>)
 80032ea:	f001 fb27 	bl	800493c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80032ee:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_TIM_MspPostInit+0xbc>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
 800330c:	4a06      	ldr	r2, [pc, #24]	; (8003328 <HAL_TIM_MspPostInit+0xbc>)
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003312:	bf00      	nop
 8003314:	3728      	adds	r7, #40	; 0x28
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	40010800 	.word	0x40010800
 8003324:	40010c00 	.word	0x40010c00
 8003328:	40010000 	.word	0x40010000

0800332c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003330:	e7fe      	b.n	8003330 <NMI_Handler+0x4>

08003332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003332:	b480      	push	{r7}
 8003334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003336:	e7fe      	b.n	8003336 <HardFault_Handler+0x4>

08003338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800333c:	e7fe      	b.n	800333c <MemManage_Handler+0x4>

0800333e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800333e:	b480      	push	{r7}
 8003340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003342:	e7fe      	b.n	8003342 <BusFault_Handler+0x4>

08003344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003348:	e7fe      	b.n	8003348 <UsageFault_Handler+0x4>

0800334a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800334a:	b480      	push	{r7}
 800334c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003372:	f000 fce1 	bl	8003d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003380:	2001      	movs	r0, #1
 8003382:	f001 fc5f 	bl	8004c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	mmode = 1;
 8003386:	4b02      	ldr	r3, [pc, #8]	; (8003390 <EXTI0_IRQHandler+0x14>)
 8003388:	2201      	movs	r2, #1
 800338a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000375 	.word	0x20000375

08003394 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003398:	2002      	movs	r0, #2
 800339a:	f001 fc53 	bl	8004c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	mmode = 2;
 800339e:	4b02      	ldr	r3, [pc, #8]	; (80033a8 <EXTI1_IRQHandler+0x14>)
 80033a0:	2202      	movs	r2, #2
 80033a2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 80033a4:	bf00      	nop
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000375 	.word	0x20000375

080033ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if(status == u_turn || status == turn_right_90 || status == turn_right_45 || status == straight){
 80033b0:	4b1f      	ldr	r3, [pc, #124]	; (8003430 <TIM1_UP_IRQHandler+0x84>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	b25b      	sxtb	r3, r3
 80033b6:	f113 0f05 	cmn.w	r3, #5
 80033ba:	d011      	beq.n	80033e0 <TIM1_UP_IRQHandler+0x34>
 80033bc:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <TIM1_UP_IRQHandler+0x84>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	b25b      	sxtb	r3, r3
 80033c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c6:	d00b      	beq.n	80033e0 <TIM1_UP_IRQHandler+0x34>
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <TIM1_UP_IRQHandler+0x84>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b25b      	sxtb	r3, r3
 80033ce:	f113 0f02 	cmn.w	r3, #2
 80033d2:	d005      	beq.n	80033e0 <TIM1_UP_IRQHandler+0x34>
 80033d4:	4b16      	ldr	r3, [pc, #88]	; (8003430 <TIM1_UP_IRQHandler+0x84>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	b25b      	sxtb	r3, r3
 80033da:	f113 0f06 	cmn.w	r3, #6
 80033de:	d103      	bne.n	80033e8 <TIM1_UP_IRQHandler+0x3c>
		status = 0;
 80033e0:	4b13      	ldr	r3, [pc, #76]	; (8003430 <TIM1_UP_IRQHandler+0x84>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	e01d      	b.n	8003424 <TIM1_UP_IRQHandler+0x78>
	} else {
		switch(status){
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <TIM1_UP_IRQHandler+0x84>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	b25b      	sxtb	r3, r3
 80033ee:	f113 0f04 	cmn.w	r3, #4
 80033f2:	d003      	beq.n	80033fc <TIM1_UP_IRQHandler+0x50>
 80033f4:	f113 0f03 	cmn.w	r3, #3
 80033f8:	d00a      	beq.n	8003410 <TIM1_UP_IRQHandler+0x64>
 80033fa:	e013      	b.n	8003424 <TIM1_UP_IRQHandler+0x78>
			case turn_left_90:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 80033fc:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <TIM1_UP_IRQHandler+0x88>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8003406:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <TIM1_UP_IRQHandler+0x88>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2200      	movs	r2, #0
 800340c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800340e:	e009      	b.n	8003424 <TIM1_UP_IRQHandler+0x78>
			case turn_left_45:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <TIM1_UP_IRQHandler+0x88>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <TIM1_UP_IRQHandler+0x88>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2200      	movs	r2, #0
 8003420:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8003422:	bf00      	nop
		}
	}
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003424:	4804      	ldr	r0, [pc, #16]	; (8003438 <TIM1_UP_IRQHandler+0x8c>)
 8003426:	f002 fa5f 	bl	80058e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000376 	.word	0x20000376
 8003434:	20000214 	.word	0x20000214
 8003438:	200001cc 	.word	0x200001cc

0800343c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(status == turn_left_90 || status == turn_left_45){
 8003440:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <TIM3_IRQHandler+0xac>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	b25b      	sxtb	r3, r3
 8003446:	f113 0f04 	cmn.w	r3, #4
 800344a:	d005      	beq.n	8003458 <TIM3_IRQHandler+0x1c>
 800344c:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <TIM3_IRQHandler+0xac>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	b25b      	sxtb	r3, r3
 8003452:	f113 0f03 	cmn.w	r3, #3
 8003456:	d103      	bne.n	8003460 <TIM3_IRQHandler+0x24>
		status = 0;
 8003458:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <TIM3_IRQHandler+0xac>)
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e03e      	b.n	80034de <TIM3_IRQHandler+0xa2>
	} else  {
		switch(status){
 8003460:	4b21      	ldr	r3, [pc, #132]	; (80034e8 <TIM3_IRQHandler+0xac>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	b25b      	sxtb	r3, r3
 8003466:	3306      	adds	r3, #6
 8003468:	2b05      	cmp	r3, #5
 800346a:	d838      	bhi.n	80034de <TIM3_IRQHandler+0xa2>
 800346c:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <TIM3_IRQHandler+0x38>)
 800346e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003472:	bf00      	nop
 8003474:	080034c9 	.word	0x080034c9
 8003478:	0800348d 	.word	0x0800348d
 800347c:	080034df 	.word	0x080034df
 8003480:	080034df 	.word	0x080034df
 8003484:	080034b5 	.word	0x080034b5
 8003488:	080034a1 	.word	0x080034a1
			case u_turn:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 800348c:	4b17      	ldr	r3, [pc, #92]	; (80034ec <TIM3_IRQHandler+0xb0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003494:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 500);
 8003496:	4b15      	ldr	r3, [pc, #84]	; (80034ec <TIM3_IRQHandler+0xb0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800349e:	63da      	str	r2, [r3, #60]	; 0x3c
			case turn_right_90:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80034a0:	4b12      	ldr	r3, [pc, #72]	; (80034ec <TIM3_IRQHandler+0xb0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034a8:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <TIM3_IRQHandler+0xb0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80034b2:	e014      	b.n	80034de <TIM3_IRQHandler+0xa2>
			case turn_right_45:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <TIM3_IRQHandler+0xb0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034bc:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80034be:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <TIM3_IRQHandler+0xb0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80034c6:	e00a      	b.n	80034de <TIM3_IRQHandler+0xa2>
			case straight:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <TIM3_IRQHandler+0xb0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034d0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <TIM3_IRQHandler+0xb0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 80034dc:	bf00      	nop
		}
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034de:	4804      	ldr	r0, [pc, #16]	; (80034f0 <TIM3_IRQHandler+0xb4>)
 80034e0:	f002 fa02 	bl	80058e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20000376 	.word	0x20000376
 80034ec:	20000214 	.word	0x20000214
 80034f0:	2000025c 	.word	0x2000025c

080034f4 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <u_turnf>:
const float turn90_arc_en = (float)halfSize_MicroMouse * M_PI * 4 * (90.0/360) * counts_per_1mm;
const float turn45_arc_en = (float)halfSize_MicroMouse * M_PI * 4 * (45.0/360) * counts_per_1mm;
const uint16_t kp = 3;
const uint16_t kd = 3;

void u_turnf(uint8_t *direction) {
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b03      	cmp	r3, #3
 800350e:	d81b      	bhi.n	8003548 <u_turnf+0x48>
 8003510:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <u_turnf+0x18>)
 8003512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003516:	bf00      	nop
 8003518:	08003529 	.word	0x08003529
 800351c:	08003531 	.word	0x08003531
 8003520:	08003539 	.word	0x08003539
 8003524:	08003541 	.word	0x08003541
		case west:  *direction = east;   break;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e00b      	b.n	8003548 <u_turnf+0x48>
		case east:  *direction = west;   break;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e007      	b.n	8003548 <u_turnf+0x48>
		case north: *direction = south;  break;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2203      	movs	r2, #3
 800353c:	701a      	strb	r2, [r3, #0]
 800353e:	e003      	b.n	8003548 <u_turnf+0x48>
		case south: *direction = north;  break;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	bf00      	nop
	}
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(uturn_arc_en));
 8003548:	4b52      	ldr	r3, [pc, #328]	; (8003694 <u_turnf+0x194>)
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd f816 	bl	800057c <__aeabi_f2d>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	f003 f898 	bl	800668c <round>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	494d      	ldr	r1, [pc, #308]	; (8003698 <u_turnf+0x198>)
 8003562:	680c      	ldr	r4, [r1, #0]
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	f7fd fa72 	bl	8000a50 <__aeabi_d2uiz>
 800356c:	4603      	mov	r3, r0
 800356e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003570:	4b48      	ldr	r3, [pc, #288]	; (8003694 <u_turnf+0x194>)
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd f802 	bl	800057c <__aeabi_f2d>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	f003 f884 	bl	800668c <round>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	f7fd fa60 	bl	8000a50 <__aeabi_d2uiz>
 8003590:	4603      	mov	r3, r0
 8003592:	4a41      	ldr	r2, [pc, #260]	; (8003698 <u_turnf+0x198>)
 8003594:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(uturn_arc_en) * 5 / 10);
 8003596:	4b3f      	ldr	r3, [pc, #252]	; (8003694 <u_turnf+0x194>)
 8003598:	4618      	mov	r0, r3
 800359a:	f7fc ffef 	bl	800057c <__aeabi_f2d>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	f003 f871 	bl	800668c <round>
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	4b3b      	ldr	r3, [pc, #236]	; (800369c <u_turnf+0x19c>)
 80035b0:	f7fd f83c 	bl	800062c <__aeabi_dmul>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4610      	mov	r0, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <u_turnf+0x1a0>)
 80035c2:	f7fd f95d 	bl	8000880 <__aeabi_ddiv>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4936      	ldr	r1, [pc, #216]	; (80036a4 <u_turnf+0x1a4>)
 80035cc:	680c      	ldr	r4, [r1, #0]
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	f7fd fa3d 	bl	8000a50 <__aeabi_d2uiz>
 80035d6:	4603      	mov	r3, r0
 80035d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035da:	4b2e      	ldr	r3, [pc, #184]	; (8003694 <u_turnf+0x194>)
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ffcd 	bl	800057c <__aeabi_f2d>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4610      	mov	r0, r2
 80035e8:	4619      	mov	r1, r3
 80035ea:	f003 f84f 	bl	800668c <round>
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	4b2a      	ldr	r3, [pc, #168]	; (800369c <u_turnf+0x19c>)
 80035f4:	f7fd f81a 	bl	800062c <__aeabi_dmul>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <u_turnf+0x1a0>)
 8003606:	f7fd f93b 	bl	8000880 <__aeabi_ddiv>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	f7fd fa1d 	bl	8000a50 <__aeabi_d2uiz>
 8003616:	4603      	mov	r3, r0
 8003618:	4a22      	ldr	r2, [pc, #136]	; (80036a4 <u_turnf+0x1a4>)
 800361a:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800361c:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <u_turnf+0x198>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2200      	movs	r2, #0
 8003622:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003624:	4b1f      	ldr	r3, [pc, #124]	; (80036a4 <u_turnf+0x1a4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2200      	movs	r2, #0
 800362a:	625a      	str	r2, [r3, #36]	; 0x24
	status = u_turn;
 800362c:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <u_turnf+0x1a8>)
 800362e:	22fb      	movs	r2, #251	; 0xfb
 8003630:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed_levels[current_speed][0]);
 8003632:	4b1e      	ldr	r3, [pc, #120]	; (80036ac <u_turnf+0x1ac>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <u_turnf+0x1b0>)
 800363c:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8003640:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <u_turnf+0x1b4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, speed_levels[current_speed][1]);
 8003646:	4b19      	ldr	r3, [pc, #100]	; (80036ac <u_turnf+0x1ac>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <u_turnf+0x1b0>)
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	885a      	ldrh	r2, [r3, #2]
 8003654:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <u_turnf+0x1b4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800365a:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <u_turnf+0x1b4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2200      	movs	r2, #0
 8003660:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003662:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <u_turnf+0x1b4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	639a      	str	r2, [r3, #56]	; 0x38
	while(status != 0);
 800366a:	bf00      	nop
 800366c:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <u_turnf+0x1a8>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	b25b      	sxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1fa      	bne.n	800366c <u_turnf+0x16c>
	brake();
 8003676:	f000 fa41 	bl	8003afc <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800367a:	4b07      	ldr	r3, [pc, #28]	; (8003698 <u_turnf+0x198>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2200      	movs	r2, #0
 8003680:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003682:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <u_turnf+0x1a4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	625a      	str	r2, [r3, #36]	; 0x24
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	bd90      	pop	{r4, r7, pc}
 8003692:	bf00      	nop
 8003694:	422a0000 	.word	0x422a0000
 8003698:	200001cc 	.word	0x200001cc
 800369c:	40140000 	.word	0x40140000
 80036a0:	40240000 	.word	0x40240000
 80036a4:	2000025c 	.word	0x2000025c
 80036a8:	20000376 	.word	0x20000376
 80036ac:	20000374 	.word	0x20000374
 80036b0:	0800673c 	.word	0x0800673c
 80036b4:	20000214 	.word	0x20000214

080036b8 <turn_left90>:
	brake();
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	__HAL_TIM_SET_COUNTER(&htim3, 0);
}

void turn_left90(uint8_t *direction) {
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	switch(*direction){
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d81b      	bhi.n	8003700 <turn_left90+0x48>
 80036c8:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <turn_left90+0x18>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	080036e1 	.word	0x080036e1
 80036d4:	080036e9 	.word	0x080036e9
 80036d8:	080036f1 	.word	0x080036f1
 80036dc:	080036f9 	.word	0x080036f9
		case west:  *direction = south; break;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2203      	movs	r2, #3
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e00b      	b.n	8003700 <turn_left90+0x48>
		case east:  *direction = north; break;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	e007      	b.n	8003700 <turn_left90+0x48>
		case north: *direction = west;  break;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	701a      	strb	r2, [r3, #0]
 80036f6:	e003      	b.n	8003700 <turn_left90+0x48>
		case south: *direction = east;  break;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	bf00      	nop
	}
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn90_arc_en));
 8003700:	4b50      	ldr	r3, [pc, #320]	; (8003844 <turn_left90+0x18c>)
 8003702:	4618      	mov	r0, r3
 8003704:	f7fc ff3a 	bl	800057c <__aeabi_f2d>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4610      	mov	r0, r2
 800370e:	4619      	mov	r1, r3
 8003710:	f002 ffbc 	bl	800668c <round>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	494b      	ldr	r1, [pc, #300]	; (8003848 <turn_left90+0x190>)
 800371a:	680c      	ldr	r4, [r1, #0]
 800371c:	4610      	mov	r0, r2
 800371e:	4619      	mov	r1, r3
 8003720:	f7fd f996 	bl	8000a50 <__aeabi_d2uiz>
 8003724:	4603      	mov	r3, r0
 8003726:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003728:	4b46      	ldr	r3, [pc, #280]	; (8003844 <turn_left90+0x18c>)
 800372a:	4618      	mov	r0, r3
 800372c:	f7fc ff26 	bl	800057c <__aeabi_f2d>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4610      	mov	r0, r2
 8003736:	4619      	mov	r1, r3
 8003738:	f002 ffa8 	bl	800668c <round>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	f7fd f984 	bl	8000a50 <__aeabi_d2uiz>
 8003748:	4603      	mov	r3, r0
 800374a:	4a3f      	ldr	r2, [pc, #252]	; (8003848 <turn_left90+0x190>)
 800374c:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(turn90_arc_en) * 5 / 10);
 800374e:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <turn_left90+0x18c>)
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc ff13 	bl	800057c <__aeabi_f2d>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4610      	mov	r0, r2
 800375c:	4619      	mov	r1, r3
 800375e:	f002 ff95 	bl	800668c <round>
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	4b39      	ldr	r3, [pc, #228]	; (800384c <turn_left90+0x194>)
 8003768:	f7fc ff60 	bl	800062c <__aeabi_dmul>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	4b35      	ldr	r3, [pc, #212]	; (8003850 <turn_left90+0x198>)
 800377a:	f7fd f881 	bl	8000880 <__aeabi_ddiv>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4934      	ldr	r1, [pc, #208]	; (8003854 <turn_left90+0x19c>)
 8003784:	680c      	ldr	r4, [r1, #0]
 8003786:	4610      	mov	r0, r2
 8003788:	4619      	mov	r1, r3
 800378a:	f7fd f961 	bl	8000a50 <__aeabi_d2uiz>
 800378e:	4603      	mov	r3, r0
 8003790:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003792:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <turn_left90+0x18c>)
 8003794:	4618      	mov	r0, r3
 8003796:	f7fc fef1 	bl	800057c <__aeabi_f2d>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4610      	mov	r0, r2
 80037a0:	4619      	mov	r1, r3
 80037a2:	f002 ff73 	bl	800668c <round>
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	4b28      	ldr	r3, [pc, #160]	; (800384c <turn_left90+0x194>)
 80037ac:	f7fc ff3e 	bl	800062c <__aeabi_dmul>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4610      	mov	r0, r2
 80037b6:	4619      	mov	r1, r3
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	4b24      	ldr	r3, [pc, #144]	; (8003850 <turn_left90+0x198>)
 80037be:	f7fd f85f 	bl	8000880 <__aeabi_ddiv>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4610      	mov	r0, r2
 80037c8:	4619      	mov	r1, r3
 80037ca:	f7fd f941 	bl	8000a50 <__aeabi_d2uiz>
 80037ce:	4603      	mov	r3, r0
 80037d0:	4a20      	ldr	r2, [pc, #128]	; (8003854 <turn_left90+0x19c>)
 80037d2:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80037d4:	4b1f      	ldr	r3, [pc, #124]	; (8003854 <turn_left90+0x19c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2200      	movs	r2, #0
 80037da:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80037dc:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <turn_left90+0x190>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2200      	movs	r2, #0
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24
	status = turn_left_90;
 80037e4:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <turn_left90+0x1a0>)
 80037e6:	22fc      	movs	r2, #252	; 0xfc
 80037e8:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, htim2.Init.Period);
 80037ea:	4b1c      	ldr	r3, [pc, #112]	; (800385c <turn_left90+0x1a4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1b      	ldr	r2, [pc, #108]	; (800385c <turn_left90+0x1a4>)
 80037f0:	68d2      	ldr	r2, [r2, #12]
 80037f2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, htim2.Init.Period);
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <turn_left90+0x1a4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a18      	ldr	r2, [pc, #96]	; (800385c <turn_left90+0x1a4>)
 80037fa:	68d2      	ldr	r2, [r2, #12]
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, speed_levels[current_speed][1]);
 80037fe:	4b18      	ldr	r3, [pc, #96]	; (8003860 <turn_left90+0x1a8>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	4a17      	ldr	r2, [pc, #92]	; (8003864 <turn_left90+0x1ac>)
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	885a      	ldrh	r2, [r3, #2]
 800380c:	4b13      	ldr	r3, [pc, #76]	; (800385c <turn_left90+0x1a4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8003812:	4b12      	ldr	r3, [pc, #72]	; (800385c <turn_left90+0x1a4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2200      	movs	r2, #0
 8003818:	63da      	str	r2, [r3, #60]	; 0x3c
	while(status != 0);
 800381a:	bf00      	nop
 800381c:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <turn_left90+0x1a0>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	b25b      	sxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1fa      	bne.n	800381c <turn_left90+0x164>
	brake();
 8003826:	f000 f969 	bl	8003afc <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <turn_left90+0x19c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2200      	movs	r2, #0
 8003830:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <turn_left90+0x190>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2200      	movs	r2, #0
 8003838:	625a      	str	r2, [r3, #36]	; 0x24
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bd90      	pop	{r4, r7, pc}
 8003842:	bf00      	nop
 8003844:	422a0000 	.word	0x422a0000
 8003848:	2000025c 	.word	0x2000025c
 800384c:	40140000 	.word	0x40140000
 8003850:	40240000 	.word	0x40240000
 8003854:	200001cc 	.word	0x200001cc
 8003858:	20000376 	.word	0x20000376
 800385c:	20000214 	.word	0x20000214
 8003860:	20000374 	.word	0x20000374
 8003864:	0800673c 	.word	0x0800673c

08003868 <turn_right90>:

void turn_right90(uint8_t *direction) {
 8003868:	b590      	push	{r4, r7, lr}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d81b      	bhi.n	80038b0 <turn_right90+0x48>
 8003878:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <turn_right90+0x18>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	08003891 	.word	0x08003891
 8003884:	08003899 	.word	0x08003899
 8003888:	080038a1 	.word	0x080038a1
 800388c:	080038a9 	.word	0x080038a9
		case west:  *direction = north; break;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	e00b      	b.n	80038b0 <turn_right90+0x48>
		case east:  *direction = south; break;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2203      	movs	r2, #3
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	e007      	b.n	80038b0 <turn_right90+0x48>
		case north: *direction = east;  break;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	e003      	b.n	80038b0 <turn_right90+0x48>
		case south: *direction = west;  break;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	bf00      	nop
	}
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(turn90_arc_en));
 80038b0:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <turn_right90+0x18c>)
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fc fe62 	bl	800057c <__aeabi_f2d>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	f002 fee4 	bl	800668c <round>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	494b      	ldr	r1, [pc, #300]	; (80039f8 <turn_right90+0x190>)
 80038ca:	680c      	ldr	r4, [r1, #0]
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	f7fd f8be 	bl	8000a50 <__aeabi_d2uiz>
 80038d4:	4603      	mov	r3, r0
 80038d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038d8:	4b46      	ldr	r3, [pc, #280]	; (80039f4 <turn_right90+0x18c>)
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fc fe4e 	bl	800057c <__aeabi_f2d>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4610      	mov	r0, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	f002 fed0 	bl	800668c <round>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	f7fd f8ac 	bl	8000a50 <__aeabi_d2uiz>
 80038f8:	4603      	mov	r3, r0
 80038fa:	4a3f      	ldr	r2, [pc, #252]	; (80039f8 <turn_right90+0x190>)
 80038fc:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn90_arc_en) * 5 / 10);
 80038fe:	4b3d      	ldr	r3, [pc, #244]	; (80039f4 <turn_right90+0x18c>)
 8003900:	4618      	mov	r0, r3
 8003902:	f7fc fe3b 	bl	800057c <__aeabi_f2d>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	f002 febd 	bl	800668c <round>
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	4b39      	ldr	r3, [pc, #228]	; (80039fc <turn_right90+0x194>)
 8003918:	f7fc fe88 	bl	800062c <__aeabi_dmul>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	4b35      	ldr	r3, [pc, #212]	; (8003a00 <turn_right90+0x198>)
 800392a:	f7fc ffa9 	bl	8000880 <__aeabi_ddiv>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4934      	ldr	r1, [pc, #208]	; (8003a04 <turn_right90+0x19c>)
 8003934:	680c      	ldr	r4, [r1, #0]
 8003936:	4610      	mov	r0, r2
 8003938:	4619      	mov	r1, r3
 800393a:	f7fd f889 	bl	8000a50 <__aeabi_d2uiz>
 800393e:	4603      	mov	r3, r0
 8003940:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003942:	4b2c      	ldr	r3, [pc, #176]	; (80039f4 <turn_right90+0x18c>)
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc fe19 	bl	800057c <__aeabi_f2d>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	f002 fe9b 	bl	800668c <round>
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	4b28      	ldr	r3, [pc, #160]	; (80039fc <turn_right90+0x194>)
 800395c:	f7fc fe66 	bl	800062c <__aeabi_dmul>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4610      	mov	r0, r2
 8003966:	4619      	mov	r1, r3
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <turn_right90+0x198>)
 800396e:	f7fc ff87 	bl	8000880 <__aeabi_ddiv>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	f7fd f869 	bl	8000a50 <__aeabi_d2uiz>
 800397e:	4603      	mov	r3, r0
 8003980:	4a20      	ldr	r2, [pc, #128]	; (8003a04 <turn_right90+0x19c>)
 8003982:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003984:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <turn_right90+0x190>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2200      	movs	r2, #0
 800398a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800398c:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <turn_right90+0x19c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2200      	movs	r2, #0
 8003992:	625a      	str	r2, [r3, #36]	; 0x24
	status = turn_right_90;
 8003994:	4b1c      	ldr	r3, [pc, #112]	; (8003a08 <turn_right90+0x1a0>)
 8003996:	22ff      	movs	r2, #255	; 0xff
 8003998:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, htim2.Init.Period);
 800399a:	4b1c      	ldr	r3, [pc, #112]	; (8003a0c <turn_right90+0x1a4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <turn_right90+0x1a4>)
 80039a0:	68d2      	ldr	r2, [r2, #12]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, htim2.Init.Period);
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <turn_right90+0x1a4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <turn_right90+0x1a4>)
 80039aa:	68d2      	ldr	r2, [r2, #12]
 80039ac:	63da      	str	r2, [r3, #60]	; 0x3c

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed_levels[current_speed][0]);
 80039ae:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <turn_right90+0x1a8>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <turn_right90+0x1ac>)
 80039b8:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 80039bc:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <turn_right90+0x1a4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <turn_right90+0x1a4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2200      	movs	r2, #0
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38

	while(status != 0);
 80039ca:	bf00      	nop
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <turn_right90+0x1a0>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	b25b      	sxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1fa      	bne.n	80039cc <turn_right90+0x164>
	brake();
 80039d6:	f000 f891 	bl	8003afc <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <turn_right90+0x190>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2200      	movs	r2, #0
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <turn_right90+0x19c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2200      	movs	r2, #0
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd90      	pop	{r4, r7, pc}
 80039f2:	bf00      	nop
 80039f4:	422a0000 	.word	0x422a0000
 80039f8:	200001cc 	.word	0x200001cc
 80039fc:	40140000 	.word	0x40140000
 8003a00:	40240000 	.word	0x40240000
 8003a04:	2000025c 	.word	0x2000025c
 8003a08:	20000376 	.word	0x20000376
 8003a0c:	20000214 	.word	0x20000214
 8003a10:	20000374 	.word	0x20000374
 8003a14:	0800673c 	.word	0x0800673c

08003a18 <go_straight>:

void go_straight(float distance, bool brakee) { //millimeter
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
	uint16_t en = round(distance * counts_per_1mm);
 8003a24:	4b2d      	ldr	r3, [pc, #180]	; (8003adc <go_straight+0xc4>)
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fc fb8f 	bl	800014c <__aeabi_fmul>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fc fda3 	bl	800057c <__aeabi_f2d>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f002 fe25 	bl	800668c <round>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f801 	bl	8000a50 <__aeabi_d2uiz>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_AUTORELOAD(&htim1, en - TIM1 -> CNT);
 8003a52:	89f9      	ldrh	r1, [r7, #14]
 8003a54:	4b22      	ldr	r3, [pc, #136]	; (8003ae0 <go_straight+0xc8>)
 8003a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a58:	4b22      	ldr	r3, [pc, #136]	; (8003ae4 <go_straight+0xcc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	1a8a      	subs	r2, r1, r2
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a60:	89fa      	ldrh	r2, [r7, #14]
 8003a62:	4b1f      	ldr	r3, [pc, #124]	; (8003ae0 <go_straight+0xc8>)
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	4a1e      	ldr	r2, [pc, #120]	; (8003ae4 <go_straight+0xcc>)
 8003a6a:	60d3      	str	r3, [r2, #12]
	if(brakee){
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d019      	beq.n	8003aa6 <go_straight+0x8e>
		__HAL_TIM_SET_AUTORELOAD(&htim3, en * 7 / 10);
 8003a72:	89fa      	ldrh	r2, [r7, #14]
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <go_straight+0xd0>)
 8003a7c:	fb82 1203 	smull	r1, r2, r2, r3
 8003a80:	1092      	asrs	r2, r2, #2
 8003a82:	17db      	asrs	r3, r3, #31
 8003a84:	1ad2      	subs	r2, r2, r3
 8003a86:	4b19      	ldr	r3, [pc, #100]	; (8003aec <go_straight+0xd4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a8c:	89fa      	ldrh	r2, [r7, #14]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <go_straight+0xd0>)
 8003a96:	fb82 1203 	smull	r1, r2, r2, r3
 8003a9a:	1092      	asrs	r2, r2, #2
 8003a9c:	17db      	asrs	r3, r3, #31
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <go_straight+0xd4>)
 8003aa4:	60da      	str	r2, [r3, #12]
	}
	status = straight;
 8003aa6:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <go_straight+0xd8>)
 8003aa8:	22fa      	movs	r2, #250	; 0xfa
 8003aaa:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003aac:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <go_straight+0xdc>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8003ab4:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <go_straight+0xdc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed_levels[0][0]);
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <go_straight+0xe0>)
 8003abe:	881a      	ldrh	r2, [r3, #0]
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <go_straight+0xdc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	635a      	str	r2, [r3, #52]	; 0x34
	PID();
 8003ac6:	f000 f835 	bl	8003b34 <PID>
	if(brakee){
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <go_straight+0xbc>
		brake();
 8003ad0:	f000 f814 	bl	8003afc <brake>
	}
}
 8003ad4:	bf00      	nop
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	3ecbb7e4 	.word	0x3ecbb7e4
 8003ae0:	40012c00 	.word	0x40012c00
 8003ae4:	200001cc 	.word	0x200001cc
 8003ae8:	66666667 	.word	0x66666667
 8003aec:	2000025c 	.word	0x2000025c
 8003af0:	20000376 	.word	0x20000376
 8003af4:	20000214 	.word	0x20000214
 8003af8:	0800673c 	.word	0x0800673c

08003afc <brake>:
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed_levels[0][0]);
	HAL_Delay(500);
	brake();
}

void brake(){
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, htim2.Init.Period);
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <brake+0x34>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <brake+0x34>)
 8003b06:	68d2      	ldr	r2, [r2, #12]
 8003b08:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, htim2.Init.Period);
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <brake+0x34>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a08      	ldr	r2, [pc, #32]	; (8003b30 <brake+0x34>)
 8003b10:	68d2      	ldr	r2, [r2, #12]
 8003b12:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, htim2.Init.Period);
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <brake+0x34>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <brake+0x34>)
 8003b1a:	68d2      	ldr	r2, [r2, #12]
 8003b1c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, htim2.Init.Period);
 8003b1e:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <brake+0x34>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a03      	ldr	r2, [pc, #12]	; (8003b30 <brake+0x34>)
 8003b24:	68d2      	ldr	r2, [r2, #12]
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr
 8003b30:	20000214 	.word	0x20000214

08003b34 <PID>:

void PID(){
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
	int16_t Err, pErr = 0, P, D, total;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	81bb      	strh	r3, [r7, #12]
	while(status != 0){
 8003b3e:	e075      	b.n	8003c2c <PID+0xf8>
		if(left_sensor45 > leftWallValue && right_sensor45 > rightWallValue){
 8003b40:	4b40      	ldr	r3, [pc, #256]	; (8003c44 <PID+0x110>)
 8003b42:	889b      	ldrh	r3, [r3, #4]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b64      	cmp	r3, #100	; 0x64
 8003b48:	d910      	bls.n	8003b6c <PID+0x38>
 8003b4a:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <PID+0x110>)
 8003b4c:	885b      	ldrh	r3, [r3, #2]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b64      	cmp	r3, #100	; 0x64
 8003b52:	d90b      	bls.n	8003b6c <PID+0x38>
			Err = left_sensor45 - right_sensor45 - 10;
 8003b54:	4b3b      	ldr	r3, [pc, #236]	; (8003c44 <PID+0x110>)
 8003b56:	889b      	ldrh	r3, [r3, #4]
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	4b3a      	ldr	r3, [pc, #232]	; (8003c44 <PID+0x110>)
 8003b5c:	885b      	ldrh	r3, [r3, #2]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b0a      	subs	r3, #10
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	81fb      	strh	r3, [r7, #14]
 8003b6a:	e023      	b.n	8003bb4 <PID+0x80>
		} else if(left_sensor45 > leftWallValue){
 8003b6c:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <PID+0x110>)
 8003b6e:	889b      	ldrh	r3, [r3, #4]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d906      	bls.n	8003b84 <PID+0x50>
			Err = left_sensor45 - leftWallValue;
 8003b76:	4b33      	ldr	r3, [pc, #204]	; (8003c44 <PID+0x110>)
 8003b78:	889b      	ldrh	r3, [r3, #4]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b64      	subs	r3, #100	; 0x64
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	81fb      	strh	r3, [r7, #14]
 8003b82:	e017      	b.n	8003bb4 <PID+0x80>
		} else if(right_sensor45 > rightWallValue){
 8003b84:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <PID+0x110>)
 8003b86:	885b      	ldrh	r3, [r3, #2]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d907      	bls.n	8003b9e <PID+0x6a>
			Err = rightWallValue - right_sensor45;
 8003b8e:	4b2d      	ldr	r3, [pc, #180]	; (8003c44 <PID+0x110>)
 8003b90:	885b      	ldrh	r3, [r3, #2]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	81fb      	strh	r3, [r7, #14]
 8003b9c:	e00a      	b.n	8003bb4 <PID+0x80>
		} else {
			Err = TIM3->CNT - TIM1->CNT;
 8003b9e:	4b2a      	ldr	r3, [pc, #168]	; (8003c48 <PID+0x114>)
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	4b29      	ldr	r3, [pc, #164]	; (8003c4c <PID+0x118>)
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	81fb      	strh	r3, [r7, #14]
			pErr = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	81bb      	strh	r3, [r7, #12]
		}
		P = kp * Err;
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	89fb      	ldrh	r3, [r7, #14]
 8003bb8:	fb02 f303 	mul.w	r3, r2, r3
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	817b      	strh	r3, [r7, #10]
		D = kd * (Err - pErr);
 8003bc0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003bc4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2203      	movs	r2, #3
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	813b      	strh	r3, [r7, #8]
		pErr = Err;
 8003bd6:	89fb      	ldrh	r3, [r7, #14]
 8003bd8:	81bb      	strh	r3, [r7, #12]
		total = P + D;
 8003bda:	897a      	ldrh	r2, [r7, #10]
 8003bdc:	893b      	ldrh	r3, [r7, #8]
 8003bde:	4413      	add	r3, r2
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003be4:	4b1a      	ldr	r3, [pc, #104]	; (8003c50 <PID+0x11c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2200      	movs	r2, #0
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8003bec:	4b18      	ldr	r3, [pc, #96]	; (8003c50 <PID+0x11c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed_levels[current_speed][0] + total);
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <PID+0x120>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <PID+0x124>)
 8003bfe:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c08:	441a      	add	r2, r3
 8003c0a:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <PID+0x11c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, speed_levels[current_speed][1] - total);
 8003c10:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <PID+0x120>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	4a10      	ldr	r2, [pc, #64]	; (8003c58 <PID+0x124>)
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	885b      	ldrh	r3, [r3, #2]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c24:	1ad2      	subs	r2, r2, r3
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <PID+0x11c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40
	while(status != 0){
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <PID+0x128>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	b25b      	sxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d184      	bne.n	8003b40 <PID+0xc>
	}
}
 8003c36:	bf00      	nop
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	2000036c 	.word	0x2000036c
 8003c48:	40000400 	.word	0x40000400
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	20000214 	.word	0x20000214
 8003c54:	20000374 	.word	0x20000374
 8003c58:	0800673c 	.word	0x0800673c
 8003c5c:	20000376 	.word	0x20000376

08003c60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c60:	f7ff fc48 	bl	80034f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c64:	480b      	ldr	r0, [pc, #44]	; (8003c94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003c66:	490c      	ldr	r1, [pc, #48]	; (8003c98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003c68:	4a0c      	ldr	r2, [pc, #48]	; (8003c9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8003c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c6c:	e002      	b.n	8003c74 <LoopCopyDataInit>

08003c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c72:	3304      	adds	r3, #4

08003c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c78:	d3f9      	bcc.n	8003c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c7a:	4a09      	ldr	r2, [pc, #36]	; (8003ca0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003c7c:	4c09      	ldr	r4, [pc, #36]	; (8003ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c80:	e001      	b.n	8003c86 <LoopFillZerobss>

08003c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c84:	3204      	adds	r2, #4

08003c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c88:	d3fb      	bcc.n	8003c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c8a:	f002 fcd3 	bl	8006634 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c8e:	f7fe fec5 	bl	8002a1c <main>
  bx lr
 8003c92:	4770      	bx	lr
  ldr r0, =_sdata
 8003c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003c9c:	08006770 	.word	0x08006770
  ldr r2, =_sbss
 8003ca0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003ca4:	20000384 	.word	0x20000384

08003ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ca8:	e7fe      	b.n	8003ca8 <ADC1_2_IRQHandler>
	...

08003cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <HAL_Init+0x28>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <HAL_Init+0x28>)
 8003cb6:	f043 0310 	orr.w	r3, r3, #16
 8003cba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cbc:	2003      	movs	r0, #3
 8003cbe:	f000 fd13 	bl	80046e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cc2:	200f      	movs	r0, #15
 8003cc4:	f000 f808 	bl	8003cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cc8:	f7ff f9a8 	bl	800301c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40022000 	.word	0x40022000

08003cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ce0:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_InitTick+0x54>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <HAL_InitTick+0x58>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fd2b 	bl	8004752 <HAL_SYSTICK_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e00e      	b.n	8003d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b0f      	cmp	r3, #15
 8003d0a:	d80a      	bhi.n	8003d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	f04f 30ff 	mov.w	r0, #4294967295
 8003d14:	f000 fcf3 	bl	80046fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d18:	4a06      	ldr	r2, [pc, #24]	; (8003d34 <HAL_InitTick+0x5c>)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	e000      	b.n	8003d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000000 	.word	0x20000000
 8003d30:	20000008 	.word	0x20000008
 8003d34:	20000004 	.word	0x20000004

08003d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_IncTick+0x1c>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_IncTick+0x20>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4413      	add	r3, r2
 8003d48:	4a03      	ldr	r2, [pc, #12]	; (8003d58 <HAL_IncTick+0x20>)
 8003d4a:	6013      	str	r3, [r2, #0]
}
 8003d4c:	bf00      	nop
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr
 8003d54:	20000008 	.word	0x20000008
 8003d58:	20000380 	.word	0x20000380

08003d5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d60:	4b02      	ldr	r3, [pc, #8]	; (8003d6c <HAL_GetTick+0x10>)
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr
 8003d6c:	20000380 	.word	0x20000380

08003d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d78:	f7ff fff0 	bl	8003d5c <HAL_GetTick>
 8003d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d005      	beq.n	8003d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <HAL_Delay+0x44>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d96:	bf00      	nop
 8003d98:	f7ff ffe0 	bl	8003d5c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d8f7      	bhi.n	8003d98 <HAL_Delay+0x28>
  {
  }
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000008 	.word	0x20000008

08003db8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0be      	b.n	8003f58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff f942 	bl	8003080 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 faff 	bl	8004400 <ADC_ConversionStop_Disable>
 8003e02:	4603      	mov	r3, r0
 8003e04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 8099 	bne.w	8003f46 <HAL_ADC_Init+0x18e>
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 8095 	bne.w	8003f46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e24:	f023 0302 	bic.w	r3, r3, #2
 8003e28:	f043 0202 	orr.w	r2, r3, #2
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	7b1b      	ldrb	r3, [r3, #12]
 8003e3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e50:	d003      	beq.n	8003e5a <HAL_ADC_Init+0xa2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d102      	bne.n	8003e60 <HAL_ADC_Init+0xa8>
 8003e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e5e:	e000      	b.n	8003e62 <HAL_ADC_Init+0xaa>
 8003e60:	2300      	movs	r3, #0
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	7d1b      	ldrb	r3, [r3, #20]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d119      	bne.n	8003ea4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	7b1b      	ldrb	r3, [r3, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	035a      	lsls	r2, r3, #13
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	e00b      	b.n	8003ea4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	f043 0220 	orr.w	r2, r3, #32
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	f043 0201 	orr.w	r2, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	4b28      	ldr	r3, [pc, #160]	; (8003f60 <HAL_ADC_Init+0x1a8>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed4:	d003      	beq.n	8003ede <HAL_ADC_Init+0x126>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d104      	bne.n	8003ee8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	051b      	lsls	r3, r3, #20
 8003ee6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <HAL_ADC_Init+0x1ac>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d10b      	bne.n	8003f24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	f023 0303 	bic.w	r3, r3, #3
 8003f1a:	f043 0201 	orr.w	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f22:	e018      	b.n	8003f56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	f023 0312 	bic.w	r3, r3, #18
 8003f2c:	f043 0210 	orr.w	r2, r3, #16
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	f043 0201 	orr.w	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f44:	e007      	b.n	8003f56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	f043 0210 	orr.w	r2, r3, #16
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	ffe1f7fd 	.word	0xffe1f7fd
 8003f64:	ff1f0efe 	.word	0xff1f0efe

08003f68 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a64      	ldr	r2, [pc, #400]	; (8004110 <HAL_ADC_Start_DMA+0x1a8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_ADC_Start_DMA+0x24>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a63      	ldr	r2, [pc, #396]	; (8004114 <HAL_ADC_Start_DMA+0x1ac>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d106      	bne.n	8003f9a <HAL_ADC_Start_DMA+0x32>
 8003f8c:	4b60      	ldr	r3, [pc, #384]	; (8004110 <HAL_ADC_Start_DMA+0x1a8>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 80b3 	bne.w	8004100 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_ADC_Start_DMA+0x40>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e0ae      	b.n	8004106 <HAL_ADC_Start_DMA+0x19e>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f9cb 	bl	800434c <ADC_Enable>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f040 809a 	bne.w	80040f6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a4e      	ldr	r2, [pc, #312]	; (8004114 <HAL_ADC_Start_DMA+0x1ac>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d105      	bne.n	8003fec <HAL_ADC_Start_DMA+0x84>
 8003fe0:	4b4b      	ldr	r3, [pc, #300]	; (8004110 <HAL_ADC_Start_DMA+0x1a8>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d115      	bne.n	8004018 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004002:	2b00      	cmp	r3, #0
 8004004:	d026      	beq.n	8004054 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800400e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004016:	e01d      	b.n	8004054 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a39      	ldr	r2, [pc, #228]	; (8004110 <HAL_ADC_Start_DMA+0x1a8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_ADC_Start_DMA+0xd0>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a38      	ldr	r2, [pc, #224]	; (8004114 <HAL_ADC_Start_DMA+0x1ac>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d10d      	bne.n	8004054 <HAL_ADC_Start_DMA+0xec>
 8004038:	4b35      	ldr	r3, [pc, #212]	; (8004110 <HAL_ADC_Start_DMA+0x1a8>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004048:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800404c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d006      	beq.n	800406e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	f023 0206 	bic.w	r2, r3, #6
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	62da      	str	r2, [r3, #44]	; 0x2c
 800406c:	e002      	b.n	8004074 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	4a25      	ldr	r2, [pc, #148]	; (8004118 <HAL_ADC_Start_DMA+0x1b0>)
 8004082:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	4a24      	ldr	r2, [pc, #144]	; (800411c <HAL_ADC_Start_DMA+0x1b4>)
 800408a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4a23      	ldr	r2, [pc, #140]	; (8004120 <HAL_ADC_Start_DMA+0x1b8>)
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0202 	mvn.w	r2, #2
 800409c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a18      	ldr	r0, [r3, #32]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	334c      	adds	r3, #76	; 0x4c
 80040b8:	4619      	mov	r1, r3
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f000 fbaf 	bl	8004820 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80040cc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80040d0:	d108      	bne.n	80040e4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80040e0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80040e2:	e00f      	b.n	8004104 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80040f2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80040f4:	e006      	b.n	8004104 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80040fe:	e001      	b.n	8004104 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004104:	7dfb      	ldrb	r3, [r7, #23]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40012400 	.word	0x40012400
 8004114:	40012800 	.word	0x40012800
 8004118:	08004483 	.word	0x08004483
 800411c:	080044ff 	.word	0x080044ff
 8004120:	0800451b 	.word	0x0800451b

08004124 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr
	...

0800415c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_ADC_ConfigChannel+0x20>
 8004178:	2302      	movs	r3, #2
 800417a:	e0dc      	b.n	8004336 <HAL_ADC_ConfigChannel+0x1da>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	2b06      	cmp	r3, #6
 800418a:	d81c      	bhi.n	80041c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	3b05      	subs	r3, #5
 800419e:	221f      	movs	r2, #31
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	4019      	ands	r1, r3
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	3b05      	subs	r3, #5
 80041b8:	fa00 f203 	lsl.w	r2, r0, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	635a      	str	r2, [r3, #52]	; 0x34
 80041c4:	e03c      	b.n	8004240 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b0c      	cmp	r3, #12
 80041cc:	d81c      	bhi.n	8004208 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	3b23      	subs	r3, #35	; 0x23
 80041e0:	221f      	movs	r2, #31
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43db      	mvns	r3, r3
 80041e8:	4019      	ands	r1, r3
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	3b23      	subs	r3, #35	; 0x23
 80041fa:	fa00 f203 	lsl.w	r2, r0, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	631a      	str	r2, [r3, #48]	; 0x30
 8004206:	e01b      	b.n	8004240 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	3b41      	subs	r3, #65	; 0x41
 800421a:	221f      	movs	r2, #31
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	4019      	ands	r1, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	3b41      	subs	r3, #65	; 0x41
 8004234:	fa00 f203 	lsl.w	r2, r0, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b09      	cmp	r3, #9
 8004246:	d91c      	bls.n	8004282 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68d9      	ldr	r1, [r3, #12]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4613      	mov	r3, r2
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	4413      	add	r3, r2
 8004258:	3b1e      	subs	r3, #30
 800425a:	2207      	movs	r2, #7
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	4019      	ands	r1, r3
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	6898      	ldr	r0, [r3, #8]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	4413      	add	r3, r2
 8004272:	3b1e      	subs	r3, #30
 8004274:	fa00 f203 	lsl.w	r2, r0, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	60da      	str	r2, [r3, #12]
 8004280:	e019      	b.n	80042b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6919      	ldr	r1, [r3, #16]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	4413      	add	r3, r2
 8004292:	2207      	movs	r2, #7
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	4019      	ands	r1, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	6898      	ldr	r0, [r3, #8]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	4613      	mov	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4413      	add	r3, r2
 80042aa:	fa00 f203 	lsl.w	r2, r0, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b10      	cmp	r3, #16
 80042bc:	d003      	beq.n	80042c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80042c2:	2b11      	cmp	r3, #17
 80042c4:	d132      	bne.n	800432c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1d      	ldr	r2, [pc, #116]	; (8004340 <HAL_ADC_ConfigChannel+0x1e4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d125      	bne.n	800431c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d126      	bne.n	800432c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80042ec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d11a      	bne.n	800432c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042f6:	4b13      	ldr	r3, [pc, #76]	; (8004344 <HAL_ADC_ConfigChannel+0x1e8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a13      	ldr	r2, [pc, #76]	; (8004348 <HAL_ADC_ConfigChannel+0x1ec>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	0c9a      	lsrs	r2, r3, #18
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800430c:	e002      	b.n	8004314 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	3b01      	subs	r3, #1
 8004312:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f9      	bne.n	800430e <HAL_ADC_ConfigChannel+0x1b2>
 800431a:	e007      	b.n	800432c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	f043 0220 	orr.w	r2, r3, #32
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	40012400 	.word	0x40012400
 8004344:	20000000 	.word	0x20000000
 8004348:	431bde83 	.word	0x431bde83

0800434c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b01      	cmp	r3, #1
 8004368:	d040      	beq.n	80043ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800437a:	4b1f      	ldr	r3, [pc, #124]	; (80043f8 <ADC_Enable+0xac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1f      	ldr	r2, [pc, #124]	; (80043fc <ADC_Enable+0xb0>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	0c9b      	lsrs	r3, r3, #18
 8004386:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004388:	e002      	b.n	8004390 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	3b01      	subs	r3, #1
 800438e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f9      	bne.n	800438a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004396:	f7ff fce1 	bl	8003d5c <HAL_GetTick>
 800439a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800439c:	e01f      	b.n	80043de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800439e:	f7ff fcdd 	bl	8003d5c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d918      	bls.n	80043de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d011      	beq.n	80043de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	f043 0210 	orr.w	r2, r3, #16
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	f043 0201 	orr.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e007      	b.n	80043ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d1d8      	bne.n	800439e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000000 	.word	0x20000000
 80043fc:	431bde83 	.word	0x431bde83

08004400 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d12e      	bne.n	8004478 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800442a:	f7ff fc97 	bl	8003d5c <HAL_GetTick>
 800442e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004430:	e01b      	b.n	800446a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004432:	f7ff fc93 	bl	8003d5c <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d914      	bls.n	800446a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d10d      	bne.n	800446a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	f043 0210 	orr.w	r2, r3, #16
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	f043 0201 	orr.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e007      	b.n	800447a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d0dc      	beq.n	8004432 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004498:	2b00      	cmp	r3, #0
 800449a:	d127      	bne.n	80044ec <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80044b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80044b6:	d115      	bne.n	80044e4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d111      	bne.n	80044e4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d105      	bne.n	80044e4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	f043 0201 	orr.w	r2, r3, #1
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff fe1d 	bl	8004124 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80044ea:	e004      	b.n	80044f6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
}
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7ff fe12 	bl	8004136 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	f043 0204 	orr.w	r2, r3, #4
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f7ff fe01 	bl	8004148 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004560:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <__NVIC_SetPriorityGrouping+0x44>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800456c:	4013      	ands	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800457c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004582:	4a04      	ldr	r2, [pc, #16]	; (8004594 <__NVIC_SetPriorityGrouping+0x44>)
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	60d3      	str	r3, [r2, #12]
}
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	e000ed00 	.word	0xe000ed00

08004598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <__NVIC_GetPriorityGrouping+0x18>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	0a1b      	lsrs	r3, r3, #8
 80045a2:	f003 0307 	and.w	r3, r3, #7
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	e000ed00 	.word	0xe000ed00

080045b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	db0b      	blt.n	80045de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	f003 021f 	and.w	r2, r3, #31
 80045cc:	4906      	ldr	r1, [pc, #24]	; (80045e8 <__NVIC_EnableIRQ+0x34>)
 80045ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	2001      	movs	r0, #1
 80045d6:	fa00 f202 	lsl.w	r2, r0, r2
 80045da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr
 80045e8:	e000e100 	.word	0xe000e100

080045ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	6039      	str	r1, [r7, #0]
 80045f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	db0a      	blt.n	8004616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	490c      	ldr	r1, [pc, #48]	; (8004638 <__NVIC_SetPriority+0x4c>)
 8004606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460a:	0112      	lsls	r2, r2, #4
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	440b      	add	r3, r1
 8004610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004614:	e00a      	b.n	800462c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	b2da      	uxtb	r2, r3
 800461a:	4908      	ldr	r1, [pc, #32]	; (800463c <__NVIC_SetPriority+0x50>)
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	3b04      	subs	r3, #4
 8004624:	0112      	lsls	r2, r2, #4
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	440b      	add	r3, r1
 800462a:	761a      	strb	r2, [r3, #24]
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	e000e100 	.word	0xe000e100
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004640:	b480      	push	{r7}
 8004642:	b089      	sub	sp, #36	; 0x24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f1c3 0307 	rsb	r3, r3, #7
 800465a:	2b04      	cmp	r3, #4
 800465c:	bf28      	it	cs
 800465e:	2304      	movcs	r3, #4
 8004660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3304      	adds	r3, #4
 8004666:	2b06      	cmp	r3, #6
 8004668:	d902      	bls.n	8004670 <NVIC_EncodePriority+0x30>
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	3b03      	subs	r3, #3
 800466e:	e000      	b.n	8004672 <NVIC_EncodePriority+0x32>
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004674:	f04f 32ff 	mov.w	r2, #4294967295
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43da      	mvns	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	401a      	ands	r2, r3
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004688:	f04f 31ff 	mov.w	r1, #4294967295
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	fa01 f303 	lsl.w	r3, r1, r3
 8004692:	43d9      	mvns	r1, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004698:	4313      	orrs	r3, r2
         );
}
 800469a:	4618      	mov	r0, r3
 800469c:	3724      	adds	r7, #36	; 0x24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046b4:	d301      	bcc.n	80046ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046b6:	2301      	movs	r3, #1
 80046b8:	e00f      	b.n	80046da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ba:	4a0a      	ldr	r2, [pc, #40]	; (80046e4 <SysTick_Config+0x40>)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3b01      	subs	r3, #1
 80046c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046c2:	210f      	movs	r1, #15
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	f7ff ff90 	bl	80045ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <SysTick_Config+0x40>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046d2:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <SysTick_Config+0x40>)
 80046d4:	2207      	movs	r2, #7
 80046d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	e000e010 	.word	0xe000e010

080046e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff ff2d 	bl	8004550 <__NVIC_SetPriorityGrouping>
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046fe:	b580      	push	{r7, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
 8004704:	4603      	mov	r3, r0
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004710:	f7ff ff42 	bl	8004598 <__NVIC_GetPriorityGrouping>
 8004714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	6978      	ldr	r0, [r7, #20]
 800471c:	f7ff ff90 	bl	8004640 <NVIC_EncodePriority>
 8004720:	4602      	mov	r2, r0
 8004722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004726:	4611      	mov	r1, r2
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff ff5f 	bl	80045ec <__NVIC_SetPriority>
}
 800472e:	bf00      	nop
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	4603      	mov	r3, r0
 800473e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff ff35 	bl	80045b4 <__NVIC_EnableIRQ>
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff ffa2 	bl	80046a4 <SysTick_Config>
 8004760:	4603      	mov	r3, r0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e043      	b.n	800480a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	4b22      	ldr	r3, [pc, #136]	; (8004814 <HAL_DMA_Init+0xa8>)
 800478a:	4413      	add	r3, r2
 800478c:	4a22      	ldr	r2, [pc, #136]	; (8004818 <HAL_DMA_Init+0xac>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	009a      	lsls	r2, r3, #2
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1f      	ldr	r2, [pc, #124]	; (800481c <HAL_DMA_Init+0xb0>)
 800479e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80047b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80047ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80047c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr
 8004814:	bffdfff8 	.word	0xbffdfff8
 8004818:	cccccccd 	.word	0xcccccccd
 800481c:	40020000 	.word	0x40020000

08004820 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_DMA_Start_IT+0x20>
 800483c:	2302      	movs	r3, #2
 800483e:	e04b      	b.n	80048d8 <HAL_DMA_Start_IT+0xb8>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	d13a      	bne.n	80048ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f831 	bl	80048e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 020e 	orr.w	r2, r2, #14
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e00f      	b.n	80048b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0204 	bic.w	r2, r2, #4
 80048a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 020a 	orr.w	r2, r2, #10
 80048b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	e005      	b.n	80048d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
 80048d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f6:	2101      	movs	r1, #1
 80048f8:	fa01 f202 	lsl.w	r2, r1, r2
 80048fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b10      	cmp	r3, #16
 800490c:	d108      	bne.n	8004920 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800491e:	e007      	b.n	8004930 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	60da      	str	r2, [r3, #12]
}
 8004930:	bf00      	nop
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr
	...

0800493c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800493c:	b480      	push	{r7}
 800493e:	b08b      	sub	sp, #44	; 0x2c
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004946:	2300      	movs	r3, #0
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800494a:	2300      	movs	r3, #0
 800494c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800494e:	e169      	b.n	8004c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004950:	2201      	movs	r2, #1
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69fa      	ldr	r2, [r7, #28]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	429a      	cmp	r2, r3
 800496a:	f040 8158 	bne.w	8004c1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4a9a      	ldr	r2, [pc, #616]	; (8004bdc <HAL_GPIO_Init+0x2a0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d05e      	beq.n	8004a36 <HAL_GPIO_Init+0xfa>
 8004978:	4a98      	ldr	r2, [pc, #608]	; (8004bdc <HAL_GPIO_Init+0x2a0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d875      	bhi.n	8004a6a <HAL_GPIO_Init+0x12e>
 800497e:	4a98      	ldr	r2, [pc, #608]	; (8004be0 <HAL_GPIO_Init+0x2a4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d058      	beq.n	8004a36 <HAL_GPIO_Init+0xfa>
 8004984:	4a96      	ldr	r2, [pc, #600]	; (8004be0 <HAL_GPIO_Init+0x2a4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d86f      	bhi.n	8004a6a <HAL_GPIO_Init+0x12e>
 800498a:	4a96      	ldr	r2, [pc, #600]	; (8004be4 <HAL_GPIO_Init+0x2a8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d052      	beq.n	8004a36 <HAL_GPIO_Init+0xfa>
 8004990:	4a94      	ldr	r2, [pc, #592]	; (8004be4 <HAL_GPIO_Init+0x2a8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d869      	bhi.n	8004a6a <HAL_GPIO_Init+0x12e>
 8004996:	4a94      	ldr	r2, [pc, #592]	; (8004be8 <HAL_GPIO_Init+0x2ac>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d04c      	beq.n	8004a36 <HAL_GPIO_Init+0xfa>
 800499c:	4a92      	ldr	r2, [pc, #584]	; (8004be8 <HAL_GPIO_Init+0x2ac>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d863      	bhi.n	8004a6a <HAL_GPIO_Init+0x12e>
 80049a2:	4a92      	ldr	r2, [pc, #584]	; (8004bec <HAL_GPIO_Init+0x2b0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d046      	beq.n	8004a36 <HAL_GPIO_Init+0xfa>
 80049a8:	4a90      	ldr	r2, [pc, #576]	; (8004bec <HAL_GPIO_Init+0x2b0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d85d      	bhi.n	8004a6a <HAL_GPIO_Init+0x12e>
 80049ae:	2b12      	cmp	r3, #18
 80049b0:	d82a      	bhi.n	8004a08 <HAL_GPIO_Init+0xcc>
 80049b2:	2b12      	cmp	r3, #18
 80049b4:	d859      	bhi.n	8004a6a <HAL_GPIO_Init+0x12e>
 80049b6:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <HAL_GPIO_Init+0x80>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	08004a37 	.word	0x08004a37
 80049c0:	08004a11 	.word	0x08004a11
 80049c4:	08004a23 	.word	0x08004a23
 80049c8:	08004a65 	.word	0x08004a65
 80049cc:	08004a6b 	.word	0x08004a6b
 80049d0:	08004a6b 	.word	0x08004a6b
 80049d4:	08004a6b 	.word	0x08004a6b
 80049d8:	08004a6b 	.word	0x08004a6b
 80049dc:	08004a6b 	.word	0x08004a6b
 80049e0:	08004a6b 	.word	0x08004a6b
 80049e4:	08004a6b 	.word	0x08004a6b
 80049e8:	08004a6b 	.word	0x08004a6b
 80049ec:	08004a6b 	.word	0x08004a6b
 80049f0:	08004a6b 	.word	0x08004a6b
 80049f4:	08004a6b 	.word	0x08004a6b
 80049f8:	08004a6b 	.word	0x08004a6b
 80049fc:	08004a6b 	.word	0x08004a6b
 8004a00:	08004a19 	.word	0x08004a19
 8004a04:	08004a2d 	.word	0x08004a2d
 8004a08:	4a79      	ldr	r2, [pc, #484]	; (8004bf0 <HAL_GPIO_Init+0x2b4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a0e:	e02c      	b.n	8004a6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	623b      	str	r3, [r7, #32]
          break;
 8004a16:	e029      	b.n	8004a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	623b      	str	r3, [r7, #32]
          break;
 8004a20:	e024      	b.n	8004a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	3308      	adds	r3, #8
 8004a28:	623b      	str	r3, [r7, #32]
          break;
 8004a2a:	e01f      	b.n	8004a6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	330c      	adds	r3, #12
 8004a32:	623b      	str	r3, [r7, #32]
          break;
 8004a34:	e01a      	b.n	8004a6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a3e:	2304      	movs	r3, #4
 8004a40:	623b      	str	r3, [r7, #32]
          break;
 8004a42:	e013      	b.n	8004a6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d105      	bne.n	8004a58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a4c:	2308      	movs	r3, #8
 8004a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	611a      	str	r2, [r3, #16]
          break;
 8004a56:	e009      	b.n	8004a6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a58:	2308      	movs	r3, #8
 8004a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69fa      	ldr	r2, [r7, #28]
 8004a60:	615a      	str	r2, [r3, #20]
          break;
 8004a62:	e003      	b.n	8004a6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a64:	2300      	movs	r3, #0
 8004a66:	623b      	str	r3, [r7, #32]
          break;
 8004a68:	e000      	b.n	8004a6c <HAL_GPIO_Init+0x130>
          break;
 8004a6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2bff      	cmp	r3, #255	; 0xff
 8004a70:	d801      	bhi.n	8004a76 <HAL_GPIO_Init+0x13a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	e001      	b.n	8004a7a <HAL_GPIO_Init+0x13e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2bff      	cmp	r3, #255	; 0xff
 8004a80:	d802      	bhi.n	8004a88 <HAL_GPIO_Init+0x14c>
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	e002      	b.n	8004a8e <HAL_GPIO_Init+0x152>
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	3b08      	subs	r3, #8
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	210f      	movs	r1, #15
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	6a39      	ldr	r1, [r7, #32]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80b1 	beq.w	8004c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004abc:	4b4d      	ldr	r3, [pc, #308]	; (8004bf4 <HAL_GPIO_Init+0x2b8>)
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	4a4c      	ldr	r2, [pc, #304]	; (8004bf4 <HAL_GPIO_Init+0x2b8>)
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	6193      	str	r3, [r2, #24]
 8004ac8:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <HAL_GPIO_Init+0x2b8>)
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ad4:	4a48      	ldr	r2, [pc, #288]	; (8004bf8 <HAL_GPIO_Init+0x2bc>)
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	089b      	lsrs	r3, r3, #2
 8004ada:	3302      	adds	r3, #2
 8004adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	220f      	movs	r2, #15
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	43db      	mvns	r3, r3
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4013      	ands	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a40      	ldr	r2, [pc, #256]	; (8004bfc <HAL_GPIO_Init+0x2c0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d013      	beq.n	8004b28 <HAL_GPIO_Init+0x1ec>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a3f      	ldr	r2, [pc, #252]	; (8004c00 <HAL_GPIO_Init+0x2c4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00d      	beq.n	8004b24 <HAL_GPIO_Init+0x1e8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a3e      	ldr	r2, [pc, #248]	; (8004c04 <HAL_GPIO_Init+0x2c8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d007      	beq.n	8004b20 <HAL_GPIO_Init+0x1e4>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a3d      	ldr	r2, [pc, #244]	; (8004c08 <HAL_GPIO_Init+0x2cc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d101      	bne.n	8004b1c <HAL_GPIO_Init+0x1e0>
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e006      	b.n	8004b2a <HAL_GPIO_Init+0x1ee>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	e004      	b.n	8004b2a <HAL_GPIO_Init+0x1ee>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e002      	b.n	8004b2a <HAL_GPIO_Init+0x1ee>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <HAL_GPIO_Init+0x1ee>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2c:	f002 0203 	and.w	r2, r2, #3
 8004b30:	0092      	lsls	r2, r2, #2
 8004b32:	4093      	lsls	r3, r2
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b3a:	492f      	ldr	r1, [pc, #188]	; (8004bf8 <HAL_GPIO_Init+0x2bc>)
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	089b      	lsrs	r3, r3, #2
 8004b40:	3302      	adds	r3, #2
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d006      	beq.n	8004b62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b54:	4b2d      	ldr	r3, [pc, #180]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	492c      	ldr	r1, [pc, #176]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	608b      	str	r3, [r1, #8]
 8004b60:	e006      	b.n	8004b70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b62:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	4928      	ldr	r1, [pc, #160]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d006      	beq.n	8004b8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b7c:	4b23      	ldr	r3, [pc, #140]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	4922      	ldr	r1, [pc, #136]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60cb      	str	r3, [r1, #12]
 8004b88:	e006      	b.n	8004b98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004b8a:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	43db      	mvns	r3, r3
 8004b92:	491e      	ldr	r1, [pc, #120]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d006      	beq.n	8004bb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004ba4:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	4918      	ldr	r1, [pc, #96]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
 8004bb0:	e006      	b.n	8004bc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004bb2:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	4914      	ldr	r1, [pc, #80]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d021      	beq.n	8004c10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	490e      	ldr	r1, [pc, #56]	; (8004c0c <HAL_GPIO_Init+0x2d0>)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	600b      	str	r3, [r1, #0]
 8004bd8:	e021      	b.n	8004c1e <HAL_GPIO_Init+0x2e2>
 8004bda:	bf00      	nop
 8004bdc:	10320000 	.word	0x10320000
 8004be0:	10310000 	.word	0x10310000
 8004be4:	10220000 	.word	0x10220000
 8004be8:	10210000 	.word	0x10210000
 8004bec:	10120000 	.word	0x10120000
 8004bf0:	10110000 	.word	0x10110000
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	40010000 	.word	0x40010000
 8004bfc:	40010800 	.word	0x40010800
 8004c00:	40010c00 	.word	0x40010c00
 8004c04:	40011000 	.word	0x40011000
 8004c08:	40011400 	.word	0x40011400
 8004c0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <HAL_GPIO_Init+0x304>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	43db      	mvns	r3, r3
 8004c18:	4909      	ldr	r1, [pc, #36]	; (8004c40 <HAL_GPIO_Init+0x304>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	3301      	adds	r3, #1
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f47f ae8e 	bne.w	8004950 <HAL_GPIO_Init+0x14>
  }
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	372c      	adds	r7, #44	; 0x2c
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr
 8004c40:	40010400 	.word	0x40010400

08004c44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c4e:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d006      	beq.n	8004c68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c5a:	4a05      	ldr	r2, [pc, #20]	; (8004c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c60:	88fb      	ldrh	r3, [r7, #6]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f806 	bl	8004c74 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40010400 	.word	0x40010400

08004c74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr

08004c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e272      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8087 	beq.w	8004db6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ca8:	4b92      	ldr	r3, [pc, #584]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 030c 	and.w	r3, r3, #12
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d00c      	beq.n	8004cce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cb4:	4b8f      	ldr	r3, [pc, #572]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 030c 	and.w	r3, r3, #12
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d112      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x5e>
 8004cc0:	4b8c      	ldr	r3, [pc, #560]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ccc:	d10b      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cce:	4b89      	ldr	r3, [pc, #548]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d06c      	beq.n	8004db4 <HAL_RCC_OscConfig+0x12c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d168      	bne.n	8004db4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e24c      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cee:	d106      	bne.n	8004cfe <HAL_RCC_OscConfig+0x76>
 8004cf0:	4b80      	ldr	r3, [pc, #512]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a7f      	ldr	r2, [pc, #508]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	e02e      	b.n	8004d5c <HAL_RCC_OscConfig+0xd4>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x98>
 8004d06:	4b7b      	ldr	r3, [pc, #492]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a7a      	ldr	r2, [pc, #488]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4b78      	ldr	r3, [pc, #480]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a77      	ldr	r2, [pc, #476]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e01d      	b.n	8004d5c <HAL_RCC_OscConfig+0xd4>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d28:	d10c      	bne.n	8004d44 <HAL_RCC_OscConfig+0xbc>
 8004d2a:	4b72      	ldr	r3, [pc, #456]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a71      	ldr	r2, [pc, #452]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	4b6f      	ldr	r3, [pc, #444]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a6e      	ldr	r2, [pc, #440]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	e00b      	b.n	8004d5c <HAL_RCC_OscConfig+0xd4>
 8004d44:	4b6b      	ldr	r3, [pc, #428]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a6a      	ldr	r2, [pc, #424]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4b68      	ldr	r3, [pc, #416]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a67      	ldr	r2, [pc, #412]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d013      	beq.n	8004d8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d64:	f7fe fffa 	bl	8003d5c <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d6c:	f7fe fff6 	bl	8003d5c <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	; 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e200      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7e:	4b5d      	ldr	r3, [pc, #372]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f0      	beq.n	8004d6c <HAL_RCC_OscConfig+0xe4>
 8004d8a:	e014      	b.n	8004db6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8c:	f7fe ffe6 	bl	8003d5c <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d94:	f7fe ffe2 	bl	8003d5c <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	; 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e1ec      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da6:	4b53      	ldr	r3, [pc, #332]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x10c>
 8004db2:	e000      	b.n	8004db6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d063      	beq.n	8004e8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dc2:	4b4c      	ldr	r3, [pc, #304]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dce:	4b49      	ldr	r3, [pc, #292]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f003 030c 	and.w	r3, r3, #12
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d11c      	bne.n	8004e14 <HAL_RCC_OscConfig+0x18c>
 8004dda:	4b46      	ldr	r3, [pc, #280]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d116      	bne.n	8004e14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de6:	4b43      	ldr	r3, [pc, #268]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_RCC_OscConfig+0x176>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d001      	beq.n	8004dfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e1c0      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfe:	4b3d      	ldr	r3, [pc, #244]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	4939      	ldr	r1, [pc, #228]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e12:	e03a      	b.n	8004e8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d020      	beq.n	8004e5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e1c:	4b36      	ldr	r3, [pc, #216]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e22:	f7fe ff9b 	bl	8003d5c <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e2a:	f7fe ff97 	bl	8003d5c <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e1a1      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3c:	4b2d      	ldr	r3, [pc, #180]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e48:	4b2a      	ldr	r3, [pc, #168]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4927      	ldr	r1, [pc, #156]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	600b      	str	r3, [r1, #0]
 8004e5c:	e015      	b.n	8004e8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5e:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fe ff7a 	bl	8003d5c <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e6c:	f7fe ff76 	bl	8003d5c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e180      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7e:	4b1d      	ldr	r3, [pc, #116]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d03a      	beq.n	8004f0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d019      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e9e:	4b17      	ldr	r3, [pc, #92]	; (8004efc <HAL_RCC_OscConfig+0x274>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea4:	f7fe ff5a 	bl	8003d5c <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eac:	f7fe ff56 	bl	8003d5c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e160      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004eca:	2001      	movs	r0, #1
 8004ecc:	f000 fa9c 	bl	8005408 <RCC_Delay>
 8004ed0:	e01c      	b.n	8004f0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ed2:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <HAL_RCC_OscConfig+0x274>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed8:	f7fe ff40 	bl	8003d5c <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ede:	e00f      	b.n	8004f00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee0:	f7fe ff3c 	bl	8003d5c <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d908      	bls.n	8004f00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e146      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
 8004ef2:	bf00      	nop
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	42420000 	.word	0x42420000
 8004efc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f00:	4b92      	ldr	r3, [pc, #584]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e9      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 80a6 	beq.w	8005066 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f1e:	4b8b      	ldr	r3, [pc, #556]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10d      	bne.n	8004f46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f2a:	4b88      	ldr	r3, [pc, #544]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	4a87      	ldr	r2, [pc, #540]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f34:	61d3      	str	r3, [r2, #28]
 8004f36:	4b85      	ldr	r3, [pc, #532]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f42:	2301      	movs	r3, #1
 8004f44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f46:	4b82      	ldr	r3, [pc, #520]	; (8005150 <HAL_RCC_OscConfig+0x4c8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d118      	bne.n	8004f84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f52:	4b7f      	ldr	r3, [pc, #508]	; (8005150 <HAL_RCC_OscConfig+0x4c8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a7e      	ldr	r2, [pc, #504]	; (8005150 <HAL_RCC_OscConfig+0x4c8>)
 8004f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f5e:	f7fe fefd 	bl	8003d5c <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f66:	f7fe fef9 	bl	8003d5c <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b64      	cmp	r3, #100	; 0x64
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e103      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f78:	4b75      	ldr	r3, [pc, #468]	; (8005150 <HAL_RCC_OscConfig+0x4c8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d106      	bne.n	8004f9a <HAL_RCC_OscConfig+0x312>
 8004f8c:	4b6f      	ldr	r3, [pc, #444]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	4a6e      	ldr	r2, [pc, #440]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004f92:	f043 0301 	orr.w	r3, r3, #1
 8004f96:	6213      	str	r3, [r2, #32]
 8004f98:	e02d      	b.n	8004ff6 <HAL_RCC_OscConfig+0x36e>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCC_OscConfig+0x334>
 8004fa2:	4b6a      	ldr	r3, [pc, #424]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	4a69      	ldr	r2, [pc, #420]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004fa8:	f023 0301 	bic.w	r3, r3, #1
 8004fac:	6213      	str	r3, [r2, #32]
 8004fae:	4b67      	ldr	r3, [pc, #412]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	4a66      	ldr	r2, [pc, #408]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004fb4:	f023 0304 	bic.w	r3, r3, #4
 8004fb8:	6213      	str	r3, [r2, #32]
 8004fba:	e01c      	b.n	8004ff6 <HAL_RCC_OscConfig+0x36e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	2b05      	cmp	r3, #5
 8004fc2:	d10c      	bne.n	8004fde <HAL_RCC_OscConfig+0x356>
 8004fc4:	4b61      	ldr	r3, [pc, #388]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	4a60      	ldr	r2, [pc, #384]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004fca:	f043 0304 	orr.w	r3, r3, #4
 8004fce:	6213      	str	r3, [r2, #32]
 8004fd0:	4b5e      	ldr	r3, [pc, #376]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	4a5d      	ldr	r2, [pc, #372]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	6213      	str	r3, [r2, #32]
 8004fdc:	e00b      	b.n	8004ff6 <HAL_RCC_OscConfig+0x36e>
 8004fde:	4b5b      	ldr	r3, [pc, #364]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	4a5a      	ldr	r2, [pc, #360]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004fe4:	f023 0301 	bic.w	r3, r3, #1
 8004fe8:	6213      	str	r3, [r2, #32]
 8004fea:	4b58      	ldr	r3, [pc, #352]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	4a57      	ldr	r2, [pc, #348]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8004ff0:	f023 0304 	bic.w	r3, r3, #4
 8004ff4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d015      	beq.n	800502a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffe:	f7fe fead 	bl	8003d5c <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005004:	e00a      	b.n	800501c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005006:	f7fe fea9 	bl	8003d5c <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	f241 3288 	movw	r2, #5000	; 0x1388
 8005014:	4293      	cmp	r3, r2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e0b1      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800501c:	4b4b      	ldr	r3, [pc, #300]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0ee      	beq.n	8005006 <HAL_RCC_OscConfig+0x37e>
 8005028:	e014      	b.n	8005054 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800502a:	f7fe fe97 	bl	8003d5c <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005030:	e00a      	b.n	8005048 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005032:	f7fe fe93 	bl	8003d5c <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005040:	4293      	cmp	r3, r2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e09b      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005048:	4b40      	ldr	r3, [pc, #256]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1ee      	bne.n	8005032 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d105      	bne.n	8005066 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800505a:	4b3c      	ldr	r3, [pc, #240]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	4a3b      	ldr	r2, [pc, #236]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8005060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005064:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 8087 	beq.w	800517e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005070:	4b36      	ldr	r3, [pc, #216]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 030c 	and.w	r3, r3, #12
 8005078:	2b08      	cmp	r3, #8
 800507a:	d061      	beq.n	8005140 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d146      	bne.n	8005112 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005084:	4b33      	ldr	r3, [pc, #204]	; (8005154 <HAL_RCC_OscConfig+0x4cc>)
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508a:	f7fe fe67 	bl	8003d5c <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005092:	f7fe fe63 	bl	8003d5c <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e06d      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a4:	4b29      	ldr	r3, [pc, #164]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1f0      	bne.n	8005092 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b8:	d108      	bne.n	80050cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050ba:	4b24      	ldr	r3, [pc, #144]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	4921      	ldr	r1, [pc, #132]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050cc:	4b1f      	ldr	r3, [pc, #124]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a19      	ldr	r1, [r3, #32]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	430b      	orrs	r3, r1
 80050de:	491b      	ldr	r1, [pc, #108]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e4:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <HAL_RCC_OscConfig+0x4cc>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ea:	f7fe fe37 	bl	8003d5c <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f2:	f7fe fe33 	bl	8003d5c <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e03d      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005104:	4b11      	ldr	r3, [pc, #68]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0f0      	beq.n	80050f2 <HAL_RCC_OscConfig+0x46a>
 8005110:	e035      	b.n	800517e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005112:	4b10      	ldr	r3, [pc, #64]	; (8005154 <HAL_RCC_OscConfig+0x4cc>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005118:	f7fe fe20 	bl	8003d5c <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005120:	f7fe fe1c 	bl	8003d5c <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e026      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <HAL_RCC_OscConfig+0x4c4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x498>
 800513e:	e01e      	b.n	800517e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d107      	bne.n	8005158 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e019      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
 800514c:	40021000 	.word	0x40021000
 8005150:	40007000 	.word	0x40007000
 8005154:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_RCC_OscConfig+0x500>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	429a      	cmp	r2, r3
 800516a:	d106      	bne.n	800517a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005176:	429a      	cmp	r2, r3
 8005178:	d001      	beq.n	800517e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40021000 	.word	0x40021000

0800518c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0d0      	b.n	8005342 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051a0:	4b6a      	ldr	r3, [pc, #424]	; (800534c <HAL_RCC_ClockConfig+0x1c0>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d910      	bls.n	80051d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ae:	4b67      	ldr	r3, [pc, #412]	; (800534c <HAL_RCC_ClockConfig+0x1c0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 0207 	bic.w	r2, r3, #7
 80051b6:	4965      	ldr	r1, [pc, #404]	; (800534c <HAL_RCC_ClockConfig+0x1c0>)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	4b63      	ldr	r3, [pc, #396]	; (800534c <HAL_RCC_ClockConfig+0x1c0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0b8      	b.n	8005342 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d020      	beq.n	800521e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e8:	4b59      	ldr	r3, [pc, #356]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	4a58      	ldr	r2, [pc, #352]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80051ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005200:	4b53      	ldr	r3, [pc, #332]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4a52      	ldr	r2, [pc, #328]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 8005206:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800520a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800520c:	4b50      	ldr	r3, [pc, #320]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	494d      	ldr	r1, [pc, #308]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 800521a:	4313      	orrs	r3, r2
 800521c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d040      	beq.n	80052ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d107      	bne.n	8005242 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005232:	4b47      	ldr	r3, [pc, #284]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d115      	bne.n	800526a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e07f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d107      	bne.n	800525a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800524a:	4b41      	ldr	r3, [pc, #260]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d109      	bne.n	800526a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e073      	b.n	8005342 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525a:	4b3d      	ldr	r3, [pc, #244]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e06b      	b.n	8005342 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800526a:	4b39      	ldr	r3, [pc, #228]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f023 0203 	bic.w	r2, r3, #3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	4936      	ldr	r1, [pc, #216]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 8005278:	4313      	orrs	r3, r2
 800527a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800527c:	f7fe fd6e 	bl	8003d5c <HAL_GetTick>
 8005280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005282:	e00a      	b.n	800529a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005284:	f7fe fd6a 	bl	8003d5c <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005292:	4293      	cmp	r3, r2
 8005294:	d901      	bls.n	800529a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e053      	b.n	8005342 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529a:	4b2d      	ldr	r3, [pc, #180]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f003 020c 	and.w	r2, r3, #12
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d1eb      	bne.n	8005284 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052ac:	4b27      	ldr	r3, [pc, #156]	; (800534c <HAL_RCC_ClockConfig+0x1c0>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d210      	bcs.n	80052dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ba:	4b24      	ldr	r3, [pc, #144]	; (800534c <HAL_RCC_ClockConfig+0x1c0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 0207 	bic.w	r2, r3, #7
 80052c2:	4922      	ldr	r1, [pc, #136]	; (800534c <HAL_RCC_ClockConfig+0x1c0>)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <HAL_RCC_ClockConfig+0x1c0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d001      	beq.n	80052dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e032      	b.n	8005342 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4916      	ldr	r1, [pc, #88]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	490e      	ldr	r1, [pc, #56]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 8005316:	4313      	orrs	r3, r2
 8005318:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800531a:	f000 f821 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 800531e:	4602      	mov	r2, r0
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_ClockConfig+0x1c4>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	490a      	ldr	r1, [pc, #40]	; (8005354 <HAL_RCC_ClockConfig+0x1c8>)
 800532c:	5ccb      	ldrb	r3, [r1, r3]
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	4a09      	ldr	r2, [pc, #36]	; (8005358 <HAL_RCC_ClockConfig+0x1cc>)
 8005334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_RCC_ClockConfig+0x1d0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7fe fccc 	bl	8003cd8 <HAL_InitTick>

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40022000 	.word	0x40022000
 8005350:	40021000 	.word	0x40021000
 8005354:	08006744 	.word	0x08006744
 8005358:	20000000 	.word	0x20000000
 800535c:	20000004 	.word	0x20000004

08005360 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	2300      	movs	r3, #0
 800536c:	60bb      	str	r3, [r7, #8]
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	2300      	movs	r3, #0
 8005374:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800537a:	4b1e      	ldr	r3, [pc, #120]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 030c 	and.w	r3, r3, #12
 8005386:	2b04      	cmp	r3, #4
 8005388:	d002      	beq.n	8005390 <HAL_RCC_GetSysClockFreq+0x30>
 800538a:	2b08      	cmp	r3, #8
 800538c:	d003      	beq.n	8005396 <HAL_RCC_GetSysClockFreq+0x36>
 800538e:	e027      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005390:	4b19      	ldr	r3, [pc, #100]	; (80053f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005392:	613b      	str	r3, [r7, #16]
      break;
 8005394:	e027      	b.n	80053e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	0c9b      	lsrs	r3, r3, #18
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	4a17      	ldr	r2, [pc, #92]	; (80053fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80053a0:	5cd3      	ldrb	r3, [r2, r3]
 80053a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d010      	beq.n	80053d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053ae:	4b11      	ldr	r3, [pc, #68]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	0c5b      	lsrs	r3, r3, #17
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	4a11      	ldr	r2, [pc, #68]	; (8005400 <HAL_RCC_GetSysClockFreq+0xa0>)
 80053ba:	5cd3      	ldrb	r3, [r2, r3]
 80053bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a0d      	ldr	r2, [pc, #52]	; (80053f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80053c2:	fb03 f202 	mul.w	r2, r3, r2
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	e004      	b.n	80053da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a0c      	ldr	r2, [pc, #48]	; (8005404 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053d4:	fb02 f303 	mul.w	r3, r2, r3
 80053d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	613b      	str	r3, [r7, #16]
      break;
 80053de:	e002      	b.n	80053e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80053e2:	613b      	str	r3, [r7, #16]
      break;
 80053e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053e6:	693b      	ldr	r3, [r7, #16]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bc80      	pop	{r7}
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40021000 	.word	0x40021000
 80053f8:	007a1200 	.word	0x007a1200
 80053fc:	08006754 	.word	0x08006754
 8005400:	08006764 	.word	0x08006764
 8005404:	003d0900 	.word	0x003d0900

08005408 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <RCC_Delay+0x34>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a0a      	ldr	r2, [pc, #40]	; (8005440 <RCC_Delay+0x38>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	0a5b      	lsrs	r3, r3, #9
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005424:	bf00      	nop
  }
  while (Delay --);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1e5a      	subs	r2, r3, #1
 800542a:	60fa      	str	r2, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1f9      	bne.n	8005424 <RCC_Delay+0x1c>
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr
 800543c:	20000000 	.word	0x20000000
 8005440:	10624dd3 	.word	0x10624dd3

08005444 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d07d      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005460:	2300      	movs	r3, #0
 8005462:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005464:	4b4f      	ldr	r3, [pc, #316]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10d      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005470:	4b4c      	ldr	r3, [pc, #304]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	4a4b      	ldr	r2, [pc, #300]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547a:	61d3      	str	r3, [r2, #28]
 800547c:	4b49      	ldr	r3, [pc, #292]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005488:	2301      	movs	r3, #1
 800548a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800548c:	4b46      	ldr	r3, [pc, #280]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d118      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005498:	4b43      	ldr	r3, [pc, #268]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a42      	ldr	r2, [pc, #264]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800549e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054a4:	f7fe fc5a 	bl	8003d5c <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054aa:	e008      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ac:	f7fe fc56 	bl	8003d5c <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b64      	cmp	r3, #100	; 0x64
 80054b8:	d901      	bls.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e06d      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054be:	4b3a      	ldr	r3, [pc, #232]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f0      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054ca:	4b36      	ldr	r3, [pc, #216]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d02e      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d027      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054e8:	4b2e      	ldr	r3, [pc, #184]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054f2:	4b2e      	ldr	r3, [pc, #184]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054f8:	4b2c      	ldr	r3, [pc, #176]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054fe:	4a29      	ldr	r2, [pc, #164]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d014      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550e:	f7fe fc25 	bl	8003d5c <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005514:	e00a      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005516:	f7fe fc21 	bl	8003d5c <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	f241 3288 	movw	r2, #5000	; 0x1388
 8005524:	4293      	cmp	r3, r2
 8005526:	d901      	bls.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e036      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552c:	4b1d      	ldr	r3, [pc, #116]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0ee      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005538:	4b1a      	ldr	r3, [pc, #104]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4917      	ldr	r1, [pc, #92]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005546:	4313      	orrs	r3, r2
 8005548:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800554a:	7dfb      	ldrb	r3, [r7, #23]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d105      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005550:	4b14      	ldr	r3, [pc, #80]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	4a13      	ldr	r2, [pc, #76]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800555a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005568:	4b0e      	ldr	r3, [pc, #56]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	490b      	ldr	r1, [pc, #44]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005576:	4313      	orrs	r3, r2
 8005578:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	2b00      	cmp	r3, #0
 8005584:	d008      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005586:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	4904      	ldr	r1, [pc, #16]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40021000 	.word	0x40021000
 80055a8:	40007000 	.word	0x40007000
 80055ac:	42420440 	.word	0x42420440

080055b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e041      	b.n	8005646 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fd fdba 	bl	8003150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3304      	adds	r3, #4
 80055ec:	4619      	mov	r1, r3
 80055ee:	4610      	mov	r0, r2
 80055f0:	f000 fc7a 	bl	8005ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	d001      	beq.n	8005668 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e03a      	b.n	80056de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <HAL_TIM_Base_Start_IT+0x98>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00e      	beq.n	80056a8 <HAL_TIM_Base_Start_IT+0x58>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005692:	d009      	beq.n	80056a8 <HAL_TIM_Base_Start_IT+0x58>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a14      	ldr	r2, [pc, #80]	; (80056ec <HAL_TIM_Base_Start_IT+0x9c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d004      	beq.n	80056a8 <HAL_TIM_Base_Start_IT+0x58>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d111      	bne.n	80056cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b06      	cmp	r3, #6
 80056b8:	d010      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0201 	orr.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ca:	e007      	b.n	80056dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr
 80056e8:	40012c00 	.word	0x40012c00
 80056ec:	40000400 	.word	0x40000400
 80056f0:	40000800 	.word	0x40000800

080056f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e041      	b.n	800578a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f839 	bl	8005792 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f000 fbd8 	bl	8005ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr

080057a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d109      	bne.n	80057c8 <HAL_TIM_PWM_Start+0x24>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	e022      	b.n	800580e <HAL_TIM_PWM_Start+0x6a>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d109      	bne.n	80057e2 <HAL_TIM_PWM_Start+0x3e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	bf14      	ite	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	2300      	moveq	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	e015      	b.n	800580e <HAL_TIM_PWM_Start+0x6a>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d109      	bne.n	80057fc <HAL_TIM_PWM_Start+0x58>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	bf14      	ite	ne
 80057f4:	2301      	movne	r3, #1
 80057f6:	2300      	moveq	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	e008      	b.n	800580e <HAL_TIM_PWM_Start+0x6a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e05e      	b.n	80058d4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d104      	bne.n	8005826 <HAL_TIM_PWM_Start+0x82>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005824:	e013      	b.n	800584e <HAL_TIM_PWM_Start+0xaa>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b04      	cmp	r3, #4
 800582a:	d104      	bne.n	8005836 <HAL_TIM_PWM_Start+0x92>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005834:	e00b      	b.n	800584e <HAL_TIM_PWM_Start+0xaa>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d104      	bne.n	8005846 <HAL_TIM_PWM_Start+0xa2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005844:	e003      	b.n	800584e <HAL_TIM_PWM_Start+0xaa>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2202      	movs	r2, #2
 800584a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2201      	movs	r2, #1
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fe57 	bl	800650a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1e      	ldr	r2, [pc, #120]	; (80058dc <HAL_TIM_PWM_Start+0x138>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d107      	bne.n	8005876 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005874:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a18      	ldr	r2, [pc, #96]	; (80058dc <HAL_TIM_PWM_Start+0x138>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00e      	beq.n	800589e <HAL_TIM_PWM_Start+0xfa>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005888:	d009      	beq.n	800589e <HAL_TIM_PWM_Start+0xfa>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a14      	ldr	r2, [pc, #80]	; (80058e0 <HAL_TIM_PWM_Start+0x13c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d004      	beq.n	800589e <HAL_TIM_PWM_Start+0xfa>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a12      	ldr	r2, [pc, #72]	; (80058e4 <HAL_TIM_PWM_Start+0x140>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d111      	bne.n	80058c2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b06      	cmp	r3, #6
 80058ae:	d010      	beq.n	80058d2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c0:	e007      	b.n	80058d2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0201 	orr.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40012c00 	.word	0x40012c00
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800

080058e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d122      	bne.n	8005944 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b02      	cmp	r3, #2
 800590a:	d11b      	bne.n	8005944 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0202 	mvn.w	r2, #2
 8005914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fac1 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005930:	e005      	b.n	800593e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fab4 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fac3 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b04      	cmp	r3, #4
 8005950:	d122      	bne.n	8005998 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b04      	cmp	r3, #4
 800595e:	d11b      	bne.n	8005998 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0204 	mvn.w	r2, #4
 8005968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fa97 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005984:	e005      	b.n	8005992 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fa8a 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fa99 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d122      	bne.n	80059ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d11b      	bne.n	80059ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0208 	mvn.w	r2, #8
 80059bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2204      	movs	r2, #4
 80059c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fa6d 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 80059d8:	e005      	b.n	80059e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fa60 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fa6f 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b10      	cmp	r3, #16
 80059f8:	d122      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d11b      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0210 	mvn.w	r2, #16
 8005a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2208      	movs	r2, #8
 8005a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fa43 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005a2c:	e005      	b.n	8005a3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa36 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fa45 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d10e      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d107      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0201 	mvn.w	r2, #1
 8005a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa11 	bl	8005e8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a76:	2b80      	cmp	r3, #128	; 0x80
 8005a78:	d10e      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a84:	2b80      	cmp	r3, #128	; 0x80
 8005a86:	d107      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fdc5 	bl	8006622 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa2:	2b40      	cmp	r3, #64	; 0x40
 8005aa4:	d10e      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d107      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fa09 	bl	8005ed6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d10e      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0320 	and.w	r3, r3, #32
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d107      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0220 	mvn.w	r2, #32
 8005ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fd90 	bl	8006610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005af0:	bf00      	nop
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e0ae      	b.n	8005c74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	f200 809f 	bhi.w	8005c64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b61 	.word	0x08005b61
 8005b30:	08005c65 	.word	0x08005c65
 8005b34:	08005c65 	.word	0x08005c65
 8005b38:	08005c65 	.word	0x08005c65
 8005b3c:	08005ba1 	.word	0x08005ba1
 8005b40:	08005c65 	.word	0x08005c65
 8005b44:	08005c65 	.word	0x08005c65
 8005b48:	08005c65 	.word	0x08005c65
 8005b4c:	08005be3 	.word	0x08005be3
 8005b50:	08005c65 	.word	0x08005c65
 8005b54:	08005c65 	.word	0x08005c65
 8005b58:	08005c65 	.word	0x08005c65
 8005b5c:	08005c23 	.word	0x08005c23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fa20 	bl	8005fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0208 	orr.w	r2, r2, #8
 8005b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0204 	bic.w	r2, r2, #4
 8005b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6999      	ldr	r1, [r3, #24]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	619a      	str	r2, [r3, #24]
      break;
 8005b9e:	e064      	b.n	8005c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fa66 	bl	8006078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6999      	ldr	r1, [r3, #24]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	021a      	lsls	r2, r3, #8
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	619a      	str	r2, [r3, #24]
      break;
 8005be0:	e043      	b.n	8005c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 faaf 	bl	800614c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0208 	orr.w	r2, r2, #8
 8005bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0204 	bic.w	r2, r2, #4
 8005c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69d9      	ldr	r1, [r3, #28]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	61da      	str	r2, [r3, #28]
      break;
 8005c20:	e023      	b.n	8005c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 faf9 	bl	8006220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69d9      	ldr	r1, [r3, #28]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	021a      	lsls	r2, r3, #8
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	61da      	str	r2, [r3, #28]
      break;
 8005c62:	e002      	b.n	8005c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	75fb      	strb	r3, [r7, #23]
      break;
 8005c68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_TIM_ConfigClockSource+0x1c>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e0b4      	b.n	8005e02 <HAL_TIM_ConfigClockSource+0x186>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd0:	d03e      	beq.n	8005d50 <HAL_TIM_ConfigClockSource+0xd4>
 8005cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd6:	f200 8087 	bhi.w	8005de8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cde:	f000 8086 	beq.w	8005dee <HAL_TIM_ConfigClockSource+0x172>
 8005ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce6:	d87f      	bhi.n	8005de8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce8:	2b70      	cmp	r3, #112	; 0x70
 8005cea:	d01a      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0xa6>
 8005cec:	2b70      	cmp	r3, #112	; 0x70
 8005cee:	d87b      	bhi.n	8005de8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf0:	2b60      	cmp	r3, #96	; 0x60
 8005cf2:	d050      	beq.n	8005d96 <HAL_TIM_ConfigClockSource+0x11a>
 8005cf4:	2b60      	cmp	r3, #96	; 0x60
 8005cf6:	d877      	bhi.n	8005de8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf8:	2b50      	cmp	r3, #80	; 0x50
 8005cfa:	d03c      	beq.n	8005d76 <HAL_TIM_ConfigClockSource+0xfa>
 8005cfc:	2b50      	cmp	r3, #80	; 0x50
 8005cfe:	d873      	bhi.n	8005de8 <HAL_TIM_ConfigClockSource+0x16c>
 8005d00:	2b40      	cmp	r3, #64	; 0x40
 8005d02:	d058      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0x13a>
 8005d04:	2b40      	cmp	r3, #64	; 0x40
 8005d06:	d86f      	bhi.n	8005de8 <HAL_TIM_ConfigClockSource+0x16c>
 8005d08:	2b30      	cmp	r3, #48	; 0x30
 8005d0a:	d064      	beq.n	8005dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d0c:	2b30      	cmp	r3, #48	; 0x30
 8005d0e:	d86b      	bhi.n	8005de8 <HAL_TIM_ConfigClockSource+0x16c>
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d060      	beq.n	8005dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d867      	bhi.n	8005de8 <HAL_TIM_ConfigClockSource+0x16c>
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d05c      	beq.n	8005dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d1c:	2b10      	cmp	r3, #16
 8005d1e:	d05a      	beq.n	8005dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d20:	e062      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6899      	ldr	r1, [r3, #8]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f000 fbcb 	bl	80064cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	609a      	str	r2, [r3, #8]
      break;
 8005d4e:	e04f      	b.n	8005df0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	6899      	ldr	r1, [r3, #8]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f000 fbb4 	bl	80064cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d72:	609a      	str	r2, [r3, #8]
      break;
 8005d74:	e03c      	b.n	8005df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	6859      	ldr	r1, [r3, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	461a      	mov	r2, r3
 8005d84:	f000 fb2b 	bl	80063de <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2150      	movs	r1, #80	; 0x50
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fb82 	bl	8006498 <TIM_ITRx_SetConfig>
      break;
 8005d94:	e02c      	b.n	8005df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6818      	ldr	r0, [r3, #0]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	6859      	ldr	r1, [r3, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f000 fb49 	bl	800643a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2160      	movs	r1, #96	; 0x60
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fb72 	bl	8006498 <TIM_ITRx_SetConfig>
      break;
 8005db4:	e01c      	b.n	8005df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6859      	ldr	r1, [r3, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f000 fb0b 	bl	80063de <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2140      	movs	r1, #64	; 0x40
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fb62 	bl	8006498 <TIM_ITRx_SetConfig>
      break;
 8005dd4:	e00c      	b.n	8005df0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4619      	mov	r1, r3
 8005de0:	4610      	mov	r0, r2
 8005de2:	f000 fb59 	bl	8006498 <TIM_ITRx_SetConfig>
      break;
 8005de6:	e003      	b.n	8005df0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	73fb      	strb	r3, [r7, #15]
      break;
 8005dec:	e000      	b.n	8005df0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e031      	b.n	8005e86 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fa41 	bl	80062bc <TIM_SlaveTimer_SetConfig>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d009      	beq.n	8005e54 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e018      	b.n	8005e86 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e62:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e72:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bc80      	pop	{r7}
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr

08005ed6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bc80      	pop	{r7}
 8005ee6:	4770      	bx	lr

08005ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a29      	ldr	r2, [pc, #164]	; (8005fa0 <TIM_Base_SetConfig+0xb8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00b      	beq.n	8005f18 <TIM_Base_SetConfig+0x30>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f06:	d007      	beq.n	8005f18 <TIM_Base_SetConfig+0x30>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a26      	ldr	r2, [pc, #152]	; (8005fa4 <TIM_Base_SetConfig+0xbc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <TIM_Base_SetConfig+0x30>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a25      	ldr	r2, [pc, #148]	; (8005fa8 <TIM_Base_SetConfig+0xc0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d108      	bne.n	8005f2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a1c      	ldr	r2, [pc, #112]	; (8005fa0 <TIM_Base_SetConfig+0xb8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00b      	beq.n	8005f4a <TIM_Base_SetConfig+0x62>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f38:	d007      	beq.n	8005f4a <TIM_Base_SetConfig+0x62>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a19      	ldr	r2, [pc, #100]	; (8005fa4 <TIM_Base_SetConfig+0xbc>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d003      	beq.n	8005f4a <TIM_Base_SetConfig+0x62>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <TIM_Base_SetConfig+0xc0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d108      	bne.n	8005f5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a07      	ldr	r2, [pc, #28]	; (8005fa0 <TIM_Base_SetConfig+0xb8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d103      	bne.n	8005f90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	615a      	str	r2, [r3, #20]
}
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800

08005fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	f023 0201 	bic.w	r2, r3, #1
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0303 	bic.w	r3, r3, #3
 8005fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f023 0302 	bic.w	r3, r3, #2
 8005ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a1c      	ldr	r2, [pc, #112]	; (8006074 <TIM_OC1_SetConfig+0xc8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d10c      	bne.n	8006022 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f023 0308 	bic.w	r3, r3, #8
 800600e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f023 0304 	bic.w	r3, r3, #4
 8006020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a13      	ldr	r2, [pc, #76]	; (8006074 <TIM_OC1_SetConfig+0xc8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d111      	bne.n	800604e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	621a      	str	r2, [r3, #32]
}
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	40012c00 	.word	0x40012c00

08006078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f023 0210 	bic.w	r2, r3, #16
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	021b      	lsls	r3, r3, #8
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f023 0320 	bic.w	r3, r3, #32
 80060c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <TIM_OC2_SetConfig+0xd0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d10d      	bne.n	80060f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a14      	ldr	r2, [pc, #80]	; (8006148 <TIM_OC2_SetConfig+0xd0>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d113      	bne.n	8006124 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800610a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr
 8006148:	40012c00 	.word	0x40012c00

0800614c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0303 	bic.w	r3, r3, #3
 8006182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	021b      	lsls	r3, r3, #8
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a1d      	ldr	r2, [pc, #116]	; (800621c <TIM_OC3_SetConfig+0xd0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d10d      	bne.n	80061c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a14      	ldr	r2, [pc, #80]	; (800621c <TIM_OC3_SetConfig+0xd0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d113      	bne.n	80061f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	621a      	str	r2, [r3, #32]
}
 8006210:	bf00      	nop
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	bc80      	pop	{r7}
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	40012c00 	.word	0x40012c00

08006220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	021b      	lsls	r3, r3, #8
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800626a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	031b      	lsls	r3, r3, #12
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a0f      	ldr	r2, [pc, #60]	; (80062b8 <TIM_OC4_SetConfig+0x98>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d109      	bne.n	8006294 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	019b      	lsls	r3, r3, #6
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	621a      	str	r2, [r3, #32]
}
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr
 80062b8:	40012c00 	.word	0x40012c00

080062bc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f023 0307 	bic.w	r3, r3, #7
 80062ea:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b70      	cmp	r3, #112	; 0x70
 8006304:	d01a      	beq.n	800633c <TIM_SlaveTimer_SetConfig+0x80>
 8006306:	2b70      	cmp	r3, #112	; 0x70
 8006308:	d860      	bhi.n	80063cc <TIM_SlaveTimer_SetConfig+0x110>
 800630a:	2b60      	cmp	r3, #96	; 0x60
 800630c:	d054      	beq.n	80063b8 <TIM_SlaveTimer_SetConfig+0xfc>
 800630e:	2b60      	cmp	r3, #96	; 0x60
 8006310:	d85c      	bhi.n	80063cc <TIM_SlaveTimer_SetConfig+0x110>
 8006312:	2b50      	cmp	r3, #80	; 0x50
 8006314:	d046      	beq.n	80063a4 <TIM_SlaveTimer_SetConfig+0xe8>
 8006316:	2b50      	cmp	r3, #80	; 0x50
 8006318:	d858      	bhi.n	80063cc <TIM_SlaveTimer_SetConfig+0x110>
 800631a:	2b40      	cmp	r3, #64	; 0x40
 800631c:	d019      	beq.n	8006352 <TIM_SlaveTimer_SetConfig+0x96>
 800631e:	2b40      	cmp	r3, #64	; 0x40
 8006320:	d854      	bhi.n	80063cc <TIM_SlaveTimer_SetConfig+0x110>
 8006322:	2b30      	cmp	r3, #48	; 0x30
 8006324:	d055      	beq.n	80063d2 <TIM_SlaveTimer_SetConfig+0x116>
 8006326:	2b30      	cmp	r3, #48	; 0x30
 8006328:	d850      	bhi.n	80063cc <TIM_SlaveTimer_SetConfig+0x110>
 800632a:	2b20      	cmp	r3, #32
 800632c:	d051      	beq.n	80063d2 <TIM_SlaveTimer_SetConfig+0x116>
 800632e:	2b20      	cmp	r3, #32
 8006330:	d84c      	bhi.n	80063cc <TIM_SlaveTimer_SetConfig+0x110>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d04d      	beq.n	80063d2 <TIM_SlaveTimer_SetConfig+0x116>
 8006336:	2b10      	cmp	r3, #16
 8006338:	d04b      	beq.n	80063d2 <TIM_SlaveTimer_SetConfig+0x116>
 800633a:	e047      	b.n	80063cc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68d9      	ldr	r1, [r3, #12]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f000 f8be 	bl	80064cc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006350:	e040      	b.n	80063d4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b05      	cmp	r3, #5
 8006358:	d101      	bne.n	800635e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e03b      	b.n	80063d6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6a1a      	ldr	r2, [r3, #32]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 0201 	bic.w	r2, r2, #1
 8006374:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006384:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	4313      	orrs	r3, r2
 8006390:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	621a      	str	r2, [r3, #32]
      break;
 80063a2:	e017      	b.n	80063d4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	6899      	ldr	r1, [r3, #8]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	461a      	mov	r2, r3
 80063b2:	f000 f814 	bl	80063de <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80063b6:	e00d      	b.n	80063d4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	6899      	ldr	r1, [r3, #8]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	461a      	mov	r2, r3
 80063c6:	f000 f838 	bl	800643a <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80063ca:	e003      	b.n	80063d4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	75fb      	strb	r3, [r7, #23]
      break;
 80063d0:	e000      	b.n	80063d4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80063d2:	bf00      	nop
  }

  return status;
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063de:	b480      	push	{r7}
 80063e0:	b087      	sub	sp, #28
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	f023 0201 	bic.w	r2, r3, #1
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006408:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f023 030a 	bic.w	r3, r3, #10
 800641a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	621a      	str	r2, [r3, #32]
}
 8006430:	bf00      	nop
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	bc80      	pop	{r7}
 8006438:	4770      	bx	lr

0800643a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800643a:	b480      	push	{r7}
 800643c:	b087      	sub	sp, #28
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	f023 0210 	bic.w	r2, r3, #16
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006464:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	031b      	lsls	r3, r3, #12
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006476:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	4313      	orrs	r3, r2
 8006480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	621a      	str	r2, [r3, #32]
}
 800648e:	bf00      	nop
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	bc80      	pop	{r7}
 8006496:	4770      	bx	lr

08006498 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f043 0307 	orr.w	r3, r3, #7
 80064ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	609a      	str	r2, [r3, #8]
}
 80064c2:	bf00      	nop
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr

080064cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	021a      	lsls	r2, r3, #8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	609a      	str	r2, [r3, #8]
}
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr

0800650a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800650a:	b480      	push	{r7}
 800650c:	b087      	sub	sp, #28
 800650e:	af00      	add	r7, sp, #0
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	60b9      	str	r1, [r7, #8]
 8006514:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f003 031f 	and.w	r3, r3, #31
 800651c:	2201      	movs	r2, #1
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a1a      	ldr	r2, [r3, #32]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	43db      	mvns	r3, r3
 800652c:	401a      	ands	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a1a      	ldr	r2, [r3, #32]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	f003 031f 	and.w	r3, r3, #31
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	fa01 f303 	lsl.w	r3, r1, r3
 8006542:	431a      	orrs	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	621a      	str	r2, [r3, #32]
}
 8006548:	bf00      	nop
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr
	...

08006554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006568:	2302      	movs	r3, #2
 800656a:	e046      	b.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a16      	ldr	r2, [pc, #88]	; (8006604 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00e      	beq.n	80065ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b8:	d009      	beq.n	80065ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a12      	ldr	r2, [pc, #72]	; (8006608 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a10      	ldr	r2, [pc, #64]	; (800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d10c      	bne.n	80065e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	bc80      	pop	{r7}
 8006602:	4770      	bx	lr
 8006604:	40012c00 	.word	0x40012c00
 8006608:	40000400 	.word	0x40000400
 800660c:	40000800 	.word	0x40000800

08006610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	bc80      	pop	{r7}
 8006620:	4770      	bx	lr

08006622 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr

08006634 <__libc_init_array>:
 8006634:	b570      	push	{r4, r5, r6, lr}
 8006636:	2600      	movs	r6, #0
 8006638:	4d0c      	ldr	r5, [pc, #48]	; (800666c <__libc_init_array+0x38>)
 800663a:	4c0d      	ldr	r4, [pc, #52]	; (8006670 <__libc_init_array+0x3c>)
 800663c:	1b64      	subs	r4, r4, r5
 800663e:	10a4      	asrs	r4, r4, #2
 8006640:	42a6      	cmp	r6, r4
 8006642:	d109      	bne.n	8006658 <__libc_init_array+0x24>
 8006644:	f000 f86a 	bl	800671c <_init>
 8006648:	2600      	movs	r6, #0
 800664a:	4d0a      	ldr	r5, [pc, #40]	; (8006674 <__libc_init_array+0x40>)
 800664c:	4c0a      	ldr	r4, [pc, #40]	; (8006678 <__libc_init_array+0x44>)
 800664e:	1b64      	subs	r4, r4, r5
 8006650:	10a4      	asrs	r4, r4, #2
 8006652:	42a6      	cmp	r6, r4
 8006654:	d105      	bne.n	8006662 <__libc_init_array+0x2e>
 8006656:	bd70      	pop	{r4, r5, r6, pc}
 8006658:	f855 3b04 	ldr.w	r3, [r5], #4
 800665c:	4798      	blx	r3
 800665e:	3601      	adds	r6, #1
 8006660:	e7ee      	b.n	8006640 <__libc_init_array+0xc>
 8006662:	f855 3b04 	ldr.w	r3, [r5], #4
 8006666:	4798      	blx	r3
 8006668:	3601      	adds	r6, #1
 800666a:	e7f2      	b.n	8006652 <__libc_init_array+0x1e>
 800666c:	08006768 	.word	0x08006768
 8006670:	08006768 	.word	0x08006768
 8006674:	08006768 	.word	0x08006768
 8006678:	0800676c 	.word	0x0800676c

0800667c <memset>:
 800667c:	4603      	mov	r3, r0
 800667e:	4402      	add	r2, r0
 8006680:	4293      	cmp	r3, r2
 8006682:	d100      	bne.n	8006686 <memset+0xa>
 8006684:	4770      	bx	lr
 8006686:	f803 1b01 	strb.w	r1, [r3], #1
 800668a:	e7f9      	b.n	8006680 <memset+0x4>

0800668c <round>:
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006692:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8006696:	2c13      	cmp	r4, #19
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
 800669c:	4606      	mov	r6, r0
 800669e:	460d      	mov	r5, r1
 80066a0:	dc19      	bgt.n	80066d6 <round+0x4a>
 80066a2:	2c00      	cmp	r4, #0
 80066a4:	da09      	bge.n	80066ba <round+0x2e>
 80066a6:	3401      	adds	r4, #1
 80066a8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80066ac:	d103      	bne.n	80066b6 <round+0x2a>
 80066ae:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80066b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80066b6:	2200      	movs	r2, #0
 80066b8:	e02a      	b.n	8006710 <round+0x84>
 80066ba:	4917      	ldr	r1, [pc, #92]	; (8006718 <round+0x8c>)
 80066bc:	4121      	asrs	r1, r4
 80066be:	ea03 0001 	and.w	r0, r3, r1
 80066c2:	4302      	orrs	r2, r0
 80066c4:	d010      	beq.n	80066e8 <round+0x5c>
 80066c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80066ca:	fa42 f404 	asr.w	r4, r2, r4
 80066ce:	4423      	add	r3, r4
 80066d0:	ea23 0301 	bic.w	r3, r3, r1
 80066d4:	e7ef      	b.n	80066b6 <round+0x2a>
 80066d6:	2c33      	cmp	r4, #51	; 0x33
 80066d8:	dd09      	ble.n	80066ee <round+0x62>
 80066da:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80066de:	d103      	bne.n	80066e8 <round+0x5c>
 80066e0:	f7f9 fdee 	bl	80002c0 <__adddf3>
 80066e4:	4606      	mov	r6, r0
 80066e6:	460d      	mov	r5, r1
 80066e8:	4630      	mov	r0, r6
 80066ea:	4629      	mov	r1, r5
 80066ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066ee:	f04f 31ff 	mov.w	r1, #4294967295
 80066f2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80066f6:	40f9      	lsrs	r1, r7
 80066f8:	4208      	tst	r0, r1
 80066fa:	d0f5      	beq.n	80066e8 <round+0x5c>
 80066fc:	2001      	movs	r0, #1
 80066fe:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006702:	fa00 f404 	lsl.w	r4, r0, r4
 8006706:	1912      	adds	r2, r2, r4
 8006708:	bf28      	it	cs
 800670a:	181b      	addcs	r3, r3, r0
 800670c:	ea22 0201 	bic.w	r2, r2, r1
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	e7e6      	b.n	80066e4 <round+0x58>
 8006716:	bf00      	nop
 8006718:	000fffff 	.word	0x000fffff

0800671c <_init>:
 800671c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671e:	bf00      	nop
 8006720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006722:	bc08      	pop	{r3}
 8006724:	469e      	mov	lr, r3
 8006726:	4770      	bx	lr

08006728 <_fini>:
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672a:	bf00      	nop
 800672c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672e:	bc08      	pop	{r3}
 8006730:	469e      	mov	lr, r3
 8006732:	4770      	bx	lr
