
NoNameZz_MicroMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c040  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800c150  0800c150  0001c150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c634  0800c634  000202d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c634  0800c634  000202d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c634  0800c634  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c634  0800c634  0001c634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c638  0800c638  0001c638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800c63c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f84  200002d0  0800c90c  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001254  0800c90c  00021254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018397  00000000  00000000  000202f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002952  00000000  00000000  00038690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0003afe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  0003c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a538  00000000  00000000  0003d468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b6d  00000000  00000000  000579a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ff0  00000000  00000000  0006c50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  000fe4fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051ac  00000000  00000000  000fe548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002d0 	.word	0x200002d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c138 	.word	0x0800c138

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002d4 	.word	0x200002d4
 800014c:	0800c138 	.word	0x0800c138

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_fmul>:
 80003a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003ac:	bf1e      	ittt	ne
 80003ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b2:	ea92 0f0c 	teqne	r2, ip
 80003b6:	ea93 0f0c 	teqne	r3, ip
 80003ba:	d06f      	beq.n	800049c <__aeabi_fmul+0xf8>
 80003bc:	441a      	add	r2, r3
 80003be:	ea80 0c01 	eor.w	ip, r0, r1
 80003c2:	0240      	lsls	r0, r0, #9
 80003c4:	bf18      	it	ne
 80003c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ca:	d01e      	beq.n	800040a <__aeabi_fmul+0x66>
 80003cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d8:	fba0 3101 	umull	r3, r1, r0, r1
 80003dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e4:	bf3e      	ittt	cc
 80003e6:	0049      	lslcc	r1, r1, #1
 80003e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003ec:	005b      	lslcc	r3, r3, #1
 80003ee:	ea40 0001 	orr.w	r0, r0, r1
 80003f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003f6:	2afd      	cmp	r2, #253	; 0xfd
 80003f8:	d81d      	bhi.n	8000436 <__aeabi_fmul+0x92>
 80003fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000402:	bf08      	it	eq
 8000404:	f020 0001 	biceq.w	r0, r0, #1
 8000408:	4770      	bx	lr
 800040a:	f090 0f00 	teq	r0, #0
 800040e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000412:	bf08      	it	eq
 8000414:	0249      	lsleq	r1, r1, #9
 8000416:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041e:	3a7f      	subs	r2, #127	; 0x7f
 8000420:	bfc2      	ittt	gt
 8000422:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000426:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042a:	4770      	bxgt	lr
 800042c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	3a01      	subs	r2, #1
 8000436:	dc5d      	bgt.n	80004f4 <__aeabi_fmul+0x150>
 8000438:	f112 0f19 	cmn.w	r2, #25
 800043c:	bfdc      	itt	le
 800043e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000442:	4770      	bxle	lr
 8000444:	f1c2 0200 	rsb	r2, r2, #0
 8000448:	0041      	lsls	r1, r0, #1
 800044a:	fa21 f102 	lsr.w	r1, r1, r2
 800044e:	f1c2 0220 	rsb	r2, r2, #32
 8000452:	fa00 fc02 	lsl.w	ip, r0, r2
 8000456:	ea5f 0031 	movs.w	r0, r1, rrx
 800045a:	f140 0000 	adc.w	r0, r0, #0
 800045e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000462:	bf08      	it	eq
 8000464:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000468:	4770      	bx	lr
 800046a:	f092 0f00 	teq	r2, #0
 800046e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0040      	lsleq	r0, r0, #1
 8000476:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047a:	3a01      	subeq	r2, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xce>
 800047e:	ea40 000c 	orr.w	r0, r0, ip
 8000482:	f093 0f00 	teq	r3, #0
 8000486:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048a:	bf02      	ittt	eq
 800048c:	0049      	lsleq	r1, r1, #1
 800048e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000492:	3b01      	subeq	r3, #1
 8000494:	d0f9      	beq.n	800048a <__aeabi_fmul+0xe6>
 8000496:	ea41 010c 	orr.w	r1, r1, ip
 800049a:	e78f      	b.n	80003bc <__aeabi_fmul+0x18>
 800049c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	bf18      	it	ne
 80004a6:	ea93 0f0c 	teqne	r3, ip
 80004aa:	d00a      	beq.n	80004c2 <__aeabi_fmul+0x11e>
 80004ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b0:	bf18      	it	ne
 80004b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004b6:	d1d8      	bne.n	800046a <__aeabi_fmul+0xc6>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f090 0f00 	teq	r0, #0
 80004c6:	bf17      	itett	ne
 80004c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004cc:	4608      	moveq	r0, r1
 80004ce:	f091 0f00 	teqne	r1, #0
 80004d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004d6:	d014      	beq.n	8000502 <__aeabi_fmul+0x15e>
 80004d8:	ea92 0f0c 	teq	r2, ip
 80004dc:	d101      	bne.n	80004e2 <__aeabi_fmul+0x13e>
 80004de:	0242      	lsls	r2, r0, #9
 80004e0:	d10f      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004e2:	ea93 0f0c 	teq	r3, ip
 80004e6:	d103      	bne.n	80004f0 <__aeabi_fmul+0x14c>
 80004e8:	024b      	lsls	r3, r1, #9
 80004ea:	bf18      	it	ne
 80004ec:	4608      	movne	r0, r1
 80004ee:	d108      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004f0:	ea80 0001 	eor.w	r0, r0, r1
 80004f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000500:	4770      	bx	lr
 8000502:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000506:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050a:	4770      	bx	lr

0800050c <__aeabi_drsub>:
 800050c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e002      	b.n	8000518 <__adddf3>
 8000512:	bf00      	nop

08000514 <__aeabi_dsub>:
 8000514:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000518 <__adddf3>:
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800051e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000522:	ea94 0f05 	teq	r4, r5
 8000526:	bf08      	it	eq
 8000528:	ea90 0f02 	teqeq	r0, r2
 800052c:	bf1f      	itttt	ne
 800052e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000532:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000536:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800053a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053e:	f000 80e2 	beq.w	8000706 <__adddf3+0x1ee>
 8000542:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000546:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800054a:	bfb8      	it	lt
 800054c:	426d      	neglt	r5, r5
 800054e:	dd0c      	ble.n	800056a <__adddf3+0x52>
 8000550:	442c      	add	r4, r5
 8000552:	ea80 0202 	eor.w	r2, r0, r2
 8000556:	ea81 0303 	eor.w	r3, r1, r3
 800055a:	ea82 0000 	eor.w	r0, r2, r0
 800055e:	ea83 0101 	eor.w	r1, r3, r1
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	2d36      	cmp	r5, #54	; 0x36
 800056c:	bf88      	it	hi
 800056e:	bd30      	pophi	{r4, r5, pc}
 8000570:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000574:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000578:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800057c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000580:	d002      	beq.n	8000588 <__adddf3+0x70>
 8000582:	4240      	negs	r0, r0
 8000584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000588:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800058c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000590:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000594:	d002      	beq.n	800059c <__adddf3+0x84>
 8000596:	4252      	negs	r2, r2
 8000598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800059c:	ea94 0f05 	teq	r4, r5
 80005a0:	f000 80a7 	beq.w	80006f2 <__adddf3+0x1da>
 80005a4:	f1a4 0401 	sub.w	r4, r4, #1
 80005a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005ac:	db0d      	blt.n	80005ca <__adddf3+0xb2>
 80005ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005b2:	fa22 f205 	lsr.w	r2, r2, r5
 80005b6:	1880      	adds	r0, r0, r2
 80005b8:	f141 0100 	adc.w	r1, r1, #0
 80005bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c0:	1880      	adds	r0, r0, r2
 80005c2:	fa43 f305 	asr.w	r3, r3, r5
 80005c6:	4159      	adcs	r1, r3
 80005c8:	e00e      	b.n	80005e8 <__adddf3+0xd0>
 80005ca:	f1a5 0520 	sub.w	r5, r5, #32
 80005ce:	f10e 0e20 	add.w	lr, lr, #32
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d8:	bf28      	it	cs
 80005da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005de:	fa43 f305 	asr.w	r3, r3, r5
 80005e2:	18c0      	adds	r0, r0, r3
 80005e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	d507      	bpl.n	80005fe <__adddf3+0xe6>
 80005ee:	f04f 0e00 	mov.w	lr, #0
 80005f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80005fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000602:	d31b      	bcc.n	800063c <__adddf3+0x124>
 8000604:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000608:	d30c      	bcc.n	8000624 <__adddf3+0x10c>
 800060a:	0849      	lsrs	r1, r1, #1
 800060c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000610:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000614:	f104 0401 	add.w	r4, r4, #1
 8000618:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800061c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000620:	f080 809a 	bcs.w	8000758 <__adddf3+0x240>
 8000624:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800062e:	f150 0000 	adcs.w	r0, r0, #0
 8000632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000636:	ea41 0105 	orr.w	r1, r1, r5
 800063a:	bd30      	pop	{r4, r5, pc}
 800063c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000640:	4140      	adcs	r0, r0
 8000642:	eb41 0101 	adc.w	r1, r1, r1
 8000646:	3c01      	subs	r4, #1
 8000648:	bf28      	it	cs
 800064a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800064e:	d2e9      	bcs.n	8000624 <__adddf3+0x10c>
 8000650:	f091 0f00 	teq	r1, #0
 8000654:	bf04      	itt	eq
 8000656:	4601      	moveq	r1, r0
 8000658:	2000      	moveq	r0, #0
 800065a:	fab1 f381 	clz	r3, r1
 800065e:	bf08      	it	eq
 8000660:	3320      	addeq	r3, #32
 8000662:	f1a3 030b 	sub.w	r3, r3, #11
 8000666:	f1b3 0220 	subs.w	r2, r3, #32
 800066a:	da0c      	bge.n	8000686 <__adddf3+0x16e>
 800066c:	320c      	adds	r2, #12
 800066e:	dd08      	ble.n	8000682 <__adddf3+0x16a>
 8000670:	f102 0c14 	add.w	ip, r2, #20
 8000674:	f1c2 020c 	rsb	r2, r2, #12
 8000678:	fa01 f00c 	lsl.w	r0, r1, ip
 800067c:	fa21 f102 	lsr.w	r1, r1, r2
 8000680:	e00c      	b.n	800069c <__adddf3+0x184>
 8000682:	f102 0214 	add.w	r2, r2, #20
 8000686:	bfd8      	it	le
 8000688:	f1c2 0c20 	rsble	ip, r2, #32
 800068c:	fa01 f102 	lsl.w	r1, r1, r2
 8000690:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000694:	bfdc      	itt	le
 8000696:	ea41 010c 	orrle.w	r1, r1, ip
 800069a:	4090      	lslle	r0, r2
 800069c:	1ae4      	subs	r4, r4, r3
 800069e:	bfa2      	ittt	ge
 80006a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a4:	4329      	orrge	r1, r5
 80006a6:	bd30      	popge	{r4, r5, pc}
 80006a8:	ea6f 0404 	mvn.w	r4, r4
 80006ac:	3c1f      	subs	r4, #31
 80006ae:	da1c      	bge.n	80006ea <__adddf3+0x1d2>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc0e      	bgt.n	80006d2 <__adddf3+0x1ba>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0220 	rsb	r2, r4, #32
 80006bc:	fa20 f004 	lsr.w	r0, r0, r4
 80006c0:	fa01 f302 	lsl.w	r3, r1, r2
 80006c4:	ea40 0003 	orr.w	r0, r0, r3
 80006c8:	fa21 f304 	lsr.w	r3, r1, r4
 80006cc:	ea45 0103 	orr.w	r1, r5, r3
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	f1c4 040c 	rsb	r4, r4, #12
 80006d6:	f1c4 0220 	rsb	r2, r4, #32
 80006da:	fa20 f002 	lsr.w	r0, r0, r2
 80006de:	fa01 f304 	lsl.w	r3, r1, r4
 80006e2:	ea40 0003 	orr.w	r0, r0, r3
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	fa21 f004 	lsr.w	r0, r1, r4
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	f094 0f00 	teq	r4, #0
 80006f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006fa:	bf06      	itte	eq
 80006fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000700:	3401      	addeq	r4, #1
 8000702:	3d01      	subne	r5, #1
 8000704:	e74e      	b.n	80005a4 <__adddf3+0x8c>
 8000706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070a:	bf18      	it	ne
 800070c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000710:	d029      	beq.n	8000766 <__adddf3+0x24e>
 8000712:	ea94 0f05 	teq	r4, r5
 8000716:	bf08      	it	eq
 8000718:	ea90 0f02 	teqeq	r0, r2
 800071c:	d005      	beq.n	800072a <__adddf3+0x212>
 800071e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000722:	bf04      	itt	eq
 8000724:	4619      	moveq	r1, r3
 8000726:	4610      	moveq	r0, r2
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	ea91 0f03 	teq	r1, r3
 800072e:	bf1e      	ittt	ne
 8000730:	2100      	movne	r1, #0
 8000732:	2000      	movne	r0, #0
 8000734:	bd30      	popne	{r4, r5, pc}
 8000736:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800073a:	d105      	bne.n	8000748 <__adddf3+0x230>
 800073c:	0040      	lsls	r0, r0, #1
 800073e:	4149      	adcs	r1, r1
 8000740:	bf28      	it	cs
 8000742:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd30      	pop	{r4, r5, pc}
 8000748:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800074c:	bf3c      	itt	cc
 800074e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000752:	bd30      	popcc	{r4, r5, pc}
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800076a:	bf1a      	itte	ne
 800076c:	4619      	movne	r1, r3
 800076e:	4610      	movne	r0, r2
 8000770:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000774:	bf1c      	itt	ne
 8000776:	460b      	movne	r3, r1
 8000778:	4602      	movne	r2, r0
 800077a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800077e:	bf06      	itte	eq
 8000780:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000784:	ea91 0f03 	teqeq	r1, r3
 8000788:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	bf00      	nop

08000790 <__aeabi_ui2d>:
 8000790:	f090 0f00 	teq	r0, #0
 8000794:	bf04      	itt	eq
 8000796:	2100      	moveq	r1, #0
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a4:	f04f 0500 	mov.w	r5, #0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e750      	b.n	8000650 <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_i2d>:
 80007b0:	f090 0f00 	teq	r0, #0
 80007b4:	bf04      	itt	eq
 80007b6:	2100      	moveq	r1, #0
 80007b8:	4770      	bxeq	lr
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	f04f 0100 	mov.w	r1, #0
 80007d0:	e73e      	b.n	8000650 <__adddf3+0x138>
 80007d2:	bf00      	nop

080007d4 <__aeabi_f2d>:
 80007d4:	0042      	lsls	r2, r0, #1
 80007d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007da:	ea4f 0131 	mov.w	r1, r1, rrx
 80007de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007e2:	bf1f      	itttt	ne
 80007e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f0:	4770      	bxne	lr
 80007f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007f6:	bf08      	it	eq
 80007f8:	4770      	bxeq	lr
 80007fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007fe:	bf04      	itt	eq
 8000800:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000804:	4770      	bxeq	lr
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	f44f 7460 	mov.w	r4, #896	; 0x380
 800080c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	e71c      	b.n	8000650 <__adddf3+0x138>
 8000816:	bf00      	nop

08000818 <__aeabi_ul2d>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	b530      	push	{r4, r5, lr}
 8000822:	f04f 0500 	mov.w	r5, #0
 8000826:	e00a      	b.n	800083e <__aeabi_l2d+0x16>

08000828 <__aeabi_l2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000836:	d502      	bpl.n	800083e <__aeabi_l2d+0x16>
 8000838:	4240      	negs	r0, r0
 800083a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000842:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000846:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800084a:	f43f aed8 	beq.w	80005fe <__adddf3+0xe6>
 800084e:	f04f 0203 	mov.w	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000866:	f1c2 0320 	rsb	r3, r2, #32
 800086a:	fa00 fc03 	lsl.w	ip, r0, r3
 800086e:	fa20 f002 	lsr.w	r0, r0, r2
 8000872:	fa01 fe03 	lsl.w	lr, r1, r3
 8000876:	ea40 000e 	orr.w	r0, r0, lr
 800087a:	fa21 f102 	lsr.w	r1, r1, r2
 800087e:	4414      	add	r4, r2
 8000880:	e6bd      	b.n	80005fe <__adddf3+0xe6>
 8000882:	bf00      	nop

08000884 <__aeabi_d2iz>:
 8000884:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000888:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800088c:	d215      	bcs.n	80008ba <__aeabi_d2iz+0x36>
 800088e:	d511      	bpl.n	80008b4 <__aeabi_d2iz+0x30>
 8000890:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000894:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000898:	d912      	bls.n	80008c0 <__aeabi_d2iz+0x3c>
 800089a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800089e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008aa:	fa23 f002 	lsr.w	r0, r3, r2
 80008ae:	bf18      	it	ne
 80008b0:	4240      	negne	r0, r0
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d105      	bne.n	80008cc <__aeabi_d2iz+0x48>
 80008c0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008c4:	bf08      	it	eq
 80008c6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008ca:	4770      	bx	lr
 80008cc:	f04f 0000 	mov.w	r0, #0
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <__aeabi_d2uiz>:
 80008d4:	004a      	lsls	r2, r1, #1
 80008d6:	d211      	bcs.n	80008fc <__aeabi_d2uiz+0x28>
 80008d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008dc:	d211      	bcs.n	8000902 <__aeabi_d2uiz+0x2e>
 80008de:	d50d      	bpl.n	80008fc <__aeabi_d2uiz+0x28>
 80008e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008e8:	d40e      	bmi.n	8000908 <__aeabi_d2uiz+0x34>
 80008ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008f6:	fa23 f002 	lsr.w	r0, r3, r2
 80008fa:	4770      	bx	lr
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	4770      	bx	lr
 8000902:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000906:	d102      	bne.n	800090e <__aeabi_d2uiz+0x3a>
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	4770      	bx	lr
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	4770      	bx	lr

08000914 <__aeabi_frsub>:
 8000914:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000918:	e002      	b.n	8000920 <__addsf3>
 800091a:	bf00      	nop

0800091c <__aeabi_fsub>:
 800091c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000920 <__addsf3>:
 8000920:	0042      	lsls	r2, r0, #1
 8000922:	bf1f      	itttt	ne
 8000924:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000928:	ea92 0f03 	teqne	r2, r3
 800092c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000930:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000934:	d06a      	beq.n	8000a0c <__addsf3+0xec>
 8000936:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800093a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800093e:	bfc1      	itttt	gt
 8000940:	18d2      	addgt	r2, r2, r3
 8000942:	4041      	eorgt	r1, r0
 8000944:	4048      	eorgt	r0, r1
 8000946:	4041      	eorgt	r1, r0
 8000948:	bfb8      	it	lt
 800094a:	425b      	neglt	r3, r3
 800094c:	2b19      	cmp	r3, #25
 800094e:	bf88      	it	hi
 8000950:	4770      	bxhi	lr
 8000952:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000956:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800095a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800095e:	bf18      	it	ne
 8000960:	4240      	negne	r0, r0
 8000962:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000966:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800096a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800096e:	bf18      	it	ne
 8000970:	4249      	negne	r1, r1
 8000972:	ea92 0f03 	teq	r2, r3
 8000976:	d03f      	beq.n	80009f8 <__addsf3+0xd8>
 8000978:	f1a2 0201 	sub.w	r2, r2, #1
 800097c:	fa41 fc03 	asr.w	ip, r1, r3
 8000980:	eb10 000c 	adds.w	r0, r0, ip
 8000984:	f1c3 0320 	rsb	r3, r3, #32
 8000988:	fa01 f103 	lsl.w	r1, r1, r3
 800098c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000990:	d502      	bpl.n	8000998 <__addsf3+0x78>
 8000992:	4249      	negs	r1, r1
 8000994:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000998:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800099c:	d313      	bcc.n	80009c6 <__addsf3+0xa6>
 800099e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009a2:	d306      	bcc.n	80009b2 <__addsf3+0x92>
 80009a4:	0840      	lsrs	r0, r0, #1
 80009a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80009aa:	f102 0201 	add.w	r2, r2, #1
 80009ae:	2afe      	cmp	r2, #254	; 0xfe
 80009b0:	d251      	bcs.n	8000a56 <__addsf3+0x136>
 80009b2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ba:	bf08      	it	eq
 80009bc:	f020 0001 	biceq.w	r0, r0, #1
 80009c0:	ea40 0003 	orr.w	r0, r0, r3
 80009c4:	4770      	bx	lr
 80009c6:	0049      	lsls	r1, r1, #1
 80009c8:	eb40 0000 	adc.w	r0, r0, r0
 80009cc:	3a01      	subs	r2, #1
 80009ce:	bf28      	it	cs
 80009d0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009d4:	d2ed      	bcs.n	80009b2 <__addsf3+0x92>
 80009d6:	fab0 fc80 	clz	ip, r0
 80009da:	f1ac 0c08 	sub.w	ip, ip, #8
 80009de:	ebb2 020c 	subs.w	r2, r2, ip
 80009e2:	fa00 f00c 	lsl.w	r0, r0, ip
 80009e6:	bfaa      	itet	ge
 80009e8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009ec:	4252      	neglt	r2, r2
 80009ee:	4318      	orrge	r0, r3
 80009f0:	bfbc      	itt	lt
 80009f2:	40d0      	lsrlt	r0, r2
 80009f4:	4318      	orrlt	r0, r3
 80009f6:	4770      	bx	lr
 80009f8:	f092 0f00 	teq	r2, #0
 80009fc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a00:	bf06      	itte	eq
 8000a02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a06:	3201      	addeq	r2, #1
 8000a08:	3b01      	subne	r3, #1
 8000a0a:	e7b5      	b.n	8000978 <__addsf3+0x58>
 8000a0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a1a:	d021      	beq.n	8000a60 <__addsf3+0x140>
 8000a1c:	ea92 0f03 	teq	r2, r3
 8000a20:	d004      	beq.n	8000a2c <__addsf3+0x10c>
 8000a22:	f092 0f00 	teq	r2, #0
 8000a26:	bf08      	it	eq
 8000a28:	4608      	moveq	r0, r1
 8000a2a:	4770      	bx	lr
 8000a2c:	ea90 0f01 	teq	r0, r1
 8000a30:	bf1c      	itt	ne
 8000a32:	2000      	movne	r0, #0
 8000a34:	4770      	bxne	lr
 8000a36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a3a:	d104      	bne.n	8000a46 <__addsf3+0x126>
 8000a3c:	0040      	lsls	r0, r0, #1
 8000a3e:	bf28      	it	cs
 8000a40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a44:	4770      	bx	lr
 8000a46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a4a:	bf3c      	itt	cc
 8000a4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bxcc	lr
 8000a52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	4770      	bx	lr
 8000a60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a64:	bf16      	itet	ne
 8000a66:	4608      	movne	r0, r1
 8000a68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a6c:	4601      	movne	r1, r0
 8000a6e:	0242      	lsls	r2, r0, #9
 8000a70:	bf06      	itte	eq
 8000a72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a76:	ea90 0f01 	teqeq	r0, r1
 8000a7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a7e:	4770      	bx	lr

08000a80 <__aeabi_ui2f>:
 8000a80:	f04f 0300 	mov.w	r3, #0
 8000a84:	e004      	b.n	8000a90 <__aeabi_i2f+0x8>
 8000a86:	bf00      	nop

08000a88 <__aeabi_i2f>:
 8000a88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a8c:	bf48      	it	mi
 8000a8e:	4240      	negmi	r0, r0
 8000a90:	ea5f 0c00 	movs.w	ip, r0
 8000a94:	bf08      	it	eq
 8000a96:	4770      	bxeq	lr
 8000a98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a9c:	4601      	mov	r1, r0
 8000a9e:	f04f 0000 	mov.w	r0, #0
 8000aa2:	e01c      	b.n	8000ade <__aeabi_l2f+0x2a>

08000aa4 <__aeabi_ul2f>:
 8000aa4:	ea50 0201 	orrs.w	r2, r0, r1
 8000aa8:	bf08      	it	eq
 8000aaa:	4770      	bxeq	lr
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	e00a      	b.n	8000ac8 <__aeabi_l2f+0x14>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_l2f>:
 8000ab4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ab8:	bf08      	it	eq
 8000aba:	4770      	bxeq	lr
 8000abc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ac0:	d502      	bpl.n	8000ac8 <__aeabi_l2f+0x14>
 8000ac2:	4240      	negs	r0, r0
 8000ac4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ac8:	ea5f 0c01 	movs.w	ip, r1
 8000acc:	bf02      	ittt	eq
 8000ace:	4684      	moveq	ip, r0
 8000ad0:	4601      	moveq	r1, r0
 8000ad2:	2000      	moveq	r0, #0
 8000ad4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ad8:	bf08      	it	eq
 8000ada:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ade:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ae2:	fabc f28c 	clz	r2, ip
 8000ae6:	3a08      	subs	r2, #8
 8000ae8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000aec:	db10      	blt.n	8000b10 <__aeabi_l2f+0x5c>
 8000aee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000af2:	4463      	add	r3, ip
 8000af4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000af8:	f1c2 0220 	rsb	r2, r2, #32
 8000afc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b00:	fa20 f202 	lsr.w	r2, r0, r2
 8000b04:	eb43 0002 	adc.w	r0, r3, r2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f102 0220 	add.w	r2, r2, #32
 8000b14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b18:	f1c2 0220 	rsb	r2, r2, #32
 8000b1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b20:	fa21 f202 	lsr.w	r2, r1, r2
 8000b24:	eb43 0002 	adc.w	r0, r3, r2
 8000b28:	bf08      	it	eq
 8000b2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b2e:	4770      	bx	lr

08000b30 <start_fill>:


void found(int16_t index);
void set_wall(bool rbl, bool rbr, bool rbf);

void start_fill() {
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
	memset(visited, false, sizeof(visited));
 8000b36:	2264      	movs	r2, #100	; 0x64
 8000b38:	2100      	movs	r1, #0
 8000b3a:	48ba      	ldr	r0, [pc, #744]	; (8000e24 <start_fill+0x2f4>)
 8000b3c:	f00b faec 	bl	800c118 <memset>
	memset(maze, 0, sizeof(maze));
 8000b40:	2264      	movs	r2, #100	; 0x64
 8000b42:	2100      	movs	r1, #0
 8000b44:	48b8      	ldr	r0, [pc, #736]	; (8000e28 <start_fill+0x2f8>)
 8000b46:	f00b fae7 	bl	800c118 <memset>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000b4a:	4bb8      	ldr	r3, [pc, #736]	; (8000e2c <start_fill+0x2fc>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000b52:	4bb7      	ldr	r3, [pc, #732]	; (8000e30 <start_fill+0x300>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
	visited[starting_coordinates[1]][starting_coordinates[0]] = true;
 8000b5a:	4bb6      	ldr	r3, [pc, #728]	; (8000e34 <start_fill+0x304>)
 8000b5c:	785b      	ldrb	r3, [r3, #1]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4bb4      	ldr	r3, [pc, #720]	; (8000e34 <start_fill+0x304>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4618      	mov	r0, r3
 8000b66:	4aaf      	ldr	r2, [pc, #700]	; (8000e24 <start_fill+0x2f4>)
 8000b68:	460b      	mov	r3, r1
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	4413      	add	r3, r2
 8000b72:	4403      	add	r3, r0
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
	int16_t i = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	82fb      	strh	r3, [r7, #22]
	x = starting_coordinates[0];
 8000b7c:	4bad      	ldr	r3, [pc, #692]	; (8000e34 <start_fill+0x304>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	4bad      	ldr	r3, [pc, #692]	; (8000e38 <start_fill+0x308>)
 8000b84:	701a      	strb	r2, [r3, #0]
	y = starting_coordinates[1] + 1;
 8000b86:	4bab      	ldr	r3, [pc, #684]	; (8000e34 <start_fill+0x304>)
 8000b88:	785b      	ldrb	r3, [r3, #1]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	b25a      	sxtb	r2, r3
 8000b90:	4baa      	ldr	r3, [pc, #680]	; (8000e3c <start_fill+0x30c>)
 8000b92:	701a      	strb	r2, [r3, #0]
	maze[y - 1][x] |= bottom_wall;
 8000b94:	4ba9      	ldr	r3, [pc, #676]	; (8000e3c <start_fill+0x30c>)
 8000b96:	f993 3000 	ldrsb.w	r3, [r3]
 8000b9a:	1e5a      	subs	r2, r3, #1
 8000b9c:	4ba6      	ldr	r3, [pc, #664]	; (8000e38 <start_fill+0x308>)
 8000b9e:	f993 3000 	ldrsb.w	r3, [r3]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	49a0      	ldr	r1, [pc, #640]	; (8000e28 <start_fill+0x2f8>)
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	440b      	add	r3, r1
 8000bb0:	4403      	add	r3, r0
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4aa1      	ldr	r2, [pc, #644]	; (8000e3c <start_fill+0x30c>)
 8000bb6:	f992 2000 	ldrsb.w	r2, [r2]
 8000bba:	3a01      	subs	r2, #1
 8000bbc:	499e      	ldr	r1, [pc, #632]	; (8000e38 <start_fill+0x308>)
 8000bbe:	f991 1000 	ldrsb.w	r1, [r1]
 8000bc2:	460c      	mov	r4, r1
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	b2d8      	uxtb	r0, r3
 8000bca:	4997      	ldr	r1, [pc, #604]	; (8000e28 <start_fill+0x2f8>)
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	440b      	add	r3, r1
 8000bd6:	4423      	add	r3, r4
 8000bd8:	4602      	mov	r2, r0
 8000bda:	701a      	strb	r2, [r3, #0]
	direction = north;
 8000bdc:	4b98      	ldr	r3, [pc, #608]	; (8000e40 <start_fill+0x310>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	701a      	strb	r2, [r3, #0]
	bool frontfree, leftfree, rightfree;
	uint16_t frontValue, leftValue, rightValue;
	while(1){
		vl53l0x_GetRanging_now(pMyDevice[1], &frontValue);
 8000be2:	4b98      	ldr	r3, [pc, #608]	; (8000e44 <start_fill+0x314>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	1dba      	adds	r2, r7, #6
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f00a ffea 	bl	800bbc4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(pMyDevice[2], &leftValue);
 8000bf0:	4b94      	ldr	r3, [pc, #592]	; (8000e44 <start_fill+0x314>)
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	1d3a      	adds	r2, r7, #4
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f00a ffe3 	bl	800bbc4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(pMyDevice[3], &rightValue);
 8000bfe:	4b91      	ldr	r3, [pc, #580]	; (8000e44 <start_fill+0x314>)
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	1cba      	adds	r2, r7, #2
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f00a ffdc 	bl	800bbc4 <vl53l0x_GetRanging_now>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c12:	488d      	ldr	r0, [pc, #564]	; (8000e48 <start_fill+0x318>)
 8000c14:	f003 fe10 	bl	8004838 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000c18:	2032      	movs	r0, #50	; 0x32
 8000c1a:	f003 fb25 	bl	8004268 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c24:	4888      	ldr	r0, [pc, #544]	; (8000e48 <start_fill+0x318>)
 8000c26:	f003 fe07 	bl	8004838 <HAL_GPIO_WritePin>
		frontfree = frontValue > HasfrontWallValue;
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c30:	bf8c      	ite	hi
 8000c32:	2301      	movhi	r3, #1
 8000c34:	2300      	movls	r3, #0
 8000c36:	757b      	strb	r3, [r7, #21]
		leftfree  = leftValue > HasleftWallValue_45;
 8000c38:	88bb      	ldrh	r3, [r7, #4]
 8000c3a:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8000c3e:	bf8c      	ite	hi
 8000c40:	2301      	movhi	r3, #1
 8000c42:	2300      	movls	r3, #0
 8000c44:	753b      	strb	r3, [r7, #20]
		rightfree = rightValue > HasrightWallValue_45;
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8000c4c:	bf8c      	ite	hi
 8000c4e:	2301      	movhi	r3, #1
 8000c50:	2300      	movls	r3, #0
 8000c52:	74fb      	strb	r3, [r7, #19]
		set_wall(!leftfree, !rightfree, !frontfree);
 8000c54:	7d3b      	ldrb	r3, [r7, #20]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	bf14      	ite	ne
 8000c5a:	2301      	movne	r3, #1
 8000c5c:	2300      	moveq	r3, #0
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	f083 0301 	eor.w	r3, r3, #1
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	b2d8      	uxtb	r0, r3
 8000c6c:	7cfb      	ldrb	r3, [r7, #19]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	bf14      	ite	ne
 8000c72:	2301      	movne	r3, #1
 8000c74:	2300      	moveq	r3, #0
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	f083 0301 	eor.w	r3, r3, #1
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	b2d9      	uxtb	r1, r3
 8000c84:	7d7b      	ldrb	r3, [r7, #21]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf14      	ite	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	2300      	moveq	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	f083 0301 	eor.w	r3, r3, #1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	f001 fbd3 	bl	8002448 <set_wall>
		visited[y][x] = true;
 8000ca2:	4b66      	ldr	r3, [pc, #408]	; (8000e3c <start_fill+0x30c>)
 8000ca4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4b63      	ldr	r3, [pc, #396]	; (8000e38 <start_fill+0x308>)
 8000cac:	f993 3000 	ldrsb.w	r3, [r3]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	4a5c      	ldr	r2, [pc, #368]	; (8000e24 <start_fill+0x2f4>)
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	440b      	add	r3, r1
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4403      	add	r3, r0
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
		if(x == ending_coordinates[0] && y == ending_coordinates[1]){
 8000cc4:	4b5c      	ldr	r3, [pc, #368]	; (8000e38 <start_fill+0x308>)
 8000cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b5f      	ldr	r3, [pc, #380]	; (8000e4c <start_fill+0x31c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d135      	bne.n	8000d40 <start_fill+0x210>
 8000cd4:	4b59      	ldr	r3, [pc, #356]	; (8000e3c <start_fill+0x30c>)
 8000cd6:	f993 3000 	ldrsb.w	r3, [r3]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b5b      	ldr	r3, [pc, #364]	; (8000e4c <start_fill+0x31c>)
 8000cde:	785b      	ldrb	r3, [r3, #1]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d12d      	bne.n	8000d40 <start_fill+0x210>
			found(i);
 8000ce4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 fb59 	bl	80023a0 <found>
			maze[y][x] |= top_wall;
 8000cee:	4b53      	ldr	r3, [pc, #332]	; (8000e3c <start_fill+0x30c>)
 8000cf0:	f993 3000 	ldrsb.w	r3, [r3]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4b50      	ldr	r3, [pc, #320]	; (8000e38 <start_fill+0x308>)
 8000cf8:	f993 3000 	ldrsb.w	r3, [r3]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	4a4a      	ldr	r2, [pc, #296]	; (8000e28 <start_fill+0x2f8>)
 8000d00:	460b      	mov	r3, r1
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	440b      	add	r3, r1
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4413      	add	r3, r2
 8000d0a:	4403      	add	r3, r0
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	4a4b      	ldr	r2, [pc, #300]	; (8000e3c <start_fill+0x30c>)
 8000d10:	f992 2000 	ldrsb.w	r2, [r2]
 8000d14:	4611      	mov	r1, r2
 8000d16:	4a48      	ldr	r2, [pc, #288]	; (8000e38 <start_fill+0x308>)
 8000d18:	f992 2000 	ldrsb.w	r2, [r2]
 8000d1c:	4614      	mov	r4, r2
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	b2d8      	uxtb	r0, r3
 8000d24:	4a40      	ldr	r2, [pc, #256]	; (8000e28 <start_fill+0x2f8>)
 8000d26:	460b      	mov	r3, r1
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	4423      	add	r3, r4
 8000d32:	4602      	mov	r2, r0
 8000d34:	701a      	strb	r2, [r3, #0]
			break;
 8000d36:	bf00      	nop
					}
					break;
			}
		}
	}
	for(int n = 0; n < grid_size; n++){
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	f001 bb22 	b.w	8002384 <start_fill+0x1854>
		switch(direction){
 8000d40:	4b3f      	ldr	r3, [pc, #252]	; (8000e40 <start_fill+0x310>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	f200 81a6 	bhi.w	8001096 <start_fill+0x566>
 8000d4a:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <start_fill+0x220>)
 8000d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d50:	08000d61 	.word	0x08000d61
 8000d54:	08000e51 	.word	0x08000e51
 8000d58:	08000f13 	.word	0x08000f13
 8000d5c:	08000fd5 	.word	0x08000fd5
				frontfree = frontfree && !visited[y][x - 1];
 8000d60:	7d7b      	ldrb	r3, [r7, #21]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d016      	beq.n	8000d94 <start_fill+0x264>
 8000d66:	4b35      	ldr	r3, [pc, #212]	; (8000e3c <start_fill+0x30c>)
 8000d68:	f993 3000 	ldrsb.w	r3, [r3]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <start_fill+0x308>)
 8000d70:	f993 3000 	ldrsb.w	r3, [r3]
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	492b      	ldr	r1, [pc, #172]	; (8000e24 <start_fill+0x2f4>)
 8000d78:	4603      	mov	r3, r0
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4403      	add	r3, r0
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	440b      	add	r3, r1
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	f083 0301 	eor.w	r3, r3, #1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <start_fill+0x264>
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <start_fill+0x266>
 8000d94:	2300      	movs	r3, #0
 8000d96:	757b      	strb	r3, [r7, #21]
 8000d98:	7d7b      	ldrb	r3, [r7, #21]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	757b      	strb	r3, [r7, #21]
				leftfree  = leftfree && !visited[y + 1][x];
 8000da0:	7d3b      	ldrb	r3, [r7, #20]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d016      	beq.n	8000dd4 <start_fill+0x2a4>
 8000da6:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <start_fill+0x30c>)
 8000da8:	f993 3000 	ldrsb.w	r3, [r3]
 8000dac:	1c5a      	adds	r2, r3, #1
 8000dae:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <start_fill+0x308>)
 8000db0:	f993 3000 	ldrsb.w	r3, [r3]
 8000db4:	4618      	mov	r0, r3
 8000db6:	491b      	ldr	r1, [pc, #108]	; (8000e24 <start_fill+0x2f4>)
 8000db8:	4613      	mov	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	440b      	add	r3, r1
 8000dc2:	4403      	add	r3, r0
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	f083 0301 	eor.w	r3, r3, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <start_fill+0x2a4>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e000      	b.n	8000dd6 <start_fill+0x2a6>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	753b      	strb	r3, [r7, #20]
 8000dd8:	7d3b      	ldrb	r3, [r7, #20]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	753b      	strb	r3, [r7, #20]
				rightfree  = rightfree && !visited[y - 1][x];
 8000de0:	7cfb      	ldrb	r3, [r7, #19]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d016      	beq.n	8000e14 <start_fill+0x2e4>
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <start_fill+0x30c>)
 8000de8:	f993 3000 	ldrsb.w	r3, [r3]
 8000dec:	1e5a      	subs	r2, r3, #1
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <start_fill+0x308>)
 8000df0:	f993 3000 	ldrsb.w	r3, [r3]
 8000df4:	4618      	mov	r0, r3
 8000df6:	490b      	ldr	r1, [pc, #44]	; (8000e24 <start_fill+0x2f4>)
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	440b      	add	r3, r1
 8000e02:	4403      	add	r3, r0
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	f083 0301 	eor.w	r3, r3, #1
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <start_fill+0x2e4>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e000      	b.n	8000e16 <start_fill+0x2e6>
 8000e14:	2300      	movs	r3, #0
 8000e16:	74fb      	strb	r3, [r7, #19]
 8000e18:	7cfb      	ldrb	r3, [r7, #19]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	74fb      	strb	r3, [r7, #19]
				break;
 8000e20:	e139      	b.n	8001096 <start_fill+0x566>
 8000e22:	bf00      	nop
 8000e24:	200005ac 	.word	0x200005ac
 8000e28:	20000548 	.word	0x20000548
 8000e2c:	200004b8 	.word	0x200004b8
 8000e30:	20000500 	.word	0x20000500
 8000e34:	0800c5f4 	.word	0x0800c5f4
 8000e38:	20000418 	.word	0x20000418
 8000e3c:	20000419 	.word	0x20000419
 8000e40:	2000041a 	.word	0x2000041a
 8000e44:	20000f5c 	.word	0x20000f5c
 8000e48:	40011000 	.word	0x40011000
 8000e4c:	0800c5f8 	.word	0x0800c5f8
				frontfree = frontfree && !visited[y][x + 1];
 8000e50:	7d7b      	ldrb	r3, [r7, #21]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d016      	beq.n	8000e84 <start_fill+0x354>
 8000e56:	4bb9      	ldr	r3, [pc, #740]	; (800113c <start_fill+0x60c>)
 8000e58:	f993 3000 	ldrsb.w	r3, [r3]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	4bb8      	ldr	r3, [pc, #736]	; (8001140 <start_fill+0x610>)
 8000e60:	f993 3000 	ldrsb.w	r3, [r3]
 8000e64:	1c5a      	adds	r2, r3, #1
 8000e66:	49b7      	ldr	r1, [pc, #732]	; (8001144 <start_fill+0x614>)
 8000e68:	4603      	mov	r3, r0
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4403      	add	r3, r0
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	440b      	add	r3, r1
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	f083 0301 	eor.w	r3, r3, #1
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <start_fill+0x354>
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <start_fill+0x356>
 8000e84:	2300      	movs	r3, #0
 8000e86:	757b      	strb	r3, [r7, #21]
 8000e88:	7d7b      	ldrb	r3, [r7, #21]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	757b      	strb	r3, [r7, #21]
				leftfree  = leftfree && !visited[y - 1][x];
 8000e90:	7d3b      	ldrb	r3, [r7, #20]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d016      	beq.n	8000ec4 <start_fill+0x394>
 8000e96:	4ba9      	ldr	r3, [pc, #676]	; (800113c <start_fill+0x60c>)
 8000e98:	f993 3000 	ldrsb.w	r3, [r3]
 8000e9c:	1e5a      	subs	r2, r3, #1
 8000e9e:	4ba8      	ldr	r3, [pc, #672]	; (8001140 <start_fill+0x610>)
 8000ea0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	49a7      	ldr	r1, [pc, #668]	; (8001144 <start_fill+0x614>)
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	440b      	add	r3, r1
 8000eb2:	4403      	add	r3, r0
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	f083 0301 	eor.w	r3, r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <start_fill+0x394>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <start_fill+0x396>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	753b      	strb	r3, [r7, #20]
 8000ec8:	7d3b      	ldrb	r3, [r7, #20]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	753b      	strb	r3, [r7, #20]
				rightfree  = rightfree && !visited[y + 1][x];
 8000ed0:	7cfb      	ldrb	r3, [r7, #19]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d016      	beq.n	8000f04 <start_fill+0x3d4>
 8000ed6:	4b99      	ldr	r3, [pc, #612]	; (800113c <start_fill+0x60c>)
 8000ed8:	f993 3000 	ldrsb.w	r3, [r3]
 8000edc:	1c5a      	adds	r2, r3, #1
 8000ede:	4b98      	ldr	r3, [pc, #608]	; (8001140 <start_fill+0x610>)
 8000ee0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	4997      	ldr	r1, [pc, #604]	; (8001144 <start_fill+0x614>)
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	440b      	add	r3, r1
 8000ef2:	4403      	add	r3, r0
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	f083 0301 	eor.w	r3, r3, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <start_fill+0x3d4>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <start_fill+0x3d6>
 8000f04:	2300      	movs	r3, #0
 8000f06:	74fb      	strb	r3, [r7, #19]
 8000f08:	7cfb      	ldrb	r3, [r7, #19]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	74fb      	strb	r3, [r7, #19]
				break;
 8000f10:	e0c1      	b.n	8001096 <start_fill+0x566>
				frontfree = frontfree && !visited[y - 1][x];
 8000f12:	7d7b      	ldrb	r3, [r7, #21]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d016      	beq.n	8000f46 <start_fill+0x416>
 8000f18:	4b88      	ldr	r3, [pc, #544]	; (800113c <start_fill+0x60c>)
 8000f1a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f1e:	1e5a      	subs	r2, r3, #1
 8000f20:	4b87      	ldr	r3, [pc, #540]	; (8001140 <start_fill+0x610>)
 8000f22:	f993 3000 	ldrsb.w	r3, [r3]
 8000f26:	4618      	mov	r0, r3
 8000f28:	4986      	ldr	r1, [pc, #536]	; (8001144 <start_fill+0x614>)
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	440b      	add	r3, r1
 8000f34:	4403      	add	r3, r0
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	f083 0301 	eor.w	r3, r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <start_fill+0x416>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <start_fill+0x418>
 8000f46:	2300      	movs	r3, #0
 8000f48:	757b      	strb	r3, [r7, #21]
 8000f4a:	7d7b      	ldrb	r3, [r7, #21]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	757b      	strb	r3, [r7, #21]
				leftfree  = leftfree && !visited[y][x - 1];
 8000f52:	7d3b      	ldrb	r3, [r7, #20]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d016      	beq.n	8000f86 <start_fill+0x456>
 8000f58:	4b78      	ldr	r3, [pc, #480]	; (800113c <start_fill+0x60c>)
 8000f5a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	4b77      	ldr	r3, [pc, #476]	; (8001140 <start_fill+0x610>)
 8000f62:	f993 3000 	ldrsb.w	r3, [r3]
 8000f66:	1e5a      	subs	r2, r3, #1
 8000f68:	4976      	ldr	r1, [pc, #472]	; (8001144 <start_fill+0x614>)
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4403      	add	r3, r0
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	440b      	add	r3, r1
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	f083 0301 	eor.w	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <start_fill+0x456>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <start_fill+0x458>
 8000f86:	2300      	movs	r3, #0
 8000f88:	753b      	strb	r3, [r7, #20]
 8000f8a:	7d3b      	ldrb	r3, [r7, #20]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	753b      	strb	r3, [r7, #20]
				rightfree  = rightfree && !visited[y][x + 1];
 8000f92:	7cfb      	ldrb	r3, [r7, #19]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d016      	beq.n	8000fc6 <start_fill+0x496>
 8000f98:	4b68      	ldr	r3, [pc, #416]	; (800113c <start_fill+0x60c>)
 8000f9a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	4b67      	ldr	r3, [pc, #412]	; (8001140 <start_fill+0x610>)
 8000fa2:	f993 3000 	ldrsb.w	r3, [r3]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	4966      	ldr	r1, [pc, #408]	; (8001144 <start_fill+0x614>)
 8000faa:	4603      	mov	r3, r0
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4403      	add	r3, r0
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	440b      	add	r3, r1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	f083 0301 	eor.w	r3, r3, #1
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <start_fill+0x496>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <start_fill+0x498>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	74fb      	strb	r3, [r7, #19]
 8000fca:	7cfb      	ldrb	r3, [r7, #19]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	74fb      	strb	r3, [r7, #19]
				break;
 8000fd2:	e060      	b.n	8001096 <start_fill+0x566>
				frontfree = frontfree && !visited[y + 1][x];
 8000fd4:	7d7b      	ldrb	r3, [r7, #21]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d016      	beq.n	8001008 <start_fill+0x4d8>
 8000fda:	4b58      	ldr	r3, [pc, #352]	; (800113c <start_fill+0x60c>)
 8000fdc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	4b57      	ldr	r3, [pc, #348]	; (8001140 <start_fill+0x610>)
 8000fe4:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	4956      	ldr	r1, [pc, #344]	; (8001144 <start_fill+0x614>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	440b      	add	r3, r1
 8000ff6:	4403      	add	r3, r0
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	f083 0301 	eor.w	r3, r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <start_fill+0x4d8>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <start_fill+0x4da>
 8001008:	2300      	movs	r3, #0
 800100a:	757b      	strb	r3, [r7, #21]
 800100c:	7d7b      	ldrb	r3, [r7, #21]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	757b      	strb	r3, [r7, #21]
				leftfree  = leftfree && !visited[y][x + 1];
 8001014:	7d3b      	ldrb	r3, [r7, #20]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d016      	beq.n	8001048 <start_fill+0x518>
 800101a:	4b48      	ldr	r3, [pc, #288]	; (800113c <start_fill+0x60c>)
 800101c:	f993 3000 	ldrsb.w	r3, [r3]
 8001020:	4618      	mov	r0, r3
 8001022:	4b47      	ldr	r3, [pc, #284]	; (8001140 <start_fill+0x610>)
 8001024:	f993 3000 	ldrsb.w	r3, [r3]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	4946      	ldr	r1, [pc, #280]	; (8001144 <start_fill+0x614>)
 800102c:	4603      	mov	r3, r0
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4403      	add	r3, r0
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	440b      	add	r3, r1
 8001036:	4413      	add	r3, r2
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	f083 0301 	eor.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <start_fill+0x518>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <start_fill+0x51a>
 8001048:	2300      	movs	r3, #0
 800104a:	753b      	strb	r3, [r7, #20]
 800104c:	7d3b      	ldrb	r3, [r7, #20]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	753b      	strb	r3, [r7, #20]
				rightfree  = rightfree && !visited[y][x - 1];
 8001054:	7cfb      	ldrb	r3, [r7, #19]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d016      	beq.n	8001088 <start_fill+0x558>
 800105a:	4b38      	ldr	r3, [pc, #224]	; (800113c <start_fill+0x60c>)
 800105c:	f993 3000 	ldrsb.w	r3, [r3]
 8001060:	4618      	mov	r0, r3
 8001062:	4b37      	ldr	r3, [pc, #220]	; (8001140 <start_fill+0x610>)
 8001064:	f993 3000 	ldrsb.w	r3, [r3]
 8001068:	1e5a      	subs	r2, r3, #1
 800106a:	4936      	ldr	r1, [pc, #216]	; (8001144 <start_fill+0x614>)
 800106c:	4603      	mov	r3, r0
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4403      	add	r3, r0
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	440b      	add	r3, r1
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	f083 0301 	eor.w	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <start_fill+0x558>
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <start_fill+0x55a>
 8001088:	2300      	movs	r3, #0
 800108a:	74fb      	strb	r3, [r7, #19]
 800108c:	7cfb      	ldrb	r3, [r7, #19]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	74fb      	strb	r3, [r7, #19]
				break;
 8001094:	bf00      	nop
		if((leftfree && rightfree) || (leftfree && frontfree) || (rightfree && frontfree)){
 8001096:	7d3b      	ldrb	r3, [r7, #20]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <start_fill+0x572>
 800109c:	7cfb      	ldrb	r3, [r7, #19]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10d      	bne.n	80010be <start_fill+0x58e>
 80010a2:	7d3b      	ldrb	r3, [r7, #20]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <start_fill+0x57e>
 80010a8:	7d7b      	ldrb	r3, [r7, #21]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d107      	bne.n	80010be <start_fill+0x58e>
 80010ae:	7cfb      	ldrb	r3, [r7, #19]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80ca 	beq.w	800124a <start_fill+0x71a>
 80010b6:	7d7b      	ldrb	r3, [r7, #21]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80c6 	beq.w	800124a <start_fill+0x71a>
			i++;
 80010be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	3301      	adds	r3, #1
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	82fb      	strh	r3, [r7, #22]
			stack[i][1] = x;
 80010ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <start_fill+0x610>)
 80010d0:	f993 0000 	ldrsb.w	r0, [r3]
 80010d4:	491c      	ldr	r1, [pc, #112]	; (8001148 <start_fill+0x618>)
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	440b      	add	r3, r1
 80010de:	3301      	adds	r3, #1
 80010e0:	4602      	mov	r2, r0
 80010e2:	701a      	strb	r2, [r3, #0]
			stack[i][2] = y;
 80010e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <start_fill+0x60c>)
 80010ea:	f993 0000 	ldrsb.w	r0, [r3]
 80010ee:	4916      	ldr	r1, [pc, #88]	; (8001148 <start_fill+0x618>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	3302      	adds	r3, #2
 80010fa:	4602      	mov	r2, r0
 80010fc:	701a      	strb	r2, [r3, #0]
			if(direction == west){
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <start_fill+0x61c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d135      	bne.n	8001172 <start_fill+0x642>
				if(rightfree){
 8001106:	7cfb      	ldrb	r3, [r7, #19]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d023      	beq.n	8001154 <start_fill+0x624>
					stack[i][0] = turn_right_90;
 800110c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001110:	490d      	ldr	r1, [pc, #52]	; (8001148 <start_fill+0x618>)
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	440b      	add	r3, r1
 800111a:	22ff      	movs	r2, #255	; 0xff
 800111c:	701a      	strb	r2, [r3, #0]
					go_straight(WidthOESide, 1);
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <start_fill+0x620>)
 8001120:	2101      	movs	r1, #1
 8001122:	4618      	mov	r0, r3
 8001124:	f002 fe80 	bl	8003e28 <go_straight>
					turn_right90(&direction);
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <start_fill+0x61c>)
 800112a:	f002 fdb1 	bl	8003c90 <turn_right90>
					go_straight(WidthOESide, 0);
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <start_fill+0x620>)
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f002 fe78 	bl	8003e28 <go_straight>
			if(direction == west){
 8001138:	f001 b867 	b.w	800220a <start_fill+0x16da>
 800113c:	20000419 	.word	0x20000419
 8001140:	20000418 	.word	0x20000418
 8001144:	200005ac 	.word	0x200005ac
 8001148:	200002ec 	.word	0x200002ec
 800114c:	2000041a 	.word	0x2000041a
 8001150:	42c20000 	.word	0x42c20000
					stack[i][0] = straight;
 8001154:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001158:	499f      	ldr	r1, [pc, #636]	; (80013d8 <start_fill+0x8a8>)
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	440b      	add	r3, r1
 8001162:	22fa      	movs	r2, #250	; 0xfa
 8001164:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 8001166:	2100      	movs	r1, #0
 8001168:	489c      	ldr	r0, [pc, #624]	; (80013dc <start_fill+0x8ac>)
 800116a:	f002 fe5d 	bl	8003e28 <go_straight>
			if(direction == west){
 800116e:	f001 b84c 	b.w	800220a <start_fill+0x16da>
			} else if(direction == east){
 8001172:	4b9b      	ldr	r3, [pc, #620]	; (80013e0 <start_fill+0x8b0>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d133      	bne.n	80011e2 <start_fill+0x6b2>
				if(leftfree){
 800117a:	7d3b      	ldrb	r3, [r7, #20]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d021      	beq.n	80011c4 <start_fill+0x694>
					stack[i][0] = turn_left_90;
 8001180:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001184:	4994      	ldr	r1, [pc, #592]	; (80013d8 <start_fill+0x8a8>)
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	440b      	add	r3, r1
 800118e:	22fc      	movs	r2, #252	; 0xfc
 8001190:	701a      	strb	r2, [r3, #0]
					go_straight(WidthOESide + dbtWheels_c, 1);
 8001192:	4b94      	ldr	r3, [pc, #592]	; (80013e4 <start_fill+0x8b4>)
 8001194:	4994      	ldr	r1, [pc, #592]	; (80013e8 <start_fill+0x8b8>)
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fbc2 	bl	8000920 <__addsf3>
 800119c:	4603      	mov	r3, r0
 800119e:	2101      	movs	r1, #1
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 fe41 	bl	8003e28 <go_straight>
					turn_left90(&direction);
 80011a6:	488e      	ldr	r0, [pc, #568]	; (80013e0 <start_fill+0x8b0>)
 80011a8:	f002 fccc 	bl	8003b44 <turn_left90>
					go_straight(WidthOESide - dbtWheels_c, 0);
 80011ac:	4b8d      	ldr	r3, [pc, #564]	; (80013e4 <start_fill+0x8b4>)
 80011ae:	498e      	ldr	r1, [pc, #568]	; (80013e8 <start_fill+0x8b8>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fbb3 	bl	800091c <__aeabi_fsub>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 fe34 	bl	8003e28 <go_straight>
			if(direction == west){
 80011c0:	f001 b823 	b.w	800220a <start_fill+0x16da>
					stack[i][0] = straight;
 80011c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011c8:	4983      	ldr	r1, [pc, #524]	; (80013d8 <start_fill+0x8a8>)
 80011ca:	4613      	mov	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	22fa      	movs	r2, #250	; 0xfa
 80011d4:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 80011d6:	2100      	movs	r1, #0
 80011d8:	4880      	ldr	r0, [pc, #512]	; (80013dc <start_fill+0x8ac>)
 80011da:	f002 fe25 	bl	8003e28 <go_straight>
			if(direction == west){
 80011de:	f001 b814 	b.w	800220a <start_fill+0x16da>
				if(frontfree){
 80011e2:	7d7b      	ldrb	r3, [r7, #21]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00e      	beq.n	8001206 <start_fill+0x6d6>
					stack[i][0] = straight;
 80011e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011ec:	497a      	ldr	r1, [pc, #488]	; (80013d8 <start_fill+0x8a8>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	22fa      	movs	r2, #250	; 0xfa
 80011f8:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 80011fa:	2100      	movs	r1, #0
 80011fc:	4877      	ldr	r0, [pc, #476]	; (80013dc <start_fill+0x8ac>)
 80011fe:	f002 fe13 	bl	8003e28 <go_straight>
			if(direction == west){
 8001202:	f001 b802 	b.w	800220a <start_fill+0x16da>
					stack[i][0] = turn_left_90;
 8001206:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800120a:	4973      	ldr	r1, [pc, #460]	; (80013d8 <start_fill+0x8a8>)
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	440b      	add	r3, r1
 8001214:	22fc      	movs	r2, #252	; 0xfc
 8001216:	701a      	strb	r2, [r3, #0]
					go_straight(WidthOESide + dbtWheels_c, 1);
 8001218:	4b72      	ldr	r3, [pc, #456]	; (80013e4 <start_fill+0x8b4>)
 800121a:	4973      	ldr	r1, [pc, #460]	; (80013e8 <start_fill+0x8b8>)
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fb7f 	bl	8000920 <__addsf3>
 8001222:	4603      	mov	r3, r0
 8001224:	2101      	movs	r1, #1
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fdfe 	bl	8003e28 <go_straight>
					turn_left90(&direction);
 800122c:	486c      	ldr	r0, [pc, #432]	; (80013e0 <start_fill+0x8b0>)
 800122e:	f002 fc89 	bl	8003b44 <turn_left90>
					go_straight(WidthOESide - dbtWheels_c, 0);
 8001232:	4b6c      	ldr	r3, [pc, #432]	; (80013e4 <start_fill+0x8b4>)
 8001234:	496c      	ldr	r1, [pc, #432]	; (80013e8 <start_fill+0x8b8>)
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fb70 	bl	800091c <__aeabi_fsub>
 800123c:	4603      	mov	r3, r0
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f002 fdf1 	bl	8003e28 <go_straight>
			if(direction == west){
 8001246:	f000 bfe0 	b.w	800220a <start_fill+0x16da>
		} else if(leftfree || rightfree || frontfree){
 800124a:	7d3b      	ldrb	r3, [r7, #20]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d106      	bne.n	800125e <start_fill+0x72e>
 8001250:	7cfb      	ldrb	r3, [r7, #19]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d103      	bne.n	800125e <start_fill+0x72e>
 8001256:	7d7b      	ldrb	r3, [r7, #21]
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 80c7 	beq.w	80013ec <start_fill+0x8bc>
			if(frontfree){
 800125e:	7d7b      	ldrb	r3, [r7, #21]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d058      	beq.n	8001316 <start_fill+0x7e6>
				if(stack[i][0] == straight && stack[i][1] == -1){
 8001264:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001268:	495b      	ldr	r1, [pc, #364]	; (80013d8 <start_fill+0x8a8>)
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	440b      	add	r3, r1
 8001272:	f993 3000 	ldrsb.w	r3, [r3]
 8001276:	f113 0f06 	cmn.w	r3, #6
 800127a:	d123      	bne.n	80012c4 <start_fill+0x794>
 800127c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001280:	4955      	ldr	r1, [pc, #340]	; (80013d8 <start_fill+0x8a8>)
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	440b      	add	r3, r1
 800128a:	3301      	adds	r3, #1
 800128c:	f993 3000 	ldrsb.w	r3, [r3]
 8001290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001294:	d116      	bne.n	80012c4 <start_fill+0x794>
					stack[i][2]++;
 8001296:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800129a:	494f      	ldr	r1, [pc, #316]	; (80013d8 <start_fill+0x8a8>)
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	3302      	adds	r3, #2
 80012a6:	f993 3000 	ldrsb.w	r3, [r3]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	3301      	adds	r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	b258      	sxtb	r0, r3
 80012b2:	4949      	ldr	r1, [pc, #292]	; (80013d8 <start_fill+0x8a8>)
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	3302      	adds	r3, #2
 80012be:	4602      	mov	r2, r0
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e022      	b.n	800130a <start_fill+0x7da>
					i++;
 80012c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	3301      	adds	r3, #1
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	82fb      	strh	r3, [r7, #22]
					stack[i][0] = straight;
 80012d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80012d4:	4940      	ldr	r1, [pc, #256]	; (80013d8 <start_fill+0x8a8>)
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	440b      	add	r3, r1
 80012de:	22fa      	movs	r2, #250	; 0xfa
 80012e0:	701a      	strb	r2, [r3, #0]
					stack[i][1] = -1;
 80012e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80012e6:	493c      	ldr	r1, [pc, #240]	; (80013d8 <start_fill+0x8a8>)
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	3301      	adds	r3, #1
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 80012f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80012fa:	4937      	ldr	r1, [pc, #220]	; (80013d8 <start_fill+0x8a8>)
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	440b      	add	r3, r1
 8001304:	3302      	adds	r3, #2
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
				go_straight(square_size, 0);
 800130a:	2100      	movs	r1, #0
 800130c:	4833      	ldr	r0, [pc, #204]	; (80013dc <start_fill+0x8ac>)
 800130e:	f002 fd8b 	bl	8003e28 <go_straight>
			if(frontfree){
 8001312:	f000 bf6d 	b.w	80021f0 <start_fill+0x16c0>
			} else if(leftfree){
 8001316:	7d3b      	ldrb	r3, [r7, #20]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d031      	beq.n	8001380 <start_fill+0x850>
				i++;
 800131c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001320:	b29b      	uxth	r3, r3
 8001322:	3301      	adds	r3, #1
 8001324:	b29b      	uxth	r3, r3
 8001326:	82fb      	strh	r3, [r7, #22]
				stack[i][0] = turn_left_90;
 8001328:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800132c:	492a      	ldr	r1, [pc, #168]	; (80013d8 <start_fill+0x8a8>)
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	440b      	add	r3, r1
 8001336:	22fc      	movs	r2, #252	; 0xfc
 8001338:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 800133a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800133e:	4926      	ldr	r1, [pc, #152]	; (80013d8 <start_fill+0x8a8>)
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	440b      	add	r3, r1
 8001348:	3301      	adds	r3, #1
 800134a:	22ff      	movs	r2, #255	; 0xff
 800134c:	701a      	strb	r2, [r3, #0]
				go_straight(WidthOESide + dbtWheels_c, 1);
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <start_fill+0x8b4>)
 8001350:	4925      	ldr	r1, [pc, #148]	; (80013e8 <start_fill+0x8b8>)
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fae4 	bl	8000920 <__addsf3>
 8001358:	4603      	mov	r3, r0
 800135a:	2101      	movs	r1, #1
 800135c:	4618      	mov	r0, r3
 800135e:	f002 fd63 	bl	8003e28 <go_straight>
				turn_left90(&direction);
 8001362:	481f      	ldr	r0, [pc, #124]	; (80013e0 <start_fill+0x8b0>)
 8001364:	f002 fbee 	bl	8003b44 <turn_left90>
				go_straight(WidthOESide - dbtWheels_c, 0);
 8001368:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <start_fill+0x8b4>)
 800136a:	491f      	ldr	r1, [pc, #124]	; (80013e8 <start_fill+0x8b8>)
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fad5 	bl	800091c <__aeabi_fsub>
 8001372:	4603      	mov	r3, r0
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f002 fd56 	bl	8003e28 <go_straight>
			if(frontfree){
 800137c:	f000 bf38 	b.w	80021f0 <start_fill+0x16c0>
			} else if(rightfree){
 8001380:	7cfb      	ldrb	r3, [r7, #19]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8734 	beq.w	80021f0 <start_fill+0x16c0>
				i++;
 8001388:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800138c:	b29b      	uxth	r3, r3
 800138e:	3301      	adds	r3, #1
 8001390:	b29b      	uxth	r3, r3
 8001392:	82fb      	strh	r3, [r7, #22]
				stack[i][0] = turn_right_90;
 8001394:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001398:	490f      	ldr	r1, [pc, #60]	; (80013d8 <start_fill+0x8a8>)
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	22ff      	movs	r2, #255	; 0xff
 80013a4:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 80013a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80013aa:	490b      	ldr	r1, [pc, #44]	; (80013d8 <start_fill+0x8a8>)
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	3301      	adds	r3, #1
 80013b6:	22ff      	movs	r2, #255	; 0xff
 80013b8:	701a      	strb	r2, [r3, #0]
				go_straight(WidthOESide, 1);
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <start_fill+0x8b4>)
 80013bc:	2101      	movs	r1, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 fd32 	bl	8003e28 <go_straight>
				turn_right90(&direction);
 80013c4:	4806      	ldr	r0, [pc, #24]	; (80013e0 <start_fill+0x8b0>)
 80013c6:	f002 fc63 	bl	8003c90 <turn_right90>
				go_straight(WidthOESide, 0);
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <start_fill+0x8b4>)
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fd2a 	bl	8003e28 <go_straight>
			if(frontfree){
 80013d4:	f000 bf0c 	b.w	80021f0 <start_fill+0x16c0>
 80013d8:	200002ec 	.word	0x200002ec
 80013dc:	43960000 	.word	0x43960000
 80013e0:	2000041a 	.word	0x2000041a
 80013e4:	42c20000 	.word	0x42c20000
 80013e8:	42400000 	.word	0x42400000
			go_straight(WidthOESide, 1);
 80013ec:	4bbb      	ldr	r3, [pc, #748]	; (80016dc <start_fill+0xbac>)
 80013ee:	2101      	movs	r1, #1
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 fd19 	bl	8003e28 <go_straight>
			u_turnf(&direction);
 80013f6:	48ba      	ldr	r0, [pc, #744]	; (80016e0 <start_fill+0xbb0>)
 80013f8:	f002 fab6 	bl	8003968 <u_turnf>
			go_straight(WidthOESide, 0);
 80013fc:	4bb7      	ldr	r3, [pc, #732]	; (80016dc <start_fill+0xbac>)
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f002 fd11 	bl	8003e28 <go_straight>
			if(stack[i][1] != -1 &&
 8001406:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800140a:	49b6      	ldr	r1, [pc, #728]	; (80016e4 <start_fill+0xbb4>)
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	440b      	add	r3, r1
 8001414:	3301      	adds	r3, #1
 8001416:	f993 3000 	ldrsb.w	r3, [r3]
 800141a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141e:	f000 82b3 	beq.w	8001988 <start_fill+0xe58>
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001422:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001426:	49af      	ldr	r1, [pc, #700]	; (80016e4 <start_fill+0xbb4>)
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	440b      	add	r3, r1
 8001430:	3302      	adds	r3, #2
 8001432:	f993 3000 	ldrsb.w	r3, [r3]
 8001436:	4618      	mov	r0, r3
 8001438:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800143c:	49a9      	ldr	r1, [pc, #676]	; (80016e4 <start_fill+0xbb4>)
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	440b      	add	r3, r1
 8001446:	3301      	adds	r3, #1
 8001448:	f993 3000 	ldrsb.w	r3, [r3]
 800144c:	4619      	mov	r1, r3
 800144e:	4aa6      	ldr	r2, [pc, #664]	; (80016e8 <start_fill+0xbb8>)
 8001450:	4603      	mov	r3, r0
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4403      	add	r3, r0
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	440b      	add	r3, r1
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	f003 0308 	and.w	r3, r3, #8
			if(stack[i][1] != -1 &&
 8001462:	2b00      	cmp	r3, #0
 8001464:	d120      	bne.n	80014a8 <start_fill+0x978>
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001466:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800146a:	499e      	ldr	r1, [pc, #632]	; (80016e4 <start_fill+0xbb4>)
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	440b      	add	r3, r1
 8001474:	3302      	adds	r3, #2
 8001476:	f993 3000 	ldrsb.w	r3, [r3]
 800147a:	4618      	mov	r0, r3
 800147c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001480:	4998      	ldr	r1, [pc, #608]	; (80016e4 <start_fill+0xbb4>)
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	440b      	add	r3, r1
 800148a:	3301      	adds	r3, #1
 800148c:	f993 3000 	ldrsb.w	r3, [r3]
 8001490:	1e5a      	subs	r2, r3, #1
 8001492:	4996      	ldr	r1, [pc, #600]	; (80016ec <start_fill+0xbbc>)
 8001494:	4603      	mov	r3, r0
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4403      	add	r3, r0
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	440b      	add	r3, r1
 800149e:	4413      	add	r3, r2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 8270 	beq.w	8001988 <start_fill+0xe58>
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80014a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014ac:	498d      	ldr	r1, [pc, #564]	; (80016e4 <start_fill+0xbb4>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	440b      	add	r3, r1
 80014b6:	3302      	adds	r3, #2
 80014b8:	f993 3000 	ldrsb.w	r3, [r3]
 80014bc:	4618      	mov	r0, r3
 80014be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014c2:	4988      	ldr	r1, [pc, #544]	; (80016e4 <start_fill+0xbb4>)
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	3301      	adds	r3, #1
 80014ce:	f993 3000 	ldrsb.w	r3, [r3]
 80014d2:	4619      	mov	r1, r3
 80014d4:	4a84      	ldr	r2, [pc, #528]	; (80016e8 <start_fill+0xbb8>)
 80014d6:	4603      	mov	r3, r0
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4403      	add	r3, r0
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d120      	bne.n	800152e <start_fill+0x9fe>
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80014ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014f0:	497c      	ldr	r1, [pc, #496]	; (80016e4 <start_fill+0xbb4>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	3302      	adds	r3, #2
 80014fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001500:	4618      	mov	r0, r3
 8001502:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001506:	4977      	ldr	r1, [pc, #476]	; (80016e4 <start_fill+0xbb4>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	440b      	add	r3, r1
 8001510:	3301      	adds	r3, #1
 8001512:	f993 3000 	ldrsb.w	r3, [r3]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	4974      	ldr	r1, [pc, #464]	; (80016ec <start_fill+0xbbc>)
 800151a:	4603      	mov	r3, r0
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4403      	add	r3, r0
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	440b      	add	r3, r1
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 822d 	beq.w	8001988 <start_fill+0xe58>
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 800152e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001532:	496c      	ldr	r1, [pc, #432]	; (80016e4 <start_fill+0xbb4>)
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	440b      	add	r3, r1
 800153c:	3302      	adds	r3, #2
 800153e:	f993 3000 	ldrsb.w	r3, [r3]
 8001542:	4618      	mov	r0, r3
 8001544:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001548:	4966      	ldr	r1, [pc, #408]	; (80016e4 <start_fill+0xbb4>)
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	440b      	add	r3, r1
 8001552:	3301      	adds	r3, #1
 8001554:	f993 3000 	ldrsb.w	r3, [r3]
 8001558:	4619      	mov	r1, r3
 800155a:	4a63      	ldr	r2, [pc, #396]	; (80016e8 <start_fill+0xbb8>)
 800155c:	4603      	mov	r3, r0
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4403      	add	r3, r0
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	440b      	add	r3, r1
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 800156e:	2b00      	cmp	r3, #0
 8001570:	d120      	bne.n	80015b4 <start_fill+0xa84>
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001572:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001576:	495b      	ldr	r1, [pc, #364]	; (80016e4 <start_fill+0xbb4>)
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	440b      	add	r3, r1
 8001580:	3302      	adds	r3, #2
 8001582:	f993 3000 	ldrsb.w	r3, [r3]
 8001586:	1e5a      	subs	r2, r3, #1
 8001588:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800158c:	4855      	ldr	r0, [pc, #340]	; (80016e4 <start_fill+0xbb4>)
 800158e:	460b      	mov	r3, r1
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	440b      	add	r3, r1
 8001594:	4403      	add	r3, r0
 8001596:	3301      	adds	r3, #1
 8001598:	f993 3000 	ldrsb.w	r3, [r3]
 800159c:	4618      	mov	r0, r3
 800159e:	4953      	ldr	r1, [pc, #332]	; (80016ec <start_fill+0xbbc>)
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	440b      	add	r3, r1
 80015aa:	4403      	add	r3, r0
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 81ea 	beq.w	8001988 <start_fill+0xe58>
					((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 80015b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015b8:	494a      	ldr	r1, [pc, #296]	; (80016e4 <start_fill+0xbb4>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	3302      	adds	r3, #2
 80015c4:	f993 3000 	ldrsb.w	r3, [r3]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015ce:	4945      	ldr	r1, [pc, #276]	; (80016e4 <start_fill+0xbb4>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	3301      	adds	r3, #1
 80015da:	f993 3000 	ldrsb.w	r3, [r3]
 80015de:	4619      	mov	r1, r3
 80015e0:	4a41      	ldr	r2, [pc, #260]	; (80016e8 <start_fill+0xbb8>)
 80015e2:	4603      	mov	r3, r0
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4403      	add	r3, r0
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	f003 0301 	and.w	r3, r3, #1
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d120      	bne.n	800163a <start_fill+0xb0a>
					((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 80015f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015fc:	4939      	ldr	r1, [pc, #228]	; (80016e4 <start_fill+0xbb4>)
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	440b      	add	r3, r1
 8001606:	3302      	adds	r3, #2
 8001608:	f993 3000 	ldrsb.w	r3, [r3]
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001612:	4834      	ldr	r0, [pc, #208]	; (80016e4 <start_fill+0xbb4>)
 8001614:	460b      	mov	r3, r1
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	440b      	add	r3, r1
 800161a:	4403      	add	r3, r0
 800161c:	3301      	adds	r3, #1
 800161e:	f993 3000 	ldrsb.w	r3, [r3]
 8001622:	4618      	mov	r0, r3
 8001624:	4931      	ldr	r1, [pc, #196]	; (80016ec <start_fill+0xbbc>)
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	440b      	add	r3, r1
 8001630:	4403      	add	r3, r0
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 81a7 	beq.w	8001988 <start_fill+0xe58>
				stack[i][1] = -1;
 800163a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800163e:	4929      	ldr	r1, [pc, #164]	; (80016e4 <start_fill+0xbb4>)
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	440b      	add	r3, r1
 8001648:	3301      	adds	r3, #1
 800164a:	22ff      	movs	r2, #255	; 0xff
 800164c:	701a      	strb	r2, [r3, #0]
				stack[i][2] = 1;
 800164e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001652:	4924      	ldr	r1, [pc, #144]	; (80016e4 <start_fill+0xbb4>)
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	440b      	add	r3, r1
 800165c:	3302      	adds	r3, #2
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
			while(stack[i][1] == -1){
 8001662:	e191      	b.n	8001988 <start_fill+0xe58>
				switch(stack[i][0]){
 8001664:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001668:	491e      	ldr	r1, [pc, #120]	; (80016e4 <start_fill+0xbb4>)
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	440b      	add	r3, r1
 8001672:	f993 3000 	ldrsb.w	r3, [r3]
 8001676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167a:	d03b      	beq.n	80016f4 <start_fill+0xbc4>
 800167c:	2b00      	cmp	r3, #0
 800167e:	da51      	bge.n	8001724 <start_fill+0xbf4>
 8001680:	f113 0f06 	cmn.w	r3, #6
 8001684:	d003      	beq.n	800168e <start_fill+0xb5e>
 8001686:	f113 0f04 	cmn.w	r3, #4
 800168a:	d018      	beq.n	80016be <start_fill+0xb8e>
 800168c:	e04a      	b.n	8001724 <start_fill+0xbf4>
						go_straight((float)stack[i][2] * square_size, 0);
 800168e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001692:	4914      	ldr	r1, [pc, #80]	; (80016e4 <start_fill+0xbb4>)
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	440b      	add	r3, r1
 800169c:	3302      	adds	r3, #2
 800169e:	f993 3000 	ldrsb.w	r3, [r3]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff f9f0 	bl	8000a88 <__aeabi_i2f>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4911      	ldr	r1, [pc, #68]	; (80016f0 <start_fill+0xbc0>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe fe79 	bl	80003a4 <__aeabi_fmul>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 fbb6 	bl	8003e28 <go_straight>
						break;
 80016bc:	e032      	b.n	8001724 <start_fill+0xbf4>
						go_straight(WidthOESide, 1);
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <start_fill+0xbac>)
 80016c0:	2101      	movs	r1, #1
 80016c2:	4618      	mov	r0, r3
 80016c4:	f002 fbb0 	bl	8003e28 <go_straight>
						turn_right90(&direction);
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <start_fill+0xbb0>)
 80016ca:	f002 fae1 	bl	8003c90 <turn_right90>
						go_straight(WidthOESide, 0);
 80016ce:	4b03      	ldr	r3, [pc, #12]	; (80016dc <start_fill+0xbac>)
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 fba8 	bl	8003e28 <go_straight>
						break;
 80016d8:	e024      	b.n	8001724 <start_fill+0xbf4>
 80016da:	bf00      	nop
 80016dc:	42c20000 	.word	0x42c20000
 80016e0:	2000041a 	.word	0x2000041a
 80016e4:	200002ec 	.word	0x200002ec
 80016e8:	20000548 	.word	0x20000548
 80016ec:	200005ac 	.word	0x200005ac
 80016f0:	43960000 	.word	0x43960000
						go_straight(WidthOESide + dbtWheels_c, 1);
 80016f4:	4bbf      	ldr	r3, [pc, #764]	; (80019f4 <start_fill+0xec4>)
 80016f6:	49c0      	ldr	r1, [pc, #768]	; (80019f8 <start_fill+0xec8>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff f911 	bl	8000920 <__addsf3>
 80016fe:	4603      	mov	r3, r0
 8001700:	2101      	movs	r1, #1
 8001702:	4618      	mov	r0, r3
 8001704:	f002 fb90 	bl	8003e28 <go_straight>
						turn_left90(&direction);
 8001708:	48bc      	ldr	r0, [pc, #752]	; (80019fc <start_fill+0xecc>)
 800170a:	f002 fa1b 	bl	8003b44 <turn_left90>
						go_straight(WidthOESide - dbtWheels_c, 0);
 800170e:	4bb9      	ldr	r3, [pc, #740]	; (80019f4 <start_fill+0xec4>)
 8001710:	49b9      	ldr	r1, [pc, #740]	; (80019f8 <start_fill+0xec8>)
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f902 	bl	800091c <__aeabi_fsub>
 8001718:	4603      	mov	r3, r0
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f002 fb83 	bl	8003e28 <go_straight>
						break;
 8001722:	bf00      	nop
				i--;
 8001724:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001728:	b29b      	uxth	r3, r3
 800172a:	3b01      	subs	r3, #1
 800172c:	b29b      	uxth	r3, r3
 800172e:	82fb      	strh	r3, [r7, #22]
				if(stack[i][1] != -1 &&
 8001730:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001734:	49b2      	ldr	r1, [pc, #712]	; (8001a00 <start_fill+0xed0>)
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	440b      	add	r3, r1
 800173e:	3301      	adds	r3, #1
 8001740:	f993 3000 	ldrsb.w	r3, [r3]
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001748:	f000 811e 	beq.w	8001988 <start_fill+0xe58>
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 800174c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001750:	49ab      	ldr	r1, [pc, #684]	; (8001a00 <start_fill+0xed0>)
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	440b      	add	r3, r1
 800175a:	3302      	adds	r3, #2
 800175c:	f993 3000 	ldrsb.w	r3, [r3]
 8001760:	4618      	mov	r0, r3
 8001762:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001766:	49a6      	ldr	r1, [pc, #664]	; (8001a00 <start_fill+0xed0>)
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	440b      	add	r3, r1
 8001770:	3301      	adds	r3, #1
 8001772:	f993 3000 	ldrsb.w	r3, [r3]
 8001776:	4619      	mov	r1, r3
 8001778:	4aa2      	ldr	r2, [pc, #648]	; (8001a04 <start_fill+0xed4>)
 800177a:	4603      	mov	r3, r0
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4403      	add	r3, r0
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	440b      	add	r3, r1
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
				if(stack[i][1] != -1 &&
 800178c:	2b00      	cmp	r3, #0
 800178e:	d120      	bne.n	80017d2 <start_fill+0xca2>
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001790:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001794:	499a      	ldr	r1, [pc, #616]	; (8001a00 <start_fill+0xed0>)
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	440b      	add	r3, r1
 800179e:	3302      	adds	r3, #2
 80017a0:	f993 3000 	ldrsb.w	r3, [r3]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017aa:	4995      	ldr	r1, [pc, #596]	; (8001a00 <start_fill+0xed0>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	3301      	adds	r3, #1
 80017b6:	f993 3000 	ldrsb.w	r3, [r3]
 80017ba:	1e5a      	subs	r2, r3, #1
 80017bc:	4992      	ldr	r1, [pc, #584]	; (8001a08 <start_fill+0xed8>)
 80017be:	4603      	mov	r3, r0
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4403      	add	r3, r0
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	440b      	add	r3, r1
 80017c8:	4413      	add	r3, r2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80db 	beq.w	8001988 <start_fill+0xe58>
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80017d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017d6:	498a      	ldr	r1, [pc, #552]	; (8001a00 <start_fill+0xed0>)
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	440b      	add	r3, r1
 80017e0:	3302      	adds	r3, #2
 80017e2:	f993 3000 	ldrsb.w	r3, [r3]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017ec:	4984      	ldr	r1, [pc, #528]	; (8001a00 <start_fill+0xed0>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	3301      	adds	r3, #1
 80017f8:	f993 3000 	ldrsb.w	r3, [r3]
 80017fc:	4619      	mov	r1, r3
 80017fe:	4a81      	ldr	r2, [pc, #516]	; (8001a04 <start_fill+0xed4>)
 8001800:	4603      	mov	r3, r0
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4403      	add	r3, r0
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	440b      	add	r3, r1
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	f003 0304 	and.w	r3, r3, #4
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001812:	2b00      	cmp	r3, #0
 8001814:	d120      	bne.n	8001858 <start_fill+0xd28>
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001816:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800181a:	4979      	ldr	r1, [pc, #484]	; (8001a00 <start_fill+0xed0>)
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	440b      	add	r3, r1
 8001824:	3302      	adds	r3, #2
 8001826:	f993 3000 	ldrsb.w	r3, [r3]
 800182a:	4618      	mov	r0, r3
 800182c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001830:	4973      	ldr	r1, [pc, #460]	; (8001a00 <start_fill+0xed0>)
 8001832:	4613      	mov	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4413      	add	r3, r2
 8001838:	440b      	add	r3, r1
 800183a:	3301      	adds	r3, #1
 800183c:	f993 3000 	ldrsb.w	r3, [r3]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	4971      	ldr	r1, [pc, #452]	; (8001a08 <start_fill+0xed8>)
 8001844:	4603      	mov	r3, r0
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4403      	add	r3, r0
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	440b      	add	r3, r1
 800184e:	4413      	add	r3, r2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 8098 	beq.w	8001988 <start_fill+0xe58>
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001858:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800185c:	4968      	ldr	r1, [pc, #416]	; (8001a00 <start_fill+0xed0>)
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	440b      	add	r3, r1
 8001866:	3302      	adds	r3, #2
 8001868:	f993 3000 	ldrsb.w	r3, [r3]
 800186c:	4618      	mov	r0, r3
 800186e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001872:	4963      	ldr	r1, [pc, #396]	; (8001a00 <start_fill+0xed0>)
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	440b      	add	r3, r1
 800187c:	3301      	adds	r3, #1
 800187e:	f993 3000 	ldrsb.w	r3, [r3]
 8001882:	4619      	mov	r1, r3
 8001884:	4a5f      	ldr	r2, [pc, #380]	; (8001a04 <start_fill+0xed4>)
 8001886:	4603      	mov	r3, r0
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4403      	add	r3, r0
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	440b      	add	r3, r1
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001898:	2b00      	cmp	r3, #0
 800189a:	d11f      	bne.n	80018dc <start_fill+0xdac>
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 800189c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018a0:	4957      	ldr	r1, [pc, #348]	; (8001a00 <start_fill+0xed0>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	3302      	adds	r3, #2
 80018ac:	f993 3000 	ldrsb.w	r3, [r3]
 80018b0:	1e5a      	subs	r2, r3, #1
 80018b2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80018b6:	4852      	ldr	r0, [pc, #328]	; (8001a00 <start_fill+0xed0>)
 80018b8:	460b      	mov	r3, r1
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	440b      	add	r3, r1
 80018be:	4403      	add	r3, r0
 80018c0:	3301      	adds	r3, #1
 80018c2:	f993 3000 	ldrsb.w	r3, [r3]
 80018c6:	4618      	mov	r0, r3
 80018c8:	494f      	ldr	r1, [pc, #316]	; (8001a08 <start_fill+0xed8>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	440b      	add	r3, r1
 80018d4:	4403      	add	r3, r0
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d055      	beq.n	8001988 <start_fill+0xe58>
						((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 80018dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018e0:	4947      	ldr	r1, [pc, #284]	; (8001a00 <start_fill+0xed0>)
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	3302      	adds	r3, #2
 80018ec:	f993 3000 	ldrsb.w	r3, [r3]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018f6:	4942      	ldr	r1, [pc, #264]	; (8001a00 <start_fill+0xed0>)
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	440b      	add	r3, r1
 8001900:	3301      	adds	r3, #1
 8001902:	f993 3000 	ldrsb.w	r3, [r3]
 8001906:	4619      	mov	r1, r3
 8001908:	4a3e      	ldr	r2, [pc, #248]	; (8001a04 <start_fill+0xed4>)
 800190a:	4603      	mov	r3, r0
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4403      	add	r3, r0
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	440b      	add	r3, r1
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	f003 0301 	and.w	r3, r3, #1
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 800191c:	2b00      	cmp	r3, #0
 800191e:	d11f      	bne.n	8001960 <start_fill+0xe30>
						((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001920:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001924:	4936      	ldr	r1, [pc, #216]	; (8001a00 <start_fill+0xed0>)
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	440b      	add	r3, r1
 800192e:	3302      	adds	r3, #2
 8001930:	f993 3000 	ldrsb.w	r3, [r3]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800193a:	4831      	ldr	r0, [pc, #196]	; (8001a00 <start_fill+0xed0>)
 800193c:	460b      	mov	r3, r1
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	440b      	add	r3, r1
 8001942:	4403      	add	r3, r0
 8001944:	3301      	adds	r3, #1
 8001946:	f993 3000 	ldrsb.w	r3, [r3]
 800194a:	4618      	mov	r0, r3
 800194c:	492e      	ldr	r1, [pc, #184]	; (8001a08 <start_fill+0xed8>)
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	4403      	add	r3, r0
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d013      	beq.n	8001988 <start_fill+0xe58>
					stack[i][1] = -1;
 8001960:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001964:	4926      	ldr	r1, [pc, #152]	; (8001a00 <start_fill+0xed0>)
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	440b      	add	r3, r1
 800196e:	3301      	adds	r3, #1
 8001970:	22ff      	movs	r2, #255	; 0xff
 8001972:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 8001974:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001978:	4921      	ldr	r1, [pc, #132]	; (8001a00 <start_fill+0xed0>)
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	440b      	add	r3, r1
 8001982:	3302      	adds	r3, #2
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
			while(stack[i][1] == -1){
 8001988:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800198c:	491c      	ldr	r1, [pc, #112]	; (8001a00 <start_fill+0xed0>)
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	440b      	add	r3, r1
 8001996:	3301      	adds	r3, #1
 8001998:	f993 3000 	ldrsb.w	r3, [r3]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	f43f ae60 	beq.w	8001664 <start_fill+0xb34>
			x = stack[i][1];
 80019a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019a8:	4915      	ldr	r1, [pc, #84]	; (8001a00 <start_fill+0xed0>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	3301      	adds	r3, #1
 80019b4:	f993 2000 	ldrsb.w	r2, [r3]
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <start_fill+0xedc>)
 80019ba:	701a      	strb	r2, [r3, #0]
			y = stack[i][2];
 80019bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019c0:	490f      	ldr	r1, [pc, #60]	; (8001a00 <start_fill+0xed0>)
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	3302      	adds	r3, #2
 80019cc:	f993 2000 	ldrsb.w	r2, [r3]
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <start_fill+0xee0>)
 80019d2:	701a      	strb	r2, [r3, #0]
			switch(direction){
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <start_fill+0xecc>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	f63f a902 	bhi.w	8000be2 <start_fill+0xb2>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <start_fill+0xeb4>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	08001a15 	.word	0x08001a15
 80019e8:	08001b85 	.word	0x08001b85
 80019ec:	08001d19 	.word	0x08001d19
 80019f0:	08001e89 	.word	0x08001e89
 80019f4:	42c20000 	.word	0x42c20000
 80019f8:	42400000 	.word	0x42400000
 80019fc:	2000041a 	.word	0x2000041a
 8001a00:	200002ec 	.word	0x200002ec
 8001a04:	20000548 	.word	0x20000548
 8001a08:	200005ac 	.word	0x200005ac
 8001a0c:	20000418 	.word	0x20000418
 8001a10:	20000419 	.word	0x20000419
					if(stack[i][0] == straight){
 8001a14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a18:	49b6      	ldr	r1, [pc, #728]	; (8001cf4 <start_fill+0x11c4>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	f993 3000 	ldrsb.w	r3, [r3]
 8001a26:	f113 0f06 	cmn.w	r3, #6
 8001a2a:	f040 808c 	bne.w	8001b46 <start_fill+0x1016>
						if((maze[y][x] & top_wall) == 0 && !visited[y - 1][x]){
 8001a2e:	4bb2      	ldr	r3, [pc, #712]	; (8001cf8 <start_fill+0x11c8>)
 8001a30:	f993 3000 	ldrsb.w	r3, [r3]
 8001a34:	4619      	mov	r1, r3
 8001a36:	4bb1      	ldr	r3, [pc, #708]	; (8001cfc <start_fill+0x11cc>)
 8001a38:	f993 3000 	ldrsb.w	r3, [r3]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	4ab0      	ldr	r2, [pc, #704]	; (8001d00 <start_fill+0x11d0>)
 8001a40:	460b      	mov	r3, r1
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	4403      	add	r3, r0
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d12b      	bne.n	8001aae <start_fill+0xf7e>
 8001a56:	4ba8      	ldr	r3, [pc, #672]	; (8001cf8 <start_fill+0x11c8>)
 8001a58:	f993 3000 	ldrsb.w	r3, [r3]
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	4ba7      	ldr	r3, [pc, #668]	; (8001cfc <start_fill+0x11cc>)
 8001a60:	f993 3000 	ldrsb.w	r3, [r3]
 8001a64:	4618      	mov	r0, r3
 8001a66:	49a7      	ldr	r1, [pc, #668]	; (8001d04 <start_fill+0x11d4>)
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	440b      	add	r3, r1
 8001a72:	4403      	add	r3, r0
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	f083 0301 	eor.w	r3, r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d016      	beq.n	8001aae <start_fill+0xf7e>
							stack[i][0] = turn_left_90;
 8001a80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a84:	499b      	ldr	r1, [pc, #620]	; (8001cf4 <start_fill+0x11c4>)
 8001a86:	4613      	mov	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	22fc      	movs	r2, #252	; 0xfc
 8001a90:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 8001a92:	4b9d      	ldr	r3, [pc, #628]	; (8001d08 <start_fill+0x11d8>)
 8001a94:	2101      	movs	r1, #1
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 f9c6 	bl	8003e28 <go_straight>
							turn_right90(&direction);
 8001a9c:	489b      	ldr	r0, [pc, #620]	; (8001d0c <start_fill+0x11dc>)
 8001a9e:	f002 f8f7 	bl	8003c90 <turn_right90>
							go_straight(WidthOESide, 0);
 8001aa2:	4b99      	ldr	r3, [pc, #612]	; (8001d08 <start_fill+0x11d8>)
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 f9be 	bl	8003e28 <go_straight>
					break;
 8001aac:	e3a3      	b.n	80021f6 <start_fill+0x16c6>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8001aae:	4b92      	ldr	r3, [pc, #584]	; (8001cf8 <start_fill+0x11c8>)
 8001ab0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4b91      	ldr	r3, [pc, #580]	; (8001cfc <start_fill+0x11cc>)
 8001ab8:	f993 3000 	ldrsb.w	r3, [r3]
 8001abc:	4618      	mov	r0, r3
 8001abe:	4a90      	ldr	r2, [pc, #576]	; (8001d00 <start_fill+0x11d0>)
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	4403      	add	r3, r0
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 838f 	bne.w	80021f6 <start_fill+0x16c6>
 8001ad8:	4b87      	ldr	r3, [pc, #540]	; (8001cf8 <start_fill+0x11c8>)
 8001ada:	f993 3000 	ldrsb.w	r3, [r3]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	4b86      	ldr	r3, [pc, #536]	; (8001cfc <start_fill+0x11cc>)
 8001ae2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	4986      	ldr	r1, [pc, #536]	; (8001d04 <start_fill+0x11d4>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	440b      	add	r3, r1
 8001af4:	4403      	add	r3, r0
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	f083 0301 	eor.w	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8379 	beq.w	80021f6 <start_fill+0x16c6>
							stack[i][0] = turn_right_90;
 8001b04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b08:	497a      	ldr	r1, [pc, #488]	; (8001cf4 <start_fill+0x11c4>)
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	22ff      	movs	r2, #255	; 0xff
 8001b14:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 8001b16:	4b7c      	ldr	r3, [pc, #496]	; (8001d08 <start_fill+0x11d8>)
 8001b18:	497d      	ldr	r1, [pc, #500]	; (8001d10 <start_fill+0x11e0>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe ff00 	bl	8000920 <__addsf3>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2101      	movs	r1, #1
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 f97f 	bl	8003e28 <go_straight>
							turn_left90(&direction);
 8001b2a:	4878      	ldr	r0, [pc, #480]	; (8001d0c <start_fill+0x11dc>)
 8001b2c:	f002 f80a 	bl	8003b44 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 8001b30:	4b75      	ldr	r3, [pc, #468]	; (8001d08 <start_fill+0x11d8>)
 8001b32:	4977      	ldr	r1, [pc, #476]	; (8001d10 <start_fill+0x11e0>)
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fef1 	bl	800091c <__aeabi_fsub>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f002 f972 	bl	8003e28 <go_straight>
					break;
 8001b44:	e357      	b.n	80021f6 <start_fill+0x16c6>
						stack[i][0] = stack[i][0] == turn_left_90 ? turn_right_90 : turn_left_90;
 8001b46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b4a:	496a      	ldr	r1, [pc, #424]	; (8001cf4 <start_fill+0x11c4>)
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f993 3000 	ldrsb.w	r3, [r3]
 8001b58:	f113 0f04 	cmn.w	r3, #4
 8001b5c:	d102      	bne.n	8001b64 <start_fill+0x1034>
 8001b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b62:	e001      	b.n	8001b68 <start_fill+0x1038>
 8001b64:	f06f 0003 	mvn.w	r0, #3
 8001b68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b6c:	4961      	ldr	r1, [pc, #388]	; (8001cf4 <start_fill+0x11c4>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	4602      	mov	r2, r0
 8001b78:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4865      	ldr	r0, [pc, #404]	; (8001d14 <start_fill+0x11e4>)
 8001b7e:	f002 f953 	bl	8003e28 <go_straight>
					break;
 8001b82:	e338      	b.n	80021f6 <start_fill+0x16c6>
					if(stack[i][0] == straight){
 8001b84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b88:	495a      	ldr	r1, [pc, #360]	; (8001cf4 <start_fill+0x11c4>)
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	f993 3000 	ldrsb.w	r3, [r3]
 8001b96:	f113 0f06 	cmn.w	r3, #6
 8001b9a:	f040 808c 	bne.w	8001cb6 <start_fill+0x1186>
						if(((maze[y][x] & top_wall) == 0) && !visited[y - 1][x]){
 8001b9e:	4b56      	ldr	r3, [pc, #344]	; (8001cf8 <start_fill+0x11c8>)
 8001ba0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4b55      	ldr	r3, [pc, #340]	; (8001cfc <start_fill+0x11cc>)
 8001ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bac:	4618      	mov	r0, r3
 8001bae:	4a54      	ldr	r2, [pc, #336]	; (8001d00 <start_fill+0x11d0>)
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
 8001bba:	4403      	add	r3, r0
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d135      	bne.n	8001c32 <start_fill+0x1102>
 8001bc6:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <start_fill+0x11c8>)
 8001bc8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <start_fill+0x11cc>)
 8001bd0:	f993 3000 	ldrsb.w	r3, [r3]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	494b      	ldr	r1, [pc, #300]	; (8001d04 <start_fill+0x11d4>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	440b      	add	r3, r1
 8001be2:	4403      	add	r3, r0
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	f083 0301 	eor.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <start_fill+0x1102>
							stack[i][0] = turn_right_90;
 8001bf0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001bf4:	493f      	ldr	r1, [pc, #252]	; (8001cf4 <start_fill+0x11c4>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	22ff      	movs	r2, #255	; 0xff
 8001c00:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <start_fill+0x11d8>)
 8001c04:	4942      	ldr	r1, [pc, #264]	; (8001d10 <start_fill+0x11e0>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fe8a 	bl	8000920 <__addsf3>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2101      	movs	r1, #1
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 f909 	bl	8003e28 <go_straight>
							turn_left90(&direction);
 8001c16:	483d      	ldr	r0, [pc, #244]	; (8001d0c <start_fill+0x11dc>)
 8001c18:	f001 ff94 	bl	8003b44 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 8001c1c:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <start_fill+0x11d8>)
 8001c1e:	493c      	ldr	r1, [pc, #240]	; (8001d10 <start_fill+0x11e0>)
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fe7b 	bl	800091c <__aeabi_fsub>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 f8fc 	bl	8003e28 <go_straight>
					break;
 8001c30:	e2e4      	b.n	80021fc <start_fill+0x16cc>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8001c32:	4b31      	ldr	r3, [pc, #196]	; (8001cf8 <start_fill+0x11c8>)
 8001c34:	f993 3000 	ldrsb.w	r3, [r3]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <start_fill+0x11cc>)
 8001c3c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c40:	4618      	mov	r0, r3
 8001c42:	4a2f      	ldr	r2, [pc, #188]	; (8001d00 <start_fill+0x11d0>)
 8001c44:	460b      	mov	r3, r1
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4403      	add	r3, r0
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f040 82d0 	bne.w	80021fc <start_fill+0x16cc>
 8001c5c:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <start_fill+0x11c8>)
 8001c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <start_fill+0x11cc>)
 8001c66:	f993 3000 	ldrsb.w	r3, [r3]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4925      	ldr	r1, [pc, #148]	; (8001d04 <start_fill+0x11d4>)
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	440b      	add	r3, r1
 8001c78:	4403      	add	r3, r0
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	f083 0301 	eor.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 82ba 	beq.w	80021fc <start_fill+0x16cc>
							stack[i][0] = turn_left_90;
 8001c88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c8c:	4919      	ldr	r1, [pc, #100]	; (8001cf4 <start_fill+0x11c4>)
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	22fc      	movs	r2, #252	; 0xfc
 8001c98:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <start_fill+0x11d8>)
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f002 f8c2 	bl	8003e28 <go_straight>
							turn_right90(&direction);
 8001ca4:	4819      	ldr	r0, [pc, #100]	; (8001d0c <start_fill+0x11dc>)
 8001ca6:	f001 fff3 	bl	8003c90 <turn_right90>
							go_straight(WidthOESide, 0);
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <start_fill+0x11d8>)
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 f8ba 	bl	8003e28 <go_straight>
					break;
 8001cb4:	e2a2      	b.n	80021fc <start_fill+0x16cc>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001cb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cba:	490e      	ldr	r1, [pc, #56]	; (8001cf4 <start_fill+0x11c4>)
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc8:	f113 0f04 	cmn.w	r3, #4
 8001ccc:	d102      	bne.n	8001cd4 <start_fill+0x11a4>
 8001cce:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd2:	e001      	b.n	8001cd8 <start_fill+0x11a8>
 8001cd4:	f06f 0003 	mvn.w	r0, #3
 8001cd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cdc:	4905      	ldr	r1, [pc, #20]	; (8001cf4 <start_fill+0x11c4>)
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8001cea:	2100      	movs	r1, #0
 8001cec:	4809      	ldr	r0, [pc, #36]	; (8001d14 <start_fill+0x11e4>)
 8001cee:	f002 f89b 	bl	8003e28 <go_straight>
					break;
 8001cf2:	e283      	b.n	80021fc <start_fill+0x16cc>
 8001cf4:	200002ec 	.word	0x200002ec
 8001cf8:	20000419 	.word	0x20000419
 8001cfc:	20000418 	.word	0x20000418
 8001d00:	20000548 	.word	0x20000548
 8001d04:	200005ac 	.word	0x200005ac
 8001d08:	42c20000 	.word	0x42c20000
 8001d0c:	2000041a 	.word	0x2000041a
 8001d10:	42400000 	.word	0x42400000
 8001d14:	43960000 	.word	0x43960000
					if(stack[i][0] == straight){
 8001d18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d1c:	49a7      	ldr	r1, [pc, #668]	; (8001fbc <start_fill+0x148c>)
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	f993 3000 	ldrsb.w	r3, [r3]
 8001d2a:	f113 0f06 	cmn.w	r3, #6
 8001d2e:	f040 808c 	bne.w	8001e4a <start_fill+0x131a>
						if((maze[y][x] & left_wall) == 0 && !visited[y][x - 1]){
 8001d32:	4ba3      	ldr	r3, [pc, #652]	; (8001fc0 <start_fill+0x1490>)
 8001d34:	f993 3000 	ldrsb.w	r3, [r3]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4ba2      	ldr	r3, [pc, #648]	; (8001fc4 <start_fill+0x1494>)
 8001d3c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d40:	4618      	mov	r0, r3
 8001d42:	4aa1      	ldr	r2, [pc, #644]	; (8001fc8 <start_fill+0x1498>)
 8001d44:	460b      	mov	r3, r1
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4403      	add	r3, r0
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d135      	bne.n	8001dc6 <start_fill+0x1296>
 8001d5a:	4b99      	ldr	r3, [pc, #612]	; (8001fc0 <start_fill+0x1490>)
 8001d5c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d60:	4618      	mov	r0, r3
 8001d62:	4b98      	ldr	r3, [pc, #608]	; (8001fc4 <start_fill+0x1494>)
 8001d64:	f993 3000 	ldrsb.w	r3, [r3]
 8001d68:	1e5a      	subs	r2, r3, #1
 8001d6a:	4998      	ldr	r1, [pc, #608]	; (8001fcc <start_fill+0x149c>)
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4403      	add	r3, r0
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	440b      	add	r3, r1
 8001d76:	4413      	add	r3, r2
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	f083 0301 	eor.w	r3, r3, #1
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d020      	beq.n	8001dc6 <start_fill+0x1296>
							stack[i][0] = turn_right_90;
 8001d84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d88:	498c      	ldr	r1, [pc, #560]	; (8001fbc <start_fill+0x148c>)
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	440b      	add	r3, r1
 8001d92:	22ff      	movs	r2, #255	; 0xff
 8001d94:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 8001d96:	4b8e      	ldr	r3, [pc, #568]	; (8001fd0 <start_fill+0x14a0>)
 8001d98:	498e      	ldr	r1, [pc, #568]	; (8001fd4 <start_fill+0x14a4>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fdc0 	bl	8000920 <__addsf3>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2101      	movs	r1, #1
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 f83f 	bl	8003e28 <go_straight>
							turn_left90(&direction);
 8001daa:	488b      	ldr	r0, [pc, #556]	; (8001fd8 <start_fill+0x14a8>)
 8001dac:	f001 feca 	bl	8003b44 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 8001db0:	4b87      	ldr	r3, [pc, #540]	; (8001fd0 <start_fill+0x14a0>)
 8001db2:	4988      	ldr	r1, [pc, #544]	; (8001fd4 <start_fill+0x14a4>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fdb1 	bl	800091c <__aeabi_fsub>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 f832 	bl	8003e28 <go_straight>
					break;
 8001dc4:	e21d      	b.n	8002202 <start_fill+0x16d2>
						} else if((maze[y][x] & right_wall) == 0 && !visited[y][x + 1]) {
 8001dc6:	4b7e      	ldr	r3, [pc, #504]	; (8001fc0 <start_fill+0x1490>)
 8001dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4b7d      	ldr	r3, [pc, #500]	; (8001fc4 <start_fill+0x1494>)
 8001dd0:	f993 3000 	ldrsb.w	r3, [r3]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	4a7c      	ldr	r2, [pc, #496]	; (8001fc8 <start_fill+0x1498>)
 8001dd8:	460b      	mov	r3, r1
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	4403      	add	r3, r0
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 8209 	bne.w	8002202 <start_fill+0x16d2>
 8001df0:	4b73      	ldr	r3, [pc, #460]	; (8001fc0 <start_fill+0x1490>)
 8001df2:	f993 3000 	ldrsb.w	r3, [r3]
 8001df6:	4618      	mov	r0, r3
 8001df8:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <start_fill+0x1494>)
 8001dfa:	f993 3000 	ldrsb.w	r3, [r3]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	4972      	ldr	r1, [pc, #456]	; (8001fcc <start_fill+0x149c>)
 8001e02:	4603      	mov	r3, r0
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4403      	add	r3, r0
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	440b      	add	r3, r1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	f083 0301 	eor.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 81f3 	beq.w	8002202 <start_fill+0x16d2>
							stack[i][0] = turn_left_90;
 8001e1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e20:	4966      	ldr	r1, [pc, #408]	; (8001fbc <start_fill+0x148c>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	22fc      	movs	r2, #252	; 0xfc
 8001e2c:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 8001e2e:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <start_fill+0x14a0>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	4618      	mov	r0, r3
 8001e34:	f001 fff8 	bl	8003e28 <go_straight>
							turn_right90(&direction);
 8001e38:	4867      	ldr	r0, [pc, #412]	; (8001fd8 <start_fill+0x14a8>)
 8001e3a:	f001 ff29 	bl	8003c90 <turn_right90>
							go_straight(WidthOESide, 0);
 8001e3e:	4b64      	ldr	r3, [pc, #400]	; (8001fd0 <start_fill+0x14a0>)
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f001 fff0 	bl	8003e28 <go_straight>
					break;
 8001e48:	e1db      	b.n	8002202 <start_fill+0x16d2>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001e4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e4e:	495b      	ldr	r1, [pc, #364]	; (8001fbc <start_fill+0x148c>)
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f993 3000 	ldrsb.w	r3, [r3]
 8001e5c:	f113 0f04 	cmn.w	r3, #4
 8001e60:	d102      	bne.n	8001e68 <start_fill+0x1338>
 8001e62:	f04f 30ff 	mov.w	r0, #4294967295
 8001e66:	e001      	b.n	8001e6c <start_fill+0x133c>
 8001e68:	f06f 0003 	mvn.w	r0, #3
 8001e6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e70:	4952      	ldr	r1, [pc, #328]	; (8001fbc <start_fill+0x148c>)
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4856      	ldr	r0, [pc, #344]	; (8001fdc <start_fill+0x14ac>)
 8001e82:	f001 ffd1 	bl	8003e28 <go_straight>
					break;
 8001e86:	e1bc      	b.n	8002202 <start_fill+0x16d2>
					if(stack[i][0] == straight){
 8001e88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e8c:	494b      	ldr	r1, [pc, #300]	; (8001fbc <start_fill+0x148c>)
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	440b      	add	r3, r1
 8001e96:	f993 3000 	ldrsb.w	r3, [r3]
 8001e9a:	f113 0f06 	cmn.w	r3, #6
 8001e9e:	f040 809f 	bne.w	8001fe0 <start_fill+0x14b0>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 8001ea2:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <start_fill+0x1490>)
 8001ea4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <start_fill+0x1494>)
 8001eac:	f993 3000 	ldrsb.w	r3, [r3]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	4a45      	ldr	r2, [pc, #276]	; (8001fc8 <start_fill+0x1498>)
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4403      	add	r3, r0
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d12b      	bne.n	8001f22 <start_fill+0x13f2>
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <start_fill+0x1490>)
 8001ecc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <start_fill+0x1494>)
 8001ed4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ed8:	1e5a      	subs	r2, r3, #1
 8001eda:	493c      	ldr	r1, [pc, #240]	; (8001fcc <start_fill+0x149c>)
 8001edc:	4603      	mov	r3, r0
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4403      	add	r3, r0
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	440b      	add	r3, r1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	f083 0301 	eor.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d016      	beq.n	8001f22 <start_fill+0x13f2>
							stack[i][0] = turn_left_90;
 8001ef4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ef8:	4930      	ldr	r1, [pc, #192]	; (8001fbc <start_fill+0x148c>)
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	22fc      	movs	r2, #252	; 0xfc
 8001f04:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 8001f06:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <start_fill+0x14a0>)
 8001f08:	2101      	movs	r1, #1
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 ff8c 	bl	8003e28 <go_straight>
							turn_right90(&direction);
 8001f10:	4831      	ldr	r0, [pc, #196]	; (8001fd8 <start_fill+0x14a8>)
 8001f12:	f001 febd 	bl	8003c90 <turn_right90>
							go_straight(WidthOESide, 0);
 8001f16:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <start_fill+0x14a0>)
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f001 ff84 	bl	8003e28 <go_straight>
 8001f20:	e165      	b.n	80021ee <start_fill+0x16be>
						} else if(((maze[y][x] & right_wall) == 0) && !visited[y][x + 1]){
 8001f22:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <start_fill+0x1490>)
 8001f24:	f993 3000 	ldrsb.w	r3, [r3]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <start_fill+0x1494>)
 8001f2c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f30:	4618      	mov	r0, r3
 8001f32:	4a25      	ldr	r2, [pc, #148]	; (8001fc8 <start_fill+0x1498>)
 8001f34:	460b      	mov	r3, r1
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4403      	add	r3, r0
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 815e 	bne.w	8002208 <start_fill+0x16d8>
 8001f4c:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <start_fill+0x1490>)
 8001f4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f52:	4618      	mov	r0, r3
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <start_fill+0x1494>)
 8001f56:	f993 3000 	ldrsb.w	r3, [r3]
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	491b      	ldr	r1, [pc, #108]	; (8001fcc <start_fill+0x149c>)
 8001f5e:	4603      	mov	r3, r0
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4403      	add	r3, r0
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	440b      	add	r3, r1
 8001f68:	4413      	add	r3, r2
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f083 0301 	eor.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8148 	beq.w	8002208 <start_fill+0x16d8>
							stack[i][0] = turn_right_90;
 8001f78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001f7c:	490f      	ldr	r1, [pc, #60]	; (8001fbc <start_fill+0x148c>)
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	22ff      	movs	r2, #255	; 0xff
 8001f88:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <start_fill+0x14a0>)
 8001f8c:	4911      	ldr	r1, [pc, #68]	; (8001fd4 <start_fill+0x14a4>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fcc6 	bl	8000920 <__addsf3>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2101      	movs	r1, #1
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 ff45 	bl	8003e28 <go_straight>
							turn_left90(&direction);
 8001f9e:	480e      	ldr	r0, [pc, #56]	; (8001fd8 <start_fill+0x14a8>)
 8001fa0:	f001 fdd0 	bl	8003b44 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <start_fill+0x14a0>)
 8001fa6:	490b      	ldr	r1, [pc, #44]	; (8001fd4 <start_fill+0x14a4>)
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fcb7 	bl	800091c <__aeabi_fsub>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 ff38 	bl	8003e28 <go_straight>
					break;
 8001fb8:	e126      	b.n	8002208 <start_fill+0x16d8>
 8001fba:	bf00      	nop
 8001fbc:	200002ec 	.word	0x200002ec
 8001fc0:	20000419 	.word	0x20000419
 8001fc4:	20000418 	.word	0x20000418
 8001fc8:	20000548 	.word	0x20000548
 8001fcc:	200005ac 	.word	0x200005ac
 8001fd0:	42c20000 	.word	0x42c20000
 8001fd4:	42400000 	.word	0x42400000
 8001fd8:	2000041a 	.word	0x2000041a
 8001fdc:	43960000 	.word	0x43960000
					} else if(stack[i][0] == turn_left_90){
 8001fe0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001fe4:	498b      	ldr	r1, [pc, #556]	; (8002214 <start_fill+0x16e4>)
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	440b      	add	r3, r1
 8001fee:	f993 3000 	ldrsb.w	r3, [r3]
 8001ff2:	f113 0f04 	cmn.w	r3, #4
 8001ff6:	f040 8083 	bne.w	8002100 <start_fill+0x15d0>
						if(((maze[y][x] & right_wall) == 0) && !visited[y][x + 1]){
 8001ffa:	4b87      	ldr	r3, [pc, #540]	; (8002218 <start_fill+0x16e8>)
 8001ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8002000:	4619      	mov	r1, r3
 8002002:	4b86      	ldr	r3, [pc, #536]	; (800221c <start_fill+0x16ec>)
 8002004:	f993 3000 	ldrsb.w	r3, [r3]
 8002008:	4618      	mov	r0, r3
 800200a:	4a85      	ldr	r2, [pc, #532]	; (8002220 <start_fill+0x16f0>)
 800200c:	460b      	mov	r3, r1
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	4403      	add	r3, r0
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b00      	cmp	r3, #0
 8002020:	d135      	bne.n	800208e <start_fill+0x155e>
 8002022:	4b7d      	ldr	r3, [pc, #500]	; (8002218 <start_fill+0x16e8>)
 8002024:	f993 3000 	ldrsb.w	r3, [r3]
 8002028:	4618      	mov	r0, r3
 800202a:	4b7c      	ldr	r3, [pc, #496]	; (800221c <start_fill+0x16ec>)
 800202c:	f993 3000 	ldrsb.w	r3, [r3]
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	497c      	ldr	r1, [pc, #496]	; (8002224 <start_fill+0x16f4>)
 8002034:	4603      	mov	r3, r0
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4403      	add	r3, r0
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	440b      	add	r3, r1
 800203e:	4413      	add	r3, r2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	f083 0301 	eor.w	r3, r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <start_fill+0x155e>
							stack[i][0] = straight;
 800204c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002050:	4970      	ldr	r1, [pc, #448]	; (8002214 <start_fill+0x16e4>)
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	440b      	add	r3, r1
 800205a:	22fa      	movs	r2, #250	; 0xfa
 800205c:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 800205e:	4b72      	ldr	r3, [pc, #456]	; (8002228 <start_fill+0x16f8>)
 8002060:	4972      	ldr	r1, [pc, #456]	; (800222c <start_fill+0x16fc>)
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fc5c 	bl	8000920 <__addsf3>
 8002068:	4603      	mov	r3, r0
 800206a:	2101      	movs	r1, #1
 800206c:	4618      	mov	r0, r3
 800206e:	f001 fedb 	bl	8003e28 <go_straight>
							turn_left90(&direction);
 8002072:	486f      	ldr	r0, [pc, #444]	; (8002230 <start_fill+0x1700>)
 8002074:	f001 fd66 	bl	8003b44 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 8002078:	4b6b      	ldr	r3, [pc, #428]	; (8002228 <start_fill+0x16f8>)
 800207a:	496c      	ldr	r1, [pc, #432]	; (800222c <start_fill+0x16fc>)
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fc4d 	bl	800091c <__aeabi_fsub>
 8002082:	4603      	mov	r3, r0
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f001 fece 	bl	8003e28 <go_straight>
 800208c:	e0af      	b.n	80021ee <start_fill+0x16be>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 800208e:	4b62      	ldr	r3, [pc, #392]	; (8002218 <start_fill+0x16e8>)
 8002090:	f993 3000 	ldrsb.w	r3, [r3]
 8002094:	4619      	mov	r1, r3
 8002096:	4b61      	ldr	r3, [pc, #388]	; (800221c <start_fill+0x16ec>)
 8002098:	f993 3000 	ldrsb.w	r3, [r3]
 800209c:	4618      	mov	r0, r3
 800209e:	4a60      	ldr	r2, [pc, #384]	; (8002220 <start_fill+0x16f0>)
 80020a0:	460b      	mov	r3, r1
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	4403      	add	r3, r0
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f040 80a8 	bne.w	8002208 <start_fill+0x16d8>
 80020b8:	4b57      	ldr	r3, [pc, #348]	; (8002218 <start_fill+0x16e8>)
 80020ba:	f993 3000 	ldrsb.w	r3, [r3]
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	4b56      	ldr	r3, [pc, #344]	; (800221c <start_fill+0x16ec>)
 80020c2:	f993 3000 	ldrsb.w	r3, [r3]
 80020c6:	4618      	mov	r0, r3
 80020c8:	4956      	ldr	r1, [pc, #344]	; (8002224 <start_fill+0x16f4>)
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	440b      	add	r3, r1
 80020d4:	4403      	add	r3, r0
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	f083 0301 	eor.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8092 	beq.w	8002208 <start_fill+0x16d8>
							stack[i][0] = turn_right_90;
 80020e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80020e8:	494a      	ldr	r1, [pc, #296]	; (8002214 <start_fill+0x16e4>)
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	440b      	add	r3, r1
 80020f2:	22ff      	movs	r2, #255	; 0xff
 80020f4:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 80020f6:	2100      	movs	r1, #0
 80020f8:	484e      	ldr	r0, [pc, #312]	; (8002234 <start_fill+0x1704>)
 80020fa:	f001 fe95 	bl	8003e28 <go_straight>
					break;
 80020fe:	e083      	b.n	8002208 <start_fill+0x16d8>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 8002100:	4b45      	ldr	r3, [pc, #276]	; (8002218 <start_fill+0x16e8>)
 8002102:	f993 3000 	ldrsb.w	r3, [r3]
 8002106:	4619      	mov	r1, r3
 8002108:	4b44      	ldr	r3, [pc, #272]	; (800221c <start_fill+0x16ec>)
 800210a:	f993 3000 	ldrsb.w	r3, [r3]
 800210e:	4618      	mov	r0, r3
 8002110:	4a43      	ldr	r2, [pc, #268]	; (8002220 <start_fill+0x16f0>)
 8002112:	460b      	mov	r3, r1
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	4403      	add	r3, r0
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d12b      	bne.n	8002180 <start_fill+0x1650>
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <start_fill+0x16e8>)
 800212a:	f993 3000 	ldrsb.w	r3, [r3]
 800212e:	4618      	mov	r0, r3
 8002130:	4b3a      	ldr	r3, [pc, #232]	; (800221c <start_fill+0x16ec>)
 8002132:	f993 3000 	ldrsb.w	r3, [r3]
 8002136:	1e5a      	subs	r2, r3, #1
 8002138:	493a      	ldr	r1, [pc, #232]	; (8002224 <start_fill+0x16f4>)
 800213a:	4603      	mov	r3, r0
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4403      	add	r3, r0
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	440b      	add	r3, r1
 8002144:	4413      	add	r3, r2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	f083 0301 	eor.w	r3, r3, #1
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d016      	beq.n	8002180 <start_fill+0x1650>
							stack[i][0] = straight;
 8002152:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002156:	492f      	ldr	r1, [pc, #188]	; (8002214 <start_fill+0x16e4>)
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	440b      	add	r3, r1
 8002160:	22fa      	movs	r2, #250	; 0xfa
 8002162:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <start_fill+0x16f8>)
 8002166:	2101      	movs	r1, #1
 8002168:	4618      	mov	r0, r3
 800216a:	f001 fe5d 	bl	8003e28 <go_straight>
							turn_right90(&direction);
 800216e:	4830      	ldr	r0, [pc, #192]	; (8002230 <start_fill+0x1700>)
 8002170:	f001 fd8e 	bl	8003c90 <turn_right90>
							go_straight(WidthOESide, 0);
 8002174:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <start_fill+0x16f8>)
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f001 fe55 	bl	8003e28 <go_straight>
 800217e:	e036      	b.n	80021ee <start_fill+0x16be>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8002180:	4b25      	ldr	r3, [pc, #148]	; (8002218 <start_fill+0x16e8>)
 8002182:	f993 3000 	ldrsb.w	r3, [r3]
 8002186:	4619      	mov	r1, r3
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <start_fill+0x16ec>)
 800218a:	f993 3000 	ldrsb.w	r3, [r3]
 800218e:	4618      	mov	r0, r3
 8002190:	4a23      	ldr	r2, [pc, #140]	; (8002220 <start_fill+0x16f0>)
 8002192:	460b      	mov	r3, r1
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	4403      	add	r3, r0
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d12f      	bne.n	8002208 <start_fill+0x16d8>
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <start_fill+0x16e8>)
 80021aa:	f993 3000 	ldrsb.w	r3, [r3]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <start_fill+0x16ec>)
 80021b2:	f993 3000 	ldrsb.w	r3, [r3]
 80021b6:	4618      	mov	r0, r3
 80021b8:	491a      	ldr	r1, [pc, #104]	; (8002224 <start_fill+0x16f4>)
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	440b      	add	r3, r1
 80021c4:	4403      	add	r3, r0
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f083 0301 	eor.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01a      	beq.n	8002208 <start_fill+0x16d8>
							stack[i][0] = turn_left_90;
 80021d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80021d6:	490f      	ldr	r1, [pc, #60]	; (8002214 <start_fill+0x16e4>)
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	440b      	add	r3, r1
 80021e0:	22fc      	movs	r2, #252	; 0xfc
 80021e2:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 80021e4:	2100      	movs	r1, #0
 80021e6:	4813      	ldr	r0, [pc, #76]	; (8002234 <start_fill+0x1704>)
 80021e8:	f001 fe1e 	bl	8003e28 <go_straight>
					break;
 80021ec:	e00c      	b.n	8002208 <start_fill+0x16d8>
 80021ee:	e00b      	b.n	8002208 <start_fill+0x16d8>
			if(frontfree){
 80021f0:	bf00      	nop
 80021f2:	f7fe bcf6 	b.w	8000be2 <start_fill+0xb2>
					break;
 80021f6:	bf00      	nop
 80021f8:	f7fe bcf3 	b.w	8000be2 <start_fill+0xb2>
					break;
 80021fc:	bf00      	nop
 80021fe:	f7fe bcf0 	b.w	8000be2 <start_fill+0xb2>
					break;
 8002202:	bf00      	nop
 8002204:	f7fe bced 	b.w	8000be2 <start_fill+0xb2>
					break;
 8002208:	bf00      	nop
		vl53l0x_GetRanging_now(pMyDevice[1], &frontValue);
 800220a:	f7fe bcea 	b.w	8000be2 <start_fill+0xb2>
		for(int m = 0; m < grid_size; m++){
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	e0b0      	b.n	8002376 <start_fill+0x1846>
 8002214:	200002ec 	.word	0x200002ec
 8002218:	20000419 	.word	0x20000419
 800221c:	20000418 	.word	0x20000418
 8002220:	20000548 	.word	0x20000548
 8002224:	200005ac 	.word	0x200005ac
 8002228:	42c20000 	.word	0x42c20000
 800222c:	42400000 	.word	0x42400000
 8002230:	2000041a 	.word	0x2000041a
 8002234:	43960000 	.word	0x43960000
			if(!visited[n][m]){
 8002238:	4957      	ldr	r1, [pc, #348]	; (8002398 <start_fill+0x1868>)
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	18ca      	adds	r2, r1, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	4413      	add	r3, r2
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f083 0301 	eor.w	r3, r3, #1
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 808c 	beq.w	8002370 <start_fill+0x1840>
				maze[n][m] |= 15;
 8002258:	4950      	ldr	r1, [pc, #320]	; (800239c <start_fill+0x186c>)
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	18ca      	adds	r2, r1, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	4413      	add	r3, r2
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f043 030f 	orr.w	r3, r3, #15
 8002270:	b2d8      	uxtb	r0, r3
 8002272:	494a      	ldr	r1, [pc, #296]	; (800239c <start_fill+0x186c>)
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	18ca      	adds	r2, r1, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4413      	add	r3, r2
 8002284:	4602      	mov	r2, r0
 8002286:	701a      	strb	r2, [r3, #0]
				if(n > 0){ maze[n - 1][m] |= bottom_wall; }
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	dd19      	ble.n	80022c2 <start_fill+0x1792>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1e5a      	subs	r2, r3, #1
 8002292:	4942      	ldr	r1, [pc, #264]	; (800239c <start_fill+0x186c>)
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	18ca      	adds	r2, r1, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	4413      	add	r3, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	3a01      	subs	r2, #1
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	b2d8      	uxtb	r0, r3
 80022ae:	493b      	ldr	r1, [pc, #236]	; (800239c <start_fill+0x186c>)
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	18ca      	adds	r2, r1, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4413      	add	r3, r2
 80022be:	4602      	mov	r2, r0
 80022c0:	701a      	strb	r2, [r3, #0]
				if(n + 1 < grid_size){ maze[n + 1][m] |= top_wall; }
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	dc19      	bgt.n	80022fc <start_fill+0x17cc>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	4933      	ldr	r1, [pc, #204]	; (800239c <start_fill+0x186c>)
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	18ca      	adds	r2, r1, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	3201      	adds	r2, #1
 80022e2:	f043 0302 	orr.w	r3, r3, #2
 80022e6:	b2d8      	uxtb	r0, r3
 80022e8:	492c      	ldr	r1, [pc, #176]	; (800239c <start_fill+0x186c>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	18ca      	adds	r2, r1, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4413      	add	r3, r2
 80022f8:	4602      	mov	r2, r0
 80022fa:	701a      	strb	r2, [r3, #0]
				if(m > 0){ maze[n][m - 1] |= right_wall; }
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	dd19      	ble.n	8002336 <start_fill+0x1806>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	1e59      	subs	r1, r3, #1
 8002306:	4825      	ldr	r0, [pc, #148]	; (800239c <start_fill+0x186c>)
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4403      	add	r3, r0
 8002314:	440b      	add	r3, r1
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	1e51      	subs	r1, r2, #1
 800231c:	f043 0304 	orr.w	r3, r3, #4
 8002320:	b2dc      	uxtb	r4, r3
 8002322:	481e      	ldr	r0, [pc, #120]	; (800239c <start_fill+0x186c>)
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4403      	add	r3, r0
 8002330:	440b      	add	r3, r1
 8002332:	4622      	mov	r2, r4
 8002334:	701a      	strb	r2, [r3, #0]
				if(m + 1 < grid_size){ maze[n][m + 1] |= left_wall; }
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b08      	cmp	r3, #8
 800233a:	dc19      	bgt.n	8002370 <start_fill+0x1840>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1c59      	adds	r1, r3, #1
 8002340:	4816      	ldr	r0, [pc, #88]	; (800239c <start_fill+0x186c>)
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4403      	add	r3, r0
 800234e:	440b      	add	r3, r1
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	1c51      	adds	r1, r2, #1
 8002356:	f043 0308 	orr.w	r3, r3, #8
 800235a:	b2dc      	uxtb	r4, r3
 800235c:	480f      	ldr	r0, [pc, #60]	; (800239c <start_fill+0x186c>)
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4403      	add	r3, r0
 800236a:	440b      	add	r3, r1
 800236c:	4622      	mov	r2, r4
 800236e:	701a      	strb	r2, [r3, #0]
		for(int m = 0; m < grid_size; m++){
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	3301      	adds	r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b09      	cmp	r3, #9
 800237a:	f77f af5d 	ble.w	8002238 <start_fill+0x1708>
	for(int n = 0; n < grid_size; n++){
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3301      	adds	r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b09      	cmp	r3, #9
 8002388:	f77f af41 	ble.w	800220e <start_fill+0x16de>
			}
		}
	}
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}
 8002396:	bf00      	nop
 8002398:	200005ac 	.word	0x200005ac
 800239c:	20000548 	.word	0x20000548

080023a0 <found>:
void found(int16_t index){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
	switch(direction){
 80023aa:	4b22      	ldr	r3, [pc, #136]	; (8002434 <found+0x94>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d036      	beq.n	8002420 <found+0x80>
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	dc39      	bgt.n	800242a <found+0x8a>
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <found+0x20>
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d013      	beq.n	80023e6 <found+0x46>
			break;
		case north:
			go_straight(square_size * 2, 1);
			break;
	}
}
 80023be:	e034      	b.n	800242a <found+0x8a>
			go_straight(WidthOESide, 1);
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <found+0x98>)
 80023c2:	2101      	movs	r1, #1
 80023c4:	4618      	mov	r0, r3
 80023c6:	f001 fd2f 	bl	8003e28 <go_straight>
			turn_right90(&direction);
 80023ca:	481a      	ldr	r0, [pc, #104]	; (8002434 <found+0x94>)
 80023cc:	f001 fc60 	bl	8003c90 <turn_right90>
			go_straight(WidthOESide + square_size, 1);
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <found+0x98>)
 80023d2:	491a      	ldr	r1, [pc, #104]	; (800243c <found+0x9c>)
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe faa3 	bl	8000920 <__addsf3>
 80023da:	4603      	mov	r3, r0
 80023dc:	2101      	movs	r1, #1
 80023de:	4618      	mov	r0, r3
 80023e0:	f001 fd22 	bl	8003e28 <go_straight>
			break;
 80023e4:	e021      	b.n	800242a <found+0x8a>
			go_straight(WidthOESide + dbtWheels_c, 1);
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <found+0x98>)
 80023e8:	4915      	ldr	r1, [pc, #84]	; (8002440 <found+0xa0>)
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fa98 	bl	8000920 <__addsf3>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2101      	movs	r1, #1
 80023f4:	4618      	mov	r0, r3
 80023f6:	f001 fd17 	bl	8003e28 <go_straight>
			turn_left90(&direction);
 80023fa:	480e      	ldr	r0, [pc, #56]	; (8002434 <found+0x94>)
 80023fc:	f001 fba2 	bl	8003b44 <turn_left90>
			go_straight(WidthOESide + square_size - dbtWheels_c, 1);
 8002400:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <found+0x98>)
 8002402:	490e      	ldr	r1, [pc, #56]	; (800243c <found+0x9c>)
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fa8b 	bl	8000920 <__addsf3>
 800240a:	4603      	mov	r3, r0
 800240c:	490c      	ldr	r1, [pc, #48]	; (8002440 <found+0xa0>)
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fa84 	bl	800091c <__aeabi_fsub>
 8002414:	4603      	mov	r3, r0
 8002416:	2101      	movs	r1, #1
 8002418:	4618      	mov	r0, r3
 800241a:	f001 fd05 	bl	8003e28 <go_straight>
			break;
 800241e:	e004      	b.n	800242a <found+0x8a>
			go_straight(square_size * 2, 1);
 8002420:	2101      	movs	r1, #1
 8002422:	4808      	ldr	r0, [pc, #32]	; (8002444 <found+0xa4>)
 8002424:	f001 fd00 	bl	8003e28 <go_straight>
			break;
 8002428:	bf00      	nop
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000041a 	.word	0x2000041a
 8002438:	42c20000 	.word	0x42c20000
 800243c:	43960000 	.word	0x43960000
 8002440:	42400000 	.word	0x42400000
 8002444:	44160000 	.word	0x44160000

08002448 <set_wall>:

void set_wall(bool rbl, bool rbr, bool rbf){
 8002448:	b490      	push	{r4, r7}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
 8002452:	460b      	mov	r3, r1
 8002454:	71bb      	strb	r3, [r7, #6]
 8002456:	4613      	mov	r3, r2
 8002458:	717b      	strb	r3, [r7, #5]
	switch(direction){
 800245a:	4b86      	ldr	r3, [pc, #536]	; (8002674 <set_wall+0x22c>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b03      	cmp	r3, #3
 8002460:	f200 8415 	bhi.w	8002c8e <set_wall+0x846>
 8002464:	a201      	add	r2, pc, #4	; (adr r2, 800246c <set_wall+0x24>)
 8002466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246a:	bf00      	nop
 800246c:	0800247d 	.word	0x0800247d
 8002470:	08002685 	.word	0x08002685
 8002474:	08002889 	.word	0x08002889
 8002478:	08002a8d 	.word	0x08002a8d
		case west:
			x--;
 800247c:	4b7e      	ldr	r3, [pc, #504]	; (8002678 <set_wall+0x230>)
 800247e:	f993 3000 	ldrsb.w	r3, [r3]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b2db      	uxtb	r3, r3
 8002488:	b25a      	sxtb	r2, r3
 800248a:	4b7b      	ldr	r3, [pc, #492]	; (8002678 <set_wall+0x230>)
 800248c:	701a      	strb	r2, [r3, #0]
			if(rbl){
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d04c      	beq.n	800252e <set_wall+0xe6>
				maze[y][x] |= bottom_wall;
 8002494:	4b79      	ldr	r3, [pc, #484]	; (800267c <set_wall+0x234>)
 8002496:	f993 3000 	ldrsb.w	r3, [r3]
 800249a:	4619      	mov	r1, r3
 800249c:	4b76      	ldr	r3, [pc, #472]	; (8002678 <set_wall+0x230>)
 800249e:	f993 3000 	ldrsb.w	r3, [r3]
 80024a2:	4618      	mov	r0, r3
 80024a4:	4a76      	ldr	r2, [pc, #472]	; (8002680 <set_wall+0x238>)
 80024a6:	460b      	mov	r3, r1
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	4403      	add	r3, r0
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4a71      	ldr	r2, [pc, #452]	; (800267c <set_wall+0x234>)
 80024b6:	f992 2000 	ldrsb.w	r2, [r2]
 80024ba:	4611      	mov	r1, r2
 80024bc:	4a6e      	ldr	r2, [pc, #440]	; (8002678 <set_wall+0x230>)
 80024be:	f992 2000 	ldrsb.w	r2, [r2]
 80024c2:	4614      	mov	r4, r2
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	b2d8      	uxtb	r0, r3
 80024ca:	4a6d      	ldr	r2, [pc, #436]	; (8002680 <set_wall+0x238>)
 80024cc:	460b      	mov	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	4423      	add	r3, r4
 80024d8:	4602      	mov	r2, r0
 80024da:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 80024dc:	4b67      	ldr	r3, [pc, #412]	; (800267c <set_wall+0x234>)
 80024de:	f993 3000 	ldrsb.w	r3, [r3]
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	dc23      	bgt.n	800252e <set_wall+0xe6>
 80024e6:	4b65      	ldr	r3, [pc, #404]	; (800267c <set_wall+0x234>)
 80024e8:	f993 3000 	ldrsb.w	r3, [r3]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	4b62      	ldr	r3, [pc, #392]	; (8002678 <set_wall+0x230>)
 80024f0:	f993 3000 	ldrsb.w	r3, [r3]
 80024f4:	4618      	mov	r0, r3
 80024f6:	4962      	ldr	r1, [pc, #392]	; (8002680 <set_wall+0x238>)
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	440b      	add	r3, r1
 8002502:	4403      	add	r3, r0
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	4a5d      	ldr	r2, [pc, #372]	; (800267c <set_wall+0x234>)
 8002508:	f992 2000 	ldrsb.w	r2, [r2]
 800250c:	3201      	adds	r2, #1
 800250e:	495a      	ldr	r1, [pc, #360]	; (8002678 <set_wall+0x230>)
 8002510:	f991 1000 	ldrsb.w	r1, [r1]
 8002514:	460c      	mov	r4, r1
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	b2d8      	uxtb	r0, r3
 800251c:	4958      	ldr	r1, [pc, #352]	; (8002680 <set_wall+0x238>)
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	440b      	add	r3, r1
 8002528:	4423      	add	r3, r4
 800252a:	4602      	mov	r2, r0
 800252c:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 800252e:	79bb      	ldrb	r3, [r7, #6]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d04c      	beq.n	80025ce <set_wall+0x186>
				maze[y][x] |= top_wall;
 8002534:	4b51      	ldr	r3, [pc, #324]	; (800267c <set_wall+0x234>)
 8002536:	f993 3000 	ldrsb.w	r3, [r3]
 800253a:	4619      	mov	r1, r3
 800253c:	4b4e      	ldr	r3, [pc, #312]	; (8002678 <set_wall+0x230>)
 800253e:	f993 3000 	ldrsb.w	r3, [r3]
 8002542:	4618      	mov	r0, r3
 8002544:	4a4e      	ldr	r2, [pc, #312]	; (8002680 <set_wall+0x238>)
 8002546:	460b      	mov	r3, r1
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	4403      	add	r3, r0
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4a49      	ldr	r2, [pc, #292]	; (800267c <set_wall+0x234>)
 8002556:	f992 2000 	ldrsb.w	r2, [r2]
 800255a:	4611      	mov	r1, r2
 800255c:	4a46      	ldr	r2, [pc, #280]	; (8002678 <set_wall+0x230>)
 800255e:	f992 2000 	ldrsb.w	r2, [r2]
 8002562:	4614      	mov	r4, r2
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	b2d8      	uxtb	r0, r3
 800256a:	4a45      	ldr	r2, [pc, #276]	; (8002680 <set_wall+0x238>)
 800256c:	460b      	mov	r3, r1
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	4423      	add	r3, r4
 8002578:	4602      	mov	r2, r0
 800257a:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 800257c:	4b3f      	ldr	r3, [pc, #252]	; (800267c <set_wall+0x234>)
 800257e:	f993 3000 	ldrsb.w	r3, [r3]
 8002582:	2b00      	cmp	r3, #0
 8002584:	dd23      	ble.n	80025ce <set_wall+0x186>
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <set_wall+0x234>)
 8002588:	f993 3000 	ldrsb.w	r3, [r3]
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	4b3a      	ldr	r3, [pc, #232]	; (8002678 <set_wall+0x230>)
 8002590:	f993 3000 	ldrsb.w	r3, [r3]
 8002594:	4618      	mov	r0, r3
 8002596:	493a      	ldr	r1, [pc, #232]	; (8002680 <set_wall+0x238>)
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	440b      	add	r3, r1
 80025a2:	4403      	add	r3, r0
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	4a35      	ldr	r2, [pc, #212]	; (800267c <set_wall+0x234>)
 80025a8:	f992 2000 	ldrsb.w	r2, [r2]
 80025ac:	3a01      	subs	r2, #1
 80025ae:	4932      	ldr	r1, [pc, #200]	; (8002678 <set_wall+0x230>)
 80025b0:	f991 1000 	ldrsb.w	r1, [r1]
 80025b4:	460c      	mov	r4, r1
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	b2d8      	uxtb	r0, r3
 80025bc:	4930      	ldr	r1, [pc, #192]	; (8002680 <set_wall+0x238>)
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	440b      	add	r3, r1
 80025c8:	4423      	add	r3, r4
 80025ca:	4602      	mov	r2, r0
 80025cc:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 80025ce:	797b      	ldrb	r3, [r7, #5]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8355 	beq.w	8002c80 <set_wall+0x838>
				maze[y][x] |= left_wall;
 80025d6:	4b29      	ldr	r3, [pc, #164]	; (800267c <set_wall+0x234>)
 80025d8:	f993 3000 	ldrsb.w	r3, [r3]
 80025dc:	4619      	mov	r1, r3
 80025de:	4b26      	ldr	r3, [pc, #152]	; (8002678 <set_wall+0x230>)
 80025e0:	f993 3000 	ldrsb.w	r3, [r3]
 80025e4:	4618      	mov	r0, r3
 80025e6:	4a26      	ldr	r2, [pc, #152]	; (8002680 <set_wall+0x238>)
 80025e8:	460b      	mov	r3, r1
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	4403      	add	r3, r0
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	4a21      	ldr	r2, [pc, #132]	; (800267c <set_wall+0x234>)
 80025f8:	f992 2000 	ldrsb.w	r2, [r2]
 80025fc:	4611      	mov	r1, r2
 80025fe:	4a1e      	ldr	r2, [pc, #120]	; (8002678 <set_wall+0x230>)
 8002600:	f992 2000 	ldrsb.w	r2, [r2]
 8002604:	4614      	mov	r4, r2
 8002606:	f043 0308 	orr.w	r3, r3, #8
 800260a:	b2d8      	uxtb	r0, r3
 800260c:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <set_wall+0x238>)
 800260e:	460b      	mov	r3, r1
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	4423      	add	r3, r4
 800261a:	4602      	mov	r2, r0
 800261c:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <set_wall+0x230>)
 8002620:	f993 3000 	ldrsb.w	r3, [r3]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f340 832b 	ble.w	8002c80 <set_wall+0x838>
 800262a:	4b14      	ldr	r3, [pc, #80]	; (800267c <set_wall+0x234>)
 800262c:	f993 3000 	ldrsb.w	r3, [r3]
 8002630:	4618      	mov	r0, r3
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <set_wall+0x230>)
 8002634:	f993 3000 	ldrsb.w	r3, [r3]
 8002638:	1e5a      	subs	r2, r3, #1
 800263a:	4911      	ldr	r1, [pc, #68]	; (8002680 <set_wall+0x238>)
 800263c:	4603      	mov	r3, r0
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4403      	add	r3, r0
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	440b      	add	r3, r1
 8002646:	4413      	add	r3, r2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	4a0c      	ldr	r2, [pc, #48]	; (800267c <set_wall+0x234>)
 800264c:	f992 2000 	ldrsb.w	r2, [r2]
 8002650:	4610      	mov	r0, r2
 8002652:	4a09      	ldr	r2, [pc, #36]	; (8002678 <set_wall+0x230>)
 8002654:	f992 2000 	ldrsb.w	r2, [r2]
 8002658:	3a01      	subs	r2, #1
 800265a:	f043 0304 	orr.w	r3, r3, #4
 800265e:	b2dc      	uxtb	r4, r3
 8002660:	4907      	ldr	r1, [pc, #28]	; (8002680 <set_wall+0x238>)
 8002662:	4603      	mov	r3, r0
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4403      	add	r3, r0
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	440b      	add	r3, r1
 800266c:	4413      	add	r3, r2
 800266e:	4622      	mov	r2, r4
 8002670:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002672:	e305      	b.n	8002c80 <set_wall+0x838>
 8002674:	2000041a 	.word	0x2000041a
 8002678:	20000418 	.word	0x20000418
 800267c:	20000419 	.word	0x20000419
 8002680:	20000548 	.word	0x20000548
		case east:
			x++;
 8002684:	4b7d      	ldr	r3, [pc, #500]	; (800287c <set_wall+0x434>)
 8002686:	f993 3000 	ldrsb.w	r3, [r3]
 800268a:	b2db      	uxtb	r3, r3
 800268c:	3301      	adds	r3, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	b25a      	sxtb	r2, r3
 8002692:	4b7a      	ldr	r3, [pc, #488]	; (800287c <set_wall+0x434>)
 8002694:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d04c      	beq.n	8002736 <set_wall+0x2ee>
				maze[y][x] |= top_wall;
 800269c:	4b78      	ldr	r3, [pc, #480]	; (8002880 <set_wall+0x438>)
 800269e:	f993 3000 	ldrsb.w	r3, [r3]
 80026a2:	4619      	mov	r1, r3
 80026a4:	4b75      	ldr	r3, [pc, #468]	; (800287c <set_wall+0x434>)
 80026a6:	f993 3000 	ldrsb.w	r3, [r3]
 80026aa:	4618      	mov	r0, r3
 80026ac:	4a75      	ldr	r2, [pc, #468]	; (8002884 <set_wall+0x43c>)
 80026ae:	460b      	mov	r3, r1
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	4403      	add	r3, r0
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4a70      	ldr	r2, [pc, #448]	; (8002880 <set_wall+0x438>)
 80026be:	f992 2000 	ldrsb.w	r2, [r2]
 80026c2:	4611      	mov	r1, r2
 80026c4:	4a6d      	ldr	r2, [pc, #436]	; (800287c <set_wall+0x434>)
 80026c6:	f992 2000 	ldrsb.w	r2, [r2]
 80026ca:	4614      	mov	r4, r2
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	b2d8      	uxtb	r0, r3
 80026d2:	4a6c      	ldr	r2, [pc, #432]	; (8002884 <set_wall+0x43c>)
 80026d4:	460b      	mov	r3, r1
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	4423      	add	r3, r4
 80026e0:	4602      	mov	r2, r0
 80026e2:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 80026e4:	4b66      	ldr	r3, [pc, #408]	; (8002880 <set_wall+0x438>)
 80026e6:	f993 3000 	ldrsb.w	r3, [r3]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	dd23      	ble.n	8002736 <set_wall+0x2ee>
 80026ee:	4b64      	ldr	r3, [pc, #400]	; (8002880 <set_wall+0x438>)
 80026f0:	f993 3000 	ldrsb.w	r3, [r3]
 80026f4:	1e5a      	subs	r2, r3, #1
 80026f6:	4b61      	ldr	r3, [pc, #388]	; (800287c <set_wall+0x434>)
 80026f8:	f993 3000 	ldrsb.w	r3, [r3]
 80026fc:	4618      	mov	r0, r3
 80026fe:	4961      	ldr	r1, [pc, #388]	; (8002884 <set_wall+0x43c>)
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	440b      	add	r3, r1
 800270a:	4403      	add	r3, r0
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	4a5c      	ldr	r2, [pc, #368]	; (8002880 <set_wall+0x438>)
 8002710:	f992 2000 	ldrsb.w	r2, [r2]
 8002714:	3a01      	subs	r2, #1
 8002716:	4959      	ldr	r1, [pc, #356]	; (800287c <set_wall+0x434>)
 8002718:	f991 1000 	ldrsb.w	r1, [r1]
 800271c:	460c      	mov	r4, r1
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	b2d8      	uxtb	r0, r3
 8002724:	4957      	ldr	r1, [pc, #348]	; (8002884 <set_wall+0x43c>)
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	440b      	add	r3, r1
 8002730:	4423      	add	r3, r4
 8002732:	4602      	mov	r2, r0
 8002734:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d04c      	beq.n	80027d6 <set_wall+0x38e>
				maze[y][x] |= bottom_wall;
 800273c:	4b50      	ldr	r3, [pc, #320]	; (8002880 <set_wall+0x438>)
 800273e:	f993 3000 	ldrsb.w	r3, [r3]
 8002742:	4619      	mov	r1, r3
 8002744:	4b4d      	ldr	r3, [pc, #308]	; (800287c <set_wall+0x434>)
 8002746:	f993 3000 	ldrsb.w	r3, [r3]
 800274a:	4618      	mov	r0, r3
 800274c:	4a4d      	ldr	r2, [pc, #308]	; (8002884 <set_wall+0x43c>)
 800274e:	460b      	mov	r3, r1
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	4403      	add	r3, r0
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4a48      	ldr	r2, [pc, #288]	; (8002880 <set_wall+0x438>)
 800275e:	f992 2000 	ldrsb.w	r2, [r2]
 8002762:	4611      	mov	r1, r2
 8002764:	4a45      	ldr	r2, [pc, #276]	; (800287c <set_wall+0x434>)
 8002766:	f992 2000 	ldrsb.w	r2, [r2]
 800276a:	4614      	mov	r4, r2
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	b2d8      	uxtb	r0, r3
 8002772:	4a44      	ldr	r2, [pc, #272]	; (8002884 <set_wall+0x43c>)
 8002774:	460b      	mov	r3, r1
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	4423      	add	r3, r4
 8002780:	4602      	mov	r2, r0
 8002782:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002784:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <set_wall+0x438>)
 8002786:	f993 3000 	ldrsb.w	r3, [r3]
 800278a:	2b08      	cmp	r3, #8
 800278c:	dc23      	bgt.n	80027d6 <set_wall+0x38e>
 800278e:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <set_wall+0x438>)
 8002790:	f993 3000 	ldrsb.w	r3, [r3]
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	4b39      	ldr	r3, [pc, #228]	; (800287c <set_wall+0x434>)
 8002798:	f993 3000 	ldrsb.w	r3, [r3]
 800279c:	4618      	mov	r0, r3
 800279e:	4939      	ldr	r1, [pc, #228]	; (8002884 <set_wall+0x43c>)
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	440b      	add	r3, r1
 80027aa:	4403      	add	r3, r0
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	4a34      	ldr	r2, [pc, #208]	; (8002880 <set_wall+0x438>)
 80027b0:	f992 2000 	ldrsb.w	r2, [r2]
 80027b4:	3201      	adds	r2, #1
 80027b6:	4931      	ldr	r1, [pc, #196]	; (800287c <set_wall+0x434>)
 80027b8:	f991 1000 	ldrsb.w	r1, [r1]
 80027bc:	460c      	mov	r4, r1
 80027be:	f043 0302 	orr.w	r3, r3, #2
 80027c2:	b2d8      	uxtb	r0, r3
 80027c4:	492f      	ldr	r1, [pc, #188]	; (8002884 <set_wall+0x43c>)
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	440b      	add	r3, r1
 80027d0:	4423      	add	r3, r4
 80027d2:	4602      	mov	r2, r0
 80027d4:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 80027d6:	797b      	ldrb	r3, [r7, #5]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8253 	beq.w	8002c84 <set_wall+0x83c>
				maze[y][x] |= right_wall;
 80027de:	4b28      	ldr	r3, [pc, #160]	; (8002880 <set_wall+0x438>)
 80027e0:	f993 3000 	ldrsb.w	r3, [r3]
 80027e4:	4619      	mov	r1, r3
 80027e6:	4b25      	ldr	r3, [pc, #148]	; (800287c <set_wall+0x434>)
 80027e8:	f993 3000 	ldrsb.w	r3, [r3]
 80027ec:	4618      	mov	r0, r3
 80027ee:	4a25      	ldr	r2, [pc, #148]	; (8002884 <set_wall+0x43c>)
 80027f0:	460b      	mov	r3, r1
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	4403      	add	r3, r0
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	4a20      	ldr	r2, [pc, #128]	; (8002880 <set_wall+0x438>)
 8002800:	f992 2000 	ldrsb.w	r2, [r2]
 8002804:	4611      	mov	r1, r2
 8002806:	4a1d      	ldr	r2, [pc, #116]	; (800287c <set_wall+0x434>)
 8002808:	f992 2000 	ldrsb.w	r2, [r2]
 800280c:	4614      	mov	r4, r2
 800280e:	f043 0304 	orr.w	r3, r3, #4
 8002812:	b2d8      	uxtb	r0, r3
 8002814:	4a1b      	ldr	r2, [pc, #108]	; (8002884 <set_wall+0x43c>)
 8002816:	460b      	mov	r3, r1
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	4423      	add	r3, r4
 8002822:	4602      	mov	r2, r0
 8002824:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <set_wall+0x434>)
 8002828:	f993 3000 	ldrsb.w	r3, [r3]
 800282c:	2b08      	cmp	r3, #8
 800282e:	f300 8229 	bgt.w	8002c84 <set_wall+0x83c>
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <set_wall+0x438>)
 8002834:	f993 3000 	ldrsb.w	r3, [r3]
 8002838:	4618      	mov	r0, r3
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <set_wall+0x434>)
 800283c:	f993 3000 	ldrsb.w	r3, [r3]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	4910      	ldr	r1, [pc, #64]	; (8002884 <set_wall+0x43c>)
 8002844:	4603      	mov	r3, r0
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4403      	add	r3, r0
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	440b      	add	r3, r1
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <set_wall+0x438>)
 8002854:	f992 2000 	ldrsb.w	r2, [r2]
 8002858:	4610      	mov	r0, r2
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <set_wall+0x434>)
 800285c:	f992 2000 	ldrsb.w	r2, [r2]
 8002860:	3201      	adds	r2, #1
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	b2dc      	uxtb	r4, r3
 8002868:	4906      	ldr	r1, [pc, #24]	; (8002884 <set_wall+0x43c>)
 800286a:	4603      	mov	r3, r0
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4403      	add	r3, r0
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	440b      	add	r3, r1
 8002874:	4413      	add	r3, r2
 8002876:	4622      	mov	r2, r4
 8002878:	701a      	strb	r2, [r3, #0]
			}
			break;
 800287a:	e203      	b.n	8002c84 <set_wall+0x83c>
 800287c:	20000418 	.word	0x20000418
 8002880:	20000419 	.word	0x20000419
 8002884:	20000548 	.word	0x20000548
		case north:
			y--;
 8002888:	4b7d      	ldr	r3, [pc, #500]	; (8002a80 <set_wall+0x638>)
 800288a:	f993 3000 	ldrsb.w	r3, [r3]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	b25a      	sxtb	r2, r3
 8002896:	4b7a      	ldr	r3, [pc, #488]	; (8002a80 <set_wall+0x638>)
 8002898:	701a      	strb	r2, [r3, #0]
			if(rbl){
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d04c      	beq.n	800293a <set_wall+0x4f2>
				maze[y][x] |= left_wall;
 80028a0:	4b77      	ldr	r3, [pc, #476]	; (8002a80 <set_wall+0x638>)
 80028a2:	f993 3000 	ldrsb.w	r3, [r3]
 80028a6:	4619      	mov	r1, r3
 80028a8:	4b76      	ldr	r3, [pc, #472]	; (8002a84 <set_wall+0x63c>)
 80028aa:	f993 3000 	ldrsb.w	r3, [r3]
 80028ae:	4618      	mov	r0, r3
 80028b0:	4a75      	ldr	r2, [pc, #468]	; (8002a88 <set_wall+0x640>)
 80028b2:	460b      	mov	r3, r1
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	4403      	add	r3, r0
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	4a6f      	ldr	r2, [pc, #444]	; (8002a80 <set_wall+0x638>)
 80028c2:	f992 2000 	ldrsb.w	r2, [r2]
 80028c6:	4611      	mov	r1, r2
 80028c8:	4a6e      	ldr	r2, [pc, #440]	; (8002a84 <set_wall+0x63c>)
 80028ca:	f992 2000 	ldrsb.w	r2, [r2]
 80028ce:	4614      	mov	r4, r2
 80028d0:	f043 0308 	orr.w	r3, r3, #8
 80028d4:	b2d8      	uxtb	r0, r3
 80028d6:	4a6c      	ldr	r2, [pc, #432]	; (8002a88 <set_wall+0x640>)
 80028d8:	460b      	mov	r3, r1
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	4423      	add	r3, r4
 80028e4:	4602      	mov	r2, r0
 80028e6:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 80028e8:	4b66      	ldr	r3, [pc, #408]	; (8002a84 <set_wall+0x63c>)
 80028ea:	f993 3000 	ldrsb.w	r3, [r3]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	dd23      	ble.n	800293a <set_wall+0x4f2>
 80028f2:	4b63      	ldr	r3, [pc, #396]	; (8002a80 <set_wall+0x638>)
 80028f4:	f993 3000 	ldrsb.w	r3, [r3]
 80028f8:	4618      	mov	r0, r3
 80028fa:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <set_wall+0x63c>)
 80028fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002900:	1e5a      	subs	r2, r3, #1
 8002902:	4961      	ldr	r1, [pc, #388]	; (8002a88 <set_wall+0x640>)
 8002904:	4603      	mov	r3, r0
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4403      	add	r3, r0
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	440b      	add	r3, r1
 800290e:	4413      	add	r3, r2
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	4a5b      	ldr	r2, [pc, #364]	; (8002a80 <set_wall+0x638>)
 8002914:	f992 2000 	ldrsb.w	r2, [r2]
 8002918:	4610      	mov	r0, r2
 800291a:	4a5a      	ldr	r2, [pc, #360]	; (8002a84 <set_wall+0x63c>)
 800291c:	f992 2000 	ldrsb.w	r2, [r2]
 8002920:	3a01      	subs	r2, #1
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	b2dc      	uxtb	r4, r3
 8002928:	4957      	ldr	r1, [pc, #348]	; (8002a88 <set_wall+0x640>)
 800292a:	4603      	mov	r3, r0
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4403      	add	r3, r0
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	440b      	add	r3, r1
 8002934:	4413      	add	r3, r2
 8002936:	4622      	mov	r2, r4
 8002938:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 800293a:	79bb      	ldrb	r3, [r7, #6]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d04c      	beq.n	80029da <set_wall+0x592>
				maze[y][x] |= right_wall;
 8002940:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <set_wall+0x638>)
 8002942:	f993 3000 	ldrsb.w	r3, [r3]
 8002946:	4619      	mov	r1, r3
 8002948:	4b4e      	ldr	r3, [pc, #312]	; (8002a84 <set_wall+0x63c>)
 800294a:	f993 3000 	ldrsb.w	r3, [r3]
 800294e:	4618      	mov	r0, r3
 8002950:	4a4d      	ldr	r2, [pc, #308]	; (8002a88 <set_wall+0x640>)
 8002952:	460b      	mov	r3, r1
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	4403      	add	r3, r0
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	4a47      	ldr	r2, [pc, #284]	; (8002a80 <set_wall+0x638>)
 8002962:	f992 2000 	ldrsb.w	r2, [r2]
 8002966:	4611      	mov	r1, r2
 8002968:	4a46      	ldr	r2, [pc, #280]	; (8002a84 <set_wall+0x63c>)
 800296a:	f992 2000 	ldrsb.w	r2, [r2]
 800296e:	4614      	mov	r4, r2
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	b2d8      	uxtb	r0, r3
 8002976:	4a44      	ldr	r2, [pc, #272]	; (8002a88 <set_wall+0x640>)
 8002978:	460b      	mov	r3, r1
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	4423      	add	r3, r4
 8002984:	4602      	mov	r2, r0
 8002986:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002988:	4b3e      	ldr	r3, [pc, #248]	; (8002a84 <set_wall+0x63c>)
 800298a:	f993 3000 	ldrsb.w	r3, [r3]
 800298e:	2b08      	cmp	r3, #8
 8002990:	dc23      	bgt.n	80029da <set_wall+0x592>
 8002992:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <set_wall+0x638>)
 8002994:	f993 3000 	ldrsb.w	r3, [r3]
 8002998:	4618      	mov	r0, r3
 800299a:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <set_wall+0x63c>)
 800299c:	f993 3000 	ldrsb.w	r3, [r3]
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	4939      	ldr	r1, [pc, #228]	; (8002a88 <set_wall+0x640>)
 80029a4:	4603      	mov	r3, r0
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4403      	add	r3, r0
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	440b      	add	r3, r1
 80029ae:	4413      	add	r3, r2
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	4a33      	ldr	r2, [pc, #204]	; (8002a80 <set_wall+0x638>)
 80029b4:	f992 2000 	ldrsb.w	r2, [r2]
 80029b8:	4610      	mov	r0, r2
 80029ba:	4a32      	ldr	r2, [pc, #200]	; (8002a84 <set_wall+0x63c>)
 80029bc:	f992 2000 	ldrsb.w	r2, [r2]
 80029c0:	3201      	adds	r2, #1
 80029c2:	f043 0308 	orr.w	r3, r3, #8
 80029c6:	b2dc      	uxtb	r4, r3
 80029c8:	492f      	ldr	r1, [pc, #188]	; (8002a88 <set_wall+0x640>)
 80029ca:	4603      	mov	r3, r0
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4403      	add	r3, r0
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	440b      	add	r3, r1
 80029d4:	4413      	add	r3, r2
 80029d6:	4622      	mov	r2, r4
 80029d8:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 80029da:	797b      	ldrb	r3, [r7, #5]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 8153 	beq.w	8002c88 <set_wall+0x840>
				maze[y][x] |= top_wall;
 80029e2:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <set_wall+0x638>)
 80029e4:	f993 3000 	ldrsb.w	r3, [r3]
 80029e8:	4619      	mov	r1, r3
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <set_wall+0x63c>)
 80029ec:	f993 3000 	ldrsb.w	r3, [r3]
 80029f0:	4618      	mov	r0, r3
 80029f2:	4a25      	ldr	r2, [pc, #148]	; (8002a88 <set_wall+0x640>)
 80029f4:	460b      	mov	r3, r1
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	4403      	add	r3, r0
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	4a1f      	ldr	r2, [pc, #124]	; (8002a80 <set_wall+0x638>)
 8002a04:	f992 2000 	ldrsb.w	r2, [r2]
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4a1e      	ldr	r2, [pc, #120]	; (8002a84 <set_wall+0x63c>)
 8002a0c:	f992 2000 	ldrsb.w	r2, [r2]
 8002a10:	4614      	mov	r4, r2
 8002a12:	f043 0302 	orr.w	r3, r3, #2
 8002a16:	b2d8      	uxtb	r0, r3
 8002a18:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <set_wall+0x640>)
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	4413      	add	r3, r2
 8002a24:	4423      	add	r3, r4
 8002a26:	4602      	mov	r2, r0
 8002a28:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <set_wall+0x638>)
 8002a2c:	f993 3000 	ldrsb.w	r3, [r3]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f340 8129 	ble.w	8002c88 <set_wall+0x840>
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <set_wall+0x638>)
 8002a38:	f993 3000 	ldrsb.w	r3, [r3]
 8002a3c:	1e5a      	subs	r2, r3, #1
 8002a3e:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <set_wall+0x63c>)
 8002a40:	f993 3000 	ldrsb.w	r3, [r3]
 8002a44:	4618      	mov	r0, r3
 8002a46:	4910      	ldr	r1, [pc, #64]	; (8002a88 <set_wall+0x640>)
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	440b      	add	r3, r1
 8002a52:	4403      	add	r3, r0
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <set_wall+0x638>)
 8002a58:	f992 2000 	ldrsb.w	r2, [r2]
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	4909      	ldr	r1, [pc, #36]	; (8002a84 <set_wall+0x63c>)
 8002a60:	f991 1000 	ldrsb.w	r1, [r1]
 8002a64:	460c      	mov	r4, r1
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	b2d8      	uxtb	r0, r3
 8002a6c:	4906      	ldr	r1, [pc, #24]	; (8002a88 <set_wall+0x640>)
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	440b      	add	r3, r1
 8002a78:	4423      	add	r3, r4
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a7e:	e103      	b.n	8002c88 <set_wall+0x840>
 8002a80:	20000419 	.word	0x20000419
 8002a84:	20000418 	.word	0x20000418
 8002a88:	20000548 	.word	0x20000548
		case south:
			y++;
 8002a8c:	4b82      	ldr	r3, [pc, #520]	; (8002c98 <set_wall+0x850>)
 8002a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	b25a      	sxtb	r2, r3
 8002a9a:	4b7f      	ldr	r3, [pc, #508]	; (8002c98 <set_wall+0x850>)
 8002a9c:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d04c      	beq.n	8002b3e <set_wall+0x6f6>
				maze[y][x] |= right_wall;
 8002aa4:	4b7c      	ldr	r3, [pc, #496]	; (8002c98 <set_wall+0x850>)
 8002aa6:	f993 3000 	ldrsb.w	r3, [r3]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4b7b      	ldr	r3, [pc, #492]	; (8002c9c <set_wall+0x854>)
 8002aae:	f993 3000 	ldrsb.w	r3, [r3]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	4a7a      	ldr	r2, [pc, #488]	; (8002ca0 <set_wall+0x858>)
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	4403      	add	r3, r0
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	4a74      	ldr	r2, [pc, #464]	; (8002c98 <set_wall+0x850>)
 8002ac6:	f992 2000 	ldrsb.w	r2, [r2]
 8002aca:	4611      	mov	r1, r2
 8002acc:	4a73      	ldr	r2, [pc, #460]	; (8002c9c <set_wall+0x854>)
 8002ace:	f992 2000 	ldrsb.w	r2, [r2]
 8002ad2:	4614      	mov	r4, r2
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	b2d8      	uxtb	r0, r3
 8002ada:	4a71      	ldr	r2, [pc, #452]	; (8002ca0 <set_wall+0x858>)
 8002adc:	460b      	mov	r3, r1
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4423      	add	r3, r4
 8002ae8:	4602      	mov	r2, r0
 8002aea:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002aec:	4b6b      	ldr	r3, [pc, #428]	; (8002c9c <set_wall+0x854>)
 8002aee:	f993 3000 	ldrsb.w	r3, [r3]
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	dc23      	bgt.n	8002b3e <set_wall+0x6f6>
 8002af6:	4b68      	ldr	r3, [pc, #416]	; (8002c98 <set_wall+0x850>)
 8002af8:	f993 3000 	ldrsb.w	r3, [r3]
 8002afc:	4618      	mov	r0, r3
 8002afe:	4b67      	ldr	r3, [pc, #412]	; (8002c9c <set_wall+0x854>)
 8002b00:	f993 3000 	ldrsb.w	r3, [r3]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	4966      	ldr	r1, [pc, #408]	; (8002ca0 <set_wall+0x858>)
 8002b08:	4603      	mov	r3, r0
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4403      	add	r3, r0
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	440b      	add	r3, r1
 8002b12:	4413      	add	r3, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	4a60      	ldr	r2, [pc, #384]	; (8002c98 <set_wall+0x850>)
 8002b18:	f992 2000 	ldrsb.w	r2, [r2]
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4a5f      	ldr	r2, [pc, #380]	; (8002c9c <set_wall+0x854>)
 8002b20:	f992 2000 	ldrsb.w	r2, [r2]
 8002b24:	3201      	adds	r2, #1
 8002b26:	f043 0308 	orr.w	r3, r3, #8
 8002b2a:	b2dc      	uxtb	r4, r3
 8002b2c:	495c      	ldr	r1, [pc, #368]	; (8002ca0 <set_wall+0x858>)
 8002b2e:	4603      	mov	r3, r0
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4403      	add	r3, r0
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	440b      	add	r3, r1
 8002b38:	4413      	add	r3, r2
 8002b3a:	4622      	mov	r2, r4
 8002b3c:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002b3e:	79bb      	ldrb	r3, [r7, #6]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d04c      	beq.n	8002bde <set_wall+0x796>
				maze[y][x] |= left_wall;
 8002b44:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <set_wall+0x850>)
 8002b46:	f993 3000 	ldrsb.w	r3, [r3]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <set_wall+0x854>)
 8002b4e:	f993 3000 	ldrsb.w	r3, [r3]
 8002b52:	4618      	mov	r0, r3
 8002b54:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <set_wall+0x858>)
 8002b56:	460b      	mov	r3, r1
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4413      	add	r3, r2
 8002b60:	4403      	add	r3, r0
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4a4c      	ldr	r2, [pc, #304]	; (8002c98 <set_wall+0x850>)
 8002b66:	f992 2000 	ldrsb.w	r2, [r2]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4a4b      	ldr	r2, [pc, #300]	; (8002c9c <set_wall+0x854>)
 8002b6e:	f992 2000 	ldrsb.w	r2, [r2]
 8002b72:	4614      	mov	r4, r2
 8002b74:	f043 0308 	orr.w	r3, r3, #8
 8002b78:	b2d8      	uxtb	r0, r3
 8002b7a:	4a49      	ldr	r2, [pc, #292]	; (8002ca0 <set_wall+0x858>)
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4413      	add	r3, r2
 8002b86:	4423      	add	r3, r4
 8002b88:	4602      	mov	r2, r0
 8002b8a:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002b8c:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <set_wall+0x854>)
 8002b8e:	f993 3000 	ldrsb.w	r3, [r3]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	dd23      	ble.n	8002bde <set_wall+0x796>
 8002b96:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <set_wall+0x850>)
 8002b98:	f993 3000 	ldrsb.w	r3, [r3]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <set_wall+0x854>)
 8002ba0:	f993 3000 	ldrsb.w	r3, [r3]
 8002ba4:	1e5a      	subs	r2, r3, #1
 8002ba6:	493e      	ldr	r1, [pc, #248]	; (8002ca0 <set_wall+0x858>)
 8002ba8:	4603      	mov	r3, r0
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4403      	add	r3, r0
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	440b      	add	r3, r1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	4a38      	ldr	r2, [pc, #224]	; (8002c98 <set_wall+0x850>)
 8002bb8:	f992 2000 	ldrsb.w	r2, [r2]
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4a37      	ldr	r2, [pc, #220]	; (8002c9c <set_wall+0x854>)
 8002bc0:	f992 2000 	ldrsb.w	r2, [r2]
 8002bc4:	3a01      	subs	r2, #1
 8002bc6:	f043 0304 	orr.w	r3, r3, #4
 8002bca:	b2dc      	uxtb	r4, r3
 8002bcc:	4934      	ldr	r1, [pc, #208]	; (8002ca0 <set_wall+0x858>)
 8002bce:	4603      	mov	r3, r0
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4403      	add	r3, r0
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	440b      	add	r3, r1
 8002bd8:	4413      	add	r3, r2
 8002bda:	4622      	mov	r2, r4
 8002bdc:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002bde:	797b      	ldrb	r3, [r7, #5]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d053      	beq.n	8002c8c <set_wall+0x844>
				maze[y][x] |= bottom_wall;
 8002be4:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <set_wall+0x850>)
 8002be6:	f993 3000 	ldrsb.w	r3, [r3]
 8002bea:	4619      	mov	r1, r3
 8002bec:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <set_wall+0x854>)
 8002bee:	f993 3000 	ldrsb.w	r3, [r3]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	4a2a      	ldr	r2, [pc, #168]	; (8002ca0 <set_wall+0x858>)
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	4403      	add	r3, r0
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <set_wall+0x850>)
 8002c06:	f992 2000 	ldrsb.w	r2, [r2]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4a23      	ldr	r2, [pc, #140]	; (8002c9c <set_wall+0x854>)
 8002c0e:	f992 2000 	ldrsb.w	r2, [r2]
 8002c12:	4614      	mov	r4, r2
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	b2d8      	uxtb	r0, r3
 8002c1a:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <set_wall+0x858>)
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	4423      	add	r3, r4
 8002c28:	4602      	mov	r2, r0
 8002c2a:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <set_wall+0x850>)
 8002c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	dc2a      	bgt.n	8002c8c <set_wall+0x844>
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <set_wall+0x850>)
 8002c38:	f993 3000 	ldrsb.w	r3, [r3]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <set_wall+0x854>)
 8002c40:	f993 3000 	ldrsb.w	r3, [r3]
 8002c44:	4618      	mov	r0, r3
 8002c46:	4916      	ldr	r1, [pc, #88]	; (8002ca0 <set_wall+0x858>)
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	440b      	add	r3, r1
 8002c52:	4403      	add	r3, r0
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <set_wall+0x850>)
 8002c58:	f992 2000 	ldrsb.w	r2, [r2]
 8002c5c:	3201      	adds	r2, #1
 8002c5e:	490f      	ldr	r1, [pc, #60]	; (8002c9c <set_wall+0x854>)
 8002c60:	f991 1000 	ldrsb.w	r1, [r1]
 8002c64:	460c      	mov	r4, r1
 8002c66:	f043 0302 	orr.w	r3, r3, #2
 8002c6a:	b2d8      	uxtb	r0, r3
 8002c6c:	490c      	ldr	r1, [pc, #48]	; (8002ca0 <set_wall+0x858>)
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	440b      	add	r3, r1
 8002c78:	4423      	add	r3, r4
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002c7e:	e005      	b.n	8002c8c <set_wall+0x844>
			break;
 8002c80:	bf00      	nop
 8002c82:	e004      	b.n	8002c8e <set_wall+0x846>
			break;
 8002c84:	bf00      	nop
 8002c86:	e002      	b.n	8002c8e <set_wall+0x846>
			break;
 8002c88:	bf00      	nop
 8002c8a:	e000      	b.n	8002c8e <set_wall+0x846>
			break;
 8002c8c:	bf00      	nop
	}
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc90      	pop	{r4, r7}
 8002c96:	4770      	bx	lr
 8002c98:	20000419 	.word	0x20000419
 8002c9c:	20000418 	.word	0x20000418
 8002ca0:	20000548 	.word	0x20000548

08002ca4 <sensor_init>:
VL53L0X_Version_t *pVersion[n_vl53l0x];
VL53L0X_DeviceInfo_t DeviceInfo[n_vl53l0x];



void sensor_init(){
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 8002caa:	2200      	movs	r2, #0
 8002cac:	217e      	movs	r1, #126	; 0x7e
 8002cae:	483a      	ldr	r0, [pc, #232]	; (8002d98 <sensor_init+0xf4>)
 8002cb0:	f001 fdc2 	bl	8004838 <HAL_GPIO_WritePin>
            |xSHUT_4_Pin|xSHUT_5_Pin, GPIO_PIN_RESET);
	HAL_Delay(100);
 8002cb4:	2064      	movs	r0, #100	; 0x64
 8002cb6:	f001 fad7 	bl	8004268 <HAL_Delay>
	uint8_t addr = 0x54;
 8002cba:	2354      	movs	r3, #84	; 0x54
 8002cbc:	71fb      	strb	r3, [r7, #7]
	for(int i = 0 ; i < n_vl53l0x; i++){
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	e060      	b.n	8002d86 <sensor_init+0xe2>
		pMyDevice[i] = &MyDevice[i];
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	4a33      	ldr	r2, [pc, #204]	; (8002d9c <sensor_init+0xf8>)
 8002cd0:	441a      	add	r2, r3
 8002cd2:	4933      	ldr	r1, [pc, #204]	; (8002da0 <sensor_init+0xfc>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		pMyDevice[i]->I2cDevAddr      = 0x52;
 8002cda:	4a31      	ldr	r2, [pc, #196]	; (8002da0 <sensor_init+0xfc>)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce2:	2252      	movs	r2, #82	; 0x52
 8002ce4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		pMyDevice[i]->comms_type      =  1;
 8002ce8:	4a2d      	ldr	r2, [pc, #180]	; (8002da0 <sensor_init+0xfc>)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		pMyDevice[i]->comms_speed_khz =  100;
 8002cf6:	4a2a      	ldr	r2, [pc, #168]	; (8002da0 <sensor_init+0xfc>)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfe:	2264      	movs	r2, #100	; 0x64
 8002d00:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
		pMyDevice[i]->I2cHandle = &hi2c1;
 8002d04:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <sensor_init+0xfc>)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0c:	4a25      	ldr	r2, [pc, #148]	; (8002da4 <sensor_init+0x100>)
 8002d0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		pVersion[i] = &Version[i];
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4a24      	ldr	r2, [pc, #144]	; (8002da8 <sensor_init+0x104>)
 8002d18:	441a      	add	r2, r3
 8002d1a:	4924      	ldr	r1, [pc, #144]	; (8002dac <sensor_init+0x108>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_GPIO_WritePin(GPIOA, ((uint16_t)0x0002) << i, GPIO_PIN_SET);
 8002d22:	2202      	movs	r2, #2
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4819      	ldr	r0, [pc, #100]	; (8002d98 <sensor_init+0xf4>)
 8002d32:	f001 fd81 	bl	8004838 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8002d36:	2064      	movs	r0, #100	; 0x64
 8002d38:	f001 fa96 	bl	8004268 <HAL_Delay>
		status_debug = vl53l0x_init(pMyDevice[i], pVersion[i], &DeviceInfo[i], addr);
 8002d3c:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <sensor_init+0xfc>)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002d44:	4a19      	ldr	r2, [pc, #100]	; (8002dac <sensor_init+0x108>)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	4413      	add	r3, r2
 8002d58:	4a15      	ldr	r2, [pc, #84]	; (8002db0 <sensor_init+0x10c>)
 8002d5a:	441a      	add	r2, r3
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	f008 fe9b 	bl	800ba98 <vl53l0x_init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <sensor_init+0x110>)
 8002d68:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8002d6a:	2064      	movs	r0, #100	; 0x64
 8002d6c:	f001 fa7c 	bl	8004268 <HAL_Delay>
		addr+=2;
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	3302      	adds	r3, #2
 8002d74:	71fb      	strb	r3, [r7, #7]
		if(status_debug != VL53L0X_ERROR_NONE)
 8002d76:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <sensor_init+0x110>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	b25b      	sxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d106      	bne.n	8002d8e <sensor_init+0xea>
	for(int i = 0 ; i < n_vl53l0x; i++){
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	3301      	adds	r3, #1
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	dd9b      	ble.n	8002cc4 <sensor_init+0x20>
			break;
	}
}
 8002d8c:	e000      	b.n	8002d90 <sensor_init+0xec>
			break;
 8002d8e:	bf00      	nop
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40010800 	.word	0x40010800
 8002d9c:	2000062c 	.word	0x2000062c
 8002da0:	20000f5c 	.word	0x20000f5c
 8002da4:	2000041c 	.word	0x2000041c
 8002da8:	20000f74 	.word	0x20000f74
 8002dac:	20000fa4 	.word	0x20000fa4
 8002db0:	20000fbc 	.word	0x20000fbc
 8002db4:	20000628 	.word	0x20000628

08002db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dbc:	f001 f9f2 	bl	80041a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dc0:	f000 f8dc 	bl	8002f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dc4:	f000 faba 	bl	800333c <MX_GPIO_Init>
  MX_TIM1_Init();
 8002dc8:	f000 f94c 	bl	8003064 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002dcc:	f000 fa0e 	bl	80031ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8002dd0:	f000 fa60 	bl	8003294 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002dd4:	f000 f918 	bl	8003008 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4857      	ldr	r0, [pc, #348]	; (8002f38 <main+0x180>)
 8002ddc:	f003 fa90 	bl	8006300 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002de0:	2104      	movs	r1, #4
 8002de2:	4855      	ldr	r0, [pc, #340]	; (8002f38 <main+0x180>)
 8002de4:	f003 fa8c 	bl	8006300 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002de8:	2108      	movs	r1, #8
 8002dea:	4853      	ldr	r0, [pc, #332]	; (8002f38 <main+0x180>)
 8002dec:	f003 fa88 	bl	8006300 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002df0:	210c      	movs	r1, #12
 8002df2:	4851      	ldr	r0, [pc, #324]	; (8002f38 <main+0x180>)
 8002df4:	f003 fa84 	bl	8006300 <HAL_TIM_PWM_Start>
  	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002df8:	213c      	movs	r1, #60	; 0x3c
 8002dfa:	4850      	ldr	r0, [pc, #320]	; (8002f3c <main+0x184>)
 8002dfc:	f003 fbc4 	bl	8006588 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Base_Start_IT(&htim2);
 8002e00:	484e      	ldr	r0, [pc, #312]	; (8002f3c <main+0x184>)
 8002e02:	f003 f9d3 	bl	80061ac <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002e06:	213c      	movs	r1, #60	; 0x3c
 8002e08:	484d      	ldr	r0, [pc, #308]	; (8002f40 <main+0x188>)
 8002e0a:	f003 fbbd 	bl	8006588 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Base_Start_IT(&htim3);
 8002e0e:	484c      	ldr	r0, [pc, #304]	; (8002f40 <main+0x188>)
 8002e10:	f003 f9cc 	bl	80061ac <HAL_TIM_Base_Start_IT>
	HAL_Delay(2000);
 8002e14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e18:	f001 fa26 	bl	8004268 <HAL_Delay>

	Rmode = 0;
 8002e1c:	4b49      	ldr	r3, [pc, #292]	; (8002f44 <main+0x18c>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]
	status = 0;
 8002e22:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <main+0x190>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 8002e28:	4b43      	ldr	r3, [pc, #268]	; (8002f38 <main+0x180>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a42      	ldr	r2, [pc, #264]	; (8002f38 <main+0x180>)
 8002e2e:	68d2      	ldr	r2, [r2, #12]
 8002e30:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 8002e32:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <main+0x180>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a40      	ldr	r2, [pc, #256]	; (8002f38 <main+0x180>)
 8002e38:	68d2      	ldr	r2, [r2, #12]
 8002e3a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 8002e3c:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <main+0x180>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a3d      	ldr	r2, [pc, #244]	; (8002f38 <main+0x180>)
 8002e42:	68d2      	ldr	r2, [r2, #12]
 8002e44:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 8002e46:	4b3c      	ldr	r3, [pc, #240]	; (8002f38 <main+0x180>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a3b      	ldr	r2, [pc, #236]	; (8002f38 <main+0x180>)
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(2000);
 8002e50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e54:	f001 fa08 	bl	8004268 <HAL_Delay>
	sensor_init();
 8002e58:	f7ff ff24 	bl	8002ca4 <sensor_init>
	if(status_debug == VL53L0X_ERROR_NONE){
 8002e5c:	4b3b      	ldr	r3, [pc, #236]	; (8002f4c <main+0x194>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b25b      	sxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d105      	bne.n	8002e72 <main+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002e66:	2201      	movs	r2, #1
 8002e68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e6c:	4838      	ldr	r0, [pc, #224]	; (8002f50 <main+0x198>)
 8002e6e:	f001 fce3 	bl	8004838 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		vl53l0x_GetRanging_now(pMyDevice[0], &ts1);
 8002e72:	4b38      	ldr	r3, [pc, #224]	; (8002f54 <main+0x19c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4938      	ldr	r1, [pc, #224]	; (8002f58 <main+0x1a0>)
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f008 fea3 	bl	800bbc4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(pMyDevice[1], &ts2);
 8002e7e:	4b35      	ldr	r3, [pc, #212]	; (8002f54 <main+0x19c>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4936      	ldr	r1, [pc, #216]	; (8002f5c <main+0x1a4>)
 8002e84:	4618      	mov	r0, r3
 8002e86:	f008 fe9d 	bl	800bbc4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(pMyDevice[2], &ts3);
 8002e8a:	4b32      	ldr	r3, [pc, #200]	; (8002f54 <main+0x19c>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	4934      	ldr	r1, [pc, #208]	; (8002f60 <main+0x1a8>)
 8002e90:	4618      	mov	r0, r3
 8002e92:	f008 fe97 	bl	800bbc4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(pMyDevice[3], &ts4);
 8002e96:	4b2f      	ldr	r3, [pc, #188]	; (8002f54 <main+0x19c>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	4932      	ldr	r1, [pc, #200]	; (8002f64 <main+0x1ac>)
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f008 fe91 	bl	800bbc4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(pMyDevice[4], &ts5);
 8002ea2:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <main+0x19c>)
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	4930      	ldr	r1, [pc, #192]	; (8002f68 <main+0x1b0>)
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f008 fe8b 	bl	800bbc4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(pMyDevice[5], &ts6);
 8002eae:	4b29      	ldr	r3, [pc, #164]	; (8002f54 <main+0x19c>)
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	492e      	ldr	r1, [pc, #184]	; (8002f6c <main+0x1b4>)
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f008 fe85 	bl	800bbc4 <vl53l0x_GetRanging_now>
		a = TIM2->CNT;
 8002eba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <main+0x1b8>)
 8002ec4:	601a      	str	r2, [r3, #0]
		b = TIM3->CNT;
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <main+0x1bc>)
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b2a      	ldr	r3, [pc, #168]	; (8002f78 <main+0x1c0>)
 8002ece:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Rmode == 1) {
 8002ed0:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <main+0x18c>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d114      	bne.n	8002f04 <main+0x14c>
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002eda:	2006      	movs	r0, #6
 8002edc:	f001 fb0d 	bl	80044fa <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8002ee0:	2007      	movs	r0, #7
 8002ee2:	f001 fb0a 	bl	80044fa <HAL_NVIC_DisableIRQ>
			HAL_Delay(2000);
 8002ee6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002eea:	f001 f9bd 	bl	8004268 <HAL_Delay>
			start_fill();
 8002eee:	f7fd fe1f 	bl	8000b30 <start_fill>
			//findShortestPath();
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ef2:	2006      	movs	r0, #6
 8002ef4:	f001 faf3 	bl	80044de <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002ef8:	2007      	movs	r0, #7
 8002efa:	f001 faf0 	bl	80044de <HAL_NVIC_EnableIRQ>
			Rmode = 0;
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <main+0x18c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
		}
		if (Rmode == 2) {
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <main+0x18c>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d1b1      	bne.n	8002e72 <main+0xba>
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002f0e:	2006      	movs	r0, #6
 8002f10:	f001 faf3 	bl	80044fa <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8002f14:	2007      	movs	r0, #7
 8002f16:	f001 faf0 	bl	80044fa <HAL_NVIC_DisableIRQ>
							go_straight(shortestPath[i], true);
						}
				}
			}
			*/
			HAL_Delay(500);
 8002f1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f1e:	f001 f9a3 	bl	8004268 <HAL_Delay>
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f22:	2006      	movs	r0, #6
 8002f24:	f001 fadb 	bl	80044de <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002f28:	2007      	movs	r0, #7
 8002f2a:	f001 fad8 	bl	80044de <HAL_NVIC_EnableIRQ>
			Rmode = 0;
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <main+0x18c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
		vl53l0x_GetRanging_now(pMyDevice[0], &ts1);
 8002f34:	e79d      	b.n	8002e72 <main+0xba>
 8002f36:	bf00      	nop
 8002f38:	20000470 	.word	0x20000470
 8002f3c:	200004b8 	.word	0x200004b8
 8002f40:	20000500 	.word	0x20000500
 8002f44:	20000610 	.word	0x20000610
 8002f48:	20000611 	.word	0x20000611
 8002f4c:	20000628 	.word	0x20000628
 8002f50:	40011000 	.word	0x40011000
 8002f54:	20000f5c 	.word	0x20000f5c
 8002f58:	2000061c 	.word	0x2000061c
 8002f5c:	2000061e 	.word	0x2000061e
 8002f60:	20000620 	.word	0x20000620
 8002f64:	20000622 	.word	0x20000622
 8002f68:	20000624 	.word	0x20000624
 8002f6c:	20000626 	.word	0x20000626
 8002f70:	20000614 	.word	0x20000614
 8002f74:	40000400 	.word	0x40000400
 8002f78:	20000618 	.word	0x20000618

08002f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b090      	sub	sp, #64	; 0x40
 8002f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f82:	f107 0318 	add.w	r3, r7, #24
 8002f86:	2228      	movs	r2, #40	; 0x28
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f009 f8c4 	bl	800c118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fac:	2301      	movs	r3, #1
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002fba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fc0:	f107 0318 	add.w	r3, r7, #24
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f002 fca5 	bl	8005914 <HAL_RCC_OscConfig>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002fd0:	f000 fa40 	bl	8003454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fd4:	230f      	movs	r3, #15
 8002fd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fea:	1d3b      	adds	r3, r7, #4
 8002fec:	2102      	movs	r1, #2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f002 ff12 	bl	8005e18 <HAL_RCC_ClockConfig>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002ffa:	f000 fa2b 	bl	8003454 <Error_Handler>
  }
}
 8002ffe:	bf00      	nop
 8003000:	3740      	adds	r7, #64	; 0x40
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <MX_I2C1_Init+0x50>)
 800300e:	4a13      	ldr	r2, [pc, #76]	; (800305c <MX_I2C1_Init+0x54>)
 8003010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <MX_I2C1_Init+0x50>)
 8003014:	4a12      	ldr	r2, [pc, #72]	; (8003060 <MX_I2C1_Init+0x58>)
 8003016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <MX_I2C1_Init+0x50>)
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <MX_I2C1_Init+0x50>)
 8003020:	2200      	movs	r2, #0
 8003022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <MX_I2C1_Init+0x50>)
 8003026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800302a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <MX_I2C1_Init+0x50>)
 800302e:	2200      	movs	r2, #0
 8003030:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <MX_I2C1_Init+0x50>)
 8003034:	2200      	movs	r2, #0
 8003036:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003038:	4b07      	ldr	r3, [pc, #28]	; (8003058 <MX_I2C1_Init+0x50>)
 800303a:	2200      	movs	r2, #0
 800303c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <MX_I2C1_Init+0x50>)
 8003040:	2200      	movs	r2, #0
 8003042:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003044:	4804      	ldr	r0, [pc, #16]	; (8003058 <MX_I2C1_Init+0x50>)
 8003046:	f001 fc31 	bl	80048ac <HAL_I2C_Init>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003050:	f000 fa00 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003054:	bf00      	nop
 8003056:	bd80      	pop	{r7, pc}
 8003058:	2000041c 	.word	0x2000041c
 800305c:	40005400 	.word	0x40005400
 8003060:	000186a0 	.word	0x000186a0

08003064 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b096      	sub	sp, #88	; 0x58
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800306a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003078:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	60da      	str	r2, [r3, #12]
 8003090:	611a      	str	r2, [r3, #16]
 8003092:	615a      	str	r2, [r3, #20]
 8003094:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003096:	1d3b      	adds	r3, r7, #4
 8003098:	2220      	movs	r2, #32
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f009 f83b 	bl	800c118 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80030a2:	4b50      	ldr	r3, [pc, #320]	; (80031e4 <MX_TIM1_Init+0x180>)
 80030a4:	4a50      	ldr	r2, [pc, #320]	; (80031e8 <MX_TIM1_Init+0x184>)
 80030a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 80030a8:	4b4e      	ldr	r3, [pc, #312]	; (80031e4 <MX_TIM1_Init+0x180>)
 80030aa:	2263      	movs	r2, #99	; 0x63
 80030ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ae:	4b4d      	ldr	r3, [pc, #308]	; (80031e4 <MX_TIM1_Init+0x180>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80030b4:	4b4b      	ldr	r3, [pc, #300]	; (80031e4 <MX_TIM1_Init+0x180>)
 80030b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030bc:	4b49      	ldr	r3, [pc, #292]	; (80031e4 <MX_TIM1_Init+0x180>)
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030c2:	4b48      	ldr	r3, [pc, #288]	; (80031e4 <MX_TIM1_Init+0x180>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030c8:	4b46      	ldr	r3, [pc, #280]	; (80031e4 <MX_TIM1_Init+0x180>)
 80030ca:	2280      	movs	r2, #128	; 0x80
 80030cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80030ce:	4845      	ldr	r0, [pc, #276]	; (80031e4 <MX_TIM1_Init+0x180>)
 80030d0:	f003 f81c 	bl	800610c <HAL_TIM_Base_Init>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80030da:	f000 f9bb 	bl	8003454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030e8:	4619      	mov	r1, r3
 80030ea:	483e      	ldr	r0, [pc, #248]	; (80031e4 <MX_TIM1_Init+0x180>)
 80030ec:	f003 fca4 	bl	8006a38 <HAL_TIM_ConfigClockSource>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80030f6:	f000 f9ad 	bl	8003454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030fa:	483a      	ldr	r0, [pc, #232]	; (80031e4 <MX_TIM1_Init+0x180>)
 80030fc:	f003 f8a8 	bl	8006250 <HAL_TIM_PWM_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003106:	f000 f9a5 	bl	8003454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800310e:	2300      	movs	r3, #0
 8003110:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003112:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003116:	4619      	mov	r1, r3
 8003118:	4832      	ldr	r0, [pc, #200]	; (80031e4 <MX_TIM1_Init+0x180>)
 800311a:	f004 f825 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003124:	f000 f996 	bl	8003454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003128:	2360      	movs	r3, #96	; 0x60
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003130:	2300      	movs	r3, #0
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003134:	2300      	movs	r3, #0
 8003136:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003138:	2300      	movs	r3, #0
 800313a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800313c:	2300      	movs	r3, #0
 800313e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003140:	2300      	movs	r3, #0
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003148:	2200      	movs	r2, #0
 800314a:	4619      	mov	r1, r3
 800314c:	4825      	ldr	r0, [pc, #148]	; (80031e4 <MX_TIM1_Init+0x180>)
 800314e:	f003 fbb1 	bl	80068b4 <HAL_TIM_PWM_ConfigChannel>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003158:	f000 f97c 	bl	8003454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800315c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003160:	2204      	movs	r2, #4
 8003162:	4619      	mov	r1, r3
 8003164:	481f      	ldr	r0, [pc, #124]	; (80031e4 <MX_TIM1_Init+0x180>)
 8003166:	f003 fba5 	bl	80068b4 <HAL_TIM_PWM_ConfigChannel>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003170:	f000 f970 	bl	8003454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003178:	2208      	movs	r2, #8
 800317a:	4619      	mov	r1, r3
 800317c:	4819      	ldr	r0, [pc, #100]	; (80031e4 <MX_TIM1_Init+0x180>)
 800317e:	f003 fb99 	bl	80068b4 <HAL_TIM_PWM_ConfigChannel>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003188:	f000 f964 	bl	8003454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800318c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003190:	220c      	movs	r2, #12
 8003192:	4619      	mov	r1, r3
 8003194:	4813      	ldr	r0, [pc, #76]	; (80031e4 <MX_TIM1_Init+0x180>)
 8003196:	f003 fb8d 	bl	80068b4 <HAL_TIM_PWM_ConfigChannel>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80031a0:	f000 f958 	bl	8003454 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031be:	2300      	movs	r3, #0
 80031c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80031c2:	1d3b      	adds	r3, r7, #4
 80031c4:	4619      	mov	r1, r3
 80031c6:	4807      	ldr	r0, [pc, #28]	; (80031e4 <MX_TIM1_Init+0x180>)
 80031c8:	f004 f82c 	bl	8007224 <HAL_TIMEx_ConfigBreakDeadTime>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80031d2:	f000 f93f 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80031d6:	4803      	ldr	r0, [pc, #12]	; (80031e4 <MX_TIM1_Init+0x180>)
 80031d8:	f000 fa8a 	bl	80036f0 <HAL_TIM_MspPostInit>

}
 80031dc:	bf00      	nop
 80031de:	3758      	adds	r7, #88	; 0x58
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000470 	.word	0x20000470
 80031e8:	40012c00 	.word	0x40012c00

080031ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08c      	sub	sp, #48	; 0x30
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031f2:	f107 030c 	add.w	r3, r7, #12
 80031f6:	2224      	movs	r2, #36	; 0x24
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f008 ff8c 	bl	800c118 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003208:	4b21      	ldr	r3, [pc, #132]	; (8003290 <MX_TIM2_Init+0xa4>)
 800320a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800320e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003210:	4b1f      	ldr	r3, [pc, #124]	; (8003290 <MX_TIM2_Init+0xa4>)
 8003212:	2200      	movs	r2, #0
 8003214:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003216:	4b1e      	ldr	r3, [pc, #120]	; (8003290 <MX_TIM2_Init+0xa4>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800321c:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <MX_TIM2_Init+0xa4>)
 800321e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003222:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003224:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <MX_TIM2_Init+0xa4>)
 8003226:	2200      	movs	r2, #0
 8003228:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800322a:	4b19      	ldr	r3, [pc, #100]	; (8003290 <MX_TIM2_Init+0xa4>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003230:	2301      	movs	r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003238:	2301      	movs	r3, #1
 800323a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800323c:	2300      	movs	r3, #0
 800323e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003244:	2300      	movs	r3, #0
 8003246:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003248:	2301      	movs	r3, #1
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800324c:	2300      	movs	r3, #0
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003254:	f107 030c 	add.w	r3, r7, #12
 8003258:	4619      	mov	r1, r3
 800325a:	480d      	ldr	r0, [pc, #52]	; (8003290 <MX_TIM2_Init+0xa4>)
 800325c:	f003 f8f2 	bl	8006444 <HAL_TIM_Encoder_Init>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003266:	f000 f8f5 	bl	8003454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	4619      	mov	r1, r3
 8003276:	4806      	ldr	r0, [pc, #24]	; (8003290 <MX_TIM2_Init+0xa4>)
 8003278:	f003 ff76 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003282:	f000 f8e7 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003286:	bf00      	nop
 8003288:	3730      	adds	r7, #48	; 0x30
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	200004b8 	.word	0x200004b8

08003294 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08c      	sub	sp, #48	; 0x30
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800329a:	f107 030c 	add.w	r3, r7, #12
 800329e:	2224      	movs	r2, #36	; 0x24
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f008 ff38 	bl	800c118 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032b0:	4b20      	ldr	r3, [pc, #128]	; (8003334 <MX_TIM3_Init+0xa0>)
 80032b2:	4a21      	ldr	r2, [pc, #132]	; (8003338 <MX_TIM3_Init+0xa4>)
 80032b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80032b6:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <MX_TIM3_Init+0xa0>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032bc:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <MX_TIM3_Init+0xa0>)
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80032c2:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <MX_TIM3_Init+0xa0>)
 80032c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <MX_TIM3_Init+0xa0>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032d0:	4b18      	ldr	r3, [pc, #96]	; (8003334 <MX_TIM3_Init+0xa0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80032d6:	2301      	movs	r3, #1
 80032d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032de:	2301      	movs	r3, #1
 80032e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80032ea:	2300      	movs	r3, #0
 80032ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032ee:	2301      	movs	r3, #1
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032f2:	2300      	movs	r3, #0
 80032f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80032fa:	f107 030c 	add.w	r3, r7, #12
 80032fe:	4619      	mov	r1, r3
 8003300:	480c      	ldr	r0, [pc, #48]	; (8003334 <MX_TIM3_Init+0xa0>)
 8003302:	f003 f89f 	bl	8006444 <HAL_TIM_Encoder_Init>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800330c:	f000 f8a2 	bl	8003454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003310:	2300      	movs	r3, #0
 8003312:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003314:	2300      	movs	r3, #0
 8003316:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003318:	1d3b      	adds	r3, r7, #4
 800331a:	4619      	mov	r1, r3
 800331c:	4805      	ldr	r0, [pc, #20]	; (8003334 <MX_TIM3_Init+0xa0>)
 800331e:	f003 ff23 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003328:	f000 f894 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800332c:	bf00      	nop
 800332e:	3730      	adds	r7, #48	; 0x30
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000500 	.word	0x20000500
 8003338:	40000400 	.word	0x40000400

0800333c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003342:	f107 0310 	add.w	r3, r7, #16
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	605a      	str	r2, [r3, #4]
 800334c:	609a      	str	r2, [r3, #8]
 800334e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003350:	4b3b      	ldr	r3, [pc, #236]	; (8003440 <MX_GPIO_Init+0x104>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	4a3a      	ldr	r2, [pc, #232]	; (8003440 <MX_GPIO_Init+0x104>)
 8003356:	f043 0310 	orr.w	r3, r3, #16
 800335a:	6193      	str	r3, [r2, #24]
 800335c:	4b38      	ldr	r3, [pc, #224]	; (8003440 <MX_GPIO_Init+0x104>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003368:	4b35      	ldr	r3, [pc, #212]	; (8003440 <MX_GPIO_Init+0x104>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	4a34      	ldr	r2, [pc, #208]	; (8003440 <MX_GPIO_Init+0x104>)
 800336e:	f043 0320 	orr.w	r3, r3, #32
 8003372:	6193      	str	r3, [r2, #24]
 8003374:	4b32      	ldr	r3, [pc, #200]	; (8003440 <MX_GPIO_Init+0x104>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003380:	4b2f      	ldr	r3, [pc, #188]	; (8003440 <MX_GPIO_Init+0x104>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	4a2e      	ldr	r2, [pc, #184]	; (8003440 <MX_GPIO_Init+0x104>)
 8003386:	f043 0304 	orr.w	r3, r3, #4
 800338a:	6193      	str	r3, [r2, #24]
 800338c:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <MX_GPIO_Init+0x104>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003398:	4b29      	ldr	r3, [pc, #164]	; (8003440 <MX_GPIO_Init+0x104>)
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	4a28      	ldr	r2, [pc, #160]	; (8003440 <MX_GPIO_Init+0x104>)
 800339e:	f043 0308 	orr.w	r3, r3, #8
 80033a2:	6193      	str	r3, [r2, #24]
 80033a4:	4b26      	ldr	r3, [pc, #152]	; (8003440 <MX_GPIO_Init+0x104>)
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80033b0:	2200      	movs	r2, #0
 80033b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033b6:	4823      	ldr	r0, [pc, #140]	; (8003444 <MX_GPIO_Init+0x108>)
 80033b8:	f001 fa3e 	bl	8004838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 80033bc:	2200      	movs	r2, #0
 80033be:	217e      	movs	r1, #126	; 0x7e
 80033c0:	4821      	ldr	r0, [pc, #132]	; (8003448 <MX_GPIO_Init+0x10c>)
 80033c2:	f001 fa39 	bl	8004838 <HAL_GPIO_WritePin>
                          |xSHUT_4_Pin|xSHUT_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80033c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033cc:	2301      	movs	r3, #1
 80033ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d4:	2302      	movs	r3, #2
 80033d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d8:	f107 0310 	add.w	r3, r7, #16
 80033dc:	4619      	mov	r1, r3
 80033de:	4819      	ldr	r0, [pc, #100]	; (8003444 <MX_GPIO_Init+0x108>)
 80033e0:	f001 f8a6 	bl	8004530 <HAL_GPIO_Init>

  /*Configure GPIO pins : xSHUT_0_Pin xSHUT_1_Pin xSHUT_2_Pin xSHUT_3_Pin
                           xSHUT_4_Pin xSHUT_5_Pin */
  GPIO_InitStruct.Pin = xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 80033e4:	237e      	movs	r3, #126	; 0x7e
 80033e6:	613b      	str	r3, [r7, #16]
                          |xSHUT_4_Pin|xSHUT_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e8:	2301      	movs	r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ec:	2301      	movs	r3, #1
 80033ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f0:	2302      	movs	r3, #2
 80033f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f4:	f107 0310 	add.w	r3, r7, #16
 80033f8:	4619      	mov	r1, r3
 80033fa:	4813      	ldr	r0, [pc, #76]	; (8003448 <MX_GPIO_Init+0x10c>)
 80033fc:	f001 f898 	bl	8004530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003400:	2303      	movs	r3, #3
 8003402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003404:	4b11      	ldr	r3, [pc, #68]	; (800344c <MX_GPIO_Init+0x110>)
 8003406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003408:	2301      	movs	r3, #1
 800340a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340c:	f107 0310 	add.w	r3, r7, #16
 8003410:	4619      	mov	r1, r3
 8003412:	480f      	ldr	r0, [pc, #60]	; (8003450 <MX_GPIO_Init+0x114>)
 8003414:	f001 f88c 	bl	8004530 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003418:	2200      	movs	r2, #0
 800341a:	2100      	movs	r1, #0
 800341c:	2006      	movs	r0, #6
 800341e:	f001 f842 	bl	80044a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003422:	2006      	movs	r0, #6
 8003424:	f001 f85b 	bl	80044de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003428:	2200      	movs	r2, #0
 800342a:	2100      	movs	r1, #0
 800342c:	2007      	movs	r0, #7
 800342e:	f001 f83a 	bl	80044a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003432:	2007      	movs	r0, #7
 8003434:	f001 f853 	bl	80044de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003438:	bf00      	nop
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	40011000 	.word	0x40011000
 8003448:	40010800 	.word	0x40010800
 800344c:	10210000 	.word	0x10210000
 8003450:	40010c00 	.word	0x40010c00

08003454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003458:	b672      	cpsid	i
}
 800345a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800345c:	e7fe      	b.n	800345c <Error_Handler+0x8>
	...

08003460 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003466:	4b15      	ldr	r3, [pc, #84]	; (80034bc <HAL_MspInit+0x5c>)
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	4a14      	ldr	r2, [pc, #80]	; (80034bc <HAL_MspInit+0x5c>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6193      	str	r3, [r2, #24]
 8003472:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_MspInit+0x5c>)
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <HAL_MspInit+0x5c>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	4a0e      	ldr	r2, [pc, #56]	; (80034bc <HAL_MspInit+0x5c>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	61d3      	str	r3, [r2, #28]
 800348a:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <HAL_MspInit+0x5c>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	607b      	str	r3, [r7, #4]
 8003494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <HAL_MspInit+0x60>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	4a04      	ldr	r2, [pc, #16]	; (80034c0 <HAL_MspInit+0x60>)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b2:	bf00      	nop
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40010000 	.word	0x40010000

080034c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034cc:	f107 0310 	add.w	r3, r7, #16
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a15      	ldr	r2, [pc, #84]	; (8003534 <HAL_I2C_MspInit+0x70>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d123      	bne.n	800352c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e4:	4b14      	ldr	r3, [pc, #80]	; (8003538 <HAL_I2C_MspInit+0x74>)
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	4a13      	ldr	r2, [pc, #76]	; (8003538 <HAL_I2C_MspInit+0x74>)
 80034ea:	f043 0308 	orr.w	r3, r3, #8
 80034ee:	6193      	str	r3, [r2, #24]
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <HAL_I2C_MspInit+0x74>)
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034fc:	23c0      	movs	r3, #192	; 0xc0
 80034fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003500:	2312      	movs	r3, #18
 8003502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003504:	2303      	movs	r3, #3
 8003506:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003508:	f107 0310 	add.w	r3, r7, #16
 800350c:	4619      	mov	r1, r3
 800350e:	480b      	ldr	r0, [pc, #44]	; (800353c <HAL_I2C_MspInit+0x78>)
 8003510:	f001 f80e 	bl	8004530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HAL_I2C_MspInit+0x74>)
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	4a07      	ldr	r2, [pc, #28]	; (8003538 <HAL_I2C_MspInit+0x74>)
 800351a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800351e:	61d3      	str	r3, [r2, #28]
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_I2C_MspInit+0x74>)
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800352c:	bf00      	nop
 800352e:	3720      	adds	r7, #32
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40005400 	.word	0x40005400
 8003538:	40021000 	.word	0x40021000
 800353c:	40010c00 	.word	0x40010c00

08003540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a09      	ldr	r2, [pc, #36]	; (8003574 <HAL_TIM_Base_MspInit+0x34>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d10b      	bne.n	800356a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_TIM_Base_MspInit+0x38>)
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	4a08      	ldr	r2, [pc, #32]	; (8003578 <HAL_TIM_Base_MspInit+0x38>)
 8003558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800355c:	6193      	str	r3, [r2, #24]
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_TIM_Base_MspInit+0x38>)
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40021000 	.word	0x40021000

0800357c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08e      	sub	sp, #56	; 0x38
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 0320 	add.w	r3, r7, #32
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359a:	d157      	bne.n	800364c <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800359c:	4b4f      	ldr	r3, [pc, #316]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	4a4e      	ldr	r2, [pc, #312]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	61d3      	str	r3, [r2, #28]
 80035a8:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b4:	4b49      	ldr	r3, [pc, #292]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	4a48      	ldr	r2, [pc, #288]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 80035ba:	f043 0304 	orr.w	r3, r3, #4
 80035be:	6193      	str	r3, [r2, #24]
 80035c0:	4b46      	ldr	r3, [pc, #280]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035cc:	4b43      	ldr	r3, [pc, #268]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	4a42      	ldr	r2, [pc, #264]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 80035d2:	f043 0308 	orr.w	r3, r3, #8
 80035d6:	6193      	str	r3, [r2, #24]
 80035d8:	4b40      	ldr	r3, [pc, #256]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80035e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ea:	2300      	movs	r3, #0
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f2:	f107 0320 	add.w	r3, r7, #32
 80035f6:	4619      	mov	r1, r3
 80035f8:	4839      	ldr	r0, [pc, #228]	; (80036e0 <HAL_TIM_Encoder_MspInit+0x164>)
 80035fa:	f000 ff99 	bl	8004530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035fe:	2308      	movs	r3, #8
 8003600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003602:	2300      	movs	r3, #0
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360a:	f107 0320 	add.w	r3, r7, #32
 800360e:	4619      	mov	r1, r3
 8003610:	4834      	ldr	r0, [pc, #208]	; (80036e4 <HAL_TIM_Encoder_MspInit+0x168>)
 8003612:	f000 ff8d 	bl	8004530 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003616:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	633b      	str	r3, [r7, #48]	; 0x30
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800362a:	633b      	str	r3, [r7, #48]	; 0x30
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003632:	633b      	str	r3, [r7, #48]	; 0x30
 8003634:	4a2c      	ldr	r2, [pc, #176]	; (80036e8 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800363a:	2200      	movs	r2, #0
 800363c:	2100      	movs	r1, #0
 800363e:	201c      	movs	r0, #28
 8003640:	f000 ff31 	bl	80044a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003644:	201c      	movs	r0, #28
 8003646:	f000 ff4a 	bl	80044de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800364a:	e042      	b.n	80036d2 <HAL_TIM_Encoder_MspInit+0x156>
  else if(htim_encoder->Instance==TIM3)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a26      	ldr	r2, [pc, #152]	; (80036ec <HAL_TIM_Encoder_MspInit+0x170>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d13d      	bne.n	80036d2 <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003656:	4b21      	ldr	r3, [pc, #132]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4a20      	ldr	r2, [pc, #128]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 800365c:	f043 0302 	orr.w	r3, r3, #2
 8003660:	61d3      	str	r3, [r2, #28]
 8003662:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366e:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	4a1a      	ldr	r2, [pc, #104]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 8003674:	f043 0308 	orr.w	r3, r3, #8
 8003678:	6193      	str	r3, [r2, #24]
 800367a:	4b18      	ldr	r3, [pc, #96]	; (80036dc <HAL_TIM_Encoder_MspInit+0x160>)
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003686:	2330      	movs	r3, #48	; 0x30
 8003688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800368a:	2300      	movs	r3, #0
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003692:	f107 0320 	add.w	r3, r7, #32
 8003696:	4619      	mov	r1, r3
 8003698:	4812      	ldr	r0, [pc, #72]	; (80036e4 <HAL_TIM_Encoder_MspInit+0x168>)
 800369a:	f000 ff49 	bl	8004530 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_TIM_Encoder_MspInit+0x16c>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	637b      	str	r3, [r7, #52]	; 0x34
 80036a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80036aa:	637b      	str	r3, [r7, #52]	; 0x34
 80036ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
 80036b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036ba:	637b      	str	r3, [r7, #52]	; 0x34
 80036bc:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <HAL_TIM_Encoder_MspInit+0x16c>)
 80036be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c0:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80036c2:	2200      	movs	r2, #0
 80036c4:	2100      	movs	r1, #0
 80036c6:	201d      	movs	r0, #29
 80036c8:	f000 feed 	bl	80044a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036cc:	201d      	movs	r0, #29
 80036ce:	f000 ff06 	bl	80044de <HAL_NVIC_EnableIRQ>
}
 80036d2:	bf00      	nop
 80036d4:	3738      	adds	r7, #56	; 0x38
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40010800 	.word	0x40010800
 80036e4:	40010c00 	.word	0x40010c00
 80036e8:	40010000 	.word	0x40010000
 80036ec:	40000400 	.word	0x40000400

080036f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f8:	f107 0310 	add.w	r3, r7, #16
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a10      	ldr	r2, [pc, #64]	; (800374c <HAL_TIM_MspPostInit+0x5c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d118      	bne.n	8003742 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003710:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <HAL_TIM_MspPostInit+0x60>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	4a0e      	ldr	r2, [pc, #56]	; (8003750 <HAL_TIM_MspPostInit+0x60>)
 8003716:	f043 0304 	orr.w	r3, r3, #4
 800371a:	6193      	str	r3, [r2, #24]
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <HAL_TIM_MspPostInit+0x60>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003728:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800372c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003732:	2302      	movs	r3, #2
 8003734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003736:	f107 0310 	add.w	r3, r7, #16
 800373a:	4619      	mov	r1, r3
 800373c:	4805      	ldr	r0, [pc, #20]	; (8003754 <HAL_TIM_MspPostInit+0x64>)
 800373e:	f000 fef7 	bl	8004530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003742:	bf00      	nop
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40021000 	.word	0x40021000
 8003754:	40010800 	.word	0x40010800

08003758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800375c:	e7fe      	b.n	800375c <NMI_Handler+0x4>

0800375e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800375e:	b480      	push	{r7}
 8003760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003762:	e7fe      	b.n	8003762 <HardFault_Handler+0x4>

08003764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003768:	e7fe      	b.n	8003768 <MemManage_Handler+0x4>

0800376a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800376e:	e7fe      	b.n	800376e <BusFault_Handler+0x4>

08003770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003774:	e7fe      	b.n	8003774 <UsageFault_Handler+0x4>

08003776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr

08003782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800379e:	f000 fd47 	bl	8004230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80037ac:	2001      	movs	r0, #1
 80037ae:	f001 f85b 	bl	8004868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	Rmode = 2;
 80037b2:	4b02      	ldr	r3, [pc, #8]	; (80037bc <EXTI0_IRQHandler+0x14>)
 80037b4:	2202      	movs	r2, #2
 80037b6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 80037b8:	bf00      	nop
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000610 	.word	0x20000610

080037c0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80037c4:	2002      	movs	r0, #2
 80037c6:	f001 f84f 	bl	8004868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	Rmode = 1;
 80037ca:	4b02      	ldr	r3, [pc, #8]	; (80037d4 <EXTI1_IRQHandler+0x14>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 80037d0:	bf00      	nop
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000610 	.word	0x20000610

080037d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037dc:	4812      	ldr	r0, [pc, #72]	; (8003828 <TIM2_IRQHandler+0x50>)
 80037de:	f002 ff61 	bl	80066a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if(status == turn_right_90 || status == turn_right_45){
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <TIM2_IRQHandler+0x54>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d005      	beq.n	80037fa <TIM2_IRQHandler+0x22>
 80037ee:	4b0f      	ldr	r3, [pc, #60]	; (800382c <TIM2_IRQHandler+0x54>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	b25b      	sxtb	r3, r3
 80037f4:	f113 0f02 	cmn.w	r3, #2
 80037f8:	d103      	bne.n	8003802 <TIM2_IRQHandler+0x2a>
	  status = 0;
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <TIM2_IRQHandler+0x54>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
	  flag_uturn+=1;
	  brake(0);
  }

  /* USER CODE END TIM2_IRQn 1 */
}
 8003800:	e00f      	b.n	8003822 <TIM2_IRQHandler+0x4a>
  } else if(status == u_turn){
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <TIM2_IRQHandler+0x54>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	b25b      	sxtb	r3, r3
 8003808:	f113 0f05 	cmn.w	r3, #5
 800380c:	d109      	bne.n	8003822 <TIM2_IRQHandler+0x4a>
	  flag_uturn+=1;
 800380e:	4b08      	ldr	r3, [pc, #32]	; (8003830 <TIM2_IRQHandler+0x58>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	b2da      	uxtb	r2, r3
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <TIM2_IRQHandler+0x58>)
 800381a:	701a      	strb	r2, [r3, #0]
	  brake(0);
 800381c:	2000      	movs	r0, #0
 800381e:	f000 fc5f 	bl	80040e0 <brake>
}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	200004b8 	.word	0x200004b8
 800382c:	20000611 	.word	0x20000611
 8003830:	2000120e 	.word	0x2000120e

08003834 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003838:	4815      	ldr	r0, [pc, #84]	; (8003890 <TIM3_IRQHandler+0x5c>)
 800383a:	f002 ff33 	bl	80066a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(status == turn_left_90 || status == turn_left_45 || status == straight){
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <TIM3_IRQHandler+0x60>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b25b      	sxtb	r3, r3
 8003844:	f113 0f04 	cmn.w	r3, #4
 8003848:	d00b      	beq.n	8003862 <TIM3_IRQHandler+0x2e>
 800384a:	4b12      	ldr	r3, [pc, #72]	; (8003894 <TIM3_IRQHandler+0x60>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	b25b      	sxtb	r3, r3
 8003850:	f113 0f03 	cmn.w	r3, #3
 8003854:	d005      	beq.n	8003862 <TIM3_IRQHandler+0x2e>
 8003856:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <TIM3_IRQHandler+0x60>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	b25b      	sxtb	r3, r3
 800385c:	f113 0f06 	cmn.w	r3, #6
 8003860:	d103      	bne.n	800386a <TIM3_IRQHandler+0x36>
	  status = 0;
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <TIM3_IRQHandler+0x60>)
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
	  flag_uturn+=1;
	  brake(1);
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8003868:	e00f      	b.n	800388a <TIM3_IRQHandler+0x56>
  } else if(status == u_turn){
 800386a:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <TIM3_IRQHandler+0x60>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	b25b      	sxtb	r3, r3
 8003870:	f113 0f05 	cmn.w	r3, #5
 8003874:	d109      	bne.n	800388a <TIM3_IRQHandler+0x56>
	  flag_uturn+=1;
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <TIM3_IRQHandler+0x64>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	3301      	adds	r3, #1
 800387e:	b2da      	uxtb	r2, r3
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <TIM3_IRQHandler+0x64>)
 8003882:	701a      	strb	r2, [r3, #0]
	  brake(1);
 8003884:	2001      	movs	r0, #1
 8003886:	f000 fc2b 	bl	80040e0 <brake>
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000500 	.word	0x20000500
 8003894:	20000611 	.word	0x20000611
 8003898:	2000120e 	.word	0x2000120e

0800389c <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <running_left_motor>:
const float turn90_arc_en = (float)turning_radius * M_PI * 4 * (90.0/360) * counts_per_1mm;
const float turn45_arc_en = (float)turning_radius * M_PI * 4 * (45.0/360) * counts_per_1mm;
volatile uint8_t flag_uturn;


void running_left_motor(uint8_t mode){
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
	if(mode == 0){
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10e      	bne.n	80038d6 <running_left_motor+0x2e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80038b8:	4b10      	ldr	r3, [pc, #64]	; (80038fc <running_left_motor+0x54>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2200      	movs	r2, #0
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, speed_levels[Rmode]);
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <running_left_motor+0x58>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	461a      	mov	r2, r3
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <running_left_motor+0x5c>)
 80038ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80038ce:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <running_left_motor+0x54>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40
	} else {
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed_levels[Rmode]);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
	}
}
 80038d4:	e00d      	b.n	80038f2 <running_left_motor+0x4a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed_levels[Rmode]);
 80038d6:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <running_left_motor+0x58>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <running_left_motor+0x5c>)
 80038e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <running_left_motor+0x54>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80038ea:	4b04      	ldr	r3, [pc, #16]	; (80038fc <running_left_motor+0x54>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	20000470 	.word	0x20000470
 8003900:	20000610 	.word	0x20000610
 8003904:	0800c5fc 	.word	0x0800c5fc

08003908 <running_right_motor>:

void running_right_motor(uint8_t mode){
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
	if(mode == 0){
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10e      	bne.n	8003936 <running_right_motor+0x2e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed_levels[Rmode]);
 8003918:	4b10      	ldr	r3, [pc, #64]	; (800395c <running_right_motor+0x54>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <running_right_motor+0x58>)
 8003922:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <running_right_motor+0x5c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800392c:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <running_right_motor+0x5c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2200      	movs	r2, #0
 8003932:	639a      	str	r2, [r3, #56]	; 0x38
	} else {
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed_levels[Rmode]);
	}
}
 8003934:	e00d      	b.n	8003952 <running_right_motor+0x4a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <running_right_motor+0x5c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2200      	movs	r2, #0
 800393c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed_levels[Rmode]);
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <running_right_motor+0x54>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <running_right_motor+0x58>)
 8003948:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <running_right_motor+0x5c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	20000610 	.word	0x20000610
 8003960:	0800c5fc 	.word	0x0800c5fc
 8003964:	20000470 	.word	0x20000470

08003968 <u_turnf>:

void u_turnf(uint8_t *direction) {
 8003968:	b5b0      	push	{r4, r5, r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d81b      	bhi.n	80039b0 <u_turnf+0x48>
 8003978:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <u_turnf+0x18>)
 800397a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397e:	bf00      	nop
 8003980:	08003991 	.word	0x08003991
 8003984:	08003999 	.word	0x08003999
 8003988:	080039a1 	.word	0x080039a1
 800398c:	080039a9 	.word	0x080039a9
		case west:  *direction = east;   break;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e00b      	b.n	80039b0 <u_turnf+0x48>
		case east:  *direction = west;   break;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	e007      	b.n	80039b0 <u_turnf+0x48>
		case north: *direction = south;  break;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2203      	movs	r2, #3
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e003      	b.n	80039b0 <u_turnf+0x48>
		case south: *direction = north;  break;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	bf00      	nop
	}
	uint16_t en = round(uturn_arc_en + uturn_arc_en*0.03);
 80039b0:	4b5b      	ldr	r3, [pc, #364]	; (8003b20 <u_turnf+0x1b8>)
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fc ff0e 	bl	80007d4 <__aeabi_f2d>
 80039b8:	4604      	mov	r4, r0
 80039ba:	460d      	mov	r5, r1
 80039bc:	4b58      	ldr	r3, [pc, #352]	; (8003b20 <u_turnf+0x1b8>)
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc ff08 	bl	80007d4 <__aeabi_f2d>
 80039c4:	a354      	add	r3, pc, #336	; (adr r3, 8003b18 <u_turnf+0x1b0>)
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	f7fc fbc1 	bl	8000150 <__aeabi_dmul>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4620      	mov	r0, r4
 80039d4:	4629      	mov	r1, r5
 80039d6:	f7fc fd9f 	bl	8000518 <__adddf3>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	f008 fb1b 	bl	800c01c <round>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	f7fc ff71 	bl	80008d4 <__aeabi_d2uiz>
 80039f2:	4603      	mov	r3, r0
 80039f4:	827b      	strh	r3, [r7, #18]
	__HAL_TIM_SET_COUNTER(&htim2, en);
 80039f6:	4b4b      	ldr	r3, [pc, #300]	; (8003b24 <u_turnf+0x1bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	8a7a      	ldrh	r2, [r7, #18]
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80039fe:	4b4a      	ldr	r3, [pc, #296]	; (8003b28 <u_turnf+0x1c0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2200      	movs	r2, #0
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8003a06:	4b47      	ldr	r3, [pc, #284]	; (8003b24 <u_turnf+0x1bc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a10:	4b44      	ldr	r3, [pc, #272]	; (8003b24 <u_turnf+0x1bc>)
 8003a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a16:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, en);
 8003a18:	4b43      	ldr	r3, [pc, #268]	; (8003b28 <u_turnf+0x1c0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	8a7a      	ldrh	r2, [r7, #18]
 8003a1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a20:	8a7b      	ldrh	r3, [r7, #18]
 8003a22:	4a41      	ldr	r2, [pc, #260]	; (8003b28 <u_turnf+0x1c0>)
 8003a24:	60d3      	str	r3, [r2, #12]
	status = u_turn;
 8003a26:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <u_turnf+0x1c4>)
 8003a28:	22fb      	movs	r2, #251	; 0xfb
 8003a2a:	701a      	strb	r2, [r3, #0]
	flag_uturn = 0;
 8003a2c:	4b40      	ldr	r3, [pc, #256]	; (8003b30 <u_turnf+0x1c8>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]
	brake(2);
 8003a32:	2002      	movs	r0, #2
 8003a34:	f000 fb54 	bl	80040e0 <brake>
	uint16_t speed = 300;
 8003a38:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003a3c:	82fb      	strh	r3, [r7, #22]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
 8003a3e:	4b3d      	ldr	r3, [pc, #244]	; (8003b34 <u_turnf+0x1cc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	8afa      	ldrh	r2, [r7, #22]
 8003a44:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <u_turnf+0x1cc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8003a4e:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <u_turnf+0x1cc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	8afa      	ldrh	r2, [r7, #22]
 8003a54:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003a56:	4b37      	ldr	r3, [pc, #220]	; (8003b34 <u_turnf+0x1cc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38
	int32_t P;
	while(flag_uturn == 0){
 8003a5e:	e034      	b.n	8003aca <u_turnf+0x162>
		P = ((int32_t)TIM3->CNT - ((int32_t)en - TIM2->CNT)) * 5;
 8003a60:	4b35      	ldr	r3, [pc, #212]	; (8003b38 <u_turnf+0x1d0>)
 8003a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a6a:	8a7b      	ldrh	r3, [r7, #18]
 8003a6c:	1acb      	subs	r3, r1, r3
 8003a6e:	441a      	add	r2, r3
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed + P);
 8003a78:	8afa      	ldrh	r2, [r7, #22]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	441a      	add	r2, r3
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <u_turnf+0x1cc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8003a84:	4b2b      	ldr	r3, [pc, #172]	; (8003b34 <u_turnf+0x1cc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed - P);
 8003a8c:	8afa      	ldrh	r2, [r7, #22]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad2      	subs	r2, r2, r3
 8003a92:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <u_turnf+0x1cc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003a98:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <u_turnf+0x1cc>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
		if(en - TIM3->CNT < 200){
 8003aa0:	8a7a      	ldrh	r2, [r7, #18]
 8003aa2:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <u_turnf+0x1d0>)
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2bc7      	cmp	r3, #199	; 0xc7
 8003aaa:	d801      	bhi.n	8003ab0 <u_turnf+0x148>
			speed = 200;
 8003aac:	23c8      	movs	r3, #200	; 0xc8
 8003aae:	82fb      	strh	r3, [r7, #22]
		}
		a = (int32_t)en - TIM2->CNT;
 8003ab0:	8a7a      	ldrh	r2, [r7, #18]
 8003ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <u_turnf+0x1d4>)
 8003abe:	601a      	str	r2, [r3, #0]
		b = TIM3->CNT;
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <u_turnf+0x1d0>)
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <u_turnf+0x1d8>)
 8003ac8:	601a      	str	r2, [r3, #0]
	while(flag_uturn == 0){
 8003aca:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <u_turnf+0x1c8>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0c5      	beq.n	8003a60 <u_turnf+0xf8>
	}
	while(flag_uturn < 2);
 8003ad4:	bf00      	nop
 8003ad6:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <u_turnf+0x1c8>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d9fa      	bls.n	8003ad6 <u_turnf+0x16e>
	status = 0;
 8003ae0:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <u_turnf+0x1c4>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
	brake(2);
 8003ae6:	2002      	movs	r0, #2
 8003ae8:	f000 fafa 	bl	80040e0 <brake>
	uint16_t last = 65535;
 8003aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003af0:	82bb      	strh	r3, [r7, #20]
	while(last != TIM2->CNT){
 8003af2:	e006      	b.n	8003b02 <u_turnf+0x19a>
		last = TIM2->CNT;
 8003af4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	82bb      	strh	r3, [r7, #20]
		HAL_Delay(100);
 8003afc:	2064      	movs	r0, #100	; 0x64
 8003afe:	f000 fbb3 	bl	8004268 <HAL_Delay>
	while(last != TIM2->CNT){
 8003b02:	8aba      	ldrh	r2, [r7, #20]
 8003b04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d1f2      	bne.n	8003af4 <u_turnf+0x18c>
	}
}
 8003b0e:	bf00      	nop
 8003b10:	bf00      	nop
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bdb0      	pop	{r4, r5, r7, pc}
 8003b18:	eb851eb8 	.word	0xeb851eb8
 8003b1c:	3f9eb851 	.word	0x3f9eb851
 8003b20:	4494b08d 	.word	0x4494b08d
 8003b24:	200004b8 	.word	0x200004b8
 8003b28:	20000500 	.word	0x20000500
 8003b2c:	20000611 	.word	0x20000611
 8003b30:	2000120e 	.word	0x2000120e
 8003b34:	20000470 	.word	0x20000470
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	20000614 	.word	0x20000614
 8003b40:	20000618 	.word	0x20000618

08003b44 <turn_left90>:
	brake(0);
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	__HAL_TIM_SET_COUNTER(&htim3, 0);
}

void turn_left90(uint8_t *direction) {
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d81b      	bhi.n	8003b8c <turn_left90+0x48>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <turn_left90+0x18>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b6d 	.word	0x08003b6d
 8003b60:	08003b75 	.word	0x08003b75
 8003b64:	08003b7d 	.word	0x08003b7d
 8003b68:	08003b85 	.word	0x08003b85
		case west:  *direction = south; break;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2203      	movs	r2, #3
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	e00b      	b.n	8003b8c <turn_left90+0x48>
		case east:  *direction = north; break;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	e007      	b.n	8003b8c <turn_left90+0x48>
		case north: *direction = west;  break;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e003      	b.n	8003b8c <turn_left90+0x48>
		case south: *direction = east;  break;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	bf00      	nop
	}
	uint16_t last = 65535;
 8003b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b90:	81fb      	strh	r3, [r7, #14]
	while(last != TIM2->CNT){
 8003b92:	e006      	b.n	8003ba2 <turn_left90+0x5e>
		last = TIM2->CNT;
 8003b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	81fb      	strh	r3, [r7, #14]
		HAL_Delay(100);
 8003b9c:	2064      	movs	r0, #100	; 0x64
 8003b9e:	f000 fb63 	bl	8004268 <HAL_Delay>
	while(last != TIM2->CNT){
 8003ba2:	89fa      	ldrh	r2, [r7, #14]
 8003ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d1f2      	bne.n	8003b94 <turn_left90+0x50>
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003bae:	4b32      	ldr	r3, [pc, #200]	; (8003c78 <turn_left90+0x134>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003bb6:	4b31      	ldr	r3, [pc, #196]	; (8003c7c <turn_left90+0x138>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8003bbe:	4b2e      	ldr	r3, [pc, #184]	; (8003c78 <turn_left90+0x134>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	; (8003c78 <turn_left90+0x134>)
 8003bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bce:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn90_arc_en));
 8003bd0:	4b2b      	ldr	r3, [pc, #172]	; (8003c80 <turn_left90+0x13c>)
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fc fdfe 	bl	80007d4 <__aeabi_f2d>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	f008 fa1c 	bl	800c01c <round>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4924      	ldr	r1, [pc, #144]	; (8003c7c <turn_left90+0x138>)
 8003bea:	680c      	ldr	r4, [r1, #0]
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	f7fc fe70 	bl	80008d4 <__aeabi_d2uiz>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bf8:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <turn_left90+0x13c>)
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fc fdea 	bl	80007d4 <__aeabi_f2d>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4610      	mov	r0, r2
 8003c06:	4619      	mov	r1, r3
 8003c08:	f008 fa08 	bl	800c01c <round>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4610      	mov	r0, r2
 8003c12:	4619      	mov	r1, r3
 8003c14:	f7fc fe5e 	bl	80008d4 <__aeabi_d2uiz>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <turn_left90+0x138>)
 8003c1c:	60d3      	str	r3, [r2, #12]
	status = turn_left_90;
 8003c1e:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <turn_left90+0x140>)
 8003c20:	22fc      	movs	r2, #252	; 0xfc
 8003c22:	701a      	strb	r2, [r3, #0]

	brake(0);
 8003c24:	2000      	movs	r0, #0
 8003c26:	f000 fa5b 	bl	80040e0 <brake>
	running_right_motor(0);
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	f7ff fe6c 	bl	8003908 <running_right_motor>
	while(status != 0);
 8003c30:	bf00      	nop
 8003c32:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <turn_left90+0x140>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	b25b      	sxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1fa      	bne.n	8003c32 <turn_left90+0xee>
	brake(1);
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	f000 fa4f 	bl	80040e0 <brake>
	last = 65535;
 8003c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c46:	81fb      	strh	r3, [r7, #14]
	while(last != TIM3->CNT){
 8003c48:	e005      	b.n	8003c56 <turn_left90+0x112>
		last = TIM3->CNT;
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <turn_left90+0x144>)
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	81fb      	strh	r3, [r7, #14]
		HAL_Delay(100);
 8003c50:	2064      	movs	r0, #100	; 0x64
 8003c52:	f000 fb09 	bl	8004268 <HAL_Delay>
	while(last != TIM3->CNT){
 8003c56:	89fa      	ldrh	r2, [r7, #14]
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <turn_left90+0x144>)
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d1f4      	bne.n	8003c4a <turn_left90+0x106>
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <turn_left90+0x134>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2200      	movs	r2, #0
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <turn_left90+0x138>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd90      	pop	{r4, r7, pc}
 8003c78:	200004b8 	.word	0x200004b8
 8003c7c:	20000500 	.word	0x20000500
 8003c80:	4494b08d 	.word	0x4494b08d
 8003c84:	20000611 	.word	0x20000611
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	00000000 	.word	0x00000000

08003c90 <turn_right90>:

void turn_right90(uint8_t *direction) {
 8003c90:	b5b0      	push	{r4, r5, r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d81b      	bhi.n	8003cd8 <turn_right90+0x48>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <turn_right90+0x18>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003cc1 	.word	0x08003cc1
 8003cb0:	08003cc9 	.word	0x08003cc9
 8003cb4:	08003cd1 	.word	0x08003cd1
		case west:  *direction = north; break;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	e00b      	b.n	8003cd8 <turn_right90+0x48>
		case east:  *direction = south; break;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	e007      	b.n	8003cd8 <turn_right90+0x48>
		case north: *direction = east;  break;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	e003      	b.n	8003cd8 <turn_right90+0x48>
		case south: *direction = west;  break;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	bf00      	nop
	}
	uint16_t last = 65535;
 8003cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cdc:	81fb      	strh	r3, [r7, #14]
	while(last != TIM2->CNT){
 8003cde:	e006      	b.n	8003cee <turn_right90+0x5e>
		last = TIM2->CNT;
 8003ce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	81fb      	strh	r3, [r7, #14]
		HAL_Delay(100);
 8003ce8:	2064      	movs	r0, #100	; 0x64
 8003cea:	f000 fabd 	bl	8004268 <HAL_Delay>
	while(last != TIM2->CNT){
 8003cee:	89fa      	ldrh	r2, [r7, #14]
 8003cf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d1f2      	bne.n	8003ce0 <turn_right90+0x50>
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003cfa:	4b47      	ldr	r3, [pc, #284]	; (8003e18 <turn_right90+0x188>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003d02:	4b46      	ldr	r3, [pc, #280]	; (8003e1c <turn_right90+0x18c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, round(turn90_arc_en - turn90_arc_en*0.1));
 8003d0a:	4b45      	ldr	r3, [pc, #276]	; (8003e20 <turn_right90+0x190>)
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fc fd61 	bl	80007d4 <__aeabi_f2d>
 8003d12:	4604      	mov	r4, r0
 8003d14:	460d      	mov	r5, r1
 8003d16:	4b42      	ldr	r3, [pc, #264]	; (8003e20 <turn_right90+0x190>)
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fc fd5b 	bl	80007d4 <__aeabi_f2d>
 8003d1e:	a33c      	add	r3, pc, #240	; (adr r3, 8003e10 <turn_right90+0x180>)
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f7fc fa14 	bl	8000150 <__aeabi_dmul>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	4629      	mov	r1, r5
 8003d30:	f7fc fbf0 	bl	8000514 <__aeabi_dsub>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f008 f96e 	bl	800c01c <round>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4934      	ldr	r1, [pc, #208]	; (8003e18 <turn_right90+0x188>)
 8003d46:	680c      	ldr	r4, [r1, #0]
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f7fc fdc2 	bl	80008d4 <__aeabi_d2uiz>
 8003d50:	4603      	mov	r3, r0
 8003d52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d54:	4b32      	ldr	r3, [pc, #200]	; (8003e20 <turn_right90+0x190>)
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fc fd3c 	bl	80007d4 <__aeabi_f2d>
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	460d      	mov	r5, r1
 8003d60:	4b2f      	ldr	r3, [pc, #188]	; (8003e20 <turn_right90+0x190>)
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fc fd36 	bl	80007d4 <__aeabi_f2d>
 8003d68:	a329      	add	r3, pc, #164	; (adr r3, 8003e10 <turn_right90+0x180>)
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f7fc f9ef 	bl	8000150 <__aeabi_dmul>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4620      	mov	r0, r4
 8003d78:	4629      	mov	r1, r5
 8003d7a:	f7fc fbcb 	bl	8000514 <__aeabi_dsub>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4610      	mov	r0, r2
 8003d84:	4619      	mov	r1, r3
 8003d86:	f008 f949 	bl	800c01c <round>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4610      	mov	r0, r2
 8003d90:	4619      	mov	r1, r3
 8003d92:	f7fc fd9f 	bl	80008d4 <__aeabi_d2uiz>
 8003d96:	4603      	mov	r3, r0
 8003d98:	4a1f      	ldr	r2, [pc, #124]	; (8003e18 <turn_right90+0x188>)
 8003d9a:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <turn_right90+0x18c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003da4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003da6:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <turn_right90+0x18c>)
 8003da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dac:	60da      	str	r2, [r3, #12]
	status = turn_right_90;
 8003dae:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <turn_right90+0x194>)
 8003db0:	22ff      	movs	r2, #255	; 0xff
 8003db2:	701a      	strb	r2, [r3, #0]

	brake(1);
 8003db4:	2001      	movs	r0, #1
 8003db6:	f000 f993 	bl	80040e0 <brake>
	running_left_motor(0);
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f7ff fd74 	bl	80038a8 <running_left_motor>
	while(status != 0);
 8003dc0:	bf00      	nop
 8003dc2:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <turn_right90+0x194>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	b25b      	sxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1fa      	bne.n	8003dc2 <turn_right90+0x132>
	brake(0);
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f000 f987 	bl	80040e0 <brake>
	last = 65535;
 8003dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dd6:	81fb      	strh	r3, [r7, #14]
	while(last != TIM2->CNT){
 8003dd8:	e006      	b.n	8003de8 <turn_right90+0x158>
		last = TIM2->CNT;
 8003dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	81fb      	strh	r3, [r7, #14]
		HAL_Delay(100);
 8003de2:	2064      	movs	r0, #100	; 0x64
 8003de4:	f000 fa40 	bl	8004268 <HAL_Delay>
	while(last != TIM2->CNT){
 8003de8:	89fa      	ldrh	r2, [r7, #14]
 8003dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d1f2      	bne.n	8003dda <turn_right90+0x14a>
	}
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003df4:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <turn_right90+0x188>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003dfc:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <turn_right90+0x18c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2200      	movs	r2, #0
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8003e0c:	f3af 8000 	nop.w
 8003e10:	9999999a 	.word	0x9999999a
 8003e14:	3fb99999 	.word	0x3fb99999
 8003e18:	200004b8 	.word	0x200004b8
 8003e1c:	20000500 	.word	0x20000500
 8003e20:	4494b08d 	.word	0x4494b08d
 8003e24:	20000611 	.word	0x20000611

08003e28 <go_straight>:

void go_straight(float distance, bool brakee) { //millimeter
 8003e28:	b5b0      	push	{r4, r5, r7, lr}
 8003e2a:	b090      	sub	sp, #64	; 0x40
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	70fb      	strb	r3, [r7, #3]
	uint16_t en = round(distance * counts_per_1mm);
 8003e34:	4b9d      	ldr	r3, [pc, #628]	; (80040ac <go_straight+0x284>)
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fc fab3 	bl	80003a4 <__aeabi_fmul>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fc fcc7 	bl	80007d4 <__aeabi_f2d>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f008 f8e5 	bl	800c01c <round>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4610      	mov	r0, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f7fc fd3b 	bl	80008d4 <__aeabi_d2uiz>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	853b      	strh	r3, [r7, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8003e62:	4b93      	ldr	r3, [pc, #588]	; (80040b0 <go_straight+0x288>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e6c:	4b90      	ldr	r3, [pc, #576]	; (80040b0 <go_straight+0x288>)
 8003e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e72:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, en);
 8003e74:	4b8f      	ldr	r3, [pc, #572]	; (80040b4 <go_straight+0x28c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e7e:	4a8d      	ldr	r2, [pc, #564]	; (80040b4 <go_straight+0x28c>)
 8003e80:	60d3      	str	r3, [r2, #12]
	status = straight;
 8003e82:	4b8d      	ldr	r3, [pc, #564]	; (80040b8 <go_straight+0x290>)
 8003e84:	22fa      	movs	r2, #250	; 0xfa
 8003e86:	701a      	strb	r2, [r3, #0]
	int32_t Err, P, D, old_Error = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t temp_1, temp_2;
	bool useIRSensor = true;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t left_sensor45, right_sensor45, left_sensor90, right_sensor90;
	uint16_t speed = speed_levels[Rmode];
 8003e92:	4b8a      	ldr	r3, [pc, #552]	; (80040bc <go_straight+0x294>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4b89      	ldr	r3, [pc, #548]	; (80040c0 <go_straight+0x298>)
 8003e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea0:	85bb      	strh	r3, [r7, #44]	; 0x2c
	while(status != 0){
 8003ea2:	e0e3      	b.n	800406c <go_straight+0x244>
		vl53l0x_GetRanging_now(pMyDevice[5], &left_sensor90);
 8003ea4:	4b87      	ldr	r3, [pc, #540]	; (80040c4 <go_straight+0x29c>)
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f107 020a 	add.w	r2, r7, #10
 8003eac:	4611      	mov	r1, r2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f007 fe88 	bl	800bbc4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(pMyDevice[2], &left_sensor45);
 8003eb4:	4b83      	ldr	r3, [pc, #524]	; (80040c4 <go_straight+0x29c>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f107 020e 	add.w	r2, r7, #14
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f007 fe80 	bl	800bbc4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(pMyDevice[3], &right_sensor45);
 8003ec4:	4b7f      	ldr	r3, [pc, #508]	; (80040c4 <go_straight+0x29c>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f107 020c 	add.w	r2, r7, #12
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f007 fe78 	bl	800bbc4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(pMyDevice[0], &right_sensor90);
 8003ed4:	4b7b      	ldr	r3, [pc, #492]	; (80040c4 <go_straight+0x29c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f107 0208 	add.w	r2, r7, #8
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f007 fe70 	bl	800bbc4 <vl53l0x_GetRanging_now>
		if(left_sensor45 < HasleftWallValue_45 && right_sensor45 < HasrightWallValue_45
 8003ee4:	89fb      	ldrh	r3, [r7, #14]
 8003ee6:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8003eea:	d219      	bcs.n	8003f20 <go_straight+0xf8>
 8003eec:	89bb      	ldrh	r3, [r7, #12]
 8003eee:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8003ef2:	d215      	bcs.n	8003f20 <go_straight+0xf8>
				&& left_sensor90 < HasleftWallValue_90 && right_sensor90 < HasrightWallValue_90){
 8003ef4:	897b      	ldrh	r3, [r7, #10]
 8003ef6:	2b95      	cmp	r3, #149	; 0x95
 8003ef8:	d812      	bhi.n	8003f20 <go_straight+0xf8>
 8003efa:	893b      	ldrh	r3, [r7, #8]
 8003efc:	2b95      	cmp	r3, #149	; 0x95
 8003efe:	d80f      	bhi.n	8003f20 <go_straight+0xf8>
			Err = right_sensor45 - left_sensor45 + 10;
 8003f00:	89bb      	ldrh	r3, [r7, #12]
 8003f02:	461a      	mov	r2, r3
 8003f04:	89fb      	ldrh	r3, [r7, #14]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	330a      	adds	r3, #10
 8003f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
			D = Err - old_Error;
 8003f0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	637b      	str	r3, [r7, #52]	; 0x34
			old_Error = Err;
 8003f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f16:	633b      	str	r3, [r7, #48]	; 0x30
			useIRSensor = true;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003f1e:	e041      	b.n	8003fa4 <go_straight+0x17c>
		} else if(left_sensor45 < HasleftWallValue_45 && left_sensor90 < HasleftWallValue_90){
 8003f20:	89fb      	ldrh	r3, [r7, #14]
 8003f22:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8003f26:	d210      	bcs.n	8003f4a <go_straight+0x122>
 8003f28:	897b      	ldrh	r3, [r7, #10]
 8003f2a:	2b95      	cmp	r3, #149	; 0x95
 8003f2c:	d80d      	bhi.n	8003f4a <go_straight+0x122>
			Err = (int32_t)leftWallValue - (int32_t)left_sensor45;
 8003f2e:	89fb      	ldrh	r3, [r7, #14]
 8003f30:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8003f34:	63fb      	str	r3, [r7, #60]	; 0x3c
			D = Err - old_Error;
 8003f36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	637b      	str	r3, [r7, #52]	; 0x34
			old_Error = Err;
 8003f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f40:	633b      	str	r3, [r7, #48]	; 0x30
			useIRSensor = true;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003f48:	e02c      	b.n	8003fa4 <go_straight+0x17c>
		} else if(right_sensor45 < HasrightWallValue_45 && right_sensor90 < HasrightWallValue_90){
 8003f4a:	89bb      	ldrh	r3, [r7, #12]
 8003f4c:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8003f50:	d20f      	bcs.n	8003f72 <go_straight+0x14a>
 8003f52:	893b      	ldrh	r3, [r7, #8]
 8003f54:	2b95      	cmp	r3, #149	; 0x95
 8003f56:	d80c      	bhi.n	8003f72 <go_straight+0x14a>
			Err = (int32_t)right_sensor45 - (int32_t)rightWallValue;
 8003f58:	89bb      	ldrh	r3, [r7, #12]
 8003f5a:	3bfa      	subs	r3, #250	; 0xfa
 8003f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
			D = Err - old_Error;
 8003f5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
			old_Error = Err;
 8003f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f68:	633b      	str	r3, [r7, #48]	; 0x30
			useIRSensor = true;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003f70:	e018      	b.n	8003fa4 <go_straight+0x17c>
		} else {
			temp_1 = TIM2->CNT;
 8003f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
			temp_2 = TIM3->CNT;
 8003f7a:	4b53      	ldr	r3, [pc, #332]	; (80040c8 <go_straight+0x2a0>)
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	623b      	str	r3, [r7, #32]
			Err = temp_2 - temp_1;
 8003f80:	6a3a      	ldr	r2, [r7, #32]
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	63fb      	str	r3, [r7, #60]	; 0x3c
			useIRSensor = false;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			a = TIM2->CNT;
 8003f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b4d      	ldr	r3, [pc, #308]	; (80040cc <go_straight+0x2a4>)
 8003f98:	601a      	str	r2, [r3, #0]
			b = TIM3->CNT;
 8003f9a:	4b4b      	ldr	r3, [pc, #300]	; (80040c8 <go_straight+0x2a0>)
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4b4b      	ldr	r3, [pc, #300]	; (80040d0 <go_straight+0x2a8>)
 8003fa2:	601a      	str	r2, [r3, #0]
		}
		if(useIRSensor){
 8003fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d026      	beq.n	8003ffa <go_straight+0x1d2>
			P = P_params[0] * Err + D * 0.5;
 8003fac:	4b49      	ldr	r3, [pc, #292]	; (80040d4 <go_straight+0x2ac>)
 8003fae:	681c      	ldr	r4, [r3, #0]
 8003fb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003fb2:	f7fc fd69 	bl	8000a88 <__aeabi_i2f>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f7fc f9f2 	bl	80003a4 <__aeabi_fmul>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fc fc06 	bl	80007d4 <__aeabi_f2d>
 8003fc8:	4604      	mov	r4, r0
 8003fca:	460d      	mov	r5, r1
 8003fcc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fce:	f7fc fbef 	bl	80007b0 <__aeabi_i2d>
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	4b40      	ldr	r3, [pc, #256]	; (80040d8 <go_straight+0x2b0>)
 8003fd8:	f7fc f8ba 	bl	8000150 <__aeabi_dmul>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	f7fc fa98 	bl	8000518 <__adddf3>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4610      	mov	r0, r2
 8003fee:	4619      	mov	r1, r3
 8003ff0:	f7fc fc48 	bl	8000884 <__aeabi_d2iz>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ff8:	e001      	b.n	8003ffe <go_straight+0x1d6>
		} else {
			P = 0; //P_params[1] * Err;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	63bb      	str	r3, [r7, #56]	; 0x38
		}
		P = max(-200, min(P, 200));
 8003ffe:	f06f 03c7 	mvn.w	r3, #199	; 0xc7
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	23c8      	movs	r3, #200	; 0xc8
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	4293      	cmp	r3, r2
 8004012:	bfa8      	it	ge
 8004014:	4613      	movge	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4293      	cmp	r3, r2
 800401e:	bfb8      	it	lt
 8004020:	4613      	movlt	r3, r2
 8004022:	63bb      	str	r3, [r7, #56]	; 0x38
		if(brakee && en > 600 && en - TIM3->CNT < 600){
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00c      	beq.n	8004044 <go_straight+0x21c>
 800402a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800402c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004030:	d908      	bls.n	8004044 <go_straight+0x21c>
 8004032:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004034:	4b24      	ldr	r3, [pc, #144]	; (80040c8 <go_straight+0x2a0>)
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800403e:	d201      	bcs.n	8004044 <go_straight+0x21c>
			speed = 200;
 8004040:	23c8      	movs	r3, #200	; 0xc8
 8004042:	85bb      	strh	r3, [r7, #44]	; 0x2c
		}
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8004044:	4b25      	ldr	r3, [pc, #148]	; (80040dc <go_straight+0x2b4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2200      	movs	r2, #0
 800404a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, speed + P);
 800404c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	441a      	add	r2, r3
 8004052:	4b22      	ldr	r3, [pc, #136]	; (80040dc <go_straight+0x2b4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed - P);
 8004058:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	1ad2      	subs	r2, r2, r3
 800405e:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <go_straight+0x2b4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8004064:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <go_straight+0x2b4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2200      	movs	r2, #0
 800406a:	639a      	str	r2, [r3, #56]	; 0x38
	while(status != 0){
 800406c:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <go_straight+0x290>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	b25b      	sxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	f47f af16 	bne.w	8003ea4 <go_straight+0x7c>
	}
	if(brakee){
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d011      	beq.n	80040a2 <go_straight+0x27a>
		brake(2);
 800407e:	2002      	movs	r0, #2
 8004080:	f000 f82e 	bl	80040e0 <brake>
		uint16_t last = 65535;
 8004084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004088:	857b      	strh	r3, [r7, #42]	; 0x2a
		while(last != TIM3->CNT){
 800408a:	e005      	b.n	8004098 <go_straight+0x270>
			last = TIM3->CNT;
 800408c:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <go_straight+0x2a0>)
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	857b      	strh	r3, [r7, #42]	; 0x2a
			HAL_Delay(100);
 8004092:	2064      	movs	r0, #100	; 0x64
 8004094:	f000 f8e8 	bl	8004268 <HAL_Delay>
		while(last != TIM3->CNT){
 8004098:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800409a:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <go_straight+0x2a0>)
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	429a      	cmp	r2, r3
 80040a0:	d1f4      	bne.n	800408c <go_straight+0x264>
		}
	}
}
 80040a2:	bf00      	nop
 80040a4:	3740      	adds	r7, #64	; 0x40
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bdb0      	pop	{r4, r5, r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40d85ce8 	.word	0x40d85ce8
 80040b0:	200004b8 	.word	0x200004b8
 80040b4:	20000500 	.word	0x20000500
 80040b8:	20000611 	.word	0x20000611
 80040bc:	20000610 	.word	0x20000610
 80040c0:	0800c5fc 	.word	0x0800c5fc
 80040c4:	20000f5c 	.word	0x20000f5c
 80040c8:	40000400 	.word	0x40000400
 80040cc:	20000614 	.word	0x20000614
 80040d0:	20000618 	.word	0x20000618
 80040d4:	20000000 	.word	0x20000000
 80040d8:	3fe00000 	.word	0x3fe00000
 80040dc:	20000470 	.word	0x20000470

080040e0 <brake>:

void brake(uint8_t mode){
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	71fb      	strb	r3, [r7, #7]
	if(mode == 0){
 80040ea:	79fb      	ldrb	r3, [r7, #7]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <brake+0x26>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 80040f0:	4b18      	ldr	r3, [pc, #96]	; (8004154 <brake+0x74>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a17      	ldr	r2, [pc, #92]	; (8004154 <brake+0x74>)
 80040f6:	68d2      	ldr	r2, [r2, #12]
 80040f8:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 80040fa:	4b16      	ldr	r3, [pc, #88]	; (8004154 <brake+0x74>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a15      	ldr	r2, [pc, #84]	; (8004154 <brake+0x74>)
 8004100:	68d2      	ldr	r2, [r2, #12]
 8004102:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
	}

}
 8004104:	e021      	b.n	800414a <brake+0x6a>
	} else if(mode == 1){
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d10a      	bne.n	8004122 <brake+0x42>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 800410c:	4b11      	ldr	r3, [pc, #68]	; (8004154 <brake+0x74>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a10      	ldr	r2, [pc, #64]	; (8004154 <brake+0x74>)
 8004112:	68d2      	ldr	r2, [r2, #12]
 8004114:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 8004116:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <brake+0x74>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a0e      	ldr	r2, [pc, #56]	; (8004154 <brake+0x74>)
 800411c:	68d2      	ldr	r2, [r2, #12]
 800411e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004120:	e013      	b.n	800414a <brake+0x6a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 8004122:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <brake+0x74>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a0b      	ldr	r2, [pc, #44]	; (8004154 <brake+0x74>)
 8004128:	68d2      	ldr	r2, [r2, #12]
 800412a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 800412c:	4b09      	ldr	r3, [pc, #36]	; (8004154 <brake+0x74>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a08      	ldr	r2, [pc, #32]	; (8004154 <brake+0x74>)
 8004132:	68d2      	ldr	r2, [r2, #12]
 8004134:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 8004136:	4b07      	ldr	r3, [pc, #28]	; (8004154 <brake+0x74>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a06      	ldr	r2, [pc, #24]	; (8004154 <brake+0x74>)
 800413c:	68d2      	ldr	r2, [r2, #12]
 800413e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 8004140:	4b04      	ldr	r3, [pc, #16]	; (8004154 <brake+0x74>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a03      	ldr	r2, [pc, #12]	; (8004154 <brake+0x74>)
 8004146:	68d2      	ldr	r2, [r2, #12]
 8004148:	641a      	str	r2, [r3, #64]	; 0x40
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	20000470 	.word	0x20000470

08004158 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004158:	f7ff fba0 	bl	800389c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800415c:	480b      	ldr	r0, [pc, #44]	; (800418c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800415e:	490c      	ldr	r1, [pc, #48]	; (8004190 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004160:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004164:	e002      	b.n	800416c <LoopCopyDataInit>

08004166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800416a:	3304      	adds	r3, #4

0800416c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800416c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800416e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004170:	d3f9      	bcc.n	8004166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004172:	4a09      	ldr	r2, [pc, #36]	; (8004198 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004174:	4c09      	ldr	r4, [pc, #36]	; (800419c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004178:	e001      	b.n	800417e <LoopFillZerobss>

0800417a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800417a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800417c:	3204      	adds	r2, #4

0800417e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800417e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004180:	d3fb      	bcc.n	800417a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004182:	f007 ff97 	bl	800c0b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004186:	f7fe fe17 	bl	8002db8 <main>
  bx lr
 800418a:	4770      	bx	lr
  ldr r0, =_sdata
 800418c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004190:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8004194:	0800c63c 	.word	0x0800c63c
  ldr r2, =_sbss
 8004198:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 800419c:	20001254 	.word	0x20001254

080041a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041a0:	e7fe      	b.n	80041a0 <ADC1_2_IRQHandler>
	...

080041a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041a8:	4b08      	ldr	r3, [pc, #32]	; (80041cc <HAL_Init+0x28>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a07      	ldr	r2, [pc, #28]	; (80041cc <HAL_Init+0x28>)
 80041ae:	f043 0310 	orr.w	r3, r3, #16
 80041b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041b4:	2003      	movs	r0, #3
 80041b6:	f000 f96b 	bl	8004490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041ba:	200f      	movs	r0, #15
 80041bc:	f000 f808 	bl	80041d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041c0:	f7ff f94e 	bl	8003460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40022000 	.word	0x40022000

080041d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041d8:	4b12      	ldr	r3, [pc, #72]	; (8004224 <HAL_InitTick+0x54>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_InitTick+0x58>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	4619      	mov	r1, r3
 80041e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f991 	bl	8004516 <HAL_SYSTICK_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e00e      	b.n	800421c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b0f      	cmp	r3, #15
 8004202:	d80a      	bhi.n	800421a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004204:	2200      	movs	r2, #0
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	f000 f94b 	bl	80044a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004210:	4a06      	ldr	r2, [pc, #24]	; (800422c <HAL_InitTick+0x5c>)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e000      	b.n	800421c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
}
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20000008 	.word	0x20000008
 8004228:	20000010 	.word	0x20000010
 800422c:	2000000c 	.word	0x2000000c

08004230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_IncTick+0x1c>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	4b05      	ldr	r3, [pc, #20]	; (8004250 <HAL_IncTick+0x20>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4413      	add	r3, r2
 8004240:	4a03      	ldr	r2, [pc, #12]	; (8004250 <HAL_IncTick+0x20>)
 8004242:	6013      	str	r3, [r2, #0]
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr
 800424c:	20000010 	.word	0x20000010
 8004250:	20001210 	.word	0x20001210

08004254 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return uwTick;
 8004258:	4b02      	ldr	r3, [pc, #8]	; (8004264 <HAL_GetTick+0x10>)
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr
 8004264:	20001210 	.word	0x20001210

08004268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004270:	f7ff fff0 	bl	8004254 <HAL_GetTick>
 8004274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d005      	beq.n	800428e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <HAL_Delay+0x44>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800428e:	bf00      	nop
 8004290:	f7ff ffe0 	bl	8004254 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	429a      	cmp	r2, r3
 800429e:	d8f7      	bhi.n	8004290 <HAL_Delay+0x28>
  {
  }
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000010 	.word	0x20000010

080042b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <__NVIC_SetPriorityGrouping+0x44>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042cc:	4013      	ands	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042e2:	4a04      	ldr	r2, [pc, #16]	; (80042f4 <__NVIC_SetPriorityGrouping+0x44>)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	60d3      	str	r3, [r2, #12]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	e000ed00 	.word	0xe000ed00

080042f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042fc:	4b04      	ldr	r3, [pc, #16]	; (8004310 <__NVIC_GetPriorityGrouping+0x18>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	0a1b      	lsrs	r3, r3, #8
 8004302:	f003 0307 	and.w	r3, r3, #7
}
 8004306:	4618      	mov	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	2b00      	cmp	r3, #0
 8004324:	db0b      	blt.n	800433e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	f003 021f 	and.w	r2, r3, #31
 800432c:	4906      	ldr	r1, [pc, #24]	; (8004348 <__NVIC_EnableIRQ+0x34>)
 800432e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2001      	movs	r0, #1
 8004336:	fa00 f202 	lsl.w	r2, r0, r2
 800433a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr
 8004348:	e000e100 	.word	0xe000e100

0800434c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	2b00      	cmp	r3, #0
 800435c:	db12      	blt.n	8004384 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	490a      	ldr	r1, [pc, #40]	; (8004390 <__NVIC_DisableIRQ+0x44>)
 8004366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2001      	movs	r0, #1
 800436e:	fa00 f202 	lsl.w	r2, r0, r2
 8004372:	3320      	adds	r3, #32
 8004374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004378:	f3bf 8f4f 	dsb	sy
}
 800437c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800437e:	f3bf 8f6f 	isb	sy
}
 8004382:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	e000e100 	.word	0xe000e100

08004394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	6039      	str	r1, [r7, #0]
 800439e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	db0a      	blt.n	80043be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	490c      	ldr	r1, [pc, #48]	; (80043e0 <__NVIC_SetPriority+0x4c>)
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	0112      	lsls	r2, r2, #4
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	440b      	add	r3, r1
 80043b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043bc:	e00a      	b.n	80043d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	4908      	ldr	r1, [pc, #32]	; (80043e4 <__NVIC_SetPriority+0x50>)
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	3b04      	subs	r3, #4
 80043cc:	0112      	lsls	r2, r2, #4
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	440b      	add	r3, r1
 80043d2:	761a      	strb	r2, [r3, #24]
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	e000e100 	.word	0xe000e100
 80043e4:	e000ed00 	.word	0xe000ed00

080043e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b089      	sub	sp, #36	; 0x24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f1c3 0307 	rsb	r3, r3, #7
 8004402:	2b04      	cmp	r3, #4
 8004404:	bf28      	it	cs
 8004406:	2304      	movcs	r3, #4
 8004408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3304      	adds	r3, #4
 800440e:	2b06      	cmp	r3, #6
 8004410:	d902      	bls.n	8004418 <NVIC_EncodePriority+0x30>
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3b03      	subs	r3, #3
 8004416:	e000      	b.n	800441a <NVIC_EncodePriority+0x32>
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800441c:	f04f 32ff 	mov.w	r2, #4294967295
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43da      	mvns	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	401a      	ands	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004430:	f04f 31ff 	mov.w	r1, #4294967295
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	fa01 f303 	lsl.w	r3, r1, r3
 800443a:	43d9      	mvns	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004440:	4313      	orrs	r3, r2
         );
}
 8004442:	4618      	mov	r0, r3
 8004444:	3724      	adds	r7, #36	; 0x24
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3b01      	subs	r3, #1
 8004458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800445c:	d301      	bcc.n	8004462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800445e:	2301      	movs	r3, #1
 8004460:	e00f      	b.n	8004482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004462:	4a0a      	ldr	r2, [pc, #40]	; (800448c <SysTick_Config+0x40>)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3b01      	subs	r3, #1
 8004468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800446a:	210f      	movs	r1, #15
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	f7ff ff90 	bl	8004394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <SysTick_Config+0x40>)
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800447a:	4b04      	ldr	r3, [pc, #16]	; (800448c <SysTick_Config+0x40>)
 800447c:	2207      	movs	r2, #7
 800447e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	e000e010 	.word	0xe000e010

08004490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ff09 	bl	80042b0 <__NVIC_SetPriorityGrouping>
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b086      	sub	sp, #24
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	4603      	mov	r3, r0
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044b8:	f7ff ff1e 	bl	80042f8 <__NVIC_GetPriorityGrouping>
 80044bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	6978      	ldr	r0, [r7, #20]
 80044c4:	f7ff ff90 	bl	80043e8 <NVIC_EncodePriority>
 80044c8:	4602      	mov	r2, r0
 80044ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ce:	4611      	mov	r1, r2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff ff5f 	bl	8004394 <__NVIC_SetPriority>
}
 80044d6:	bf00      	nop
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	4603      	mov	r3, r0
 80044e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff ff11 	bl	8004314 <__NVIC_EnableIRQ>
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	4603      	mov	r3, r0
 8004502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ff1f 	bl	800434c <__NVIC_DisableIRQ>
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff ff94 	bl	800444c <SysTick_Config>
 8004524:	4603      	mov	r3, r0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004530:	b480      	push	{r7}
 8004532:	b08b      	sub	sp, #44	; 0x2c
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800453e:	2300      	movs	r3, #0
 8004540:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004542:	e169      	b.n	8004818 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004544:	2201      	movs	r2, #1
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	429a      	cmp	r2, r3
 800455e:	f040 8158 	bne.w	8004812 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4a9a      	ldr	r2, [pc, #616]	; (80047d0 <HAL_GPIO_Init+0x2a0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d05e      	beq.n	800462a <HAL_GPIO_Init+0xfa>
 800456c:	4a98      	ldr	r2, [pc, #608]	; (80047d0 <HAL_GPIO_Init+0x2a0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d875      	bhi.n	800465e <HAL_GPIO_Init+0x12e>
 8004572:	4a98      	ldr	r2, [pc, #608]	; (80047d4 <HAL_GPIO_Init+0x2a4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d058      	beq.n	800462a <HAL_GPIO_Init+0xfa>
 8004578:	4a96      	ldr	r2, [pc, #600]	; (80047d4 <HAL_GPIO_Init+0x2a4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d86f      	bhi.n	800465e <HAL_GPIO_Init+0x12e>
 800457e:	4a96      	ldr	r2, [pc, #600]	; (80047d8 <HAL_GPIO_Init+0x2a8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d052      	beq.n	800462a <HAL_GPIO_Init+0xfa>
 8004584:	4a94      	ldr	r2, [pc, #592]	; (80047d8 <HAL_GPIO_Init+0x2a8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d869      	bhi.n	800465e <HAL_GPIO_Init+0x12e>
 800458a:	4a94      	ldr	r2, [pc, #592]	; (80047dc <HAL_GPIO_Init+0x2ac>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d04c      	beq.n	800462a <HAL_GPIO_Init+0xfa>
 8004590:	4a92      	ldr	r2, [pc, #584]	; (80047dc <HAL_GPIO_Init+0x2ac>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d863      	bhi.n	800465e <HAL_GPIO_Init+0x12e>
 8004596:	4a92      	ldr	r2, [pc, #584]	; (80047e0 <HAL_GPIO_Init+0x2b0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d046      	beq.n	800462a <HAL_GPIO_Init+0xfa>
 800459c:	4a90      	ldr	r2, [pc, #576]	; (80047e0 <HAL_GPIO_Init+0x2b0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d85d      	bhi.n	800465e <HAL_GPIO_Init+0x12e>
 80045a2:	2b12      	cmp	r3, #18
 80045a4:	d82a      	bhi.n	80045fc <HAL_GPIO_Init+0xcc>
 80045a6:	2b12      	cmp	r3, #18
 80045a8:	d859      	bhi.n	800465e <HAL_GPIO_Init+0x12e>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <HAL_GPIO_Init+0x80>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	0800462b 	.word	0x0800462b
 80045b4:	08004605 	.word	0x08004605
 80045b8:	08004617 	.word	0x08004617
 80045bc:	08004659 	.word	0x08004659
 80045c0:	0800465f 	.word	0x0800465f
 80045c4:	0800465f 	.word	0x0800465f
 80045c8:	0800465f 	.word	0x0800465f
 80045cc:	0800465f 	.word	0x0800465f
 80045d0:	0800465f 	.word	0x0800465f
 80045d4:	0800465f 	.word	0x0800465f
 80045d8:	0800465f 	.word	0x0800465f
 80045dc:	0800465f 	.word	0x0800465f
 80045e0:	0800465f 	.word	0x0800465f
 80045e4:	0800465f 	.word	0x0800465f
 80045e8:	0800465f 	.word	0x0800465f
 80045ec:	0800465f 	.word	0x0800465f
 80045f0:	0800465f 	.word	0x0800465f
 80045f4:	0800460d 	.word	0x0800460d
 80045f8:	08004621 	.word	0x08004621
 80045fc:	4a79      	ldr	r2, [pc, #484]	; (80047e4 <HAL_GPIO_Init+0x2b4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004602:	e02c      	b.n	800465e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	623b      	str	r3, [r7, #32]
          break;
 800460a:	e029      	b.n	8004660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	3304      	adds	r3, #4
 8004612:	623b      	str	r3, [r7, #32]
          break;
 8004614:	e024      	b.n	8004660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	3308      	adds	r3, #8
 800461c:	623b      	str	r3, [r7, #32]
          break;
 800461e:	e01f      	b.n	8004660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	330c      	adds	r3, #12
 8004626:	623b      	str	r3, [r7, #32]
          break;
 8004628:	e01a      	b.n	8004660 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004632:	2304      	movs	r3, #4
 8004634:	623b      	str	r3, [r7, #32]
          break;
 8004636:	e013      	b.n	8004660 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d105      	bne.n	800464c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004640:	2308      	movs	r3, #8
 8004642:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	611a      	str	r2, [r3, #16]
          break;
 800464a:	e009      	b.n	8004660 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800464c:	2308      	movs	r3, #8
 800464e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	615a      	str	r2, [r3, #20]
          break;
 8004656:	e003      	b.n	8004660 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004658:	2300      	movs	r3, #0
 800465a:	623b      	str	r3, [r7, #32]
          break;
 800465c:	e000      	b.n	8004660 <HAL_GPIO_Init+0x130>
          break;
 800465e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2bff      	cmp	r3, #255	; 0xff
 8004664:	d801      	bhi.n	800466a <HAL_GPIO_Init+0x13a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	e001      	b.n	800466e <HAL_GPIO_Init+0x13e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3304      	adds	r3, #4
 800466e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2bff      	cmp	r3, #255	; 0xff
 8004674:	d802      	bhi.n	800467c <HAL_GPIO_Init+0x14c>
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	e002      	b.n	8004682 <HAL_GPIO_Init+0x152>
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	3b08      	subs	r3, #8
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	210f      	movs	r1, #15
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	401a      	ands	r2, r3
 8004694:	6a39      	ldr	r1, [r7, #32]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	fa01 f303 	lsl.w	r3, r1, r3
 800469c:	431a      	orrs	r2, r3
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80b1 	beq.w	8004812 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046b0:	4b4d      	ldr	r3, [pc, #308]	; (80047e8 <HAL_GPIO_Init+0x2b8>)
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	4a4c      	ldr	r2, [pc, #304]	; (80047e8 <HAL_GPIO_Init+0x2b8>)
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	6193      	str	r3, [r2, #24]
 80046bc:	4b4a      	ldr	r3, [pc, #296]	; (80047e8 <HAL_GPIO_Init+0x2b8>)
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046c8:	4a48      	ldr	r2, [pc, #288]	; (80047ec <HAL_GPIO_Init+0x2bc>)
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	089b      	lsrs	r3, r3, #2
 80046ce:	3302      	adds	r3, #2
 80046d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	220f      	movs	r2, #15
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4013      	ands	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a40      	ldr	r2, [pc, #256]	; (80047f0 <HAL_GPIO_Init+0x2c0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <HAL_GPIO_Init+0x1ec>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a3f      	ldr	r2, [pc, #252]	; (80047f4 <HAL_GPIO_Init+0x2c4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00d      	beq.n	8004718 <HAL_GPIO_Init+0x1e8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a3e      	ldr	r2, [pc, #248]	; (80047f8 <HAL_GPIO_Init+0x2c8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d007      	beq.n	8004714 <HAL_GPIO_Init+0x1e4>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a3d      	ldr	r2, [pc, #244]	; (80047fc <HAL_GPIO_Init+0x2cc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d101      	bne.n	8004710 <HAL_GPIO_Init+0x1e0>
 800470c:	2303      	movs	r3, #3
 800470e:	e006      	b.n	800471e <HAL_GPIO_Init+0x1ee>
 8004710:	2304      	movs	r3, #4
 8004712:	e004      	b.n	800471e <HAL_GPIO_Init+0x1ee>
 8004714:	2302      	movs	r3, #2
 8004716:	e002      	b.n	800471e <HAL_GPIO_Init+0x1ee>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_GPIO_Init+0x1ee>
 800471c:	2300      	movs	r3, #0
 800471e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004720:	f002 0203 	and.w	r2, r2, #3
 8004724:	0092      	lsls	r2, r2, #2
 8004726:	4093      	lsls	r3, r2
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800472e:	492f      	ldr	r1, [pc, #188]	; (80047ec <HAL_GPIO_Init+0x2bc>)
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	089b      	lsrs	r3, r3, #2
 8004734:	3302      	adds	r3, #2
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d006      	beq.n	8004756 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004748:	4b2d      	ldr	r3, [pc, #180]	; (8004800 <HAL_GPIO_Init+0x2d0>)
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	492c      	ldr	r1, [pc, #176]	; (8004800 <HAL_GPIO_Init+0x2d0>)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	4313      	orrs	r3, r2
 8004752:	608b      	str	r3, [r1, #8]
 8004754:	e006      	b.n	8004764 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004756:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <HAL_GPIO_Init+0x2d0>)
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	43db      	mvns	r3, r3
 800475e:	4928      	ldr	r1, [pc, #160]	; (8004800 <HAL_GPIO_Init+0x2d0>)
 8004760:	4013      	ands	r3, r2
 8004762:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d006      	beq.n	800477e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004770:	4b23      	ldr	r3, [pc, #140]	; (8004800 <HAL_GPIO_Init+0x2d0>)
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	4922      	ldr	r1, [pc, #136]	; (8004800 <HAL_GPIO_Init+0x2d0>)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	4313      	orrs	r3, r2
 800477a:	60cb      	str	r3, [r1, #12]
 800477c:	e006      	b.n	800478c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800477e:	4b20      	ldr	r3, [pc, #128]	; (8004800 <HAL_GPIO_Init+0x2d0>)
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	43db      	mvns	r3, r3
 8004786:	491e      	ldr	r1, [pc, #120]	; (8004800 <HAL_GPIO_Init+0x2d0>)
 8004788:	4013      	ands	r3, r2
 800478a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d006      	beq.n	80047a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004798:	4b19      	ldr	r3, [pc, #100]	; (8004800 <HAL_GPIO_Init+0x2d0>)
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	4918      	ldr	r1, [pc, #96]	; (8004800 <HAL_GPIO_Init+0x2d0>)
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	604b      	str	r3, [r1, #4]
 80047a4:	e006      	b.n	80047b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047a6:	4b16      	ldr	r3, [pc, #88]	; (8004800 <HAL_GPIO_Init+0x2d0>)
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	4914      	ldr	r1, [pc, #80]	; (8004800 <HAL_GPIO_Init+0x2d0>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d021      	beq.n	8004804 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047c0:	4b0f      	ldr	r3, [pc, #60]	; (8004800 <HAL_GPIO_Init+0x2d0>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	490e      	ldr	r1, [pc, #56]	; (8004800 <HAL_GPIO_Init+0x2d0>)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	600b      	str	r3, [r1, #0]
 80047cc:	e021      	b.n	8004812 <HAL_GPIO_Init+0x2e2>
 80047ce:	bf00      	nop
 80047d0:	10320000 	.word	0x10320000
 80047d4:	10310000 	.word	0x10310000
 80047d8:	10220000 	.word	0x10220000
 80047dc:	10210000 	.word	0x10210000
 80047e0:	10120000 	.word	0x10120000
 80047e4:	10110000 	.word	0x10110000
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40010800 	.word	0x40010800
 80047f4:	40010c00 	.word	0x40010c00
 80047f8:	40011000 	.word	0x40011000
 80047fc:	40011400 	.word	0x40011400
 8004800:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_GPIO_Init+0x304>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	43db      	mvns	r3, r3
 800480c:	4909      	ldr	r1, [pc, #36]	; (8004834 <HAL_GPIO_Init+0x304>)
 800480e:	4013      	ands	r3, r2
 8004810:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	3301      	adds	r3, #1
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	f47f ae8e 	bne.w	8004544 <HAL_GPIO_Init+0x14>
  }
}
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	372c      	adds	r7, #44	; 0x2c
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr
 8004834:	40010400 	.word	0x40010400

08004838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	807b      	strh	r3, [r7, #2]
 8004844:	4613      	mov	r3, r2
 8004846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004848:	787b      	ldrb	r3, [r7, #1]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800484e:	887a      	ldrh	r2, [r7, #2]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004854:	e003      	b.n	800485e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004856:	887b      	ldrh	r3, [r7, #2]
 8004858:	041a      	lsls	r2, r3, #16
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	611a      	str	r2, [r3, #16]
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	4013      	ands	r3, r2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d006      	beq.n	800488c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800487e:	4a05      	ldr	r2, [pc, #20]	; (8004894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f806 	bl	8004898 <HAL_GPIO_EXTI_Callback>
  }
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40010400 	.word	0x40010400

08004898 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr

080048ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e12b      	b.n	8004b16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fe fdf6 	bl	80034c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2224      	movs	r2, #36	; 0x24
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0201 	bic.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800490e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004910:	f001 fbca 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 8004914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4a81      	ldr	r2, [pc, #516]	; (8004b20 <HAL_I2C_Init+0x274>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d807      	bhi.n	8004930 <HAL_I2C_Init+0x84>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4a80      	ldr	r2, [pc, #512]	; (8004b24 <HAL_I2C_Init+0x278>)
 8004924:	4293      	cmp	r3, r2
 8004926:	bf94      	ite	ls
 8004928:	2301      	movls	r3, #1
 800492a:	2300      	movhi	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	e006      	b.n	800493e <HAL_I2C_Init+0x92>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a7d      	ldr	r2, [pc, #500]	; (8004b28 <HAL_I2C_Init+0x27c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	bf94      	ite	ls
 8004938:	2301      	movls	r3, #1
 800493a:	2300      	movhi	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e0e7      	b.n	8004b16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a78      	ldr	r2, [pc, #480]	; (8004b2c <HAL_I2C_Init+0x280>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	0c9b      	lsrs	r3, r3, #18
 8004950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a6a      	ldr	r2, [pc, #424]	; (8004b20 <HAL_I2C_Init+0x274>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d802      	bhi.n	8004980 <HAL_I2C_Init+0xd4>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	3301      	adds	r3, #1
 800497e:	e009      	b.n	8004994 <HAL_I2C_Init+0xe8>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	4a69      	ldr	r2, [pc, #420]	; (8004b30 <HAL_I2C_Init+0x284>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	099b      	lsrs	r3, r3, #6
 8004992:	3301      	adds	r3, #1
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	430b      	orrs	r3, r1
 800499a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	495c      	ldr	r1, [pc, #368]	; (8004b20 <HAL_I2C_Init+0x274>)
 80049b0:	428b      	cmp	r3, r1
 80049b2:	d819      	bhi.n	80049e8 <HAL_I2C_Init+0x13c>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1e59      	subs	r1, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	fbb1 f3f3 	udiv	r3, r1, r3
 80049c2:	1c59      	adds	r1, r3, #1
 80049c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049c8:	400b      	ands	r3, r1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_I2C_Init+0x138>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1e59      	subs	r1, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80049dc:	3301      	adds	r3, #1
 80049de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e2:	e051      	b.n	8004a88 <HAL_I2C_Init+0x1dc>
 80049e4:	2304      	movs	r3, #4
 80049e6:	e04f      	b.n	8004a88 <HAL_I2C_Init+0x1dc>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d111      	bne.n	8004a14 <HAL_I2C_Init+0x168>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1e58      	subs	r0, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	440b      	add	r3, r1
 80049fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a02:	3301      	adds	r3, #1
 8004a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf0c      	ite	eq
 8004a0c:	2301      	moveq	r3, #1
 8004a0e:	2300      	movne	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	e012      	b.n	8004a3a <HAL_I2C_Init+0x18e>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	1e58      	subs	r0, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6859      	ldr	r1, [r3, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	0099      	lsls	r1, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_I2C_Init+0x196>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e022      	b.n	8004a88 <HAL_I2C_Init+0x1dc>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10e      	bne.n	8004a68 <HAL_I2C_Init+0x1bc>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1e58      	subs	r0, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6859      	ldr	r1, [r3, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	440b      	add	r3, r1
 8004a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a66:	e00f      	b.n	8004a88 <HAL_I2C_Init+0x1dc>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1e58      	subs	r0, r3, #1
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6859      	ldr	r1, [r3, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	0099      	lsls	r1, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	6809      	ldr	r1, [r1, #0]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69da      	ldr	r2, [r3, #28]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6911      	ldr	r1, [r2, #16]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	68d2      	ldr	r2, [r2, #12]
 8004ac2:	4311      	orrs	r1, r2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	000186a0 	.word	0x000186a0
 8004b24:	001e847f 	.word	0x001e847f
 8004b28:	003d08ff 	.word	0x003d08ff
 8004b2c:	431bde83 	.word	0x431bde83
 8004b30:	10624dd3 	.word	0x10624dd3

08004b34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	460b      	mov	r3, r1
 8004b42:	817b      	strh	r3, [r7, #10]
 8004b44:	4613      	mov	r3, r2
 8004b46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b48:	f7ff fb84 	bl	8004254 <HAL_GetTick>
 8004b4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	f040 80e0 	bne.w	8004d1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	2319      	movs	r3, #25
 8004b62:	2201      	movs	r2, #1
 8004b64:	4970      	ldr	r1, [pc, #448]	; (8004d28 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fc9e 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
 8004b74:	e0d3      	b.n	8004d1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_I2C_Master_Transmit+0x50>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e0cc      	b.n	8004d1e <HAL_I2C_Master_Transmit+0x1ea>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d007      	beq.n	8004baa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2221      	movs	r2, #33	; 0x21
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	893a      	ldrh	r2, [r7, #8]
 8004bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a50      	ldr	r2, [pc, #320]	; (8004d2c <HAL_I2C_Master_Transmit+0x1f8>)
 8004bea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bec:	8979      	ldrh	r1, [r7, #10]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	6a3a      	ldr	r2, [r7, #32]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fb08 	bl	8005208 <I2C_MasterRequestWrite>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e08d      	b.n	8004d1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c18:	e066      	b.n	8004ce8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	6a39      	ldr	r1, [r7, #32]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fd5c 	bl	80056dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00d      	beq.n	8004c46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d107      	bne.n	8004c42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e06b      	b.n	8004d1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	781a      	ldrb	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d11b      	bne.n	8004cbc <HAL_I2C_Master_Transmit+0x188>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d017      	beq.n	8004cbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	781a      	ldrb	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	6a39      	ldr	r1, [r7, #32]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fd53 	bl	800576c <I2C_WaitOnBTFFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00d      	beq.n	8004ce8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d107      	bne.n	8004ce4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e01a      	b.n	8004d1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d194      	bne.n	8004c1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e000      	b.n	8004d1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
  }
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	00100002 	.word	0x00100002
 8004d2c:	ffff0000 	.word	0xffff0000

08004d30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08c      	sub	sp, #48	; 0x30
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	817b      	strh	r3, [r7, #10]
 8004d40:	4613      	mov	r3, r2
 8004d42:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d48:	f7ff fa84 	bl	8004254 <HAL_GetTick>
 8004d4c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	f040 824b 	bne.w	80051f2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	2319      	movs	r3, #25
 8004d62:	2201      	movs	r2, #1
 8004d64:	497f      	ldr	r1, [pc, #508]	; (8004f64 <HAL_I2C_Master_Receive+0x234>)
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fb9e 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004d72:	2302      	movs	r3, #2
 8004d74:	e23e      	b.n	80051f4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_I2C_Master_Receive+0x54>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e237      	b.n	80051f4 <HAL_I2C_Master_Receive+0x4c4>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d007      	beq.n	8004daa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004db8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2222      	movs	r2, #34	; 0x22
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2210      	movs	r2, #16
 8004dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	893a      	ldrh	r2, [r7, #8]
 8004dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4a5f      	ldr	r2, [pc, #380]	; (8004f68 <HAL_I2C_Master_Receive+0x238>)
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004dec:	8979      	ldrh	r1, [r7, #10]
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fa8a 	bl	800530c <I2C_MasterRequestRead>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e1f8      	b.n	80051f4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d113      	bne.n	8004e32 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	e1cc      	b.n	80051cc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d11e      	bne.n	8004e78 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e4a:	b672      	cpsid	i
}
 8004e4c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e74:	b662      	cpsie	i
}
 8004e76:	e035      	b.n	8004ee4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d11e      	bne.n	8004ebe <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e90:	b672      	cpsid	i
}
 8004e92:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004eba:	b662      	cpsie	i
}
 8004ebc:	e012      	b.n	8004ee4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ecc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ece:	2300      	movs	r3, #0
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004ee4:	e172      	b.n	80051cc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	f200 811f 	bhi.w	800512e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d123      	bne.n	8004f40 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fc7d 	bl	80057fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e173      	b.n	80051f4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f3e:	e145      	b.n	80051cc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d152      	bne.n	8004fee <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	2200      	movs	r2, #0
 8004f50:	4906      	ldr	r1, [pc, #24]	; (8004f6c <HAL_I2C_Master_Receive+0x23c>)
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 faa8 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d008      	beq.n	8004f70 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e148      	b.n	80051f4 <HAL_I2C_Master_Receive+0x4c4>
 8004f62:	bf00      	nop
 8004f64:	00100002 	.word	0x00100002
 8004f68:	ffff0000 	.word	0xffff0000
 8004f6c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004f70:	b672      	cpsid	i
}
 8004f72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004fb6:	b662      	cpsie	i
}
 8004fb8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fec:	e0ee      	b.n	80051cc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	4981      	ldr	r1, [pc, #516]	; (80051fc <HAL_I2C_Master_Receive+0x4cc>)
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 fa55 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0f5      	b.n	80051f4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005016:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005018:	b672      	cpsid	i
}
 800501a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800504e:	4b6c      	ldr	r3, [pc, #432]	; (8005200 <HAL_I2C_Master_Receive+0x4d0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	08db      	lsrs	r3, r3, #3
 8005054:	4a6b      	ldr	r2, [pc, #428]	; (8005204 <HAL_I2C_Master_Receive+0x4d4>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	0a1a      	lsrs	r2, r3, #8
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	00da      	lsls	r2, r3, #3
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	3b01      	subs	r3, #1
 800506c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d118      	bne.n	80050a6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005096:	b662      	cpsie	i
}
 8005098:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e0a6      	b.n	80051f4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d1d9      	bne.n	8005068 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691a      	ldr	r2, [r3, #16]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80050f6:	b662      	cpsie	i
}
 80050f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800512c:	e04e      	b.n	80051cc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800512e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005130:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 fb62 	bl	80057fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e058      	b.n	80051f4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b04      	cmp	r3, #4
 8005180:	d124      	bne.n	80051cc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005186:	2b03      	cmp	r3, #3
 8005188:	d107      	bne.n	800519a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005198:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f47f ae88 	bne.w	8004ee6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e000      	b.n	80051f4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80051f2:	2302      	movs	r3, #2
  }
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3728      	adds	r7, #40	; 0x28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	00010004 	.word	0x00010004
 8005200:	20000008 	.word	0x20000008
 8005204:	14f8b589 	.word	0x14f8b589

08005208 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af02      	add	r7, sp, #8
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	607a      	str	r2, [r7, #4]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	460b      	mov	r3, r1
 8005216:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b08      	cmp	r3, #8
 8005222:	d006      	beq.n	8005232 <I2C_MasterRequestWrite+0x2a>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d003      	beq.n	8005232 <I2C_MasterRequestWrite+0x2a>
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005230:	d108      	bne.n	8005244 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	e00b      	b.n	800525c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005248:	2b12      	cmp	r3, #18
 800524a:	d107      	bne.n	800525c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800525a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f91d 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00d      	beq.n	8005290 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005282:	d103      	bne.n	800528c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800528a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e035      	b.n	80052fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005298:	d108      	bne.n	80052ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800529a:	897b      	ldrh	r3, [r7, #10]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052a8:	611a      	str	r2, [r3, #16]
 80052aa:	e01b      	b.n	80052e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052ac:	897b      	ldrh	r3, [r7, #10]
 80052ae:	11db      	asrs	r3, r3, #7
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f003 0306 	and.w	r3, r3, #6
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	f063 030f 	orn	r3, r3, #15
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	490e      	ldr	r1, [pc, #56]	; (8005304 <I2C_MasterRequestWrite+0xfc>)
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f966 	bl	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e010      	b.n	80052fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052da:	897b      	ldrh	r3, [r7, #10]
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	4907      	ldr	r1, [pc, #28]	; (8005308 <I2C_MasterRequestWrite+0x100>)
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f956 	bl	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	00010008 	.word	0x00010008
 8005308:	00010002 	.word	0x00010002

0800530c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	460b      	mov	r3, r1
 800531a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005330:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d006      	beq.n	8005346 <I2C_MasterRequestRead+0x3a>
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d003      	beq.n	8005346 <I2C_MasterRequestRead+0x3a>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005344:	d108      	bne.n	8005358 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e00b      	b.n	8005370 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	2b11      	cmp	r3, #17
 800535e:	d107      	bne.n	8005370 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800536e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f893 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00d      	beq.n	80053a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005396:	d103      	bne.n	80053a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e079      	b.n	8005498 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ac:	d108      	bne.n	80053c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053ae:	897b      	ldrh	r3, [r7, #10]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	611a      	str	r2, [r3, #16]
 80053be:	e05f      	b.n	8005480 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053c0:	897b      	ldrh	r3, [r7, #10]
 80053c2:	11db      	asrs	r3, r3, #7
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	f003 0306 	and.w	r3, r3, #6
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f063 030f 	orn	r3, r3, #15
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	4930      	ldr	r1, [pc, #192]	; (80054a0 <I2C_MasterRequestRead+0x194>)
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f8dc 	bl	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e054      	b.n	8005498 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053ee:	897b      	ldrh	r3, [r7, #10]
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	4929      	ldr	r1, [pc, #164]	; (80054a4 <I2C_MasterRequestRead+0x198>)
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f8cc 	bl	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e044      	b.n	8005498 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800540e:	2300      	movs	r3, #0
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005432:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f831 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00d      	beq.n	8005468 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545a:	d103      	bne.n	8005464 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005462:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e017      	b.n	8005498 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005468:	897b      	ldrh	r3, [r7, #10]
 800546a:	11db      	asrs	r3, r3, #7
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f003 0306 	and.w	r3, r3, #6
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f063 030e 	orn	r3, r3, #14
 8005478:	b2da      	uxtb	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	4907      	ldr	r1, [pc, #28]	; (80054a4 <I2C_MasterRequestRead+0x198>)
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f888 	bl	800559c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	00010008 	.word	0x00010008
 80054a4:	00010002 	.word	0x00010002

080054a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054b8:	e048      	b.n	800554c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d044      	beq.n	800554c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c2:	f7fe fec7 	bl	8004254 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d139      	bne.n	800554c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	0c1b      	lsrs	r3, r3, #16
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d10d      	bne.n	80054fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	43da      	mvns	r2, r3
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	4013      	ands	r3, r2
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	bf0c      	ite	eq
 80054f4:	2301      	moveq	r3, #1
 80054f6:	2300      	movne	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	e00c      	b.n	8005518 <I2C_WaitOnFlagUntilTimeout+0x70>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	43da      	mvns	r2, r3
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4013      	ands	r3, r2
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	461a      	mov	r2, r3
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	429a      	cmp	r2, r3
 800551c:	d116      	bne.n	800554c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	f043 0220 	orr.w	r2, r3, #32
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e023      	b.n	8005594 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	0c1b      	lsrs	r3, r3, #16
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b01      	cmp	r3, #1
 8005554:	d10d      	bne.n	8005572 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	43da      	mvns	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4013      	ands	r3, r2
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	bf0c      	ite	eq
 8005568:	2301      	moveq	r3, #1
 800556a:	2300      	movne	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	e00c      	b.n	800558c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	43da      	mvns	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4013      	ands	r3, r2
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	bf0c      	ite	eq
 8005584:	2301      	moveq	r3, #1
 8005586:	2300      	movne	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	429a      	cmp	r2, r3
 8005590:	d093      	beq.n	80054ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055aa:	e071      	b.n	8005690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ba:	d123      	bne.n	8005604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	f043 0204 	orr.w	r2, r3, #4
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e067      	b.n	80056d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d041      	beq.n	8005690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560c:	f7fe fe22 	bl	8004254 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	429a      	cmp	r2, r3
 800561a:	d302      	bcc.n	8005622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d136      	bne.n	8005690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	d10c      	bne.n	8005646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	43da      	mvns	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4013      	ands	r3, r2
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	bf14      	ite	ne
 800563e:	2301      	movne	r3, #1
 8005640:	2300      	moveq	r3, #0
 8005642:	b2db      	uxtb	r3, r3
 8005644:	e00b      	b.n	800565e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	43da      	mvns	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	4013      	ands	r3, r2
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	bf14      	ite	ne
 8005658:	2301      	movne	r3, #1
 800565a:	2300      	moveq	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	f043 0220 	orr.w	r2, r3, #32
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e021      	b.n	80056d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	0c1b      	lsrs	r3, r3, #16
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b01      	cmp	r3, #1
 8005698:	d10c      	bne.n	80056b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	43da      	mvns	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4013      	ands	r3, r2
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bf14      	ite	ne
 80056ac:	2301      	movne	r3, #1
 80056ae:	2300      	moveq	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	e00b      	b.n	80056cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	43da      	mvns	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4013      	ands	r3, r2
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	bf14      	ite	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	2300      	moveq	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f47f af6d 	bne.w	80055ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056e8:	e034      	b.n	8005754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f8e3 	bl	80058b6 <I2C_IsAcknowledgeFailed>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e034      	b.n	8005764 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d028      	beq.n	8005754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005702:	f7fe fda7 	bl	8004254 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	429a      	cmp	r2, r3
 8005710:	d302      	bcc.n	8005718 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d11d      	bne.n	8005754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005722:	2b80      	cmp	r3, #128	; 0x80
 8005724:	d016      	beq.n	8005754 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e007      	b.n	8005764 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575e:	2b80      	cmp	r3, #128	; 0x80
 8005760:	d1c3      	bne.n	80056ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005778:	e034      	b.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f89b 	bl	80058b6 <I2C_IsAcknowledgeFailed>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e034      	b.n	80057f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005790:	d028      	beq.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005792:	f7fe fd5f 	bl	8004254 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d302      	bcc.n	80057a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d11d      	bne.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d016      	beq.n	80057e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	f043 0220 	orr.w	r2, r3, #32
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e007      	b.n	80057f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d1c3      	bne.n	800577a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005808:	e049      	b.n	800589e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0310 	and.w	r3, r3, #16
 8005814:	2b10      	cmp	r3, #16
 8005816:	d119      	bne.n	800584c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0210 	mvn.w	r2, #16
 8005820:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e030      	b.n	80058ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584c:	f7fe fd02 	bl	8004254 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	429a      	cmp	r2, r3
 800585a:	d302      	bcc.n	8005862 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d11d      	bne.n	800589e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586c:	2b40      	cmp	r3, #64	; 0x40
 800586e:	d016      	beq.n	800589e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e007      	b.n	80058ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d1ae      	bne.n	800580a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058cc:	d11b      	bne.n	8005906 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f043 0204 	orr.w	r2, r3, #4
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
	...

08005914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e272      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 8087 	beq.w	8005a42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005934:	4b92      	ldr	r3, [pc, #584]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 030c 	and.w	r3, r3, #12
 800593c:	2b04      	cmp	r3, #4
 800593e:	d00c      	beq.n	800595a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005940:	4b8f      	ldr	r3, [pc, #572]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f003 030c 	and.w	r3, r3, #12
 8005948:	2b08      	cmp	r3, #8
 800594a:	d112      	bne.n	8005972 <HAL_RCC_OscConfig+0x5e>
 800594c:	4b8c      	ldr	r3, [pc, #560]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005958:	d10b      	bne.n	8005972 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800595a:	4b89      	ldr	r3, [pc, #548]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d06c      	beq.n	8005a40 <HAL_RCC_OscConfig+0x12c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d168      	bne.n	8005a40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e24c      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597a:	d106      	bne.n	800598a <HAL_RCC_OscConfig+0x76>
 800597c:	4b80      	ldr	r3, [pc, #512]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a7f      	ldr	r2, [pc, #508]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	e02e      	b.n	80059e8 <HAL_RCC_OscConfig+0xd4>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10c      	bne.n	80059ac <HAL_RCC_OscConfig+0x98>
 8005992:	4b7b      	ldr	r3, [pc, #492]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a7a      	ldr	r2, [pc, #488]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	4b78      	ldr	r3, [pc, #480]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a77      	ldr	r2, [pc, #476]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 80059a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	e01d      	b.n	80059e8 <HAL_RCC_OscConfig+0xd4>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059b4:	d10c      	bne.n	80059d0 <HAL_RCC_OscConfig+0xbc>
 80059b6:	4b72      	ldr	r3, [pc, #456]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a71      	ldr	r2, [pc, #452]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 80059bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	4b6f      	ldr	r3, [pc, #444]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a6e      	ldr	r2, [pc, #440]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 80059c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	e00b      	b.n	80059e8 <HAL_RCC_OscConfig+0xd4>
 80059d0:	4b6b      	ldr	r3, [pc, #428]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a6a      	ldr	r2, [pc, #424]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 80059d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	4b68      	ldr	r3, [pc, #416]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a67      	ldr	r2, [pc, #412]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 80059e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d013      	beq.n	8005a18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f0:	f7fe fc30 	bl	8004254 <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f8:	f7fe fc2c 	bl	8004254 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b64      	cmp	r3, #100	; 0x64
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e200      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a0a:	4b5d      	ldr	r3, [pc, #372]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0f0      	beq.n	80059f8 <HAL_RCC_OscConfig+0xe4>
 8005a16:	e014      	b.n	8005a42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a18:	f7fe fc1c 	bl	8004254 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a20:	f7fe fc18 	bl	8004254 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b64      	cmp	r3, #100	; 0x64
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e1ec      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a32:	4b53      	ldr	r3, [pc, #332]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1f0      	bne.n	8005a20 <HAL_RCC_OscConfig+0x10c>
 8005a3e:	e000      	b.n	8005a42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d063      	beq.n	8005b16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a4e:	4b4c      	ldr	r3, [pc, #304]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00b      	beq.n	8005a72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a5a:	4b49      	ldr	r3, [pc, #292]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f003 030c 	and.w	r3, r3, #12
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d11c      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x18c>
 8005a66:	4b46      	ldr	r3, [pc, #280]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d116      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a72:	4b43      	ldr	r3, [pc, #268]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <HAL_RCC_OscConfig+0x176>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d001      	beq.n	8005a8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e1c0      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a8a:	4b3d      	ldr	r3, [pc, #244]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4939      	ldr	r1, [pc, #228]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a9e:	e03a      	b.n	8005b16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d020      	beq.n	8005aea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aa8:	4b36      	ldr	r3, [pc, #216]	; (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aae:	f7fe fbd1 	bl	8004254 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ab6:	f7fe fbcd 	bl	8004254 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e1a1      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac8:	4b2d      	ldr	r3, [pc, #180]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0f0      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad4:	4b2a      	ldr	r3, [pc, #168]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4927      	ldr	r1, [pc, #156]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	600b      	str	r3, [r1, #0]
 8005ae8:	e015      	b.n	8005b16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aea:	4b26      	ldr	r3, [pc, #152]	; (8005b84 <HAL_RCC_OscConfig+0x270>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af0:	f7fe fbb0 	bl	8004254 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005af8:	f7fe fbac 	bl	8004254 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e180      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b0a:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d03a      	beq.n	8005b98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d019      	beq.n	8005b5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b2a:	4b17      	ldr	r3, [pc, #92]	; (8005b88 <HAL_RCC_OscConfig+0x274>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b30:	f7fe fb90 	bl	8004254 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b38:	f7fe fb8c 	bl	8004254 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e160      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	; (8005b80 <HAL_RCC_OscConfig+0x26c>)
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0f0      	beq.n	8005b38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b56:	2001      	movs	r0, #1
 8005b58:	f000 faba 	bl	80060d0 <RCC_Delay>
 8005b5c:	e01c      	b.n	8005b98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b5e:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <HAL_RCC_OscConfig+0x274>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b64:	f7fe fb76 	bl	8004254 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b6a:	e00f      	b.n	8005b8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b6c:	f7fe fb72 	bl	8004254 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d908      	bls.n	8005b8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e146      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
 8005b7e:	bf00      	nop
 8005b80:	40021000 	.word	0x40021000
 8005b84:	42420000 	.word	0x42420000
 8005b88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b8c:	4b92      	ldr	r3, [pc, #584]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e9      	bne.n	8005b6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 80a6 	beq.w	8005cf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005baa:	4b8b      	ldr	r3, [pc, #556]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10d      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bb6:	4b88      	ldr	r3, [pc, #544]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	4a87      	ldr	r2, [pc, #540]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc0:	61d3      	str	r3, [r2, #28]
 8005bc2:	4b85      	ldr	r3, [pc, #532]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bca:	60bb      	str	r3, [r7, #8]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd2:	4b82      	ldr	r3, [pc, #520]	; (8005ddc <HAL_RCC_OscConfig+0x4c8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d118      	bne.n	8005c10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bde:	4b7f      	ldr	r3, [pc, #508]	; (8005ddc <HAL_RCC_OscConfig+0x4c8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a7e      	ldr	r2, [pc, #504]	; (8005ddc <HAL_RCC_OscConfig+0x4c8>)
 8005be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bea:	f7fe fb33 	bl	8004254 <HAL_GetTick>
 8005bee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf2:	f7fe fb2f 	bl	8004254 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b64      	cmp	r3, #100	; 0x64
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e103      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c04:	4b75      	ldr	r3, [pc, #468]	; (8005ddc <HAL_RCC_OscConfig+0x4c8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f0      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d106      	bne.n	8005c26 <HAL_RCC_OscConfig+0x312>
 8005c18:	4b6f      	ldr	r3, [pc, #444]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	4a6e      	ldr	r2, [pc, #440]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	6213      	str	r3, [r2, #32]
 8005c24:	e02d      	b.n	8005c82 <HAL_RCC_OscConfig+0x36e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10c      	bne.n	8005c48 <HAL_RCC_OscConfig+0x334>
 8005c2e:	4b6a      	ldr	r3, [pc, #424]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	4a69      	ldr	r2, [pc, #420]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005c34:	f023 0301 	bic.w	r3, r3, #1
 8005c38:	6213      	str	r3, [r2, #32]
 8005c3a:	4b67      	ldr	r3, [pc, #412]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	4a66      	ldr	r2, [pc, #408]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005c40:	f023 0304 	bic.w	r3, r3, #4
 8005c44:	6213      	str	r3, [r2, #32]
 8005c46:	e01c      	b.n	8005c82 <HAL_RCC_OscConfig+0x36e>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	2b05      	cmp	r3, #5
 8005c4e:	d10c      	bne.n	8005c6a <HAL_RCC_OscConfig+0x356>
 8005c50:	4b61      	ldr	r3, [pc, #388]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	4a60      	ldr	r2, [pc, #384]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005c56:	f043 0304 	orr.w	r3, r3, #4
 8005c5a:	6213      	str	r3, [r2, #32]
 8005c5c:	4b5e      	ldr	r3, [pc, #376]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	4a5d      	ldr	r2, [pc, #372]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005c62:	f043 0301 	orr.w	r3, r3, #1
 8005c66:	6213      	str	r3, [r2, #32]
 8005c68:	e00b      	b.n	8005c82 <HAL_RCC_OscConfig+0x36e>
 8005c6a:	4b5b      	ldr	r3, [pc, #364]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	4a5a      	ldr	r2, [pc, #360]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005c70:	f023 0301 	bic.w	r3, r3, #1
 8005c74:	6213      	str	r3, [r2, #32]
 8005c76:	4b58      	ldr	r3, [pc, #352]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	4a57      	ldr	r2, [pc, #348]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005c7c:	f023 0304 	bic.w	r3, r3, #4
 8005c80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d015      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c8a:	f7fe fae3 	bl	8004254 <HAL_GetTick>
 8005c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c90:	e00a      	b.n	8005ca8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c92:	f7fe fadf 	bl	8004254 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e0b1      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca8:	4b4b      	ldr	r3, [pc, #300]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0ee      	beq.n	8005c92 <HAL_RCC_OscConfig+0x37e>
 8005cb4:	e014      	b.n	8005ce0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cb6:	f7fe facd 	bl	8004254 <HAL_GetTick>
 8005cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cbc:	e00a      	b.n	8005cd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cbe:	f7fe fac9 	bl	8004254 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e09b      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cd4:	4b40      	ldr	r3, [pc, #256]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1ee      	bne.n	8005cbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d105      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce6:	4b3c      	ldr	r3, [pc, #240]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	4a3b      	ldr	r2, [pc, #236]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 8087 	beq.w	8005e0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cfc:	4b36      	ldr	r3, [pc, #216]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f003 030c 	and.w	r3, r3, #12
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d061      	beq.n	8005dcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d146      	bne.n	8005d9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d10:	4b33      	ldr	r3, [pc, #204]	; (8005de0 <HAL_RCC_OscConfig+0x4cc>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d16:	f7fe fa9d 	bl	8004254 <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1e:	f7fe fa99 	bl	8004254 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e06d      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d30:	4b29      	ldr	r3, [pc, #164]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f0      	bne.n	8005d1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d44:	d108      	bne.n	8005d58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005d46:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	4921      	ldr	r1, [pc, #132]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d58:	4b1f      	ldr	r3, [pc, #124]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a19      	ldr	r1, [r3, #32]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	491b      	ldr	r1, [pc, #108]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d70:	4b1b      	ldr	r3, [pc, #108]	; (8005de0 <HAL_RCC_OscConfig+0x4cc>)
 8005d72:	2201      	movs	r2, #1
 8005d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d76:	f7fe fa6d 	bl	8004254 <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d7c:	e008      	b.n	8005d90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d7e:	f7fe fa69 	bl	8004254 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e03d      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d90:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0f0      	beq.n	8005d7e <HAL_RCC_OscConfig+0x46a>
 8005d9c:	e035      	b.n	8005e0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d9e:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <HAL_RCC_OscConfig+0x4cc>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da4:	f7fe fa56 	bl	8004254 <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005daa:	e008      	b.n	8005dbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dac:	f7fe fa52 	bl	8004254 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e026      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dbe:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <HAL_RCC_OscConfig+0x4c4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1f0      	bne.n	8005dac <HAL_RCC_OscConfig+0x498>
 8005dca:	e01e      	b.n	8005e0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d107      	bne.n	8005de4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e019      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	40007000 	.word	0x40007000
 8005de0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005de4:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <HAL_RCC_OscConfig+0x500>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d106      	bne.n	8005e06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d001      	beq.n	8005e0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40021000 	.word	0x40021000

08005e18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0d0      	b.n	8005fce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e2c:	4b6a      	ldr	r3, [pc, #424]	; (8005fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d910      	bls.n	8005e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e3a:	4b67      	ldr	r3, [pc, #412]	; (8005fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f023 0207 	bic.w	r2, r3, #7
 8005e42:	4965      	ldr	r1, [pc, #404]	; (8005fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e4a:	4b63      	ldr	r3, [pc, #396]	; (8005fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d001      	beq.n	8005e5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e0b8      	b.n	8005fce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d020      	beq.n	8005eaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e74:	4b59      	ldr	r3, [pc, #356]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	4a58      	ldr	r2, [pc, #352]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005e7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d005      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e8c:	4b53      	ldr	r3, [pc, #332]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	4a52      	ldr	r2, [pc, #328]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005e92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005e96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e98:	4b50      	ldr	r3, [pc, #320]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	494d      	ldr	r1, [pc, #308]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d040      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d107      	bne.n	8005ece <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ebe:	4b47      	ldr	r3, [pc, #284]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d115      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e07f      	b.n	8005fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d107      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ed6:	4b41      	ldr	r3, [pc, #260]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e073      	b.n	8005fce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee6:	4b3d      	ldr	r3, [pc, #244]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e06b      	b.n	8005fce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ef6:	4b39      	ldr	r3, [pc, #228]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f023 0203 	bic.w	r2, r3, #3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	4936      	ldr	r1, [pc, #216]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f08:	f7fe f9a4 	bl	8004254 <HAL_GetTick>
 8005f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0e:	e00a      	b.n	8005f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f10:	f7fe f9a0 	bl	8004254 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e053      	b.n	8005fce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f26:	4b2d      	ldr	r3, [pc, #180]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f003 020c 	and.w	r2, r3, #12
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d1eb      	bne.n	8005f10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f38:	4b27      	ldr	r3, [pc, #156]	; (8005fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d210      	bcs.n	8005f68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f46:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f023 0207 	bic.w	r2, r3, #7
 8005f4e:	4922      	ldr	r1, [pc, #136]	; (8005fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f56:	4b20      	ldr	r3, [pc, #128]	; (8005fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0307 	and.w	r3, r3, #7
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d001      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e032      	b.n	8005fce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d008      	beq.n	8005f86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f74:	4b19      	ldr	r3, [pc, #100]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	4916      	ldr	r1, [pc, #88]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f92:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	490e      	ldr	r1, [pc, #56]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fa6:	f000 f821 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 8005faa:	4602      	mov	r2, r0
 8005fac:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <HAL_RCC_ClockConfig+0x1c4>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	091b      	lsrs	r3, r3, #4
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	490a      	ldr	r1, [pc, #40]	; (8005fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8005fb8:	5ccb      	ldrb	r3, [r1, r3]
 8005fba:	fa22 f303 	lsr.w	r3, r2, r3
 8005fbe:	4a09      	ldr	r2, [pc, #36]	; (8005fe4 <HAL_RCC_ClockConfig+0x1cc>)
 8005fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <HAL_RCC_ClockConfig+0x1d0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fe f902 	bl	80041d0 <HAL_InitTick>

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40022000 	.word	0x40022000
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	0800c608 	.word	0x0800c608
 8005fe4:	20000008 	.word	0x20000008
 8005fe8:	2000000c 	.word	0x2000000c

08005fec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60bb      	str	r3, [r7, #8]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	2300      	movs	r3, #0
 8006000:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006006:	4b1e      	ldr	r3, [pc, #120]	; (8006080 <HAL_RCC_GetSysClockFreq+0x94>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f003 030c 	and.w	r3, r3, #12
 8006012:	2b04      	cmp	r3, #4
 8006014:	d002      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0x30>
 8006016:	2b08      	cmp	r3, #8
 8006018:	d003      	beq.n	8006022 <HAL_RCC_GetSysClockFreq+0x36>
 800601a:	e027      	b.n	800606c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800601c:	4b19      	ldr	r3, [pc, #100]	; (8006084 <HAL_RCC_GetSysClockFreq+0x98>)
 800601e:	613b      	str	r3, [r7, #16]
      break;
 8006020:	e027      	b.n	8006072 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	0c9b      	lsrs	r3, r3, #18
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	4a17      	ldr	r2, [pc, #92]	; (8006088 <HAL_RCC_GetSysClockFreq+0x9c>)
 800602c:	5cd3      	ldrb	r3, [r2, r3]
 800602e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d010      	beq.n	800605c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <HAL_RCC_GetSysClockFreq+0x94>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	0c5b      	lsrs	r3, r3, #17
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	4a11      	ldr	r2, [pc, #68]	; (800608c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006046:	5cd3      	ldrb	r3, [r2, r3]
 8006048:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a0d      	ldr	r2, [pc, #52]	; (8006084 <HAL_RCC_GetSysClockFreq+0x98>)
 800604e:	fb03 f202 	mul.w	r2, r3, r2
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	fbb2 f3f3 	udiv	r3, r2, r3
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	e004      	b.n	8006066 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a0c      	ldr	r2, [pc, #48]	; (8006090 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006060:	fb02 f303 	mul.w	r3, r2, r3
 8006064:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	613b      	str	r3, [r7, #16]
      break;
 800606a:	e002      	b.n	8006072 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <HAL_RCC_GetSysClockFreq+0x98>)
 800606e:	613b      	str	r3, [r7, #16]
      break;
 8006070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006072:	693b      	ldr	r3, [r7, #16]
}
 8006074:	4618      	mov	r0, r3
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40021000 	.word	0x40021000
 8006084:	007a1200 	.word	0x007a1200
 8006088:	0800c620 	.word	0x0800c620
 800608c:	0800c630 	.word	0x0800c630
 8006090:	003d0900 	.word	0x003d0900

08006094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006098:	4b02      	ldr	r3, [pc, #8]	; (80060a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800609a:	681b      	ldr	r3, [r3, #0]
}
 800609c:	4618      	mov	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr
 80060a4:	20000008 	.word	0x20000008

080060a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060ac:	f7ff fff2 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	0a1b      	lsrs	r3, r3, #8
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	4903      	ldr	r1, [pc, #12]	; (80060cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40021000 	.word	0x40021000
 80060cc:	0800c618 	.word	0x0800c618

080060d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <RCC_Delay+0x34>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <RCC_Delay+0x38>)
 80060de:	fba2 2303 	umull	r2, r3, r2, r3
 80060e2:	0a5b      	lsrs	r3, r3, #9
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	fb02 f303 	mul.w	r3, r2, r3
 80060ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80060ec:	bf00      	nop
  }
  while (Delay --);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	1e5a      	subs	r2, r3, #1
 80060f2:	60fa      	str	r2, [r7, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1f9      	bne.n	80060ec <RCC_Delay+0x1c>
}
 80060f8:	bf00      	nop
 80060fa:	bf00      	nop
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr
 8006104:	20000008 	.word	0x20000008
 8006108:	10624dd3 	.word	0x10624dd3

0800610c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e041      	b.n	80061a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fd fa04 	bl	8003540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3304      	adds	r3, #4
 8006148:	4619      	mov	r1, r3
 800614a:	4610      	mov	r0, r2
 800614c:	f000 fd68 	bl	8006c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d001      	beq.n	80061c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e03a      	b.n	800623a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0201 	orr.w	r2, r2, #1
 80061da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a18      	ldr	r2, [pc, #96]	; (8006244 <HAL_TIM_Base_Start_IT+0x98>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00e      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x58>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ee:	d009      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x58>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a14      	ldr	r2, [pc, #80]	; (8006248 <HAL_TIM_Base_Start_IT+0x9c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d004      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x58>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a13      	ldr	r2, [pc, #76]	; (800624c <HAL_TIM_Base_Start_IT+0xa0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d111      	bne.n	8006228 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b06      	cmp	r3, #6
 8006214:	d010      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0201 	orr.w	r2, r2, #1
 8006224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006226:	e007      	b.n	8006238 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	bc80      	pop	{r7}
 8006242:	4770      	bx	lr
 8006244:	40012c00 	.word	0x40012c00
 8006248:	40000400 	.word	0x40000400
 800624c:	40000800 	.word	0x40000800

08006250 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e041      	b.n	80062e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d106      	bne.n	800627c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f839 	bl	80062ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3304      	adds	r3, #4
 800628c:	4619      	mov	r1, r3
 800628e:	4610      	mov	r0, r2
 8006290:	f000 fcc6 	bl	8006c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bc80      	pop	{r7}
 80062fe:	4770      	bx	lr

08006300 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d109      	bne.n	8006324 <HAL_TIM_PWM_Start+0x24>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	bf14      	ite	ne
 800631c:	2301      	movne	r3, #1
 800631e:	2300      	moveq	r3, #0
 8006320:	b2db      	uxtb	r3, r3
 8006322:	e022      	b.n	800636a <HAL_TIM_PWM_Start+0x6a>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b04      	cmp	r3, #4
 8006328:	d109      	bne.n	800633e <HAL_TIM_PWM_Start+0x3e>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b01      	cmp	r3, #1
 8006334:	bf14      	ite	ne
 8006336:	2301      	movne	r3, #1
 8006338:	2300      	moveq	r3, #0
 800633a:	b2db      	uxtb	r3, r3
 800633c:	e015      	b.n	800636a <HAL_TIM_PWM_Start+0x6a>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b08      	cmp	r3, #8
 8006342:	d109      	bne.n	8006358 <HAL_TIM_PWM_Start+0x58>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b01      	cmp	r3, #1
 800634e:	bf14      	ite	ne
 8006350:	2301      	movne	r3, #1
 8006352:	2300      	moveq	r3, #0
 8006354:	b2db      	uxtb	r3, r3
 8006356:	e008      	b.n	800636a <HAL_TIM_PWM_Start+0x6a>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b01      	cmp	r3, #1
 8006362:	bf14      	ite	ne
 8006364:	2301      	movne	r3, #1
 8006366:	2300      	moveq	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e05e      	b.n	8006430 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <HAL_TIM_PWM_Start+0x82>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006380:	e013      	b.n	80063aa <HAL_TIM_PWM_Start+0xaa>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b04      	cmp	r3, #4
 8006386:	d104      	bne.n	8006392 <HAL_TIM_PWM_Start+0x92>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2202      	movs	r2, #2
 800638c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006390:	e00b      	b.n	80063aa <HAL_TIM_PWM_Start+0xaa>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b08      	cmp	r3, #8
 8006396:	d104      	bne.n	80063a2 <HAL_TIM_PWM_Start+0xa2>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063a0:	e003      	b.n	80063aa <HAL_TIM_PWM_Start+0xaa>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2202      	movs	r2, #2
 80063a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2201      	movs	r2, #1
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 feb4 	bl	8007120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1e      	ldr	r2, [pc, #120]	; (8006438 <HAL_TIM_PWM_Start+0x138>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d107      	bne.n	80063d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a18      	ldr	r2, [pc, #96]	; (8006438 <HAL_TIM_PWM_Start+0x138>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00e      	beq.n	80063fa <HAL_TIM_PWM_Start+0xfa>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e4:	d009      	beq.n	80063fa <HAL_TIM_PWM_Start+0xfa>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a14      	ldr	r2, [pc, #80]	; (800643c <HAL_TIM_PWM_Start+0x13c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d004      	beq.n	80063fa <HAL_TIM_PWM_Start+0xfa>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a12      	ldr	r2, [pc, #72]	; (8006440 <HAL_TIM_PWM_Start+0x140>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d111      	bne.n	800641e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b06      	cmp	r3, #6
 800640a:	d010      	beq.n	800642e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800641c:	e007      	b.n	800642e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f042 0201 	orr.w	r2, r2, #1
 800642c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800

08006444 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e093      	b.n	8006580 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d106      	bne.n	8006472 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7fd f885 	bl	800357c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2202      	movs	r2, #2
 8006476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006488:	f023 0307 	bic.w	r3, r3, #7
 800648c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3304      	adds	r3, #4
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f000 fbc1 	bl	8006c20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064c6:	f023 0303 	bic.w	r3, r3, #3
 80064ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	021b      	lsls	r3, r3, #8
 80064d6:	4313      	orrs	r3, r2
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	4313      	orrs	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80064e4:	f023 030c 	bic.w	r3, r3, #12
 80064e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	4313      	orrs	r3, r2
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	011a      	lsls	r2, r3, #4
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	031b      	lsls	r3, r3, #12
 8006514:	4313      	orrs	r3, r2
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006522:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	4313      	orrs	r3, r2
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006598:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80065b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d110      	bne.n	80065da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d102      	bne.n	80065c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80065be:	7b7b      	ldrb	r3, [r7, #13]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d001      	beq.n	80065c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e069      	b.n	800669c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065d8:	e031      	b.n	800663e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b04      	cmp	r3, #4
 80065de:	d110      	bne.n	8006602 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d102      	bne.n	80065ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80065e6:	7b3b      	ldrb	r3, [r7, #12]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d001      	beq.n	80065f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e055      	b.n	800669c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006600:	e01d      	b.n	800663e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d108      	bne.n	800661a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d105      	bne.n	800661a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800660e:	7b7b      	ldrb	r3, [r7, #13]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d102      	bne.n	800661a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006614:	7b3b      	ldrb	r3, [r7, #12]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d001      	beq.n	800661e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e03e      	b.n	800669c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2202      	movs	r2, #2
 8006622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2202      	movs	r2, #2
 800662a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2202      	movs	r2, #2
 8006632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2202      	movs	r2, #2
 800663a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d003      	beq.n	800664c <HAL_TIM_Encoder_Start+0xc4>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b04      	cmp	r3, #4
 8006648:	d008      	beq.n	800665c <HAL_TIM_Encoder_Start+0xd4>
 800664a:	e00f      	b.n	800666c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2201      	movs	r2, #1
 8006652:	2100      	movs	r1, #0
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fd63 	bl	8007120 <TIM_CCxChannelCmd>
      break;
 800665a:	e016      	b.n	800668a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2201      	movs	r2, #1
 8006662:	2104      	movs	r1, #4
 8006664:	4618      	mov	r0, r3
 8006666:	f000 fd5b 	bl	8007120 <TIM_CCxChannelCmd>
      break;
 800666a:	e00e      	b.n	800668a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2201      	movs	r2, #1
 8006672:	2100      	movs	r1, #0
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fd53 	bl	8007120 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2201      	movs	r2, #1
 8006680:	2104      	movs	r1, #4
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fd4c 	bl	8007120 <TIM_CCxChannelCmd>
      break;
 8006688:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0201 	orr.w	r2, r2, #1
 8006698:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d122      	bne.n	8006700 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d11b      	bne.n	8006700 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f06f 0202 	mvn.w	r2, #2
 80066d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f003 0303 	and.w	r3, r3, #3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fa7f 	bl	8006bea <HAL_TIM_IC_CaptureCallback>
 80066ec:	e005      	b.n	80066fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fa72 	bl	8006bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fa81 	bl	8006bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	2b04      	cmp	r3, #4
 800670c:	d122      	bne.n	8006754 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b04      	cmp	r3, #4
 800671a:	d11b      	bne.n	8006754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0204 	mvn.w	r2, #4
 8006724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2202      	movs	r2, #2
 800672a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa55 	bl	8006bea <HAL_TIM_IC_CaptureCallback>
 8006740:	e005      	b.n	800674e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fa48 	bl	8006bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fa57 	bl	8006bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f003 0308 	and.w	r3, r3, #8
 800675e:	2b08      	cmp	r3, #8
 8006760:	d122      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b08      	cmp	r3, #8
 800676e:	d11b      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f06f 0208 	mvn.w	r2, #8
 8006778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2204      	movs	r2, #4
 800677e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fa2b 	bl	8006bea <HAL_TIM_IC_CaptureCallback>
 8006794:	e005      	b.n	80067a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fa1e 	bl	8006bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fa2d 	bl	8006bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f003 0310 	and.w	r3, r3, #16
 80067b2:	2b10      	cmp	r3, #16
 80067b4:	d122      	bne.n	80067fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	d11b      	bne.n	80067fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0210 	mvn.w	r2, #16
 80067cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2208      	movs	r2, #8
 80067d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fa01 	bl	8006bea <HAL_TIM_IC_CaptureCallback>
 80067e8:	e005      	b.n	80067f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f9f4 	bl	8006bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fa03 	bl	8006bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b01      	cmp	r3, #1
 8006808:	d10e      	bne.n	8006828 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b01      	cmp	r3, #1
 8006816:	d107      	bne.n	8006828 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f06f 0201 	mvn.w	r2, #1
 8006820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f9cf 	bl	8006bc6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006832:	2b80      	cmp	r3, #128	; 0x80
 8006834:	d10e      	bne.n	8006854 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006840:	2b80      	cmp	r3, #128	; 0x80
 8006842:	d107      	bne.n	8006854 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800684c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fd42 	bl	80072d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d10e      	bne.n	8006880 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	d107      	bne.n	8006880 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f9c7 	bl	8006c0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b20      	cmp	r3, #32
 800688c:	d10e      	bne.n	80068ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b20      	cmp	r3, #32
 800689a:	d107      	bne.n	80068ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0220 	mvn.w	r2, #32
 80068a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fd0d 	bl	80072c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d101      	bne.n	80068d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068ce:	2302      	movs	r3, #2
 80068d0:	e0ae      	b.n	8006a30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b0c      	cmp	r3, #12
 80068de:	f200 809f 	bhi.w	8006a20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	0800691d 	.word	0x0800691d
 80068ec:	08006a21 	.word	0x08006a21
 80068f0:	08006a21 	.word	0x08006a21
 80068f4:	08006a21 	.word	0x08006a21
 80068f8:	0800695d 	.word	0x0800695d
 80068fc:	08006a21 	.word	0x08006a21
 8006900:	08006a21 	.word	0x08006a21
 8006904:	08006a21 	.word	0x08006a21
 8006908:	0800699f 	.word	0x0800699f
 800690c:	08006a21 	.word	0x08006a21
 8006910:	08006a21 	.word	0x08006a21
 8006914:	08006a21 	.word	0x08006a21
 8006918:	080069df 	.word	0x080069df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	4618      	mov	r0, r3
 8006924:	f000 f9de 	bl	8006ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0208 	orr.w	r2, r2, #8
 8006936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0204 	bic.w	r2, r2, #4
 8006946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6999      	ldr	r1, [r3, #24]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	619a      	str	r2, [r3, #24]
      break;
 800695a:	e064      	b.n	8006a26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fa24 	bl	8006db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699a      	ldr	r2, [r3, #24]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6999      	ldr	r1, [r3, #24]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	021a      	lsls	r2, r3, #8
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	619a      	str	r2, [r3, #24]
      break;
 800699c:	e043      	b.n	8006a26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fa6d 	bl	8006e84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0208 	orr.w	r2, r2, #8
 80069b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0204 	bic.w	r2, r2, #4
 80069c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69d9      	ldr	r1, [r3, #28]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	61da      	str	r2, [r3, #28]
      break;
 80069dc:	e023      	b.n	8006a26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fab7 	bl	8006f58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69da      	ldr	r2, [r3, #28]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69d9      	ldr	r1, [r3, #28]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	021a      	lsls	r2, r3, #8
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	61da      	str	r2, [r3, #28]
      break;
 8006a1e:	e002      	b.n	8006a26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	75fb      	strb	r3, [r7, #23]
      break;
 8006a24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d101      	bne.n	8006a54 <HAL_TIM_ConfigClockSource+0x1c>
 8006a50:	2302      	movs	r3, #2
 8006a52:	e0b4      	b.n	8006bbe <HAL_TIM_ConfigClockSource+0x186>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a8c:	d03e      	beq.n	8006b0c <HAL_TIM_ConfigClockSource+0xd4>
 8006a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a92:	f200 8087 	bhi.w	8006ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8006a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9a:	f000 8086 	beq.w	8006baa <HAL_TIM_ConfigClockSource+0x172>
 8006a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa2:	d87f      	bhi.n	8006ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa4:	2b70      	cmp	r3, #112	; 0x70
 8006aa6:	d01a      	beq.n	8006ade <HAL_TIM_ConfigClockSource+0xa6>
 8006aa8:	2b70      	cmp	r3, #112	; 0x70
 8006aaa:	d87b      	bhi.n	8006ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8006aac:	2b60      	cmp	r3, #96	; 0x60
 8006aae:	d050      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0x11a>
 8006ab0:	2b60      	cmp	r3, #96	; 0x60
 8006ab2:	d877      	bhi.n	8006ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab4:	2b50      	cmp	r3, #80	; 0x50
 8006ab6:	d03c      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0xfa>
 8006ab8:	2b50      	cmp	r3, #80	; 0x50
 8006aba:	d873      	bhi.n	8006ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8006abc:	2b40      	cmp	r3, #64	; 0x40
 8006abe:	d058      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0x13a>
 8006ac0:	2b40      	cmp	r3, #64	; 0x40
 8006ac2:	d86f      	bhi.n	8006ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac4:	2b30      	cmp	r3, #48	; 0x30
 8006ac6:	d064      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0x15a>
 8006ac8:	2b30      	cmp	r3, #48	; 0x30
 8006aca:	d86b      	bhi.n	8006ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d060      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0x15a>
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d867      	bhi.n	8006ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d05c      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0x15a>
 8006ad8:	2b10      	cmp	r3, #16
 8006ada:	d05a      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0x15a>
 8006adc:	e062      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6818      	ldr	r0, [r3, #0]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	6899      	ldr	r1, [r3, #8]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f000 faf8 	bl	80070e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	609a      	str	r2, [r3, #8]
      break;
 8006b0a:	e04f      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	6899      	ldr	r1, [r3, #8]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f000 fae1 	bl	80070e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b2e:	609a      	str	r2, [r3, #8]
      break;
 8006b30:	e03c      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	6859      	ldr	r1, [r3, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f000 fa58 	bl	8006ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2150      	movs	r1, #80	; 0x50
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 faaf 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006b50:	e02c      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	6859      	ldr	r1, [r3, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f000 fa76 	bl	8007050 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2160      	movs	r1, #96	; 0x60
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fa9f 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006b70:	e01c      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6818      	ldr	r0, [r3, #0]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6859      	ldr	r1, [r3, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f000 fa38 	bl	8006ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2140      	movs	r1, #64	; 0x40
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fa8f 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006b90:	e00c      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	f000 fa86 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006ba2:	e003      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba8:	e000      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc80      	pop	{r7}
 8006be8:	4770      	bx	lr

08006bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr

08006bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bc80      	pop	{r7}
 8006c0c:	4770      	bx	lr

08006c0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bc80      	pop	{r7}
 8006c1e:	4770      	bx	lr

08006c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a29      	ldr	r2, [pc, #164]	; (8006cd8 <TIM_Base_SetConfig+0xb8>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00b      	beq.n	8006c50 <TIM_Base_SetConfig+0x30>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3e:	d007      	beq.n	8006c50 <TIM_Base_SetConfig+0x30>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a26      	ldr	r2, [pc, #152]	; (8006cdc <TIM_Base_SetConfig+0xbc>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d003      	beq.n	8006c50 <TIM_Base_SetConfig+0x30>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a25      	ldr	r2, [pc, #148]	; (8006ce0 <TIM_Base_SetConfig+0xc0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d108      	bne.n	8006c62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a1c      	ldr	r2, [pc, #112]	; (8006cd8 <TIM_Base_SetConfig+0xb8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00b      	beq.n	8006c82 <TIM_Base_SetConfig+0x62>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c70:	d007      	beq.n	8006c82 <TIM_Base_SetConfig+0x62>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a19      	ldr	r2, [pc, #100]	; (8006cdc <TIM_Base_SetConfig+0xbc>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d003      	beq.n	8006c82 <TIM_Base_SetConfig+0x62>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a18      	ldr	r2, [pc, #96]	; (8006ce0 <TIM_Base_SetConfig+0xc0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d108      	bne.n	8006c94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a07      	ldr	r2, [pc, #28]	; (8006cd8 <TIM_Base_SetConfig+0xb8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d103      	bne.n	8006cc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	615a      	str	r2, [r3, #20]
}
 8006cce:	bf00      	nop
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr
 8006cd8:	40012c00 	.word	0x40012c00
 8006cdc:	40000400 	.word	0x40000400
 8006ce0:	40000800 	.word	0x40000800

08006ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	f023 0201 	bic.w	r2, r3, #1
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0303 	bic.w	r3, r3, #3
 8006d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f023 0302 	bic.w	r3, r3, #2
 8006d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a1c      	ldr	r2, [pc, #112]	; (8006dac <TIM_OC1_SetConfig+0xc8>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d10c      	bne.n	8006d5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f023 0308 	bic.w	r3, r3, #8
 8006d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f023 0304 	bic.w	r3, r3, #4
 8006d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a13      	ldr	r2, [pc, #76]	; (8006dac <TIM_OC1_SetConfig+0xc8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d111      	bne.n	8006d86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	621a      	str	r2, [r3, #32]
}
 8006da0:	bf00      	nop
 8006da2:	371c      	adds	r7, #28
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bc80      	pop	{r7}
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	40012c00 	.word	0x40012c00

08006db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	f023 0210 	bic.w	r2, r3, #16
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f023 0320 	bic.w	r3, r3, #32
 8006dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a1d      	ldr	r2, [pc, #116]	; (8006e80 <TIM_OC2_SetConfig+0xd0>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d10d      	bne.n	8006e2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a14      	ldr	r2, [pc, #80]	; (8006e80 <TIM_OC2_SetConfig+0xd0>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d113      	bne.n	8006e5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bc80      	pop	{r7}
 8006e7e:	4770      	bx	lr
 8006e80:	40012c00 	.word	0x40012c00

08006e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0303 	bic.w	r3, r3, #3
 8006eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	021b      	lsls	r3, r3, #8
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a1d      	ldr	r2, [pc, #116]	; (8006f54 <TIM_OC3_SetConfig+0xd0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d10d      	bne.n	8006efe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	021b      	lsls	r3, r3, #8
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a14      	ldr	r2, [pc, #80]	; (8006f54 <TIM_OC3_SetConfig+0xd0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d113      	bne.n	8006f2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	621a      	str	r2, [r3, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40012c00 	.word	0x40012c00

08006f58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	031b      	lsls	r3, r3, #12
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a0f      	ldr	r2, [pc, #60]	; (8006ff0 <TIM_OC4_SetConfig+0x98>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d109      	bne.n	8006fcc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	019b      	lsls	r3, r3, #6
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	621a      	str	r2, [r3, #32]
}
 8006fe6:	bf00      	nop
 8006fe8:	371c      	adds	r7, #28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr
 8006ff0:	40012c00 	.word	0x40012c00

08006ff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	f023 0201 	bic.w	r2, r3, #1
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800701e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f023 030a 	bic.w	r3, r3, #10
 8007030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	621a      	str	r2, [r3, #32]
}
 8007046:	bf00      	nop
 8007048:	371c      	adds	r7, #28
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr

08007050 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	f023 0210 	bic.w	r2, r3, #16
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800707a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	031b      	lsls	r3, r3, #12
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800708c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	011b      	lsls	r3, r3, #4
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	4313      	orrs	r3, r2
 8007096:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	621a      	str	r2, [r3, #32]
}
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bc80      	pop	{r7}
 80070ac:	4770      	bx	lr

080070ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f043 0307 	orr.w	r3, r3, #7
 80070d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	609a      	str	r2, [r3, #8]
}
 80070d8:	bf00      	nop
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	bc80      	pop	{r7}
 80070e0:	4770      	bx	lr

080070e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b087      	sub	sp, #28
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	607a      	str	r2, [r7, #4]
 80070ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	021a      	lsls	r2, r3, #8
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	431a      	orrs	r2, r3
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	4313      	orrs	r3, r2
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	609a      	str	r2, [r3, #8]
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr

08007120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	2201      	movs	r2, #1
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a1a      	ldr	r2, [r3, #32]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	43db      	mvns	r3, r3
 8007142:	401a      	ands	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a1a      	ldr	r2, [r3, #32]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f003 031f 	and.w	r3, r3, #31
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	fa01 f303 	lsl.w	r3, r1, r3
 8007158:	431a      	orrs	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	621a      	str	r2, [r3, #32]
}
 800715e:	bf00      	nop
 8007160:	371c      	adds	r7, #28
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr

08007168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007178:	2b01      	cmp	r3, #1
 800717a:	d101      	bne.n	8007180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800717c:	2302      	movs	r3, #2
 800717e:	e046      	b.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a16      	ldr	r2, [pc, #88]	; (8007218 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d00e      	beq.n	80071e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071cc:	d009      	beq.n	80071e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a12      	ldr	r2, [pc, #72]	; (800721c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d004      	beq.n	80071e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a10      	ldr	r2, [pc, #64]	; (8007220 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d10c      	bne.n	80071fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr
 8007218:	40012c00 	.word	0x40012c00
 800721c:	40000400 	.word	0x40000400
 8007220:	40000800 	.word	0x40000800

08007224 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800723c:	2302      	movs	r3, #2
 800723e:	e03d      	b.n	80072bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4313      	orrs	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bc80      	pop	{r7}
 80072c4:	4770      	bx	lr

080072c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b083      	sub	sp, #12
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072ce:	bf00      	nop
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bc80      	pop	{r7}
 80072d6:	4770      	bx	lr

080072d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr

080072ea <VL53L0X_GetVersion>:
#endif

/* Group PAL General Functions */

VL53L0X_Error VL53L0X_GetVersion(VL53L0X_Version_t *pVersion)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	pVersion->major = VL53L0X_IMPLEMENTATION_VER_MAJOR;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	711a      	strb	r2, [r3, #4]
	pVersion->minor = VL53L0X_IMPLEMENTATION_VER_MINOR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	715a      	strb	r2, [r3, #5]
	pVersion->build = VL53L0X_IMPLEMENTATION_VER_SUB;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	719a      	strb	r2, [r3, #6]

	pVersion->revision = VL53L0X_IMPLEMENTATION_VER_REVISION;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f241 12da 	movw	r2, #4570	; 0x11da
 800730e:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007310:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	bc80      	pop	{r7}
 800731c:	4770      	bx	lr

0800731e <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f004 fb2e 	bl	800b990 <VL53L0X_get_device_info>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 fc4e 	bl	8008bf6 <VL53L0X_get_offset_calibration_data_micro_meter>
 800735a:	4603      	mov	r3, r0
 800735c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800735e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	460b      	mov	r3, r1
 8007374:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007376:	2300      	movs	r3, #0
 8007378:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	085b      	lsrs	r3, r3, #1
 800737e:	b2db      	uxtb	r3, r3
 8007380:	461a      	mov	r2, r3
 8007382:	218a      	movs	r1, #138	; 0x8a
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f004 fdb7 	bl	800bef8 <VL53L0X_WrByte>
 800738a:	4603      	mov	r3, r0
 800738c:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 800738e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800739c:	b5b0      	push	{r4, r5, r7, lr}
 800739e:	b094      	sub	sp, #80	; 0x50
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073a4:	2300      	movs	r3, #0
 80073a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80073aa:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d107      	bne.n	80073c2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80073b2:	2200      	movs	r2, #0
 80073b4:	2188      	movs	r1, #136	; 0x88
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f004 fd9e 	bl	800bef8 <VL53L0X_WrByte>
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073d0:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80073da:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a71      	ldr	r2, [pc, #452]	; (80075a8 <VL53L0X_DataInit+0x20c>)
 80073e2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a70      	ldr	r2, [pc, #448]	; (80075ac <VL53L0X_DataInit+0x210>)
 80073ea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80073f4:	f107 0308 	add.w	r3, r7, #8
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa5a 	bl	80078b4 <VL53L0X_GetDeviceParameters>
 8007400:	4603      	mov	r3, r0
 8007402:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 8007406:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800740a:	2b00      	cmp	r3, #0
 800740c:	d112      	bne.n	8007434 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800740e:	2300      	movs	r3, #0
 8007410:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8007412:	2300      	movs	r3, #0
 8007414:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f103 0410 	add.w	r4, r3, #16
 800741c:	f107 0508 	add.w	r5, r7, #8
 8007420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800742a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800742c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2264      	movs	r2, #100	; 0x64
 8007438:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007442:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800744c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007456:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007462:	2300      	movs	r3, #0
 8007464:	64bb      	str	r3, [r7, #72]	; 0x48
 8007466:	e014      	b.n	8007492 <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 8007468:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800746c:	2b00      	cmp	r3, #0
 800746e:	d114      	bne.n	800749a <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007472:	b29b      	uxth	r3, r3
 8007474:	2201      	movs	r2, #1
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fd4b 	bl	8007f14 <VL53L0X_SetLimitCheckEnable>
 800747e:	4603      	mov	r3, r0
 8007480:	461a      	mov	r2, r3
 8007482:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007486:	4313      	orrs	r3, r2
 8007488:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800748c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800748e:	3301      	adds	r3, #1
 8007490:	64bb      	str	r3, [r7, #72]	; 0x48
 8007492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007494:	2b05      	cmp	r3, #5
 8007496:	dde7      	ble.n	8007468 <VL53L0X_DataInit+0xcc>
 8007498:	e000      	b.n	800749c <VL53L0X_DataInit+0x100>
		else
			break;
 800749a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800749c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d107      	bne.n	80074b4 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80074a4:	2200      	movs	r2, #0
 80074a6:	2102      	movs	r1, #2
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fd33 	bl	8007f14 <VL53L0X_SetLimitCheckEnable>
 80074ae:	4603      	mov	r3, r0
 80074b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80074b4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d107      	bne.n	80074cc <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80074bc:	2200      	movs	r2, #0
 80074be:	2103      	movs	r1, #3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fd27 	bl	8007f14 <VL53L0X_SetLimitCheckEnable>
 80074c6:	4603      	mov	r3, r0
 80074c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80074cc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d107      	bne.n	80074e4 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80074d4:	2200      	movs	r2, #0
 80074d6:	2104      	movs	r1, #4
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fd1b 	bl	8007f14 <VL53L0X_SetLimitCheckEnable>
 80074de:	4603      	mov	r3, r0
 80074e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80074e4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d107      	bne.n	80074fc <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80074ec:	2200      	movs	r2, #0
 80074ee:	2105      	movs	r1, #5
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fd0f 	bl	8007f14 <VL53L0X_SetLimitCheckEnable>
 80074f6:	4603      	mov	r3, r0
 80074f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80074fc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007500:	2b00      	cmp	r3, #0
 8007502:	d108      	bne.n	8007516 <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007504:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8007508:	2100      	movs	r1, #0
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fdb0 	bl	8008070 <VL53L0X_SetLimitCheckValue>
 8007510:	4603      	mov	r3, r0
 8007512:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007516:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800751a:	2b00      	cmp	r3, #0
 800751c:	d108      	bne.n	8007530 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800751e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007522:	2101      	movs	r1, #1
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fda3 	bl	8008070 <VL53L0X_SetLimitCheckValue>
 800752a:	4603      	mov	r3, r0
 800752c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007530:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007534:	2b00      	cmp	r3, #0
 8007536:	d108      	bne.n	800754a <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007538:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800753c:	2102      	movs	r1, #2
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fd96 	bl	8008070 <VL53L0X_SetLimitCheckValue>
 8007544:	4603      	mov	r3, r0
 8007546:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800754a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800754e:	2b00      	cmp	r3, #0
 8007550:	d107      	bne.n	8007562 <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007552:	2200      	movs	r2, #0
 8007554:	2103      	movs	r1, #3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fd8a 	bl	8008070 <VL53L0X_SetLimitCheckValue>
 800755c:	4603      	mov	r3, r0
 800755e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007562:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10f      	bne.n	800758a <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	22ff      	movs	r2, #255	; 0xff
 800756e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007572:	22ff      	movs	r2, #255	; 0xff
 8007574:	2101      	movs	r1, #1
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f004 fcbe 	bl	800bef8 <VL53L0X_WrByte>
 800757c:	4603      	mov	r3, r0
 800757e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800758a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800758e:	2b00      	cmp	r3, #0
 8007590:	d103      	bne.n	800759a <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800759a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3750      	adds	r7, #80	; 0x50
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bdb0      	pop	{r4, r5, r7, pc}
 80075a6:	bf00      	nop
 80075a8:	00016b85 	.word	0x00016b85
 80075ac:	000970a4 	.word	0x000970a4

080075b0 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80075b0:	b5b0      	push	{r4, r5, r7, lr}
 80075b2:	b09e      	sub	sp, #120	; 0x78
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80075be:	f107 031c 	add.w	r3, r7, #28
 80075c2:	2240      	movs	r2, #64	; 0x40
 80075c4:	2100      	movs	r1, #0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f004 fda6 	bl	800c118 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80075ec:	2101      	movs	r1, #1
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f002 fa3e 	bl	8009a70 <VL53L0X_get_info_from_device>
 80075f4:	4603      	mov	r3, r0
 80075f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8007600:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8007608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800760c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007610:	2b01      	cmp	r3, #1
 8007612:	d80d      	bhi.n	8007630 <VL53L0X_StaticInit+0x80>
 8007614:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007618:	2b01      	cmp	r3, #1
 800761a:	d102      	bne.n	8007622 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800761c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800761e:	2b20      	cmp	r3, #32
 8007620:	d806      	bhi.n	8007630 <VL53L0X_StaticInit+0x80>
 8007622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10e      	bne.n	8007648 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800762a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800762c:	2b0c      	cmp	r3, #12
 800762e:	d90b      	bls.n	8007648 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8007630:	f107 0218 	add.w	r2, r7, #24
 8007634:	f107 0314 	add.w	r3, r7, #20
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 fcd5 	bl	8008fea <VL53L0X_perform_ref_spad_management>
 8007640:	4603      	mov	r3, r0
 8007642:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007646:	e009      	b.n	800765c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8007648:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800764c:	461a      	mov	r2, r3
 800764e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 fed6 	bl	8009402 <VL53L0X_set_reference_spads>
 8007656:	4603      	mov	r3, r0
 8007658:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800765c:	4b94      	ldr	r3, [pc, #592]	; (80078b0 <VL53L0X_StaticInit+0x300>)
 800765e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8007660:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10f      	bne.n	8007688 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800766e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8007672:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007676:	2b00      	cmp	r3, #0
 8007678:	d104      	bne.n	8007684 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8007680:	66bb      	str	r3, [r7, #104]	; 0x68
 8007682:	e001      	b.n	8007688 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8007684:	4b8a      	ldr	r3, [pc, #552]	; (80078b0 <VL53L0X_StaticInit+0x300>)
 8007686:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007688:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800768c:	2b00      	cmp	r3, #0
 800768e:	d106      	bne.n	800769e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8007690:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f003 fb0a 	bl	800acac <VL53L0X_load_tuning_settings>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800769e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80076a6:	2300      	movs	r3, #0
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	2304      	movs	r3, #4
 80076ac:	2200      	movs	r2, #0
 80076ae:	2100      	movs	r1, #0
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f8cf 	bl	8008854 <VL53L0X_SetGpioConfig>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076bc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d121      	bne.n	8007708 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80076c4:	2201      	movs	r2, #1
 80076c6:	21ff      	movs	r1, #255	; 0xff
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f004 fc15 	bl	800bef8 <VL53L0X_WrByte>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80076d4:	f107 031a 	add.w	r3, r7, #26
 80076d8:	461a      	mov	r2, r3
 80076da:	2184      	movs	r1, #132	; 0x84
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f004 fb97 	bl	800be10 <VL53L0X_RdWord>
 80076e2:	4603      	mov	r3, r0
 80076e4:	461a      	mov	r2, r3
 80076e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80076ea:	4313      	orrs	r3, r2
 80076ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80076f0:	2200      	movs	r2, #0
 80076f2:	21ff      	movs	r1, #255	; 0xff
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f004 fbff 	bl	800bef8 <VL53L0X_WrByte>
 80076fa:	4603      	mov	r3, r0
 80076fc:	461a      	mov	r2, r3
 80076fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007702:	4313      	orrs	r3, r2
 8007704:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007708:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800770c:	2b00      	cmp	r3, #0
 800770e:	d105      	bne.n	800771c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8007710:	8b7b      	ldrh	r3, [r7, #26]
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	461a      	mov	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800771c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007720:	2b00      	cmp	r3, #0
 8007722:	d108      	bne.n	8007736 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007724:	f107 031c 	add.w	r3, r7, #28
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f8c2 	bl	80078b4 <VL53L0X_GetDeviceParameters>
 8007730:	4603      	mov	r3, r0
 8007732:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8007736:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800773a:	2b00      	cmp	r3, #0
 800773c:	d110      	bne.n	8007760 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800773e:	f107 0319 	add.w	r3, r7, #25
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f981 	bl	8007a4c <VL53L0X_GetFractionEnable>
 800774a:	4603      	mov	r3, r0
 800774c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007750:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007754:	2b00      	cmp	r3, #0
 8007756:	d103      	bne.n	8007760 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007758:	7e7a      	ldrb	r2, [r7, #25]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007760:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10e      	bne.n	8007786 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f103 0410 	add.w	r4, r3, #16
 800776e:	f107 051c 	add.w	r5, r7, #28
 8007772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800777a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800777c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800777e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007782:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8007786:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800778a:	2b00      	cmp	r3, #0
 800778c:	d111      	bne.n	80077b2 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800778e:	f107 0319 	add.w	r3, r7, #25
 8007792:	461a      	mov	r2, r3
 8007794:	2101      	movs	r1, #1
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f004 fab3 	bl	800bd02 <VL53L0X_RdByte>
 800779c:	4603      	mov	r3, r0
 800779e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80077a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d103      	bne.n	80077b2 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80077aa:	7e7a      	ldrb	r2, [r7, #25]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80077b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d107      	bne.n	80077ca <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80077ba:	2200      	movs	r2, #0
 80077bc:	2100      	movs	r1, #0
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f9a0 	bl	8007b04 <VL53L0X_SetSequenceStepEnable>
 80077c4:	4603      	mov	r3, r0
 80077c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80077ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d107      	bne.n	80077e2 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80077d2:	2200      	movs	r2, #0
 80077d4:	2102      	movs	r1, #2
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f994 	bl	8007b04 <VL53L0X_SetSequenceStepEnable>
 80077dc:	4603      	mov	r3, r0
 80077de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80077e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d103      	bne.n	80077f2 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2203      	movs	r2, #3
 80077ee:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80077f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d109      	bne.n	800780e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80077fa:	f107 0313 	add.w	r3, r7, #19
 80077fe:	461a      	mov	r2, r3
 8007800:	2100      	movs	r1, #0
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f967 	bl	8007ad6 <VL53L0X_GetVcselPulsePeriod>
 8007808:	4603      	mov	r3, r0
 800780a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800780e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007812:	2b00      	cmp	r3, #0
 8007814:	d103      	bne.n	800781e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007816:	7cfa      	ldrb	r2, [r7, #19]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800781e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007822:	2b00      	cmp	r3, #0
 8007824:	d109      	bne.n	800783a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007826:	f107 0313 	add.w	r3, r7, #19
 800782a:	461a      	mov	r2, r3
 800782c:	2101      	movs	r1, #1
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f951 	bl	8007ad6 <VL53L0X_GetVcselPulsePeriod>
 8007834:	4603      	mov	r3, r0
 8007836:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800783a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800783e:	2b00      	cmp	r3, #0
 8007840:	d103      	bne.n	800784a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007842:	7cfa      	ldrb	r2, [r7, #19]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800784a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800784e:	2b00      	cmp	r3, #0
 8007850:	d109      	bne.n	8007866 <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 8007852:	f107 030c 	add.w	r3, r7, #12
 8007856:	461a      	mov	r2, r3
 8007858:	2103      	movs	r1, #3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fa9e 	bl	8007d9c <VL53L0X_GetSequenceStepTimeout>
 8007860:	4603      	mov	r3, r0
 8007862:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007866:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800786a:	2b00      	cmp	r3, #0
 800786c:	d103      	bne.n	8007876 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007876:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800787a:	2b00      	cmp	r3, #0
 800787c:	d109      	bne.n	8007892 <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 800787e:	f107 030c 	add.w	r3, r7, #12
 8007882:	461a      	mov	r2, r3
 8007884:	2104      	movs	r1, #4
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fa88 	bl	8007d9c <VL53L0X_GetSequenceStepTimeout>
 800788c:	4603      	mov	r3, r0
 800788e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007892:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007896:	2b00      	cmp	r3, #0
 8007898:	d103      	bne.n	80078a2 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3770      	adds	r7, #112	; 0x70
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bdb0      	pop	{r4, r5, r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000014 	.word	0x20000014

080078b4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f8ae 	bl	8007a28 <VL53L0X_GetDeviceMode>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80078d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d107      	bne.n	80078e8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fa9c 	bl	8007e1c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80078e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2200      	movs	r2, #0
 80078f4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80078f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d107      	bne.n	800790e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	3310      	adds	r3, #16
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fad1 	bl	8007eac <VL53L0X_GetXTalkCompensationRateMegaCps>
 800790a:	4603      	mov	r3, r0
 800790c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800790e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d107      	bne.n	8007926 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	3314      	adds	r3, #20
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff fd11 	bl	8007344 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8007922:	4603      	mov	r3, r0
 8007924:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8007926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d134      	bne.n	8007998 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800792e:	2300      	movs	r3, #0
 8007930:	60bb      	str	r3, [r7, #8]
 8007932:	e02a      	b.n	800798a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d12a      	bne.n	8007992 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	b299      	uxth	r1, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	3308      	adds	r3, #8
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	4413      	add	r3, r2
 800794a:	3304      	adds	r3, #4
 800794c:	461a      	mov	r2, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fbf0 	bl	8008134 <VL53L0X_GetLimitCheckValue>
 8007954:	4603      	mov	r3, r0
 8007956:	461a      	mov	r2, r3
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	4313      	orrs	r3, r2
 800795c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800795e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d117      	bne.n	8007996 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	b299      	uxth	r1, r3
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	3318      	adds	r3, #24
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	4413      	add	r3, r2
 8007972:	461a      	mov	r2, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fb59 	bl	800802c <VL53L0X_GetLimitCheckEnable>
 800797a:	4603      	mov	r3, r0
 800797c:	461a      	mov	r2, r3
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	4313      	orrs	r3, r2
 8007982:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	3301      	adds	r3, #1
 8007988:	60bb      	str	r3, [r7, #8]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2b05      	cmp	r3, #5
 800798e:	ddd1      	ble.n	8007934 <VL53L0X_GetDeviceParameters+0x80>
 8007990:	e002      	b.n	8007998 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8007992:	bf00      	nop
 8007994:	e000      	b.n	8007998 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8007996:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d107      	bne.n	80079b0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	333c      	adds	r3, #60	; 0x3c
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fc52 	bl	8008250 <VL53L0X_GetWrapAroundCheckEnable>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80079b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d107      	bne.n	80079c8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	3304      	adds	r3, #4
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f876 	bl	8007ab0 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	2b15      	cmp	r3, #21
 80079e8:	bf8c      	ite	hi
 80079ea:	2201      	movhi	r2, #1
 80079ec:	2200      	movls	r2, #0
 80079ee:	b2d2      	uxtb	r2, r2
 80079f0:	2a00      	cmp	r2, #0
 80079f2:	d10e      	bne.n	8007a12 <VL53L0X_SetDeviceMode+0x3e>
 80079f4:	2201      	movs	r2, #1
 80079f6:	409a      	lsls	r2, r3
 80079f8:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <VL53L0X_SetDeviceMode+0x50>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	bf14      	ite	ne
 8007a00:	2301      	movne	r3, #1
 8007a02:	2300      	moveq	r3, #0
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	78fa      	ldrb	r2, [r7, #3]
 8007a0e:	741a      	strb	r2, [r3, #16]
		break;
 8007a10:	e001      	b.n	8007a16 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007a12:	23f8      	movs	r3, #248	; 0xf8
 8007a14:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bc80      	pop	{r7}
 8007a22:	4770      	bx	lr
 8007a24:	0030000b 	.word	0x0030000b

08007a28 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	7c1a      	ldrb	r2, [r3, #16]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bc80      	pop	{r7}
 8007a4a:	4770      	bx	lr

08007a4c <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	2109      	movs	r1, #9
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f004 f94f 	bl	800bd02 <VL53L0X_RdByte>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d106      	bne.n	8007a7e <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f002 ff74 	bl	800a988 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8007aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007aba:	2300      	movs	r3, #0
 8007abc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f003 f841 	bl	800ab48 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8007aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b086      	sub	sp, #24
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	607a      	str	r2, [r7, #4]
 8007ae2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8007ae8:	7afb      	ldrb	r3, [r7, #11]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	4619      	mov	r1, r3
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f002 ff13 	bl	800a91a <VL53L0X_get_vcsel_pulse_period>
 8007af4:	4603      	mov	r3, r0
 8007af6:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007af8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
 8007b10:	4613      	mov	r3, r2
 8007b12:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b14:	2300      	movs	r3, #0
 8007b16:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007b20:	f107 030f 	add.w	r3, r7, #15
 8007b24:	461a      	mov	r2, r3
 8007b26:	2101      	movs	r1, #1
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f004 f8ea 	bl	800bd02 <VL53L0X_RdByte>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8007b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d15a      	bne.n	8007bf4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8007b3e:	78bb      	ldrb	r3, [r7, #2]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d12b      	bne.n	8007b9c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d825      	bhi.n	8007b96 <VL53L0X_SetSequenceStepEnable+0x92>
 8007b4a:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b50:	08007b65 	.word	0x08007b65
 8007b54:	08007b6f 	.word	0x08007b6f
 8007b58:	08007b79 	.word	0x08007b79
 8007b5c:	08007b83 	.word	0x08007b83
 8007b60:	08007b8d 	.word	0x08007b8d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8007b64:	7dbb      	ldrb	r3, [r7, #22]
 8007b66:	f043 0310 	orr.w	r3, r3, #16
 8007b6a:	75bb      	strb	r3, [r7, #22]
				break;
 8007b6c:	e043      	b.n	8007bf6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007b6e:	7dbb      	ldrb	r3, [r7, #22]
 8007b70:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007b74:	75bb      	strb	r3, [r7, #22]
				break;
 8007b76:	e03e      	b.n	8007bf6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007b78:	7dbb      	ldrb	r3, [r7, #22]
 8007b7a:	f043 0304 	orr.w	r3, r3, #4
 8007b7e:	75bb      	strb	r3, [r7, #22]
				break;
 8007b80:	e039      	b.n	8007bf6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8007b82:	7dbb      	ldrb	r3, [r7, #22]
 8007b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b88:	75bb      	strb	r3, [r7, #22]
				break;
 8007b8a:	e034      	b.n	8007bf6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007b8c:	7dbb      	ldrb	r3, [r7, #22]
 8007b8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b92:	75bb      	strb	r3, [r7, #22]
				break;
 8007b94:	e02f      	b.n	8007bf6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b96:	23fc      	movs	r3, #252	; 0xfc
 8007b98:	75fb      	strb	r3, [r7, #23]
 8007b9a:	e02c      	b.n	8007bf6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d825      	bhi.n	8007bee <VL53L0X_SetSequenceStepEnable+0xea>
 8007ba2:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007bbd 	.word	0x08007bbd
 8007bac:	08007bc7 	.word	0x08007bc7
 8007bb0:	08007bd1 	.word	0x08007bd1
 8007bb4:	08007bdb 	.word	0x08007bdb
 8007bb8:	08007be5 	.word	0x08007be5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007bbc:	7dbb      	ldrb	r3, [r7, #22]
 8007bbe:	f023 0310 	bic.w	r3, r3, #16
 8007bc2:	75bb      	strb	r3, [r7, #22]
				break;
 8007bc4:	e017      	b.n	8007bf6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007bc6:	7dbb      	ldrb	r3, [r7, #22]
 8007bc8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007bcc:	75bb      	strb	r3, [r7, #22]
				break;
 8007bce:	e012      	b.n	8007bf6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007bd0:	7dbb      	ldrb	r3, [r7, #22]
 8007bd2:	f023 0304 	bic.w	r3, r3, #4
 8007bd6:	75bb      	strb	r3, [r7, #22]
				break;
 8007bd8:	e00d      	b.n	8007bf6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007bda:	7dbb      	ldrb	r3, [r7, #22]
 8007bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be0:	75bb      	strb	r3, [r7, #22]
				break;
 8007be2:	e008      	b.n	8007bf6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007be4:	7dbb      	ldrb	r3, [r7, #22]
 8007be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bea:	75bb      	strb	r3, [r7, #22]
				break;
 8007bec:	e003      	b.n	8007bf6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007bee:	23fc      	movs	r3, #252	; 0xfc
 8007bf0:	75fb      	strb	r3, [r7, #23]
 8007bf2:	e000      	b.n	8007bf6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007bf4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	7dba      	ldrb	r2, [r7, #22]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d01e      	beq.n	8007c3c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d107      	bne.n	8007c16 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8007c06:	7dbb      	ldrb	r3, [r7, #22]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f004 f973 	bl	800bef8 <VL53L0X_WrByte>
 8007c12:	4603      	mov	r3, r0
 8007c14:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8007c16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d103      	bne.n	8007c26 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7dba      	ldrb	r2, [r7, #22]
 8007c22:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8007c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d106      	bne.n	8007c3c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007c34:	6939      	ldr	r1, [r7, #16]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7ff ff27 	bl	8007a8a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	607b      	str	r3, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	72fb      	strb	r3, [r7, #11]
 8007c56:	4613      	mov	r3, r2
 8007c58:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8007c64:	7afb      	ldrb	r3, [r7, #11]
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d836      	bhi.n	8007cd8 <sequence_step_enabled+0x90>
 8007c6a:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <sequence_step_enabled+0x28>)
 8007c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c70:	08007c85 	.word	0x08007c85
 8007c74:	08007c97 	.word	0x08007c97
 8007c78:	08007ca9 	.word	0x08007ca9
 8007c7c:	08007cbb 	.word	0x08007cbb
 8007c80:	08007ccd 	.word	0x08007ccd
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007c84:	7abb      	ldrb	r3, [r7, #10]
 8007c86:	111b      	asrs	r3, r3, #4
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	701a      	strb	r2, [r3, #0]
		break;
 8007c94:	e022      	b.n	8007cdc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007c96:	7abb      	ldrb	r3, [r7, #10]
 8007c98:	10db      	asrs	r3, r3, #3
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	701a      	strb	r2, [r3, #0]
		break;
 8007ca6:	e019      	b.n	8007cdc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007ca8:	7abb      	ldrb	r3, [r7, #10]
 8007caa:	109b      	asrs	r3, r3, #2
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	701a      	strb	r2, [r3, #0]
		break;
 8007cb8:	e010      	b.n	8007cdc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8007cba:	7abb      	ldrb	r3, [r7, #10]
 8007cbc:	119b      	asrs	r3, r3, #6
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	701a      	strb	r2, [r3, #0]
		break;
 8007cca:	e007      	b.n	8007cdc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8007ccc:	7abb      	ldrb	r3, [r7, #10]
 8007cce:	09db      	lsrs	r3, r3, #7
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	701a      	strb	r2, [r3, #0]
		break;
 8007cd6:	e001      	b.n	8007cdc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007cd8:	23fc      	movs	r3, #252	; 0xfc
 8007cda:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007cdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop

08007cec <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007cfe:	f107 030e 	add.w	r3, r7, #14
 8007d02:	461a      	mov	r2, r3
 8007d04:	2101      	movs	r1, #1
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f003 fffb 	bl	800bd02 <VL53L0X_RdByte>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d107      	bne.n	8007d28 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007d18:	7bba      	ldrb	r2, [r7, #14]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff ff92 	bl	8007c48 <sequence_step_enabled>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d108      	bne.n	8007d42 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007d30:	7bba      	ldrb	r2, [r7, #14]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	3302      	adds	r3, #2
 8007d36:	2101      	movs	r1, #1
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff ff85 	bl	8007c48 <sequence_step_enabled>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d108      	bne.n	8007d5c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8007d4a:	7bba      	ldrb	r2, [r7, #14]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	2102      	movs	r1, #2
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff ff78 	bl	8007c48 <sequence_step_enabled>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d108      	bne.n	8007d76 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8007d64:	7bba      	ldrb	r2, [r7, #14]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	3303      	adds	r3, #3
 8007d6a:	2103      	movs	r1, #3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff ff6b 	bl	8007c48 <sequence_step_enabled>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d108      	bne.n	8007d90 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8007d7e:	7bba      	ldrb	r2, [r7, #14]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	3304      	adds	r3, #4
 8007d84:	2104      	movs	r1, #4
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff ff5e 	bl	8007c48 <sequence_step_enabled>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b088      	sub	sp, #32
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	460b      	mov	r3, r1
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007daa:	2300      	movs	r3, #0
 8007dac:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8007db6:	f107 0210 	add.w	r2, r7, #16
 8007dba:	7afb      	ldrb	r3, [r7, #11]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f002 fbd6 	bl	800a570 <get_sequence_step_timeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8007dc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d11c      	bne.n	8007e0a <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	4a11      	ldr	r2, [pc, #68]	; (8007e18 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8007dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd8:	099b      	lsrs	r3, r3, #6
 8007dda:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007de4:	fb01 f303 	mul.w	r3, r1, r3
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	4613      	mov	r3, r2
 8007df4:	041b      	lsls	r3, r3, #16
 8007df6:	1a9b      	subs	r3, r3, r2
 8007df8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007dfc:	4a06      	ldr	r2, [pc, #24]	; (8007e18 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8007dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007e02:	099b      	lsrs	r3, r3, #6
 8007e04:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3720      	adds	r7, #32
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	10624dd3 	.word	0x10624dd3

08007e1c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e26:	2300      	movs	r3, #0
 8007e28:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8007e2a:	f107 030c 	add.w	r3, r7, #12
 8007e2e:	461a      	mov	r2, r3
 8007e30:	21f8      	movs	r1, #248	; 0xf8
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f003 ffec 	bl	800be10 <VL53L0X_RdWord>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d108      	bne.n	8007e56 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007e44:	f107 0308 	add.w	r3, r7, #8
 8007e48:	461a      	mov	r2, r3
 8007e4a:	2104      	movs	r1, #4
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f004 f817 	bl	800be80 <VL53L0X_RdDWord>
 8007e52:	4603      	mov	r3, r0
 8007e54:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10c      	bne.n	8007e78 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8007e5e:	89bb      	ldrh	r3, [r7, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	89ba      	ldrh	r2, [r7, #12]
 8007e68:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	7f1b      	ldrb	r3, [r3, #28]
 8007e96:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	7bba      	ldrb	r2, [r7, #14]
 8007e9c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bc80      	pop	{r7}
 8007eaa:	4770      	bx	lr

08007eac <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8007eba:	f107 030e 	add.w	r3, r7, #14
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	2120      	movs	r1, #32
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f003 ffa4 	bl	800be10 <VL53L0X_RdWord>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8007ecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d118      	bne.n	8007f06 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8007ed4:	89fb      	ldrh	r3, [r7, #14]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d109      	bne.n	8007eee <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	771a      	strb	r2, [r3, #28]
 8007eec:	e00b      	b.n	8007f06 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007eee:	89fb      	ldrh	r3, [r7, #14]
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
	...

08007f14 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	807b      	strh	r3, [r7, #2]
 8007f20:	4613      	mov	r3, r2
 8007f22:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f24:	2300      	movs	r3, #0
 8007f26:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007f34:	887b      	ldrh	r3, [r7, #2]
 8007f36:	2b05      	cmp	r3, #5
 8007f38:	d902      	bls.n	8007f40 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f3a:	23fc      	movs	r3, #252	; 0xfc
 8007f3c:	75fb      	strb	r3, [r7, #23]
 8007f3e:	e05b      	b.n	8007ff8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8007f40:	787b      	ldrb	r3, [r7, #1]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	73bb      	strb	r3, [r7, #14]
 8007f52:	e00a      	b.n	8007f6a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007f54:	887b      	ldrh	r3, [r7, #2]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	330c      	adds	r3, #12
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8007f66:	2301      	movs	r3, #1
 8007f68:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8007f6a:	887b      	ldrh	r3, [r7, #2]
 8007f6c:	2b05      	cmp	r3, #5
 8007f6e:	d841      	bhi.n	8007ff4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8007f70:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <VL53L0X_SetLimitCheckEnable+0x64>)
 8007f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f76:	bf00      	nop
 8007f78:	08007f91 	.word	0x08007f91
 8007f7c:	08007f9b 	.word	0x08007f9b
 8007f80:	08007fb1 	.word	0x08007fb1
 8007f84:	08007fbb 	.word	0x08007fbb
 8007f88:	08007fc5 	.word	0x08007fc5
 8007f8c:	08007fdd 	.word	0x08007fdd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	7bfa      	ldrb	r2, [r7, #15]
 8007f94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007f98:	e02e      	b.n	8007ff8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	2144      	movs	r1, #68	; 0x44
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f003 ffcb 	bl	800bf40 <VL53L0X_WrWord>
 8007faa:	4603      	mov	r3, r0
 8007fac:	75fb      	strb	r3, [r7, #23]

			break;
 8007fae:	e023      	b.n	8007ff8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	7bfa      	ldrb	r2, [r7, #15]
 8007fb4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007fb8:	e01e      	b.n	8007ff8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	7bfa      	ldrb	r2, [r7, #15]
 8007fbe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8007fc2:	e019      	b.n	8007ff8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007fca:	7b7b      	ldrb	r3, [r7, #13]
 8007fcc:	22fe      	movs	r2, #254	; 0xfe
 8007fce:	2160      	movs	r1, #96	; 0x60
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f003 ffdf 	bl	800bf94 <VL53L0X_UpdateByte>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007fda:	e00d      	b.n	8007ff8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007fe2:	7b7b      	ldrb	r3, [r7, #13]
 8007fe4:	22ef      	movs	r2, #239	; 0xef
 8007fe6:	2160      	movs	r1, #96	; 0x60
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f003 ffd3 	bl	800bf94 <VL53L0X_UpdateByte>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8007ff2:	e001      	b.n	8007ff8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ff4:	23fc      	movs	r3, #252	; 0xfc
 8007ff6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10f      	bne.n	8008020 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8008000:	787b      	ldrb	r3, [r7, #1]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d106      	bne.n	8008014 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008006:	887b      	ldrh	r3, [r7, #2]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	4413      	add	r3, r2
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008012:	e005      	b.n	8008020 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008014:	887b      	ldrh	r3, [r7, #2]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	4413      	add	r3, r2
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800802c:	b480      	push	{r7}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	460b      	mov	r3, r1
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800803a:	2300      	movs	r3, #0
 800803c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800803e:	897b      	ldrh	r3, [r7, #10]
 8008040:	2b05      	cmp	r3, #5
 8008042:	d905      	bls.n	8008050 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008044:	23fc      	movs	r3, #252	; 0xfc
 8008046:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	e008      	b.n	8008062 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008050:	897b      	ldrh	r3, [r7, #10]
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	4413      	add	r3, r2
 8008056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800805a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	7dba      	ldrb	r2, [r7, #22]
 8008060:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008062:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008066:	4618      	mov	r0, r3
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	bc80      	pop	{r7}
 800806e:	4770      	bx	lr

08008070 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	460b      	mov	r3, r1
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800807e:	2300      	movs	r3, #0
 8008080:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8008082:	897b      	ldrh	r3, [r7, #10]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800808c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800808e:	7dbb      	ldrb	r3, [r7, #22]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d107      	bne.n	80080a4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008094:	897b      	ldrh	r3, [r7, #10]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	330c      	adds	r3, #12
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	605a      	str	r2, [r3, #4]
 80080a2:	e040      	b.n	8008126 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80080a4:	897b      	ldrh	r3, [r7, #10]
 80080a6:	2b05      	cmp	r3, #5
 80080a8:	d830      	bhi.n	800810c <VL53L0X_SetLimitCheckValue+0x9c>
 80080aa:	a201      	add	r2, pc, #4	; (adr r2, 80080b0 <VL53L0X_SetLimitCheckValue+0x40>)
 80080ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b0:	080080c9 	.word	0x080080c9
 80080b4:	080080d1 	.word	0x080080d1
 80080b8:	080080e7 	.word	0x080080e7
 80080bc:	080080ef 	.word	0x080080ef
 80080c0:	080080f7 	.word	0x080080f7
 80080c4:	080080f7 	.word	0x080080f7

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80080ce:	e01f      	b.n	8008110 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	461a      	mov	r2, r3
 80080d8:	2144      	movs	r1, #68	; 0x44
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f003 ff30 	bl	800bf40 <VL53L0X_WrWord>
 80080e0:	4603      	mov	r3, r0
 80080e2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80080e4:	e014      	b.n	8008110 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80080ec:	e010      	b.n	8008110 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80080f4:	e00c      	b.n	8008110 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	461a      	mov	r2, r3
 80080fe:	2164      	movs	r1, #100	; 0x64
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f003 ff1d 	bl	800bf40 <VL53L0X_WrWord>
 8008106:	4603      	mov	r3, r0
 8008108:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800810a:	e001      	b.n	8008110 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800810c:	23fc      	movs	r3, #252	; 0xfc
 800810e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d106      	bne.n	8008126 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008118:	897b      	ldrh	r3, [r7, #10]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	330c      	adds	r3, #12
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008126:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3718      	adds	r7, #24
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop

08008134 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	460b      	mov	r3, r1
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008142:	2300      	movs	r3, #0
 8008144:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800814a:	897b      	ldrh	r3, [r7, #10]
 800814c:	2b05      	cmp	r3, #5
 800814e:	d847      	bhi.n	80081e0 <VL53L0X_GetLimitCheckValue+0xac>
 8008150:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <VL53L0X_GetLimitCheckValue+0x24>)
 8008152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008156:	bf00      	nop
 8008158:	08008171 	.word	0x08008171
 800815c:	0800817d 	.word	0x0800817d
 8008160:	080081a3 	.word	0x080081a3
 8008164:	080081af 	.word	0x080081af
 8008168:	080081bb 	.word	0x080081bb
 800816c:	080081bb 	.word	0x080081bb

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008174:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	77bb      	strb	r3, [r7, #30]
		break;
 800817a:	e033      	b.n	80081e4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800817c:	f107 0316 	add.w	r3, r7, #22
 8008180:	461a      	mov	r2, r3
 8008182:	2144      	movs	r1, #68	; 0x44
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f003 fe43 	bl	800be10 <VL53L0X_RdWord>
 800818a:	4603      	mov	r3, r0
 800818c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800818e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d102      	bne.n	800819c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008196:	8afb      	ldrh	r3, [r7, #22]
 8008198:	025b      	lsls	r3, r3, #9
 800819a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800819c:	2301      	movs	r3, #1
 800819e:	77bb      	strb	r3, [r7, #30]
		break;
 80081a0:	e020      	b.n	80081e4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	77bb      	strb	r3, [r7, #30]
		break;
 80081ac:	e01a      	b.n	80081e4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	77bb      	strb	r3, [r7, #30]
		break;
 80081b8:	e014      	b.n	80081e4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80081ba:	f107 0316 	add.w	r3, r7, #22
 80081be:	461a      	mov	r2, r3
 80081c0:	2164      	movs	r1, #100	; 0x64
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f003 fe24 	bl	800be10 <VL53L0X_RdWord>
 80081c8:	4603      	mov	r3, r0
 80081ca:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80081cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d102      	bne.n	80081da <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80081d4:	8afb      	ldrh	r3, [r7, #22]
 80081d6:	025b      	lsls	r3, r3, #9
 80081d8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	77bb      	strb	r3, [r7, #30]
		break;
 80081de:	e001      	b.n	80081e4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081e0:	23fc      	movs	r3, #252	; 0xfc
 80081e2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d12a      	bne.n	8008242 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80081ec:	7fbb      	ldrb	r3, [r7, #30]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d124      	bne.n	800823c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d110      	bne.n	800821a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80081f8:	897b      	ldrh	r3, [r7, #10]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	330c      	adds	r3, #12
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	69ba      	ldr	r2, [r7, #24]
 800820a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800820c:	897b      	ldrh	r3, [r7, #10]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	4413      	add	r3, r2
 8008212:	2200      	movs	r2, #0
 8008214:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008218:	e013      	b.n	8008242 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008220:	897b      	ldrh	r3, [r7, #10]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	330c      	adds	r3, #12
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800822e:	897b      	ldrh	r3, [r7, #10]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	4413      	add	r3, r2
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800823a:	e002      	b.n	8008242 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008242:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008246:	4618      	mov	r0, r3
 8008248:	3720      	adds	r7, #32
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop

08008250 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800825e:	f107 030e 	add.w	r3, r7, #14
 8008262:	461a      	mov	r2, r3
 8008264:	2101      	movs	r1, #1
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f003 fd4b 	bl	800bd02 <VL53L0X_RdByte>
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10e      	bne.n	8008296 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008278:	7bba      	ldrb	r2, [r7, #14]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	b25b      	sxtb	r3, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	da03      	bge.n	8008290 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2201      	movs	r2, #1
 800828c:	701a      	strb	r2, [r3, #0]
 800828e:	e002      	b.n	8008296 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2200      	movs	r2, #0
 8008294:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d104      	bne.n	80082a8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781a      	ldrb	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80082a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80082c0:	f107 030e 	add.w	r3, r7, #14
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7ff fbae 	bl	8007a28 <VL53L0X_GetDeviceMode>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80082d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d107      	bne.n	80082e8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d104      	bne.n	80082e8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f898 	bl	8008414 <VL53L0X_StartMeasurement>
 80082e4:	4603      	mov	r3, r0
 80082e6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80082e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d104      	bne.n	80082fa <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 fb08 	bl	8009906 <VL53L0X_measurement_poll_for_completion>
 80082f6:	4603      	mov	r3, r0
 80082f8:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80082fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d106      	bne.n	8008310 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d103      	bne.n	8008310 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2203      	movs	r2, #3
 800830c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8008310:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008328:	2300      	movs	r3, #0
 800832a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800832c:	2301      	movs	r3, #1
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	68b9      	ldr	r1, [r7, #8]
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f001 faaa 	bl	800988c <VL53L0X_perform_ref_calibration>
 8008338:	4603      	mov	r3, r0
 800833a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800833c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008354:	2300      	movs	r3, #0
 8008356:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800835e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8008360:	7dbb      	ldrb	r3, [r7, #22]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d005      	beq.n	8008372 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8008366:	7dbb      	ldrb	r3, [r7, #22]
 8008368:	2b02      	cmp	r3, #2
 800836a:	d002      	beq.n	8008372 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800836c:	7dbb      	ldrb	r3, [r7, #22]
 800836e:	2b03      	cmp	r3, #3
 8008370:	d147      	bne.n	8008402 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8008372:	f107 030c 	add.w	r3, r7, #12
 8008376:	f107 0210 	add.w	r2, r7, #16
 800837a:	2101      	movs	r1, #1
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fb8d 	bl	8008a9c <VL53L0X_GetInterruptThresholds>
 8008382:	4603      	mov	r3, r0
 8008384:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800838c:	d803      	bhi.n	8008396 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800838e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008390:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008394:	d935      	bls.n	8008402 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8008396:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d131      	bne.n	8008402 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d006      	beq.n	80083b2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80083a4:	491a      	ldr	r1, [pc, #104]	; (8008410 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f002 fc80 	bl	800acac <VL53L0X_load_tuning_settings>
 80083ac:	4603      	mov	r3, r0
 80083ae:	75fb      	strb	r3, [r7, #23]
 80083b0:	e027      	b.n	8008402 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80083b2:	2204      	movs	r2, #4
 80083b4:	21ff      	movs	r1, #255	; 0xff
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f003 fd9e 	bl	800bef8 <VL53L0X_WrByte>
 80083bc:	4603      	mov	r3, r0
 80083be:	461a      	mov	r2, r3
 80083c0:	7dfb      	ldrb	r3, [r7, #23]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80083c6:	2200      	movs	r2, #0
 80083c8:	2170      	movs	r1, #112	; 0x70
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f003 fd94 	bl	800bef8 <VL53L0X_WrByte>
 80083d0:	4603      	mov	r3, r0
 80083d2:	461a      	mov	r2, r3
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80083da:	2200      	movs	r2, #0
 80083dc:	21ff      	movs	r1, #255	; 0xff
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f003 fd8a 	bl	800bef8 <VL53L0X_WrByte>
 80083e4:	4603      	mov	r3, r0
 80083e6:	461a      	mov	r2, r3
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80083ee:	2200      	movs	r2, #0
 80083f0:	2180      	movs	r1, #128	; 0x80
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f003 fd80 	bl	800bef8 <VL53L0X_WrByte>
 80083f8:	4603      	mov	r3, r0
 80083fa:	461a      	mov	r2, r3
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	4313      	orrs	r3, r2
 8008400:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8008402:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000108 	.word	0x20000108

08008414 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800841c:	2300      	movs	r3, #0
 800841e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8008420:	2301      	movs	r3, #1
 8008422:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008424:	f107 030e 	add.w	r3, r7, #14
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff fafc 	bl	8007a28 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	2b03      	cmp	r3, #3
 8008434:	d052      	beq.n	80084dc <VL53L0X_StartMeasurement+0xc8>
 8008436:	2b03      	cmp	r3, #3
 8008438:	dc6a      	bgt.n	8008510 <VL53L0X_StartMeasurement+0xfc>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <VL53L0X_StartMeasurement+0x30>
 800843e:	2b01      	cmp	r3, #1
 8008440:	d032      	beq.n	80084a8 <VL53L0X_StartMeasurement+0x94>
 8008442:	e065      	b.n	8008510 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8008444:	2201      	movs	r2, #1
 8008446:	2100      	movs	r1, #0
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f003 fd55 	bl	800bef8 <VL53L0X_WrByte>
 800844e:	4603      	mov	r3, r0
 8008450:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
 8008454:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8008456:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d15b      	bne.n	8008516 <VL53L0X_StartMeasurement+0x102>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d008      	beq.n	800847a <VL53L0X_StartMeasurement+0x66>
					Status = VL53L0X_RdByte(Dev,
 8008468:	f107 030d 	add.w	r3, r7, #13
 800846c:	461a      	mov	r2, r3
 800846e:	2100      	movs	r1, #0
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f003 fc46 	bl	800bd02 <VL53L0X_RdByte>
 8008476:	4603      	mov	r3, r0
 8008478:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	3301      	adds	r3, #1
 800847e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8008480:	7b7a      	ldrb	r2, [r7, #13]
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	4013      	ands	r3, r2
 8008486:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008488:	7bfa      	ldrb	r2, [r7, #15]
 800848a:	429a      	cmp	r2, r3
 800848c:	d106      	bne.n	800849c <VL53L0X_StartMeasurement+0x88>
				&& (Status == VL53L0X_ERROR_NONE)
 800848e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d102      	bne.n	800849c <VL53L0X_StartMeasurement+0x88>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	2bc7      	cmp	r3, #199	; 0xc7
 800849a:	d9e2      	bls.n	8008462 <VL53L0X_StartMeasurement+0x4e>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	2bc7      	cmp	r3, #199	; 0xc7
 80084a0:	d939      	bls.n	8008516 <VL53L0X_StartMeasurement+0x102>
				Status = VL53L0X_ERROR_TIME_OUT;
 80084a2:	23f9      	movs	r3, #249	; 0xf9
 80084a4:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80084a6:	e036      	b.n	8008516 <VL53L0X_StartMeasurement+0x102>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80084a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d105      	bne.n	80084bc <VL53L0X_StartMeasurement+0xa8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80084b0:	2101      	movs	r1, #1
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7ff ff48 	bl	8008348 <VL53L0X_CheckAndLoadInterruptSettings>
 80084b8:	4603      	mov	r3, r0
 80084ba:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80084bc:	2202      	movs	r2, #2
 80084be:	2100      	movs	r1, #0
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f003 fd19 	bl	800bef8 <VL53L0X_WrByte>
 80084c6:	4603      	mov	r3, r0
 80084c8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80084ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d123      	bne.n	800851a <VL53L0X_StartMeasurement+0x106>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2204      	movs	r2, #4
 80084d6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80084da:	e01e      	b.n	800851a <VL53L0X_StartMeasurement+0x106>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80084dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d105      	bne.n	80084f0 <VL53L0X_StartMeasurement+0xdc>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80084e4:	2101      	movs	r1, #1
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7ff ff2e 	bl	8008348 <VL53L0X_CheckAndLoadInterruptSettings>
 80084ec:	4603      	mov	r3, r0
 80084ee:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80084f0:	2204      	movs	r2, #4
 80084f2:	2100      	movs	r1, #0
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f003 fcff 	bl	800bef8 <VL53L0X_WrByte>
 80084fa:	4603      	mov	r3, r0
 80084fc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80084fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10b      	bne.n	800851e <VL53L0X_StartMeasurement+0x10a>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2204      	movs	r2, #4
 800850a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800850e:	e006      	b.n	800851e <VL53L0X_StartMeasurement+0x10a>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008510:	23f8      	movs	r3, #248	; 0xf8
 8008512:	75fb      	strb	r3, [r7, #23]
 8008514:	e004      	b.n	8008520 <VL53L0X_StartMeasurement+0x10c>
		break;
 8008516:	bf00      	nop
 8008518:	e002      	b.n	8008520 <VL53L0X_StartMeasurement+0x10c>
		break;
 800851a:	bf00      	nop
 800851c:	e000      	b.n	8008520 <VL53L0X_StartMeasurement+0x10c>
		break;
 800851e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008520:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008540:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8008542:	7bbb      	ldrb	r3, [r7, #14]
 8008544:	2b04      	cmp	r3, #4
 8008546:	d112      	bne.n	800856e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8008548:	f107 0308 	add.w	r3, r7, #8
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fb1a 	bl	8008b88 <VL53L0X_GetInterruptMaskStatus>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b04      	cmp	r3, #4
 800855c:	d103      	bne.n	8008566 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2201      	movs	r2, #1
 8008562:	701a      	strb	r2, [r3, #0]
 8008564:	e01c      	b.n	80085a0 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2200      	movs	r2, #0
 800856a:	701a      	strb	r2, [r3, #0]
 800856c:	e018      	b.n	80085a0 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800856e:	f107 030d 	add.w	r3, r7, #13
 8008572:	461a      	mov	r2, r3
 8008574:	2114      	movs	r1, #20
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f003 fbc3 	bl	800bd02 <VL53L0X_RdByte>
 800857c:	4603      	mov	r3, r0
 800857e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8008580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10b      	bne.n	80085a0 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8008588:	7b7b      	ldrb	r3, [r7, #13]
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2201      	movs	r2, #1
 8008596:	701a      	strb	r2, [r3, #0]
 8008598:	e002      	b.n	80085a0 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2200      	movs	r2, #0
 800859e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80085a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80085ac:	b5b0      	push	{r4, r5, r7, lr}
 80085ae:	b096      	sub	sp, #88	; 0x58
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80085bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80085c0:	230c      	movs	r3, #12
 80085c2:	2114      	movs	r1, #20
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f003 fbf7 	bl	800bdb8 <VL53L0X_ReadMulti>
 80085ca:	4603      	mov	r3, r0
 80085cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80085d0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f040 80d1 	bne.w	800877c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2200      	movs	r2, #0
 80085de:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80085e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	021b      	lsls	r3, r3, #8
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	4413      	add	r3, r2
 80085f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2200      	movs	r2, #0
 8008600:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8008602:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008606:	b29b      	uxth	r3, r3
 8008608:	021b      	lsls	r3, r3, #8
 800860a:	b29a      	uxth	r2, r3
 800860c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008610:	b29b      	uxth	r3, r3
 8008612:	4413      	add	r3, r2
 8008614:	b29b      	uxth	r3, r3
 8008616:	025b      	lsls	r3, r3, #9
 8008618:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800861e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008620:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008624:	b29b      	uxth	r3, r3
 8008626:	021b      	lsls	r3, r3, #8
 8008628:	b29a      	uxth	r2, r3
 800862a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800862e:	b29b      	uxth	r3, r3
 8008630:	4413      	add	r3, r2
 8008632:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8008636:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800863a:	025b      	lsls	r3, r3, #9
 800863c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8008642:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008646:	b29b      	uxth	r3, r3
 8008648:	021b      	lsls	r3, r3, #8
 800864a:	b29a      	uxth	r2, r3
 800864c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008650:	b29b      	uxth	r3, r3
 8008652:	4413      	add	r3, r2
 8008654:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800865e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8008660:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 800866e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008676:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800867a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800867c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008680:	d046      	beq.n	8008710 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8008682:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008684:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008688:	fb02 f303 	mul.w	r3, r2, r3
 800868c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008690:	4a57      	ldr	r2, [pc, #348]	; (80087f0 <VL53L0X_GetRangingMeasurementData+0x244>)
 8008692:	fb82 1203 	smull	r1, r2, r2, r3
 8008696:	1192      	asrs	r2, r2, #6
 8008698:	17db      	asrs	r3, r3, #31
 800869a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800869c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	7f1b      	ldrb	r3, [r3, #28]
 80086aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80086ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d02c      	beq.n	8008710 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80086b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80086b8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80086bc:	fb02 f303 	mul.w	r3, r2, r3
 80086c0:	121a      	asrs	r2, r3, #8
					<= 0) {
 80086c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d10d      	bne.n	80086e4 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80086c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d004      	beq.n	80086da <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80086d0:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80086d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80086d8:	e016      	b.n	8008708 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80086da:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80086de:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80086e2:	e011      	b.n	8008708 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80086e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80086e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086ea:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80086ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80086f0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80086f4:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80086f8:	121b      	asrs	r3, r3, #8
 80086fa:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80086fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086fe:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008700:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8008704:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8008708:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800870c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008710:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00d      	beq.n	8008734 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8008718:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800871c:	089b      	lsrs	r3, r3, #2
 800871e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008724:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008728:	b2db      	uxtb	r3, r3
 800872a:	019b      	lsls	r3, r3, #6
 800872c:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	75da      	strb	r2, [r3, #23]
 8008732:	e006      	b.n	8008742 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800873a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2200      	movs	r2, #0
 8008740:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8008742:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008746:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800874a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800874e:	9301      	str	r3, [sp, #4]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	4613      	mov	r3, r2
 8008756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f002 ff09 	bl	800b570 <VL53L0X_get_pal_range_status>
 800875e:	4603      	mov	r3, r0
 8008760:	461a      	mov	r2, r3
 8008762:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008766:	4313      	orrs	r3, r2
 8008768:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800876c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008770:	2b00      	cmp	r3, #0
 8008772:	d103      	bne.n	800877c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8008774:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800877c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008780:	2b00      	cmp	r3, #0
 8008782:	d12f      	bne.n	80087e4 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f107 040c 	add.w	r4, r7, #12
 800878a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800878e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008792:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008796:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800879e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80087a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80087ac:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80087b2:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80087b8:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80087be:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80087c4:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80087ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80087d4:	f107 050c 	add.w	r5, r7, #12
 80087d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80087e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80087e4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3750      	adds	r7, #80	; 0x50
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bdb0      	pop	{r4, r5, r7, pc}
 80087f0:	10624dd3 	.word	0x10624dd3

080087f4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087fe:	2300      	movs	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008802:	2100      	movs	r1, #0
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7ff f8e5 	bl	80079d4 <VL53L0X_SetDeviceMode>
 800880a:	4603      	mov	r3, r0
 800880c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800880e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d104      	bne.n	8008820 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7ff fd4c 	bl	80082b4 <VL53L0X_PerformSingleMeasurement>
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d105      	bne.n	8008834 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff febe 	bl	80085ac <VL53L0X_GetRangingMeasurementData>
 8008830:	4603      	mov	r3, r0
 8008832:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8008834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d105      	bne.n	8008848 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800883c:	2100      	movs	r1, #0
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f962 	bl	8008b08 <VL53L0X_ClearInterruptMask>
 8008844:	4603      	mov	r3, r0
 8008846:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8008848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	4608      	mov	r0, r1
 800885e:	4611      	mov	r1, r2
 8008860:	461a      	mov	r2, r3
 8008862:	4603      	mov	r3, r0
 8008864:	70fb      	strb	r3, [r7, #3]
 8008866:	460b      	mov	r3, r1
 8008868:	70bb      	strb	r3, [r7, #2]
 800886a:	4613      	mov	r3, r2
 800886c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8008872:	78fb      	ldrb	r3, [r7, #3]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8008878:	23f6      	movs	r3, #246	; 0xf6
 800887a:	73fb      	strb	r3, [r7, #15]
 800887c:	e107      	b.n	8008a8e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800887e:	78bb      	ldrb	r3, [r7, #2]
 8008880:	2b14      	cmp	r3, #20
 8008882:	d110      	bne.n	80088a6 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008884:	7e3b      	ldrb	r3, [r7, #24]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d102      	bne.n	8008890 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800888a:	2310      	movs	r3, #16
 800888c:	73bb      	strb	r3, [r7, #14]
 800888e:	e001      	b.n	8008894 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8008890:	2301      	movs	r3, #1
 8008892:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8008894:	7bbb      	ldrb	r3, [r7, #14]
 8008896:	461a      	mov	r2, r3
 8008898:	2184      	movs	r1, #132	; 0x84
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f003 fb2c 	bl	800bef8 <VL53L0X_WrByte>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73fb      	strb	r3, [r7, #15]
 80088a4:	e0f3      	b.n	8008a8e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80088a6:	78bb      	ldrb	r3, [r7, #2]
 80088a8:	2b15      	cmp	r3, #21
 80088aa:	f040 8097 	bne.w	80089dc <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80088ae:	2201      	movs	r2, #1
 80088b0:	21ff      	movs	r1, #255	; 0xff
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f003 fb20 	bl	800bef8 <VL53L0X_WrByte>
 80088b8:	4603      	mov	r3, r0
 80088ba:	461a      	mov	r2, r3
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	4313      	orrs	r3, r2
 80088c0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80088c2:	2200      	movs	r2, #0
 80088c4:	2100      	movs	r1, #0
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f003 fb16 	bl	800bef8 <VL53L0X_WrByte>
 80088cc:	4603      	mov	r3, r0
 80088ce:	461a      	mov	r2, r3
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80088d6:	2200      	movs	r2, #0
 80088d8:	21ff      	movs	r1, #255	; 0xff
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f003 fb0c 	bl	800bef8 <VL53L0X_WrByte>
 80088e0:	4603      	mov	r3, r0
 80088e2:	461a      	mov	r2, r3
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80088ea:	2201      	movs	r2, #1
 80088ec:	2180      	movs	r1, #128	; 0x80
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f003 fb02 	bl	800bef8 <VL53L0X_WrByte>
 80088f4:	4603      	mov	r3, r0
 80088f6:	461a      	mov	r2, r3
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80088fe:	2202      	movs	r2, #2
 8008900:	2185      	movs	r1, #133	; 0x85
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f003 faf8 	bl	800bef8 <VL53L0X_WrByte>
 8008908:	4603      	mov	r3, r0
 800890a:	461a      	mov	r2, r3
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	4313      	orrs	r3, r2
 8008910:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8008912:	2204      	movs	r2, #4
 8008914:	21ff      	movs	r1, #255	; 0xff
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f003 faee 	bl	800bef8 <VL53L0X_WrByte>
 800891c:	4603      	mov	r3, r0
 800891e:	461a      	mov	r2, r3
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	4313      	orrs	r3, r2
 8008924:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8008926:	2200      	movs	r2, #0
 8008928:	21cd      	movs	r1, #205	; 0xcd
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f003 fae4 	bl	800bef8 <VL53L0X_WrByte>
 8008930:	4603      	mov	r3, r0
 8008932:	461a      	mov	r2, r3
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	4313      	orrs	r3, r2
 8008938:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800893a:	2211      	movs	r2, #17
 800893c:	21cc      	movs	r1, #204	; 0xcc
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f003 fada 	bl	800bef8 <VL53L0X_WrByte>
 8008944:	4603      	mov	r3, r0
 8008946:	461a      	mov	r2, r3
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	4313      	orrs	r3, r2
 800894c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800894e:	2207      	movs	r2, #7
 8008950:	21ff      	movs	r1, #255	; 0xff
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f003 fad0 	bl	800bef8 <VL53L0X_WrByte>
 8008958:	4603      	mov	r3, r0
 800895a:	461a      	mov	r2, r3
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	4313      	orrs	r3, r2
 8008960:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8008962:	2200      	movs	r2, #0
 8008964:	21be      	movs	r1, #190	; 0xbe
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f003 fac6 	bl	800bef8 <VL53L0X_WrByte>
 800896c:	4603      	mov	r3, r0
 800896e:	461a      	mov	r2, r3
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	4313      	orrs	r3, r2
 8008974:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8008976:	2206      	movs	r2, #6
 8008978:	21ff      	movs	r1, #255	; 0xff
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f003 fabc 	bl	800bef8 <VL53L0X_WrByte>
 8008980:	4603      	mov	r3, r0
 8008982:	461a      	mov	r2, r3
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	4313      	orrs	r3, r2
 8008988:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800898a:	2209      	movs	r2, #9
 800898c:	21cc      	movs	r1, #204	; 0xcc
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f003 fab2 	bl	800bef8 <VL53L0X_WrByte>
 8008994:	4603      	mov	r3, r0
 8008996:	461a      	mov	r2, r3
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	4313      	orrs	r3, r2
 800899c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800899e:	2200      	movs	r2, #0
 80089a0:	21ff      	movs	r1, #255	; 0xff
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f003 faa8 	bl	800bef8 <VL53L0X_WrByte>
 80089a8:	4603      	mov	r3, r0
 80089aa:	461a      	mov	r2, r3
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80089b2:	2201      	movs	r2, #1
 80089b4:	21ff      	movs	r1, #255	; 0xff
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f003 fa9e 	bl	800bef8 <VL53L0X_WrByte>
 80089bc:	4603      	mov	r3, r0
 80089be:	461a      	mov	r2, r3
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80089c6:	2200      	movs	r2, #0
 80089c8:	2100      	movs	r1, #0
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f003 fa94 	bl	800bef8 <VL53L0X_WrByte>
 80089d0:	4603      	mov	r3, r0
 80089d2:	461a      	mov	r2, r3
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	73fb      	strb	r3, [r7, #15]
 80089da:	e058      	b.n	8008a8e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80089dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d121      	bne.n	8008a28 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80089e4:	787b      	ldrb	r3, [r7, #1]
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	d81b      	bhi.n	8008a22 <VL53L0X_SetGpioConfig+0x1ce>
 80089ea:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <VL53L0X_SetGpioConfig+0x19c>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a05 	.word	0x08008a05
 80089f4:	08008a0b 	.word	0x08008a0b
 80089f8:	08008a11 	.word	0x08008a11
 80089fc:	08008a17 	.word	0x08008a17
 8008a00:	08008a1d 	.word	0x08008a1d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008a04:	2300      	movs	r3, #0
 8008a06:	73bb      	strb	r3, [r7, #14]
				break;
 8008a08:	e00f      	b.n	8008a2a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	73bb      	strb	r3, [r7, #14]
				break;
 8008a0e:	e00c      	b.n	8008a2a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008a10:	2302      	movs	r3, #2
 8008a12:	73bb      	strb	r3, [r7, #14]
				break;
 8008a14:	e009      	b.n	8008a2a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008a16:	2303      	movs	r3, #3
 8008a18:	73bb      	strb	r3, [r7, #14]
				break;
 8008a1a:	e006      	b.n	8008a2a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008a1c:	2304      	movs	r3, #4
 8008a1e:	73bb      	strb	r3, [r7, #14]
				break;
 8008a20:	e003      	b.n	8008a2a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8008a22:	23f5      	movs	r3, #245	; 0xf5
 8008a24:	73fb      	strb	r3, [r7, #15]
 8008a26:	e000      	b.n	8008a2a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8008a28:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8008a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d107      	bne.n	8008a42 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8008a32:	7bbb      	ldrb	r3, [r7, #14]
 8008a34:	461a      	mov	r2, r3
 8008a36:	210a      	movs	r1, #10
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f003 fa5d 	bl	800bef8 <VL53L0X_WrByte>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8008a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10f      	bne.n	8008a6a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008a4a:	7e3b      	ldrb	r3, [r7, #24]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d102      	bne.n	8008a56 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73bb      	strb	r3, [r7, #14]
 8008a54:	e001      	b.n	8008a5a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8008a56:	2310      	movs	r3, #16
 8008a58:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	22ef      	movs	r2, #239	; 0xef
 8008a5e:	2184      	movs	r1, #132	; 0x84
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f003 fa97 	bl	800bf94 <VL53L0X_UpdateByte>
 8008a66:	4603      	mov	r3, r0
 8008a68:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d103      	bne.n	8008a7a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	787a      	ldrb	r2, [r7, #1]
 8008a76:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d105      	bne.n	8008a8e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008a82:	2100      	movs	r1, #0
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f83f 	bl	8008b08 <VL53L0X_ClearInterruptMask>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop

08008a9c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	607a      	str	r2, [r7, #4]
 8008aa6:	603b      	str	r3, [r7, #0]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008aac:	2300      	movs	r3, #0
 8008aae:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8008ab0:	f107 0314 	add.w	r3, r7, #20
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	210e      	movs	r1, #14
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f003 f9a9 	bl	800be10 <VL53L0X_RdWord>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008ac2:	8abb      	ldrh	r3, [r7, #20]
 8008ac4:	045b      	lsls	r3, r3, #17
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <VL53L0X_GetInterruptThresholds+0x68>)
 8008aca:	4013      	ands	r3, r2
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008ad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10f      	bne.n	8008af8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008ad8:	f107 0314 	add.w	r3, r7, #20
 8008adc:	461a      	mov	r2, r3
 8008ade:	210c      	movs	r1, #12
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f003 f995 	bl	800be10 <VL53L0X_RdWord>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008aea:	8abb      	ldrh	r3, [r7, #20]
 8008aec:	045b      	lsls	r3, r3, #17
 8008aee:	461a      	mov	r2, r3
 8008af0:	4b04      	ldr	r3, [pc, #16]	; (8008b04 <VL53L0X_GetInterruptThresholds+0x68>)
 8008af2:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008af8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	1ffe0000 	.word	0x1ffe0000

08008b08 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008b16:	2300      	movs	r3, #0
 8008b18:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	210b      	movs	r1, #11
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f003 f9ea 	bl	800bef8 <VL53L0X_WrByte>
 8008b24:	4603      	mov	r3, r0
 8008b26:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008b28:	2200      	movs	r2, #0
 8008b2a:	210b      	movs	r1, #11
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f003 f9e3 	bl	800bef8 <VL53L0X_WrByte>
 8008b32:	4603      	mov	r3, r0
 8008b34:	461a      	mov	r2, r3
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008b3c:	f107 030d 	add.w	r3, r7, #13
 8008b40:	461a      	mov	r2, r3
 8008b42:	2113      	movs	r1, #19
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f003 f8dc 	bl	800bd02 <VL53L0X_RdByte>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
 8008b56:	3301      	adds	r3, #1
 8008b58:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8008b5a:	7b7b      	ldrb	r3, [r7, #13]
 8008b5c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d006      	beq.n	8008b72 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d803      	bhi.n	8008b72 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8008b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0d3      	beq.n	8008b1a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d901      	bls.n	8008b7c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008b78:	23f4      	movs	r3, #244	; 0xf4
 8008b7a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b92:	2300      	movs	r3, #0
 8008b94:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8008b96:	f107 030e 	add.w	r3, r7, #14
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	2113      	movs	r1, #19
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f003 f8af 	bl	800bd02 <VL53L0X_RdByte>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
 8008baa:	f003 0207 	and.w	r2, r3, #7
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	f003 0318 	and.w	r3, r3, #24
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008bbc:	23fa      	movs	r3, #250	; 0xfa
 8008bbe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	68b9      	ldr	r1, [r7, #8]
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 fa02 	bl	8008fea <VL53L0X_perform_ref_spad_management>
 8008be6:	4603      	mov	r3, r0
 8008be8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8008bea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008c04:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008c08:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8008c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c0e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8008c10:	f107 0308 	add.w	r3, r7, #8
 8008c14:	461a      	mov	r2, r3
 8008c16:	2128      	movs	r1, #40	; 0x28
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f003 f8f9 	bl	800be10 <VL53L0X_RdWord>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8008c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d11e      	bne.n	8008c68 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8008c2a:	893b      	ldrh	r3, [r7, #8]
 8008c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008c34:	893b      	ldrh	r3, [r7, #8]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	dd0b      	ble.n	8008c58 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8008c40:	893a      	ldrh	r2, [r7, #8]
 8008c42:	897b      	ldrh	r3, [r7, #10]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	b21b      	sxth	r3, r3
 8008c4a:	461a      	mov	r2, r3
					* 250;
 8008c4c:	23fa      	movs	r3, #250	; 0xfa
 8008c4e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	e007      	b.n	8008c68 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008c58:	893b      	ldrh	r3, [r7, #8]
 8008c5a:	b21b      	sxth	r3, r3
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	23fa      	movs	r3, #250	; 0xfa
 8008c60:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b08b      	sub	sp, #44	; 0x2c
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
 8008c80:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8008c82:	2308      	movs	r3, #8
 8008c84:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c90:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c9a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ca4:	69b9      	ldr	r1, [r7, #24]
 8008ca6:	fb01 f202 	mul.w	r2, r1, r2
 8008caa:	1a9b      	subs	r3, r3, r2
 8008cac:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8008cb2:	e030      	b.n	8008d16 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	4413      	add	r3, r2
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d11e      	bne.n	8008d08 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8008cca:	7ffa      	ldrb	r2, [r7, #31]
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	fa42 f303 	asr.w	r3, r2, r3
 8008cd2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008cd8:	e016      	b.n	8008d08 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8008cda:	7ffb      	ldrb	r3, [r7, #31]
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00b      	beq.n	8008cfc <get_next_good_spad+0x88>
				success = 1;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	fb03 f202 	mul.w	r2, r3, r2
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	601a      	str	r2, [r3, #0]
				break;
 8008cfa:	e009      	b.n	8008d10 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8008cfc:	7ffb      	ldrb	r3, [r7, #31]
 8008cfe:	085b      	lsrs	r3, r3, #1
 8008d00:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	3301      	adds	r3, #1
 8008d06:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008d08:	6a3a      	ldr	r2, [r7, #32]
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d3e4      	bcc.n	8008cda <get_next_good_spad+0x66>
				coarseIndex++) {
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	3301      	adds	r3, #1
 8008d14:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d202      	bcs.n	8008d24 <get_next_good_spad+0xb0>
 8008d1e:	7fbb      	ldrb	r3, [r7, #30]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0c7      	beq.n	8008cb4 <get_next_good_spad+0x40>
		}
	}
}
 8008d24:	bf00      	nop
 8008d26:	372c      	adds	r7, #44	; 0x2c
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bc80      	pop	{r7}
 8008d2c:	4770      	bx	lr
	...

08008d30 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	099b      	lsrs	r3, r3, #6
 8008d40:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8008d42:	4a07      	ldr	r2, [pc, #28]	; (8008d60 <is_aperture+0x30>)
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <is_aperture+0x22>
		isAperture = 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bc80      	pop	{r7}
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	200002c0 	.word	0x200002c0

08008d64 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b089      	sub	sp, #36	; 0x24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008d70:	2300      	movs	r3, #0
 8008d72:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008d74:	2308      	movs	r3, #8
 8008d76:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d80:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d8a:	69b9      	ldr	r1, [r7, #24]
 8008d8c:	fb01 f202 	mul.w	r2, r1, r2
 8008d90:	1a9b      	subs	r3, r3, r2
 8008d92:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d302      	bcc.n	8008da2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008d9c:	23ce      	movs	r3, #206	; 0xce
 8008d9e:	77fb      	strb	r3, [r7, #31]
 8008da0:	e010      	b.n	8008dc4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	4413      	add	r3, r2
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	b25a      	sxtb	r2, r3
 8008dac:	2101      	movs	r1, #1
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	fa01 f303 	lsl.w	r3, r1, r3
 8008db4:	b25b      	sxtb	r3, r3
 8008db6:	4313      	orrs	r3, r2
 8008db8:	b259      	sxtb	r1, r3
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	b2ca      	uxtb	r2, r1
 8008dc2:	701a      	strb	r2, [r3, #0]

	return status;
 8008dc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3724      	adds	r7, #36	; 0x24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bc80      	pop	{r7}
 8008dd0:	4770      	bx	lr

08008dd2 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8008ddc:	2306      	movs	r3, #6
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	21b0      	movs	r1, #176	; 0xb0
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f002 ffb8 	bl	800bd58 <VL53L0X_WriteMulti>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8008dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8008e02:	2306      	movs	r3, #6
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	21b0      	movs	r1, #176	; 0xb0
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f002 ffd5 	bl	800bdb8 <VL53L0X_ReadMulti>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8008e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b08c      	sub	sp, #48	; 0x30
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	603b      	str	r3, [r7, #0]
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e36:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8008e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e3a:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e40:	e02b      	b.n	8008e9a <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008e42:	f107 031c 	add.w	r3, r7, #28
 8008e46:	6a3a      	ldr	r2, [r7, #32]
 8008e48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7ff ff12 	bl	8008c74 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e56:	d103      	bne.n	8008e60 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008e58:	23ce      	movs	r3, #206	; 0xce
 8008e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008e5e:	e020      	b.n	8008ea2 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	461a      	mov	r2, r3
 8008e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e66:	4413      	add	r3, r2
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7ff ff61 	bl	8008d30 <is_aperture>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	461a      	mov	r2, r3
 8008e72:	7afb      	ldrb	r3, [r7, #11]
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d003      	beq.n	8008e80 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008e78:	23ce      	movs	r3, #206	; 0xce
 8008e7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008e7e:	e010      	b.n	8008ea2 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008e84:	6a3a      	ldr	r2, [r7, #32]
 8008e86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e88:	6838      	ldr	r0, [r7, #0]
 8008e8a:	f7ff ff6b 	bl	8008d64 <enable_spad_bit>
		currentSpad++;
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	3301      	adds	r3, #1
 8008e92:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	3301      	adds	r3, #1
 8008e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d3cf      	bcc.n	8008e42 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ea4:	6a3a      	ldr	r2, [r7, #32]
 8008ea6:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008ea8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d106      	bne.n	8008ebe <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff ff8d 	bl	8008dd2 <set_ref_spad_map>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8008ebe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d121      	bne.n	8008f0a <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008ec6:	f107 0314 	add.w	r3, r7, #20
 8008eca:	4619      	mov	r1, r3
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f7ff ff93 	bl	8008df8 <get_ref_spad_map>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8008edc:	e011      	b.n	8008f02 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	4413      	add	r3, r2
 8008ee4:	781a      	ldrb	r2, [r3, #0]
 8008ee6:	f107 0114 	add.w	r1, r7, #20
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	440b      	add	r3, r1
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d003      	beq.n	8008efc <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008ef4:	23ce      	movs	r3, #206	; 0xce
 8008ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8008efa:	e006      	b.n	8008f0a <enable_ref_spads+0xec>
			}
			i++;
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	3301      	adds	r3, #1
 8008f00:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8008f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d3e9      	bcc.n	8008ede <enable_ref_spads+0xc0>
		}
	}
	return status;
 8008f0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3730      	adds	r7, #48	; 0x30
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b08a      	sub	sp, #40	; 0x28
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008f20:	2300      	movs	r3, #0
 8008f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008f32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008f36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d107      	bne.n	8008f4e <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008f3e:	22c0      	movs	r2, #192	; 0xc0
 8008f40:	2101      	movs	r1, #1
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f002 ffd8 	bl	800bef8 <VL53L0X_WrByte>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8008f4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d108      	bne.n	8008f68 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008f56:	f107 0308 	add.w	r3, r7, #8
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff fc49 	bl	80087f4 <VL53L0X_PerformSingleRangingMeasurement>
 8008f62:	4603      	mov	r3, r0
 8008f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8008f68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d107      	bne.n	8008f80 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008f70:	2201      	movs	r2, #1
 8008f72:	21ff      	movs	r1, #255	; 0xff
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f002 ffbf 	bl	800bef8 <VL53L0X_WrByte>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8008f80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d107      	bne.n	8008f98 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	21b6      	movs	r1, #182	; 0xb6
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f002 ff3f 	bl	800be10 <VL53L0X_RdWord>
 8008f92:	4603      	mov	r3, r0
 8008f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8008f98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d107      	bne.n	8008fb0 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	21ff      	movs	r1, #255	; 0xff
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f002 ffa7 	bl	800bef8 <VL53L0X_WrByte>
 8008faa:	4603      	mov	r3, r0
 8008fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8008fb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d112      	bne.n	8008fde <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008fb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f002 ff99 	bl	800bef8 <VL53L0X_WrByte>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8008fcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d104      	bne.n	8008fde <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008fda:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8008fde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3728      	adds	r7, #40	; 0x28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8008fea:	b590      	push	{r4, r7, lr}
 8008fec:	b09d      	sub	sp, #116	; 0x74
 8008fee:	af06      	add	r7, sp, #24
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8008ffc:	23b4      	movs	r3, #180	; 0xb4
 8008ffe:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8009002:	2303      	movs	r3, #3
 8009004:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8009006:	232c      	movs	r3, #44	; 0x2c
 8009008:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8009016:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800901a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8009024:	2306      	movs	r3, #6
 8009026:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 800904e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8009050:	2300      	movs	r3, #0
 8009052:	64bb      	str	r3, [r7, #72]	; 0x48
 8009054:	e009      	b.n	800906a <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800905a:	4413      	add	r3, r2
 800905c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009060:	2200      	movs	r2, #0
 8009062:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009066:	3301      	adds	r3, #1
 8009068:	64bb      	str	r3, [r7, #72]	; 0x48
 800906a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	429a      	cmp	r2, r3
 8009070:	d3f1      	bcc.n	8009056 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009072:	2201      	movs	r2, #1
 8009074:	21ff      	movs	r1, #255	; 0xff
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f002 ff3e 	bl	800bef8 <VL53L0X_WrByte>
 800907c:	4603      	mov	r3, r0
 800907e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009082:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009086:	2b00      	cmp	r3, #0
 8009088:	d107      	bne.n	800909a <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800908a:	2200      	movs	r2, #0
 800908c:	214f      	movs	r1, #79	; 0x4f
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f002 ff32 	bl	800bef8 <VL53L0X_WrByte>
 8009094:	4603      	mov	r3, r0
 8009096:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800909a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d107      	bne.n	80090b2 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80090a2:	222c      	movs	r2, #44	; 0x2c
 80090a4:	214e      	movs	r1, #78	; 0x4e
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f002 ff26 	bl	800bef8 <VL53L0X_WrByte>
 80090ac:	4603      	mov	r3, r0
 80090ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80090b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d107      	bne.n	80090ca <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80090ba:	2200      	movs	r2, #0
 80090bc:	21ff      	movs	r1, #255	; 0xff
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f002 ff1a 	bl	800bef8 <VL53L0X_WrByte>
 80090c4:	4603      	mov	r3, r0
 80090c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80090ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d109      	bne.n	80090e6 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80090d2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80090d6:	461a      	mov	r2, r3
 80090d8:	21b6      	movs	r1, #182	; 0xb6
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f002 ff0c 	bl	800bef8 <VL53L0X_WrByte>
 80090e0:	4603      	mov	r3, r0
 80090e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80090e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d107      	bne.n	80090fe <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80090ee:	2200      	movs	r2, #0
 80090f0:	2180      	movs	r1, #128	; 0x80
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f002 ff00 	bl	800bef8 <VL53L0X_WrByte>
 80090f8:	4603      	mov	r3, r0
 80090fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80090fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10a      	bne.n	800911c <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8009106:	f107 0210 	add.w	r2, r7, #16
 800910a:	f107 0111 	add.w	r1, r7, #17
 800910e:	2300      	movs	r3, #0
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 fbbb 	bl	800988c <VL53L0X_perform_ref_calibration>
 8009116:	4603      	mov	r3, r0
 8009118:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800911c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009120:	2b00      	cmp	r3, #0
 8009122:	d121      	bne.n	8009168 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8009124:	2300      	movs	r3, #0
 8009126:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8009128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800912a:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8009130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009132:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8009140:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009144:	f107 0218 	add.w	r2, r7, #24
 8009148:	9204      	str	r2, [sp, #16]
 800914a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800914c:	9203      	str	r2, [sp, #12]
 800914e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009150:	9202      	str	r2, [sp, #8]
 8009152:	9301      	str	r3, [sp, #4]
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	4623      	mov	r3, r4
 800915a:	4602      	mov	r2, r0
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f7ff fe5e 	bl	8008e1e <enable_ref_spads>
 8009162:	4603      	mov	r3, r0
 8009164:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009168:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800916c:	2b00      	cmp	r3, #0
 800916e:	d174      	bne.n	800925a <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8009174:	f107 0312 	add.w	r3, r7, #18
 8009178:	4619      	mov	r1, r3
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f7ff fecb 	bl	8008f16 <perform_ref_signal_measurement>
 8009180:	4603      	mov	r3, r0
 8009182:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009186:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800918a:	2b00      	cmp	r3, #0
 800918c:	d161      	bne.n	8009252 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800918e:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009190:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009192:	429a      	cmp	r2, r3
 8009194:	d25d      	bcs.n	8009252 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8009196:	2300      	movs	r3, #0
 8009198:	64bb      	str	r3, [r7, #72]	; 0x48
 800919a:	e009      	b.n	80091b0 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80091a6:	2200      	movs	r2, #0
 80091a8:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80091aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091ac:	3301      	adds	r3, #1
 80091ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80091b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d3f1      	bcc.n	800919c <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80091b8:	e002      	b.n	80091c0 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80091ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091bc:	3301      	adds	r3, #1
 80091be:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80091c0:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80091c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091c6:	4413      	add	r3, r2
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7ff fdb1 	bl	8008d30 <is_aperture>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d103      	bne.n	80091dc <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80091d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	429a      	cmp	r2, r3
 80091da:	d3ee      	bcc.n	80091ba <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80091dc:	2301      	movs	r3, #1
 80091de:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80091e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091e2:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80091f0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80091f4:	f107 0218 	add.w	r2, r7, #24
 80091f8:	9204      	str	r2, [sp, #16]
 80091fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091fc:	9203      	str	r2, [sp, #12]
 80091fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009200:	9202      	str	r2, [sp, #8]
 8009202:	9301      	str	r3, [sp, #4]
 8009204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	4623      	mov	r3, r4
 800920a:	4602      	mov	r2, r0
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f7ff fe06 	bl	8008e1e <enable_ref_spads>
 8009212:	4603      	mov	r3, r0
 8009214:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009218:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800921c:	2b00      	cmp	r3, #0
 800921e:	d11b      	bne.n	8009258 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8009224:	f107 0312 	add.w	r3, r7, #18
 8009228:	4619      	mov	r1, r3
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f7ff fe73 	bl	8008f16 <perform_ref_signal_measurement>
 8009230:	4603      	mov	r3, r0
 8009232:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009236:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10c      	bne.n	8009258 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800923e:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009240:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009242:	429a      	cmp	r2, r3
 8009244:	d208      	bcs.n	8009258 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009246:	2301      	movs	r3, #1
 8009248:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800924c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924e:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009250:	e002      	b.n	8009258 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009252:	2300      	movs	r3, #0
 8009254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009256:	e000      	b.n	800925a <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009258:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800925a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800925e:	2b00      	cmp	r3, #0
 8009260:	f040 80af 	bne.w	80093c2 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8009264:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009266:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009268:	429a      	cmp	r2, r3
 800926a:	f240 80aa 	bls.w	80093c2 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800926e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009270:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8009274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009276:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800927e:	f107 031c 	add.w	r3, r7, #28
 8009282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009284:	4618      	mov	r0, r3
 8009286:	f002 ff39 	bl	800c0fc <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800928a:	8a7b      	ldrh	r3, [r7, #18]
 800928c:	461a      	mov	r2, r3
 800928e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	bfb8      	it	lt
 8009296:	425b      	neglt	r3, r3
 8009298:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80092a0:	e086      	b.n	80093b0 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80092a8:	f107 0314 	add.w	r3, r7, #20
 80092ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092b0:	f7ff fce0 	bl	8008c74 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ba:	d103      	bne.n	80092c4 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80092bc:	23ce      	movs	r3, #206	; 0xce
 80092be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80092c2:	e07e      	b.n	80093c2 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80092c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c6:	3301      	adds	r3, #1
 80092c8:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80092ca:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	4413      	add	r3, r2
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7ff fd2c 	bl	8008d30 <is_aperture>
 80092d8:	4603      	mov	r3, r0
 80092da:	461a      	mov	r2, r3
 80092dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092de:	4293      	cmp	r3, r2
 80092e0:	d003      	beq.n	80092ea <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80092e2:	23ce      	movs	r3, #206	; 0xce
 80092e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80092e8:	e06b      	b.n	80093c2 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80092f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7ff fd33 	bl	8008d64 <enable_spad_bit>
 80092fe:	4603      	mov	r3, r0
 8009300:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009304:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10c      	bne.n	8009326 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800930c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800930e:	3301      	adds	r3, #1
 8009310:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8009318:	4619      	mov	r1, r3
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f7ff fd59 	bl	8008dd2 <set_ref_spad_map>
 8009320:	4603      	mov	r3, r0
 8009322:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009326:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800932a:	2b00      	cmp	r3, #0
 800932c:	d146      	bne.n	80093bc <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800932e:	f107 0312 	add.w	r3, r7, #18
 8009332:	4619      	mov	r1, r3
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f7ff fdee 	bl	8008f16 <perform_ref_signal_measurement>
 800933a:	4603      	mov	r3, r0
 800933c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009340:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009344:	2b00      	cmp	r3, #0
 8009346:	d13b      	bne.n	80093c0 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8009348:	8a7b      	ldrh	r3, [r7, #18]
 800934a:	461a      	mov	r2, r3
 800934c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	2b00      	cmp	r3, #0
 8009352:	bfb8      	it	lt
 8009354:	425b      	neglt	r3, r3
 8009356:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8009358:	8a7b      	ldrh	r3, [r7, #18]
 800935a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800935c:	429a      	cmp	r2, r3
 800935e:	d21c      	bcs.n	800939a <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8009360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009364:	429a      	cmp	r2, r3
 8009366:	d914      	bls.n	8009392 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8009368:	f107 031c 	add.w	r3, r7, #28
 800936c:	4619      	mov	r1, r3
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f7ff fd2f 	bl	8008dd2 <set_ref_spad_map>
 8009374:	4603      	mov	r3, r0
 8009376:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8009380:	f107 011c 	add.w	r1, r7, #28
 8009384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009386:	4618      	mov	r0, r3
 8009388:	f002 feb8 	bl	800c0fc <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800938c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938e:	3b01      	subs	r3, #1
 8009390:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8009392:	2301      	movs	r3, #1
 8009394:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009398:	e00a      	b.n	80093b0 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800939a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939c:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80093a4:	f107 031c 	add.w	r3, r7, #28
 80093a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093aa:	4618      	mov	r0, r3
 80093ac:	f002 fea6 	bl	800c0fc <memcpy>
		while (!complete) {
 80093b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f43f af74 	beq.w	80092a2 <VL53L0X_perform_ref_spad_management+0x2b8>
 80093ba:	e002      	b.n	80093c2 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80093bc:	bf00      	nop
 80093be:	e000      	b.n	80093c2 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80093c0:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80093c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d115      	bne.n	80093f6 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093ce:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80093d6:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	781a      	ldrb	r2, [r3, #0]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80093f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	375c      	adds	r7, #92	; 0x5c
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd90      	pop	{r4, r7, pc}

08009402 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8009402:	b590      	push	{r4, r7, lr}
 8009404:	b093      	sub	sp, #76	; 0x4c
 8009406:	af06      	add	r7, sp, #24
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	60b9      	str	r1, [r7, #8]
 800940c:	4613      	mov	r3, r2
 800940e:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009410:	2300      	movs	r3, #0
 8009412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800941a:	23b4      	movs	r3, #180	; 0xb4
 800941c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8009420:	2306      	movs	r3, #6
 8009422:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8009424:	232c      	movs	r3, #44	; 0x2c
 8009426:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009428:	2201      	movs	r2, #1
 800942a:	21ff      	movs	r1, #255	; 0xff
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f002 fd63 	bl	800bef8 <VL53L0X_WrByte>
 8009432:	4603      	mov	r3, r0
 8009434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009438:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800943c:	2b00      	cmp	r3, #0
 800943e:	d107      	bne.n	8009450 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8009440:	2200      	movs	r2, #0
 8009442:	214f      	movs	r1, #79	; 0x4f
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f002 fd57 	bl	800bef8 <VL53L0X_WrByte>
 800944a:	4603      	mov	r3, r0
 800944c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009450:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009454:	2b00      	cmp	r3, #0
 8009456:	d107      	bne.n	8009468 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8009458:	222c      	movs	r2, #44	; 0x2c
 800945a:	214e      	movs	r1, #78	; 0x4e
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f002 fd4b 	bl	800bef8 <VL53L0X_WrByte>
 8009462:	4603      	mov	r3, r0
 8009464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009468:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800946c:	2b00      	cmp	r3, #0
 800946e:	d107      	bne.n	8009480 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009470:	2200      	movs	r2, #0
 8009472:	21ff      	movs	r1, #255	; 0xff
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f002 fd3f 	bl	800bef8 <VL53L0X_WrByte>
 800947a:	4603      	mov	r3, r0
 800947c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009480:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009484:	2b00      	cmp	r3, #0
 8009486:	d109      	bne.n	800949c <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8009488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800948c:	461a      	mov	r2, r3
 800948e:	21b6      	movs	r1, #182	; 0xb6
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f002 fd31 	bl	800bef8 <VL53L0X_WrByte>
 8009496:	4603      	mov	r3, r0
 8009498:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800949c:	2300      	movs	r3, #0
 800949e:	627b      	str	r3, [r7, #36]	; 0x24
 80094a0:	e009      	b.n	80094b6 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	4413      	add	r3, r2
 80094a8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80094ac:	2200      	movs	r2, #0
 80094ae:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	3301      	adds	r3, #1
 80094b4:	627b      	str	r3, [r7, #36]	; 0x24
 80094b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d3f1      	bcc.n	80094a2 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80094be:	79fb      	ldrb	r3, [r7, #7]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d011      	beq.n	80094e8 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80094c4:	e002      	b.n	80094cc <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80094c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c8:	3301      	adds	r3, #1
 80094ca:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80094cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80094d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d2:	4413      	add	r3, r2
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7ff fc2b 	bl	8008d30 <is_aperture>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d103      	bne.n	80094e8 <VL53L0X_set_reference_spads+0xe6>
 80094e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d3ee      	bcc.n	80094c6 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80094f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094f8:	79f9      	ldrb	r1, [r7, #7]
 80094fa:	f107 0214 	add.w	r2, r7, #20
 80094fe:	9204      	str	r2, [sp, #16]
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	9203      	str	r2, [sp, #12]
 8009504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009506:	9202      	str	r2, [sp, #8]
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	4623      	mov	r3, r4
 8009510:	4602      	mov	r2, r0
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f7ff fc83 	bl	8008e1e <enable_ref_spads>
 8009518:	4603      	mov	r3, r0
 800951a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800951e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10c      	bne.n	8009540 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	b2da      	uxtb	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	79fa      	ldrb	r2, [r7, #7]
 800953c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8009540:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009544:	4618      	mov	r0, r3
 8009546:	3734      	adds	r7, #52	; 0x34
 8009548:	46bd      	mov	sp, r7
 800954a:	bd90      	pop	{r4, r7, pc}

0800954c <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009558:	2300      	movs	r3, #0
 800955a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800955c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10a      	bne.n	800957a <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	f043 0301 	orr.w	r3, r3, #1
 800956a:	b2db      	uxtb	r3, r3
 800956c:	461a      	mov	r2, r3
 800956e:	2100      	movs	r1, #0
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f002 fcc1 	bl	800bef8 <VL53L0X_WrByte>
 8009576:	4603      	mov	r3, r0
 8009578:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800957a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d104      	bne.n	800958c <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f9bf 	bl	8009906 <VL53L0X_measurement_poll_for_completion>
 8009588:	4603      	mov	r3, r0
 800958a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800958c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d105      	bne.n	80095a0 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009594:	2100      	movs	r1, #0
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7ff fab6 	bl	8008b08 <VL53L0X_ClearInterruptMask>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80095a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d106      	bne.n	80095b6 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80095a8:	2200      	movs	r2, #0
 80095aa:	2100      	movs	r1, #0
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f002 fca3 	bl	800bef8 <VL53L0X_WrByte>
 80095b2:	4603      	mov	r3, r0
 80095b4:	73fb      	strb	r3, [r7, #15]

	return Status;
 80095b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b084      	sub	sp, #16
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	4608      	mov	r0, r1
 80095cc:	4611      	mov	r1, r2
 80095ce:	461a      	mov	r2, r3
 80095d0:	4603      	mov	r3, r0
 80095d2:	70fb      	strb	r3, [r7, #3]
 80095d4:	460b      	mov	r3, r1
 80095d6:	70bb      	strb	r3, [r7, #2]
 80095d8:	4613      	mov	r3, r2
 80095da:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80095e4:	2201      	movs	r2, #1
 80095e6:	21ff      	movs	r1, #255	; 0xff
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f002 fc85 	bl	800bef8 <VL53L0X_WrByte>
 80095ee:	4603      	mov	r3, r0
 80095f0:	461a      	mov	r2, r3
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80095f8:	2200      	movs	r2, #0
 80095fa:	2100      	movs	r1, #0
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f002 fc7b 	bl	800bef8 <VL53L0X_WrByte>
 8009602:	4603      	mov	r3, r0
 8009604:	461a      	mov	r2, r3
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	4313      	orrs	r3, r2
 800960a:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800960c:	2200      	movs	r2, #0
 800960e:	21ff      	movs	r1, #255	; 0xff
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f002 fc71 	bl	800bef8 <VL53L0X_WrByte>
 8009616:	4603      	mov	r3, r0
 8009618:	461a      	mov	r2, r3
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	4313      	orrs	r3, r2
 800961e:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d01e      	beq.n	8009664 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8009626:	f897 3020 	ldrb.w	r3, [r7, #32]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d009      	beq.n	8009642 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800962e:	69ba      	ldr	r2, [r7, #24]
 8009630:	21cb      	movs	r1, #203	; 0xcb
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f002 fb65 	bl	800bd02 <VL53L0X_RdByte>
 8009638:	4603      	mov	r3, r0
 800963a:	461a      	mov	r2, r3
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	4313      	orrs	r3, r2
 8009640:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009642:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009646:	2b00      	cmp	r3, #0
 8009648:	d02a      	beq.n	80096a0 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800964a:	f107 030e 	add.w	r3, r7, #14
 800964e:	461a      	mov	r2, r3
 8009650:	21ee      	movs	r1, #238	; 0xee
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f002 fb55 	bl	800bd02 <VL53L0X_RdByte>
 8009658:	4603      	mov	r3, r0
 800965a:	461a      	mov	r2, r3
 800965c:	7bfb      	ldrb	r3, [r7, #15]
 800965e:	4313      	orrs	r3, r2
 8009660:	73fb      	strb	r3, [r7, #15]
 8009662:	e01d      	b.n	80096a0 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8009664:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00a      	beq.n	8009682 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800966c:	78bb      	ldrb	r3, [r7, #2]
 800966e:	461a      	mov	r2, r3
 8009670:	21cb      	movs	r1, #203	; 0xcb
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f002 fc40 	bl	800bef8 <VL53L0X_WrByte>
 8009678:	4603      	mov	r3, r0
 800967a:	461a      	mov	r2, r3
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	4313      	orrs	r3, r2
 8009680:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009682:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00a      	beq.n	80096a0 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800968a:	787b      	ldrb	r3, [r7, #1]
 800968c:	2280      	movs	r2, #128	; 0x80
 800968e:	21ee      	movs	r1, #238	; 0xee
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f002 fc7f 	bl	800bf94 <VL53L0X_UpdateByte>
 8009696:	4603      	mov	r3, r0
 8009698:	461a      	mov	r2, r3
 800969a:	7bfb      	ldrb	r3, [r7, #15]
 800969c:	4313      	orrs	r3, r2
 800969e:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80096a0:	2201      	movs	r2, #1
 80096a2:	21ff      	movs	r1, #255	; 0xff
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f002 fc27 	bl	800bef8 <VL53L0X_WrByte>
 80096aa:	4603      	mov	r3, r0
 80096ac:	461a      	mov	r2, r3
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80096b4:	2201      	movs	r2, #1
 80096b6:	2100      	movs	r1, #0
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f002 fc1d 	bl	800bef8 <VL53L0X_WrByte>
 80096be:	4603      	mov	r3, r0
 80096c0:	461a      	mov	r2, r3
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80096c8:	2200      	movs	r2, #0
 80096ca:	21ff      	movs	r1, #255	; 0xff
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f002 fc13 	bl	800bef8 <VL53L0X_WrByte>
 80096d2:	4603      	mov	r3, r0
 80096d4:	461a      	mov	r2, r3
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	4313      	orrs	r3, r2
 80096da:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	f023 0310 	bic.w	r3, r3, #16
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	701a      	strb	r2, [r3, #0]

	return Status;
 80096e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b08a      	sub	sp, #40	; 0x28
 80096f8:	af04      	add	r7, sp, #16
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4611      	mov	r1, r2
 8009700:	461a      	mov	r2, r3
 8009702:	460b      	mov	r3, r1
 8009704:	71fb      	strb	r3, [r7, #7]
 8009706:	4613      	mov	r3, r2
 8009708:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800970a:	2300      	movs	r3, #0
 800970c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800971e:	79bb      	ldrb	r3, [r7, #6]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d003      	beq.n	800972c <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800972a:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800972c:	2201      	movs	r2, #1
 800972e:	2101      	movs	r1, #1
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f002 fbe1 	bl	800bef8 <VL53L0X_WrByte>
 8009736:	4603      	mov	r3, r0
 8009738:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800973a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d105      	bne.n	800974e <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009742:	2140      	movs	r1, #64	; 0x40
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f7ff ff01 	bl	800954c <VL53L0X_perform_single_ref_calibration>
 800974a:	4603      	mov	r3, r0
 800974c:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800974e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d115      	bne.n	8009782 <VL53L0X_perform_vhv_calibration+0x8e>
 8009756:	79fb      	ldrb	r3, [r7, #7]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d112      	bne.n	8009782 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800975c:	7d39      	ldrb	r1, [r7, #20]
 800975e:	7d7a      	ldrb	r2, [r7, #21]
 8009760:	2300      	movs	r3, #0
 8009762:	9303      	str	r3, [sp, #12]
 8009764:	2301      	movs	r3, #1
 8009766:	9302      	str	r3, [sp, #8]
 8009768:	f107 0313 	add.w	r3, r7, #19
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	460b      	mov	r3, r1
 8009774:	2101      	movs	r1, #1
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f7ff ff23 	bl	80095c2 <VL53L0X_ref_calibration_io>
 800977c:	4603      	mov	r3, r0
 800977e:	75fb      	strb	r3, [r7, #23]
 8009780:	e002      	b.n	8009788 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	2200      	movs	r2, #0
 8009786:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009788:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d112      	bne.n	80097b6 <VL53L0X_perform_vhv_calibration+0xc2>
 8009790:	79bb      	ldrb	r3, [r7, #6]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00f      	beq.n	80097b6 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009796:	7dbb      	ldrb	r3, [r7, #22]
 8009798:	461a      	mov	r2, r3
 800979a:	2101      	movs	r1, #1
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f002 fbab 	bl	800bef8 <VL53L0X_WrByte>
 80097a2:	4603      	mov	r3, r0
 80097a4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80097a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d103      	bne.n	80097b6 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	7dba      	ldrb	r2, [r7, #22]
 80097b2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80097b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3718      	adds	r7, #24
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b08a      	sub	sp, #40	; 0x28
 80097c6:	af04      	add	r7, sp, #16
 80097c8:	60f8      	str	r0, [r7, #12]
 80097ca:	60b9      	str	r1, [r7, #8]
 80097cc:	4611      	mov	r1, r2
 80097ce:	461a      	mov	r2, r3
 80097d0:	460b      	mov	r3, r1
 80097d2:	71fb      	strb	r3, [r7, #7]
 80097d4:	4613      	mov	r3, r2
 80097d6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097d8:	2300      	movs	r3, #0
 80097da:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80097e0:	2300      	movs	r3, #0
 80097e2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80097e8:	79bb      	ldrb	r3, [r7, #6]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80097f4:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80097f6:	2202      	movs	r2, #2
 80097f8:	2101      	movs	r1, #1
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f002 fb7c 	bl	800bef8 <VL53L0X_WrByte>
 8009800:	4603      	mov	r3, r0
 8009802:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009804:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d105      	bne.n	8009818 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800980c:	2100      	movs	r1, #0
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f7ff fe9c 	bl	800954c <VL53L0X_perform_single_ref_calibration>
 8009814:	4603      	mov	r3, r0
 8009816:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d115      	bne.n	800984c <VL53L0X_perform_phase_calibration+0x8a>
 8009820:	79fb      	ldrb	r3, [r7, #7]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d112      	bne.n	800984c <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009826:	7d39      	ldrb	r1, [r7, #20]
 8009828:	7d7a      	ldrb	r2, [r7, #21]
 800982a:	2301      	movs	r3, #1
 800982c:	9303      	str	r3, [sp, #12]
 800982e:	2300      	movs	r3, #0
 8009830:	9302      	str	r3, [sp, #8]
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	9301      	str	r3, [sp, #4]
 8009836:	f107 0313 	add.w	r3, r7, #19
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	460b      	mov	r3, r1
 800983e:	2101      	movs	r1, #1
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f7ff febe 	bl	80095c2 <VL53L0X_ref_calibration_io>
 8009846:	4603      	mov	r3, r0
 8009848:	75fb      	strb	r3, [r7, #23]
 800984a:	e002      	b.n	8009852 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	2200      	movs	r2, #0
 8009850:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d112      	bne.n	8009880 <VL53L0X_perform_phase_calibration+0xbe>
 800985a:	79bb      	ldrb	r3, [r7, #6]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00f      	beq.n	8009880 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009860:	7dbb      	ldrb	r3, [r7, #22]
 8009862:	461a      	mov	r2, r3
 8009864:	2101      	movs	r1, #1
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f002 fb46 	bl	800bef8 <VL53L0X_WrByte>
 800986c:	4603      	mov	r3, r0
 800986e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009870:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d103      	bne.n	8009880 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	7dba      	ldrb	r2, [r7, #22]
 800987c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009880:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
 8009898:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800989a:	2300      	movs	r3, #0
 800989c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800989e:	2300      	movs	r3, #0
 80098a0:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80098a8:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80098aa:	78fa      	ldrb	r2, [r7, #3]
 80098ac:	2300      	movs	r3, #0
 80098ae:	68b9      	ldr	r1, [r7, #8]
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f7ff ff1f 	bl	80096f4 <VL53L0X_perform_vhv_calibration>
 80098b6:	4603      	mov	r3, r0
 80098b8:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80098ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d107      	bne.n	80098d2 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80098c2:	78fa      	ldrb	r2, [r7, #3]
 80098c4:	2300      	movs	r3, #0
 80098c6:	6879      	ldr	r1, [r7, #4]
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f7ff ff7a 	bl	80097c2 <VL53L0X_perform_phase_calibration>
 80098ce:	4603      	mov	r3, r0
 80098d0:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80098d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10f      	bne.n	80098fa <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80098da:	7dbb      	ldrb	r3, [r7, #22]
 80098dc:	461a      	mov	r2, r3
 80098de:	2101      	movs	r1, #1
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f002 fb09 	bl	800bef8 <VL53L0X_WrByte>
 80098e6:	4603      	mov	r3, r0
 80098e8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80098ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d103      	bne.n	80098fa <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	7dba      	ldrb	r2, [r7, #22]
 80098f6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80098fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b086      	sub	sp, #24
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800990e:	2300      	movs	r3, #0
 8009910:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800991a:	f107 030f 	add.w	r3, r7, #15
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7fe fe03 	bl	800852c <VL53L0X_GetMeasurementDataReady>
 8009926:	4603      	mov	r3, r0
 8009928:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800992a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10f      	bne.n	8009952 <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009932:	7bfb      	ldrb	r3, [r7, #15]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d00e      	beq.n	8009956 <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	3301      	adds	r3, #1
 800993c:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	2bc7      	cmp	r3, #199	; 0xc7
 8009942:	d902      	bls.n	800994a <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009944:	23f9      	movs	r3, #249	; 0xf9
 8009946:	75fb      	strb	r3, [r7, #23]
			break;
 8009948:	e006      	b.n	8009958 <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f002 fb56 	bl	800bffc <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009950:	e7e3      	b.n	800991a <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8009952:	bf00      	nop
 8009954:	e000      	b.n	8009958 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 8009956:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8009958:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	3301      	adds	r3, #1
 8009976:	b2db      	uxtb	r3, r3
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800997c:	7bfb      	ldrb	r3, [r7, #15]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	bc80      	pop	{r7}
 8009986:	4770      	bx	lr

08009988 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009990:	2300      	movs	r3, #0
 8009992:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009998:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800999a:	e002      	b.n	80099a2 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	089b      	lsrs	r3, r3, #2
 80099a0:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d8f8      	bhi.n	800999c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80099aa:	e017      	b.n	80099dc <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	4413      	add	r3, r2
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d30b      	bcc.n	80099d0 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	4413      	add	r3, r2
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	085b      	lsrs	r3, r3, #1
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	4413      	add	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]
 80099ce:	e002      	b.n	80099d6 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	085b      	lsrs	r3, r3, #1
 80099d4:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	089b      	lsrs	r3, r3, #2
 80099da:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1e4      	bne.n	80099ac <VL53L0X_isqrt+0x24>
	}

	return res;
 80099e2:	68fb      	ldr	r3, [r7, #12]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bc80      	pop	{r7}
 80099ec:	4770      	bx	lr

080099ee <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b086      	sub	sp, #24
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099f6:	2300      	movs	r3, #0
 80099f8:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80099fa:	2200      	movs	r2, #0
 80099fc:	2183      	movs	r1, #131	; 0x83
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f002 fa7a 	bl	800bef8 <VL53L0X_WrByte>
 8009a04:	4603      	mov	r3, r0
 8009a06:	461a      	mov	r2, r3
 8009a08:	7dfb      	ldrb	r3, [r7, #23]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8009a0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d11c      	bne.n	8009a50 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009a1a:	f107 030f 	add.w	r3, r7, #15
 8009a1e:	461a      	mov	r2, r3
 8009a20:	2183      	movs	r1, #131	; 0x83
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f002 f96d 	bl	800bd02 <VL53L0X_RdByte>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d109      	bne.n	8009a46 <VL53L0X_device_read_strobe+0x58>
 8009a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d105      	bne.n	8009a46 <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	2bc7      	cmp	r3, #199	; 0xc7
 8009a44:	d9e9      	bls.n	8009a1a <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	2bc7      	cmp	r3, #199	; 0xc7
 8009a4a:	d901      	bls.n	8009a50 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009a4c:	23f9      	movs	r3, #249	; 0xf9
 8009a4e:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8009a50:	2201      	movs	r2, #1
 8009a52:	2183      	movs	r1, #131	; 0x83
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f002 fa4f 	bl	800bef8 <VL53L0X_WrByte>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	7dfb      	ldrb	r3, [r7, #23]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8009a64:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3718      	adds	r7, #24
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b098      	sub	sp, #96	; 0x60
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8009a92:	2300      	movs	r3, #0
 8009a94:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009aa0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8009aa4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8009ab8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8009abc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ac0:	2b07      	cmp	r3, #7
 8009ac2:	f000 8408 	beq.w	800a2d6 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	2180      	movs	r1, #128	; 0x80
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f002 fa14 	bl	800bef8 <VL53L0X_WrByte>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009ade:	2201      	movs	r2, #1
 8009ae0:	21ff      	movs	r1, #255	; 0xff
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f002 fa08 	bl	800bef8 <VL53L0X_WrByte>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	461a      	mov	r2, r3
 8009aec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009af0:	4313      	orrs	r3, r2
 8009af2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009af6:	2200      	movs	r2, #0
 8009af8:	2100      	movs	r1, #0
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f002 f9fc 	bl	800bef8 <VL53L0X_WrByte>
 8009b00:	4603      	mov	r3, r0
 8009b02:	461a      	mov	r2, r3
 8009b04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009b0e:	2206      	movs	r2, #6
 8009b10:	21ff      	movs	r1, #255	; 0xff
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f002 f9f0 	bl	800bef8 <VL53L0X_WrByte>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b20:	4313      	orrs	r3, r2
 8009b22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009b26:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	2183      	movs	r1, #131	; 0x83
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f002 f8e7 	bl	800bd02 <VL53L0X_RdByte>
 8009b34:	4603      	mov	r3, r0
 8009b36:	461a      	mov	r2, r3
 8009b38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8009b42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b46:	f043 0304 	orr.w	r3, r3, #4
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	2183      	movs	r1, #131	; 0x83
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f002 f9d1 	bl	800bef8 <VL53L0X_WrByte>
 8009b56:	4603      	mov	r3, r0
 8009b58:	461a      	mov	r2, r3
 8009b5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8009b64:	2207      	movs	r2, #7
 8009b66:	21ff      	movs	r1, #255	; 0xff
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f002 f9c5 	bl	800bef8 <VL53L0X_WrByte>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	461a      	mov	r2, r3
 8009b72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b76:	4313      	orrs	r3, r2
 8009b78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	2181      	movs	r1, #129	; 0x81
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f002 f9b9 	bl	800bef8 <VL53L0X_WrByte>
 8009b86:	4603      	mov	r3, r0
 8009b88:	461a      	mov	r2, r3
 8009b8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f002 fa31 	bl	800bffc <VL53L0X_PollingDelay>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009ba8:	2201      	movs	r2, #1
 8009baa:	2180      	movs	r1, #128	; 0x80
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f002 f9a3 	bl	800bef8 <VL53L0X_WrByte>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f000 8098 	beq.w	8009cfc <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009bcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009bd0:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f040 8091 	bne.w	8009cfc <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009bda:	226b      	movs	r2, #107	; 0x6b
 8009bdc:	2194      	movs	r1, #148	; 0x94
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f002 f98a 	bl	800bef8 <VL53L0X_WrByte>
 8009be4:	4603      	mov	r3, r0
 8009be6:	461a      	mov	r2, r3
 8009be8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bec:	4313      	orrs	r3, r2
 8009bee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7ff fefb 	bl	80099ee <VL53L0X_device_read_strobe>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c00:	4313      	orrs	r3, r2
 8009c02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009c06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	2190      	movs	r1, #144	; 0x90
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f002 f936 	bl	800be80 <VL53L0X_RdDWord>
 8009c14:	4603      	mov	r3, r0
 8009c16:	461a      	mov	r2, r3
 8009c18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c24:	0a1b      	lsrs	r3, r3, #8
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c2c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	0bdb      	lsrs	r3, r3, #15
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009c3e:	2224      	movs	r2, #36	; 0x24
 8009c40:	2194      	movs	r1, #148	; 0x94
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f002 f958 	bl	800bef8 <VL53L0X_WrByte>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c50:	4313      	orrs	r3, r2
 8009c52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7ff fec9 	bl	80099ee <VL53L0X_device_read_strobe>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c64:	4313      	orrs	r3, r2
 8009c66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009c6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c6e:	461a      	mov	r2, r3
 8009c70:	2190      	movs	r1, #144	; 0x90
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f002 f904 	bl	800be80 <VL53L0X_RdDWord>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c80:	4313      	orrs	r3, r2
 8009c82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	0e1b      	lsrs	r3, r3, #24
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	0c1b      	lsrs	r3, r3, #16
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c98:	0a1b      	lsrs	r3, r3, #8
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8009ca4:	2225      	movs	r2, #37	; 0x25
 8009ca6:	2194      	movs	r1, #148	; 0x94
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f002 f925 	bl	800bef8 <VL53L0X_WrByte>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff fe96 	bl	80099ee <VL53L0X_device_read_strobe>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009cd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	2190      	movs	r1, #144	; 0x90
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f002 f8d1 	bl	800be80 <VL53L0X_RdDWord>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	0e1b      	lsrs	r3, r3, #24
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf6:	0c1b      	lsrs	r3, r3, #16
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8009cfc:	78fb      	ldrb	r3, [r7, #3]
 8009cfe:	f003 0302 	and.w	r3, r3, #2
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 8189 	beq.w	800a01a <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009d08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d0c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f040 8182 	bne.w	800a01a <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009d16:	2202      	movs	r2, #2
 8009d18:	2194      	movs	r1, #148	; 0x94
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f002 f8ec 	bl	800bef8 <VL53L0X_WrByte>
 8009d20:	4603      	mov	r3, r0
 8009d22:	461a      	mov	r2, r3
 8009d24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7ff fe5d 	bl	80099ee <VL53L0X_device_read_strobe>
 8009d34:	4603      	mov	r3, r0
 8009d36:	461a      	mov	r2, r3
 8009d38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009d42:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8009d46:	461a      	mov	r2, r3
 8009d48:	2190      	movs	r1, #144	; 0x90
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f001 ffd9 	bl	800bd02 <VL53L0X_RdByte>
 8009d50:	4603      	mov	r3, r0
 8009d52:	461a      	mov	r2, r3
 8009d54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009d5e:	227b      	movs	r2, #123	; 0x7b
 8009d60:	2194      	movs	r1, #148	; 0x94
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f002 f8c8 	bl	800bef8 <VL53L0X_WrByte>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d70:	4313      	orrs	r3, r2
 8009d72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff fe39 	bl	80099ee <VL53L0X_device_read_strobe>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	461a      	mov	r2, r3
 8009d80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d84:	4313      	orrs	r3, r2
 8009d86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009d8a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009d8e:	461a      	mov	r2, r3
 8009d90:	2190      	movs	r1, #144	; 0x90
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f001 ffb5 	bl	800bd02 <VL53L0X_RdByte>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009da0:	4313      	orrs	r3, r2
 8009da2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009da6:	2277      	movs	r2, #119	; 0x77
 8009da8:	2194      	movs	r1, #148	; 0x94
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f002 f8a4 	bl	800bef8 <VL53L0X_WrByte>
 8009db0:	4603      	mov	r3, r0
 8009db2:	461a      	mov	r2, r3
 8009db4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009db8:	4313      	orrs	r3, r2
 8009dba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7ff fe15 	bl	80099ee <VL53L0X_device_read_strobe>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009dd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	2190      	movs	r1, #144	; 0x90
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f002 f850 	bl	800be80 <VL53L0X_RdDWord>
 8009de0:	4603      	mov	r3, r0
 8009de2:	461a      	mov	r2, r3
 8009de4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009de8:	4313      	orrs	r3, r2
 8009dea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	0e5b      	lsrs	r3, r3, #25
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	0c9b      	lsrs	r3, r3, #18
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	0adb      	lsrs	r3, r3, #11
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8009e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1a:	091b      	lsrs	r3, r3, #4
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8009e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	00db      	lsls	r3, r3, #3
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8009e38:	2278      	movs	r2, #120	; 0x78
 8009e3a:	2194      	movs	r1, #148	; 0x94
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f002 f85b 	bl	800bef8 <VL53L0X_WrByte>
 8009e42:	4603      	mov	r3, r0
 8009e44:	461a      	mov	r2, r3
 8009e46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff fdcc 	bl	80099ee <VL53L0X_device_read_strobe>
 8009e56:	4603      	mov	r3, r0
 8009e58:	461a      	mov	r2, r3
 8009e5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009e64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e68:	461a      	mov	r2, r3
 8009e6a:	2190      	movs	r1, #144	; 0x90
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f002 f807 	bl	800be80 <VL53L0X_RdDWord>
 8009e72:	4603      	mov	r3, r0
 8009e74:	461a      	mov	r2, r3
 8009e76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8009e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e82:	0f5b      	lsrs	r3, r3, #29
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e8a:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8009e8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e90:	4413      	add	r3, r2
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	0d9b      	lsrs	r3, r3, #22
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	0bdb      	lsrs	r3, r3, #15
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb4:	0a1b      	lsrs	r3, r3, #8
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec2:	085b      	lsrs	r3, r3, #1
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	019b      	lsls	r3, r3, #6
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8009ee0:	2279      	movs	r2, #121	; 0x79
 8009ee2:	2194      	movs	r1, #148	; 0x94
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f002 f807 	bl	800bef8 <VL53L0X_WrByte>
 8009eea:	4603      	mov	r3, r0
 8009eec:	461a      	mov	r2, r3
 8009eee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7ff fd78 	bl	80099ee <VL53L0X_device_read_strobe>
 8009efe:	4603      	mov	r3, r0
 8009f00:	461a      	mov	r2, r3
 8009f02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f06:	4313      	orrs	r3, r2
 8009f08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009f0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f10:	461a      	mov	r2, r3
 8009f12:	2190      	movs	r1, #144	; 0x90
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f001 ffb3 	bl	800be80 <VL53L0X_RdDWord>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f22:	4313      	orrs	r3, r2
 8009f24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8009f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2a:	0e9b      	lsrs	r3, r3, #26
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f32:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009f34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f38:	4413      	add	r3, r2
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	0cdb      	lsrs	r3, r3, #19
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4e:	0b1b      	lsrs	r3, r3, #12
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	095b      	lsrs	r3, r3, #5
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009f7a:	227a      	movs	r2, #122	; 0x7a
 8009f7c:	2194      	movs	r1, #148	; 0x94
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f001 ffba 	bl	800bef8 <VL53L0X_WrByte>
 8009f84:	4603      	mov	r3, r0
 8009f86:	461a      	mov	r2, r3
 8009f88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7ff fd2b 	bl	80099ee <VL53L0X_device_read_strobe>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009fa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009faa:	461a      	mov	r2, r3
 8009fac:	2190      	movs	r1, #144	; 0x90
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 ff66 	bl	800be80 <VL53L0X_RdDWord>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	0f9b      	lsrs	r3, r3, #30
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fcc:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8009fce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fd2:	4413      	add	r3, r2
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	0ddb      	lsrs	r3, r3, #23
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe8:	0c1b      	lsrs	r3, r3, #16
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff6:	0a5b      	lsrs	r3, r3, #9
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	089b      	lsrs	r3, r3, #2
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800a014:	2300      	movs	r3, #0
 800a016:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800a01a:	78fb      	ldrb	r3, [r7, #3]
 800a01c:	f003 0304 	and.w	r3, r3, #4
 800a020:	2b00      	cmp	r3, #0
 800a022:	f000 80f1 	beq.w	800a208 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a026:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a02a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f040 80ea 	bne.w	800a208 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a034:	227b      	movs	r2, #123	; 0x7b
 800a036:	2194      	movs	r1, #148	; 0x94
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f001 ff5d 	bl	800bef8 <VL53L0X_WrByte>
 800a03e:	4603      	mov	r3, r0
 800a040:	461a      	mov	r2, r3
 800a042:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a046:	4313      	orrs	r3, r2
 800a048:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f7ff fcce 	bl	80099ee <VL53L0X_device_read_strobe>
 800a052:	4603      	mov	r3, r0
 800a054:	461a      	mov	r2, r3
 800a056:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a05a:	4313      	orrs	r3, r2
 800a05c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800a060:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a064:	461a      	mov	r2, r3
 800a066:	2190      	movs	r1, #144	; 0x90
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 ff09 	bl	800be80 <VL53L0X_RdDWord>
 800a06e:	4603      	mov	r3, r0
 800a070:	461a      	mov	r2, r3
 800a072:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a076:	4313      	orrs	r3, r2
 800a078:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800a07c:	227c      	movs	r2, #124	; 0x7c
 800a07e:	2194      	movs	r1, #148	; 0x94
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f001 ff39 	bl	800bef8 <VL53L0X_WrByte>
 800a086:	4603      	mov	r3, r0
 800a088:	461a      	mov	r2, r3
 800a08a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a08e:	4313      	orrs	r3, r2
 800a090:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7ff fcaa 	bl	80099ee <VL53L0X_device_read_strobe>
 800a09a:	4603      	mov	r3, r0
 800a09c:	461a      	mov	r2, r3
 800a09e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800a0a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	2190      	movs	r1, #144	; 0x90
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f001 fee5 	bl	800be80 <VL53L0X_RdDWord>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800a0c4:	2273      	movs	r2, #115	; 0x73
 800a0c6:	2194      	movs	r1, #148	; 0x94
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f001 ff15 	bl	800bef8 <VL53L0X_WrByte>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7ff fc86 	bl	80099ee <VL53L0X_device_read_strobe>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a0f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	2190      	movs	r1, #144	; 0x90
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 fec1 	bl	800be80 <VL53L0X_RdDWord>
 800a0fe:	4603      	mov	r3, r0
 800a100:	461a      	mov	r2, r3
 800a102:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a106:	4313      	orrs	r3, r2
 800a108:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 800a10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10e:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800a110:	b29b      	uxth	r3, r3
 800a112:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800a114:	2274      	movs	r2, #116	; 0x74
 800a116:	2194      	movs	r1, #148	; 0x94
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f001 feed 	bl	800bef8 <VL53L0X_WrByte>
 800a11e:	4603      	mov	r3, r0
 800a120:	461a      	mov	r2, r3
 800a122:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a126:	4313      	orrs	r3, r2
 800a128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff fc5e 	bl	80099ee <VL53L0X_device_read_strobe>
 800a132:	4603      	mov	r3, r0
 800a134:	461a      	mov	r2, r3
 800a136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a13a:	4313      	orrs	r3, r2
 800a13c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a140:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a144:	461a      	mov	r2, r3
 800a146:	2190      	movs	r1, #144	; 0x90
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f001 fe99 	bl	800be80 <VL53L0X_RdDWord>
 800a14e:	4603      	mov	r3, r0
 800a150:	461a      	mov	r2, r3
 800a152:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a156:	4313      	orrs	r3, r2
 800a158:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800a160:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a162:	4313      	orrs	r3, r2
 800a164:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800a166:	2275      	movs	r2, #117	; 0x75
 800a168:	2194      	movs	r1, #148	; 0x94
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f001 fec4 	bl	800bef8 <VL53L0X_WrByte>
 800a170:	4603      	mov	r3, r0
 800a172:	461a      	mov	r2, r3
 800a174:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a178:	4313      	orrs	r3, r2
 800a17a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff fc35 	bl	80099ee <VL53L0X_device_read_strobe>
 800a184:	4603      	mov	r3, r0
 800a186:	461a      	mov	r2, r3
 800a188:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a18c:	4313      	orrs	r3, r2
 800a18e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a192:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a196:	461a      	mov	r2, r3
 800a198:	2190      	movs	r1, #144	; 0x90
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f001 fe70 	bl	800be80 <VL53L0X_RdDWord>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b0:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800a1b6:	2276      	movs	r2, #118	; 0x76
 800a1b8:	2194      	movs	r1, #148	; 0x94
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f001 fe9c 	bl	800bef8 <VL53L0X_WrByte>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7ff fc0d 	bl	80099ee <VL53L0X_device_read_strobe>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a1e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	2190      	movs	r1, #144	; 0x90
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f001 fe48 	bl	800be80 <VL53L0X_RdDWord>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800a202:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a204:	4313      	orrs	r3, r2
 800a206:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800a208:	2200      	movs	r2, #0
 800a20a:	2181      	movs	r1, #129	; 0x81
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f001 fe73 	bl	800bef8 <VL53L0X_WrByte>
 800a212:	4603      	mov	r3, r0
 800a214:	461a      	mov	r2, r3
 800a216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a21a:	4313      	orrs	r3, r2
 800a21c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a220:	2206      	movs	r2, #6
 800a222:	21ff      	movs	r1, #255	; 0xff
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f001 fe67 	bl	800bef8 <VL53L0X_WrByte>
 800a22a:	4603      	mov	r3, r0
 800a22c:	461a      	mov	r2, r3
 800a22e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a232:	4313      	orrs	r3, r2
 800a234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a238:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a23c:	461a      	mov	r2, r3
 800a23e:	2183      	movs	r1, #131	; 0x83
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f001 fd5e 	bl	800bd02 <VL53L0X_RdByte>
 800a246:	4603      	mov	r3, r0
 800a248:	461a      	mov	r2, r3
 800a24a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a24e:	4313      	orrs	r3, r2
 800a250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800a254:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a258:	f023 0304 	bic.w	r3, r3, #4
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	461a      	mov	r2, r3
 800a260:	2183      	movs	r1, #131	; 0x83
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f001 fe48 	bl	800bef8 <VL53L0X_WrByte>
 800a268:	4603      	mov	r3, r0
 800a26a:	461a      	mov	r2, r3
 800a26c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a270:	4313      	orrs	r3, r2
 800a272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a276:	2201      	movs	r2, #1
 800a278:	21ff      	movs	r1, #255	; 0xff
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f001 fe3c 	bl	800bef8 <VL53L0X_WrByte>
 800a280:	4603      	mov	r3, r0
 800a282:	461a      	mov	r2, r3
 800a284:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a288:	4313      	orrs	r3, r2
 800a28a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a28e:	2201      	movs	r2, #1
 800a290:	2100      	movs	r1, #0
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f001 fe30 	bl	800bef8 <VL53L0X_WrByte>
 800a298:	4603      	mov	r3, r0
 800a29a:	461a      	mov	r2, r3
 800a29c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	21ff      	movs	r1, #255	; 0xff
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f001 fe24 	bl	800bef8 <VL53L0X_WrByte>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a2be:	2200      	movs	r2, #0
 800a2c0:	2180      	movs	r1, #128	; 0x80
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f001 fe18 	bl	800bef8 <VL53L0X_WrByte>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a2d6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f040 808f 	bne.w	800a3fe <VL53L0X_get_info_from_device+0x98e>
 800a2e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a2e4:	2b07      	cmp	r3, #7
 800a2e6:	f000 808a 	beq.w	800a3fe <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800a2ea:	78fb      	ldrb	r3, [r7, #3]
 800a2ec:	f003 0301 	and.w	r3, r3, #1
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d024      	beq.n	800a33e <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a2f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a2f8:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d11e      	bne.n	800a33e <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800a306:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800a310:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a314:	2300      	movs	r3, #0
 800a316:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a318:	e00e      	b.n	800a338 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800a31a:	f107 0208 	add.w	r2, r7, #8
 800a31e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a320:	4413      	add	r3, r2
 800a322:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a328:	4413      	add	r3, r2
 800a32a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a32e:	460a      	mov	r2, r1
 800a330:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a334:	3301      	adds	r3, #1
 800a336:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a33a:	2b05      	cmp	r3, #5
 800a33c:	dded      	ble.n	800a31a <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800a33e:	78fb      	ldrb	r3, [r7, #3]
 800a340:	f003 0302 	and.w	r3, r3, #2
 800a344:	2b00      	cmp	r3, #0
 800a346:	d018      	beq.n	800a37a <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a348:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a34c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a350:	2b00      	cmp	r3, #0
 800a352:	d112      	bne.n	800a37a <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a354:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a35e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	33f3      	adds	r3, #243	; 0xf3
 800a36c:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800a36e:	f107 0310 	add.w	r3, r7, #16
 800a372:	4619      	mov	r1, r3
 800a374:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a376:	f001 fed7 	bl	800c128 <strcpy>

		}

		if (((option & 4) == 4) &&
 800a37a:	78fb      	ldrb	r3, [r7, #3]
 800a37c:	f003 0304 	and.w	r3, r3, #4
 800a380:	2b00      	cmp	r3, #0
 800a382:	d030      	beq.n	800a3e6 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a384:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a388:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d12a      	bne.n	800a3e6 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800a3a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3a2:	025b      	lsls	r3, r3, #9
 800a3a4:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3aa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800a3b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d011      	beq.n	800a3de <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800a3ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a3bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800a3c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a3c8:	fb02 f303 	mul.w	r3, r2, r3
 800a3cc:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800a3ce:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800a3d2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a3d6:	425b      	negs	r3, r3
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800a3de:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800a3e6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a3ea:	78fb      	ldrb	r3, [r7, #3]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800a3f4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a3fe:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800a402:	4618      	mov	r0, r3
 800a404:	3760      	adds	r7, #96	; 0x60
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800a40a:	b480      	push	{r7}
 800a40c:	b087      	sub	sp, #28
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800a416:	f240 6277 	movw	r2, #1655	; 0x677
 800a41a:	f04f 0300 	mov.w	r3, #0
 800a41e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800a422:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800a426:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800a428:	78fb      	ldrb	r3, [r7, #3]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	fb02 f303 	mul.w	r3, r2, r3
 800a436:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800a438:	68bb      	ldr	r3, [r7, #8]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	371c      	adds	r7, #28
 800a43e:	46bd      	mov	sp, r7
 800a440:	bc80      	pop	{r7}
 800a442:	4770      	bx	lr

0800a444 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800a44c:	2300      	movs	r3, #0
 800a44e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800a454:	2300      	movs	r3, #0
 800a456:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d017      	beq.n	800a48e <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	3b01      	subs	r3, #1
 800a462:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a464:	e005      	b.n	800a472 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	085b      	lsrs	r3, r3, #1
 800a46a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a46c:	89fb      	ldrh	r3, [r7, #14]
 800a46e:	3301      	adds	r3, #1
 800a470:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1f4      	bne.n	800a466 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a47c:	89fb      	ldrh	r3, [r7, #14]
 800a47e:	021b      	lsls	r3, r3, #8
 800a480:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	b29b      	uxth	r3, r3
 800a486:	b2db      	uxtb	r3, r3
 800a488:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a48a:	4413      	add	r3, r2
 800a48c:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a48e:	8afb      	ldrh	r3, [r7, #22]

}
 800a490:	4618      	mov	r0, r3
 800a492:	371c      	adds	r7, #28
 800a494:	46bd      	mov	sp, r7
 800a496:	bc80      	pop	{r7}
 800a498:	4770      	bx	lr

0800a49a <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b085      	sub	sp, #20
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a4a8:	88fb      	ldrh	r3, [r7, #6]
 800a4aa:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a4ac:	88fa      	ldrh	r2, [r7, #6]
 800a4ae:	0a12      	lsrs	r2, r2, #8
 800a4b0:	b292      	uxth	r2, r2
 800a4b2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bc80      	pop	{r7}
 800a4c2:	4770      	bx	lr

0800a4c4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b088      	sub	sp, #32
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a4d6:	79fb      	ldrb	r3, [r7, #7]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7ff ff95 	bl	800a40a <VL53L0X_calc_macro_period_ps>
 800a4e0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a4e8:	4a0a      	ldr	r2, [pc, #40]	; (800a514 <VL53L0X_calc_timeout_mclks+0x50>)
 800a4ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ee:	099b      	lsrs	r3, r3, #6
 800a4f0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a4f8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	085b      	lsrs	r3, r3, #1
 800a500:	441a      	add	r2, r3
	timeout_period_mclks =
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	fbb2 f3f3 	udiv	r3, r2, r3
 800a508:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800a50a:	69fb      	ldr	r3, [r7, #28]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3720      	adds	r7, #32
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	10624dd3 	.word	0x10624dd3

0800a518 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	807b      	strh	r3, [r7, #2]
 800a524:	4613      	mov	r3, r2
 800a526:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a52c:	787b      	ldrb	r3, [r7, #1]
 800a52e:	4619      	mov	r1, r3
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f7ff ff6a 	bl	800a40a <VL53L0X_calc_macro_period_ps>
 800a536:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a53e:	4a0b      	ldr	r2, [pc, #44]	; (800a56c <VL53L0X_calc_timeout_us+0x54>)
 800a540:	fba2 2303 	umull	r2, r3, r2, r3
 800a544:	099b      	lsrs	r3, r3, #6
 800a546:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 800a548:	887b      	ldrh	r3, [r7, #2]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / 1000;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	085b      	lsrs	r3, r3, #1
 800a554:	4413      	add	r3, r2
	actual_timeout_period_us =
 800a556:	4a05      	ldr	r2, [pc, #20]	; (800a56c <VL53L0X_calc_timeout_us+0x54>)
 800a558:	fba2 2303 	umull	r2, r3, r2, r3
 800a55c:	099b      	lsrs	r3, r3, #6
 800a55e:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a560:	697b      	ldr	r3, [r7, #20]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	10624dd3 	.word	0x10624dd3

0800a570 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b08c      	sub	sp, #48	; 0x30
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	460b      	mov	r3, r1
 800a57a:	607a      	str	r2, [r7, #4]
 800a57c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a57e:	2300      	movs	r3, #0
 800a580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a584:	2300      	movs	r3, #0
 800a586:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a58a:	2300      	movs	r3, #0
 800a58c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a58e:	2300      	movs	r3, #0
 800a590:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a592:	2300      	movs	r3, #0
 800a594:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a596:	7afb      	ldrb	r3, [r7, #11]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <get_sequence_step_timeout+0x38>
 800a59c:	7afb      	ldrb	r3, [r7, #11]
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d002      	beq.n	800a5a8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a5a2:	7afb      	ldrb	r3, [r7, #11]
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d128      	bne.n	800a5fa <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a5a8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7fd fa90 	bl	8007ad6 <VL53L0X_GetVcselPulsePeriod>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a5bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d109      	bne.n	800a5d8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a5c4:	f107 0320 	add.w	r3, r7, #32
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	2146      	movs	r1, #70	; 0x46
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f001 fb98 	bl	800bd02 <VL53L0X_RdByte>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a5d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7ff ff5b 	bl	800a49a <VL53L0X_decode_timeout>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a5e8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a5ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f7ff ff91 	bl	800a518 <VL53L0X_calc_timeout_us>
 800a5f6:	62b8      	str	r0, [r7, #40]	; 0x28
 800a5f8:	e092      	b.n	800a720 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a5fa:	7afb      	ldrb	r3, [r7, #11]
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d135      	bne.n	800a66c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a600:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a604:	461a      	mov	r2, r3
 800a606:	2100      	movs	r1, #0
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f7fd fa64 	bl	8007ad6 <VL53L0X_GetVcselPulsePeriod>
 800a60e:	4603      	mov	r3, r0
 800a610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a614:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f040 8081 	bne.w	800a720 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a61e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a622:	461a      	mov	r2, r3
 800a624:	2100      	movs	r1, #0
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f7fd fa55 	bl	8007ad6 <VL53L0X_GetVcselPulsePeriod>
 800a62c:	4603      	mov	r3, r0
 800a62e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800a632:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a636:	2b00      	cmp	r3, #0
 800a638:	d109      	bne.n	800a64e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800a63a:	f107 031e 	add.w	r3, r7, #30
 800a63e:	461a      	mov	r2, r3
 800a640:	2151      	movs	r1, #81	; 0x51
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f001 fbe4 	bl	800be10 <VL53L0X_RdWord>
 800a648:	4603      	mov	r3, r0
 800a64a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a64e:	8bfb      	ldrh	r3, [r7, #30]
 800a650:	4618      	mov	r0, r3
 800a652:	f7ff ff22 	bl	800a49a <VL53L0X_decode_timeout>
 800a656:	4603      	mov	r3, r0
 800a658:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a65a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a65e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a660:	4619      	mov	r1, r3
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f7ff ff58 	bl	800a518 <VL53L0X_calc_timeout_us>
 800a668:	62b8      	str	r0, [r7, #40]	; 0x28
 800a66a:	e059      	b.n	800a720 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a66c:	7afb      	ldrb	r3, [r7, #11]
 800a66e:	2b04      	cmp	r3, #4
 800a670:	d156      	bne.n	800a720 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a672:	f107 0314 	add.w	r3, r7, #20
 800a676:	4619      	mov	r1, r3
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f7fd fb37 	bl	8007cec <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a682:	7dfb      	ldrb	r3, [r7, #23]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d01d      	beq.n	800a6c4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a688:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a68c:	461a      	mov	r2, r3
 800a68e:	2100      	movs	r1, #0
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f7fd fa20 	bl	8007ad6 <VL53L0X_GetVcselPulsePeriod>
 800a696:	4603      	mov	r3, r0
 800a698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800a69c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10f      	bne.n	800a6c4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800a6a4:	f107 031e 	add.w	r3, r7, #30
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	2151      	movs	r1, #81	; 0x51
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f001 fbaf 	bl	800be10 <VL53L0X_RdWord>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a6b8:	8bfb      	ldrh	r3, [r7, #30]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7ff feed 	bl	800a49a <VL53L0X_decode_timeout>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a6c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d109      	bne.n	800a6e0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a6cc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7fd f9fe 	bl	8007ad6 <VL53L0X_GetVcselPulsePeriod>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a6e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10f      	bne.n	800a708 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800a6e8:	f107 031c 	add.w	r3, r7, #28
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	2171      	movs	r1, #113	; 0x71
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f001 fb8d 	bl	800be10 <VL53L0X_RdWord>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a6fc:	8bbb      	ldrh	r3, [r7, #28]
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7ff fecb 	bl	800a49a <VL53L0X_decode_timeout>
 800a704:	4603      	mov	r3, r0
 800a706:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a708:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a70a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a710:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a716:	4619      	mov	r1, r3
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f7ff fefd 	bl	800a518 <VL53L0X_calc_timeout_us>
 800a71e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a724:	601a      	str	r2, [r3, #0]

	return Status;
 800a726:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3730      	adds	r7, #48	; 0x30
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b08a      	sub	sp, #40	; 0x28
 800a736:	af00      	add	r7, sp, #0
 800a738:	60f8      	str	r0, [r7, #12]
 800a73a:	460b      	mov	r3, r1
 800a73c:	607a      	str	r2, [r7, #4]
 800a73e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a740:	2300      	movs	r3, #0
 800a742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a746:	7afb      	ldrb	r3, [r7, #11]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d005      	beq.n	800a758 <set_sequence_step_timeout+0x26>
 800a74c:	7afb      	ldrb	r3, [r7, #11]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d002      	beq.n	800a758 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a752:	7afb      	ldrb	r3, [r7, #11]
 800a754:	2b02      	cmp	r3, #2
 800a756:	d138      	bne.n	800a7ca <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a758:	f107 031d 	add.w	r3, r7, #29
 800a75c:	461a      	mov	r2, r3
 800a75e:	2100      	movs	r1, #0
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f7fd f9b8 	bl	8007ad6 <VL53L0X_GetVcselPulsePeriod>
 800a766:	4603      	mov	r3, r0
 800a768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a76c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a770:	2b00      	cmp	r3, #0
 800a772:	d11a      	bne.n	800a7aa <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a774:	7f7b      	ldrb	r3, [r7, #29]
 800a776:	461a      	mov	r2, r3
 800a778:	6879      	ldr	r1, [r7, #4]
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f7ff fea2 	bl	800a4c4 <VL53L0X_calc_timeout_mclks>
 800a780:	4603      	mov	r3, r0
 800a782:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a784:	8bfb      	ldrh	r3, [r7, #30]
 800a786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a78a:	d903      	bls.n	800a794 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a78c:	23ff      	movs	r3, #255	; 0xff
 800a78e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a792:	e004      	b.n	800a79e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a794:	8bfb      	ldrh	r3, [r7, #30]
 800a796:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a798:	3b01      	subs	r3, #1
 800a79a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a79e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a7aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f040 80ad 	bne.w	800a90e <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 800a7b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	2146      	movs	r1, #70	; 0x46
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f001 fb9b 	bl	800bef8 <VL53L0X_WrByte>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a7c8:	e0a1      	b.n	800a90e <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a7ca:	7afb      	ldrb	r3, [r7, #11]
 800a7cc:	2b03      	cmp	r3, #3
 800a7ce:	d135      	bne.n	800a83c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800a7d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d11b      	bne.n	800a810 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a7d8:	f107 031d 	add.w	r3, r7, #29
 800a7dc:	461a      	mov	r2, r3
 800a7de:	2100      	movs	r1, #0
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f7fd f978 	bl	8007ad6 <VL53L0X_GetVcselPulsePeriod>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a7ec:	7f7b      	ldrb	r3, [r7, #29]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	6879      	ldr	r1, [r7, #4]
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f7ff fe66 	bl	800a4c4 <VL53L0X_calc_timeout_mclks>
 800a7f8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a7fa:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a7fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7ff fe20 	bl	800a444 <VL53L0X_encode_timeout>
 800a804:	4603      	mov	r3, r0
 800a806:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a808:	8b7a      	ldrh	r2, [r7, #26]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a810:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a814:	2b00      	cmp	r3, #0
 800a816:	d108      	bne.n	800a82a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a818:	8b7b      	ldrh	r3, [r7, #26]
 800a81a:	461a      	mov	r2, r3
 800a81c:	2151      	movs	r1, #81	; 0x51
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f001 fb8e 	bl	800bf40 <VL53L0X_WrWord>
 800a824:	4603      	mov	r3, r0
 800a826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a82a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d16d      	bne.n	800a90e <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a83a:	e068      	b.n	800a90e <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a83c:	7afb      	ldrb	r3, [r7, #11]
 800a83e:	2b04      	cmp	r3, #4
 800a840:	d162      	bne.n	800a908 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a842:	f107 0314 	add.w	r3, r7, #20
 800a846:	4619      	mov	r1, r3
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f7fd fa4f 	bl	8007cec <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a852:	7dfb      	ldrb	r3, [r7, #23]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d01d      	beq.n	800a894 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a858:	f107 031d 	add.w	r3, r7, #29
 800a85c:	461a      	mov	r2, r3
 800a85e:	2100      	movs	r1, #0
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f7fd f938 	bl	8007ad6 <VL53L0X_GetVcselPulsePeriod>
 800a866:	4603      	mov	r3, r0
 800a868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800a86c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10f      	bne.n	800a894 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a874:	f107 031a 	add.w	r3, r7, #26
 800a878:	461a      	mov	r2, r3
 800a87a:	2151      	movs	r1, #81	; 0x51
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f001 fac7 	bl	800be10 <VL53L0X_RdWord>
 800a882:	4603      	mov	r3, r0
 800a884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a888:	8b7b      	ldrh	r3, [r7, #26]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7ff fe05 	bl	800a49a <VL53L0X_decode_timeout>
 800a890:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a892:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a894:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d109      	bne.n	800a8b0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a89c:	f107 031d 	add.w	r3, r7, #29
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	2101      	movs	r1, #1
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f7fd f916 	bl	8007ad6 <VL53L0X_GetVcselPulsePeriod>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a8b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d12a      	bne.n	800a90e <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a8b8:	7f7b      	ldrb	r3, [r7, #29]
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	6879      	ldr	r1, [r7, #4]
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f7ff fe00 	bl	800a4c4 <VL53L0X_calc_timeout_mclks>
 800a8c4:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 800a8c6:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a8c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a8ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8cc:	4413      	add	r3, r2
 800a8ce:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800a8d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff fdb6 	bl	800a444 <VL53L0X_encode_timeout>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 800a8dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d108      	bne.n	800a8f6 <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a8e4:	8c3b      	ldrh	r3, [r7, #32]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	2171      	movs	r1, #113	; 0x71
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f001 fb28 	bl	800bf40 <VL53L0X_WrWord>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a8f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d107      	bne.n	800a90e <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a906:	e002      	b.n	800a90e <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a908:	23fc      	movs	r3, #252	; 0xfc
 800a90a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a90e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a912:	4618      	mov	r0, r3
 800a914:	3728      	adds	r7, #40	; 0x28
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b086      	sub	sp, #24
 800a91e:	af00      	add	r7, sp, #0
 800a920:	60f8      	str	r0, [r7, #12]
 800a922:	460b      	mov	r3, r1
 800a924:	607a      	str	r2, [r7, #4]
 800a926:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a928:	2300      	movs	r3, #0
 800a92a:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a92c:	7afb      	ldrb	r3, [r7, #11]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d002      	beq.n	800a938 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a932:	2b01      	cmp	r3, #1
 800a934:	d00a      	beq.n	800a94c <VL53L0X_get_vcsel_pulse_period+0x32>
 800a936:	e013      	b.n	800a960 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a938:	f107 0316 	add.w	r3, r7, #22
 800a93c:	461a      	mov	r2, r3
 800a93e:	2150      	movs	r1, #80	; 0x50
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f001 f9de 	bl	800bd02 <VL53L0X_RdByte>
 800a946:	4603      	mov	r3, r0
 800a948:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a94a:	e00b      	b.n	800a964 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a94c:	f107 0316 	add.w	r3, r7, #22
 800a950:	461a      	mov	r2, r3
 800a952:	2170      	movs	r1, #112	; 0x70
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f001 f9d4 	bl	800bd02 <VL53L0X_RdByte>
 800a95a:	4603      	mov	r3, r0
 800a95c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a95e:	e001      	b.n	800a964 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a960:	23fc      	movs	r3, #252	; 0xfc
 800a962:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a964:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d107      	bne.n	800a97c <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a96c:	7dbb      	ldrb	r3, [r7, #22]
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fe fff8 	bl	8009964 <VL53L0X_decode_vcsel_period>
 800a974:	4603      	mov	r3, r0
 800a976:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	701a      	strb	r2, [r3, #0]

	return Status;
 800a97c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3718      	adds	r7, #24
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b092      	sub	sp, #72	; 0x48
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a992:	2300      	movs	r3, #0
 800a994:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a998:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a99c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 800a99e:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800a9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800a9a4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a9a8:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a9aa:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a9ae:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800a9b0:	f240 234e 	movw	r3, #590	; 0x24e
 800a9b4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800a9b6:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a9bc:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a9c0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a9c2:	f240 2326 	movw	r3, #550	; 0x226
 800a9c6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800a9cc:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a9d0:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d205      	bcs.n	800a9ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a9de:	23fc      	movs	r3, #252	; 0xfc
 800a9e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800a9e4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a9e8:	e0aa      	b.n	800ab40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800a9ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ee:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a9f6:	f107 0314 	add.w	r3, r7, #20
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f7fd f975 	bl	8007cec <VL53L0X_GetSequenceStepEnables>
 800aa02:	4603      	mov	r3, r0
 800aa04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800aa08:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d15b      	bne.n	800aac8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800aa10:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d105      	bne.n	800aa22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800aa16:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d102      	bne.n	800aa22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800aa1c:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d052      	beq.n	800aac8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800aa22:	f107 0310 	add.w	r3, r7, #16
 800aa26:	461a      	mov	r2, r3
 800aa28:	2102      	movs	r1, #2
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7ff fda0 	bl	800a570 <get_sequence_step_timeout>
 800aa30:	4603      	mov	r3, r0
 800aa32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800aa36:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800aa3e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aa42:	e07d      	b.n	800ab40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800aa44:	7d3b      	ldrb	r3, [r7, #20]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00f      	beq.n	800aa6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800aa4a:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800aa4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa4e:	4413      	add	r3, r2
 800aa50:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800aa52:	69fa      	ldr	r2, [r7, #28]
 800aa54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d204      	bcs.n	800aa64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800aa5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	643b      	str	r3, [r7, #64]	; 0x40
 800aa62:	e002      	b.n	800aa6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa64:	23fc      	movs	r3, #252	; 0xfc
 800aa66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800aa6a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d002      	beq.n	800aa78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800aa72:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aa76:	e063      	b.n	800ab40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800aa78:	7dbb      	ldrb	r3, [r7, #22]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d011      	beq.n	800aaa2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800aa7e:	693a      	ldr	r2, [r7, #16]
 800aa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa82:	4413      	add	r3, r2
 800aa84:	005b      	lsls	r3, r3, #1
 800aa86:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800aa88:	69fa      	ldr	r2, [r7, #28]
 800aa8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d204      	bcs.n	800aa9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800aa90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	643b      	str	r3, [r7, #64]	; 0x40
 800aa98:	e016      	b.n	800aac8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa9a:	23fc      	movs	r3, #252	; 0xfc
 800aa9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800aaa0:	e012      	b.n	800aac8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800aaa2:	7d7b      	ldrb	r3, [r7, #21]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00f      	beq.n	800aac8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaac:	4413      	add	r3, r2
 800aaae:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800aab0:	69fa      	ldr	r2, [r7, #28]
 800aab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d204      	bcs.n	800aac2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800aab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	1ad3      	subs	r3, r2, r3
 800aabe:	643b      	str	r3, [r7, #64]	; 0x40
 800aac0:	e002      	b.n	800aac8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aac2:	23fc      	movs	r3, #252	; 0xfc
 800aac4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800aac8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d002      	beq.n	800aad6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800aad0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aad4:	e034      	b.n	800ab40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d019      	beq.n	800ab10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800aadc:	f107 030c 	add.w	r3, r7, #12
 800aae0:	461a      	mov	r2, r3
 800aae2:	2103      	movs	r1, #3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f7ff fd43 	bl	800a570 <get_sequence_step_timeout>
 800aaea:	4603      	mov	r3, r0
 800aaec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaf4:	4413      	add	r3, r2
 800aaf6:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800aaf8:	69fa      	ldr	r2, [r7, #28]
 800aafa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d204      	bcs.n	800ab0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800ab00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	643b      	str	r3, [r7, #64]	; 0x40
 800ab08:	e002      	b.n	800ab10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab0a:	23fc      	movs	r3, #252	; 0xfc
 800ab0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800ab10:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d111      	bne.n	800ab3c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800ab18:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00e      	beq.n	800ab3c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800ab1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 800ab26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab28:	2104      	movs	r1, #4
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7ff fe01 	bl	800a732 <set_sequence_step_timeout>
 800ab30:	4603      	mov	r3, r0
 800ab32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800ab3c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3748      	adds	r7, #72	; 0x48
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b090      	sub	sp, #64	; 0x40
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab52:	2300      	movs	r3, #0
 800ab54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ab58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ab5c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ab5e:	f240 7376 	movw	r3, #1910	; 0x776
 800ab62:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800ab64:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ab68:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ab6a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ab6e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ab70:	f240 234e 	movw	r3, #590	; 0x24e
 800ab74:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800ab76:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ab7a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ab7c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ab80:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ab82:	f240 2326 	movw	r3, #550	; 0x226
 800ab86:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ab8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab90:	441a      	add	r2, r3
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ab96:	f107 0318 	add.w	r3, r7, #24
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7fd f8a5 	bl	8007cec <VL53L0X_GetSequenceStepEnables>
 800aba2:	4603      	mov	r3, r0
 800aba4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800aba8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800abb0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800abb4:	e075      	b.n	800aca2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800abb6:	7e3b      	ldrb	r3, [r7, #24]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d105      	bne.n	800abc8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800abbc:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d102      	bne.n	800abc8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800abc2:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d030      	beq.n	800ac2a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800abc8:	f107 0310 	add.w	r3, r7, #16
 800abcc:	461a      	mov	r2, r3
 800abce:	2102      	movs	r1, #2
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7ff fccd 	bl	800a570 <get_sequence_step_timeout>
 800abd6:	4603      	mov	r3, r0
 800abd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800abdc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d122      	bne.n	800ac2a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800abe4:	7e3b      	ldrb	r3, [r7, #24]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d007      	beq.n	800abfa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800abee:	6939      	ldr	r1, [r7, #16]
 800abf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800abf4:	441a      	add	r2, r3
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800abfa:	7ebb      	ldrb	r3, [r7, #26]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d009      	beq.n	800ac14 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800ac04:	6939      	ldr	r1, [r7, #16]
 800ac06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac08:	440b      	add	r3, r1
 800ac0a:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ac0c:	441a      	add	r2, r3
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	e00a      	b.n	800ac2a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800ac14:	7e7b      	ldrb	r3, [r7, #25]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d007      	beq.n	800ac2a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ac1e:	6939      	ldr	r1, [r7, #16]
 800ac20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac22:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ac24:	441a      	add	r2, r3
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ac2a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d114      	bne.n	800ac5c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800ac32:	7efb      	ldrb	r3, [r7, #27]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d011      	beq.n	800ac5c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800ac38:	f107 030c 	add.w	r3, r7, #12
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	2103      	movs	r1, #3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f7ff fc95 	bl	800a570 <get_sequence_step_timeout>
 800ac46:	4603      	mov	r3, r0
 800ac48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800ac50:	68f9      	ldr	r1, [r7, #12]
 800ac52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac54:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ac56:	441a      	add	r2, r3
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ac5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d114      	bne.n	800ac8e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800ac64:	7f3b      	ldrb	r3, [r7, #28]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d011      	beq.n	800ac8e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800ac6a:	f107 0314 	add.w	r3, r7, #20
 800ac6e:	461a      	mov	r2, r3
 800ac70:	2104      	movs	r1, #4
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff fc7c 	bl	800a570 <get_sequence_step_timeout>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800ac82:	6979      	ldr	r1, [r7, #20]
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ac88:	441a      	add	r2, r3
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ac8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d103      	bne.n	800ac9e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3740      	adds	r7, #64	; 0x40
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b088      	sub	sp, #32
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acb6:	2300      	movs	r3, #0
 800acb8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800acba:	2300      	movs	r3, #0
 800acbc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800acbe:	e0c6      	b.n	800ae4e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	4413      	add	r3, r2
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	74fb      	strb	r3, [r7, #19]
		Index++;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	3301      	adds	r3, #1
 800acce:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800acd0:	7cfb      	ldrb	r3, [r7, #19]
 800acd2:	2bff      	cmp	r3, #255	; 0xff
 800acd4:	f040 808d 	bne.w	800adf2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	4413      	add	r3, r2
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	747b      	strb	r3, [r7, #17]
			Index++;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	3301      	adds	r3, #1
 800ace6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800ace8:	7c7b      	ldrb	r3, [r7, #17]
 800acea:	2b03      	cmp	r3, #3
 800acec:	d87e      	bhi.n	800adec <VL53L0X_load_tuning_settings+0x140>
 800acee:	a201      	add	r2, pc, #4	; (adr r2, 800acf4 <VL53L0X_load_tuning_settings+0x48>)
 800acf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf4:	0800ad05 	.word	0x0800ad05
 800acf8:	0800ad3f 	.word	0x0800ad3f
 800acfc:	0800ad79 	.word	0x0800ad79
 800ad00:	0800adb3 	.word	0x0800adb3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	683a      	ldr	r2, [r7, #0]
 800ad08:	4413      	add	r3, r2
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	743b      	strb	r3, [r7, #16]
				Index++;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	3301      	adds	r3, #1
 800ad12:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	4413      	add	r3, r2
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	3301      	adds	r3, #1
 800ad22:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ad24:	7c3b      	ldrb	r3, [r7, #16]
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	021b      	lsls	r3, r3, #8
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	4413      	add	r3, r2
 800ad32:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	89ba      	ldrh	r2, [r7, #12]
 800ad38:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800ad3c:	e087      	b.n	800ae4e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	683a      	ldr	r2, [r7, #0]
 800ad42:	4413      	add	r3, r2
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	743b      	strb	r3, [r7, #16]
				Index++;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	4413      	add	r3, r2
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ad5e:	7c3b      	ldrb	r3, [r7, #16]
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	021b      	lsls	r3, r3, #8
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	4413      	add	r3, r2
 800ad6c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	89ba      	ldrh	r2, [r7, #12]
 800ad72:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800ad76:	e06a      	b.n	800ae4e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	743b      	strb	r3, [r7, #16]
				Index++;
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	3301      	adds	r3, #1
 800ad86:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	3301      	adds	r3, #1
 800ad96:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ad98:	7c3b      	ldrb	r3, [r7, #16]
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	021b      	lsls	r3, r3, #8
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	4413      	add	r3, r2
 800ada6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	89ba      	ldrh	r2, [r7, #12]
 800adac:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800adb0:	e04d      	b.n	800ae4e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	683a      	ldr	r2, [r7, #0]
 800adb6:	4413      	add	r3, r2
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	743b      	strb	r3, [r7, #16]
				Index++;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	3301      	adds	r3, #1
 800adc0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	4413      	add	r3, r2
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	73fb      	strb	r3, [r7, #15]
				Index++;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	3301      	adds	r3, #1
 800add0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800add2:	7c3b      	ldrb	r3, [r7, #16]
 800add4:	b29b      	uxth	r3, r3
 800add6:	021b      	lsls	r3, r3, #8
 800add8:	b29a      	uxth	r2, r3
 800adda:	7bfb      	ldrb	r3, [r7, #15]
 800addc:	b29b      	uxth	r3, r3
 800adde:	4413      	add	r3, r2
 800ade0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	89ba      	ldrh	r2, [r7, #12]
 800ade6:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 800adea:	e030      	b.n	800ae4e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800adec:	23fc      	movs	r3, #252	; 0xfc
 800adee:	77fb      	strb	r3, [r7, #31]
 800adf0:	e02d      	b.n	800ae4e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800adf2:	7cfb      	ldrb	r3, [r7, #19]
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	d828      	bhi.n	800ae4a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	683a      	ldr	r2, [r7, #0]
 800adfc:	4413      	add	r3, r2
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	74bb      	strb	r3, [r7, #18]
			Index++;
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	3301      	adds	r3, #1
 800ae06:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800ae08:	2300      	movs	r3, #0
 800ae0a:	61bb      	str	r3, [r7, #24]
 800ae0c:	e00f      	b.n	800ae2e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	683a      	ldr	r2, [r7, #0]
 800ae12:	4413      	add	r3, r2
 800ae14:	7819      	ldrb	r1, [r3, #0]
 800ae16:	f107 0208 	add.w	r2, r7, #8
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	460a      	mov	r2, r1
 800ae20:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	3301      	adds	r3, #1
 800ae26:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	61bb      	str	r3, [r7, #24]
 800ae2e:	7cfb      	ldrb	r3, [r7, #19]
 800ae30:	69ba      	ldr	r2, [r7, #24]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	dbeb      	blt.n	800ae0e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800ae36:	7cfb      	ldrb	r3, [r7, #19]
 800ae38:	f107 0208 	add.w	r2, r7, #8
 800ae3c:	7cb9      	ldrb	r1, [r7, #18]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 ff8a 	bl	800bd58 <VL53L0X_WriteMulti>
 800ae44:	4603      	mov	r3, r0
 800ae46:	77fb      	strb	r3, [r7, #31]
 800ae48:	e001      	b.n	800ae4e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae4a:	23fc      	movs	r3, #252	; 0xfc
 800ae4c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	4413      	add	r3, r2
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d004      	beq.n	800ae64 <VL53L0X_load_tuning_settings+0x1b8>
 800ae5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f43f af2e 	beq.w	800acc0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae64:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3720      	adds	r7, #32
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b088      	sub	sp, #32
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ae86:	f107 0313 	add.w	r3, r7, #19
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f7fc fff9 	bl	8007e84 <VL53L0X_GetXTalkCompensationEnable>
 800ae92:	4603      	mov	r3, r0
 800ae94:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800ae96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d111      	bne.n	800aec2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800ae9e:	7cfb      	ldrb	r3, [r7, #19]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d00e      	beq.n	800aec2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6a1b      	ldr	r3, [r3, #32]
 800aea8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	8a9b      	ldrh	r3, [r3, #20]
 800aeae:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	fb02 f303 	mul.w	r3, r2, r3
 800aeb6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	3380      	adds	r3, #128	; 0x80
 800aebc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800aec2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3720      	adds	r7, #32
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b086      	sub	sp, #24
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	60f8      	str	r0, [r7, #12]
 800aed6:	60b9      	str	r1, [r7, #8]
 800aed8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aeda:	2300      	movs	r3, #0
 800aedc:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800aee6:	f107 0310 	add.w	r3, r7, #16
 800aeea:	461a      	mov	r2, r3
 800aeec:	68b9      	ldr	r1, [r7, #8]
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f7ff ffbe 	bl	800ae70 <VL53L0X_get_total_xtalk_rate>
 800aef4:	4603      	mov	r3, r0
 800aef6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800aef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d105      	bne.n	800af0c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	441a      	add	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	601a      	str	r2, [r3, #0]

	return Status;
 800af0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b09a      	sub	sp, #104	; 0x68
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
 800af24:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800af26:	2312      	movs	r3, #18
 800af28:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800af2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800af2e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800af30:	2342      	movs	r3, #66	; 0x42
 800af32:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800af34:	2306      	movs	r3, #6
 800af36:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800af38:	2307      	movs	r3, #7
 800af3a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af3c:	2300      	movs	r3, #0
 800af3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 800af48:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800af50:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800af52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af56:	fb02 f303 	mul.w	r3, r2, r3
 800af5a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800af5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af5e:	3380      	adds	r3, #128	; 0x80
 800af60:	0a1b      	lsrs	r3, r3, #8
 800af62:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800af64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af68:	fb02 f303 	mul.w	r3, r2, r3
 800af6c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d01a      	beq.n	800afae <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	029b      	lsls	r3, r3, #10
 800af7c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800af82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af84:	4413      	add	r3, r2
 800af86:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800af88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af90:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800af92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af94:	4613      	mov	r3, r2
 800af96:	005b      	lsls	r3, r3, #1
 800af98:	4413      	add	r3, r2
 800af9a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800af9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af9e:	fb03 f303 	mul.w	r3, r3, r3
 800afa2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800afa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afa6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800afaa:	0c1b      	lsrs	r3, r3, #16
 800afac:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800afb2:	fb02 f303 	mul.w	r3, r2, r3
 800afb6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800afb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800afbe:	0c1b      	lsrs	r3, r3, #16
 800afc0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800afc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc4:	fb03 f303 	mul.w	r3, r3, r3
 800afc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800afca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afcc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800afd0:	0c1b      	lsrs	r3, r3, #16
 800afd2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800afd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afd6:	085a      	lsrs	r2, r3, #1
 800afd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afda:	441a      	add	r2, r3
 800afdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afde:	fbb2 f3f3 	udiv	r3, r2, r3
 800afe2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800afe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afe8:	fb02 f303 	mul.w	r3, r2, r3
 800afec:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800afee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aff4:	d302      	bcc.n	800affc <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800aff6:	4b54      	ldr	r3, [pc, #336]	; (800b148 <VL53L0X_calc_dmax+0x230>)
 800aff8:	663b      	str	r3, [r7, #96]	; 0x60
 800affa:	e015      	b.n	800b028 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800affc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800affe:	085a      	lsrs	r2, r3, #1
 800b000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b002:	441a      	add	r2, r3
 800b004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b006:	fbb2 f3f3 	udiv	r3, r2, r3
 800b00a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800b00c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b00e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b010:	fb02 f303 	mul.w	r3, r2, r3
 800b014:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800b016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b018:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b01c:	0c1b      	lsrs	r3, r3, #16
 800b01e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800b020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b022:	fb03 f303 	mul.w	r3, r3, r3
 800b026:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800b028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b02a:	039b      	lsls	r3, r3, #14
 800b02c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b030:	4a46      	ldr	r2, [pc, #280]	; (800b14c <VL53L0X_calc_dmax+0x234>)
 800b032:	fba2 2303 	umull	r2, r3, r2, r3
 800b036:	099b      	lsrs	r3, r3, #6
 800b038:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	fb03 f303 	mul.w	r3, r3, r3
 800b040:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800b042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b044:	fb03 f303 	mul.w	r3, r3, r3
 800b048:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	3308      	adds	r3, #8
 800b04e:	091b      	lsrs	r3, r3, #4
 800b050:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800b052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b054:	6a3b      	ldr	r3, [r7, #32]
 800b056:	1ad3      	subs	r3, r2, r3
 800b058:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800b05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b05c:	4613      	mov	r3, r2
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	4413      	add	r3, r2
 800b062:	011b      	lsls	r3, r3, #4
 800b064:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b06c:	0b9b      	lsrs	r3, r3, #14
 800b06e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800b070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b074:	4413      	add	r3, r2
 800b076:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800b078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b07a:	085b      	lsrs	r3, r3, #1
 800b07c:	69ba      	ldr	r2, [r7, #24]
 800b07e:	4413      	add	r3, r2
 800b080:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800b082:	69ba      	ldr	r2, [r7, #24]
 800b084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b086:	fbb2 f3f3 	udiv	r3, r2, r3
 800b08a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	039b      	lsls	r3, r3, #14
 800b090:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	085b      	lsrs	r3, r3, #1
 800b096:	69ba      	ldr	r2, [r7, #24]
 800b098:	4413      	add	r3, r2
 800b09a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800b09c:	69ba      	ldr	r2, [r7, #24]
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b0aa:	fb02 f303 	mul.w	r3, r2, r3
 800b0ae:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b0b6:	4a25      	ldr	r2, [pc, #148]	; (800b14c <VL53L0X_calc_dmax+0x234>)
 800b0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800b0bc:	099b      	lsrs	r3, r3, #6
 800b0be:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	011b      	lsls	r3, r3, #4
 800b0c4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b0cc:	4a1f      	ldr	r2, [pc, #124]	; (800b14c <VL53L0X_calc_dmax+0x234>)
 800b0ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d2:	099b      	lsrs	r3, r3, #6
 800b0d4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800b0d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0d8:	3380      	adds	r3, #128	; 0x80
 800b0da:	0a1b      	lsrs	r3, r3, #8
 800b0dc:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d008      	beq.n	800b0f6 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	085a      	lsrs	r2, r3, #1
 800b0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ea:	441a      	add	r2, r3
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b0f4:	e001      	b.n	800b0fa <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800b0fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b0fc:	f7fe fc44 	bl	8009988 <VL53L0X_isqrt>
 800b100:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d008      	beq.n	800b11a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	085a      	lsrs	r2, r3, #1
 800b10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b10e:	441a      	add	r2, r3
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	fbb2 f3f3 	udiv	r3, r2, r3
 800b116:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b118:	e001      	b.n	800b11e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800b11e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b120:	f7fe fc32 	bl	8009988 <VL53L0X_isqrt>
 800b124:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800b126:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800b12c:	693a      	ldr	r2, [r7, #16]
 800b12e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b130:	429a      	cmp	r2, r3
 800b132:	d902      	bls.n	800b13a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800b134:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b136:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b138:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b13a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3768      	adds	r7, #104	; 0x68
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	fff00000 	.word	0xfff00000
 800b14c:	10624dd3 	.word	0x10624dd3

0800b150 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b0b2      	sub	sp, #200	; 0xc8
 800b154:	af04      	add	r7, sp, #16
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
 800b15c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b15e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b162:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b166:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b16a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800b16e:	2342      	movs	r3, #66	; 0x42
 800b170:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b174:	f241 235c 	movw	r3, #4700	; 0x125c
 800b178:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b17c:	4b6b      	ldr	r3, [pc, #428]	; (800b32c <VL53L0X_calc_sigma_estimate+0x1dc>)
 800b17e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b182:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b186:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b18a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b18e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b192:	fbb2 f3f3 	udiv	r3, r2, r3
 800b196:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b198:	4b65      	ldr	r3, [pc, #404]	; (800b330 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800b19a:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b19c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1a0:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b1a2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b1a6:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 800b1a8:	f240 6377 	movw	r3, #1655	; 0x677
 800b1ac:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6a1b      	ldr	r3, [r3, #32]
 800b1b8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b1c2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b1c6:	0c1b      	lsrs	r3, r3, #16
 800b1c8:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b1d0:	f107 0310 	add.w	r3, r7, #16
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	68b9      	ldr	r1, [r7, #8]
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f7ff fe78 	bl	800aece <VL53L0X_get_total_signal_rate>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b1e4:	f107 0314 	add.w	r3, r7, #20
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	68b9      	ldr	r1, [r7, #8]
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f7ff fe3f 	bl	800ae70 <VL53L0X_get_total_xtalk_rate>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b1fe:	fb02 f303 	mul.w	r3, r2, r3
 800b202:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b206:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b20a:	0c1b      	lsrs	r3, r3, #16
 800b20c:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b214:	fb02 f303 	mul.w	r3, r2, r3
 800b218:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b21c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b222:	429a      	cmp	r2, r3
 800b224:	d902      	bls.n	800b22c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b228:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 800b22c:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800b230:	2b00      	cmp	r3, #0
 800b232:	d164      	bne.n	800b2fe <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b23a:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b242:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b246:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b24a:	461a      	mov	r2, r3
 800b24c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f7ff f938 	bl	800a4c4 <VL53L0X_calc_timeout_mclks>
 800b254:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b25c:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b264:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b268:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b26c:	461a      	mov	r2, r3
 800b26e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f7ff f927 	bl	800a4c4 <VL53L0X_calc_timeout_mclks>
 800b276:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b278:	2303      	movs	r3, #3
 800b27a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800b27e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b282:	2b08      	cmp	r3, #8
 800b284:	d102      	bne.n	800b28c <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 800b286:	2302      	movs	r3, #2
 800b288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b28c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b28e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b290:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b292:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b296:	fb02 f303 	mul.w	r3, r2, r3
 800b29a:	02db      	lsls	r3, r3, #11
 800b29c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b2a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b2a8:	4a22      	ldr	r2, [pc, #136]	; (800b334 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800b2aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ae:	099b      	lsrs	r3, r3, #6
 800b2b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 800b2b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b2ba:	fb02 f303 	mul.w	r3, r2, r3
 800b2be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b2c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b2ca:	4a1a      	ldr	r2, [pc, #104]	; (800b334 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800b2cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d0:	099b      	lsrs	r3, r3, #6
 800b2d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	3380      	adds	r3, #128	; 0x80
 800b2da:	0a1b      	lsrs	r3, r3, #8
 800b2dc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b2de:	693a      	ldr	r2, [r7, #16]
 800b2e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2e4:	fb02 f303 	mul.w	r3, r2, r3
 800b2e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b2ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b2f0:	3380      	adds	r3, #128	; 0x80
 800b2f2:	0a1b      	lsrs	r3, r3, #8
 800b2f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	021b      	lsls	r3, r3, #8
 800b2fc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b2fe:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800b302:	2b00      	cmp	r3, #0
 800b304:	d002      	beq.n	800b30c <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 800b306:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800b30a:	e127      	b.n	800b55c <VL53L0X_calc_sigma_estimate+0x40c>
	}

	if (peakSignalRate_kcps == 0) {
 800b30c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d112      	bne.n	800b338 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b318:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b320:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	2200      	movs	r2, #0
 800b328:	601a      	str	r2, [r3, #0]
 800b32a:	e115      	b.n	800b558 <VL53L0X_calc_sigma_estimate+0x408>
 800b32c:	028f87ae 	.word	0x028f87ae
 800b330:	0006999a 	.word	0x0006999a
 800b334:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 800b338:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d102      	bne.n	800b346 <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 800b340:	2301      	movs	r3, #1
 800b342:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b346:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b34a:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b34c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b34e:	041a      	lsls	r2, r3, #16
 800b350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b352:	fbb2 f3f3 	udiv	r3, r2, r3
 800b356:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b35a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b35e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b360:	429a      	cmp	r2, r3
 800b362:	d902      	bls.n	800b36a <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b364:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b366:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b36a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b36e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b372:	fb02 f303 	mul.w	r3, r2, r3
 800b376:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b37a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b37e:	4613      	mov	r3, r2
 800b380:	005b      	lsls	r3, r3, #1
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4618      	mov	r0, r3
 800b388:	f7fe fafe 	bl	8009988 <VL53L0X_isqrt>
 800b38c:	4603      	mov	r3, r0
 800b38e:	005b      	lsls	r3, r3, #1
 800b390:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	891b      	ldrh	r3, [r3, #8]
 800b396:	461a      	mov	r2, r3
 800b398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b39a:	fb02 f303 	mul.w	r3, r2, r3
 800b39e:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b3a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3a2:	041a      	lsls	r2, r3, #16
 800b3a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b3a8:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 800b3aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b3ae:	4a6d      	ldr	r2, [pc, #436]	; (800b564 <VL53L0X_calc_sigma_estimate+0x414>)
 800b3b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b4:	099b      	lsrs	r3, r3, #6
 800b3b6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800b3b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3ba:	041a      	lsls	r2, r3, #16
 800b3bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b3c0:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 800b3c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800b3c6:	4a67      	ldr	r2, [pc, #412]	; (800b564 <VL53L0X_calc_sigma_estimate+0x414>)
 800b3c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3cc:	099b      	lsrs	r3, r3, #6
 800b3ce:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d2:	021b      	lsls	r3, r3, #8
 800b3d4:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b3d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	bfb8      	it	lt
 800b3e2:	425b      	neglt	r3, r3
 800b3e4:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e8:	021b      	lsls	r3, r3, #8
 800b3ea:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b3ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b3ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b3f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 800b3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fa:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b400:	fb02 f303 	mul.w	r3, r2, r3
 800b404:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b40a:	4413      	add	r3, r2
 800b40c:	0c1b      	lsrs	r3, r3, #16
 800b40e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 800b410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b412:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b416:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 800b418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41a:	085b      	lsrs	r3, r3, #1
 800b41c:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 800b41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b420:	fb03 f303 	mul.w	r3, r3, r3
 800b424:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 800b426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b428:	0b9b      	lsrs	r3, r3, #14
 800b42a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b430:	fb02 f303 	mul.w	r3, r2, r3
 800b434:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b438:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b43c:	0c1b      	lsrs	r3, r3, #16
 800b43e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b442:	fb03 f303 	mul.w	r3, r3, r3
 800b446:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 800b448:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b44c:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b450:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b454:	0c1b      	lsrs	r3, r3, #16
 800b456:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45a:	fb03 f303 	mul.w	r3, r3, r3
 800b45e:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b464:	4413      	add	r3, r2
 800b466:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b468:	6a38      	ldr	r0, [r7, #32]
 800b46a:	f7fe fa8d 	bl	8009988 <VL53L0X_isqrt>
 800b46e:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	041b      	lsls	r3, r3, #16
 800b474:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	3332      	adds	r3, #50	; 0x32
 800b47a:	4a3b      	ldr	r2, [pc, #236]	; (800b568 <VL53L0X_calc_sigma_estimate+0x418>)
 800b47c:	fba2 2303 	umull	r2, r3, r2, r3
 800b480:	095a      	lsrs	r2, r3, #5
 800b482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b484:	fbb2 f3f3 	udiv	r3, r2, r3
 800b488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b48c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b490:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b494:	fb02 f303 	mul.w	r3, r2, r3
 800b498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b49c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4a0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 800b4aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4ae:	4a2f      	ldr	r2, [pc, #188]	; (800b56c <VL53L0X_calc_sigma_estimate+0x41c>)
 800b4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4b4:	0b5b      	lsrs	r3, r3, #13
 800b4b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b4ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b4be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d903      	bls.n	800b4ce <VL53L0X_calc_sigma_estimate+0x37e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b4c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b4ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b4ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4d2:	fb03 f303 	mul.w	r3, r3, r3
 800b4d6:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 800b4d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4dc:	fb03 f303 	mul.w	r3, r3, r3
 800b4e0:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b4e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e6:	4413      	add	r3, r2
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7fe fa4d 	bl	8009988 <VL53L0X_isqrt>
 800b4ee:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b4f6:	fb02 f303 	mul.w	r3, r2, r3
 800b4fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b4fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b500:	2b00      	cmp	r3, #0
 800b502:	d009      	beq.n	800b518 <VL53L0X_calc_sigma_estimate+0x3c8>
 800b504:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d005      	beq.n	800b518 <VL53L0X_calc_sigma_estimate+0x3c8>
 800b50c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b514:	429a      	cmp	r2, r3
 800b516:	d903      	bls.n	800b520 <VL53L0X_calc_sigma_estimate+0x3d0>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b51c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b526:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 800b532:	6939      	ldr	r1, [r7, #16]
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	9303      	str	r3, [sp, #12]
 800b538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b53c:	9302      	str	r3, [sp, #8]
 800b53e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f7ff fce3 	bl	800af18 <VL53L0X_calc_dmax>
 800b552:	4603      	mov	r3, r0
 800b554:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b558:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	37b8      	adds	r7, #184	; 0xb8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	10624dd3 	.word	0x10624dd3
 800b568:	51eb851f 	.word	0x51eb851f
 800b56c:	d1b71759 	.word	0xd1b71759

0800b570 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b090      	sub	sp, #64	; 0x40
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	607a      	str	r2, [r7, #4]
 800b57a:	461a      	mov	r2, r3
 800b57c:	460b      	mov	r3, r1
 800b57e:	72fb      	strb	r3, [r7, #11]
 800b580:	4613      	mov	r3, r2
 800b582:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b584:	2300      	movs	r3, #0
 800b586:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b590:	2300      	movs	r3, #0
 800b592:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b59c:	2300      	movs	r3, #0
 800b59e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b5c2:	7afb      	ldrb	r3, [r7, #11]
 800b5c4:	10db      	asrs	r3, r3, #3
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	f003 030f 	and.w	r3, r3, #15
 800b5cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b5d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d017      	beq.n	800b608 <VL53L0X_get_pal_range_status+0x98>
 800b5d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b5dc:	2b05      	cmp	r3, #5
 800b5de:	d013      	beq.n	800b608 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b5e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b5e4:	2b07      	cmp	r3, #7
 800b5e6:	d00f      	beq.n	800b608 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b5e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b5ec:	2b0c      	cmp	r3, #12
 800b5ee:	d00b      	beq.n	800b608 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b5f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b5f4:	2b0d      	cmp	r3, #13
 800b5f6:	d007      	beq.n	800b608 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b5f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b5fc:	2b0e      	cmp	r3, #14
 800b5fe:	d003      	beq.n	800b608 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b600:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b604:	2b0f      	cmp	r3, #15
 800b606:	d103      	bne.n	800b610 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b608:	2301      	movs	r3, #1
 800b60a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b60e:	e002      	b.n	800b616 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b610:	2300      	movs	r3, #0
 800b612:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 800b616:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d107      	bne.n	800b62e <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b61e:	2201      	movs	r2, #1
 800b620:	21ff      	movs	r1, #255	; 0xff
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f000 fc68 	bl	800bef8 <VL53L0X_WrByte>
 800b628:	4603      	mov	r3, r0
 800b62a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 800b62e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b632:	2b00      	cmp	r3, #0
 800b634:	d109      	bne.n	800b64a <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 800b636:	f107 0316 	add.w	r3, r7, #22
 800b63a:	461a      	mov	r2, r3
 800b63c:	21b6      	movs	r1, #182	; 0xb6
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f000 fbe6 	bl	800be10 <VL53L0X_RdWord>
 800b644:	4603      	mov	r3, r0
 800b646:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b64a:	8afb      	ldrh	r3, [r7, #22]
 800b64c:	025b      	lsls	r3, r3, #9
 800b64e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 800b650:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b654:	2b00      	cmp	r3, #0
 800b656:	d107      	bne.n	800b668 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b658:	2200      	movs	r2, #0
 800b65a:	21ff      	movs	r1, #255	; 0xff
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f000 fc4b 	bl	800bef8 <VL53L0X_WrByte>
 800b662:	4603      	mov	r3, r0
 800b664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b66c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b670:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b674:	2b00      	cmp	r3, #0
 800b676:	d109      	bne.n	800b68c <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b678:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b67c:	461a      	mov	r2, r3
 800b67e:	2100      	movs	r1, #0
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f7fc fcd3 	bl	800802c <VL53L0X_GetLimitCheckEnable>
 800b686:	4603      	mov	r3, r0
 800b688:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b68c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b690:	2b00      	cmp	r3, #0
 800b692:	d02e      	beq.n	800b6f2 <VL53L0X_get_pal_range_status+0x182>
 800b694:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d12a      	bne.n	800b6f2 <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800b69c:	f107 0310 	add.w	r3, r7, #16
 800b6a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b6a4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f7ff fd52 	bl	800b150 <VL53L0X_calc_sigma_estimate>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800b6b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d103      	bne.n	800b6c2 <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6c0:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800b6c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d113      	bne.n	800b6f2 <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800b6ca:	f107 0320 	add.w	r3, r7, #32
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f7fc fd2e 	bl	8008134 <VL53L0X_GetLimitCheckValue>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b6de:	6a3b      	ldr	r3, [r7, #32]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d006      	beq.n	800b6f2 <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 800b6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e6:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d902      	bls.n	800b6f2 <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b6f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d109      	bne.n	800b70e <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b6fa:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b6fe:	461a      	mov	r2, r3
 800b700:	2102      	movs	r1, #2
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	f7fc fc92 	bl	800802c <VL53L0X_GetLimitCheckEnable>
 800b708:	4603      	mov	r3, r0
 800b70a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b70e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b712:	2b00      	cmp	r3, #0
 800b714:	d017      	beq.n	800b746 <VL53L0X_get_pal_range_status+0x1d6>
 800b716:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d113      	bne.n	800b746 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b71e:	f107 031c 	add.w	r3, r7, #28
 800b722:	461a      	mov	r2, r3
 800b724:	2102      	movs	r1, #2
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7fc fd04 	bl	8008134 <VL53L0X_GetLimitCheckValue>
 800b72c:	4603      	mov	r3, r0
 800b72e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d006      	beq.n	800b746 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b738:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b73a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d902      	bls.n	800b746 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b740:	2301      	movs	r3, #1
 800b742:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b746:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d109      	bne.n	800b762 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b74e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b752:	461a      	mov	r2, r3
 800b754:	2103      	movs	r1, #3
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f7fc fc68 	bl	800802c <VL53L0X_GetLimitCheckEnable>
 800b75c:	4603      	mov	r3, r0
 800b75e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b762:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b766:	2b00      	cmp	r3, #0
 800b768:	d023      	beq.n	800b7b2 <VL53L0X_get_pal_range_status+0x242>
 800b76a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d11f      	bne.n	800b7b2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b772:	893b      	ldrh	r3, [r7, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d102      	bne.n	800b77e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800b778:	2300      	movs	r3, #0
 800b77a:	637b      	str	r3, [r7, #52]	; 0x34
 800b77c:	e005      	b.n	800b78a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	021a      	lsls	r2, r3, #8
 800b782:	893b      	ldrh	r3, [r7, #8]
 800b784:	fbb2 f3f3 	udiv	r3, r2, r3
 800b788:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b78a:	f107 0318 	add.w	r3, r7, #24
 800b78e:	461a      	mov	r2, r3
 800b790:	2103      	movs	r1, #3
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	f7fc fcce 	bl	8008134 <VL53L0X_GetLimitCheckValue>
 800b798:	4603      	mov	r3, r0
 800b79a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d006      	beq.n	800b7b2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b7a4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b7a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d202      	bcs.n	800b7b2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b7b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d14a      	bne.n	800b850 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800b7ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d103      	bne.n	800b7ca <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800b7c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c4:	22ff      	movs	r2, #255	; 0xff
 800b7c6:	701a      	strb	r2, [r3, #0]
 800b7c8:	e042      	b.n	800b850 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b7ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d007      	beq.n	800b7e2 <VL53L0X_get_pal_range_status+0x272>
 800b7d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d003      	beq.n	800b7e2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800b7da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b7de:	2b03      	cmp	r3, #3
 800b7e0:	d103      	bne.n	800b7ea <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b7e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7e4:	2205      	movs	r2, #5
 800b7e6:	701a      	strb	r2, [r3, #0]
 800b7e8:	e032      	b.n	800b850 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b7ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b7ee:	2b06      	cmp	r3, #6
 800b7f0:	d003      	beq.n	800b7fa <VL53L0X_get_pal_range_status+0x28a>
 800b7f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b7f6:	2b09      	cmp	r3, #9
 800b7f8:	d103      	bne.n	800b802 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b7fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7fc:	2204      	movs	r2, #4
 800b7fe:	701a      	strb	r2, [r3, #0]
 800b800:	e026      	b.n	800b850 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b802:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b806:	2b08      	cmp	r3, #8
 800b808:	d007      	beq.n	800b81a <VL53L0X_get_pal_range_status+0x2aa>
 800b80a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b80e:	2b0a      	cmp	r3, #10
 800b810:	d003      	beq.n	800b81a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800b812:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b816:	2b01      	cmp	r3, #1
 800b818:	d103      	bne.n	800b822 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b81c:	2203      	movs	r2, #3
 800b81e:	701a      	strb	r2, [r3, #0]
 800b820:	e016      	b.n	800b850 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b822:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b826:	2b04      	cmp	r3, #4
 800b828:	d003      	beq.n	800b832 <VL53L0X_get_pal_range_status+0x2c2>
 800b82a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d103      	bne.n	800b83a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b834:	2202      	movs	r2, #2
 800b836:	701a      	strb	r2, [r3, #0]
 800b838:	e00a      	b.n	800b850 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800b83a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d103      	bne.n	800b84a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b844:	2201      	movs	r2, #1
 800b846:	701a      	strb	r2, [r3, #0]
 800b848:	e002      	b.n	800b850 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b84c:	2200      	movs	r2, #0
 800b84e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d102      	bne.n	800b85e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b85a:	2200      	movs	r2, #0
 800b85c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b85e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b862:	461a      	mov	r2, r3
 800b864:	2101      	movs	r1, #1
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f7fc fbe0 	bl	800802c <VL53L0X_GetLimitCheckEnable>
 800b86c:	4603      	mov	r3, r0
 800b86e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b872:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b876:	2b00      	cmp	r3, #0
 800b878:	d14f      	bne.n	800b91a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b87a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d003      	beq.n	800b88a <VL53L0X_get_pal_range_status+0x31a>
 800b882:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b886:	2b01      	cmp	r3, #1
 800b888:	d103      	bne.n	800b892 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b88a:	2301      	movs	r3, #1
 800b88c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b890:	e002      	b.n	800b898 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b892:	2300      	movs	r3, #0
 800b894:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b89e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b8a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8a6:	2b04      	cmp	r3, #4
 800b8a8:	d003      	beq.n	800b8b2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b8aa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d103      	bne.n	800b8ba <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8b8:	e002      	b.n	800b8c0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b8c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b8ca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d003      	beq.n	800b8da <VL53L0X_get_pal_range_status+0x36a>
 800b8d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d103      	bne.n	800b8e2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8e0:	e002      	b.n	800b8e8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b8ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b8f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d003      	beq.n	800b902 <VL53L0X_get_pal_range_status+0x392>
 800b8fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d103      	bne.n	800b90a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b902:	2301      	movs	r3, #1
 800b904:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b908:	e002      	b.n	800b910 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b916:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b91a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800b91e:	4618      	mov	r0, r3
 800b920:	3740      	adds	r7, #64	; 0x40
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b086      	sub	sp, #24
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b932:	2300      	movs	r3, #0
 800b934:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800b936:	2102      	movs	r1, #2
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f7fe f899 	bl	8009a70 <VL53L0X_get_info_from_device>
 800b93e:	4603      	mov	r3, r0
 800b940:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800b942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d11c      	bne.n	800b984 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800b950:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 800b952:	7dbb      	ldrb	r3, [r7, #22]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d107      	bne.n	800b968 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2200      	movs	r2, #0
 800b95c:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	3340      	adds	r3, #64	; 0x40
 800b962:	2200      	movs	r2, #0
 800b964:	701a      	strb	r2, [r3, #0]
 800b966:	e00d      	b.n	800b984 <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	33f3      	adds	r3, #243	; 0xf3
 800b976:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	3340      	adds	r3, #64	; 0x40
 800b97c:	6939      	ldr	r1, [r7, #16]
 800b97e:	4618      	mov	r0, r3
 800b980:	f000 fbd2 	bl	800c128 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b984:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3718      	adds	r7, #24
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800b990:	b5b0      	push	{r4, r5, r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b99a:	2300      	movs	r3, #0
 800b99c:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800b99e:	f107 030d 	add.w	r3, r7, #13
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7ff ffbd 	bl	800b926 <VL53L0X_check_part_used>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800b9b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d13b      	bne.n	800ba30 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 800b9b8:	7b7b      	ldrb	r3, [r7, #13]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d108      	bne.n	800b9d0 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	4a30      	ldr	r2, [pc, #192]	; (800ba84 <VL53L0X_get_device_info+0xf4>)
 800b9c2:	461c      	mov	r4, r3
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b9c8:	6020      	str	r0, [r4, #0]
 800b9ca:	6061      	str	r1, [r4, #4]
 800b9cc:	60a2      	str	r2, [r4, #8]
 800b9ce:	e027      	b.n	800ba20 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 800b9d0:	7b7b      	ldrb	r3, [r7, #13]
 800b9d2:	2b22      	cmp	r3, #34	; 0x22
 800b9d4:	d80b      	bhi.n	800b9ee <VL53L0X_get_device_info+0x5e>
 800b9d6:	7b7b      	ldrb	r3, [r7, #13]
 800b9d8:	2b20      	cmp	r3, #32
 800b9da:	d008      	beq.n	800b9ee <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	4a2a      	ldr	r2, [pc, #168]	; (800ba88 <VL53L0X_get_device_info+0xf8>)
 800b9e0:	461c      	mov	r4, r3
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b9e6:	6020      	str	r0, [r4, #0]
 800b9e8:	6061      	str	r1, [r4, #4]
 800b9ea:	60a2      	str	r2, [r4, #8]
 800b9ec:	e018      	b.n	800ba20 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800b9ee:	7b7b      	ldrb	r3, [r7, #13]
 800b9f0:	2b26      	cmp	r3, #38	; 0x26
 800b9f2:	d808      	bhi.n	800ba06 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	4a25      	ldr	r2, [pc, #148]	; (800ba8c <VL53L0X_get_device_info+0xfc>)
 800b9f8:	461c      	mov	r4, r3
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b9fe:	6020      	str	r0, [r4, #0]
 800ba00:	6061      	str	r1, [r4, #4]
 800ba02:	60a2      	str	r2, [r4, #8]
 800ba04:	e00c      	b.n	800ba20 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	4a21      	ldr	r2, [pc, #132]	; (800ba90 <VL53L0X_get_device_info+0x100>)
 800ba0a:	461d      	mov	r5, r3
 800ba0c:	4614      	mov	r4, r2
 800ba0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba10:	6028      	str	r0, [r5, #0]
 800ba12:	6069      	str	r1, [r5, #4]
 800ba14:	60aa      	str	r2, [r5, #8]
 800ba16:	60eb      	str	r3, [r5, #12]
 800ba18:	6820      	ldr	r0, [r4, #0]
 800ba1a:	6128      	str	r0, [r5, #16]
 800ba1c:	7923      	ldrb	r3, [r4, #4]
 800ba1e:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	3320      	adds	r3, #32
 800ba24:	491b      	ldr	r1, [pc, #108]	; (800ba94 <VL53L0X_get_device_info+0x104>)
 800ba26:	461a      	mov	r2, r3
 800ba28:	460b      	mov	r3, r1
 800ba2a:	cb03      	ldmia	r3!, {r0, r1}
 800ba2c:	6010      	str	r0, [r2, #0]
 800ba2e:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ba30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d108      	bne.n	800ba4a <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	3360      	adds	r3, #96	; 0x60
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	21c0      	movs	r1, #192	; 0xc0
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 f95e 	bl	800bd02 <VL53L0X_RdByte>
 800ba46:	4603      	mov	r3, r0
 800ba48:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ba4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d112      	bne.n	800ba78 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800ba52:	f107 030e 	add.w	r3, r7, #14
 800ba56:	461a      	mov	r2, r3
 800ba58:	21c2      	movs	r1, #194	; 0xc2
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f951 	bl	800bd02 <VL53L0X_RdByte>
 800ba60:	4603      	mov	r3, r0
 800ba62:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800ba6c:	7bbb      	ldrb	r3, [r7, #14]
 800ba6e:	091b      	lsrs	r3, r3, #4
 800ba70:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 800ba78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bdb0      	pop	{r4, r5, r7, pc}
 800ba84:	0800c150 	.word	0x0800c150
 800ba88:	0800c15c 	.word	0x0800c15c
 800ba8c:	0800c168 	.word	0x0800c168
 800ba90:	0800c174 	.word	0x0800c174
 800ba94:	0800c18c 	.word	0x0800c18c

0800ba98 <vl53l0x_init>:
#include "vl53l0x_init.h"

//ContinuousRanging
VL53L0X_Error vl53l0x_init(VL53L0X_DEV pMyDevice, VL53L0X_Version_t *pVersion, VL53L0X_DeviceInfo_t *pDeviceInfo, uint8_t address){
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b088      	sub	sp, #32
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	607a      	str	r2, [r7, #4]
 800baa4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800baa6:	2300      	movs	r3, #0
 800baa8:	77fb      	strb	r3, [r7, #31]
    
	int32_t status_int;

    status_int = VL53L0X_GetVersion(pVersion);
 800baaa:	68b8      	ldr	r0, [r7, #8]
 800baac:	f7fb fc1d 	bl	80072ea <VL53L0X_GetVersion>
 800bab0:	4603      	mov	r3, r0
 800bab2:	61bb      	str	r3, [r7, #24]
    if (status_int != 0){
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <vl53l0x_init+0x26>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800baba:	23ec      	movs	r3, #236	; 0xec
 800babc:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800babe:	200a      	movs	r0, #10
 800bac0:	f7f8 fbd2 	bl	8004268 <HAL_Delay>


    if(Status == VL53L0X_ERROR_NONE){
 800bac4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d104      	bne.n	800bad6 <vl53l0x_init+0x3e>
    	Status = VL53L0X_DataInit(pMyDevice); // Data initialization
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f7fb fc65 	bl	800739c <VL53L0X_DataInit>
 800bad2:	4603      	mov	r3, r0
 800bad4:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(100);
 800bad6:	2064      	movs	r0, #100	; 0x64
 800bad8:	f7f8 fbc6 	bl	8004268 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800badc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10d      	bne.n	800bb00 <vl53l0x_init+0x68>
    	HAL_Delay(100);
 800bae4:	2064      	movs	r0, #100	; 0x64
 800bae6:	f7f8 fbbf 	bl	8004268 <HAL_Delay>
    	Status = VL53L0X_SetDeviceAddress(pMyDevice, address);
 800baea:	78fb      	ldrb	r3, [r7, #3]
 800baec:	4619      	mov	r1, r3
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f7fb fc3b 	bl	800736a <VL53L0X_SetDeviceAddress>
 800baf4:	4603      	mov	r3, r0
 800baf6:	77fb      	strb	r3, [r7, #31]
    	pMyDevice->I2cDevAddr = address;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	78fa      	ldrb	r2, [r7, #3]
 800bafc:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    }
    HAL_Delay(100);
 800bb00:	2064      	movs	r0, #100	; 0x64
 800bb02:	f7f8 fbb1 	bl	8004268 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800bb06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d105      	bne.n	800bb1a <vl53l0x_init+0x82>
    	Status = VL53L0X_GetDeviceInfo(pMyDevice, pDeviceInfo);
 800bb0e:	6879      	ldr	r1, [r7, #4]
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f7fb fc04 	bl	800731e <VL53L0X_GetDeviceInfo>
 800bb16:	4603      	mov	r3, r0
 800bb18:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800bb1a:	200a      	movs	r0, #10
 800bb1c:	f7f8 fba4 	bl	8004268 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800bb20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d104      	bne.n	800bb32 <vl53l0x_init+0x9a>
        Status = VL53L0X_StaticInit(pMyDevice); // Device Initialization
 800bb28:	68f8      	ldr	r0, [r7, #12]
 800bb2a:	f7fb fd41 	bl	80075b0 <VL53L0X_StaticInit>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(100);
 800bb32:	2064      	movs	r0, #100	; 0x64
 800bb34:	f7f8 fb98 	bl	8004268 <HAL_Delay>
    uint32_t refSpadCount;
    uint8_t isApertureSpads;
    uint8_t VhvSettings;
    uint8_t PhaseCal;

    if(Status == VL53L0X_ERROR_NONE){
 800bb38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d109      	bne.n	800bb54 <vl53l0x_init+0xbc>
    	Status = VL53L0X_PerformRefCalibration(pMyDevice, &VhvSettings, &PhaseCal); // Device Initialization
 800bb40:	f107 0211 	add.w	r2, r7, #17
 800bb44:	f107 0312 	add.w	r3, r7, #18
 800bb48:	4619      	mov	r1, r3
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f7fc fbe6 	bl	800831c <VL53L0X_PerformRefCalibration>
 800bb50:	4603      	mov	r3, r0
 800bb52:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(100);
 800bb54:	2064      	movs	r0, #100	; 0x64
 800bb56:	f7f8 fb87 	bl	8004268 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800bb5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d109      	bne.n	800bb76 <vl53l0x_init+0xde>
    	Status = VL53L0X_PerformRefSpadManagement(pMyDevice, &refSpadCount, &isApertureSpads); // Device Initialization
 800bb62:	f107 0213 	add.w	r2, r7, #19
 800bb66:	f107 0314 	add.w	r3, r7, #20
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f7fd f82d 	bl	8008bcc <VL53L0X_PerformRefSpadManagement>
 800bb72:	4603      	mov	r3, r0
 800bb74:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(100);
 800bb76:	2064      	movs	r0, #100	; 0x64
 800bb78:	f7f8 fb76 	bl	8004268 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800bb7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d105      	bne.n	800bb90 <vl53l0x_init+0xf8>
        Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING); // Setup in single ranging mode
 800bb84:	2101      	movs	r1, #1
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f7fb ff24 	bl	80079d4 <VL53L0X_SetDeviceMode>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	77fb      	strb	r3, [r7, #31]
    }
    if(Status == VL53L0X_ERROR_NONE){
 800bb90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d103      	bne.n	800bba0 <vl53l0x_init+0x108>
        VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pMyDevice, 100000);
 800bb98:	4909      	ldr	r1, [pc, #36]	; (800bbc0 <vl53l0x_init+0x128>)
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f7fb ff75 	bl	8007a8a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    }
    HAL_Delay(100);
 800bba0:	2064      	movs	r0, #100	; 0x64
 800bba2:	f7f8 fb61 	bl	8004268 <HAL_Delay>
    if(Status == VL53L0X_ERROR_NONE){
 800bba6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d102      	bne.n	800bbb4 <vl53l0x_init+0x11c>
    	VL53L0X_StartMeasurement(pMyDevice);
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f7fc fc30 	bl	8008414 <VL53L0X_StartMeasurement>
    }
    return Status;
 800bbb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3720      	adds	r7, #32
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	000186a0 	.word	0x000186a0

0800bbc4 <vl53l0x_GetRanging_now>:

VL53L0X_Error vl53l0x_GetRanging_now(VL53L0X_DEV pMyDevice, uint16_t *result) {
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b08c      	sub	sp, #48	; 0x30
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
	VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData = &RangingMeasurementData;
 800bbce:	f107 030c 	add.w	r3, r7, #12
 800bbd2:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Status = WaitMeasurementDataReady(pMyDevice);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f81f 	bl	800bc1e <WaitMeasurementDataReady>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(Status == VL53L0X_ERROR_NONE){
 800bbe6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d111      	bne.n	800bc12 <vl53l0x_GetRanging_now+0x4e>
		Status = VL53L0X_GetRangingMeasurementData(pMyDevice, pRangingMeasurementData);
 800bbee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7fc fcdb 	bl	80085ac <VL53L0X_GetRangingMeasurementData>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    *result = pRangingMeasurementData->RangeMilliMeter;
 800bbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfe:	891a      	ldrh	r2, [r3, #8]
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	801a      	strh	r2, [r3, #0]
		VL53L0X_ClearInterruptMask(pMyDevice, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 800bc04:	2104      	movs	r1, #4
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f7fc ff7e 	bl	8008b08 <VL53L0X_ClearInterruptMask>
	    VL53L0X_PollingDelay(pMyDevice);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 f9f5 	bl	800bffc <VL53L0X_PollingDelay>
	}
	return Status;
 800bc12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3730      	adds	r7, #48	; 0x30
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <WaitMeasurementDataReady>:
    }

    return Status;
}

VL53L0X_Error WaitMeasurementDataReady(VL53L0X_DEV Dev) {
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b086      	sub	sp, #24
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc26:	2300      	movs	r3, #0
 800bc28:	75fb      	strb	r3, [r7, #23]
    uint8_t NewDatReady=0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	73fb      	strb	r3, [r7, #15]
    uint32_t LoopNb;

    // Wait until it finished
    // use timeout to avoid deadlock
    if (Status == VL53L0X_ERROR_NONE) {
 800bc2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d11e      	bne.n	800bc74 <WaitMeasurementDataReady+0x56>
        LoopNb = 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	613b      	str	r3, [r7, #16]
        do {
            Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDatReady);
 800bc3a:	f107 030f 	add.w	r3, r7, #15
 800bc3e:	4619      	mov	r1, r3
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f7fc fc73 	bl	800852c <VL53L0X_GetMeasurementDataReady>
 800bc46:	4603      	mov	r3, r0
 800bc48:	75fb      	strb	r3, [r7, #23]
            if ((NewDatReady == 0x01) || Status != VL53L0X_ERROR_NONE) {
 800bc4a:	7bfb      	ldrb	r3, [r7, #15]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d00c      	beq.n	800bc6a <WaitMeasurementDataReady+0x4c>
 800bc50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d108      	bne.n	800bc6a <WaitMeasurementDataReady+0x4c>
                break;
            }
            LoopNb = LoopNb + 1;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	613b      	str	r3, [r7, #16]
            VL53L0X_PollingDelay(Dev);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 f9cc 	bl	800bffc <VL53L0X_PollingDelay>
        } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	2bc7      	cmp	r3, #199	; 0xc7
 800bc68:	d9e7      	bls.n	800bc3a <WaitMeasurementDataReady+0x1c>

        if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	2bc7      	cmp	r3, #199	; 0xc7
 800bc6e:	d901      	bls.n	800bc74 <WaitMeasurementDataReady+0x56>
            Status = VL53L0X_ERROR_TIME_OUT;
 800bc70:	23f9      	movs	r3, #249	; 0xf9
 800bc72:	75fb      	strb	r3, [r7, #23]
        }
    }

    return Status;
 800bc74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3718      	adds	r7, #24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b088      	sub	sp, #32
 800bc84:	af02      	add	r7, sp, #8
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	330a      	adds	r3, #10
 800bc90:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800bc9e:	b299      	uxth	r1, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	9300      	str	r3, [sp, #0]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	f7f8 ff42 	bl	8004b34 <HAL_I2C_Master_Transmit>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	613b      	str	r3, [r7, #16]
    
    return status;
 800bcb4:	693b      	ldr	r3, [r7, #16]
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3718      	adds	r7, #24
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b088      	sub	sp, #32
 800bcc2:	af02      	add	r7, sp, #8
 800bcc4:	60f8      	str	r0, [r7, #12]
 800bcc6:	60b9      	str	r1, [r7, #8]
 800bcc8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	330a      	adds	r3, #10
 800bcce:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800bcdc:	f043 0301 	orr.w	r3, r3, #1
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	b299      	uxth	r1, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	4613      	mov	r3, r2
 800bcee:	68ba      	ldr	r2, [r7, #8]
 800bcf0:	f7f9 f81e 	bl	8004d30 <HAL_I2C_Master_Receive>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	613b      	str	r3, [r7, #16]
    
    return status;
 800bcf8:	693b      	ldr	r3, [r7, #16]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3718      	adds	r7, #24
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b086      	sub	sp, #24
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	60f8      	str	r0, [r7, #12]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	607a      	str	r2, [r7, #4]
 800bd0e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd10:	2300      	movs	r3, #0
 800bd12:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800bd14:	f107 030b 	add.w	r3, r7, #11
 800bd18:	2201      	movs	r2, #1
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f7ff ffaf 	bl	800bc80 <_I2CWrite>
 800bd22:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d002      	beq.n	800bd30 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bd2a:	23ec      	movs	r3, #236	; 0xec
 800bd2c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bd2e:	e00c      	b.n	800bd4a <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 800bd30:	2201      	movs	r2, #1
 800bd32:	6879      	ldr	r1, [r7, #4]
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f7ff ffc2 	bl	800bcbe <_I2CRead>
 800bd3a:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d002      	beq.n	800bd48 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bd42:	23ec      	movs	r3, #236	; 0xec
 800bd44:	75fb      	strb	r3, [r7, #23]
 800bd46:	e000      	b.n	800bd4a <VL53L0X_RdByte+0x48>
    }
done:
 800bd48:	bf00      	nop
    return Status;
 800bd4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3718      	adds	r7, #24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
	...

0800bd58 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	607a      	str	r2, [r7, #4]
 800bd62:	603b      	str	r3, [r7, #0]
 800bd64:	460b      	mov	r3, r1
 800bd66:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	2b3f      	cmp	r3, #63	; 0x3f
 800bd70:	d902      	bls.n	800bd78 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800bd72:	f06f 0303 	mvn.w	r3, #3
 800bd76:	e016      	b.n	800bda6 <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 800bd78:	4a0d      	ldr	r2, [pc, #52]	; (800bdb0 <VL53L0X_WriteMulti+0x58>)
 800bd7a:	7afb      	ldrb	r3, [r7, #11]
 800bd7c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	6879      	ldr	r1, [r7, #4]
 800bd82:	480c      	ldr	r0, [pc, #48]	; (800bdb4 <VL53L0X_WriteMulti+0x5c>)
 800bd84:	f000 f9ba 	bl	800c0fc <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	4908      	ldr	r1, [pc, #32]	; (800bdb0 <VL53L0X_WriteMulti+0x58>)
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f7ff ff75 	bl	800bc80 <_I2CWrite>
 800bd96:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bd9e:	23ec      	movs	r3, #236	; 0xec
 800bda0:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 800bda2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3718      	adds	r7, #24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	20001214 	.word	0x20001214
 800bdb4:	20001215 	.word	0x20001215

0800bdb8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b086      	sub	sp, #24
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	607a      	str	r2, [r7, #4]
 800bdc2:	603b      	str	r3, [r7, #0]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 800bdcc:	f107 030b 	add.w	r3, r7, #11
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	68f8      	ldr	r0, [r7, #12]
 800bdd6:	f7ff ff53 	bl	800bc80 <_I2CWrite>
 800bdda:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d002      	beq.n	800bde8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bde2:	23ec      	movs	r3, #236	; 0xec
 800bde4:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bde6:	e00c      	b.n	800be02 <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	6879      	ldr	r1, [r7, #4]
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f7ff ff66 	bl	800bcbe <_I2CRead>
 800bdf2:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d002      	beq.n	800be00 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bdfa:	23ec      	movs	r3, #236	; 0xec
 800bdfc:	75fb      	strb	r3, [r7, #23]
 800bdfe:	e000      	b.n	800be02 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800be00:	bf00      	nop
    return Status;
 800be02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be06:	4618      	mov	r0, r3
 800be08:	3718      	adds	r7, #24
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
	...

0800be10 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	460b      	mov	r3, r1
 800be1a:	607a      	str	r2, [r7, #4]
 800be1c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be1e:	2300      	movs	r3, #0
 800be20:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800be22:	f107 030b 	add.w	r3, r7, #11
 800be26:	2201      	movs	r2, #1
 800be28:	4619      	mov	r1, r3
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f7ff ff28 	bl	800bc80 <_I2CWrite>
 800be30:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d002      	beq.n	800be3e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800be38:	23ec      	movs	r3, #236	; 0xec
 800be3a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800be3c:	e017      	b.n	800be6e <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800be3e:	2202      	movs	r2, #2
 800be40:	490e      	ldr	r1, [pc, #56]	; (800be7c <VL53L0X_RdWord+0x6c>)
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f7ff ff3b 	bl	800bcbe <_I2CRead>
 800be48:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800be50:	23ec      	movs	r3, #236	; 0xec
 800be52:	75fb      	strb	r3, [r7, #23]
        goto done;
 800be54:	e00b      	b.n	800be6e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800be56:	4b09      	ldr	r3, [pc, #36]	; (800be7c <VL53L0X_RdWord+0x6c>)
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	021b      	lsls	r3, r3, #8
 800be5e:	b29a      	uxth	r2, r3
 800be60:	4b06      	ldr	r3, [pc, #24]	; (800be7c <VL53L0X_RdWord+0x6c>)
 800be62:	785b      	ldrb	r3, [r3, #1]
 800be64:	b29b      	uxth	r3, r3
 800be66:	4413      	add	r3, r2
 800be68:	b29a      	uxth	r2, r3
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 800be6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3718      	adds	r7, #24
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	20001214 	.word	0x20001214

0800be80 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	460b      	mov	r3, r1
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be8e:	2300      	movs	r3, #0
 800be90:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800be92:	f107 030b 	add.w	r3, r7, #11
 800be96:	2201      	movs	r2, #1
 800be98:	4619      	mov	r1, r3
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f7ff fef0 	bl	800bc80 <_I2CWrite>
 800bea0:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d002      	beq.n	800beae <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bea8:	23ec      	movs	r3, #236	; 0xec
 800beaa:	75fb      	strb	r3, [r7, #23]
        goto done;
 800beac:	e01b      	b.n	800bee6 <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800beae:	2204      	movs	r2, #4
 800beb0:	4910      	ldr	r1, [pc, #64]	; (800bef4 <VL53L0X_RdDWord+0x74>)
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f7ff ff03 	bl	800bcbe <_I2CRead>
 800beb8:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d002      	beq.n	800bec6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bec0:	23ec      	movs	r3, #236	; 0xec
 800bec2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bec4:	e00f      	b.n	800bee6 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800bec6:	4b0b      	ldr	r3, [pc, #44]	; (800bef4 <VL53L0X_RdDWord+0x74>)
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	061a      	lsls	r2, r3, #24
 800becc:	4b09      	ldr	r3, [pc, #36]	; (800bef4 <VL53L0X_RdDWord+0x74>)
 800bece:	785b      	ldrb	r3, [r3, #1]
 800bed0:	041b      	lsls	r3, r3, #16
 800bed2:	441a      	add	r2, r3
 800bed4:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <VL53L0X_RdDWord+0x74>)
 800bed6:	789b      	ldrb	r3, [r3, #2]
 800bed8:	021b      	lsls	r3, r3, #8
 800beda:	4413      	add	r3, r2
 800bedc:	4a05      	ldr	r2, [pc, #20]	; (800bef4 <VL53L0X_RdDWord+0x74>)
 800bede:	78d2      	ldrb	r2, [r2, #3]
 800bee0:	441a      	add	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	601a      	str	r2, [r3, #0]

done:
    return Status;
 800bee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3718      	adds	r7, #24
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	20001214 	.word	0x20001214

0800bef8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	460b      	mov	r3, r1
 800bf02:	70fb      	strb	r3, [r7, #3]
 800bf04:	4613      	mov	r3, r2
 800bf06:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bf0c:	4a0b      	ldr	r2, [pc, #44]	; (800bf3c <VL53L0X_WrByte+0x44>)
 800bf0e:	78fb      	ldrb	r3, [r7, #3]
 800bf10:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800bf12:	4a0a      	ldr	r2, [pc, #40]	; (800bf3c <VL53L0X_WrByte+0x44>)
 800bf14:	78bb      	ldrb	r3, [r7, #2]
 800bf16:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800bf18:	2202      	movs	r2, #2
 800bf1a:	4908      	ldr	r1, [pc, #32]	; (800bf3c <VL53L0X_WrByte+0x44>)
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f7ff feaf 	bl	800bc80 <_I2CWrite>
 800bf22:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d001      	beq.n	800bf2e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bf2a:	23ec      	movs	r3, #236	; 0xec
 800bf2c:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800bf2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	20001214 	.word	0x20001214

0800bf40 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	70fb      	strb	r3, [r7, #3]
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf50:	2300      	movs	r3, #0
 800bf52:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800bf54:	4a0e      	ldr	r2, [pc, #56]	; (800bf90 <VL53L0X_WrWord+0x50>)
 800bf56:	78fb      	ldrb	r3, [r7, #3]
 800bf58:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800bf5a:	883b      	ldrh	r3, [r7, #0]
 800bf5c:	0a1b      	lsrs	r3, r3, #8
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	4b0b      	ldr	r3, [pc, #44]	; (800bf90 <VL53L0X_WrWord+0x50>)
 800bf64:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800bf66:	883b      	ldrh	r3, [r7, #0]
 800bf68:	b2da      	uxtb	r2, r3
 800bf6a:	4b09      	ldr	r3, [pc, #36]	; (800bf90 <VL53L0X_WrWord+0x50>)
 800bf6c:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800bf6e:	2203      	movs	r2, #3
 800bf70:	4907      	ldr	r1, [pc, #28]	; (800bf90 <VL53L0X_WrWord+0x50>)
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7ff fe84 	bl	800bc80 <_I2CWrite>
 800bf78:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d001      	beq.n	800bf84 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bf80:	23ec      	movs	r3, #236	; 0xec
 800bf82:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800bf84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3710      	adds	r7, #16
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	20001214 	.word	0x20001214

0800bf94 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	4611      	mov	r1, r2
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	70fb      	strb	r3, [r7, #3]
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	70bb      	strb	r3, [r7, #2]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800bfb2:	f107 020e 	add.w	r2, r7, #14
 800bfb6:	78fb      	ldrb	r3, [r7, #3]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7ff fea1 	bl	800bd02 <VL53L0X_RdByte>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 800bfc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d110      	bne.n	800bfee <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 800bfcc:	7bba      	ldrb	r2, [r7, #14]
 800bfce:	78bb      	ldrb	r3, [r7, #2]
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	b2da      	uxtb	r2, r3
 800bfd4:	787b      	ldrb	r3, [r7, #1]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800bfdc:	7bba      	ldrb	r2, [r7, #14]
 800bfde:	78fb      	ldrb	r3, [r7, #3]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f7ff ff88 	bl	800bef8 <VL53L0X_WrByte>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	73fb      	strb	r3, [r7, #15]
 800bfec:	e000      	b.n	800bff0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800bfee:	bf00      	nop
done:
    return Status;
 800bff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c004:	2300      	movs	r3, #0
 800c006:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800c008:	2002      	movs	r0, #2
 800c00a:	f7f8 f92d 	bl	8004268 <HAL_Delay>
    return status;
 800c00e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
	...

0800c01c <round>:
 800c01c:	b538      	push	{r3, r4, r5, lr}
 800c01e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c022:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800c026:	2a13      	cmp	r2, #19
 800c028:	460b      	mov	r3, r1
 800c02a:	4684      	mov	ip, r0
 800c02c:	468e      	mov	lr, r1
 800c02e:	4604      	mov	r4, r0
 800c030:	dc20      	bgt.n	800c074 <round+0x58>
 800c032:	2a00      	cmp	r2, #0
 800c034:	db0e      	blt.n	800c054 <round+0x38>
 800c036:	491e      	ldr	r1, [pc, #120]	; (800c0b0 <round+0x94>)
 800c038:	4111      	asrs	r1, r2
 800c03a:	ea03 0001 	and.w	r0, r3, r1
 800c03e:	4320      	orrs	r0, r4
 800c040:	d015      	beq.n	800c06e <round+0x52>
 800c042:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c046:	fa43 f202 	asr.w	r2, r3, r2
 800c04a:	4496      	add	lr, r2
 800c04c:	2400      	movs	r4, #0
 800c04e:	ea2e 0e01 	bic.w	lr, lr, r1
 800c052:	e00a      	b.n	800c06a <round+0x4e>
 800c054:	3201      	adds	r2, #1
 800c056:	bf14      	ite	ne
 800c058:	2400      	movne	r4, #0
 800c05a:	2400      	moveq	r4, #0
 800c05c:	f001 4e00 	and.w	lr, r1, #2147483648	; 0x80000000
 800c060:	bf04      	itt	eq
 800c062:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
 800c066:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
 800c06a:	4673      	mov	r3, lr
 800c06c:	46a4      	mov	ip, r4
 800c06e:	4660      	mov	r0, ip
 800c070:	4619      	mov	r1, r3
 800c072:	bd38      	pop	{r3, r4, r5, pc}
 800c074:	2a33      	cmp	r2, #51	; 0x33
 800c076:	dd08      	ble.n	800c08a <round+0x6e>
 800c078:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c07c:	d1f7      	bne.n	800c06e <round+0x52>
 800c07e:	4602      	mov	r2, r0
 800c080:	f7f4 fa4a 	bl	8000518 <__adddf3>
 800c084:	4684      	mov	ip, r0
 800c086:	460b      	mov	r3, r1
 800c088:	e7f1      	b.n	800c06e <round+0x52>
 800c08a:	f04f 31ff 	mov.w	r1, #4294967295
 800c08e:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800c092:	fa21 f505 	lsr.w	r5, r1, r5
 800c096:	4228      	tst	r0, r5
 800c098:	d0e9      	beq.n	800c06e <round+0x52>
 800c09a:	2301      	movs	r3, #1
 800c09c:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800c0a0:	fa03 f202 	lsl.w	r2, r3, r2
 800c0a4:	1884      	adds	r4, r0, r2
 800c0a6:	bf28      	it	cs
 800c0a8:	449e      	addcs	lr, r3
 800c0aa:	ea24 0405 	bic.w	r4, r4, r5
 800c0ae:	e7dc      	b.n	800c06a <round+0x4e>
 800c0b0:	000fffff 	.word	0x000fffff

0800c0b4 <__libc_init_array>:
 800c0b4:	b570      	push	{r4, r5, r6, lr}
 800c0b6:	2600      	movs	r6, #0
 800c0b8:	4d0c      	ldr	r5, [pc, #48]	; (800c0ec <__libc_init_array+0x38>)
 800c0ba:	4c0d      	ldr	r4, [pc, #52]	; (800c0f0 <__libc_init_array+0x3c>)
 800c0bc:	1b64      	subs	r4, r4, r5
 800c0be:	10a4      	asrs	r4, r4, #2
 800c0c0:	42a6      	cmp	r6, r4
 800c0c2:	d109      	bne.n	800c0d8 <__libc_init_array+0x24>
 800c0c4:	f000 f838 	bl	800c138 <_init>
 800c0c8:	2600      	movs	r6, #0
 800c0ca:	4d0a      	ldr	r5, [pc, #40]	; (800c0f4 <__libc_init_array+0x40>)
 800c0cc:	4c0a      	ldr	r4, [pc, #40]	; (800c0f8 <__libc_init_array+0x44>)
 800c0ce:	1b64      	subs	r4, r4, r5
 800c0d0:	10a4      	asrs	r4, r4, #2
 800c0d2:	42a6      	cmp	r6, r4
 800c0d4:	d105      	bne.n	800c0e2 <__libc_init_array+0x2e>
 800c0d6:	bd70      	pop	{r4, r5, r6, pc}
 800c0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0dc:	4798      	blx	r3
 800c0de:	3601      	adds	r6, #1
 800c0e0:	e7ee      	b.n	800c0c0 <__libc_init_array+0xc>
 800c0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0e6:	4798      	blx	r3
 800c0e8:	3601      	adds	r6, #1
 800c0ea:	e7f2      	b.n	800c0d2 <__libc_init_array+0x1e>
 800c0ec:	0800c634 	.word	0x0800c634
 800c0f0:	0800c634 	.word	0x0800c634
 800c0f4:	0800c634 	.word	0x0800c634
 800c0f8:	0800c638 	.word	0x0800c638

0800c0fc <memcpy>:
 800c0fc:	440a      	add	r2, r1
 800c0fe:	4291      	cmp	r1, r2
 800c100:	f100 33ff 	add.w	r3, r0, #4294967295
 800c104:	d100      	bne.n	800c108 <memcpy+0xc>
 800c106:	4770      	bx	lr
 800c108:	b510      	push	{r4, lr}
 800c10a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c10e:	4291      	cmp	r1, r2
 800c110:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c114:	d1f9      	bne.n	800c10a <memcpy+0xe>
 800c116:	bd10      	pop	{r4, pc}

0800c118 <memset>:
 800c118:	4603      	mov	r3, r0
 800c11a:	4402      	add	r2, r0
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d100      	bne.n	800c122 <memset+0xa>
 800c120:	4770      	bx	lr
 800c122:	f803 1b01 	strb.w	r1, [r3], #1
 800c126:	e7f9      	b.n	800c11c <memset+0x4>

0800c128 <strcpy>:
 800c128:	4603      	mov	r3, r0
 800c12a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c12e:	f803 2b01 	strb.w	r2, [r3], #1
 800c132:	2a00      	cmp	r2, #0
 800c134:	d1f9      	bne.n	800c12a <strcpy+0x2>
 800c136:	4770      	bx	lr

0800c138 <_init>:
 800c138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13a:	bf00      	nop
 800c13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c13e:	bc08      	pop	{r3}
 800c140:	469e      	mov	lr, r3
 800c142:	4770      	bx	lr

0800c144 <_fini>:
 800c144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c146:	bf00      	nop
 800c148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c14a:	bc08      	pop	{r3}
 800c14c:	469e      	mov	lr, r3
 800c14e:	4770      	bx	lr
