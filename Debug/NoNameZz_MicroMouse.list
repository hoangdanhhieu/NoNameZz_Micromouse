
NoNameZz_MicroMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e33c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800e44c  0800e44c  0001e44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea14  0800ea14  0002035c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea14  0800ea14  0002035c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea14  0800ea14  0002035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea14  0800ea14  0001ea14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea18  0800ea18  0001ea18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0800ea1c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce4  20000360  0800ed78  00020360  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002044  0800ed78  00022044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce9b  00000000  00000000  00020385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f8d  00000000  00000000  0003d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  000401b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001458  00000000  00000000  000416f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b805  00000000  00000000  00042b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c56  00000000  00000000  0005e355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095f4b  00000000  00000000  00076fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  0010cef6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f8  00000000  00000000  0010cf40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000360 	.word	0x20000360
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e434 	.word	0x0800e434

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000364 	.word	0x20000364
 800014c:	0800e434 	.word	0x0800e434

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_d2iz>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b6c:	d215      	bcs.n	8000b9a <__aeabi_d2iz+0x36>
 8000b6e:	d511      	bpl.n	8000b94 <__aeabi_d2iz+0x30>
 8000b70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b78:	d912      	bls.n	8000ba0 <__aeabi_d2iz+0x3c>
 8000b7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d105      	bne.n	8000bac <__aeabi_d2iz+0x48>
 8000ba0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	bf08      	it	eq
 8000ba6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_d2uiz>:
 8000bb4:	004a      	lsls	r2, r1, #1
 8000bb6:	d211      	bcs.n	8000bdc <__aeabi_d2uiz+0x28>
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bbc:	d211      	bcs.n	8000be2 <__aeabi_d2uiz+0x2e>
 8000bbe:	d50d      	bpl.n	8000bdc <__aeabi_d2uiz+0x28>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d40e      	bmi.n	8000be8 <__aeabi_d2uiz+0x34>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d102      	bne.n	8000bee <__aeabi_d2uiz+0x3a>
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	4770      	bx	lr
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_frsub>:
 8000bf4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	e002      	b.n	8000c00 <__addsf3>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fsub>:
 8000bfc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c00 <__addsf3>:
 8000c00:	0042      	lsls	r2, r0, #1
 8000c02:	bf1f      	itttt	ne
 8000c04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c08:	ea92 0f03 	teqne	r2, r3
 8000c0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c14:	d06a      	beq.n	8000cec <__addsf3+0xec>
 8000c16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1e:	bfc1      	itttt	gt
 8000c20:	18d2      	addgt	r2, r2, r3
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	4048      	eorgt	r0, r1
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	bfb8      	it	lt
 8000c2a:	425b      	neglt	r3, r3
 8000c2c:	2b19      	cmp	r3, #25
 8000c2e:	bf88      	it	hi
 8000c30:	4770      	bxhi	lr
 8000c32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3e:	bf18      	it	ne
 8000c40:	4240      	negne	r0, r0
 8000c42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4e:	bf18      	it	ne
 8000c50:	4249      	negne	r1, r1
 8000c52:	ea92 0f03 	teq	r2, r3
 8000c56:	d03f      	beq.n	8000cd8 <__addsf3+0xd8>
 8000c58:	f1a2 0201 	sub.w	r2, r2, #1
 8000c5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c60:	eb10 000c 	adds.w	r0, r0, ip
 8000c64:	f1c3 0320 	rsb	r3, r3, #32
 8000c68:	fa01 f103 	lsl.w	r1, r1, r3
 8000c6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__addsf3+0x78>
 8000c72:	4249      	negs	r1, r1
 8000c74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c7c:	d313      	bcc.n	8000ca6 <__addsf3+0xa6>
 8000c7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c82:	d306      	bcc.n	8000c92 <__addsf3+0x92>
 8000c84:	0840      	lsrs	r0, r0, #1
 8000c86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8a:	f102 0201 	add.w	r2, r2, #1
 8000c8e:	2afe      	cmp	r2, #254	; 0xfe
 8000c90:	d251      	bcs.n	8000d36 <__addsf3+0x136>
 8000c92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9a:	bf08      	it	eq
 8000c9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ca0:	ea40 0003 	orr.w	r0, r0, r3
 8000ca4:	4770      	bx	lr
 8000ca6:	0049      	lsls	r1, r1, #1
 8000ca8:	eb40 0000 	adc.w	r0, r0, r0
 8000cac:	3a01      	subs	r2, #1
 8000cae:	bf28      	it	cs
 8000cb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb4:	d2ed      	bcs.n	8000c92 <__addsf3+0x92>
 8000cb6:	fab0 fc80 	clz	ip, r0
 8000cba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc6:	bfaa      	itet	ge
 8000cc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ccc:	4252      	neglt	r2, r2
 8000cce:	4318      	orrge	r0, r3
 8000cd0:	bfbc      	itt	lt
 8000cd2:	40d0      	lsrlt	r0, r2
 8000cd4:	4318      	orrlt	r0, r3
 8000cd6:	4770      	bx	lr
 8000cd8:	f092 0f00 	teq	r2, #0
 8000cdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce0:	bf06      	itte	eq
 8000ce2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce6:	3201      	addeq	r2, #1
 8000ce8:	3b01      	subne	r3, #1
 8000cea:	e7b5      	b.n	8000c58 <__addsf3+0x58>
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d021      	beq.n	8000d40 <__addsf3+0x140>
 8000cfc:	ea92 0f03 	teq	r2, r3
 8000d00:	d004      	beq.n	8000d0c <__addsf3+0x10c>
 8000d02:	f092 0f00 	teq	r2, #0
 8000d06:	bf08      	it	eq
 8000d08:	4608      	moveq	r0, r1
 8000d0a:	4770      	bx	lr
 8000d0c:	ea90 0f01 	teq	r0, r1
 8000d10:	bf1c      	itt	ne
 8000d12:	2000      	movne	r0, #0
 8000d14:	4770      	bxne	lr
 8000d16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1a:	d104      	bne.n	8000d26 <__addsf3+0x126>
 8000d1c:	0040      	lsls	r0, r0, #1
 8000d1e:	bf28      	it	cs
 8000d20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2a:	bf3c      	itt	cc
 8000d2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d30:	4770      	bxcc	lr
 8000d32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d44:	bf16      	itet	ne
 8000d46:	4608      	movne	r0, r1
 8000d48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d4c:	4601      	movne	r1, r0
 8000d4e:	0242      	lsls	r2, r0, #9
 8000d50:	bf06      	itte	eq
 8000d52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d56:	ea90 0f01 	teqeq	r0, r1
 8000d5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_ui2f>:
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e004      	b.n	8000d70 <__aeabi_i2f+0x8>
 8000d66:	bf00      	nop

08000d68 <__aeabi_i2f>:
 8000d68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d6c:	bf48      	it	mi
 8000d6e:	4240      	negmi	r0, r0
 8000d70:	ea5f 0c00 	movs.w	ip, r0
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d7c:	4601      	mov	r1, r0
 8000d7e:	f04f 0000 	mov.w	r0, #0
 8000d82:	e01c      	b.n	8000dbe <__aeabi_l2f+0x2a>

08000d84 <__aeabi_ul2f>:
 8000d84:	ea50 0201 	orrs.w	r2, r0, r1
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	e00a      	b.n	8000da8 <__aeabi_l2f+0x14>
 8000d92:	bf00      	nop

08000d94 <__aeabi_l2f>:
 8000d94:	ea50 0201 	orrs.w	r2, r0, r1
 8000d98:	bf08      	it	eq
 8000d9a:	4770      	bxeq	lr
 8000d9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da0:	d502      	bpl.n	8000da8 <__aeabi_l2f+0x14>
 8000da2:	4240      	negs	r0, r0
 8000da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da8:	ea5f 0c01 	movs.w	ip, r1
 8000dac:	bf02      	ittt	eq
 8000dae:	4684      	moveq	ip, r0
 8000db0:	4601      	moveq	r1, r0
 8000db2:	2000      	moveq	r0, #0
 8000db4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db8:	bf08      	it	eq
 8000dba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc2:	fabc f28c 	clz	r2, ip
 8000dc6:	3a08      	subs	r2, #8
 8000dc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dcc:	db10      	blt.n	8000df0 <__aeabi_l2f+0x5c>
 8000dce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de0:	fa20 f202 	lsr.w	r2, r0, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	f020 0001 	biceq.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	f102 0220 	add.w	r2, r2, #32
 8000df4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df8:	f1c2 0220 	rsb	r2, r2, #32
 8000dfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e00:	fa21 f202 	lsr.w	r2, r1, r2
 8000e04:	eb43 0002 	adc.w	r0, r3, r2
 8000e08:	bf08      	it	eq
 8000e0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0e:	4770      	bx	lr

08000e10 <start_fill>:

void found(int16_t *index);
void set_wall(bool rbl, bool rbr, bool rbf);


void start_fill() {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
	memset(visited, false, sizeof(visited));
 8000e16:	2264      	movs	r2, #100	; 0x64
 8000e18:	2100      	movs	r1, #0
 8000e1a:	48af      	ldr	r0, [pc, #700]	; (80010d8 <start_fill+0x2c8>)
 8000e1c:	f00c fe8e 	bl	800db3c <memset>
	memset(maze, 0, sizeof(maze));
 8000e20:	2264      	movs	r2, #100	; 0x64
 8000e22:	2100      	movs	r1, #0
 8000e24:	48ad      	ldr	r0, [pc, #692]	; (80010dc <start_fill+0x2cc>)
 8000e26:	f00c fe89 	bl	800db3c <memset>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000e2a:	4bad      	ldr	r3, [pc, #692]	; (80010e0 <start_fill+0x2d0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000e32:	4bac      	ldr	r3, [pc, #688]	; (80010e4 <start_fill+0x2d4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
	visited[starting_coordinates[1]][starting_coordinates[0]] = true;
 8000e3a:	4bab      	ldr	r3, [pc, #684]	; (80010e8 <start_fill+0x2d8>)
 8000e3c:	785b      	ldrb	r3, [r3, #1]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4ba9      	ldr	r3, [pc, #676]	; (80010e8 <start_fill+0x2d8>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	4aa4      	ldr	r2, [pc, #656]	; (80010d8 <start_fill+0x2c8>)
 8000e48:	460b      	mov	r3, r1
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	4403      	add	r3, r0
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
	int16_t i = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	81fb      	strh	r3, [r7, #14]
	x = starting_coordinates[0];
 8000e5c:	4ba2      	ldr	r3, [pc, #648]	; (80010e8 <start_fill+0x2d8>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b25a      	sxtb	r2, r3
 8000e62:	4ba2      	ldr	r3, [pc, #648]	; (80010ec <start_fill+0x2dc>)
 8000e64:	701a      	strb	r2, [r3, #0]
	y = starting_coordinates[1] + 1;
 8000e66:	4ba0      	ldr	r3, [pc, #640]	; (80010e8 <start_fill+0x2d8>)
 8000e68:	785b      	ldrb	r3, [r3, #1]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	b25a      	sxtb	r2, r3
 8000e70:	4b9f      	ldr	r3, [pc, #636]	; (80010f0 <start_fill+0x2e0>)
 8000e72:	701a      	strb	r2, [r3, #0]
	maze[y - 1][x] |= bottom_wall;
 8000e74:	4b9e      	ldr	r3, [pc, #632]	; (80010f0 <start_fill+0x2e0>)
 8000e76:	f993 3000 	ldrsb.w	r3, [r3]
 8000e7a:	1e5a      	subs	r2, r3, #1
 8000e7c:	4b9b      	ldr	r3, [pc, #620]	; (80010ec <start_fill+0x2dc>)
 8000e7e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e82:	4618      	mov	r0, r3
 8000e84:	4995      	ldr	r1, [pc, #596]	; (80010dc <start_fill+0x2cc>)
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	440b      	add	r3, r1
 8000e90:	4403      	add	r3, r0
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4a96      	ldr	r2, [pc, #600]	; (80010f0 <start_fill+0x2e0>)
 8000e96:	f992 2000 	ldrsb.w	r2, [r2]
 8000e9a:	3a01      	subs	r2, #1
 8000e9c:	4993      	ldr	r1, [pc, #588]	; (80010ec <start_fill+0x2dc>)
 8000e9e:	f991 1000 	ldrsb.w	r1, [r1]
 8000ea2:	460c      	mov	r4, r1
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	b2d8      	uxtb	r0, r3
 8000eaa:	498c      	ldr	r1, [pc, #560]	; (80010dc <start_fill+0x2cc>)
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	440b      	add	r3, r1
 8000eb6:	4423      	add	r3, r4
 8000eb8:	4602      	mov	r2, r0
 8000eba:	701a      	strb	r2, [r3, #0]
	direction = north;
 8000ebc:	4b8d      	ldr	r3, [pc, #564]	; (80010f4 <start_fill+0x2e4>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	701a      	strb	r2, [r3, #0]
	bool frontfree, leftfree, rightfree;
	uint16_t left_Sensor0, right_Sensor0,
				left_Sensor45, right_Sensor45,
				left_Sensor90, right_Sensor90;
	while(1){
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec8:	488b      	ldr	r0, [pc, #556]	; (80010f8 <start_fill+0x2e8>)
 8000eca:	f004 ff49 	bl	8005d60 <HAL_GPIO_WritePin>
		vl53l0x_GetRanging_now(leftSensor0, &left_Sensor0);
 8000ece:	4b8b      	ldr	r3, [pc, #556]	; (80010fc <start_fill+0x2ec>)
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f00c fb76 	bl	800d5ca <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor0, &right_Sensor0);
 8000ede:	4b87      	ldr	r3, [pc, #540]	; (80010fc <start_fill+0x2ec>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f107 020a 	add.w	r2, r7, #10
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f00c fb6e 	bl	800d5ca <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(leftSensor45, &left_Sensor45);
 8000eee:	4b83      	ldr	r3, [pc, #524]	; (80010fc <start_fill+0x2ec>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f107 0208 	add.w	r2, r7, #8
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f00c fb66 	bl	800d5ca <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor45, &right_Sensor45);
 8000efe:	4b7f      	ldr	r3, [pc, #508]	; (80010fc <start_fill+0x2ec>)
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	1dba      	adds	r2, r7, #6
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f00c fb5f 	bl	800d5ca <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(leftSensor90, &left_Sensor90);
 8000f0c:	4b7b      	ldr	r3, [pc, #492]	; (80010fc <start_fill+0x2ec>)
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	1d3a      	adds	r2, r7, #4
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f00c fb58 	bl	800d5ca <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor90, &right_Sensor90);
 8000f1a:	4b78      	ldr	r3, [pc, #480]	; (80010fc <start_fill+0x2ec>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	1cba      	adds	r2, r7, #2
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00c fb51 	bl	800d5ca <vl53l0x_GetRanging_now>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2e:	4872      	ldr	r0, [pc, #456]	; (80010f8 <start_fill+0x2e8>)
 8000f30:	f004 ff16 	bl	8005d60 <HAL_GPIO_WritePin>

		frontfree = (left_Sensor0 > HasfrontWallValue || right_Sensor0 > HasfrontWallValue);
 8000f34:	89bb      	ldrh	r3, [r7, #12]
 8000f36:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000f3a:	d803      	bhi.n	8000f44 <start_fill+0x134>
 8000f3c:	897b      	ldrh	r3, [r7, #10]
 8000f3e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000f42:	d901      	bls.n	8000f48 <start_fill+0x138>
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <start_fill+0x13a>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	77fb      	strb	r3, [r7, #31]
 8000f4c:	7ffb      	ldrb	r3, [r7, #31]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	77fb      	strb	r3, [r7, #31]
		leftfree  = left_Sensor45 > HasleftWallValue_45;
 8000f54:	893b      	ldrh	r3, [r7, #8]
 8000f56:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f5a:	bf8c      	ite	hi
 8000f5c:	2301      	movhi	r3, #1
 8000f5e:	2300      	movls	r3, #0
 8000f60:	77bb      	strb	r3, [r7, #30]
		rightfree = right_Sensor45 > HasrightWallValue_45;
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f68:	bf8c      	ite	hi
 8000f6a:	2301      	movhi	r3, #1
 8000f6c:	2300      	movls	r3, #0
 8000f6e:	777b      	strb	r3, [r7, #29]
		set_wall(!leftfree, !rightfree, !frontfree);
 8000f70:	7fbb      	ldrb	r3, [r7, #30]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	bf14      	ite	ne
 8000f76:	2301      	movne	r3, #1
 8000f78:	2300      	moveq	r3, #0
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f083 0301 	eor.w	r3, r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	b2d8      	uxtb	r0, r3
 8000f88:	7f7b      	ldrb	r3, [r7, #29]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	bf14      	ite	ne
 8000f8e:	2301      	movne	r3, #1
 8000f90:	2300      	moveq	r3, #0
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	f083 0301 	eor.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	b2d9      	uxtb	r1, r3
 8000fa0:	7ffb      	ldrb	r3, [r7, #31]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf14      	ite	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	2300      	moveq	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f083 0301 	eor.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	f001 fcf5 	bl	80029a8 <set_wall>
		switch(direction){
 8000fbe:	4b4d      	ldr	r3, [pc, #308]	; (80010f4 <start_fill+0x2e4>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	f200 81a5 	bhi.w	8001312 <start_fill+0x502>
 8000fc8:	a201      	add	r2, pc, #4	; (adr r2, 8000fd0 <start_fill+0x1c0>)
 8000fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fce:	bf00      	nop
 8000fd0:	08000fe1 	.word	0x08000fe1
 8000fd4:	080010a3 	.word	0x080010a3
 8000fd8:	0800118f 	.word	0x0800118f
 8000fdc:	08001251 	.word	0x08001251
			case west:
				frontfree = frontfree && !visited[y][x - 1];
 8000fe0:	7ffb      	ldrb	r3, [r7, #31]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d016      	beq.n	8001014 <start_fill+0x204>
 8000fe6:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <start_fill+0x2e0>)
 8000fe8:	f993 3000 	ldrsb.w	r3, [r3]
 8000fec:	4618      	mov	r0, r3
 8000fee:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <start_fill+0x2dc>)
 8000ff0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ff4:	1e5a      	subs	r2, r3, #1
 8000ff6:	4938      	ldr	r1, [pc, #224]	; (80010d8 <start_fill+0x2c8>)
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4403      	add	r3, r0
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	440b      	add	r3, r1
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	f083 0301 	eor.w	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <start_fill+0x204>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <start_fill+0x206>
 8001014:	2300      	movs	r3, #0
 8001016:	77fb      	strb	r3, [r7, #31]
 8001018:	7ffb      	ldrb	r3, [r7, #31]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	77fb      	strb	r3, [r7, #31]
				leftfree  = leftfree && !visited[y + 1][x];
 8001020:	7fbb      	ldrb	r3, [r7, #30]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d016      	beq.n	8001054 <start_fill+0x244>
 8001026:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <start_fill+0x2e0>)
 8001028:	f993 3000 	ldrsb.w	r3, [r3]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <start_fill+0x2dc>)
 8001030:	f993 3000 	ldrsb.w	r3, [r3]
 8001034:	4618      	mov	r0, r3
 8001036:	4928      	ldr	r1, [pc, #160]	; (80010d8 <start_fill+0x2c8>)
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	440b      	add	r3, r1
 8001042:	4403      	add	r3, r0
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	f083 0301 	eor.w	r3, r3, #1
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <start_fill+0x244>
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <start_fill+0x246>
 8001054:	2300      	movs	r3, #0
 8001056:	77bb      	strb	r3, [r7, #30]
 8001058:	7fbb      	ldrb	r3, [r7, #30]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	77bb      	strb	r3, [r7, #30]
				rightfree  = rightfree && !visited[y - 1][x];
 8001060:	7f7b      	ldrb	r3, [r7, #29]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d016      	beq.n	8001094 <start_fill+0x284>
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <start_fill+0x2e0>)
 8001068:	f993 3000 	ldrsb.w	r3, [r3]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <start_fill+0x2dc>)
 8001070:	f993 3000 	ldrsb.w	r3, [r3]
 8001074:	4618      	mov	r0, r3
 8001076:	4918      	ldr	r1, [pc, #96]	; (80010d8 <start_fill+0x2c8>)
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	440b      	add	r3, r1
 8001082:	4403      	add	r3, r0
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	f083 0301 	eor.w	r3, r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <start_fill+0x284>
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <start_fill+0x286>
 8001094:	2300      	movs	r3, #0
 8001096:	777b      	strb	r3, [r7, #29]
 8001098:	7f7b      	ldrb	r3, [r7, #29]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	777b      	strb	r3, [r7, #29]
				break;
 80010a0:	e137      	b.n	8001312 <start_fill+0x502>
			case east:
				frontfree = frontfree && !visited[y][x + 1];
 80010a2:	7ffb      	ldrb	r3, [r7, #31]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d02b      	beq.n	8001100 <start_fill+0x2f0>
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <start_fill+0x2e0>)
 80010aa:	f993 3000 	ldrsb.w	r3, [r3]
 80010ae:	4618      	mov	r0, r3
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <start_fill+0x2dc>)
 80010b2:	f993 3000 	ldrsb.w	r3, [r3]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	4907      	ldr	r1, [pc, #28]	; (80010d8 <start_fill+0x2c8>)
 80010ba:	4603      	mov	r3, r0
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4403      	add	r3, r0
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	440b      	add	r3, r1
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	f083 0301 	eor.w	r3, r3, #1
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d016      	beq.n	8001100 <start_fill+0x2f0>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e015      	b.n	8001102 <start_fill+0x2f2>
 80010d6:	bf00      	nop
 80010d8:	20000688 	.word	0x20000688
 80010dc:	20000624 	.word	0x20000624
 80010e0:	2000054c 	.word	0x2000054c
 80010e4:	20000594 	.word	0x20000594
 80010e8:	0800e91c 	.word	0x0800e91c
 80010ec:	200004aa 	.word	0x200004aa
 80010f0:	200004ab 	.word	0x200004ab
 80010f4:	200004ac 	.word	0x200004ac
 80010f8:	40011000 	.word	0x40011000
 80010fc:	20001078 	.word	0x20001078
 8001100:	2300      	movs	r3, #0
 8001102:	77fb      	strb	r3, [r7, #31]
 8001104:	7ffb      	ldrb	r3, [r7, #31]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	77fb      	strb	r3, [r7, #31]
				leftfree  = leftfree && !visited[y - 1][x];
 800110c:	7fbb      	ldrb	r3, [r7, #30]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d016      	beq.n	8001140 <start_fill+0x330>
 8001112:	4bb6      	ldr	r3, [pc, #728]	; (80013ec <start_fill+0x5dc>)
 8001114:	f993 3000 	ldrsb.w	r3, [r3]
 8001118:	1e5a      	subs	r2, r3, #1
 800111a:	4bb5      	ldr	r3, [pc, #724]	; (80013f0 <start_fill+0x5e0>)
 800111c:	f993 3000 	ldrsb.w	r3, [r3]
 8001120:	4618      	mov	r0, r3
 8001122:	49b4      	ldr	r1, [pc, #720]	; (80013f4 <start_fill+0x5e4>)
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	440b      	add	r3, r1
 800112e:	4403      	add	r3, r0
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	f083 0301 	eor.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <start_fill+0x330>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <start_fill+0x332>
 8001140:	2300      	movs	r3, #0
 8001142:	77bb      	strb	r3, [r7, #30]
 8001144:	7fbb      	ldrb	r3, [r7, #30]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	77bb      	strb	r3, [r7, #30]
				rightfree  = rightfree && !visited[y + 1][x];
 800114c:	7f7b      	ldrb	r3, [r7, #29]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d016      	beq.n	8001180 <start_fill+0x370>
 8001152:	4ba6      	ldr	r3, [pc, #664]	; (80013ec <start_fill+0x5dc>)
 8001154:	f993 3000 	ldrsb.w	r3, [r3]
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	4ba5      	ldr	r3, [pc, #660]	; (80013f0 <start_fill+0x5e0>)
 800115c:	f993 3000 	ldrsb.w	r3, [r3]
 8001160:	4618      	mov	r0, r3
 8001162:	49a4      	ldr	r1, [pc, #656]	; (80013f4 <start_fill+0x5e4>)
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	440b      	add	r3, r1
 800116e:	4403      	add	r3, r0
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	f083 0301 	eor.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <start_fill+0x370>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <start_fill+0x372>
 8001180:	2300      	movs	r3, #0
 8001182:	777b      	strb	r3, [r7, #29]
 8001184:	7f7b      	ldrb	r3, [r7, #29]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	777b      	strb	r3, [r7, #29]
				break;
 800118c:	e0c1      	b.n	8001312 <start_fill+0x502>
			case north:
				frontfree = frontfree && !visited[y - 1][x];
 800118e:	7ffb      	ldrb	r3, [r7, #31]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d016      	beq.n	80011c2 <start_fill+0x3b2>
 8001194:	4b95      	ldr	r3, [pc, #596]	; (80013ec <start_fill+0x5dc>)
 8001196:	f993 3000 	ldrsb.w	r3, [r3]
 800119a:	1e5a      	subs	r2, r3, #1
 800119c:	4b94      	ldr	r3, [pc, #592]	; (80013f0 <start_fill+0x5e0>)
 800119e:	f993 3000 	ldrsb.w	r3, [r3]
 80011a2:	4618      	mov	r0, r3
 80011a4:	4993      	ldr	r1, [pc, #588]	; (80013f4 <start_fill+0x5e4>)
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	440b      	add	r3, r1
 80011b0:	4403      	add	r3, r0
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <start_fill+0x3b2>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <start_fill+0x3b4>
 80011c2:	2300      	movs	r3, #0
 80011c4:	77fb      	strb	r3, [r7, #31]
 80011c6:	7ffb      	ldrb	r3, [r7, #31]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	77fb      	strb	r3, [r7, #31]
				leftfree  = leftfree && !visited[y][x - 1];
 80011ce:	7fbb      	ldrb	r3, [r7, #30]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d016      	beq.n	8001202 <start_fill+0x3f2>
 80011d4:	4b85      	ldr	r3, [pc, #532]	; (80013ec <start_fill+0x5dc>)
 80011d6:	f993 3000 	ldrsb.w	r3, [r3]
 80011da:	4618      	mov	r0, r3
 80011dc:	4b84      	ldr	r3, [pc, #528]	; (80013f0 <start_fill+0x5e0>)
 80011de:	f993 3000 	ldrsb.w	r3, [r3]
 80011e2:	1e5a      	subs	r2, r3, #1
 80011e4:	4983      	ldr	r1, [pc, #524]	; (80013f4 <start_fill+0x5e4>)
 80011e6:	4603      	mov	r3, r0
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4403      	add	r3, r0
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	440b      	add	r3, r1
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <start_fill+0x3f2>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <start_fill+0x3f4>
 8001202:	2300      	movs	r3, #0
 8001204:	77bb      	strb	r3, [r7, #30]
 8001206:	7fbb      	ldrb	r3, [r7, #30]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	77bb      	strb	r3, [r7, #30]
				rightfree  = rightfree && !visited[y][x + 1];
 800120e:	7f7b      	ldrb	r3, [r7, #29]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d016      	beq.n	8001242 <start_fill+0x432>
 8001214:	4b75      	ldr	r3, [pc, #468]	; (80013ec <start_fill+0x5dc>)
 8001216:	f993 3000 	ldrsb.w	r3, [r3]
 800121a:	4618      	mov	r0, r3
 800121c:	4b74      	ldr	r3, [pc, #464]	; (80013f0 <start_fill+0x5e0>)
 800121e:	f993 3000 	ldrsb.w	r3, [r3]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	4973      	ldr	r1, [pc, #460]	; (80013f4 <start_fill+0x5e4>)
 8001226:	4603      	mov	r3, r0
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4403      	add	r3, r0
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	440b      	add	r3, r1
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	f083 0301 	eor.w	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <start_fill+0x432>
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <start_fill+0x434>
 8001242:	2300      	movs	r3, #0
 8001244:	777b      	strb	r3, [r7, #29]
 8001246:	7f7b      	ldrb	r3, [r7, #29]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	777b      	strb	r3, [r7, #29]
				break;
 800124e:	e060      	b.n	8001312 <start_fill+0x502>
			case south:
				frontfree = frontfree && !visited[y + 1][x];
 8001250:	7ffb      	ldrb	r3, [r7, #31]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d016      	beq.n	8001284 <start_fill+0x474>
 8001256:	4b65      	ldr	r3, [pc, #404]	; (80013ec <start_fill+0x5dc>)
 8001258:	f993 3000 	ldrsb.w	r3, [r3]
 800125c:	1c5a      	adds	r2, r3, #1
 800125e:	4b64      	ldr	r3, [pc, #400]	; (80013f0 <start_fill+0x5e0>)
 8001260:	f993 3000 	ldrsb.w	r3, [r3]
 8001264:	4618      	mov	r0, r3
 8001266:	4963      	ldr	r1, [pc, #396]	; (80013f4 <start_fill+0x5e4>)
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	440b      	add	r3, r1
 8001272:	4403      	add	r3, r0
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	f083 0301 	eor.w	r3, r3, #1
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <start_fill+0x474>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <start_fill+0x476>
 8001284:	2300      	movs	r3, #0
 8001286:	77fb      	strb	r3, [r7, #31]
 8001288:	7ffb      	ldrb	r3, [r7, #31]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	77fb      	strb	r3, [r7, #31]
				leftfree  = leftfree && !visited[y][x + 1];
 8001290:	7fbb      	ldrb	r3, [r7, #30]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d016      	beq.n	80012c4 <start_fill+0x4b4>
 8001296:	4b55      	ldr	r3, [pc, #340]	; (80013ec <start_fill+0x5dc>)
 8001298:	f993 3000 	ldrsb.w	r3, [r3]
 800129c:	4618      	mov	r0, r3
 800129e:	4b54      	ldr	r3, [pc, #336]	; (80013f0 <start_fill+0x5e0>)
 80012a0:	f993 3000 	ldrsb.w	r3, [r3]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	4953      	ldr	r1, [pc, #332]	; (80013f4 <start_fill+0x5e4>)
 80012a8:	4603      	mov	r3, r0
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4403      	add	r3, r0
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	440b      	add	r3, r1
 80012b2:	4413      	add	r3, r2
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	f083 0301 	eor.w	r3, r3, #1
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <start_fill+0x4b4>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <start_fill+0x4b6>
 80012c4:	2300      	movs	r3, #0
 80012c6:	77bb      	strb	r3, [r7, #30]
 80012c8:	7fbb      	ldrb	r3, [r7, #30]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	77bb      	strb	r3, [r7, #30]
				rightfree  = rightfree && !visited[y][x - 1];
 80012d0:	7f7b      	ldrb	r3, [r7, #29]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d016      	beq.n	8001304 <start_fill+0x4f4>
 80012d6:	4b45      	ldr	r3, [pc, #276]	; (80013ec <start_fill+0x5dc>)
 80012d8:	f993 3000 	ldrsb.w	r3, [r3]
 80012dc:	4618      	mov	r0, r3
 80012de:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <start_fill+0x5e0>)
 80012e0:	f993 3000 	ldrsb.w	r3, [r3]
 80012e4:	1e5a      	subs	r2, r3, #1
 80012e6:	4943      	ldr	r1, [pc, #268]	; (80013f4 <start_fill+0x5e4>)
 80012e8:	4603      	mov	r3, r0
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4403      	add	r3, r0
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	440b      	add	r3, r1
 80012f2:	4413      	add	r3, r2
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	f083 0301 	eor.w	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <start_fill+0x4f4>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <start_fill+0x4f6>
 8001304:	2300      	movs	r3, #0
 8001306:	777b      	strb	r3, [r7, #29]
 8001308:	7f7b      	ldrb	r3, [r7, #29]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	777b      	strb	r3, [r7, #29]
				break;
 8001310:	bf00      	nop
		}
		visited[y][x] = true;
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <start_fill+0x5dc>)
 8001314:	f993 3000 	ldrsb.w	r3, [r3]
 8001318:	4619      	mov	r1, r3
 800131a:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <start_fill+0x5e0>)
 800131c:	f993 3000 	ldrsb.w	r3, [r3]
 8001320:	4618      	mov	r0, r3
 8001322:	4a34      	ldr	r2, [pc, #208]	; (80013f4 <start_fill+0x5e4>)
 8001324:	460b      	mov	r3, r1
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	4403      	add	r3, r0
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
		if(x == ending_coordinates[0] && y == ending_coordinates[1]){
 8001334:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <start_fill+0x5e0>)
 8001336:	f993 3000 	ldrsb.w	r3, [r3]
 800133a:	461a      	mov	r2, r3
 800133c:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <start_fill+0x5e8>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d161      	bne.n	8001408 <start_fill+0x5f8>
 8001344:	4b29      	ldr	r3, [pc, #164]	; (80013ec <start_fill+0x5dc>)
 8001346:	f993 3000 	ldrsb.w	r3, [r3]
 800134a:	461a      	mov	r2, r3
 800134c:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <start_fill+0x5e8>)
 800134e:	785b      	ldrb	r3, [r3, #1]
 8001350:	429a      	cmp	r2, r3
 8001352:	d159      	bne.n	8001408 <start_fill+0x5f8>
			found(&i);
 8001354:	f107 030e 	add.w	r3, r7, #14
 8001358:	4618      	mov	r0, r3
 800135a:	f001 fa79 	bl	8002850 <found>
			maze[y][x] |= top_wall;
 800135e:	4b23      	ldr	r3, [pc, #140]	; (80013ec <start_fill+0x5dc>)
 8001360:	f993 3000 	ldrsb.w	r3, [r3]
 8001364:	4619      	mov	r1, r3
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <start_fill+0x5e0>)
 8001368:	f993 3000 	ldrsb.w	r3, [r3]
 800136c:	4618      	mov	r0, r3
 800136e:	4a23      	ldr	r2, [pc, #140]	; (80013fc <start_fill+0x5ec>)
 8001370:	460b      	mov	r3, r1
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	4403      	add	r3, r0
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <start_fill+0x5dc>)
 8001380:	f992 2000 	ldrsb.w	r2, [r2]
 8001384:	4611      	mov	r1, r2
 8001386:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <start_fill+0x5e0>)
 8001388:	f992 2000 	ldrsb.w	r2, [r2]
 800138c:	4614      	mov	r4, r2
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	b2d8      	uxtb	r0, r3
 8001394:	4a19      	ldr	r2, [pc, #100]	; (80013fc <start_fill+0x5ec>)
 8001396:	460b      	mov	r3, r1
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	4423      	add	r3, r4
 80013a2:	4602      	mov	r2, r0
 80013a4:	701a      	strb	r2, [r3, #0]
			found_path = 1;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <start_fill+0x5f0>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
			brake(2);
 80013ac:	2002      	movs	r0, #2
 80013ae:	f004 f92b 	bl	8005608 <brake>
			for(int i = 0; i < 15; i++){
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	e014      	b.n	80013e2 <start_fill+0x5d2>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013be:	4811      	ldr	r0, [pc, #68]	; (8001404 <start_fill+0x5f4>)
 80013c0:	f004 fcce 	bl	8005d60 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80013c4:	2064      	movs	r0, #100	; 0x64
 80013c6:	f004 f9e3 	bl	8005790 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <start_fill+0x5f4>)
 80013d2:	f004 fcc5 	bl	8005d60 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80013d6:	2064      	movs	r0, #100	; 0x64
 80013d8:	f004 f9da 	bl	8005790 <HAL_Delay>
			for(int i = 0; i < 15; i++){
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	3301      	adds	r3, #1
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	2b0e      	cmp	r3, #14
 80013e6:	dde7      	ble.n	80013b8 <start_fill+0x5a8>
			}
			break;
 80013e8:	f001 b952 	b.w	8002690 <start_fill+0x1880>
 80013ec:	200004ab 	.word	0x200004ab
 80013f0:	200004aa 	.word	0x200004aa
 80013f4:	20000688 	.word	0x20000688
 80013f8:	0800e920 	.word	0x0800e920
 80013fc:	20000624 	.word	0x20000624
 8001400:	200006ee 	.word	0x200006ee
 8001404:	40011000 	.word	0x40011000
		}

		if((leftfree && rightfree) || (leftfree && frontfree) || (rightfree && frontfree)){
 8001408:	7fbb      	ldrb	r3, [r7, #30]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <start_fill+0x604>
 800140e:	7f7b      	ldrb	r3, [r7, #29]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10d      	bne.n	8001430 <start_fill+0x620>
 8001414:	7fbb      	ldrb	r3, [r7, #30]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <start_fill+0x610>
 800141a:	7ffb      	ldrb	r3, [r7, #31]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d107      	bne.n	8001430 <start_fill+0x620>
 8001420:	7f7b      	ldrb	r3, [r7, #29]
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 80cb 	beq.w	80015be <start_fill+0x7ae>
 8001428:	7ffb      	ldrb	r3, [r7, #31]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 80c7 	beq.w	80015be <start_fill+0x7ae>
			i++;
 8001430:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001434:	b29b      	uxth	r3, r3
 8001436:	3301      	adds	r3, #1
 8001438:	b29b      	uxth	r3, r3
 800143a:	b21b      	sxth	r3, r3
 800143c:	81fb      	strh	r3, [r7, #14]
			stack[i][1] = x;
 800143e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001442:	4619      	mov	r1, r3
 8001444:	4bce      	ldr	r3, [pc, #824]	; (8001780 <start_fill+0x970>)
 8001446:	f993 0000 	ldrsb.w	r0, [r3]
 800144a:	4ace      	ldr	r2, [pc, #824]	; (8001784 <start_fill+0x974>)
 800144c:	460b      	mov	r3, r1
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	440b      	add	r3, r1
 8001452:	4413      	add	r3, r2
 8001454:	3301      	adds	r3, #1
 8001456:	4602      	mov	r2, r0
 8001458:	701a      	strb	r2, [r3, #0]
			stack[i][2] = y;
 800145a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800145e:	4619      	mov	r1, r3
 8001460:	4bc9      	ldr	r3, [pc, #804]	; (8001788 <start_fill+0x978>)
 8001462:	f993 0000 	ldrsb.w	r0, [r3]
 8001466:	4ac7      	ldr	r2, [pc, #796]	; (8001784 <start_fill+0x974>)
 8001468:	460b      	mov	r3, r1
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	440b      	add	r3, r1
 800146e:	4413      	add	r3, r2
 8001470:	3302      	adds	r3, #2
 8001472:	4602      	mov	r2, r0
 8001474:	701a      	strb	r2, [r3, #0]
			if(direction == west){
 8001476:	4bc5      	ldr	r3, [pc, #788]	; (800178c <start_fill+0x97c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d133      	bne.n	80014e6 <start_fill+0x6d6>
				if(rightfree){
 800147e:	7f7b      	ldrb	r3, [r7, #29]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d01c      	beq.n	80014be <start_fill+0x6ae>
					stack[i][0] = turn_right_90;
 8001484:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001488:	4619      	mov	r1, r3
 800148a:	4abe      	ldr	r2, [pc, #760]	; (8001784 <start_fill+0x974>)
 800148c:	460b      	mov	r3, r1
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	440b      	add	r3, r1
 8001492:	4413      	add	r3, r2
 8001494:	22ff      	movs	r2, #255	; 0xff
 8001496:	701a      	strb	r2, [r3, #0]
					turnRightHere;
 8001498:	2300      	movs	r3, #0
 800149a:	2201      	movs	r2, #1
 800149c:	f04f 0000 	mov.w	r0, #0
 80014a0:	49bb      	ldr	r1, [pc, #748]	; (8001790 <start_fill+0x980>)
 80014a2:	f003 fae5 	bl	8004a70 <go_straight>
 80014a6:	48b9      	ldr	r0, [pc, #740]	; (800178c <start_fill+0x97c>)
 80014a8:	f003 f986 	bl	80047b8 <turn_right90>
 80014ac:	2300      	movs	r3, #0
 80014ae:	2200      	movs	r2, #0
 80014b0:	f04f 0000 	mov.w	r0, #0
 80014b4:	49b7      	ldr	r1, [pc, #732]	; (8001794 <start_fill+0x984>)
 80014b6:	f003 fadb 	bl	8004a70 <go_straight>
			if(direction == west){
 80014ba:	f001 b8e7 	b.w	800268c <start_fill+0x187c>
				} else {
					stack[i][0] = straight;
 80014be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014c2:	4619      	mov	r1, r3
 80014c4:	4aaf      	ldr	r2, [pc, #700]	; (8001784 <start_fill+0x974>)
 80014c6:	460b      	mov	r3, r1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	440b      	add	r3, r1
 80014cc:	4413      	add	r3, r2
 80014ce:	22fa      	movs	r2, #250	; 0xfa
 80014d0:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0, -1);
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	2200      	movs	r2, #0
 80014d8:	a1a5      	add	r1, pc, #660	; (adr r1, 8001770 <start_fill+0x960>)
 80014da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014de:	f003 fac7 	bl	8004a70 <go_straight>
			if(direction == west){
 80014e2:	f001 b8d3 	b.w	800268c <start_fill+0x187c>
				}
			} else if(direction == east){
 80014e6:	4ba9      	ldr	r3, [pc, #676]	; (800178c <start_fill+0x97c>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d133      	bne.n	8001556 <start_fill+0x746>
				if(leftfree){
 80014ee:	7fbb      	ldrb	r3, [r7, #30]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01c      	beq.n	800152e <start_fill+0x71e>
					stack[i][0] = turn_left_90;
 80014f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014f8:	4619      	mov	r1, r3
 80014fa:	4aa2      	ldr	r2, [pc, #648]	; (8001784 <start_fill+0x974>)
 80014fc:	460b      	mov	r3, r1
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	440b      	add	r3, r1
 8001502:	4413      	add	r3, r2
 8001504:	22fc      	movs	r2, #252	; 0xfc
 8001506:	701a      	strb	r2, [r3, #0]
					turnLeftHere;
 8001508:	2300      	movs	r3, #0
 800150a:	2201      	movs	r2, #1
 800150c:	a19a      	add	r1, pc, #616	; (adr r1, 8001778 <start_fill+0x968>)
 800150e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001512:	f003 faad 	bl	8004a70 <go_straight>
 8001516:	489d      	ldr	r0, [pc, #628]	; (800178c <start_fill+0x97c>)
 8001518:	f003 f81e 	bl	8004558 <turn_left90>
 800151c:	2300      	movs	r3, #0
 800151e:	2200      	movs	r2, #0
 8001520:	f04f 0000 	mov.w	r0, #0
 8001524:	499c      	ldr	r1, [pc, #624]	; (8001798 <start_fill+0x988>)
 8001526:	f003 faa3 	bl	8004a70 <go_straight>
			if(direction == west){
 800152a:	f001 b8af 	b.w	800268c <start_fill+0x187c>
				} else {
					stack[i][0] = straight;
 800152e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001532:	4619      	mov	r1, r3
 8001534:	4a93      	ldr	r2, [pc, #588]	; (8001784 <start_fill+0x974>)
 8001536:	460b      	mov	r3, r1
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	440b      	add	r3, r1
 800153c:	4413      	add	r3, r2
 800153e:	22fa      	movs	r2, #250	; 0xfa
 8001540:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0, -1);
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	2200      	movs	r2, #0
 8001548:	a189      	add	r1, pc, #548	; (adr r1, 8001770 <start_fill+0x960>)
 800154a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800154e:	f003 fa8f 	bl	8004a70 <go_straight>
			if(direction == west){
 8001552:	f001 b89b 	b.w	800268c <start_fill+0x187c>
				}
			} else {
				if(frontfree){
 8001556:	7ffb      	ldrb	r3, [r7, #31]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d013      	beq.n	8001584 <start_fill+0x774>
					stack[i][0] = straight;
 800155c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001560:	4619      	mov	r1, r3
 8001562:	4a88      	ldr	r2, [pc, #544]	; (8001784 <start_fill+0x974>)
 8001564:	460b      	mov	r3, r1
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	440b      	add	r3, r1
 800156a:	4413      	add	r3, r2
 800156c:	22fa      	movs	r2, #250	; 0xfa
 800156e:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0, -1);
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	2200      	movs	r2, #0
 8001576:	a17e      	add	r1, pc, #504	; (adr r1, 8001770 <start_fill+0x960>)
 8001578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800157c:	f003 fa78 	bl	8004a70 <go_straight>
			if(direction == west){
 8001580:	f001 b884 	b.w	800268c <start_fill+0x187c>
				} else {
					stack[i][0] = turn_left_90;
 8001584:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001588:	4619      	mov	r1, r3
 800158a:	4a7e      	ldr	r2, [pc, #504]	; (8001784 <start_fill+0x974>)
 800158c:	460b      	mov	r3, r1
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	440b      	add	r3, r1
 8001592:	4413      	add	r3, r2
 8001594:	22fc      	movs	r2, #252	; 0xfc
 8001596:	701a      	strb	r2, [r3, #0]
					turnLeftHere;
 8001598:	2300      	movs	r3, #0
 800159a:	2201      	movs	r2, #1
 800159c:	a176      	add	r1, pc, #472	; (adr r1, 8001778 <start_fill+0x968>)
 800159e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015a2:	f003 fa65 	bl	8004a70 <go_straight>
 80015a6:	4879      	ldr	r0, [pc, #484]	; (800178c <start_fill+0x97c>)
 80015a8:	f002 ffd6 	bl	8004558 <turn_left90>
 80015ac:	2300      	movs	r3, #0
 80015ae:	2200      	movs	r2, #0
 80015b0:	f04f 0000 	mov.w	r0, #0
 80015b4:	4978      	ldr	r1, [pc, #480]	; (8001798 <start_fill+0x988>)
 80015b6:	f003 fa5b 	bl	8004a70 <go_straight>
			if(direction == west){
 80015ba:	f001 b867 	b.w	800268c <start_fill+0x187c>
				}
			}
		} else if(leftfree || rightfree || frontfree){
 80015be:	7fbb      	ldrb	r3, [r7, #30]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d106      	bne.n	80015d2 <start_fill+0x7c2>
 80015c4:	7f7b      	ldrb	r3, [r7, #29]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <start_fill+0x7c2>
 80015ca:	7ffb      	ldrb	r3, [r7, #31]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80e5 	beq.w	800179c <start_fill+0x98c>
			if(frontfree){
 80015d2:	7ffb      	ldrb	r3, [r7, #31]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d063      	beq.n	80016a0 <start_fill+0x890>
				if(stack[i][0] == straight && stack[i][1] == -1){
 80015d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015dc:	4619      	mov	r1, r3
 80015de:	4a69      	ldr	r2, [pc, #420]	; (8001784 <start_fill+0x974>)
 80015e0:	460b      	mov	r3, r1
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	440b      	add	r3, r1
 80015e6:	4413      	add	r3, r2
 80015e8:	f993 3000 	ldrsb.w	r3, [r3]
 80015ec:	f113 0f06 	cmn.w	r3, #6
 80015f0:	d125      	bne.n	800163e <start_fill+0x82e>
 80015f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015f6:	4619      	mov	r1, r3
 80015f8:	4a62      	ldr	r2, [pc, #392]	; (8001784 <start_fill+0x974>)
 80015fa:	460b      	mov	r3, r1
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	440b      	add	r3, r1
 8001600:	4413      	add	r3, r2
 8001602:	3301      	adds	r3, #1
 8001604:	f993 3000 	ldrsb.w	r3, [r3]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	d117      	bne.n	800163e <start_fill+0x82e>
					stack[i][2]++;
 800160e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001612:	461a      	mov	r2, r3
 8001614:	495b      	ldr	r1, [pc, #364]	; (8001784 <start_fill+0x974>)
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	440b      	add	r3, r1
 800161e:	3302      	adds	r3, #2
 8001620:	f993 3000 	ldrsb.w	r3, [r3]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	3301      	adds	r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	b258      	sxtb	r0, r3
 800162c:	4955      	ldr	r1, [pc, #340]	; (8001784 <start_fill+0x974>)
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	440b      	add	r3, r1
 8001636:	3302      	adds	r3, #2
 8001638:	4602      	mov	r2, r0
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	e026      	b.n	800168c <start_fill+0x87c>
				} else {
					i++;
 800163e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001642:	b29b      	uxth	r3, r3
 8001644:	3301      	adds	r3, #1
 8001646:	b29b      	uxth	r3, r3
 8001648:	b21b      	sxth	r3, r3
 800164a:	81fb      	strh	r3, [r7, #14]
					stack[i][0] = straight;
 800164c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001650:	4619      	mov	r1, r3
 8001652:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <start_fill+0x974>)
 8001654:	460b      	mov	r3, r1
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	440b      	add	r3, r1
 800165a:	4413      	add	r3, r2
 800165c:	22fa      	movs	r2, #250	; 0xfa
 800165e:	701a      	strb	r2, [r3, #0]
					stack[i][1] = -1;
 8001660:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001664:	4619      	mov	r1, r3
 8001666:	4a47      	ldr	r2, [pc, #284]	; (8001784 <start_fill+0x974>)
 8001668:	460b      	mov	r3, r1
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	440b      	add	r3, r1
 800166e:	4413      	add	r3, r2
 8001670:	3301      	adds	r3, #1
 8001672:	22ff      	movs	r2, #255	; 0xff
 8001674:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 8001676:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800167a:	4619      	mov	r1, r3
 800167c:	4a41      	ldr	r2, [pc, #260]	; (8001784 <start_fill+0x974>)
 800167e:	460b      	mov	r3, r1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	440b      	add	r3, r1
 8001684:	4413      	add	r3, r2
 8001686:	3302      	adds	r3, #2
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
				}
				go_straight(square_size, 0, -1);
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	2200      	movs	r2, #0
 8001692:	a137      	add	r1, pc, #220	; (adr r1, 8001770 <start_fill+0x960>)
 8001694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001698:	f003 f9ea 	bl	8004a70 <go_straight>
			if(frontfree){
 800169c:	f000 bfe9 	b.w	8002672 <start_fill+0x1862>
			} else if(leftfree){
 80016a0:	7fbb      	ldrb	r3, [r7, #30]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d02e      	beq.n	8001704 <start_fill+0x8f4>
				i++;
 80016a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3301      	adds	r3, #1
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	81fb      	strh	r3, [r7, #14]
				stack[i][0] = turn_left_90;
 80016b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4a32      	ldr	r2, [pc, #200]	; (8001784 <start_fill+0x974>)
 80016bc:	460b      	mov	r3, r1
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	440b      	add	r3, r1
 80016c2:	4413      	add	r3, r2
 80016c4:	22fc      	movs	r2, #252	; 0xfc
 80016c6:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 80016c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016cc:	4619      	mov	r1, r3
 80016ce:	4a2d      	ldr	r2, [pc, #180]	; (8001784 <start_fill+0x974>)
 80016d0:	460b      	mov	r3, r1
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	440b      	add	r3, r1
 80016d6:	4413      	add	r3, r2
 80016d8:	3301      	adds	r3, #1
 80016da:	22ff      	movs	r2, #255	; 0xff
 80016dc:	701a      	strb	r2, [r3, #0]
				turnLeftHere;
 80016de:	2300      	movs	r3, #0
 80016e0:	2201      	movs	r2, #1
 80016e2:	a125      	add	r1, pc, #148	; (adr r1, 8001778 <start_fill+0x968>)
 80016e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016e8:	f003 f9c2 	bl	8004a70 <go_straight>
 80016ec:	4827      	ldr	r0, [pc, #156]	; (800178c <start_fill+0x97c>)
 80016ee:	f002 ff33 	bl	8004558 <turn_left90>
 80016f2:	2300      	movs	r3, #0
 80016f4:	2200      	movs	r2, #0
 80016f6:	f04f 0000 	mov.w	r0, #0
 80016fa:	4927      	ldr	r1, [pc, #156]	; (8001798 <start_fill+0x988>)
 80016fc:	f003 f9b8 	bl	8004a70 <go_straight>
			if(frontfree){
 8001700:	f000 bfb7 	b.w	8002672 <start_fill+0x1862>
			} else if(rightfree){
 8001704:	7f7b      	ldrb	r3, [r7, #29]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 87b3 	beq.w	8002672 <start_fill+0x1862>
				i++;
 800170c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001710:	b29b      	uxth	r3, r3
 8001712:	3301      	adds	r3, #1
 8001714:	b29b      	uxth	r3, r3
 8001716:	b21b      	sxth	r3, r3
 8001718:	81fb      	strh	r3, [r7, #14]
				stack[i][0] = turn_right_90;
 800171a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800171e:	4619      	mov	r1, r3
 8001720:	4a18      	ldr	r2, [pc, #96]	; (8001784 <start_fill+0x974>)
 8001722:	460b      	mov	r3, r1
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	440b      	add	r3, r1
 8001728:	4413      	add	r3, r2
 800172a:	22ff      	movs	r2, #255	; 0xff
 800172c:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 800172e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001732:	4619      	mov	r1, r3
 8001734:	4a13      	ldr	r2, [pc, #76]	; (8001784 <start_fill+0x974>)
 8001736:	460b      	mov	r3, r1
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	440b      	add	r3, r1
 800173c:	4413      	add	r3, r2
 800173e:	3301      	adds	r3, #1
 8001740:	22ff      	movs	r2, #255	; 0xff
 8001742:	701a      	strb	r2, [r3, #0]
				turnRightHere;
 8001744:	2300      	movs	r3, #0
 8001746:	2201      	movs	r2, #1
 8001748:	f04f 0000 	mov.w	r0, #0
 800174c:	4910      	ldr	r1, [pc, #64]	; (8001790 <start_fill+0x980>)
 800174e:	f003 f98f 	bl	8004a70 <go_straight>
 8001752:	480e      	ldr	r0, [pc, #56]	; (800178c <start_fill+0x97c>)
 8001754:	f003 f830 	bl	80047b8 <turn_right90>
 8001758:	2300      	movs	r3, #0
 800175a:	2200      	movs	r2, #0
 800175c:	f04f 0000 	mov.w	r0, #0
 8001760:	490c      	ldr	r1, [pc, #48]	; (8001794 <start_fill+0x984>)
 8001762:	f003 f985 	bl	8004a70 <go_straight>
			if(frontfree){
 8001766:	f000 bf84 	b.w	8002672 <start_fill+0x1862>
 800176a:	bf00      	nop
 800176c:	f3af 8000 	nop.w
 8001770:	00000000 	.word	0x00000000
 8001774:	4072c000 	.word	0x4072c000
 8001778:	00000000 	.word	0x00000000
 800177c:	4067c000 	.word	0x4067c000
 8001780:	200004aa 	.word	0x200004aa
 8001784:	2000037c 	.word	0x2000037c
 8001788:	200004ab 	.word	0x200004ab
 800178c:	200004ac 	.word	0x200004ac
 8001790:	40654000 	.word	0x40654000
 8001794:	405e0000 	.word	0x405e0000
 8001798:	40604000 	.word	0x40604000
			}
		} else {
			go_straight(170, 1, 0);
 800179c:	2300      	movs	r3, #0
 800179e:	2201      	movs	r2, #1
 80017a0:	f04f 0000 	mov.w	r0, #0
 80017a4:	49c9      	ldr	r1, [pc, #804]	; (8001acc <start_fill+0xcbc>)
 80017a6:	f003 f963 	bl	8004a70 <go_straight>
			u_turnf(&direction);
 80017aa:	48c9      	ldr	r0, [pc, #804]	; (8001ad0 <start_fill+0xcc0>)
 80017ac:	f002 fdb0 	bl	8004310 <u_turnf>
			go_straight(100, 0, 0);
 80017b0:	2300      	movs	r3, #0
 80017b2:	2200      	movs	r2, #0
 80017b4:	f04f 0000 	mov.w	r0, #0
 80017b8:	49c6      	ldr	r1, [pc, #792]	; (8001ad4 <start_fill+0xcc4>)
 80017ba:	f003 f959 	bl	8004a70 <go_straight>
			if(stack[i][1] != -1 &&
 80017be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017c2:	4619      	mov	r1, r3
 80017c4:	4ac4      	ldr	r2, [pc, #784]	; (8001ad8 <start_fill+0xcc8>)
 80017c6:	460b      	mov	r3, r1
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	440b      	add	r3, r1
 80017cc:	4413      	add	r3, r2
 80017ce:	3301      	adds	r3, #1
 80017d0:	f993 3000 	ldrsb.w	r3, [r3]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	f000 82e0 	beq.w	8001d9c <start_fill+0xf8c>
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 80017dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017e0:	4619      	mov	r1, r3
 80017e2:	4abd      	ldr	r2, [pc, #756]	; (8001ad8 <start_fill+0xcc8>)
 80017e4:	460b      	mov	r3, r1
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	440b      	add	r3, r1
 80017ea:	4413      	add	r3, r2
 80017ec:	3302      	adds	r3, #2
 80017ee:	f993 3000 	ldrsb.w	r3, [r3]
 80017f2:	4619      	mov	r1, r3
 80017f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f8:	4618      	mov	r0, r3
 80017fa:	4ab7      	ldr	r2, [pc, #732]	; (8001ad8 <start_fill+0xcc8>)
 80017fc:	4603      	mov	r3, r0
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4403      	add	r3, r0
 8001802:	4413      	add	r3, r2
 8001804:	3301      	adds	r3, #1
 8001806:	f993 3000 	ldrsb.w	r3, [r3]
 800180a:	4618      	mov	r0, r3
 800180c:	4ab3      	ldr	r2, [pc, #716]	; (8001adc <start_fill+0xccc>)
 800180e:	460b      	mov	r3, r1
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	4403      	add	r3, r0
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f003 0308 	and.w	r3, r3, #8
			if(stack[i][1] != -1 &&
 8001820:	2b00      	cmp	r3, #0
 8001822:	d122      	bne.n	800186a <start_fill+0xa5a>
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001824:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001828:	4619      	mov	r1, r3
 800182a:	4aab      	ldr	r2, [pc, #684]	; (8001ad8 <start_fill+0xcc8>)
 800182c:	460b      	mov	r3, r1
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	440b      	add	r3, r1
 8001832:	4413      	add	r3, r2
 8001834:	3302      	adds	r3, #2
 8001836:	f993 3000 	ldrsb.w	r3, [r3]
 800183a:	4618      	mov	r0, r3
 800183c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001840:	4619      	mov	r1, r3
 8001842:	4aa5      	ldr	r2, [pc, #660]	; (8001ad8 <start_fill+0xcc8>)
 8001844:	460b      	mov	r3, r1
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	440b      	add	r3, r1
 800184a:	4413      	add	r3, r2
 800184c:	3301      	adds	r3, #1
 800184e:	f993 3000 	ldrsb.w	r3, [r3]
 8001852:	1e5a      	subs	r2, r3, #1
 8001854:	49a2      	ldr	r1, [pc, #648]	; (8001ae0 <start_fill+0xcd0>)
 8001856:	4603      	mov	r3, r0
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4403      	add	r3, r0
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	440b      	add	r3, r1
 8001860:	4413      	add	r3, r2
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 8299 	beq.w	8001d9c <start_fill+0xf8c>
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 800186a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800186e:	4619      	mov	r1, r3
 8001870:	4a99      	ldr	r2, [pc, #612]	; (8001ad8 <start_fill+0xcc8>)
 8001872:	460b      	mov	r3, r1
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	440b      	add	r3, r1
 8001878:	4413      	add	r3, r2
 800187a:	3302      	adds	r3, #2
 800187c:	f993 3000 	ldrsb.w	r3, [r3]
 8001880:	4619      	mov	r1, r3
 8001882:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001886:	4618      	mov	r0, r3
 8001888:	4a93      	ldr	r2, [pc, #588]	; (8001ad8 <start_fill+0xcc8>)
 800188a:	4603      	mov	r3, r0
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4403      	add	r3, r0
 8001890:	4413      	add	r3, r2
 8001892:	3301      	adds	r3, #1
 8001894:	f993 3000 	ldrsb.w	r3, [r3]
 8001898:	4618      	mov	r0, r3
 800189a:	4a90      	ldr	r2, [pc, #576]	; (8001adc <start_fill+0xccc>)
 800189c:	460b      	mov	r3, r1
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	4403      	add	r3, r0
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	f003 0304 	and.w	r3, r3, #4
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d122      	bne.n	80018f8 <start_fill+0xae8>
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80018b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018b6:	4619      	mov	r1, r3
 80018b8:	4a87      	ldr	r2, [pc, #540]	; (8001ad8 <start_fill+0xcc8>)
 80018ba:	460b      	mov	r3, r1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	440b      	add	r3, r1
 80018c0:	4413      	add	r3, r2
 80018c2:	3302      	adds	r3, #2
 80018c4:	f993 3000 	ldrsb.w	r3, [r3]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ce:	4619      	mov	r1, r3
 80018d0:	4a81      	ldr	r2, [pc, #516]	; (8001ad8 <start_fill+0xcc8>)
 80018d2:	460b      	mov	r3, r1
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	440b      	add	r3, r1
 80018d8:	4413      	add	r3, r2
 80018da:	3301      	adds	r3, #1
 80018dc:	f993 3000 	ldrsb.w	r3, [r3]
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	497f      	ldr	r1, [pc, #508]	; (8001ae0 <start_fill+0xcd0>)
 80018e4:	4603      	mov	r3, r0
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4403      	add	r3, r0
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	440b      	add	r3, r1
 80018ee:	4413      	add	r3, r2
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 8252 	beq.w	8001d9c <start_fill+0xf8c>
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 80018f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4a76      	ldr	r2, [pc, #472]	; (8001ad8 <start_fill+0xcc8>)
 8001900:	460b      	mov	r3, r1
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	440b      	add	r3, r1
 8001906:	4413      	add	r3, r2
 8001908:	3302      	adds	r3, #2
 800190a:	f993 3000 	ldrsb.w	r3, [r3]
 800190e:	4619      	mov	r1, r3
 8001910:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001914:	4618      	mov	r0, r3
 8001916:	4a70      	ldr	r2, [pc, #448]	; (8001ad8 <start_fill+0xcc8>)
 8001918:	4603      	mov	r3, r0
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4403      	add	r3, r0
 800191e:	4413      	add	r3, r2
 8001920:	3301      	adds	r3, #1
 8001922:	f993 3000 	ldrsb.w	r3, [r3]
 8001926:	4618      	mov	r0, r3
 8001928:	4a6c      	ldr	r2, [pc, #432]	; (8001adc <start_fill+0xccc>)
 800192a:	460b      	mov	r3, r1
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	4403      	add	r3, r0
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	f003 0302 	and.w	r3, r3, #2
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 800193c:	2b00      	cmp	r3, #0
 800193e:	d122      	bne.n	8001986 <start_fill+0xb76>
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001940:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001944:	4619      	mov	r1, r3
 8001946:	4a64      	ldr	r2, [pc, #400]	; (8001ad8 <start_fill+0xcc8>)
 8001948:	460b      	mov	r3, r1
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	440b      	add	r3, r1
 800194e:	4413      	add	r3, r2
 8001950:	3302      	adds	r3, #2
 8001952:	f993 3000 	ldrsb.w	r3, [r3]
 8001956:	1e5a      	subs	r2, r3, #1
 8001958:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800195c:	4618      	mov	r0, r3
 800195e:	495e      	ldr	r1, [pc, #376]	; (8001ad8 <start_fill+0xcc8>)
 8001960:	4603      	mov	r3, r0
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4403      	add	r3, r0
 8001966:	440b      	add	r3, r1
 8001968:	3301      	adds	r3, #1
 800196a:	f993 3000 	ldrsb.w	r3, [r3]
 800196e:	4618      	mov	r0, r3
 8001970:	495b      	ldr	r1, [pc, #364]	; (8001ae0 <start_fill+0xcd0>)
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	440b      	add	r3, r1
 800197c:	4403      	add	r3, r0
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 820b 	beq.w	8001d9c <start_fill+0xf8c>
					((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001986:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800198a:	4619      	mov	r1, r3
 800198c:	4a52      	ldr	r2, [pc, #328]	; (8001ad8 <start_fill+0xcc8>)
 800198e:	460b      	mov	r3, r1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	440b      	add	r3, r1
 8001994:	4413      	add	r3, r2
 8001996:	3302      	adds	r3, #2
 8001998:	f993 3000 	ldrsb.w	r3, [r3]
 800199c:	4619      	mov	r1, r3
 800199e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019a2:	4618      	mov	r0, r3
 80019a4:	4a4c      	ldr	r2, [pc, #304]	; (8001ad8 <start_fill+0xcc8>)
 80019a6:	4603      	mov	r3, r0
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4403      	add	r3, r0
 80019ac:	4413      	add	r3, r2
 80019ae:	3301      	adds	r3, #1
 80019b0:	f993 3000 	ldrsb.w	r3, [r3]
 80019b4:	4618      	mov	r0, r3
 80019b6:	4a49      	ldr	r2, [pc, #292]	; (8001adc <start_fill+0xccc>)
 80019b8:	460b      	mov	r3, r1
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	4403      	add	r3, r0
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d122      	bne.n	8001a14 <start_fill+0xc04>
					((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 80019ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019d2:	4619      	mov	r1, r3
 80019d4:	4a40      	ldr	r2, [pc, #256]	; (8001ad8 <start_fill+0xcc8>)
 80019d6:	460b      	mov	r3, r1
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	440b      	add	r3, r1
 80019dc:	4413      	add	r3, r2
 80019de:	3302      	adds	r3, #2
 80019e0:	f993 3000 	ldrsb.w	r3, [r3]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ea:	4618      	mov	r0, r3
 80019ec:	493a      	ldr	r1, [pc, #232]	; (8001ad8 <start_fill+0xcc8>)
 80019ee:	4603      	mov	r3, r0
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4403      	add	r3, r0
 80019f4:	440b      	add	r3, r1
 80019f6:	3301      	adds	r3, #1
 80019f8:	f993 3000 	ldrsb.w	r3, [r3]
 80019fc:	4618      	mov	r0, r3
 80019fe:	4938      	ldr	r1, [pc, #224]	; (8001ae0 <start_fill+0xcd0>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	440b      	add	r3, r1
 8001a0a:	4403      	add	r3, r0
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 81c4 	beq.w	8001d9c <start_fill+0xf8c>
				stack[i][1] = -1;
 8001a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <start_fill+0xcc8>)
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	440b      	add	r3, r1
 8001a22:	4413      	add	r3, r2
 8001a24:	3301      	adds	r3, #1
 8001a26:	22ff      	movs	r2, #255	; 0xff
 8001a28:	701a      	strb	r2, [r3, #0]
				stack[i][2] = 1;
 8001a2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4a29      	ldr	r2, [pc, #164]	; (8001ad8 <start_fill+0xcc8>)
 8001a32:	460b      	mov	r3, r1
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	440b      	add	r3, r1
 8001a38:	4413      	add	r3, r2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
			}
			while(stack[i][1] == -1){
 8001a40:	e1ac      	b.n	8001d9c <start_fill+0xf8c>
				switch(stack[i][0]){
 8001a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <start_fill+0xcc8>)
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	440b      	add	r3, r1
 8001a50:	4413      	add	r3, r2
 8001a52:	f993 3000 	ldrsb.w	r3, [r3]
 8001a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5a:	d047      	beq.n	8001aec <start_fill+0xcdc>
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da57      	bge.n	8001b10 <start_fill+0xd00>
 8001a60:	f113 0f06 	cmn.w	r3, #6
 8001a64:	d003      	beq.n	8001a6e <start_fill+0xc5e>
 8001a66:	f113 0f04 	cmn.w	r3, #4
 8001a6a:	d01d      	beq.n	8001aa8 <start_fill+0xc98>
 8001a6c:	e050      	b.n	8001b10 <start_fill+0xd00>
					case straight:
						go_straight((float)stack[i][2] * square_size, 0, -1);
 8001a6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a72:	4619      	mov	r1, r3
 8001a74:	4a18      	ldr	r2, [pc, #96]	; (8001ad8 <start_fill+0xcc8>)
 8001a76:	460b      	mov	r3, r1
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	440b      	add	r3, r1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	f993 3000 	ldrsb.w	r3, [r3]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff f96f 	bl	8000d68 <__aeabi_i2f>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4915      	ldr	r1, [pc, #84]	; (8001ae4 <start_fill+0xcd4>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fb5e 	bl	8000150 <__aeabi_fmul>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fd72 	bl	8000580 <__aeabi_f2d>
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f002 ffe5 	bl	8004a70 <go_straight>
						break;
 8001aa6:	e033      	b.n	8001b10 <start_fill+0xd00>
					case turn_left_90:
						turnRightHere;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f04f 0000 	mov.w	r0, #0
 8001ab0:	4906      	ldr	r1, [pc, #24]	; (8001acc <start_fill+0xcbc>)
 8001ab2:	f002 ffdd 	bl	8004a70 <go_straight>
 8001ab6:	4806      	ldr	r0, [pc, #24]	; (8001ad0 <start_fill+0xcc0>)
 8001ab8:	f002 fe7e 	bl	80047b8 <turn_right90>
 8001abc:	2300      	movs	r3, #0
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <start_fill+0xcd8>)
 8001ac6:	f002 ffd3 	bl	8004a70 <go_straight>
						break;
 8001aca:	e021      	b.n	8001b10 <start_fill+0xd00>
 8001acc:	40654000 	.word	0x40654000
 8001ad0:	200004ac 	.word	0x200004ac
 8001ad4:	40590000 	.word	0x40590000
 8001ad8:	2000037c 	.word	0x2000037c
 8001adc:	20000624 	.word	0x20000624
 8001ae0:	20000688 	.word	0x20000688
 8001ae4:	43960000 	.word	0x43960000
 8001ae8:	405e0000 	.word	0x405e0000
					case turn_right_90:
						turnLeftHere;
 8001aec:	2300      	movs	r3, #0
 8001aee:	2201      	movs	r2, #1
 8001af0:	a1c7      	add	r1, pc, #796	; (adr r1, 8001e10 <start_fill+0x1000>)
 8001af2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001af6:	f002 ffbb 	bl	8004a70 <go_straight>
 8001afa:	48c7      	ldr	r0, [pc, #796]	; (8001e18 <start_fill+0x1008>)
 8001afc:	f002 fd2c 	bl	8004558 <turn_left90>
 8001b00:	2300      	movs	r3, #0
 8001b02:	2200      	movs	r2, #0
 8001b04:	f04f 0000 	mov.w	r0, #0
 8001b08:	49c4      	ldr	r1, [pc, #784]	; (8001e1c <start_fill+0x100c>)
 8001b0a:	f002 ffb1 	bl	8004a70 <go_straight>
						break;
 8001b0e:	bf00      	nop
				}
				i--;
 8001b10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	81fb      	strh	r3, [r7, #14]
				if(stack[i][1] != -1 &&
 8001b1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4abe      	ldr	r2, [pc, #760]	; (8001e20 <start_fill+0x1010>)
 8001b26:	460b      	mov	r3, r1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	440b      	add	r3, r1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f993 3000 	ldrsb.w	r3, [r3]
 8001b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b38:	f000 8130 	beq.w	8001d9c <start_fill+0xf8c>
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001b3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b40:	4619      	mov	r1, r3
 8001b42:	4ab7      	ldr	r2, [pc, #732]	; (8001e20 <start_fill+0x1010>)
 8001b44:	460b      	mov	r3, r1
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	440b      	add	r3, r1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b52:	4619      	mov	r1, r3
 8001b54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	4ab1      	ldr	r2, [pc, #708]	; (8001e20 <start_fill+0x1010>)
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4403      	add	r3, r0
 8001b62:	4413      	add	r3, r2
 8001b64:	3301      	adds	r3, #1
 8001b66:	f993 3000 	ldrsb.w	r3, [r3]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	4aad      	ldr	r2, [pc, #692]	; (8001e24 <start_fill+0x1014>)
 8001b6e:	460b      	mov	r3, r1
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	4403      	add	r3, r0
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
				if(stack[i][1] != -1 &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d122      	bne.n	8001bca <start_fill+0xdba>
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001b84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4aa5      	ldr	r2, [pc, #660]	; (8001e20 <start_fill+0x1010>)
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	440b      	add	r3, r1
 8001b92:	4413      	add	r3, r2
 8001b94:	3302      	adds	r3, #2
 8001b96:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4a9f      	ldr	r2, [pc, #636]	; (8001e20 <start_fill+0x1010>)
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	440b      	add	r3, r1
 8001baa:	4413      	add	r3, r2
 8001bac:	3301      	adds	r3, #1
 8001bae:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb2:	1e5a      	subs	r2, r3, #1
 8001bb4:	499c      	ldr	r1, [pc, #624]	; (8001e28 <start_fill+0x1018>)
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4403      	add	r3, r0
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	440b      	add	r3, r1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80e9 	beq.w	8001d9c <start_fill+0xf8c>
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001bca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4a93      	ldr	r2, [pc, #588]	; (8001e20 <start_fill+0x1010>)
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	440b      	add	r3, r1
 8001bd8:	4413      	add	r3, r2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	f993 3000 	ldrsb.w	r3, [r3]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001be6:	4618      	mov	r0, r3
 8001be8:	4a8d      	ldr	r2, [pc, #564]	; (8001e20 <start_fill+0x1010>)
 8001bea:	4603      	mov	r3, r0
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4403      	add	r3, r0
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f993 3000 	ldrsb.w	r3, [r3]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	4a8a      	ldr	r2, [pc, #552]	; (8001e24 <start_fill+0x1014>)
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	4403      	add	r3, r0
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d122      	bne.n	8001c58 <start_fill+0xe48>
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001c12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c16:	4619      	mov	r1, r3
 8001c18:	4a81      	ldr	r2, [pc, #516]	; (8001e20 <start_fill+0x1010>)
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	440b      	add	r3, r1
 8001c20:	4413      	add	r3, r2
 8001c22:	3302      	adds	r3, #2
 8001c24:	f993 3000 	ldrsb.w	r3, [r3]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4a7b      	ldr	r2, [pc, #492]	; (8001e20 <start_fill+0x1010>)
 8001c32:	460b      	mov	r3, r1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	440b      	add	r3, r1
 8001c38:	4413      	add	r3, r2
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	4979      	ldr	r1, [pc, #484]	; (8001e28 <start_fill+0x1018>)
 8001c44:	4603      	mov	r3, r0
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4403      	add	r3, r0
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	440b      	add	r3, r1
 8001c4e:	4413      	add	r3, r2
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80a2 	beq.w	8001d9c <start_fill+0xf8c>
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001c58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4a70      	ldr	r2, [pc, #448]	; (8001e20 <start_fill+0x1010>)
 8001c60:	460b      	mov	r3, r1
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	440b      	add	r3, r1
 8001c66:	4413      	add	r3, r2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c74:	4618      	mov	r0, r3
 8001c76:	4a6a      	ldr	r2, [pc, #424]	; (8001e20 <start_fill+0x1010>)
 8001c78:	4603      	mov	r3, r0
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4403      	add	r3, r0
 8001c7e:	4413      	add	r3, r2
 8001c80:	3301      	adds	r3, #1
 8001c82:	f993 3000 	ldrsb.w	r3, [r3]
 8001c86:	4618      	mov	r0, r3
 8001c88:	4a66      	ldr	r2, [pc, #408]	; (8001e24 <start_fill+0x1014>)
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	4403      	add	r3, r0
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d121      	bne.n	8001ce4 <start_fill+0xed4>
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001ca0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4a5e      	ldr	r2, [pc, #376]	; (8001e20 <start_fill+0x1010>)
 8001ca8:	460b      	mov	r3, r1
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	440b      	add	r3, r1
 8001cae:	4413      	add	r3, r2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb6:	1e5a      	subs	r2, r3, #1
 8001cb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	4958      	ldr	r1, [pc, #352]	; (8001e20 <start_fill+0x1010>)
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4403      	add	r3, r0
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f993 3000 	ldrsb.w	r3, [r3]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4955      	ldr	r1, [pc, #340]	; (8001e28 <start_fill+0x1018>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	440b      	add	r3, r1
 8001cdc:	4403      	add	r3, r0
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d05b      	beq.n	8001d9c <start_fill+0xf8c>
						((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001ce4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4a4d      	ldr	r2, [pc, #308]	; (8001e20 <start_fill+0x1010>)
 8001cec:	460b      	mov	r3, r1
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	440b      	add	r3, r1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	f993 3000 	ldrsb.w	r3, [r3]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d00:	4618      	mov	r0, r3
 8001d02:	4a47      	ldr	r2, [pc, #284]	; (8001e20 <start_fill+0x1010>)
 8001d04:	4603      	mov	r3, r0
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4403      	add	r3, r0
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d12:	4618      	mov	r0, r3
 8001d14:	4a43      	ldr	r2, [pc, #268]	; (8001e24 <start_fill+0x1014>)
 8001d16:	460b      	mov	r3, r1
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	4403      	add	r3, r0
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d121      	bne.n	8001d70 <start_fill+0xf60>
						((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001d2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4a3b      	ldr	r2, [pc, #236]	; (8001e20 <start_fill+0x1010>)
 8001d34:	460b      	mov	r3, r1
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	440b      	add	r3, r1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	4935      	ldr	r1, [pc, #212]	; (8001e20 <start_fill+0x1010>)
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4403      	add	r3, r0
 8001d52:	440b      	add	r3, r1
 8001d54:	3301      	adds	r3, #1
 8001d56:	f993 3000 	ldrsb.w	r3, [r3]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	4932      	ldr	r1, [pc, #200]	; (8001e28 <start_fill+0x1018>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	440b      	add	r3, r1
 8001d68:	4403      	add	r3, r0
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d015      	beq.n	8001d9c <start_fill+0xf8c>
					stack[i][1] = -1;
 8001d70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d74:	4619      	mov	r1, r3
 8001d76:	4a2a      	ldr	r2, [pc, #168]	; (8001e20 <start_fill+0x1010>)
 8001d78:	460b      	mov	r3, r1
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	440b      	add	r3, r1
 8001d7e:	4413      	add	r3, r2
 8001d80:	3301      	adds	r3, #1
 8001d82:	22ff      	movs	r2, #255	; 0xff
 8001d84:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 8001d86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4a24      	ldr	r2, [pc, #144]	; (8001e20 <start_fill+0x1010>)
 8001d8e:	460b      	mov	r3, r1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	440b      	add	r3, r1
 8001d94:	4413      	add	r3, r2
 8001d96:	3302      	adds	r3, #2
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
			while(stack[i][1] == -1){
 8001d9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001da0:	4619      	mov	r1, r3
 8001da2:	4a1f      	ldr	r2, [pc, #124]	; (8001e20 <start_fill+0x1010>)
 8001da4:	460b      	mov	r3, r1
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	440b      	add	r3, r1
 8001daa:	4413      	add	r3, r2
 8001dac:	3301      	adds	r3, #1
 8001dae:	f993 3000 	ldrsb.w	r3, [r3]
 8001db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db6:	f43f ae44 	beq.w	8001a42 <start_fill+0xc32>
				}
			}
			x = stack[i][1];
 8001dba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <start_fill+0x1010>)
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	440b      	add	r3, r1
 8001dc8:	4413      	add	r3, r2
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f993 2000 	ldrsb.w	r2, [r3]
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <start_fill+0x101c>)
 8001dd2:	701a      	strb	r2, [r3, #0]
			y = stack[i][2];
 8001dd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4a11      	ldr	r2, [pc, #68]	; (8001e20 <start_fill+0x1010>)
 8001ddc:	460b      	mov	r3, r1
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	440b      	add	r3, r1
 8001de2:	4413      	add	r3, r2
 8001de4:	3302      	adds	r3, #2
 8001de6:	f993 2000 	ldrsb.w	r2, [r3]
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <start_fill+0x1020>)
 8001dec:	701a      	strb	r2, [r3, #0]
			switch(direction){
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <start_fill+0x1008>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	f63f a865 	bhi.w	8000ec2 <start_fill+0xb2>
 8001df8:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <start_fill+0xff0>)
 8001dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfe:	bf00      	nop
 8001e00:	08001e35 	.word	0x08001e35
 8001e04:	08001fb3 	.word	0x08001fb3
 8001e08:	08002165 	.word	0x08002165
 8001e0c:	080022e3 	.word	0x080022e3
 8001e10:	00000000 	.word	0x00000000
 8001e14:	4067c000 	.word	0x4067c000
 8001e18:	200004ac 	.word	0x200004ac
 8001e1c:	40604000 	.word	0x40604000
 8001e20:	2000037c 	.word	0x2000037c
 8001e24:	20000624 	.word	0x20000624
 8001e28:	20000688 	.word	0x20000688
 8001e2c:	200004aa 	.word	0x200004aa
 8001e30:	200004ab 	.word	0x200004ab
				case west:
					if(stack[i][0] == straight){
 8001e34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4ac1      	ldr	r2, [pc, #772]	; (8002140 <start_fill+0x1330>)
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	440b      	add	r3, r1
 8001e42:	4413      	add	r3, r2
 8001e44:	f993 3000 	ldrsb.w	r3, [r3]
 8001e48:	f113 0f06 	cmn.w	r3, #6
 8001e4c:	f040 808c 	bne.w	8001f68 <start_fill+0x1158>
						if((maze[y][x] & top_wall) == 0 && !visited[y - 1][x]){
 8001e50:	4bbc      	ldr	r3, [pc, #752]	; (8002144 <start_fill+0x1334>)
 8001e52:	f993 3000 	ldrsb.w	r3, [r3]
 8001e56:	4619      	mov	r1, r3
 8001e58:	4bbb      	ldr	r3, [pc, #748]	; (8002148 <start_fill+0x1338>)
 8001e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	4aba      	ldr	r2, [pc, #744]	; (800214c <start_fill+0x133c>)
 8001e62:	460b      	mov	r3, r1
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4403      	add	r3, r0
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d130      	bne.n	8001eda <start_fill+0x10ca>
 8001e78:	4bb2      	ldr	r3, [pc, #712]	; (8002144 <start_fill+0x1334>)
 8001e7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e7e:	1e5a      	subs	r2, r3, #1
 8001e80:	4bb1      	ldr	r3, [pc, #708]	; (8002148 <start_fill+0x1338>)
 8001e82:	f993 3000 	ldrsb.w	r3, [r3]
 8001e86:	4618      	mov	r0, r3
 8001e88:	49b1      	ldr	r1, [pc, #708]	; (8002150 <start_fill+0x1340>)
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	440b      	add	r3, r1
 8001e94:	4403      	add	r3, r0
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	f083 0301 	eor.w	r3, r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d01b      	beq.n	8001eda <start_fill+0x10ca>
							stack[i][0] = turn_left_90;
 8001ea2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4aa5      	ldr	r2, [pc, #660]	; (8002140 <start_fill+0x1330>)
 8001eaa:	460b      	mov	r3, r1
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	440b      	add	r3, r1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	22fc      	movs	r2, #252	; 0xfc
 8001eb4:	701a      	strb	r2, [r3, #0]
							turnRightHere;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f04f 0000 	mov.w	r0, #0
 8001ebe:	49a5      	ldr	r1, [pc, #660]	; (8002154 <start_fill+0x1344>)
 8001ec0:	f002 fdd6 	bl	8004a70 <go_straight>
 8001ec4:	48a4      	ldr	r0, [pc, #656]	; (8002158 <start_fill+0x1348>)
 8001ec6:	f002 fc77 	bl	80047b8 <turn_right90>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f04f 0000 	mov.w	r0, #0
 8001ed2:	49a2      	ldr	r1, [pc, #648]	; (800215c <start_fill+0x134c>)
 8001ed4:	f002 fdcc 	bl	8004a70 <go_straight>
						}
					} else {
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
						go_straight(square_size, 0, -1);
					}
					break;
 8001ed8:	e3ce      	b.n	8002678 <start_fill+0x1868>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8001eda:	4b9a      	ldr	r3, [pc, #616]	; (8002144 <start_fill+0x1334>)
 8001edc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4b99      	ldr	r3, [pc, #612]	; (8002148 <start_fill+0x1338>)
 8001ee4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	4a98      	ldr	r2, [pc, #608]	; (800214c <start_fill+0x133c>)
 8001eec:	460b      	mov	r3, r1
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4403      	add	r3, r0
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 83ba 	bne.w	8002678 <start_fill+0x1868>
 8001f04:	4b8f      	ldr	r3, [pc, #572]	; (8002144 <start_fill+0x1334>)
 8001f06:	f993 3000 	ldrsb.w	r3, [r3]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	4b8e      	ldr	r3, [pc, #568]	; (8002148 <start_fill+0x1338>)
 8001f0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f12:	4618      	mov	r0, r3
 8001f14:	498e      	ldr	r1, [pc, #568]	; (8002150 <start_fill+0x1340>)
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	440b      	add	r3, r1
 8001f20:	4403      	add	r3, r0
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	f083 0301 	eor.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 83a4 	beq.w	8002678 <start_fill+0x1868>
							stack[i][0] = turn_right_90;
 8001f30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f34:	4619      	mov	r1, r3
 8001f36:	4a82      	ldr	r2, [pc, #520]	; (8002140 <start_fill+0x1330>)
 8001f38:	460b      	mov	r3, r1
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	440b      	add	r3, r1
 8001f3e:	4413      	add	r3, r2
 8001f40:	22ff      	movs	r2, #255	; 0xff
 8001f42:	701a      	strb	r2, [r3, #0]
							turnLeftHere;
 8001f44:	2300      	movs	r3, #0
 8001f46:	2201      	movs	r2, #1
 8001f48:	a179      	add	r1, pc, #484	; (adr r1, 8002130 <start_fill+0x1320>)
 8001f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f4e:	f002 fd8f 	bl	8004a70 <go_straight>
 8001f52:	4881      	ldr	r0, [pc, #516]	; (8002158 <start_fill+0x1348>)
 8001f54:	f002 fb00 	bl	8004558 <turn_left90>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f04f 0000 	mov.w	r0, #0
 8001f60:	497f      	ldr	r1, [pc, #508]	; (8002160 <start_fill+0x1350>)
 8001f62:	f002 fd85 	bl	8004a70 <go_straight>
					break;
 8001f66:	e387      	b.n	8002678 <start_fill+0x1868>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001f68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4a74      	ldr	r2, [pc, #464]	; (8002140 <start_fill+0x1330>)
 8001f70:	460b      	mov	r3, r1
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	440b      	add	r3, r1
 8001f76:	4413      	add	r3, r2
 8001f78:	f993 3000 	ldrsb.w	r3, [r3]
 8001f7c:	f113 0f04 	cmn.w	r3, #4
 8001f80:	d102      	bne.n	8001f88 <start_fill+0x1178>
 8001f82:	f04f 30ff 	mov.w	r0, #4294967295
 8001f86:	e001      	b.n	8001f8c <start_fill+0x117c>
 8001f88:	f06f 0003 	mvn.w	r0, #3
 8001f8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f90:	4619      	mov	r1, r3
 8001f92:	4a6b      	ldr	r2, [pc, #428]	; (8002140 <start_fill+0x1330>)
 8001f94:	460b      	mov	r3, r1
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	440b      	add	r3, r1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0, -1);
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	a164      	add	r1, pc, #400	; (adr r1, 8002138 <start_fill+0x1328>)
 8001fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fac:	f002 fd60 	bl	8004a70 <go_straight>
					break;
 8001fb0:	e362      	b.n	8002678 <start_fill+0x1868>
				case east:
					if(stack[i][0] == straight){
 8001fb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4a61      	ldr	r2, [pc, #388]	; (8002140 <start_fill+0x1330>)
 8001fba:	460b      	mov	r3, r1
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	440b      	add	r3, r1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f993 3000 	ldrsb.w	r3, [r3]
 8001fc6:	f113 0f06 	cmn.w	r3, #6
 8001fca:	f040 808c 	bne.w	80020e6 <start_fill+0x12d6>
						if(((maze[y][x] & top_wall) == 0) && !visited[y - 1][x]){
 8001fce:	4b5d      	ldr	r3, [pc, #372]	; (8002144 <start_fill+0x1334>)
 8001fd0:	f993 3000 	ldrsb.w	r3, [r3]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4b5c      	ldr	r3, [pc, #368]	; (8002148 <start_fill+0x1338>)
 8001fd8:	f993 3000 	ldrsb.w	r3, [r3]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	4a5b      	ldr	r2, [pc, #364]	; (800214c <start_fill+0x133c>)
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	4403      	add	r3, r0
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d130      	bne.n	8002058 <start_fill+0x1248>
 8001ff6:	4b53      	ldr	r3, [pc, #332]	; (8002144 <start_fill+0x1334>)
 8001ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8001ffc:	1e5a      	subs	r2, r3, #1
 8001ffe:	4b52      	ldr	r3, [pc, #328]	; (8002148 <start_fill+0x1338>)
 8002000:	f993 3000 	ldrsb.w	r3, [r3]
 8002004:	4618      	mov	r0, r3
 8002006:	4952      	ldr	r1, [pc, #328]	; (8002150 <start_fill+0x1340>)
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	440b      	add	r3, r1
 8002012:	4403      	add	r3, r0
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	f083 0301 	eor.w	r3, r3, #1
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01b      	beq.n	8002058 <start_fill+0x1248>
							stack[i][0] = turn_right_90;
 8002020:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002024:	4619      	mov	r1, r3
 8002026:	4a46      	ldr	r2, [pc, #280]	; (8002140 <start_fill+0x1330>)
 8002028:	460b      	mov	r3, r1
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	440b      	add	r3, r1
 800202e:	4413      	add	r3, r2
 8002030:	22ff      	movs	r2, #255	; 0xff
 8002032:	701a      	strb	r2, [r3, #0]
							turnLeftHere;
 8002034:	2300      	movs	r3, #0
 8002036:	2201      	movs	r2, #1
 8002038:	a13d      	add	r1, pc, #244	; (adr r1, 8002130 <start_fill+0x1320>)
 800203a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800203e:	f002 fd17 	bl	8004a70 <go_straight>
 8002042:	4845      	ldr	r0, [pc, #276]	; (8002158 <start_fill+0x1348>)
 8002044:	f002 fa88 	bl	8004558 <turn_left90>
 8002048:	2300      	movs	r3, #0
 800204a:	2200      	movs	r2, #0
 800204c:	f04f 0000 	mov.w	r0, #0
 8002050:	4943      	ldr	r1, [pc, #268]	; (8002160 <start_fill+0x1350>)
 8002052:	f002 fd0d 	bl	8004a70 <go_straight>
						}
					} else {
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
						go_straight(square_size, 0, -1);
					}
					break;
 8002056:	e312      	b.n	800267e <start_fill+0x186e>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8002058:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <start_fill+0x1334>)
 800205a:	f993 3000 	ldrsb.w	r3, [r3]
 800205e:	4619      	mov	r1, r3
 8002060:	4b39      	ldr	r3, [pc, #228]	; (8002148 <start_fill+0x1338>)
 8002062:	f993 3000 	ldrsb.w	r3, [r3]
 8002066:	4618      	mov	r0, r3
 8002068:	4a38      	ldr	r2, [pc, #224]	; (800214c <start_fill+0x133c>)
 800206a:	460b      	mov	r3, r1
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	4403      	add	r3, r0
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	f040 82fe 	bne.w	800267e <start_fill+0x186e>
 8002082:	4b30      	ldr	r3, [pc, #192]	; (8002144 <start_fill+0x1334>)
 8002084:	f993 3000 	ldrsb.w	r3, [r3]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <start_fill+0x1338>)
 800208c:	f993 3000 	ldrsb.w	r3, [r3]
 8002090:	4618      	mov	r0, r3
 8002092:	492f      	ldr	r1, [pc, #188]	; (8002150 <start_fill+0x1340>)
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	440b      	add	r3, r1
 800209e:	4403      	add	r3, r0
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	f083 0301 	eor.w	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 82e8 	beq.w	800267e <start_fill+0x186e>
							stack[i][0] = turn_left_90;
 80020ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020b2:	4619      	mov	r1, r3
 80020b4:	4a22      	ldr	r2, [pc, #136]	; (8002140 <start_fill+0x1330>)
 80020b6:	460b      	mov	r3, r1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	440b      	add	r3, r1
 80020bc:	4413      	add	r3, r2
 80020be:	22fc      	movs	r2, #252	; 0xfc
 80020c0:	701a      	strb	r2, [r3, #0]
							turnRightHere;
 80020c2:	2300      	movs	r3, #0
 80020c4:	2201      	movs	r2, #1
 80020c6:	f04f 0000 	mov.w	r0, #0
 80020ca:	4922      	ldr	r1, [pc, #136]	; (8002154 <start_fill+0x1344>)
 80020cc:	f002 fcd0 	bl	8004a70 <go_straight>
 80020d0:	4821      	ldr	r0, [pc, #132]	; (8002158 <start_fill+0x1348>)
 80020d2:	f002 fb71 	bl	80047b8 <turn_right90>
 80020d6:	2300      	movs	r3, #0
 80020d8:	2200      	movs	r2, #0
 80020da:	f04f 0000 	mov.w	r0, #0
 80020de:	491f      	ldr	r1, [pc, #124]	; (800215c <start_fill+0x134c>)
 80020e0:	f002 fcc6 	bl	8004a70 <go_straight>
					break;
 80020e4:	e2cb      	b.n	800267e <start_fill+0x186e>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 80020e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020ea:	4619      	mov	r1, r3
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <start_fill+0x1330>)
 80020ee:	460b      	mov	r3, r1
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	440b      	add	r3, r1
 80020f4:	4413      	add	r3, r2
 80020f6:	f993 3000 	ldrsb.w	r3, [r3]
 80020fa:	f113 0f04 	cmn.w	r3, #4
 80020fe:	d102      	bne.n	8002106 <start_fill+0x12f6>
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	e001      	b.n	800210a <start_fill+0x12fa>
 8002106:	f06f 0003 	mvn.w	r0, #3
 800210a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800210e:	4619      	mov	r1, r3
 8002110:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <start_fill+0x1330>)
 8002112:	460b      	mov	r3, r1
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	440b      	add	r3, r1
 8002118:	4413      	add	r3, r2
 800211a:	4602      	mov	r2, r0
 800211c:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0, -1);
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	2200      	movs	r2, #0
 8002124:	a104      	add	r1, pc, #16	; (adr r1, 8002138 <start_fill+0x1328>)
 8002126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800212a:	f002 fca1 	bl	8004a70 <go_straight>
					break;
 800212e:	e2a6      	b.n	800267e <start_fill+0x186e>
 8002130:	00000000 	.word	0x00000000
 8002134:	4067c000 	.word	0x4067c000
 8002138:	00000000 	.word	0x00000000
 800213c:	4072c000 	.word	0x4072c000
 8002140:	2000037c 	.word	0x2000037c
 8002144:	200004ab 	.word	0x200004ab
 8002148:	200004aa 	.word	0x200004aa
 800214c:	20000624 	.word	0x20000624
 8002150:	20000688 	.word	0x20000688
 8002154:	40654000 	.word	0x40654000
 8002158:	200004ac 	.word	0x200004ac
 800215c:	405e0000 	.word	0x405e0000
 8002160:	40604000 	.word	0x40604000
				case north:
					if(stack[i][0] == straight){
 8002164:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002168:	4619      	mov	r1, r3
 800216a:	4aaf      	ldr	r2, [pc, #700]	; (8002428 <start_fill+0x1618>)
 800216c:	460b      	mov	r3, r1
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	440b      	add	r3, r1
 8002172:	4413      	add	r3, r2
 8002174:	f993 3000 	ldrsb.w	r3, [r3]
 8002178:	f113 0f06 	cmn.w	r3, #6
 800217c:	f040 808c 	bne.w	8002298 <start_fill+0x1488>
						if((maze[y][x] & left_wall) == 0 && !visited[y][x - 1]){
 8002180:	4baa      	ldr	r3, [pc, #680]	; (800242c <start_fill+0x161c>)
 8002182:	f993 3000 	ldrsb.w	r3, [r3]
 8002186:	4619      	mov	r1, r3
 8002188:	4ba9      	ldr	r3, [pc, #676]	; (8002430 <start_fill+0x1620>)
 800218a:	f993 3000 	ldrsb.w	r3, [r3]
 800218e:	4618      	mov	r0, r3
 8002190:	4aa8      	ldr	r2, [pc, #672]	; (8002434 <start_fill+0x1624>)
 8002192:	460b      	mov	r3, r1
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	4403      	add	r3, r0
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d130      	bne.n	800220a <start_fill+0x13fa>
 80021a8:	4ba0      	ldr	r3, [pc, #640]	; (800242c <start_fill+0x161c>)
 80021aa:	f993 3000 	ldrsb.w	r3, [r3]
 80021ae:	4618      	mov	r0, r3
 80021b0:	4b9f      	ldr	r3, [pc, #636]	; (8002430 <start_fill+0x1620>)
 80021b2:	f993 3000 	ldrsb.w	r3, [r3]
 80021b6:	1e5a      	subs	r2, r3, #1
 80021b8:	499f      	ldr	r1, [pc, #636]	; (8002438 <start_fill+0x1628>)
 80021ba:	4603      	mov	r3, r0
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4403      	add	r3, r0
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	440b      	add	r3, r1
 80021c4:	4413      	add	r3, r2
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	f083 0301 	eor.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01b      	beq.n	800220a <start_fill+0x13fa>
							stack[i][0] = turn_right_90;
 80021d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021d6:	4619      	mov	r1, r3
 80021d8:	4a93      	ldr	r2, [pc, #588]	; (8002428 <start_fill+0x1618>)
 80021da:	460b      	mov	r3, r1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	440b      	add	r3, r1
 80021e0:	4413      	add	r3, r2
 80021e2:	22ff      	movs	r2, #255	; 0xff
 80021e4:	701a      	strb	r2, [r3, #0]
							turnLeftHere;
 80021e6:	2300      	movs	r3, #0
 80021e8:	2201      	movs	r2, #1
 80021ea:	a18b      	add	r1, pc, #556	; (adr r1, 8002418 <start_fill+0x1608>)
 80021ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021f0:	f002 fc3e 	bl	8004a70 <go_straight>
 80021f4:	4891      	ldr	r0, [pc, #580]	; (800243c <start_fill+0x162c>)
 80021f6:	f002 f9af 	bl	8004558 <turn_left90>
 80021fa:	2300      	movs	r3, #0
 80021fc:	2200      	movs	r2, #0
 80021fe:	f04f 0000 	mov.w	r0, #0
 8002202:	498f      	ldr	r1, [pc, #572]	; (8002440 <start_fill+0x1630>)
 8002204:	f002 fc34 	bl	8004a70 <go_straight>
						}
					} else {
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
						go_straight(square_size, 0, -1);
					}
					break;
 8002208:	e23c      	b.n	8002684 <start_fill+0x1874>
						} else if((maze[y][x] & right_wall) == 0 && !visited[y][x + 1]) {
 800220a:	4b88      	ldr	r3, [pc, #544]	; (800242c <start_fill+0x161c>)
 800220c:	f993 3000 	ldrsb.w	r3, [r3]
 8002210:	4619      	mov	r1, r3
 8002212:	4b87      	ldr	r3, [pc, #540]	; (8002430 <start_fill+0x1620>)
 8002214:	f993 3000 	ldrsb.w	r3, [r3]
 8002218:	4618      	mov	r0, r3
 800221a:	4a86      	ldr	r2, [pc, #536]	; (8002434 <start_fill+0x1624>)
 800221c:	460b      	mov	r3, r1
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	4403      	add	r3, r0
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 8228 	bne.w	8002684 <start_fill+0x1874>
 8002234:	4b7d      	ldr	r3, [pc, #500]	; (800242c <start_fill+0x161c>)
 8002236:	f993 3000 	ldrsb.w	r3, [r3]
 800223a:	4618      	mov	r0, r3
 800223c:	4b7c      	ldr	r3, [pc, #496]	; (8002430 <start_fill+0x1620>)
 800223e:	f993 3000 	ldrsb.w	r3, [r3]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	497c      	ldr	r1, [pc, #496]	; (8002438 <start_fill+0x1628>)
 8002246:	4603      	mov	r3, r0
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4403      	add	r3, r0
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	440b      	add	r3, r1
 8002250:	4413      	add	r3, r2
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	f083 0301 	eor.w	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8212 	beq.w	8002684 <start_fill+0x1874>
							stack[i][0] = turn_left_90;
 8002260:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002264:	4619      	mov	r1, r3
 8002266:	4a70      	ldr	r2, [pc, #448]	; (8002428 <start_fill+0x1618>)
 8002268:	460b      	mov	r3, r1
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	440b      	add	r3, r1
 800226e:	4413      	add	r3, r2
 8002270:	22fc      	movs	r2, #252	; 0xfc
 8002272:	701a      	strb	r2, [r3, #0]
							turnRightHere;
 8002274:	2300      	movs	r3, #0
 8002276:	2201      	movs	r2, #1
 8002278:	f04f 0000 	mov.w	r0, #0
 800227c:	4971      	ldr	r1, [pc, #452]	; (8002444 <start_fill+0x1634>)
 800227e:	f002 fbf7 	bl	8004a70 <go_straight>
 8002282:	486e      	ldr	r0, [pc, #440]	; (800243c <start_fill+0x162c>)
 8002284:	f002 fa98 	bl	80047b8 <turn_right90>
 8002288:	2300      	movs	r3, #0
 800228a:	2200      	movs	r2, #0
 800228c:	f04f 0000 	mov.w	r0, #0
 8002290:	496d      	ldr	r1, [pc, #436]	; (8002448 <start_fill+0x1638>)
 8002292:	f002 fbed 	bl	8004a70 <go_straight>
					break;
 8002296:	e1f5      	b.n	8002684 <start_fill+0x1874>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8002298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800229c:	4619      	mov	r1, r3
 800229e:	4a62      	ldr	r2, [pc, #392]	; (8002428 <start_fill+0x1618>)
 80022a0:	460b      	mov	r3, r1
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	440b      	add	r3, r1
 80022a6:	4413      	add	r3, r2
 80022a8:	f993 3000 	ldrsb.w	r3, [r3]
 80022ac:	f113 0f04 	cmn.w	r3, #4
 80022b0:	d102      	bne.n	80022b8 <start_fill+0x14a8>
 80022b2:	f04f 30ff 	mov.w	r0, #4294967295
 80022b6:	e001      	b.n	80022bc <start_fill+0x14ac>
 80022b8:	f06f 0003 	mvn.w	r0, #3
 80022bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022c0:	4619      	mov	r1, r3
 80022c2:	4a59      	ldr	r2, [pc, #356]	; (8002428 <start_fill+0x1618>)
 80022c4:	460b      	mov	r3, r1
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	440b      	add	r3, r1
 80022ca:	4413      	add	r3, r2
 80022cc:	4602      	mov	r2, r0
 80022ce:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0, -1);
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295
 80022d4:	2200      	movs	r2, #0
 80022d6:	a152      	add	r1, pc, #328	; (adr r1, 8002420 <start_fill+0x1610>)
 80022d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022dc:	f002 fbc8 	bl	8004a70 <go_straight>
					break;
 80022e0:	e1d0      	b.n	8002684 <start_fill+0x1874>
				case south:
					if(stack[i][0] == straight){
 80022e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022e6:	4619      	mov	r1, r3
 80022e8:	4a4f      	ldr	r2, [pc, #316]	; (8002428 <start_fill+0x1618>)
 80022ea:	460b      	mov	r3, r1
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	440b      	add	r3, r1
 80022f0:	4413      	add	r3, r2
 80022f2:	f993 3000 	ldrsb.w	r3, [r3]
 80022f6:	f113 0f06 	cmn.w	r3, #6
 80022fa:	f040 80a7 	bne.w	800244c <start_fill+0x163c>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 80022fe:	4b4b      	ldr	r3, [pc, #300]	; (800242c <start_fill+0x161c>)
 8002300:	f993 3000 	ldrsb.w	r3, [r3]
 8002304:	4619      	mov	r1, r3
 8002306:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <start_fill+0x1620>)
 8002308:	f993 3000 	ldrsb.w	r3, [r3]
 800230c:	4618      	mov	r0, r3
 800230e:	4a49      	ldr	r2, [pc, #292]	; (8002434 <start_fill+0x1624>)
 8002310:	460b      	mov	r3, r1
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	4403      	add	r3, r0
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d130      	bne.n	8002388 <start_fill+0x1578>
 8002326:	4b41      	ldr	r3, [pc, #260]	; (800242c <start_fill+0x161c>)
 8002328:	f993 3000 	ldrsb.w	r3, [r3]
 800232c:	4618      	mov	r0, r3
 800232e:	4b40      	ldr	r3, [pc, #256]	; (8002430 <start_fill+0x1620>)
 8002330:	f993 3000 	ldrsb.w	r3, [r3]
 8002334:	1e5a      	subs	r2, r3, #1
 8002336:	4940      	ldr	r1, [pc, #256]	; (8002438 <start_fill+0x1628>)
 8002338:	4603      	mov	r3, r0
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4403      	add	r3, r0
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	440b      	add	r3, r1
 8002342:	4413      	add	r3, r2
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	f083 0301 	eor.w	r3, r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01b      	beq.n	8002388 <start_fill+0x1578>
							stack[i][0] = turn_left_90;
 8002350:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002354:	4619      	mov	r1, r3
 8002356:	4a34      	ldr	r2, [pc, #208]	; (8002428 <start_fill+0x1618>)
 8002358:	460b      	mov	r3, r1
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	440b      	add	r3, r1
 800235e:	4413      	add	r3, r2
 8002360:	22fc      	movs	r2, #252	; 0xfc
 8002362:	701a      	strb	r2, [r3, #0]
							turnRightHere;
 8002364:	2300      	movs	r3, #0
 8002366:	2201      	movs	r2, #1
 8002368:	f04f 0000 	mov.w	r0, #0
 800236c:	4935      	ldr	r1, [pc, #212]	; (8002444 <start_fill+0x1634>)
 800236e:	f002 fb7f 	bl	8004a70 <go_straight>
 8002372:	4832      	ldr	r0, [pc, #200]	; (800243c <start_fill+0x162c>)
 8002374:	f002 fa20 	bl	80047b8 <turn_right90>
 8002378:	2300      	movs	r3, #0
 800237a:	2200      	movs	r2, #0
 800237c:	f04f 0000 	mov.w	r0, #0
 8002380:	4931      	ldr	r1, [pc, #196]	; (8002448 <start_fill+0x1638>)
 8002382:	f002 fb75 	bl	8004a70 <go_straight>
 8002386:	e173      	b.n	8002670 <start_fill+0x1860>
						} else if(((maze[y][x] & right_wall) == 0) && !visited[y][x + 1]){
 8002388:	4b28      	ldr	r3, [pc, #160]	; (800242c <start_fill+0x161c>)
 800238a:	f993 3000 	ldrsb.w	r3, [r3]
 800238e:	4619      	mov	r1, r3
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <start_fill+0x1620>)
 8002392:	f993 3000 	ldrsb.w	r3, [r3]
 8002396:	4618      	mov	r0, r3
 8002398:	4a26      	ldr	r2, [pc, #152]	; (8002434 <start_fill+0x1624>)
 800239a:	460b      	mov	r3, r1
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	4403      	add	r3, r0
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 816c 	bne.w	800268a <start_fill+0x187a>
 80023b2:	4b1e      	ldr	r3, [pc, #120]	; (800242c <start_fill+0x161c>)
 80023b4:	f993 3000 	ldrsb.w	r3, [r3]
 80023b8:	4618      	mov	r0, r3
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <start_fill+0x1620>)
 80023bc:	f993 3000 	ldrsb.w	r3, [r3]
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	491d      	ldr	r1, [pc, #116]	; (8002438 <start_fill+0x1628>)
 80023c4:	4603      	mov	r3, r0
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4403      	add	r3, r0
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	440b      	add	r3, r1
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	f083 0301 	eor.w	r3, r3, #1
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8156 	beq.w	800268a <start_fill+0x187a>
							stack[i][0] = turn_right_90;
 80023de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023e2:	4619      	mov	r1, r3
 80023e4:	4a10      	ldr	r2, [pc, #64]	; (8002428 <start_fill+0x1618>)
 80023e6:	460b      	mov	r3, r1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	440b      	add	r3, r1
 80023ec:	4413      	add	r3, r2
 80023ee:	22ff      	movs	r2, #255	; 0xff
 80023f0:	701a      	strb	r2, [r3, #0]
							turnLeftHere;
 80023f2:	2300      	movs	r3, #0
 80023f4:	2201      	movs	r2, #1
 80023f6:	a108      	add	r1, pc, #32	; (adr r1, 8002418 <start_fill+0x1608>)
 80023f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023fc:	f002 fb38 	bl	8004a70 <go_straight>
 8002400:	480e      	ldr	r0, [pc, #56]	; (800243c <start_fill+0x162c>)
 8002402:	f002 f8a9 	bl	8004558 <turn_left90>
 8002406:	2300      	movs	r3, #0
 8002408:	2200      	movs	r2, #0
 800240a:	f04f 0000 	mov.w	r0, #0
 800240e:	490c      	ldr	r1, [pc, #48]	; (8002440 <start_fill+0x1630>)
 8002410:	f002 fb2e 	bl	8004a70 <go_straight>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
							stack[i][0] = turn_left_90;
							go_straight(square_size, 0, -1);
						}
					}
					break;
 8002414:	e139      	b.n	800268a <start_fill+0x187a>
 8002416:	bf00      	nop
 8002418:	00000000 	.word	0x00000000
 800241c:	4067c000 	.word	0x4067c000
 8002420:	00000000 	.word	0x00000000
 8002424:	4072c000 	.word	0x4072c000
 8002428:	2000037c 	.word	0x2000037c
 800242c:	200004ab 	.word	0x200004ab
 8002430:	200004aa 	.word	0x200004aa
 8002434:	20000624 	.word	0x20000624
 8002438:	20000688 	.word	0x20000688
 800243c:	200004ac 	.word	0x200004ac
 8002440:	40604000 	.word	0x40604000
 8002444:	40654000 	.word	0x40654000
 8002448:	405e0000 	.word	0x405e0000
					} else if(stack[i][0] == turn_left_90){
 800244c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002450:	4619      	mov	r1, r3
 8002452:	4a97      	ldr	r2, [pc, #604]	; (80026b0 <start_fill+0x18a0>)
 8002454:	460b      	mov	r3, r1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	440b      	add	r3, r1
 800245a:	4413      	add	r3, r2
 800245c:	f993 3000 	ldrsb.w	r3, [r3]
 8002460:	f113 0f04 	cmn.w	r3, #4
 8002464:	f040 8083 	bne.w	800256e <start_fill+0x175e>
						if(((maze[y][x] & right_wall) == 0) && !visited[y][x + 1]){
 8002468:	4b92      	ldr	r3, [pc, #584]	; (80026b4 <start_fill+0x18a4>)
 800246a:	f993 3000 	ldrsb.w	r3, [r3]
 800246e:	4619      	mov	r1, r3
 8002470:	4b91      	ldr	r3, [pc, #580]	; (80026b8 <start_fill+0x18a8>)
 8002472:	f993 3000 	ldrsb.w	r3, [r3]
 8002476:	4618      	mov	r0, r3
 8002478:	4a90      	ldr	r2, [pc, #576]	; (80026bc <start_fill+0x18ac>)
 800247a:	460b      	mov	r3, r1
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4413      	add	r3, r2
 8002484:	4403      	add	r3, r0
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d130      	bne.n	80024f2 <start_fill+0x16e2>
 8002490:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <start_fill+0x18a4>)
 8002492:	f993 3000 	ldrsb.w	r3, [r3]
 8002496:	4618      	mov	r0, r3
 8002498:	4b87      	ldr	r3, [pc, #540]	; (80026b8 <start_fill+0x18a8>)
 800249a:	f993 3000 	ldrsb.w	r3, [r3]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	4987      	ldr	r1, [pc, #540]	; (80026c0 <start_fill+0x18b0>)
 80024a2:	4603      	mov	r3, r0
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4403      	add	r3, r0
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	440b      	add	r3, r1
 80024ac:	4413      	add	r3, r2
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	f083 0301 	eor.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01b      	beq.n	80024f2 <start_fill+0x16e2>
							stack[i][0] = straight;
 80024ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024be:	4619      	mov	r1, r3
 80024c0:	4a7b      	ldr	r2, [pc, #492]	; (80026b0 <start_fill+0x18a0>)
 80024c2:	460b      	mov	r3, r1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	440b      	add	r3, r1
 80024c8:	4413      	add	r3, r2
 80024ca:	22fa      	movs	r2, #250	; 0xfa
 80024cc:	701a      	strb	r2, [r3, #0]
							turnLeftHere;
 80024ce:	2300      	movs	r3, #0
 80024d0:	2201      	movs	r2, #1
 80024d2:	a173      	add	r1, pc, #460	; (adr r1, 80026a0 <start_fill+0x1890>)
 80024d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024d8:	f002 faca 	bl	8004a70 <go_straight>
 80024dc:	4879      	ldr	r0, [pc, #484]	; (80026c4 <start_fill+0x18b4>)
 80024de:	f002 f83b 	bl	8004558 <turn_left90>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2200      	movs	r2, #0
 80024e6:	f04f 0000 	mov.w	r0, #0
 80024ea:	4977      	ldr	r1, [pc, #476]	; (80026c8 <start_fill+0x18b8>)
 80024ec:	f002 fac0 	bl	8004a70 <go_straight>
 80024f0:	e0be      	b.n	8002670 <start_fill+0x1860>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 80024f2:	4b70      	ldr	r3, [pc, #448]	; (80026b4 <start_fill+0x18a4>)
 80024f4:	f993 3000 	ldrsb.w	r3, [r3]
 80024f8:	4619      	mov	r1, r3
 80024fa:	4b6f      	ldr	r3, [pc, #444]	; (80026b8 <start_fill+0x18a8>)
 80024fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002500:	4618      	mov	r0, r3
 8002502:	4a6e      	ldr	r2, [pc, #440]	; (80026bc <start_fill+0x18ac>)
 8002504:	460b      	mov	r3, r1
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	4403      	add	r3, r0
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 80b7 	bne.w	800268a <start_fill+0x187a>
 800251c:	4b65      	ldr	r3, [pc, #404]	; (80026b4 <start_fill+0x18a4>)
 800251e:	f993 3000 	ldrsb.w	r3, [r3]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	4b64      	ldr	r3, [pc, #400]	; (80026b8 <start_fill+0x18a8>)
 8002526:	f993 3000 	ldrsb.w	r3, [r3]
 800252a:	4618      	mov	r0, r3
 800252c:	4964      	ldr	r1, [pc, #400]	; (80026c0 <start_fill+0x18b0>)
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	440b      	add	r3, r1
 8002538:	4403      	add	r3, r0
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80a1 	beq.w	800268a <start_fill+0x187a>
							stack[i][0] = turn_right_90;
 8002548:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800254c:	4619      	mov	r1, r3
 800254e:	4a58      	ldr	r2, [pc, #352]	; (80026b0 <start_fill+0x18a0>)
 8002550:	460b      	mov	r3, r1
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	440b      	add	r3, r1
 8002556:	4413      	add	r3, r2
 8002558:	22ff      	movs	r2, #255	; 0xff
 800255a:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0, -1);
 800255c:	f04f 33ff 	mov.w	r3, #4294967295
 8002560:	2200      	movs	r2, #0
 8002562:	a151      	add	r1, pc, #324	; (adr r1, 80026a8 <start_fill+0x1898>)
 8002564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002568:	f002 fa82 	bl	8004a70 <go_straight>
					break;
 800256c:	e08d      	b.n	800268a <start_fill+0x187a>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 800256e:	4b51      	ldr	r3, [pc, #324]	; (80026b4 <start_fill+0x18a4>)
 8002570:	f993 3000 	ldrsb.w	r3, [r3]
 8002574:	4619      	mov	r1, r3
 8002576:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <start_fill+0x18a8>)
 8002578:	f993 3000 	ldrsb.w	r3, [r3]
 800257c:	4618      	mov	r0, r3
 800257e:	4a4f      	ldr	r2, [pc, #316]	; (80026bc <start_fill+0x18ac>)
 8002580:	460b      	mov	r3, r1
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	4403      	add	r3, r0
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d130      	bne.n	80025f8 <start_fill+0x17e8>
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <start_fill+0x18a4>)
 8002598:	f993 3000 	ldrsb.w	r3, [r3]
 800259c:	4618      	mov	r0, r3
 800259e:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <start_fill+0x18a8>)
 80025a0:	f993 3000 	ldrsb.w	r3, [r3]
 80025a4:	1e5a      	subs	r2, r3, #1
 80025a6:	4946      	ldr	r1, [pc, #280]	; (80026c0 <start_fill+0x18b0>)
 80025a8:	4603      	mov	r3, r0
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4403      	add	r3, r0
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	440b      	add	r3, r1
 80025b2:	4413      	add	r3, r2
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	f083 0301 	eor.w	r3, r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01b      	beq.n	80025f8 <start_fill+0x17e8>
							stack[i][0] = straight;
 80025c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025c4:	4619      	mov	r1, r3
 80025c6:	4a3a      	ldr	r2, [pc, #232]	; (80026b0 <start_fill+0x18a0>)
 80025c8:	460b      	mov	r3, r1
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	440b      	add	r3, r1
 80025ce:	4413      	add	r3, r2
 80025d0:	22fa      	movs	r2, #250	; 0xfa
 80025d2:	701a      	strb	r2, [r3, #0]
							turnRightHere;
 80025d4:	2300      	movs	r3, #0
 80025d6:	2201      	movs	r2, #1
 80025d8:	f04f 0000 	mov.w	r0, #0
 80025dc:	493b      	ldr	r1, [pc, #236]	; (80026cc <start_fill+0x18bc>)
 80025de:	f002 fa47 	bl	8004a70 <go_straight>
 80025e2:	4838      	ldr	r0, [pc, #224]	; (80026c4 <start_fill+0x18b4>)
 80025e4:	f002 f8e8 	bl	80047b8 <turn_right90>
 80025e8:	2300      	movs	r3, #0
 80025ea:	2200      	movs	r2, #0
 80025ec:	f04f 0000 	mov.w	r0, #0
 80025f0:	4937      	ldr	r1, [pc, #220]	; (80026d0 <start_fill+0x18c0>)
 80025f2:	f002 fa3d 	bl	8004a70 <go_straight>
 80025f6:	e03b      	b.n	8002670 <start_fill+0x1860>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 80025f8:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <start_fill+0x18a4>)
 80025fa:	f993 3000 	ldrsb.w	r3, [r3]
 80025fe:	4619      	mov	r1, r3
 8002600:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <start_fill+0x18a8>)
 8002602:	f993 3000 	ldrsb.w	r3, [r3]
 8002606:	4618      	mov	r0, r3
 8002608:	4a2c      	ldr	r2, [pc, #176]	; (80026bc <start_fill+0x18ac>)
 800260a:	460b      	mov	r3, r1
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	4403      	add	r3, r0
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d134      	bne.n	800268a <start_fill+0x187a>
 8002620:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <start_fill+0x18a4>)
 8002622:	f993 3000 	ldrsb.w	r3, [r3]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <start_fill+0x18a8>)
 800262a:	f993 3000 	ldrsb.w	r3, [r3]
 800262e:	4618      	mov	r0, r3
 8002630:	4923      	ldr	r1, [pc, #140]	; (80026c0 <start_fill+0x18b0>)
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	440b      	add	r3, r1
 800263c:	4403      	add	r3, r0
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	f083 0301 	eor.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01f      	beq.n	800268a <start_fill+0x187a>
							stack[i][0] = turn_left_90;
 800264a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800264e:	4619      	mov	r1, r3
 8002650:	4a17      	ldr	r2, [pc, #92]	; (80026b0 <start_fill+0x18a0>)
 8002652:	460b      	mov	r3, r1
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	440b      	add	r3, r1
 8002658:	4413      	add	r3, r2
 800265a:	22fc      	movs	r2, #252	; 0xfc
 800265c:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0, -1);
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	2200      	movs	r2, #0
 8002664:	a110      	add	r1, pc, #64	; (adr r1, 80026a8 <start_fill+0x1898>)
 8002666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800266a:	f002 fa01 	bl	8004a70 <go_straight>
					break;
 800266e:	e00c      	b.n	800268a <start_fill+0x187a>
 8002670:	e00b      	b.n	800268a <start_fill+0x187a>
			if(frontfree){
 8002672:	bf00      	nop
 8002674:	f7fe bc25 	b.w	8000ec2 <start_fill+0xb2>
					break;
 8002678:	bf00      	nop
 800267a:	f7fe bc22 	b.w	8000ec2 <start_fill+0xb2>
					break;
 800267e:	bf00      	nop
 8002680:	f7fe bc1f 	b.w	8000ec2 <start_fill+0xb2>
					break;
 8002684:	bf00      	nop
 8002686:	f7fe bc1c 	b.w	8000ec2 <start_fill+0xb2>
					break;
 800268a:	bf00      	nop
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800268c:	f7fe bc19 	b.w	8000ec2 <start_fill+0xb2>
			}
		}
	}
	for(int n = 0; n < grid_size; n++){
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	e0c4      	b.n	8002820 <start_fill+0x1a10>
		for(int m = 0; m < grid_size; m++){
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	e0ba      	b.n	8002812 <start_fill+0x1a02>
 800269c:	f3af 8000 	nop.w
 80026a0:	00000000 	.word	0x00000000
 80026a4:	4067c000 	.word	0x4067c000
 80026a8:	00000000 	.word	0x00000000
 80026ac:	4072c000 	.word	0x4072c000
 80026b0:	2000037c 	.word	0x2000037c
 80026b4:	200004ab 	.word	0x200004ab
 80026b8:	200004aa 	.word	0x200004aa
 80026bc:	20000624 	.word	0x20000624
 80026c0:	20000688 	.word	0x20000688
 80026c4:	200004ac 	.word	0x200004ac
 80026c8:	40604000 	.word	0x40604000
 80026cc:	40654000 	.word	0x40654000
 80026d0:	405e0000 	.word	0x405e0000
			if(!visited[n][m]){
 80026d4:	495a      	ldr	r1, [pc, #360]	; (8002840 <start_fill+0x1a30>)
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	18ca      	adds	r2, r1, r3
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4413      	add	r3, r2
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	f083 0301 	eor.w	r3, r3, #1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 808c 	beq.w	800280c <start_fill+0x19fc>
				maze[n][m] |= 15;
 80026f4:	4953      	ldr	r1, [pc, #332]	; (8002844 <start_fill+0x1a34>)
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	18ca      	adds	r2, r1, r3
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	f043 030f 	orr.w	r3, r3, #15
 800270c:	b2d8      	uxtb	r0, r3
 800270e:	494d      	ldr	r1, [pc, #308]	; (8002844 <start_fill+0x1a34>)
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	18ca      	adds	r2, r1, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	4602      	mov	r2, r0
 8002722:	701a      	strb	r2, [r3, #0]
				if(n > 0){ maze[n - 1][m] |= bottom_wall; }
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b00      	cmp	r3, #0
 8002728:	dd19      	ble.n	800275e <start_fill+0x194e>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	1e5a      	subs	r2, r3, #1
 800272e:	4945      	ldr	r1, [pc, #276]	; (8002844 <start_fill+0x1a34>)
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	18ca      	adds	r2, r1, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	3a01      	subs	r2, #1
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	b2d8      	uxtb	r0, r3
 800274a:	493e      	ldr	r1, [pc, #248]	; (8002844 <start_fill+0x1a34>)
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	18ca      	adds	r2, r1, r3
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4413      	add	r3, r2
 800275a:	4602      	mov	r2, r0
 800275c:	701a      	strb	r2, [r3, #0]
				if(n + 1 < grid_size){ maze[n + 1][m] |= top_wall; }
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2b08      	cmp	r3, #8
 8002762:	dc19      	bgt.n	8002798 <start_fill+0x1988>
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	4936      	ldr	r1, [pc, #216]	; (8002844 <start_fill+0x1a34>)
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	18ca      	adds	r2, r1, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	3201      	adds	r2, #1
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	b2d8      	uxtb	r0, r3
 8002784:	492f      	ldr	r1, [pc, #188]	; (8002844 <start_fill+0x1a34>)
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	18ca      	adds	r2, r1, r3
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	4602      	mov	r2, r0
 8002796:	701a      	strb	r2, [r3, #0]
				if(m > 0){ maze[n][m - 1] |= right_wall; }
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	dd19      	ble.n	80027d2 <start_fill+0x19c2>
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1e59      	subs	r1, r3, #1
 80027a2:	4828      	ldr	r0, [pc, #160]	; (8002844 <start_fill+0x1a34>)
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4403      	add	r3, r0
 80027b0:	440b      	add	r3, r1
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	1e51      	subs	r1, r2, #1
 80027b8:	f043 0304 	orr.w	r3, r3, #4
 80027bc:	b2dc      	uxtb	r4, r3
 80027be:	4821      	ldr	r0, [pc, #132]	; (8002844 <start_fill+0x1a34>)
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4403      	add	r3, r0
 80027cc:	440b      	add	r3, r1
 80027ce:	4622      	mov	r2, r4
 80027d0:	701a      	strb	r2, [r3, #0]
				if(m + 1 < grid_size){ maze[n][m + 1] |= left_wall; }
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	dc19      	bgt.n	800280c <start_fill+0x19fc>
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1c59      	adds	r1, r3, #1
 80027dc:	4819      	ldr	r0, [pc, #100]	; (8002844 <start_fill+0x1a34>)
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4403      	add	r3, r0
 80027ea:	440b      	add	r3, r1
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	1c51      	adds	r1, r2, #1
 80027f2:	f043 0308 	orr.w	r3, r3, #8
 80027f6:	b2dc      	uxtb	r4, r3
 80027f8:	4812      	ldr	r0, [pc, #72]	; (8002844 <start_fill+0x1a34>)
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4403      	add	r3, r0
 8002806:	440b      	add	r3, r1
 8002808:	4622      	mov	r2, r4
 800280a:	701a      	strb	r2, [r3, #0]
		for(int m = 0; m < grid_size; m++){
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	3301      	adds	r3, #1
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2b09      	cmp	r3, #9
 8002816:	f77f af5d 	ble.w	80026d4 <start_fill+0x18c4>
	for(int n = 0; n < grid_size; n++){
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3301      	adds	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b09      	cmp	r3, #9
 8002824:	f77f af37 	ble.w	8002696 <start_fill+0x1886>
			}
		}
	}
	length_stack = i;
 8002828:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <start_fill+0x1a38>)
 800282e:	801a      	strh	r2, [r3, #0]
	brake(2);
 8002830:	2002      	movs	r0, #2
 8002832:	f002 fee9 	bl	8005608 <brake>
}
 8002836:	bf00      	nop
 8002838:	3724      	adds	r7, #36	; 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd90      	pop	{r4, r7, pc}
 800283e:	bf00      	nop
 8002840:	20000688 	.word	0x20000688
 8002844:	20000624 	.word	0x20000624
 8002848:	200004a8 	.word	0x200004a8
 800284c:	00000000 	.word	0x00000000

08002850 <found>:
void found(int16_t *index){
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	(*index)++;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800285e:	b29b      	uxth	r3, r3
 8002860:	3301      	adds	r3, #1
 8002862:	b29b      	uxth	r3, r3
 8002864:	b21a      	sxth	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	801a      	strh	r2, [r3, #0]
	switch(direction){
 800286a:	4b49      	ldr	r3, [pc, #292]	; (8002990 <found+0x140>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d059      	beq.n	8002926 <found+0xd6>
 8002872:	2b02      	cmp	r3, #2
 8002874:	f300 8083 	bgt.w	800297e <found+0x12e>
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <found+0x32>
 800287c:	2b01      	cmp	r3, #1
 800287e:	d029      	beq.n	80028d4 <found+0x84>
			stack[*index][1] = -1;
			stack[*index][2] = 2;
			go_straight(square_size * 2, 1, -1);
			break;
	}
}
 8002880:	e07d      	b.n	800297e <found+0x12e>
			stack[*index][0] = turn_right_90;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002888:	4619      	mov	r1, r3
 800288a:	4a42      	ldr	r2, [pc, #264]	; (8002994 <found+0x144>)
 800288c:	460b      	mov	r3, r1
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	440b      	add	r3, r1
 8002892:	4413      	add	r3, r2
 8002894:	22ff      	movs	r2, #255	; 0xff
 8002896:	701a      	strb	r2, [r3, #0]
			stack[*index][1] = -1;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800289e:	4619      	mov	r1, r3
 80028a0:	4a3c      	ldr	r2, [pc, #240]	; (8002994 <found+0x144>)
 80028a2:	460b      	mov	r3, r1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	440b      	add	r3, r1
 80028a8:	4413      	add	r3, r2
 80028aa:	3301      	adds	r3, #1
 80028ac:	22ff      	movs	r2, #255	; 0xff
 80028ae:	701a      	strb	r2, [r3, #0]
			turnRightHere;
 80028b0:	2300      	movs	r3, #0
 80028b2:	2201      	movs	r2, #1
 80028b4:	f04f 0000 	mov.w	r0, #0
 80028b8:	4937      	ldr	r1, [pc, #220]	; (8002998 <found+0x148>)
 80028ba:	f002 f8d9 	bl	8004a70 <go_straight>
 80028be:	4834      	ldr	r0, [pc, #208]	; (8002990 <found+0x140>)
 80028c0:	f001 ff7a 	bl	80047b8 <turn_right90>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2200      	movs	r2, #0
 80028c8:	f04f 0000 	mov.w	r0, #0
 80028cc:	4933      	ldr	r1, [pc, #204]	; (800299c <found+0x14c>)
 80028ce:	f002 f8cf 	bl	8004a70 <go_straight>
			break;
 80028d2:	e054      	b.n	800297e <found+0x12e>
			stack[*index][0] = turn_left_90;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028da:	4619      	mov	r1, r3
 80028dc:	4a2d      	ldr	r2, [pc, #180]	; (8002994 <found+0x144>)
 80028de:	460b      	mov	r3, r1
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	440b      	add	r3, r1
 80028e4:	4413      	add	r3, r2
 80028e6:	22fc      	movs	r2, #252	; 0xfc
 80028e8:	701a      	strb	r2, [r3, #0]
			stack[*index][1] = -1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f0:	4619      	mov	r1, r3
 80028f2:	4a28      	ldr	r2, [pc, #160]	; (8002994 <found+0x144>)
 80028f4:	460b      	mov	r3, r1
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	440b      	add	r3, r1
 80028fa:	4413      	add	r3, r2
 80028fc:	3301      	adds	r3, #1
 80028fe:	22ff      	movs	r2, #255	; 0xff
 8002900:	701a      	strb	r2, [r3, #0]
			turnLeftHere;
 8002902:	2300      	movs	r3, #0
 8002904:	2201      	movs	r2, #1
 8002906:	a120      	add	r1, pc, #128	; (adr r1, 8002988 <found+0x138>)
 8002908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800290c:	f002 f8b0 	bl	8004a70 <go_straight>
 8002910:	481f      	ldr	r0, [pc, #124]	; (8002990 <found+0x140>)
 8002912:	f001 fe21 	bl	8004558 <turn_left90>
 8002916:	2300      	movs	r3, #0
 8002918:	2200      	movs	r2, #0
 800291a:	f04f 0000 	mov.w	r0, #0
 800291e:	4920      	ldr	r1, [pc, #128]	; (80029a0 <found+0x150>)
 8002920:	f002 f8a6 	bl	8004a70 <go_straight>
			break;
 8002924:	e02b      	b.n	800297e <found+0x12e>
			stack[*index][0] = straight;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292c:	4619      	mov	r1, r3
 800292e:	4a19      	ldr	r2, [pc, #100]	; (8002994 <found+0x144>)
 8002930:	460b      	mov	r3, r1
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	440b      	add	r3, r1
 8002936:	4413      	add	r3, r2
 8002938:	22fa      	movs	r2, #250	; 0xfa
 800293a:	701a      	strb	r2, [r3, #0]
			stack[*index][1] = -1;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002942:	4619      	mov	r1, r3
 8002944:	4a13      	ldr	r2, [pc, #76]	; (8002994 <found+0x144>)
 8002946:	460b      	mov	r3, r1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	440b      	add	r3, r1
 800294c:	4413      	add	r3, r2
 800294e:	3301      	adds	r3, #1
 8002950:	22ff      	movs	r2, #255	; 0xff
 8002952:	701a      	strb	r2, [r3, #0]
			stack[*index][2] = 2;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800295a:	4619      	mov	r1, r3
 800295c:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <found+0x144>)
 800295e:	460b      	mov	r3, r1
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	440b      	add	r3, r1
 8002964:	4413      	add	r3, r2
 8002966:	3302      	adds	r3, #2
 8002968:	2202      	movs	r2, #2
 800296a:	701a      	strb	r2, [r3, #0]
			go_straight(square_size * 2, 1, -1);
 800296c:	f04f 33ff 	mov.w	r3, #4294967295
 8002970:	2201      	movs	r2, #1
 8002972:	f04f 0000 	mov.w	r0, #0
 8002976:	490b      	ldr	r1, [pc, #44]	; (80029a4 <found+0x154>)
 8002978:	f002 f87a 	bl	8004a70 <go_straight>
			break;
 800297c:	bf00      	nop
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	00000000 	.word	0x00000000
 800298c:	4067c000 	.word	0x4067c000
 8002990:	200004ac 	.word	0x200004ac
 8002994:	2000037c 	.word	0x2000037c
 8002998:	40654000 	.word	0x40654000
 800299c:	405e0000 	.word	0x405e0000
 80029a0:	40604000 	.word	0x40604000
 80029a4:	4082c000 	.word	0x4082c000

080029a8 <set_wall>:

void set_wall(bool rbl, bool rbr, bool rbf){
 80029a8:	b490      	push	{r4, r7}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
 80029b2:	460b      	mov	r3, r1
 80029b4:	71bb      	strb	r3, [r7, #6]
 80029b6:	4613      	mov	r3, r2
 80029b8:	717b      	strb	r3, [r7, #5]
	switch(direction){
 80029ba:	4b86      	ldr	r3, [pc, #536]	; (8002bd4 <set_wall+0x22c>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	f200 8415 	bhi.w	80031ee <set_wall+0x846>
 80029c4:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <set_wall+0x24>)
 80029c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	08002be5 	.word	0x08002be5
 80029d4:	08002de9 	.word	0x08002de9
 80029d8:	08002fed 	.word	0x08002fed
		case west:
			x--;
 80029dc:	4b7e      	ldr	r3, [pc, #504]	; (8002bd8 <set_wall+0x230>)
 80029de:	f993 3000 	ldrsb.w	r3, [r3]
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	b25a      	sxtb	r2, r3
 80029ea:	4b7b      	ldr	r3, [pc, #492]	; (8002bd8 <set_wall+0x230>)
 80029ec:	701a      	strb	r2, [r3, #0]
			if(rbl){
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d04c      	beq.n	8002a8e <set_wall+0xe6>
				maze[y][x] |= bottom_wall;
 80029f4:	4b79      	ldr	r3, [pc, #484]	; (8002bdc <set_wall+0x234>)
 80029f6:	f993 3000 	ldrsb.w	r3, [r3]
 80029fa:	4619      	mov	r1, r3
 80029fc:	4b76      	ldr	r3, [pc, #472]	; (8002bd8 <set_wall+0x230>)
 80029fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002a02:	4618      	mov	r0, r3
 8002a04:	4a76      	ldr	r2, [pc, #472]	; (8002be0 <set_wall+0x238>)
 8002a06:	460b      	mov	r3, r1
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	4403      	add	r3, r0
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4a71      	ldr	r2, [pc, #452]	; (8002bdc <set_wall+0x234>)
 8002a16:	f992 2000 	ldrsb.w	r2, [r2]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4a6e      	ldr	r2, [pc, #440]	; (8002bd8 <set_wall+0x230>)
 8002a1e:	f992 2000 	ldrsb.w	r2, [r2]
 8002a22:	4614      	mov	r4, r2
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	b2d8      	uxtb	r0, r3
 8002a2a:	4a6d      	ldr	r2, [pc, #436]	; (8002be0 <set_wall+0x238>)
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	4423      	add	r3, r4
 8002a38:	4602      	mov	r2, r0
 8002a3a:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002a3c:	4b67      	ldr	r3, [pc, #412]	; (8002bdc <set_wall+0x234>)
 8002a3e:	f993 3000 	ldrsb.w	r3, [r3]
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	dc23      	bgt.n	8002a8e <set_wall+0xe6>
 8002a46:	4b65      	ldr	r3, [pc, #404]	; (8002bdc <set_wall+0x234>)
 8002a48:	f993 3000 	ldrsb.w	r3, [r3]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	4b62      	ldr	r3, [pc, #392]	; (8002bd8 <set_wall+0x230>)
 8002a50:	f993 3000 	ldrsb.w	r3, [r3]
 8002a54:	4618      	mov	r0, r3
 8002a56:	4962      	ldr	r1, [pc, #392]	; (8002be0 <set_wall+0x238>)
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	440b      	add	r3, r1
 8002a62:	4403      	add	r3, r0
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	4a5d      	ldr	r2, [pc, #372]	; (8002bdc <set_wall+0x234>)
 8002a68:	f992 2000 	ldrsb.w	r2, [r2]
 8002a6c:	3201      	adds	r2, #1
 8002a6e:	495a      	ldr	r1, [pc, #360]	; (8002bd8 <set_wall+0x230>)
 8002a70:	f991 1000 	ldrsb.w	r1, [r1]
 8002a74:	460c      	mov	r4, r1
 8002a76:	f043 0302 	orr.w	r3, r3, #2
 8002a7a:	b2d8      	uxtb	r0, r3
 8002a7c:	4958      	ldr	r1, [pc, #352]	; (8002be0 <set_wall+0x238>)
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	440b      	add	r3, r1
 8002a88:	4423      	add	r3, r4
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002a8e:	79bb      	ldrb	r3, [r7, #6]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d04c      	beq.n	8002b2e <set_wall+0x186>
				maze[y][x] |= top_wall;
 8002a94:	4b51      	ldr	r3, [pc, #324]	; (8002bdc <set_wall+0x234>)
 8002a96:	f993 3000 	ldrsb.w	r3, [r3]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4b4e      	ldr	r3, [pc, #312]	; (8002bd8 <set_wall+0x230>)
 8002a9e:	f993 3000 	ldrsb.w	r3, [r3]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	4a4e      	ldr	r2, [pc, #312]	; (8002be0 <set_wall+0x238>)
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	4403      	add	r3, r0
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	4a49      	ldr	r2, [pc, #292]	; (8002bdc <set_wall+0x234>)
 8002ab6:	f992 2000 	ldrsb.w	r2, [r2]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4a46      	ldr	r2, [pc, #280]	; (8002bd8 <set_wall+0x230>)
 8002abe:	f992 2000 	ldrsb.w	r2, [r2]
 8002ac2:	4614      	mov	r4, r2
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	b2d8      	uxtb	r0, r3
 8002aca:	4a45      	ldr	r2, [pc, #276]	; (8002be0 <set_wall+0x238>)
 8002acc:	460b      	mov	r3, r1
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	4423      	add	r3, r4
 8002ad8:	4602      	mov	r2, r0
 8002ada:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002adc:	4b3f      	ldr	r3, [pc, #252]	; (8002bdc <set_wall+0x234>)
 8002ade:	f993 3000 	ldrsb.w	r3, [r3]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	dd23      	ble.n	8002b2e <set_wall+0x186>
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <set_wall+0x234>)
 8002ae8:	f993 3000 	ldrsb.w	r3, [r3]
 8002aec:	1e5a      	subs	r2, r3, #1
 8002aee:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <set_wall+0x230>)
 8002af0:	f993 3000 	ldrsb.w	r3, [r3]
 8002af4:	4618      	mov	r0, r3
 8002af6:	493a      	ldr	r1, [pc, #232]	; (8002be0 <set_wall+0x238>)
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	440b      	add	r3, r1
 8002b02:	4403      	add	r3, r0
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	4a35      	ldr	r2, [pc, #212]	; (8002bdc <set_wall+0x234>)
 8002b08:	f992 2000 	ldrsb.w	r2, [r2]
 8002b0c:	3a01      	subs	r2, #1
 8002b0e:	4932      	ldr	r1, [pc, #200]	; (8002bd8 <set_wall+0x230>)
 8002b10:	f991 1000 	ldrsb.w	r1, [r1]
 8002b14:	460c      	mov	r4, r1
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	b2d8      	uxtb	r0, r3
 8002b1c:	4930      	ldr	r1, [pc, #192]	; (8002be0 <set_wall+0x238>)
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	440b      	add	r3, r1
 8002b28:	4423      	add	r3, r4
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002b2e:	797b      	ldrb	r3, [r7, #5]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 8355 	beq.w	80031e0 <set_wall+0x838>
				maze[y][x] |= left_wall;
 8002b36:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <set_wall+0x234>)
 8002b38:	f993 3000 	ldrsb.w	r3, [r3]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <set_wall+0x230>)
 8002b40:	f993 3000 	ldrsb.w	r3, [r3]
 8002b44:	4618      	mov	r0, r3
 8002b46:	4a26      	ldr	r2, [pc, #152]	; (8002be0 <set_wall+0x238>)
 8002b48:	460b      	mov	r3, r1
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	4403      	add	r3, r0
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <set_wall+0x234>)
 8002b58:	f992 2000 	ldrsb.w	r2, [r2]
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	4a1e      	ldr	r2, [pc, #120]	; (8002bd8 <set_wall+0x230>)
 8002b60:	f992 2000 	ldrsb.w	r2, [r2]
 8002b64:	4614      	mov	r4, r2
 8002b66:	f043 0308 	orr.w	r3, r3, #8
 8002b6a:	b2d8      	uxtb	r0, r3
 8002b6c:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <set_wall+0x238>)
 8002b6e:	460b      	mov	r3, r1
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	4423      	add	r3, r4
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <set_wall+0x230>)
 8002b80:	f993 3000 	ldrsb.w	r3, [r3]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f340 832b 	ble.w	80031e0 <set_wall+0x838>
 8002b8a:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <set_wall+0x234>)
 8002b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8002b90:	4618      	mov	r0, r3
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <set_wall+0x230>)
 8002b94:	f993 3000 	ldrsb.w	r3, [r3]
 8002b98:	1e5a      	subs	r2, r3, #1
 8002b9a:	4911      	ldr	r1, [pc, #68]	; (8002be0 <set_wall+0x238>)
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4403      	add	r3, r0
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	440b      	add	r3, r1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	4a0c      	ldr	r2, [pc, #48]	; (8002bdc <set_wall+0x234>)
 8002bac:	f992 2000 	ldrsb.w	r2, [r2]
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <set_wall+0x230>)
 8002bb4:	f992 2000 	ldrsb.w	r2, [r2]
 8002bb8:	3a01      	subs	r2, #1
 8002bba:	f043 0304 	orr.w	r3, r3, #4
 8002bbe:	b2dc      	uxtb	r4, r3
 8002bc0:	4907      	ldr	r1, [pc, #28]	; (8002be0 <set_wall+0x238>)
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4403      	add	r3, r0
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	440b      	add	r3, r1
 8002bcc:	4413      	add	r3, r2
 8002bce:	4622      	mov	r2, r4
 8002bd0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002bd2:	e305      	b.n	80031e0 <set_wall+0x838>
 8002bd4:	200004ac 	.word	0x200004ac
 8002bd8:	200004aa 	.word	0x200004aa
 8002bdc:	200004ab 	.word	0x200004ab
 8002be0:	20000624 	.word	0x20000624
		case east:
			x++;
 8002be4:	4b7d      	ldr	r3, [pc, #500]	; (8002ddc <set_wall+0x434>)
 8002be6:	f993 3000 	ldrsb.w	r3, [r3]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	b25a      	sxtb	r2, r3
 8002bf2:	4b7a      	ldr	r3, [pc, #488]	; (8002ddc <set_wall+0x434>)
 8002bf4:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d04c      	beq.n	8002c96 <set_wall+0x2ee>
				maze[y][x] |= top_wall;
 8002bfc:	4b78      	ldr	r3, [pc, #480]	; (8002de0 <set_wall+0x438>)
 8002bfe:	f993 3000 	ldrsb.w	r3, [r3]
 8002c02:	4619      	mov	r1, r3
 8002c04:	4b75      	ldr	r3, [pc, #468]	; (8002ddc <set_wall+0x434>)
 8002c06:	f993 3000 	ldrsb.w	r3, [r3]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	4a75      	ldr	r2, [pc, #468]	; (8002de4 <set_wall+0x43c>)
 8002c0e:	460b      	mov	r3, r1
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	4403      	add	r3, r0
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	4a70      	ldr	r2, [pc, #448]	; (8002de0 <set_wall+0x438>)
 8002c1e:	f992 2000 	ldrsb.w	r2, [r2]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4a6d      	ldr	r2, [pc, #436]	; (8002ddc <set_wall+0x434>)
 8002c26:	f992 2000 	ldrsb.w	r2, [r2]
 8002c2a:	4614      	mov	r4, r2
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	b2d8      	uxtb	r0, r3
 8002c32:	4a6c      	ldr	r2, [pc, #432]	; (8002de4 <set_wall+0x43c>)
 8002c34:	460b      	mov	r3, r1
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	4423      	add	r3, r4
 8002c40:	4602      	mov	r2, r0
 8002c42:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002c44:	4b66      	ldr	r3, [pc, #408]	; (8002de0 <set_wall+0x438>)
 8002c46:	f993 3000 	ldrsb.w	r3, [r3]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	dd23      	ble.n	8002c96 <set_wall+0x2ee>
 8002c4e:	4b64      	ldr	r3, [pc, #400]	; (8002de0 <set_wall+0x438>)
 8002c50:	f993 3000 	ldrsb.w	r3, [r3]
 8002c54:	1e5a      	subs	r2, r3, #1
 8002c56:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <set_wall+0x434>)
 8002c58:	f993 3000 	ldrsb.w	r3, [r3]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	4961      	ldr	r1, [pc, #388]	; (8002de4 <set_wall+0x43c>)
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	440b      	add	r3, r1
 8002c6a:	4403      	add	r3, r0
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	4a5c      	ldr	r2, [pc, #368]	; (8002de0 <set_wall+0x438>)
 8002c70:	f992 2000 	ldrsb.w	r2, [r2]
 8002c74:	3a01      	subs	r2, #1
 8002c76:	4959      	ldr	r1, [pc, #356]	; (8002ddc <set_wall+0x434>)
 8002c78:	f991 1000 	ldrsb.w	r1, [r1]
 8002c7c:	460c      	mov	r4, r1
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	b2d8      	uxtb	r0, r3
 8002c84:	4957      	ldr	r1, [pc, #348]	; (8002de4 <set_wall+0x43c>)
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	440b      	add	r3, r1
 8002c90:	4423      	add	r3, r4
 8002c92:	4602      	mov	r2, r0
 8002c94:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002c96:	79bb      	ldrb	r3, [r7, #6]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d04c      	beq.n	8002d36 <set_wall+0x38e>
				maze[y][x] |= bottom_wall;
 8002c9c:	4b50      	ldr	r3, [pc, #320]	; (8002de0 <set_wall+0x438>)
 8002c9e:	f993 3000 	ldrsb.w	r3, [r3]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4b4d      	ldr	r3, [pc, #308]	; (8002ddc <set_wall+0x434>)
 8002ca6:	f993 3000 	ldrsb.w	r3, [r3]
 8002caa:	4618      	mov	r0, r3
 8002cac:	4a4d      	ldr	r2, [pc, #308]	; (8002de4 <set_wall+0x43c>)
 8002cae:	460b      	mov	r3, r1
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4403      	add	r3, r0
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4a48      	ldr	r2, [pc, #288]	; (8002de0 <set_wall+0x438>)
 8002cbe:	f992 2000 	ldrsb.w	r2, [r2]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4a45      	ldr	r2, [pc, #276]	; (8002ddc <set_wall+0x434>)
 8002cc6:	f992 2000 	ldrsb.w	r2, [r2]
 8002cca:	4614      	mov	r4, r2
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	b2d8      	uxtb	r0, r3
 8002cd2:	4a44      	ldr	r2, [pc, #272]	; (8002de4 <set_wall+0x43c>)
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	4423      	add	r3, r4
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002ce4:	4b3e      	ldr	r3, [pc, #248]	; (8002de0 <set_wall+0x438>)
 8002ce6:	f993 3000 	ldrsb.w	r3, [r3]
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	dc23      	bgt.n	8002d36 <set_wall+0x38e>
 8002cee:	4b3c      	ldr	r3, [pc, #240]	; (8002de0 <set_wall+0x438>)
 8002cf0:	f993 3000 	ldrsb.w	r3, [r3]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <set_wall+0x434>)
 8002cf8:	f993 3000 	ldrsb.w	r3, [r3]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	4939      	ldr	r1, [pc, #228]	; (8002de4 <set_wall+0x43c>)
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	440b      	add	r3, r1
 8002d0a:	4403      	add	r3, r0
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	4a34      	ldr	r2, [pc, #208]	; (8002de0 <set_wall+0x438>)
 8002d10:	f992 2000 	ldrsb.w	r2, [r2]
 8002d14:	3201      	adds	r2, #1
 8002d16:	4931      	ldr	r1, [pc, #196]	; (8002ddc <set_wall+0x434>)
 8002d18:	f991 1000 	ldrsb.w	r1, [r1]
 8002d1c:	460c      	mov	r4, r1
 8002d1e:	f043 0302 	orr.w	r3, r3, #2
 8002d22:	b2d8      	uxtb	r0, r3
 8002d24:	492f      	ldr	r1, [pc, #188]	; (8002de4 <set_wall+0x43c>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	440b      	add	r3, r1
 8002d30:	4423      	add	r3, r4
 8002d32:	4602      	mov	r2, r0
 8002d34:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002d36:	797b      	ldrb	r3, [r7, #5]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8253 	beq.w	80031e4 <set_wall+0x83c>
				maze[y][x] |= right_wall;
 8002d3e:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <set_wall+0x438>)
 8002d40:	f993 3000 	ldrsb.w	r3, [r3]
 8002d44:	4619      	mov	r1, r3
 8002d46:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <set_wall+0x434>)
 8002d48:	f993 3000 	ldrsb.w	r3, [r3]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	4a25      	ldr	r2, [pc, #148]	; (8002de4 <set_wall+0x43c>)
 8002d50:	460b      	mov	r3, r1
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	4403      	add	r3, r0
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	4a20      	ldr	r2, [pc, #128]	; (8002de0 <set_wall+0x438>)
 8002d60:	f992 2000 	ldrsb.w	r2, [r2]
 8002d64:	4611      	mov	r1, r2
 8002d66:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <set_wall+0x434>)
 8002d68:	f992 2000 	ldrsb.w	r2, [r2]
 8002d6c:	4614      	mov	r4, r2
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	b2d8      	uxtb	r0, r3
 8002d74:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <set_wall+0x43c>)
 8002d76:	460b      	mov	r3, r1
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	4423      	add	r3, r4
 8002d82:	4602      	mov	r2, r0
 8002d84:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <set_wall+0x434>)
 8002d88:	f993 3000 	ldrsb.w	r3, [r3]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	f300 8229 	bgt.w	80031e4 <set_wall+0x83c>
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <set_wall+0x438>)
 8002d94:	f993 3000 	ldrsb.w	r3, [r3]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <set_wall+0x434>)
 8002d9c:	f993 3000 	ldrsb.w	r3, [r3]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	4910      	ldr	r1, [pc, #64]	; (8002de4 <set_wall+0x43c>)
 8002da4:	4603      	mov	r3, r0
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4403      	add	r3, r0
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	440b      	add	r3, r1
 8002dae:	4413      	add	r3, r2
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <set_wall+0x438>)
 8002db4:	f992 2000 	ldrsb.w	r2, [r2]
 8002db8:	4610      	mov	r0, r2
 8002dba:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <set_wall+0x434>)
 8002dbc:	f992 2000 	ldrsb.w	r2, [r2]
 8002dc0:	3201      	adds	r2, #1
 8002dc2:	f043 0308 	orr.w	r3, r3, #8
 8002dc6:	b2dc      	uxtb	r4, r3
 8002dc8:	4906      	ldr	r1, [pc, #24]	; (8002de4 <set_wall+0x43c>)
 8002dca:	4603      	mov	r3, r0
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4403      	add	r3, r0
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	440b      	add	r3, r1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	4622      	mov	r2, r4
 8002dd8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002dda:	e203      	b.n	80031e4 <set_wall+0x83c>
 8002ddc:	200004aa 	.word	0x200004aa
 8002de0:	200004ab 	.word	0x200004ab
 8002de4:	20000624 	.word	0x20000624
		case north:
			y--;
 8002de8:	4b7d      	ldr	r3, [pc, #500]	; (8002fe0 <set_wall+0x638>)
 8002dea:	f993 3000 	ldrsb.w	r3, [r3]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	b25a      	sxtb	r2, r3
 8002df6:	4b7a      	ldr	r3, [pc, #488]	; (8002fe0 <set_wall+0x638>)
 8002df8:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d04c      	beq.n	8002e9a <set_wall+0x4f2>
				maze[y][x] |= left_wall;
 8002e00:	4b77      	ldr	r3, [pc, #476]	; (8002fe0 <set_wall+0x638>)
 8002e02:	f993 3000 	ldrsb.w	r3, [r3]
 8002e06:	4619      	mov	r1, r3
 8002e08:	4b76      	ldr	r3, [pc, #472]	; (8002fe4 <set_wall+0x63c>)
 8002e0a:	f993 3000 	ldrsb.w	r3, [r3]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	4a75      	ldr	r2, [pc, #468]	; (8002fe8 <set_wall+0x640>)
 8002e12:	460b      	mov	r3, r1
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	4403      	add	r3, r0
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4a6f      	ldr	r2, [pc, #444]	; (8002fe0 <set_wall+0x638>)
 8002e22:	f992 2000 	ldrsb.w	r2, [r2]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4a6e      	ldr	r2, [pc, #440]	; (8002fe4 <set_wall+0x63c>)
 8002e2a:	f992 2000 	ldrsb.w	r2, [r2]
 8002e2e:	4614      	mov	r4, r2
 8002e30:	f043 0308 	orr.w	r3, r3, #8
 8002e34:	b2d8      	uxtb	r0, r3
 8002e36:	4a6c      	ldr	r2, [pc, #432]	; (8002fe8 <set_wall+0x640>)
 8002e38:	460b      	mov	r3, r1
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	4423      	add	r3, r4
 8002e44:	4602      	mov	r2, r0
 8002e46:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002e48:	4b66      	ldr	r3, [pc, #408]	; (8002fe4 <set_wall+0x63c>)
 8002e4a:	f993 3000 	ldrsb.w	r3, [r3]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	dd23      	ble.n	8002e9a <set_wall+0x4f2>
 8002e52:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <set_wall+0x638>)
 8002e54:	f993 3000 	ldrsb.w	r3, [r3]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	4b62      	ldr	r3, [pc, #392]	; (8002fe4 <set_wall+0x63c>)
 8002e5c:	f993 3000 	ldrsb.w	r3, [r3]
 8002e60:	1e5a      	subs	r2, r3, #1
 8002e62:	4961      	ldr	r1, [pc, #388]	; (8002fe8 <set_wall+0x640>)
 8002e64:	4603      	mov	r3, r0
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4403      	add	r3, r0
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	440b      	add	r3, r1
 8002e6e:	4413      	add	r3, r2
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4a5b      	ldr	r2, [pc, #364]	; (8002fe0 <set_wall+0x638>)
 8002e74:	f992 2000 	ldrsb.w	r2, [r2]
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4a5a      	ldr	r2, [pc, #360]	; (8002fe4 <set_wall+0x63c>)
 8002e7c:	f992 2000 	ldrsb.w	r2, [r2]
 8002e80:	3a01      	subs	r2, #1
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	b2dc      	uxtb	r4, r3
 8002e88:	4957      	ldr	r1, [pc, #348]	; (8002fe8 <set_wall+0x640>)
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4403      	add	r3, r0
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	440b      	add	r3, r1
 8002e94:	4413      	add	r3, r2
 8002e96:	4622      	mov	r2, r4
 8002e98:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002e9a:	79bb      	ldrb	r3, [r7, #6]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d04c      	beq.n	8002f3a <set_wall+0x592>
				maze[y][x] |= right_wall;
 8002ea0:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <set_wall+0x638>)
 8002ea2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4b4e      	ldr	r3, [pc, #312]	; (8002fe4 <set_wall+0x63c>)
 8002eaa:	f993 3000 	ldrsb.w	r3, [r3]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	4a4d      	ldr	r2, [pc, #308]	; (8002fe8 <set_wall+0x640>)
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	4403      	add	r3, r0
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4a47      	ldr	r2, [pc, #284]	; (8002fe0 <set_wall+0x638>)
 8002ec2:	f992 2000 	ldrsb.w	r2, [r2]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4a46      	ldr	r2, [pc, #280]	; (8002fe4 <set_wall+0x63c>)
 8002eca:	f992 2000 	ldrsb.w	r2, [r2]
 8002ece:	4614      	mov	r4, r2
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	b2d8      	uxtb	r0, r3
 8002ed6:	4a44      	ldr	r2, [pc, #272]	; (8002fe8 <set_wall+0x640>)
 8002ed8:	460b      	mov	r3, r1
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	4423      	add	r3, r4
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002ee8:	4b3e      	ldr	r3, [pc, #248]	; (8002fe4 <set_wall+0x63c>)
 8002eea:	f993 3000 	ldrsb.w	r3, [r3]
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	dc23      	bgt.n	8002f3a <set_wall+0x592>
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <set_wall+0x638>)
 8002ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <set_wall+0x63c>)
 8002efc:	f993 3000 	ldrsb.w	r3, [r3]
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	4939      	ldr	r1, [pc, #228]	; (8002fe8 <set_wall+0x640>)
 8002f04:	4603      	mov	r3, r0
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4403      	add	r3, r0
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	440b      	add	r3, r1
 8002f0e:	4413      	add	r3, r2
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	4a33      	ldr	r2, [pc, #204]	; (8002fe0 <set_wall+0x638>)
 8002f14:	f992 2000 	ldrsb.w	r2, [r2]
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4a32      	ldr	r2, [pc, #200]	; (8002fe4 <set_wall+0x63c>)
 8002f1c:	f992 2000 	ldrsb.w	r2, [r2]
 8002f20:	3201      	adds	r2, #1
 8002f22:	f043 0308 	orr.w	r3, r3, #8
 8002f26:	b2dc      	uxtb	r4, r3
 8002f28:	492f      	ldr	r1, [pc, #188]	; (8002fe8 <set_wall+0x640>)
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4403      	add	r3, r0
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	440b      	add	r3, r1
 8002f34:	4413      	add	r3, r2
 8002f36:	4622      	mov	r2, r4
 8002f38:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002f3a:	797b      	ldrb	r3, [r7, #5]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 8153 	beq.w	80031e8 <set_wall+0x840>
				maze[y][x] |= top_wall;
 8002f42:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <set_wall+0x638>)
 8002f44:	f993 3000 	ldrsb.w	r3, [r3]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <set_wall+0x63c>)
 8002f4c:	f993 3000 	ldrsb.w	r3, [r3]
 8002f50:	4618      	mov	r0, r3
 8002f52:	4a25      	ldr	r2, [pc, #148]	; (8002fe8 <set_wall+0x640>)
 8002f54:	460b      	mov	r3, r1
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	4403      	add	r3, r0
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	4a1f      	ldr	r2, [pc, #124]	; (8002fe0 <set_wall+0x638>)
 8002f64:	f992 2000 	ldrsb.w	r2, [r2]
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	; (8002fe4 <set_wall+0x63c>)
 8002f6c:	f992 2000 	ldrsb.w	r2, [r2]
 8002f70:	4614      	mov	r4, r2
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	b2d8      	uxtb	r0, r3
 8002f78:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <set_wall+0x640>)
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	4423      	add	r3, r4
 8002f86:	4602      	mov	r2, r0
 8002f88:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <set_wall+0x638>)
 8002f8c:	f993 3000 	ldrsb.w	r3, [r3]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f340 8129 	ble.w	80031e8 <set_wall+0x840>
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <set_wall+0x638>)
 8002f98:	f993 3000 	ldrsb.w	r3, [r3]
 8002f9c:	1e5a      	subs	r2, r3, #1
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <set_wall+0x63c>)
 8002fa0:	f993 3000 	ldrsb.w	r3, [r3]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	4910      	ldr	r1, [pc, #64]	; (8002fe8 <set_wall+0x640>)
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	440b      	add	r3, r1
 8002fb2:	4403      	add	r3, r0
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <set_wall+0x638>)
 8002fb8:	f992 2000 	ldrsb.w	r2, [r2]
 8002fbc:	3a01      	subs	r2, #1
 8002fbe:	4909      	ldr	r1, [pc, #36]	; (8002fe4 <set_wall+0x63c>)
 8002fc0:	f991 1000 	ldrsb.w	r1, [r1]
 8002fc4:	460c      	mov	r4, r1
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	b2d8      	uxtb	r0, r3
 8002fcc:	4906      	ldr	r1, [pc, #24]	; (8002fe8 <set_wall+0x640>)
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	440b      	add	r3, r1
 8002fd8:	4423      	add	r3, r4
 8002fda:	4602      	mov	r2, r0
 8002fdc:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002fde:	e103      	b.n	80031e8 <set_wall+0x840>
 8002fe0:	200004ab 	.word	0x200004ab
 8002fe4:	200004aa 	.word	0x200004aa
 8002fe8:	20000624 	.word	0x20000624
		case south:
			y++;
 8002fec:	4b82      	ldr	r3, [pc, #520]	; (80031f8 <set_wall+0x850>)
 8002fee:	f993 3000 	ldrsb.w	r3, [r3]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	b25a      	sxtb	r2, r3
 8002ffa:	4b7f      	ldr	r3, [pc, #508]	; (80031f8 <set_wall+0x850>)
 8002ffc:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d04c      	beq.n	800309e <set_wall+0x6f6>
				maze[y][x] |= right_wall;
 8003004:	4b7c      	ldr	r3, [pc, #496]	; (80031f8 <set_wall+0x850>)
 8003006:	f993 3000 	ldrsb.w	r3, [r3]
 800300a:	4619      	mov	r1, r3
 800300c:	4b7b      	ldr	r3, [pc, #492]	; (80031fc <set_wall+0x854>)
 800300e:	f993 3000 	ldrsb.w	r3, [r3]
 8003012:	4618      	mov	r0, r3
 8003014:	4a7a      	ldr	r2, [pc, #488]	; (8003200 <set_wall+0x858>)
 8003016:	460b      	mov	r3, r1
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	4403      	add	r3, r0
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	4a74      	ldr	r2, [pc, #464]	; (80031f8 <set_wall+0x850>)
 8003026:	f992 2000 	ldrsb.w	r2, [r2]
 800302a:	4611      	mov	r1, r2
 800302c:	4a73      	ldr	r2, [pc, #460]	; (80031fc <set_wall+0x854>)
 800302e:	f992 2000 	ldrsb.w	r2, [r2]
 8003032:	4614      	mov	r4, r2
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	b2d8      	uxtb	r0, r3
 800303a:	4a71      	ldr	r2, [pc, #452]	; (8003200 <set_wall+0x858>)
 800303c:	460b      	mov	r3, r1
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	4423      	add	r3, r4
 8003048:	4602      	mov	r2, r0
 800304a:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 800304c:	4b6b      	ldr	r3, [pc, #428]	; (80031fc <set_wall+0x854>)
 800304e:	f993 3000 	ldrsb.w	r3, [r3]
 8003052:	2b08      	cmp	r3, #8
 8003054:	dc23      	bgt.n	800309e <set_wall+0x6f6>
 8003056:	4b68      	ldr	r3, [pc, #416]	; (80031f8 <set_wall+0x850>)
 8003058:	f993 3000 	ldrsb.w	r3, [r3]
 800305c:	4618      	mov	r0, r3
 800305e:	4b67      	ldr	r3, [pc, #412]	; (80031fc <set_wall+0x854>)
 8003060:	f993 3000 	ldrsb.w	r3, [r3]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	4966      	ldr	r1, [pc, #408]	; (8003200 <set_wall+0x858>)
 8003068:	4603      	mov	r3, r0
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4403      	add	r3, r0
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	440b      	add	r3, r1
 8003072:	4413      	add	r3, r2
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	4a60      	ldr	r2, [pc, #384]	; (80031f8 <set_wall+0x850>)
 8003078:	f992 2000 	ldrsb.w	r2, [r2]
 800307c:	4610      	mov	r0, r2
 800307e:	4a5f      	ldr	r2, [pc, #380]	; (80031fc <set_wall+0x854>)
 8003080:	f992 2000 	ldrsb.w	r2, [r2]
 8003084:	3201      	adds	r2, #1
 8003086:	f043 0308 	orr.w	r3, r3, #8
 800308a:	b2dc      	uxtb	r4, r3
 800308c:	495c      	ldr	r1, [pc, #368]	; (8003200 <set_wall+0x858>)
 800308e:	4603      	mov	r3, r0
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4403      	add	r3, r0
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	440b      	add	r3, r1
 8003098:	4413      	add	r3, r2
 800309a:	4622      	mov	r2, r4
 800309c:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 800309e:	79bb      	ldrb	r3, [r7, #6]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d04c      	beq.n	800313e <set_wall+0x796>
				maze[y][x] |= left_wall;
 80030a4:	4b54      	ldr	r3, [pc, #336]	; (80031f8 <set_wall+0x850>)
 80030a6:	f993 3000 	ldrsb.w	r3, [r3]
 80030aa:	4619      	mov	r1, r3
 80030ac:	4b53      	ldr	r3, [pc, #332]	; (80031fc <set_wall+0x854>)
 80030ae:	f993 3000 	ldrsb.w	r3, [r3]
 80030b2:	4618      	mov	r0, r3
 80030b4:	4a52      	ldr	r2, [pc, #328]	; (8003200 <set_wall+0x858>)
 80030b6:	460b      	mov	r3, r1
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	4403      	add	r3, r0
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	4a4c      	ldr	r2, [pc, #304]	; (80031f8 <set_wall+0x850>)
 80030c6:	f992 2000 	ldrsb.w	r2, [r2]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4a4b      	ldr	r2, [pc, #300]	; (80031fc <set_wall+0x854>)
 80030ce:	f992 2000 	ldrsb.w	r2, [r2]
 80030d2:	4614      	mov	r4, r2
 80030d4:	f043 0308 	orr.w	r3, r3, #8
 80030d8:	b2d8      	uxtb	r0, r3
 80030da:	4a49      	ldr	r2, [pc, #292]	; (8003200 <set_wall+0x858>)
 80030dc:	460b      	mov	r3, r1
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	4423      	add	r3, r4
 80030e8:	4602      	mov	r2, r0
 80030ea:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 80030ec:	4b43      	ldr	r3, [pc, #268]	; (80031fc <set_wall+0x854>)
 80030ee:	f993 3000 	ldrsb.w	r3, [r3]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	dd23      	ble.n	800313e <set_wall+0x796>
 80030f6:	4b40      	ldr	r3, [pc, #256]	; (80031f8 <set_wall+0x850>)
 80030f8:	f993 3000 	ldrsb.w	r3, [r3]
 80030fc:	4618      	mov	r0, r3
 80030fe:	4b3f      	ldr	r3, [pc, #252]	; (80031fc <set_wall+0x854>)
 8003100:	f993 3000 	ldrsb.w	r3, [r3]
 8003104:	1e5a      	subs	r2, r3, #1
 8003106:	493e      	ldr	r1, [pc, #248]	; (8003200 <set_wall+0x858>)
 8003108:	4603      	mov	r3, r0
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4403      	add	r3, r0
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	440b      	add	r3, r1
 8003112:	4413      	add	r3, r2
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	4a38      	ldr	r2, [pc, #224]	; (80031f8 <set_wall+0x850>)
 8003118:	f992 2000 	ldrsb.w	r2, [r2]
 800311c:	4610      	mov	r0, r2
 800311e:	4a37      	ldr	r2, [pc, #220]	; (80031fc <set_wall+0x854>)
 8003120:	f992 2000 	ldrsb.w	r2, [r2]
 8003124:	3a01      	subs	r2, #1
 8003126:	f043 0304 	orr.w	r3, r3, #4
 800312a:	b2dc      	uxtb	r4, r3
 800312c:	4934      	ldr	r1, [pc, #208]	; (8003200 <set_wall+0x858>)
 800312e:	4603      	mov	r3, r0
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4403      	add	r3, r0
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	440b      	add	r3, r1
 8003138:	4413      	add	r3, r2
 800313a:	4622      	mov	r2, r4
 800313c:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 800313e:	797b      	ldrb	r3, [r7, #5]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d053      	beq.n	80031ec <set_wall+0x844>
				maze[y][x] |= bottom_wall;
 8003144:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <set_wall+0x850>)
 8003146:	f993 3000 	ldrsb.w	r3, [r3]
 800314a:	4619      	mov	r1, r3
 800314c:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <set_wall+0x854>)
 800314e:	f993 3000 	ldrsb.w	r3, [r3]
 8003152:	4618      	mov	r0, r3
 8003154:	4a2a      	ldr	r2, [pc, #168]	; (8003200 <set_wall+0x858>)
 8003156:	460b      	mov	r3, r1
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	4413      	add	r3, r2
 8003160:	4403      	add	r3, r0
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	4a24      	ldr	r2, [pc, #144]	; (80031f8 <set_wall+0x850>)
 8003166:	f992 2000 	ldrsb.w	r2, [r2]
 800316a:	4611      	mov	r1, r2
 800316c:	4a23      	ldr	r2, [pc, #140]	; (80031fc <set_wall+0x854>)
 800316e:	f992 2000 	ldrsb.w	r2, [r2]
 8003172:	4614      	mov	r4, r2
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	b2d8      	uxtb	r0, r3
 800317a:	4a21      	ldr	r2, [pc, #132]	; (8003200 <set_wall+0x858>)
 800317c:	460b      	mov	r3, r1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4413      	add	r3, r2
 8003186:	4423      	add	r3, r4
 8003188:	4602      	mov	r2, r0
 800318a:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 800318c:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <set_wall+0x850>)
 800318e:	f993 3000 	ldrsb.w	r3, [r3]
 8003192:	2b08      	cmp	r3, #8
 8003194:	dc2a      	bgt.n	80031ec <set_wall+0x844>
 8003196:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <set_wall+0x850>)
 8003198:	f993 3000 	ldrsb.w	r3, [r3]
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	4b17      	ldr	r3, [pc, #92]	; (80031fc <set_wall+0x854>)
 80031a0:	f993 3000 	ldrsb.w	r3, [r3]
 80031a4:	4618      	mov	r0, r3
 80031a6:	4916      	ldr	r1, [pc, #88]	; (8003200 <set_wall+0x858>)
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	440b      	add	r3, r1
 80031b2:	4403      	add	r3, r0
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <set_wall+0x850>)
 80031b8:	f992 2000 	ldrsb.w	r2, [r2]
 80031bc:	3201      	adds	r2, #1
 80031be:	490f      	ldr	r1, [pc, #60]	; (80031fc <set_wall+0x854>)
 80031c0:	f991 1000 	ldrsb.w	r1, [r1]
 80031c4:	460c      	mov	r4, r1
 80031c6:	f043 0302 	orr.w	r3, r3, #2
 80031ca:	b2d8      	uxtb	r0, r3
 80031cc:	490c      	ldr	r1, [pc, #48]	; (8003200 <set_wall+0x858>)
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	440b      	add	r3, r1
 80031d8:	4423      	add	r3, r4
 80031da:	4602      	mov	r2, r0
 80031dc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80031de:	e005      	b.n	80031ec <set_wall+0x844>
			break;
 80031e0:	bf00      	nop
 80031e2:	e004      	b.n	80031ee <set_wall+0x846>
			break;
 80031e4:	bf00      	nop
 80031e6:	e002      	b.n	80031ee <set_wall+0x846>
			break;
 80031e8:	bf00      	nop
 80031ea:	e000      	b.n	80031ee <set_wall+0x846>
			break;
 80031ec:	bf00      	nop
	}
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc90      	pop	{r4, r7}
 80031f6:	4770      	bx	lr
 80031f8:	200004ab 	.word	0x200004ab
 80031fc:	200004aa 	.word	0x200004aa
 8003200:	20000624 	.word	0x20000624

08003204 <sensor_init>:
VL53L0X_Version_t *pVersion[n_vl53l0x];
VL53L0X_DeviceInfo_t DeviceInfo[n_vl53l0x];



void sensor_init(){
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 800320a:	2200      	movs	r2, #0
 800320c:	217e      	movs	r1, #126	; 0x7e
 800320e:	4840      	ldr	r0, [pc, #256]	; (8003310 <sensor_init+0x10c>)
 8003210:	f002 fda6 	bl	8005d60 <HAL_GPIO_WritePin>
            |xSHUT_4_Pin|xSHUT_5_Pin, GPIO_PIN_RESET);
	HAL_Delay(100);
 8003214:	2064      	movs	r0, #100	; 0x64
 8003216:	f002 fabb 	bl	8005790 <HAL_Delay>
	uint8_t addr = 0x54;
 800321a:	2354      	movs	r3, #84	; 0x54
 800321c:	71fb      	strb	r3, [r7, #7]
	for(int i = 0 ; i < n_vl53l0x; i++){
 800321e:	2300      	movs	r3, #0
 8003220:	603b      	str	r3, [r7, #0]
 8003222:	e06c      	b.n	80032fe <sensor_init+0xfa>
		pMyDevice[i] = &MyDevice[i];
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	f44f 72c4 	mov.w	r2, #392	; 0x188
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	4a39      	ldr	r2, [pc, #228]	; (8003314 <sensor_init+0x110>)
 8003230:	441a      	add	r2, r3
 8003232:	4939      	ldr	r1, [pc, #228]	; (8003318 <sensor_init+0x114>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		pMyDevice[i]->I2cDevAddr      = 0x52;
 800323a:	4a37      	ldr	r2, [pc, #220]	; (8003318 <sensor_init+0x114>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003242:	2252      	movs	r2, #82	; 0x52
 8003244:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		pMyDevice[i]->comms_type      =  1;
 8003248:	4a33      	ldr	r2, [pc, #204]	; (8003318 <sensor_init+0x114>)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		pMyDevice[i]->comms_speed_khz =  100;
 8003256:	4a30      	ldr	r2, [pc, #192]	; (8003318 <sensor_init+0x114>)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325e:	2264      	movs	r2, #100	; 0x64
 8003260:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
		pMyDevice[i]->I2cHandle = &hi2c1;
 8003264:	4a2c      	ldr	r2, [pc, #176]	; (8003318 <sensor_init+0x114>)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326c:	4a2b      	ldr	r2, [pc, #172]	; (800331c <sensor_init+0x118>)
 800326e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		pVersion[i] = &Version[i];
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <sensor_init+0x11c>)
 8003278:	441a      	add	r2, r3
 800327a:	492a      	ldr	r1, [pc, #168]	; (8003324 <sensor_init+0x120>)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_GPIO_WritePin(GPIOA, ((uint16_t)0x0002) << i, GPIO_PIN_SET);
 8003282:	2202      	movs	r2, #2
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	b29b      	uxth	r3, r3
 800328c:	2201      	movs	r2, #1
 800328e:	4619      	mov	r1, r3
 8003290:	481f      	ldr	r0, [pc, #124]	; (8003310 <sensor_init+0x10c>)
 8003292:	f002 fd65 	bl	8005d60 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8003296:	200a      	movs	r0, #10
 8003298:	f002 fa7a 	bl	8005790 <HAL_Delay>
		status_debug = vl53l0x_init(pMyDevice[i], pVersion[i], &DeviceInfo[i], addr);
 800329c:	4a1e      	ldr	r2, [pc, #120]	; (8003318 <sensor_init+0x114>)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80032a4:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <sensor_init+0x120>)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	4413      	add	r3, r2
 80032b8:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <sensor_init+0x124>)
 80032ba:	441a      	add	r2, r3
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	f00a f8bd 	bl	800d43c <vl53l0x_init>
 80032c2:	4603      	mov	r3, r0
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b19      	ldr	r3, [pc, #100]	; (800332c <sensor_init+0x128>)
 80032c8:	701a      	strb	r2, [r3, #0]
		VL53L0X_SetOffsetCalibrationDataMicroMeter(pMyDevice[i], offset_sensor[i]);
 80032ca:	4a13      	ldr	r2, [pc, #76]	; (8003318 <sensor_init+0x114>)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032d2:	4917      	ldr	r1, [pc, #92]	; (8003330 <sensor_init+0x12c>)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f005 fca8 	bl	8008c32 <VL53L0X_SetOffsetCalibrationDataMicroMeter>
		HAL_Delay(10);
 80032e2:	200a      	movs	r0, #10
 80032e4:	f002 fa54 	bl	8005790 <HAL_Delay>
		addr+=2;
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	3302      	adds	r3, #2
 80032ec:	71fb      	strb	r3, [r7, #7]
		if(status_debug != VL53L0X_ERROR_NONE)
 80032ee:	4b0f      	ldr	r3, [pc, #60]	; (800332c <sensor_init+0x128>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	b25b      	sxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d106      	bne.n	8003306 <sensor_init+0x102>
	for(int i = 0 ; i < n_vl53l0x; i++){
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b05      	cmp	r3, #5
 8003302:	dd8f      	ble.n	8003224 <sensor_init+0x20>
			break;
	}
}
 8003304:	e000      	b.n	8003308 <sensor_init+0x104>
			break;
 8003306:	bf00      	nop
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40010800 	.word	0x40010800
 8003314:	20000748 	.word	0x20000748
 8003318:	20001078 	.word	0x20001078
 800331c:	200004b0 	.word	0x200004b0
 8003320:	20001090 	.word	0x20001090
 8003324:	200010c0 	.word	0x200010c0
 8003328:	200010d8 	.word	0x200010d8
 800332c:	20000744 	.word	0x20000744
 8003330:	0800e93c 	.word	0x0800e93c
 8003334:	00000000 	.word	0x00000000

08003338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800333c:	f002 f9c6 	bl	80056cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003340:	f000 f948 	bl	80035d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003344:	f000 fb52 	bl	80039ec <MX_GPIO_Init>
  MX_TIM1_Init();
 8003348:	f000 f9b8 	bl	80036bc <MX_TIM1_Init>
  MX_TIM2_Init();
 800334c:	f000 fa7c 	bl	8003848 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003350:	f000 face 	bl	80038f0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8003354:	f000 f984 	bl	8003660 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8003358:	f000 fb1e 	bl	8003998 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800335c:	2100      	movs	r1, #0
 800335e:	4884      	ldr	r0, [pc, #528]	; (8003570 <main+0x238>)
 8003360:	f004 fa76 	bl	8007850 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003364:	2104      	movs	r1, #4
 8003366:	4882      	ldr	r0, [pc, #520]	; (8003570 <main+0x238>)
 8003368:	f004 fa72 	bl	8007850 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800336c:	2108      	movs	r1, #8
 800336e:	4880      	ldr	r0, [pc, #512]	; (8003570 <main+0x238>)
 8003370:	f004 fa6e 	bl	8007850 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003374:	210c      	movs	r1, #12
 8003376:	487e      	ldr	r0, [pc, #504]	; (8003570 <main+0x238>)
 8003378:	f004 fa6a 	bl	8007850 <HAL_TIM_PWM_Start>
  	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800337c:	213c      	movs	r1, #60	; 0x3c
 800337e:	487d      	ldr	r0, [pc, #500]	; (8003574 <main+0x23c>)
 8003380:	f004 fbaa 	bl	8007ad8 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Base_Start_IT(&htim2);
 8003384:	487b      	ldr	r0, [pc, #492]	; (8003574 <main+0x23c>)
 8003386:	f004 f9b9 	bl	80076fc <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800338a:	213c      	movs	r1, #60	; 0x3c
 800338c:	487a      	ldr	r0, [pc, #488]	; (8003578 <main+0x240>)
 800338e:	f004 fba3 	bl	8007ad8 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Base_Start_IT(&htim3);
 8003392:	4879      	ldr	r0, [pc, #484]	; (8003578 <main+0x240>)
 8003394:	f004 f9b2 	bl	80076fc <HAL_TIM_Base_Start_IT>
	HAL_Delay(2000);
 8003398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800339c:	f002 f9f8 	bl	8005790 <HAL_Delay>

	Rmode = 0;
 80033a0:	4b76      	ldr	r3, [pc, #472]	; (800357c <main+0x244>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
	status = 0;
 80033a6:	4b76      	ldr	r3, [pc, #472]	; (8003580 <main+0x248>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 80033ac:	4b70      	ldr	r3, [pc, #448]	; (8003570 <main+0x238>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a6f      	ldr	r2, [pc, #444]	; (8003570 <main+0x238>)
 80033b2:	68d2      	ldr	r2, [r2, #12]
 80033b4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 80033b6:	4b6e      	ldr	r3, [pc, #440]	; (8003570 <main+0x238>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6d      	ldr	r2, [pc, #436]	; (8003570 <main+0x238>)
 80033bc:	68d2      	ldr	r2, [r2, #12]
 80033be:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 80033c0:	4b6b      	ldr	r3, [pc, #428]	; (8003570 <main+0x238>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a6a      	ldr	r2, [pc, #424]	; (8003570 <main+0x238>)
 80033c6:	68d2      	ldr	r2, [r2, #12]
 80033c8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 80033ca:	4b69      	ldr	r3, [pc, #420]	; (8003570 <main+0x238>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a68      	ldr	r2, [pc, #416]	; (8003570 <main+0x238>)
 80033d0:	68d2      	ldr	r2, [r2, #12]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40
	#if debug == 1
		sprintf((char*)uart_buffer, "uart send data\n");
 80033d4:	496b      	ldr	r1, [pc, #428]	; (8003584 <main+0x24c>)
 80033d6:	486c      	ldr	r0, [pc, #432]	; (8003588 <main+0x250>)
 80033d8:	f00a fbb8 	bl	800db4c <siprintf>
		HAL_UART_Transmit(&huart3, uart_buffer, sizeof (uart_buffer), 10);
 80033dc:	230a      	movs	r3, #10
 80033de:	2232      	movs	r2, #50	; 0x32
 80033e0:	4969      	ldr	r1, [pc, #420]	; (8003588 <main+0x250>)
 80033e2:	486a      	ldr	r0, [pc, #424]	; (800358c <main+0x254>)
 80033e4:	f005 fa79 	bl	80088da <HAL_UART_Transmit>
	#endif
	HAL_Delay(2000);
 80033e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80033ec:	f002 f9d0 	bl	8005790 <HAL_Delay>
	sensor_init();
 80033f0:	f7ff ff08 	bl	8003204 <sensor_init>
	if(status_debug == VL53L0X_ERROR_NONE){
 80033f4:	4b66      	ldr	r3, [pc, #408]	; (8003590 <main+0x258>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	b25b      	sxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d105      	bne.n	800340a <main+0xd2>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80033fe:	2201      	movs	r2, #1
 8003400:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003404:	4863      	ldr	r0, [pc, #396]	; (8003594 <main+0x25c>)
 8003406:	f002 fcab 	bl	8005d60 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		#if debug == 1
			c = HAL_GetTick();
 800340a:	f002 f9b7 	bl	800577c <HAL_GetTick>
 800340e:	4603      	mov	r3, r0
 8003410:	461a      	mov	r2, r3
 8003412:	4b61      	ldr	r3, [pc, #388]	; (8003598 <main+0x260>)
 8003414:	601a      	str	r2, [r3, #0]
			vl53l0x_GetRanging_now(pMyDevice[0], &ts1);
 8003416:	4b61      	ldr	r3, [pc, #388]	; (800359c <main+0x264>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4961      	ldr	r1, [pc, #388]	; (80035a0 <main+0x268>)
 800341c:	4618      	mov	r0, r3
 800341e:	f00a f8d4 	bl	800d5ca <vl53l0x_GetRanging_now>
			vl53l0x_GetRanging_now(pMyDevice[1], &ts2);
 8003422:	4b5e      	ldr	r3, [pc, #376]	; (800359c <main+0x264>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	495f      	ldr	r1, [pc, #380]	; (80035a4 <main+0x26c>)
 8003428:	4618      	mov	r0, r3
 800342a:	f00a f8ce 	bl	800d5ca <vl53l0x_GetRanging_now>
			vl53l0x_GetRanging_now(pMyDevice[2], &ts3);
 800342e:	4b5b      	ldr	r3, [pc, #364]	; (800359c <main+0x264>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	495d      	ldr	r1, [pc, #372]	; (80035a8 <main+0x270>)
 8003434:	4618      	mov	r0, r3
 8003436:	f00a f8c8 	bl	800d5ca <vl53l0x_GetRanging_now>
			vl53l0x_GetRanging_now(pMyDevice[3], &ts4);
 800343a:	4b58      	ldr	r3, [pc, #352]	; (800359c <main+0x264>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	495b      	ldr	r1, [pc, #364]	; (80035ac <main+0x274>)
 8003440:	4618      	mov	r0, r3
 8003442:	f00a f8c2 	bl	800d5ca <vl53l0x_GetRanging_now>
			vl53l0x_GetRanging_now(pMyDevice[4], &ts5);
 8003446:	4b55      	ldr	r3, [pc, #340]	; (800359c <main+0x264>)
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	4959      	ldr	r1, [pc, #356]	; (80035b0 <main+0x278>)
 800344c:	4618      	mov	r0, r3
 800344e:	f00a f8bc 	bl	800d5ca <vl53l0x_GetRanging_now>
			vl53l0x_GetRanging_now(pMyDevice[5], &ts6);
 8003452:	4b52      	ldr	r3, [pc, #328]	; (800359c <main+0x264>)
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	4957      	ldr	r1, [pc, #348]	; (80035b4 <main+0x27c>)
 8003458:	4618      	mov	r0, r3
 800345a:	f00a f8b6 	bl	800d5ca <vl53l0x_GetRanging_now>
			d = HAL_GetTick();
 800345e:	f002 f98d 	bl	800577c <HAL_GetTick>
 8003462:	4603      	mov	r3, r0
 8003464:	461a      	mov	r2, r3
 8003466:	4b54      	ldr	r3, [pc, #336]	; (80035b8 <main+0x280>)
 8003468:	601a      	str	r2, [r3, #0]
			sprintf((char*)uart_buffer, "%d\n", d - c);
 800346a:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <main+0x280>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4b4a      	ldr	r3, [pc, #296]	; (8003598 <main+0x260>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	461a      	mov	r2, r3
 8003476:	4951      	ldr	r1, [pc, #324]	; (80035bc <main+0x284>)
 8003478:	4843      	ldr	r0, [pc, #268]	; (8003588 <main+0x250>)
 800347a:	f00a fb67 	bl	800db4c <siprintf>
			HAL_UART_Transmit(&huart3, uart_buffer, sizeof (uart_buffer), 10);
 800347e:	230a      	movs	r3, #10
 8003480:	2232      	movs	r2, #50	; 0x32
 8003482:	4941      	ldr	r1, [pc, #260]	; (8003588 <main+0x250>)
 8003484:	4841      	ldr	r0, [pc, #260]	; (800358c <main+0x254>)
 8003486:	f005 fa28 	bl	80088da <HAL_UART_Transmit>
			a = TIM2->CNT;
 800348a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	461a      	mov	r2, r3
 8003492:	4b4b      	ldr	r3, [pc, #300]	; (80035c0 <main+0x288>)
 8003494:	601a      	str	r2, [r3, #0]
			b = TIM3->CNT;
 8003496:	4b4b      	ldr	r3, [pc, #300]	; (80035c4 <main+0x28c>)
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	461a      	mov	r2, r3
 800349c:	4b4a      	ldr	r3, [pc, #296]	; (80035c8 <main+0x290>)
 800349e:	601a      	str	r2, [r3, #0]
			VL53L0X_GetLimitCheckValue(pMyDevice[0], VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, &aaaa);
 80034a0:	4b3e      	ldr	r3, [pc, #248]	; (800359c <main+0x264>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a49      	ldr	r2, [pc, #292]	; (80035cc <main+0x294>)
 80034a6:	2104      	movs	r1, #4
 80034a8:	4618      	mov	r0, r3
 80034aa:	f006 facd 	bl	8009a48 <VL53L0X_GetLimitCheckValue>
		#endif
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Rmode == 1) {
 80034ae:	4b33      	ldr	r3, [pc, #204]	; (800357c <main+0x244>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d131      	bne.n	800351c <main+0x1e4>
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80034b8:	2006      	movs	r0, #6
 80034ba:	f002 fab2 	bl	8005a22 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80034be:	2007      	movs	r0, #7
 80034c0:	f002 faaf 	bl	8005a22 <HAL_NVIC_DisableIRQ>
			HAL_Delay(1000);
 80034c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034c8:	f002 f962 	bl	8005790 <HAL_Delay>

			found_path = 0;
 80034cc:	4b40      	ldr	r3, [pc, #256]	; (80035d0 <main+0x298>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
			go_straight(300, 0, -3);
 80034d2:	f06f 0302 	mvn.w	r3, #2
 80034d6:	2200      	movs	r2, #0
 80034d8:	a123      	add	r1, pc, #140	; (adr r1, 8003568 <main+0x230>)
 80034da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034de:	f001 fac7 	bl	8004a70 <go_straight>
			start_fill();
 80034e2:	f7fd fc95 	bl	8000e10 <start_fill>
			if(found_path == 1){
 80034e6:	4b3a      	ldr	r3, [pc, #232]	; (80035d0 <main+0x298>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d10d      	bne.n	800350a <main+0x1d2>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80034ee:	2200      	movs	r2, #0
 80034f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034f4:	4827      	ldr	r0, [pc, #156]	; (8003594 <main+0x25c>)
 80034f6:	f002 fc33 	bl	8005d60 <HAL_GPIO_WritePin>
				OPPath();
 80034fa:	f000 fb89 	bl	8003c10 <OPPath>
				//findShortestPath();
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80034fe:	2201      	movs	r2, #1
 8003500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003504:	4823      	ldr	r0, [pc, #140]	; (8003594 <main+0x25c>)
 8003506:	f002 fc2b 	bl	8005d60 <HAL_GPIO_WritePin>
			}

			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800350a:	2006      	movs	r0, #6
 800350c:	f002 fa7b 	bl	8005a06 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003510:	2007      	movs	r0, #7
 8003512:	f002 fa78 	bl	8005a06 <HAL_NVIC_EnableIRQ>
			Rmode = 0;
 8003516:	4b19      	ldr	r3, [pc, #100]	; (800357c <main+0x244>)
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
		}
		if (Rmode == 2) {
 800351c:	4b17      	ldr	r3, [pc, #92]	; (800357c <main+0x244>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	f47f af71 	bne.w	800340a <main+0xd2>
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8003528:	2006      	movs	r0, #6
 800352a:	f002 fa7a 	bl	8005a22 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800352e:	2007      	movs	r0, #7
 8003530:	f002 fa77 	bl	8005a22 <HAL_NVIC_DisableIRQ>
			HAL_Delay(1000);
 8003534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003538:	f002 f92a 	bl	8005790 <HAL_Delay>
			go_straight(300, 0, -3);
 800353c:	f06f 0302 	mvn.w	r3, #2
 8003540:	2200      	movs	r2, #0
 8003542:	a109      	add	r1, pc, #36	; (adr r1, 8003568 <main+0x230>)
 8003544:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003548:	f001 fa92 	bl	8004a70 <go_straight>
			running_OPPath();
 800354c:	f000 fae0 	bl	8003b10 <running_OPPath>
			//running();
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003550:	2006      	movs	r0, #6
 8003552:	f002 fa58 	bl	8005a06 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003556:	2007      	movs	r0, #7
 8003558:	f002 fa55 	bl	8005a06 <HAL_NVIC_EnableIRQ>
			Rmode = 0;
 800355c:	4b07      	ldr	r3, [pc, #28]	; (800357c <main+0x244>)
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
			c = HAL_GetTick();
 8003562:	e752      	b.n	800340a <main+0xd2>
 8003564:	f3af 8000 	nop.w
 8003568:	00000000 	.word	0x00000000
 800356c:	4072c000 	.word	0x4072c000
 8003570:	20000504 	.word	0x20000504
 8003574:	2000054c 	.word	0x2000054c
 8003578:	20000594 	.word	0x20000594
 800357c:	200006ec 	.word	0x200006ec
 8003580:	200006ed 	.word	0x200006ed
 8003584:	0800e44c 	.word	0x0800e44c
 8003588:	2000070c 	.word	0x2000070c
 800358c:	200005dc 	.word	0x200005dc
 8003590:	20000744 	.word	0x20000744
 8003594:	40011000 	.word	0x40011000
 8003598:	200006f8 	.word	0x200006f8
 800359c:	20001078 	.word	0x20001078
 80035a0:	20000700 	.word	0x20000700
 80035a4:	20000702 	.word	0x20000702
 80035a8:	20000704 	.word	0x20000704
 80035ac:	20000706 	.word	0x20000706
 80035b0:	20000708 	.word	0x20000708
 80035b4:	2000070a 	.word	0x2000070a
 80035b8:	200006fc 	.word	0x200006fc
 80035bc:	0800e45c 	.word	0x0800e45c
 80035c0:	200006f0 	.word	0x200006f0
 80035c4:	40000400 	.word	0x40000400
 80035c8:	200006f4 	.word	0x200006f4
 80035cc:	20000740 	.word	0x20000740
 80035d0:	200006ee 	.word	0x200006ee

080035d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b090      	sub	sp, #64	; 0x40
 80035d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035da:	f107 0318 	add.w	r3, r7, #24
 80035de:	2228      	movs	r2, #40	; 0x28
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f00a faaa 	bl	800db3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	609a      	str	r2, [r3, #8]
 80035f2:	60da      	str	r2, [r3, #12]
 80035f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035f6:	2301      	movs	r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003600:	2300      	movs	r3, #0
 8003602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003604:	2301      	movs	r3, #1
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003608:	2302      	movs	r3, #2
 800360a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800360c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003612:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003616:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003618:	f107 0318 	add.w	r3, r7, #24
 800361c:	4618      	mov	r0, r3
 800361e:	f003 fc0d 	bl	8006e3c <HAL_RCC_OscConfig>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003628:	f000 fa6c 	bl	8003b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800362c:	230f      	movs	r3, #15
 800362e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003630:	2302      	movs	r3, #2
 8003632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800363c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	2102      	movs	r1, #2
 8003646:	4618      	mov	r0, r3
 8003648:	f003 fe7a 	bl	8007340 <HAL_RCC_ClockConfig>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003652:	f000 fa57 	bl	8003b04 <Error_Handler>
  }
}
 8003656:	bf00      	nop
 8003658:	3740      	adds	r7, #64	; 0x40
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003664:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <MX_I2C1_Init+0x50>)
 8003666:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <MX_I2C1_Init+0x54>)
 8003668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800366a:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <MX_I2C1_Init+0x50>)
 800366c:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <MX_I2C1_Init+0x58>)
 800366e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <MX_I2C1_Init+0x50>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <MX_I2C1_Init+0x50>)
 8003678:	2200      	movs	r2, #0
 800367a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <MX_I2C1_Init+0x50>)
 800367e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003684:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <MX_I2C1_Init+0x50>)
 8003686:	2200      	movs	r2, #0
 8003688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <MX_I2C1_Init+0x50>)
 800368c:	2200      	movs	r2, #0
 800368e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003690:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <MX_I2C1_Init+0x50>)
 8003692:	2200      	movs	r2, #0
 8003694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <MX_I2C1_Init+0x50>)
 8003698:	2200      	movs	r2, #0
 800369a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800369c:	4804      	ldr	r0, [pc, #16]	; (80036b0 <MX_I2C1_Init+0x50>)
 800369e:	f002 fb99 	bl	8005dd4 <HAL_I2C_Init>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80036a8:	f000 fa2c 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036ac:	bf00      	nop
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	200004b0 	.word	0x200004b0
 80036b4:	40005400 	.word	0x40005400
 80036b8:	000186a0 	.word	0x000186a0

080036bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b096      	sub	sp, #88	; 0x58
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	605a      	str	r2, [r3, #4]
 80036e4:	609a      	str	r2, [r3, #8]
 80036e6:	60da      	str	r2, [r3, #12]
 80036e8:	611a      	str	r2, [r3, #16]
 80036ea:	615a      	str	r2, [r3, #20]
 80036ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80036ee:	1d3b      	adds	r3, r7, #4
 80036f0:	2220      	movs	r2, #32
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f00a fa21 	bl	800db3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036fa:	4b51      	ldr	r3, [pc, #324]	; (8003840 <MX_TIM1_Init+0x184>)
 80036fc:	4a51      	ldr	r2, [pc, #324]	; (8003844 <MX_TIM1_Init+0x188>)
 80036fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8003700:	4b4f      	ldr	r3, [pc, #316]	; (8003840 <MX_TIM1_Init+0x184>)
 8003702:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003706:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003708:	4b4d      	ldr	r3, [pc, #308]	; (8003840 <MX_TIM1_Init+0x184>)
 800370a:	2200      	movs	r2, #0
 800370c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800370e:	4b4c      	ldr	r3, [pc, #304]	; (8003840 <MX_TIM1_Init+0x184>)
 8003710:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003714:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <MX_TIM1_Init+0x184>)
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800371c:	4b48      	ldr	r3, [pc, #288]	; (8003840 <MX_TIM1_Init+0x184>)
 800371e:	2200      	movs	r2, #0
 8003720:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <MX_TIM1_Init+0x184>)
 8003724:	2280      	movs	r2, #128	; 0x80
 8003726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003728:	4845      	ldr	r0, [pc, #276]	; (8003840 <MX_TIM1_Init+0x184>)
 800372a:	f003 ff97 	bl	800765c <HAL_TIM_Base_Init>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003734:	f000 f9e6 	bl	8003b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800373c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800373e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003742:	4619      	mov	r1, r3
 8003744:	483e      	ldr	r0, [pc, #248]	; (8003840 <MX_TIM1_Init+0x184>)
 8003746:	f004 fc1f 	bl	8007f88 <HAL_TIM_ConfigClockSource>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003750:	f000 f9d8 	bl	8003b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003754:	483a      	ldr	r0, [pc, #232]	; (8003840 <MX_TIM1_Init+0x184>)
 8003756:	f004 f823 	bl	80077a0 <HAL_TIM_PWM_Init>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003760:	f000 f9d0 	bl	8003b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003764:	2300      	movs	r3, #0
 8003766:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003768:	2300      	movs	r3, #0
 800376a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800376c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003770:	4619      	mov	r1, r3
 8003772:	4833      	ldr	r0, [pc, #204]	; (8003840 <MX_TIM1_Init+0x184>)
 8003774:	f004 ffa0 	bl	80086b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800377e:	f000 f9c1 	bl	8003b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003782:	2360      	movs	r3, #96	; 0x60
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800378a:	2300      	movs	r3, #0
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800378e:	2300      	movs	r3, #0
 8003790:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003792:	2300      	movs	r3, #0
 8003794:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003796:	2300      	movs	r3, #0
 8003798:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800379a:	2300      	movs	r3, #0
 800379c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800379e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a2:	2200      	movs	r2, #0
 80037a4:	4619      	mov	r1, r3
 80037a6:	4826      	ldr	r0, [pc, #152]	; (8003840 <MX_TIM1_Init+0x184>)
 80037a8:	f004 fb2c 	bl	8007e04 <HAL_TIM_PWM_ConfigChannel>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80037b2:	f000 f9a7 	bl	8003b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ba:	2204      	movs	r2, #4
 80037bc:	4619      	mov	r1, r3
 80037be:	4820      	ldr	r0, [pc, #128]	; (8003840 <MX_TIM1_Init+0x184>)
 80037c0:	f004 fb20 	bl	8007e04 <HAL_TIM_PWM_ConfigChannel>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80037ca:	f000 f99b 	bl	8003b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d2:	2208      	movs	r2, #8
 80037d4:	4619      	mov	r1, r3
 80037d6:	481a      	ldr	r0, [pc, #104]	; (8003840 <MX_TIM1_Init+0x184>)
 80037d8:	f004 fb14 	bl	8007e04 <HAL_TIM_PWM_ConfigChannel>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80037e2:	f000 f98f 	bl	8003b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ea:	220c      	movs	r2, #12
 80037ec:	4619      	mov	r1, r3
 80037ee:	4814      	ldr	r0, [pc, #80]	; (8003840 <MX_TIM1_Init+0x184>)
 80037f0:	f004 fb08 	bl	8007e04 <HAL_TIM_PWM_ConfigChannel>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80037fa:	f000 f983 	bl	8003b04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037fe:	2300      	movs	r3, #0
 8003800:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003816:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003818:	2300      	movs	r3, #0
 800381a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800381c:	1d3b      	adds	r3, r7, #4
 800381e:	4619      	mov	r1, r3
 8003820:	4807      	ldr	r0, [pc, #28]	; (8003840 <MX_TIM1_Init+0x184>)
 8003822:	f004 ffa7 	bl	8008774 <HAL_TIMEx_ConfigBreakDeadTime>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 800382c:	f000 f96a 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003830:	4803      	ldr	r0, [pc, #12]	; (8003840 <MX_TIM1_Init+0x184>)
 8003832:	f000 fc29 	bl	8004088 <HAL_TIM_MspPostInit>

}
 8003836:	bf00      	nop
 8003838:	3758      	adds	r7, #88	; 0x58
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000504 	.word	0x20000504
 8003844:	40012c00 	.word	0x40012c00

08003848 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08c      	sub	sp, #48	; 0x30
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800384e:	f107 030c 	add.w	r3, r7, #12
 8003852:	2224      	movs	r2, #36	; 0x24
 8003854:	2100      	movs	r1, #0
 8003856:	4618      	mov	r0, r3
 8003858:	f00a f970 	bl	800db3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800385c:	1d3b      	adds	r3, r7, #4
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <MX_TIM2_Init+0xa4>)
 8003866:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800386a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800386c:	4b1f      	ldr	r3, [pc, #124]	; (80038ec <MX_TIM2_Init+0xa4>)
 800386e:	2200      	movs	r2, #0
 8003870:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003872:	4b1e      	ldr	r3, [pc, #120]	; (80038ec <MX_TIM2_Init+0xa4>)
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003878:	4b1c      	ldr	r3, [pc, #112]	; (80038ec <MX_TIM2_Init+0xa4>)
 800387a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800387e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003880:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <MX_TIM2_Init+0xa4>)
 8003882:	2200      	movs	r2, #0
 8003884:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003886:	4b19      	ldr	r3, [pc, #100]	; (80038ec <MX_TIM2_Init+0xa4>)
 8003888:	2200      	movs	r2, #0
 800388a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800388c:	2301      	movs	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003890:	2300      	movs	r3, #0
 8003892:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003894:	2301      	movs	r3, #1
 8003896:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003898:	2300      	movs	r3, #0
 800389a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80038a0:	2300      	movs	r3, #0
 80038a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038a4:	2301      	movs	r3, #1
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80038a8:	2300      	movs	r3, #0
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	4619      	mov	r1, r3
 80038b6:	480d      	ldr	r0, [pc, #52]	; (80038ec <MX_TIM2_Init+0xa4>)
 80038b8:	f004 f86c 	bl	8007994 <HAL_TIM_Encoder_Init>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80038c2:	f000 f91f 	bl	8003b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	4619      	mov	r1, r3
 80038d2:	4806      	ldr	r0, [pc, #24]	; (80038ec <MX_TIM2_Init+0xa4>)
 80038d4:	f004 fef0 	bl	80086b8 <HAL_TIMEx_MasterConfigSynchronization>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80038de:	f000 f911 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038e2:	bf00      	nop
 80038e4:	3730      	adds	r7, #48	; 0x30
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	2000054c 	.word	0x2000054c

080038f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08c      	sub	sp, #48	; 0x30
 80038f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038f6:	f107 030c 	add.w	r3, r7, #12
 80038fa:	2224      	movs	r2, #36	; 0x24
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f00a f91c 	bl	800db3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800390c:	4b20      	ldr	r3, [pc, #128]	; (8003990 <MX_TIM3_Init+0xa0>)
 800390e:	4a21      	ldr	r2, [pc, #132]	; (8003994 <MX_TIM3_Init+0xa4>)
 8003910:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003912:	4b1f      	ldr	r3, [pc, #124]	; (8003990 <MX_TIM3_Init+0xa0>)
 8003914:	2200      	movs	r2, #0
 8003916:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003918:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <MX_TIM3_Init+0xa0>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800391e:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <MX_TIM3_Init+0xa0>)
 8003920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003924:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003926:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <MX_TIM3_Init+0xa0>)
 8003928:	2200      	movs	r2, #0
 800392a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800392c:	4b18      	ldr	r3, [pc, #96]	; (8003990 <MX_TIM3_Init+0xa0>)
 800392e:	2200      	movs	r2, #0
 8003930:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003932:	2301      	movs	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800393a:	2301      	movs	r3, #1
 800393c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003946:	2300      	movs	r3, #0
 8003948:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800394a:	2301      	movs	r3, #1
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800394e:	2300      	movs	r3, #0
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	4619      	mov	r1, r3
 800395c:	480c      	ldr	r0, [pc, #48]	; (8003990 <MX_TIM3_Init+0xa0>)
 800395e:	f004 f819 	bl	8007994 <HAL_TIM_Encoder_Init>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003968:	f000 f8cc 	bl	8003b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800396c:	2300      	movs	r3, #0
 800396e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003970:	2300      	movs	r3, #0
 8003972:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	4619      	mov	r1, r3
 8003978:	4805      	ldr	r0, [pc, #20]	; (8003990 <MX_TIM3_Init+0xa0>)
 800397a:	f004 fe9d 	bl	80086b8 <HAL_TIMEx_MasterConfigSynchronization>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003984:	f000 f8be 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003988:	bf00      	nop
 800398a:	3730      	adds	r7, #48	; 0x30
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000594 	.word	0x20000594
 8003994:	40000400 	.word	0x40000400

08003998 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <MX_USART3_UART_Init+0x4c>)
 800399e:	4a12      	ldr	r2, [pc, #72]	; (80039e8 <MX_USART3_UART_Init+0x50>)
 80039a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80039a2:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <MX_USART3_UART_Init+0x4c>)
 80039a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80039aa:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <MX_USART3_UART_Init+0x4c>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <MX_USART3_UART_Init+0x4c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <MX_USART3_UART_Init+0x4c>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <MX_USART3_UART_Init+0x4c>)
 80039be:	220c      	movs	r2, #12
 80039c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <MX_USART3_UART_Init+0x4c>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <MX_USART3_UART_Init+0x4c>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80039ce:	4805      	ldr	r0, [pc, #20]	; (80039e4 <MX_USART3_UART_Init+0x4c>)
 80039d0:	f004 ff33 	bl	800883a <HAL_UART_Init>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80039da:	f000 f893 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	200005dc 	.word	0x200005dc
 80039e8:	40004800 	.word	0x40004800

080039ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f2:	f107 0310 	add.w	r3, r7, #16
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	609a      	str	r2, [r3, #8]
 80039fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a00:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <MX_GPIO_Init+0x104>)
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	4a3a      	ldr	r2, [pc, #232]	; (8003af0 <MX_GPIO_Init+0x104>)
 8003a06:	f043 0310 	orr.w	r3, r3, #16
 8003a0a:	6193      	str	r3, [r2, #24]
 8003a0c:	4b38      	ldr	r3, [pc, #224]	; (8003af0 <MX_GPIO_Init+0x104>)
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a18:	4b35      	ldr	r3, [pc, #212]	; (8003af0 <MX_GPIO_Init+0x104>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	4a34      	ldr	r2, [pc, #208]	; (8003af0 <MX_GPIO_Init+0x104>)
 8003a1e:	f043 0320 	orr.w	r3, r3, #32
 8003a22:	6193      	str	r3, [r2, #24]
 8003a24:	4b32      	ldr	r3, [pc, #200]	; (8003af0 <MX_GPIO_Init+0x104>)
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a30:	4b2f      	ldr	r3, [pc, #188]	; (8003af0 <MX_GPIO_Init+0x104>)
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	4a2e      	ldr	r2, [pc, #184]	; (8003af0 <MX_GPIO_Init+0x104>)
 8003a36:	f043 0304 	orr.w	r3, r3, #4
 8003a3a:	6193      	str	r3, [r2, #24]
 8003a3c:	4b2c      	ldr	r3, [pc, #176]	; (8003af0 <MX_GPIO_Init+0x104>)
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	607b      	str	r3, [r7, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a48:	4b29      	ldr	r3, [pc, #164]	; (8003af0 <MX_GPIO_Init+0x104>)
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	4a28      	ldr	r2, [pc, #160]	; (8003af0 <MX_GPIO_Init+0x104>)
 8003a4e:	f043 0308 	orr.w	r3, r3, #8
 8003a52:	6193      	str	r3, [r2, #24]
 8003a54:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <MX_GPIO_Init+0x104>)
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	603b      	str	r3, [r7, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003a60:	2200      	movs	r2, #0
 8003a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a66:	4823      	ldr	r0, [pc, #140]	; (8003af4 <MX_GPIO_Init+0x108>)
 8003a68:	f002 f97a 	bl	8005d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	217e      	movs	r1, #126	; 0x7e
 8003a70:	4821      	ldr	r0, [pc, #132]	; (8003af8 <MX_GPIO_Init+0x10c>)
 8003a72:	f002 f975 	bl	8005d60 <HAL_GPIO_WritePin>
                          |xSHUT_4_Pin|xSHUT_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a84:	2302      	movs	r3, #2
 8003a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a88:	f107 0310 	add.w	r3, r7, #16
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4819      	ldr	r0, [pc, #100]	; (8003af4 <MX_GPIO_Init+0x108>)
 8003a90:	f001 ffe2 	bl	8005a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : xSHUT_0_Pin xSHUT_1_Pin xSHUT_2_Pin xSHUT_3_Pin
                           xSHUT_4_Pin xSHUT_5_Pin */
  GPIO_InitStruct.Pin = xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 8003a94:	237e      	movs	r3, #126	; 0x7e
 8003a96:	613b      	str	r3, [r7, #16]
                          |xSHUT_4_Pin|xSHUT_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4813      	ldr	r0, [pc, #76]	; (8003af8 <MX_GPIO_Init+0x10c>)
 8003aac:	f001 ffd4 	bl	8005a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ab4:	4b11      	ldr	r3, [pc, #68]	; (8003afc <MX_GPIO_Init+0x110>)
 8003ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003abc:	f107 0310 	add.w	r3, r7, #16
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	480f      	ldr	r0, [pc, #60]	; (8003b00 <MX_GPIO_Init+0x114>)
 8003ac4:	f001 ffc8 	bl	8005a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2100      	movs	r1, #0
 8003acc:	2006      	movs	r0, #6
 8003ace:	f001 ff7e 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003ad2:	2006      	movs	r0, #6
 8003ad4:	f001 ff97 	bl	8005a06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2100      	movs	r1, #0
 8003adc:	2007      	movs	r0, #7
 8003ade:	f001 ff76 	bl	80059ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003ae2:	2007      	movs	r0, #7
 8003ae4:	f001 ff8f 	bl	8005a06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ae8:	bf00      	nop
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40011000 	.word	0x40011000
 8003af8:	40010800 	.word	0x40010800
 8003afc:	10210000 	.word	0x10210000
 8003b00:	40010c00 	.word	0x40010c00

08003b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b08:	b672      	cpsid	i
}
 8003b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003b0c:	e7fe      	b.n	8003b0c <Error_Handler+0x8>
	...

08003b10 <running_OPPath>:
uint16_t path_index;




void running_OPPath(){
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
	int32_t t;
	uint8_t direction = north;
 8003b16:	2302      	movs	r3, #2
 8003b18:	71fb      	strb	r3, [r7, #7]
	for(int i = 1; i <= path_index; i++){
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e057      	b.n	8003bd0 <running_OPPath+0xc0>
		t = round(shortestPath[i]);
 8003b20:	4a35      	ldr	r2, [pc, #212]	; (8003bf8 <running_OPPath+0xe8>)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4413      	add	r3, r2
 8003b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	f009 ff80 	bl	800da34 <round>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4610      	mov	r0, r2
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	f7fd f812 	bl	8000b64 <__aeabi_d2iz>
 8003b40:	4603      	mov	r3, r0
 8003b42:	60bb      	str	r3, [r7, #8]
		switch(t){
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f113 0f04 	cmn.w	r3, #4
 8003b4a:	d004      	beq.n	8003b56 <running_OPPath+0x46>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d013      	beq.n	8003b7c <running_OPPath+0x6c>
 8003b54:	e025      	b.n	8003ba2 <running_OPPath+0x92>
			case turn_left_90:
				turnLeftHere;
 8003b56:	2300      	movs	r3, #0
 8003b58:	2201      	movs	r2, #1
 8003b5a:	a125      	add	r1, pc, #148	; (adr r1, 8003bf0 <running_OPPath+0xe0>)
 8003b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b60:	f000 ff86 	bl	8004a70 <go_straight>
 8003b64:	1dfb      	adds	r3, r7, #7
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fcf6 	bl	8004558 <turn_left90>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f04f 0000 	mov.w	r0, #0
 8003b74:	4921      	ldr	r1, [pc, #132]	; (8003bfc <running_OPPath+0xec>)
 8003b76:	f000 ff7b 	bl	8004a70 <go_straight>
				break;
 8003b7a:	e026      	b.n	8003bca <running_OPPath+0xba>
			case turn_right_90:
				turnRightHere;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f04f 0000 	mov.w	r0, #0
 8003b84:	491e      	ldr	r1, [pc, #120]	; (8003c00 <running_OPPath+0xf0>)
 8003b86:	f000 ff73 	bl	8004a70 <go_straight>
 8003b8a:	1dfb      	adds	r3, r7, #7
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fe13 	bl	80047b8 <turn_right90>
 8003b92:	2300      	movs	r3, #0
 8003b94:	2200      	movs	r2, #0
 8003b96:	f04f 0000 	mov.w	r0, #0
 8003b9a:	491a      	ldr	r1, [pc, #104]	; (8003c04 <running_OPPath+0xf4>)
 8003b9c:	f000 ff68 	bl	8004a70 <go_straight>
				break;
 8003ba0:	e013      	b.n	8003bca <running_OPPath+0xba>
			default:
				go_straight(shortestPath[i] + 20, 0, -1);
 8003ba2:	4a15      	ldr	r2, [pc, #84]	; (8003bf8 <running_OPPath+0xe8>)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4413      	add	r3, r2
 8003baa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <running_OPPath+0xf8>)
 8003bb4:	f7fc fb86 	bl	80002c4 <__adddf3>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f000 ff53 	bl	8004a70 <go_straight>
	for(int i = 1; i <= path_index; i++){
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <running_OPPath+0xfc>)
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	dda1      	ble.n	8003b20 <running_OPPath+0x10>
		}
	}
	brake(2);
 8003bdc:	2002      	movs	r0, #2
 8003bde:	f001 fd13 	bl	8005608 <brake>
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	f3af 8000 	nop.w
 8003bf0:	00000000 	.word	0x00000000
 8003bf4:	4067c000 	.word	0x4067c000
 8003bf8:	20001330 	.word	0x20001330
 8003bfc:	40604000 	.word	0x40604000
 8003c00:	40654000 	.word	0x40654000
 8003c04:	405e0000 	.word	0x405e0000
 8003c08:	40340000 	.word	0x40340000
 8003c0c:	20001fb0 	.word	0x20001fb0

08003c10 <OPPath>:

void OPPath(){
 8003c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
	shortestPath[0] = 0;
 8003c16:	4974      	ldr	r1, [pc, #464]	; (8003de8 <OPPath+0x1d8>)
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9c1 2300 	strd	r2, r3, [r1]
	path_index = 0;
 8003c24:	4b71      	ldr	r3, [pc, #452]	; (8003dec <OPPath+0x1dc>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= length_stack; i++){
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	e0c8      	b.n	8003dc2 <OPPath+0x1b2>
		if(stack[i][0] == straight){
 8003c30:	496f      	ldr	r1, [pc, #444]	; (8003df0 <OPPath+0x1e0>)
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4413      	add	r3, r2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c40:	f113 0f06 	cmn.w	r3, #6
 8003c44:	f040 809f 	bne.w	8003d86 <OPPath+0x176>
			if(stack[i][1] == -1){
 8003c48:	4969      	ldr	r1, [pc, #420]	; (8003df0 <OPPath+0x1e0>)
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4413      	add	r3, r2
 8003c52:	440b      	add	r3, r1
 8003c54:	3301      	adds	r3, #1
 8003c56:	f993 3000 	ldrsb.w	r3, [r3]
 8003c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5e:	d15a      	bne.n	8003d16 <OPPath+0x106>
				if(shortestPath[path_index] > 0){
 8003c60:	4b62      	ldr	r3, [pc, #392]	; (8003dec <OPPath+0x1dc>)
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	4a60      	ldr	r2, [pc, #384]	; (8003de8 <OPPath+0x1d8>)
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	f7fc ff6b 	bl	8000b50 <__aeabi_dcmpgt>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d028      	beq.n	8003cd2 <OPPath+0xc2>
					shortestPath[path_index] += (300 * stack[i][2]);
 8003c80:	4b5a      	ldr	r3, [pc, #360]	; (8003dec <OPPath+0x1dc>)
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	4a58      	ldr	r2, [pc, #352]	; (8003de8 <OPPath+0x1d8>)
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003c8e:	4958      	ldr	r1, [pc, #352]	; (8003df0 <OPPath+0x1e0>)
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	4413      	add	r3, r2
 8003c98:	440b      	add	r3, r1
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	f993 3000 	ldrsb.w	r3, [r3]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc fc56 	bl	800055c <__aeabi_i2d>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	494d      	ldr	r1, [pc, #308]	; (8003dec <OPPath+0x1dc>)
 8003cb6:	8809      	ldrh	r1, [r1, #0]
 8003cb8:	460e      	mov	r6, r1
 8003cba:	4620      	mov	r0, r4
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	f7fc fb01 	bl	80002c4 <__adddf3>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4848      	ldr	r0, [pc, #288]	; (8003de8 <OPPath+0x1d8>)
 8003cc8:	00f1      	lsls	r1, r6, #3
 8003cca:	4401      	add	r1, r0
 8003ccc:	e9c1 2300 	strd	r2, r3, [r1]
 8003cd0:	e074      	b.n	8003dbc <OPPath+0x1ac>
				} else {
					shortestPath[++path_index] = 300 * stack[i][2];
 8003cd2:	4947      	ldr	r1, [pc, #284]	; (8003df0 <OPPath+0x1e0>)
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4413      	add	r3, r2
 8003cdc:	440b      	add	r3, r1
 8003cde:	3302      	adds	r3, #2
 8003ce0:	f993 3000 	ldrsb.w	r3, [r3]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003cea:	fb03 f202 	mul.w	r2, r3, r2
 8003cee:	4b3f      	ldr	r3, [pc, #252]	; (8003dec <OPPath+0x1dc>)
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	b299      	uxth	r1, r3
 8003cf6:	4b3d      	ldr	r3, [pc, #244]	; (8003dec <OPPath+0x1dc>)
 8003cf8:	8019      	strh	r1, [r3, #0]
 8003cfa:	4b3c      	ldr	r3, [pc, #240]	; (8003dec <OPPath+0x1dc>)
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	461c      	mov	r4, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f7fc fc2b 	bl	800055c <__aeabi_i2d>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4837      	ldr	r0, [pc, #220]	; (8003de8 <OPPath+0x1d8>)
 8003d0c:	00e1      	lsls	r1, r4, #3
 8003d0e:	4401      	add	r1, r0
 8003d10:	e9c1 2300 	strd	r2, r3, [r1]
 8003d14:	e052      	b.n	8003dbc <OPPath+0x1ac>
				}
			} else {
				if(shortestPath[path_index] > 0){
 8003d16:	4b35      	ldr	r3, [pc, #212]	; (8003dec <OPPath+0x1dc>)
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	4a33      	ldr	r2, [pc, #204]	; (8003de8 <OPPath+0x1d8>)
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	f7fc ff10 	bl	8000b50 <__aeabi_dcmpgt>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d016      	beq.n	8003d64 <OPPath+0x154>
					shortestPath[path_index]+=300;
 8003d36:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <OPPath+0x1dc>)
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	4a2b      	ldr	r2, [pc, #172]	; (8003de8 <OPPath+0x1d8>)
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d44:	4b29      	ldr	r3, [pc, #164]	; (8003dec <OPPath+0x1dc>)
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	461c      	mov	r4, r3
 8003d4a:	a325      	add	r3, pc, #148	; (adr r3, 8003de0 <OPPath+0x1d0>)
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f7fc fab8 	bl	80002c4 <__adddf3>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4823      	ldr	r0, [pc, #140]	; (8003de8 <OPPath+0x1d8>)
 8003d5a:	00e1      	lsls	r1, r4, #3
 8003d5c:	4401      	add	r1, r0
 8003d5e:	e9c1 2300 	strd	r2, r3, [r1]
 8003d62:	e02b      	b.n	8003dbc <OPPath+0x1ac>
				} else {
					shortestPath[++path_index] = 300;
 8003d64:	4b21      	ldr	r3, [pc, #132]	; (8003dec <OPPath+0x1dc>)
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <OPPath+0x1dc>)
 8003d6e:	801a      	strh	r2, [r3, #0]
 8003d70:	4b1e      	ldr	r3, [pc, #120]	; (8003dec <OPPath+0x1dc>)
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <OPPath+0x1d8>)
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	18d1      	adds	r1, r2, r3
 8003d7a:	a319      	add	r3, pc, #100	; (adr r3, 8003de0 <OPPath+0x1d0>)
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	e9c1 2300 	strd	r2, r3, [r1]
 8003d84:	e01a      	b.n	8003dbc <OPPath+0x1ac>
				}
			}
		} else {
			shortestPath[++path_index] = stack[i][0];
 8003d86:	491a      	ldr	r1, [pc, #104]	; (8003df0 <OPPath+0x1e0>)
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	4413      	add	r3, r2
 8003d90:	440b      	add	r3, r1
 8003d92:	f993 2000 	ldrsb.w	r2, [r3]
 8003d96:	4b15      	ldr	r3, [pc, #84]	; (8003dec <OPPath+0x1dc>)
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	b299      	uxth	r1, r3
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <OPPath+0x1dc>)
 8003da0:	8019      	strh	r1, [r3, #0]
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <OPPath+0x1dc>)
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	461c      	mov	r4, r3
 8003da8:	4610      	mov	r0, r2
 8003daa:	f7fc fbd7 	bl	800055c <__aeabi_i2d>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	480d      	ldr	r0, [pc, #52]	; (8003de8 <OPPath+0x1d8>)
 8003db4:	00e1      	lsls	r1, r4, #3
 8003db6:	4401      	add	r1, r0
 8003db8:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i <= length_stack; i++){
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <OPPath+0x1e4>)
 8003dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	f77f af2f 	ble.w	8003c30 <OPPath+0x20>
		}
	}
}
 8003dd2:	bf00      	nop
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ddc:	f3af 8000 	nop.w
 8003de0:	00000000 	.word	0x00000000
 8003de4:	4072c000 	.word	0x4072c000
 8003de8:	20001330 	.word	0x20001330
 8003dec:	20001fb0 	.word	0x20001fb0
 8003df0:	2000037c 	.word	0x2000037c
 8003df4:	200004a8 	.word	0x200004a8

08003df8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003dfe:	4b15      	ldr	r3, [pc, #84]	; (8003e54 <HAL_MspInit+0x5c>)
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <HAL_MspInit+0x5c>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	6193      	str	r3, [r2, #24]
 8003e0a:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_MspInit+0x5c>)
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <HAL_MspInit+0x5c>)
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	4a0e      	ldr	r2, [pc, #56]	; (8003e54 <HAL_MspInit+0x5c>)
 8003e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e20:	61d3      	str	r3, [r2, #28]
 8003e22:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <HAL_MspInit+0x5c>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	607b      	str	r3, [r7, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <HAL_MspInit+0x60>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	4a04      	ldr	r2, [pc, #16]	; (8003e58 <HAL_MspInit+0x60>)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40010000 	.word	0x40010000

08003e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e64:	f107 0310 	add.w	r3, r7, #16
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a15      	ldr	r2, [pc, #84]	; (8003ecc <HAL_I2C_MspInit+0x70>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d123      	bne.n	8003ec4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7c:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <HAL_I2C_MspInit+0x74>)
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <HAL_I2C_MspInit+0x74>)
 8003e82:	f043 0308 	orr.w	r3, r3, #8
 8003e86:	6193      	str	r3, [r2, #24]
 8003e88:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <HAL_I2C_MspInit+0x74>)
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e94:	23c0      	movs	r3, #192	; 0xc0
 8003e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e98:	2312      	movs	r3, #18
 8003e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ea0:	f107 0310 	add.w	r3, r7, #16
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	480b      	ldr	r0, [pc, #44]	; (8003ed4 <HAL_I2C_MspInit+0x78>)
 8003ea8:	f001 fdd6 	bl	8005a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003eac:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <HAL_I2C_MspInit+0x74>)
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	4a07      	ldr	r2, [pc, #28]	; (8003ed0 <HAL_I2C_MspInit+0x74>)
 8003eb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003eb6:	61d3      	str	r3, [r2, #28]
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_I2C_MspInit+0x74>)
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ec4:	bf00      	nop
 8003ec6:	3720      	adds	r7, #32
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40005400 	.word	0x40005400
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40010c00 	.word	0x40010c00

08003ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <HAL_TIM_Base_MspInit+0x34>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d10b      	bne.n	8003f02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <HAL_TIM_Base_MspInit+0x38>)
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	4a08      	ldr	r2, [pc, #32]	; (8003f10 <HAL_TIM_Base_MspInit+0x38>)
 8003ef0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ef4:	6193      	str	r3, [r2, #24]
 8003ef6:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <HAL_TIM_Base_MspInit+0x38>)
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40021000 	.word	0x40021000

08003f14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08e      	sub	sp, #56	; 0x38
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1c:	f107 0320 	add.w	r3, r7, #32
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f32:	d157      	bne.n	8003fe4 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f34:	4b4f      	ldr	r3, [pc, #316]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	4a4e      	ldr	r2, [pc, #312]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	61d3      	str	r3, [r2, #28]
 8003f40:	4b4c      	ldr	r3, [pc, #304]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4c:	4b49      	ldr	r3, [pc, #292]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	4a48      	ldr	r2, [pc, #288]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 8003f52:	f043 0304 	orr.w	r3, r3, #4
 8003f56:	6193      	str	r3, [r2, #24]
 8003f58:	4b46      	ldr	r3, [pc, #280]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f64:	4b43      	ldr	r3, [pc, #268]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	4a42      	ldr	r2, [pc, #264]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 8003f6a:	f043 0308 	orr.w	r3, r3, #8
 8003f6e:	6193      	str	r3, [r2, #24]
 8003f70:	4b40      	ldr	r3, [pc, #256]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003f7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f82:	2300      	movs	r3, #0
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8a:	f107 0320 	add.w	r3, r7, #32
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4839      	ldr	r0, [pc, #228]	; (8004078 <HAL_TIM_Encoder_MspInit+0x164>)
 8003f92:	f001 fd61 	bl	8005a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f96:	2308      	movs	r3, #8
 8003f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa2:	f107 0320 	add.w	r3, r7, #32
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4834      	ldr	r0, [pc, #208]	; (800407c <HAL_TIM_Encoder_MspInit+0x168>)
 8003faa:	f001 fd55 	bl	8005a58 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003fae:	4b34      	ldr	r3, [pc, #208]	; (8004080 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fba:	633b      	str	r3, [r7, #48]	; 0x30
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fca:	633b      	str	r3, [r7, #48]	; 0x30
 8003fcc:	4a2c      	ldr	r2, [pc, #176]	; (8004080 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	201c      	movs	r0, #28
 8003fd8:	f001 fcf9 	bl	80059ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fdc:	201c      	movs	r0, #28
 8003fde:	f001 fd12 	bl	8005a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003fe2:	e042      	b.n	800406a <HAL_TIM_Encoder_MspInit+0x156>
  else if(htim_encoder->Instance==TIM3)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a26      	ldr	r2, [pc, #152]	; (8004084 <HAL_TIM_Encoder_MspInit+0x170>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d13d      	bne.n	800406a <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fee:	4b21      	ldr	r3, [pc, #132]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	4a20      	ldr	r2, [pc, #128]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 8003ff4:	f043 0302 	orr.w	r3, r3, #2
 8003ff8:	61d3      	str	r3, [r2, #28]
 8003ffa:	4b1e      	ldr	r3, [pc, #120]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004006:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	4a1a      	ldr	r2, [pc, #104]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 800400c:	f043 0308 	orr.w	r3, r3, #8
 8004010:	6193      	str	r3, [r2, #24]
 8004012:	4b18      	ldr	r3, [pc, #96]	; (8004074 <HAL_TIM_Encoder_MspInit+0x160>)
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800401e:	2330      	movs	r3, #48	; 0x30
 8004020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004022:	2300      	movs	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004026:	2300      	movs	r3, #0
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800402a:	f107 0320 	add.w	r3, r7, #32
 800402e:	4619      	mov	r1, r3
 8004030:	4812      	ldr	r0, [pc, #72]	; (800407c <HAL_TIM_Encoder_MspInit+0x168>)
 8004032:	f001 fd11 	bl	8005a58 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_TIM_Encoder_MspInit+0x16c>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	637b      	str	r3, [r7, #52]	; 0x34
 800403c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004042:	637b      	str	r3, [r7, #52]	; 0x34
 8004044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004046:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800404a:	637b      	str	r3, [r7, #52]	; 0x34
 800404c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004052:	637b      	str	r3, [r7, #52]	; 0x34
 8004054:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <HAL_TIM_Encoder_MspInit+0x16c>)
 8004056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004058:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800405a:	2200      	movs	r2, #0
 800405c:	2100      	movs	r1, #0
 800405e:	201d      	movs	r0, #29
 8004060:	f001 fcb5 	bl	80059ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004064:	201d      	movs	r0, #29
 8004066:	f001 fcce 	bl	8005a06 <HAL_NVIC_EnableIRQ>
}
 800406a:	bf00      	nop
 800406c:	3738      	adds	r7, #56	; 0x38
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000
 8004078:	40010800 	.word	0x40010800
 800407c:	40010c00 	.word	0x40010c00
 8004080:	40010000 	.word	0x40010000
 8004084:	40000400 	.word	0x40000400

08004088 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	f107 0310 	add.w	r3, r7, #16
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a10      	ldr	r2, [pc, #64]	; (80040e4 <HAL_TIM_MspPostInit+0x5c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d118      	bne.n	80040da <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a8:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <HAL_TIM_MspPostInit+0x60>)
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <HAL_TIM_MspPostInit+0x60>)
 80040ae:	f043 0304 	orr.w	r3, r3, #4
 80040b2:	6193      	str	r3, [r2, #24]
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <HAL_TIM_MspPostInit+0x60>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80040c0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80040c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c6:	2302      	movs	r3, #2
 80040c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ca:	2302      	movs	r3, #2
 80040cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ce:	f107 0310 	add.w	r3, r7, #16
 80040d2:	4619      	mov	r1, r3
 80040d4:	4805      	ldr	r0, [pc, #20]	; (80040ec <HAL_TIM_MspPostInit+0x64>)
 80040d6:	f001 fcbf 	bl	8005a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80040da:	bf00      	nop
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40012c00 	.word	0x40012c00
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40010800 	.word	0x40010800

080040f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f8:	f107 0310 	add.w	r3, r7, #16
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1c      	ldr	r2, [pc, #112]	; (800417c <HAL_UART_MspInit+0x8c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d131      	bne.n	8004174 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_UART_MspInit+0x90>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <HAL_UART_MspInit+0x90>)
 8004116:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800411a:	61d3      	str	r3, [r2, #28]
 800411c:	4b18      	ldr	r3, [pc, #96]	; (8004180 <HAL_UART_MspInit+0x90>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004128:	4b15      	ldr	r3, [pc, #84]	; (8004180 <HAL_UART_MspInit+0x90>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	4a14      	ldr	r2, [pc, #80]	; (8004180 <HAL_UART_MspInit+0x90>)
 800412e:	f043 0308 	orr.w	r3, r3, #8
 8004132:	6193      	str	r3, [r2, #24]
 8004134:	4b12      	ldr	r3, [pc, #72]	; (8004180 <HAL_UART_MspInit+0x90>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004144:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004146:	2302      	movs	r3, #2
 8004148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800414a:	2303      	movs	r3, #3
 800414c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800414e:	f107 0310 	add.w	r3, r7, #16
 8004152:	4619      	mov	r1, r3
 8004154:	480b      	ldr	r0, [pc, #44]	; (8004184 <HAL_UART_MspInit+0x94>)
 8004156:	f001 fc7f 	bl	8005a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800415a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800415e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004168:	f107 0310 	add.w	r3, r7, #16
 800416c:	4619      	mov	r1, r3
 800416e:	4805      	ldr	r0, [pc, #20]	; (8004184 <HAL_UART_MspInit+0x94>)
 8004170:	f001 fc72 	bl	8005a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004174:	bf00      	nop
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40004800 	.word	0x40004800
 8004180:	40021000 	.word	0x40021000
 8004184:	40010c00 	.word	0x40010c00

08004188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800418c:	e7fe      	b.n	800418c <NMI_Handler+0x4>

0800418e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800418e:	b480      	push	{r7}
 8004190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004192:	e7fe      	b.n	8004192 <HardFault_Handler+0x4>

08004194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004198:	e7fe      	b.n	8004198 <MemManage_Handler+0x4>

0800419a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800419e:	e7fe      	b.n	800419e <BusFault_Handler+0x4>

080041a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041a4:	e7fe      	b.n	80041a4 <UsageFault_Handler+0x4>

080041a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041a6:	b480      	push	{r7}
 80041a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041aa:	bf00      	nop
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041be:	b480      	push	{r7}
 80041c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041c2:	bf00      	nop
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr

080041ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041ce:	f001 fac3 	bl	8005758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80041dc:	2001      	movs	r0, #1
 80041de:	f001 fdd7 	bl	8005d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	Rmode = 2;
 80041e2:	4b02      	ldr	r3, [pc, #8]	; (80041ec <EXTI0_IRQHandler+0x14>)
 80041e4:	2202      	movs	r2, #2
 80041e6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 80041e8:	bf00      	nop
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	200006ec 	.word	0x200006ec

080041f0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80041f4:	2002      	movs	r0, #2
 80041f6:	f001 fdcb 	bl	8005d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	Rmode = 1;
 80041fa:	4b02      	ldr	r3, [pc, #8]	; (8004204 <EXTI1_IRQHandler+0x14>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}
 8004204:	200006ec 	.word	0x200006ec

08004208 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800420c:	480f      	ldr	r0, [pc, #60]	; (800424c <TIM2_IRQHandler+0x44>)
 800420e:	f003 fcf1 	bl	8007bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if(status == turn_right_90 || status == turn_right_45 || status == u_turn || status == straight){
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <TIM2_IRQHandler+0x48>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	b25b      	sxtb	r3, r3
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d011      	beq.n	8004242 <TIM2_IRQHandler+0x3a>
 800421e:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <TIM2_IRQHandler+0x48>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	b25b      	sxtb	r3, r3
 8004224:	f113 0f02 	cmn.w	r3, #2
 8004228:	d00b      	beq.n	8004242 <TIM2_IRQHandler+0x3a>
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <TIM2_IRQHandler+0x48>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	b25b      	sxtb	r3, r3
 8004230:	f113 0f05 	cmn.w	r3, #5
 8004234:	d005      	beq.n	8004242 <TIM2_IRQHandler+0x3a>
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <TIM2_IRQHandler+0x48>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	b25b      	sxtb	r3, r3
 800423c:	f113 0f06 	cmn.w	r3, #6
 8004240:	d102      	bne.n	8004248 <TIM2_IRQHandler+0x40>
	  status = 0;
 8004242:	4b03      	ldr	r3, [pc, #12]	; (8004250 <TIM2_IRQHandler+0x48>)
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8004248:	bf00      	nop
 800424a:	bd80      	pop	{r7, pc}
 800424c:	2000054c 	.word	0x2000054c
 8004250:	200006ed 	.word	0x200006ed

08004254 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004258:	480c      	ldr	r0, [pc, #48]	; (800428c <TIM3_IRQHandler+0x38>)
 800425a:	f003 fccb 	bl	8007bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(status == turn_left_90 || status == turn_left_45 || status == straight){
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <TIM3_IRQHandler+0x3c>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	b25b      	sxtb	r3, r3
 8004264:	f113 0f04 	cmn.w	r3, #4
 8004268:	d00b      	beq.n	8004282 <TIM3_IRQHandler+0x2e>
 800426a:	4b09      	ldr	r3, [pc, #36]	; (8004290 <TIM3_IRQHandler+0x3c>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b25b      	sxtb	r3, r3
 8004270:	f113 0f03 	cmn.w	r3, #3
 8004274:	d005      	beq.n	8004282 <TIM3_IRQHandler+0x2e>
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <TIM3_IRQHandler+0x3c>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	b25b      	sxtb	r3, r3
 800427c:	f113 0f06 	cmn.w	r3, #6
 8004280:	d102      	bne.n	8004288 <TIM3_IRQHandler+0x34>
	  status = 0;
 8004282:	4b03      	ldr	r3, [pc, #12]	; (8004290 <TIM3_IRQHandler+0x3c>)
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8004288:	bf00      	nop
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000594 	.word	0x20000594
 8004290:	200006ed 	.word	0x200006ed

08004294 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800429c:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <_sbrk+0x5c>)
	        - (uint32_t) &_Min_Stack_Size;
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80042a8:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <_sbrk+0x64>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <_sbrk+0x64>)
 80042b2:	4a12      	ldr	r2, [pc, #72]	; (80042fc <_sbrk+0x68>)
 80042b4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <_sbrk+0x64>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d207      	bcs.n	80042d4 <_sbrk+0x40>
		errno = ENOMEM;
 80042c4:	f009 fc02 	bl	800dacc <__errno>
 80042c8:	4603      	mov	r3, r0
 80042ca:	220c      	movs	r2, #12
 80042cc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	e009      	b.n	80042e8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80042d4:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <_sbrk+0x64>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80042da:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <_sbrk+0x64>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4413      	add	r3, r2
 80042e2:	4a05      	ldr	r2, [pc, #20]	; (80042f8 <_sbrk+0x64>)
 80042e4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80042e6:	68fb      	ldr	r3, [r7, #12]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20005000 	.word	0x20005000
 80042f4:	00000400 	.word	0x00000400
 80042f8:	20001fb4 	.word	0x20001fb4
 80042fc:	20002048 	.word	0x20002048

08004300 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004304:	bf00      	nop
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	0000      	movs	r0, r0
	...

08004310 <u_turnf>:
uint16_t speed0, speed1;

void pid_normal();
void pid_diagonal();

void u_turnf(uint8_t *direction) {
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d81b      	bhi.n	8004358 <u_turnf+0x48>
 8004320:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <u_turnf+0x18>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	08004339 	.word	0x08004339
 800432c:	08004341 	.word	0x08004341
 8004330:	08004349 	.word	0x08004349
 8004334:	08004351 	.word	0x08004351
		case west:  *direction = east;   break;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	e00b      	b.n	8004358 <u_turnf+0x48>
		case east:  *direction = west;   break;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	e007      	b.n	8004358 <u_turnf+0x48>
		case north: *direction = south;  break;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2203      	movs	r2, #3
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	e003      	b.n	8004358 <u_turnf+0x48>
		case south: *direction = north;  break;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	bf00      	nop
	}
	#if debug == 1
	sprintf((char*)uart_buffer, "uturn\n");
 8004358:	4973      	ldr	r1, [pc, #460]	; (8004528 <u_turnf+0x218>)
 800435a:	4874      	ldr	r0, [pc, #464]	; (800452c <u_turnf+0x21c>)
 800435c:	f009 fbf6 	bl	800db4c <siprintf>
	HAL_UART_Transmit(&huart3, uart_buffer, sizeof (uart_buffer), 10);
 8004360:	230a      	movs	r3, #10
 8004362:	2232      	movs	r2, #50	; 0x32
 8004364:	4971      	ldr	r1, [pc, #452]	; (800452c <u_turnf+0x21c>)
 8004366:	4872      	ldr	r0, [pc, #456]	; (8004530 <u_turnf+0x220>)
 8004368:	f004 fab7 	bl	80088da <HAL_UART_Transmit>
	#endif

	if(__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) != htim1.Init.Period ||
 800436c:	4b71      	ldr	r3, [pc, #452]	; (8004534 <u_turnf+0x224>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004372:	4b70      	ldr	r3, [pc, #448]	; (8004534 <u_turnf+0x224>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	429a      	cmp	r2, r3
 8004378:	d106      	bne.n	8004388 <u_turnf+0x78>
			__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2) != htim1.Init.Period){
 800437a:	4b6e      	ldr	r3, [pc, #440]	; (8004534 <u_turnf+0x224>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004380:	4b6c      	ldr	r3, [pc, #432]	; (8004534 <u_turnf+0x224>)
 8004382:	68db      	ldr	r3, [r3, #12]
	if(__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) != htim1.Init.Period ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d017      	beq.n	80043b8 <u_turnf+0xa8>
		running_right_motor(1, 650);
 8004388:	4b6a      	ldr	r3, [pc, #424]	; (8004534 <u_turnf+0x224>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2200      	movs	r2, #0
 800438e:	635a      	str	r2, [r3, #52]	; 0x34
 8004390:	4b68      	ldr	r3, [pc, #416]	; (8004534 <u_turnf+0x224>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f240 228a 	movw	r2, #650	; 0x28a
 8004398:	639a      	str	r2, [r3, #56]	; 0x38
		running_left_motor(1, 650);
 800439a:	4b66      	ldr	r3, [pc, #408]	; (8004534 <u_turnf+0x224>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f240 228a 	movw	r2, #650	; 0x28a
 80043a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80043a4:	4b63      	ldr	r3, [pc, #396]	; (8004534 <u_turnf+0x224>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2200      	movs	r2, #0
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(50);
 80043ac:	2032      	movs	r0, #50	; 0x32
 80043ae:	f001 f9ef 	bl	8005790 <HAL_Delay>
		brake(2);
 80043b2:	2002      	movs	r0, #2
 80043b4:	f001 f928 	bl	8005608 <brake>
	}
	uint16_t last = 2702;
 80043b8:	f640 238e 	movw	r3, #2702	; 0xa8e
 80043bc:	82fb      	strh	r3, [r7, #22]
	while(last != TIM3->CNT){
 80043be:	e005      	b.n	80043cc <u_turnf+0xbc>
		last = TIM3->CNT;
 80043c0:	4b5d      	ldr	r3, [pc, #372]	; (8004538 <u_turnf+0x228>)
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	82fb      	strh	r3, [r7, #22]
		HAL_Delay(20);
 80043c6:	2014      	movs	r0, #20
 80043c8:	f001 f9e2 	bl	8005790 <HAL_Delay>
	while(last != TIM3->CNT){
 80043cc:	8afa      	ldrh	r2, [r7, #22]
 80043ce:	4b5a      	ldr	r3, [pc, #360]	; (8004538 <u_turnf+0x228>)
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d1f4      	bne.n	80043c0 <u_turnf+0xb0>
	}

	uint16_t en = round(uturn_arc_en);
 80043d6:	a352      	add	r3, pc, #328	; (adr r3, 8004520 <u_turnf+0x210>)
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	4610      	mov	r0, r2
 80043de:	4619      	mov	r1, r3
 80043e0:	f009 fb28 	bl	800da34 <round>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	f7fc fbe2 	bl	8000bb4 <__aeabi_d2uiz>
 80043f0:	4603      	mov	r3, r0
 80043f2:	82bb      	strh	r3, [r7, #20]
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 80043f4:	4b51      	ldr	r3, [pc, #324]	; (800453c <u_turnf+0x22c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80043fe:	4b4f      	ldr	r3, [pc, #316]	; (800453c <u_turnf+0x22c>)
 8004400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004404:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 8004406:	4b4e      	ldr	r3, [pc, #312]	; (8004540 <u_turnf+0x230>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800440e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004410:	4b4b      	ldr	r3, [pc, #300]	; (8004540 <u_turnf+0x230>)
 8004412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004416:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim2, en);
 8004418:	4b48      	ldr	r3, [pc, #288]	; (800453c <u_turnf+0x22c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	8aba      	ldrh	r2, [r7, #20]
 800441e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004420:	4b47      	ldr	r3, [pc, #284]	; (8004540 <u_turnf+0x230>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2200      	movs	r2, #0
 8004426:	625a      	str	r2, [r3, #36]	; 0x24
	status = u_turn;
 8004428:	4b46      	ldr	r3, [pc, #280]	; (8004544 <u_turnf+0x234>)
 800442a:	22fb      	movs	r2, #251	; 0xfb
 800442c:	701a      	strb	r2, [r3, #0]

	uint16_t speed = 500;
 800442e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004432:	827b      	strh	r3, [r7, #18]
	int32_t P;

	TIM1->CCR3 = 250;
 8004434:	4b44      	ldr	r3, [pc, #272]	; (8004548 <u_turnf+0x238>)
 8004436:	22fa      	movs	r2, #250	; 0xfa
 8004438:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 0;
 800443a:	4b43      	ldr	r3, [pc, #268]	; (8004548 <u_turnf+0x238>)
 800443c:	2200      	movs	r2, #0
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->CCR1 = 250;
 8004440:	4b41      	ldr	r3, [pc, #260]	; (8004548 <u_turnf+0x238>)
 8004442:	22fa      	movs	r2, #250	; 0xfa
 8004444:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8004446:	4b40      	ldr	r3, [pc, #256]	; (8004548 <u_turnf+0x238>)
 8004448:	2200      	movs	r2, #0
 800444a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(100);
 800444c:	2064      	movs	r0, #100	; 0x64
 800444e:	f001 f99f 	bl	8005790 <HAL_Delay>

	while(status != 0){
 8004452:	e02a      	b.n	80044aa <u_turnf+0x19a>
		P = ((int32_t)TIM3->CNT - ((int32_t)en - TIM2->CNT)) * 5;
 8004454:	4b38      	ldr	r3, [pc, #224]	; (8004538 <u_turnf+0x228>)
 8004456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800445c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800445e:	8abb      	ldrh	r3, [r7, #20]
 8004460:	1acb      	subs	r3, r1, r3
 8004462:	441a      	add	r2, r3
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
		TIM1->CCR3 = speed - 50 + P;
 800446c:	8a7b      	ldrh	r3, [r7, #18]
 800446e:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	441a      	add	r2, r3
 8004476:	4b34      	ldr	r3, [pc, #208]	; (8004548 <u_turnf+0x238>)
 8004478:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = 0;
 800447a:	4b33      	ldr	r3, [pc, #204]	; (8004548 <u_turnf+0x238>)
 800447c:	2200      	movs	r2, #0
 800447e:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR1 = speed - P;
 8004480:	8a7a      	ldrh	r2, [r7, #18]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1ad2      	subs	r2, r2, r3
 8004486:	4b30      	ldr	r3, [pc, #192]	; (8004548 <u_turnf+0x238>)
 8004488:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 800448a:	4b2f      	ldr	r3, [pc, #188]	; (8004548 <u_turnf+0x238>)
 800448c:	2200      	movs	r2, #0
 800448e:	639a      	str	r2, [r3, #56]	; 0x38
		#if debug == 1
		a = (int32_t)en - TIM2->CNT;
 8004490:	8aba      	ldrh	r2, [r7, #20]
 8004492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	461a      	mov	r2, r3
 800449c:	4b2b      	ldr	r3, [pc, #172]	; (800454c <u_turnf+0x23c>)
 800449e:	601a      	str	r2, [r3, #0]
		b = TIM3->CNT;
 80044a0:	4b25      	ldr	r3, [pc, #148]	; (8004538 <u_turnf+0x228>)
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	461a      	mov	r2, r3
 80044a6:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <u_turnf+0x240>)
 80044a8:	601a      	str	r2, [r3, #0]
	while(status != 0){
 80044aa:	4b26      	ldr	r3, [pc, #152]	; (8004544 <u_turnf+0x234>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	b25b      	sxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1cf      	bne.n	8004454 <u_turnf+0x144>
		#endif
	}
	running_left_motor(0, 600);
 80044b4:	4b1f      	ldr	r3, [pc, #124]	; (8004534 <u_turnf+0x224>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2200      	movs	r2, #0
 80044ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80044bc:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <u_turnf+0x224>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40
	running_right_motor(1, 600);
 80044c6:	4b1b      	ldr	r3, [pc, #108]	; (8004534 <u_turnf+0x224>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2200      	movs	r2, #0
 80044cc:	635a      	str	r2, [r3, #52]	; 0x34
 80044ce:	4b19      	ldr	r3, [pc, #100]	; (8004534 <u_turnf+0x224>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(50);
 80044d8:	2032      	movs	r0, #50	; 0x32
 80044da:	f001 f959 	bl	8005790 <HAL_Delay>
	brake(2);
 80044de:	2002      	movs	r0, #2
 80044e0:	f001 f892 	bl	8005608 <brake>
	__HAL_TIM_SET_COUNTER(&htim2, 100);
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <u_turnf+0x22c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2264      	movs	r2, #100	; 0x64
 80044ea:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 100);
 80044ec:	4b14      	ldr	r3, [pc, #80]	; (8004540 <u_turnf+0x230>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2264      	movs	r2, #100	; 0x64
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 80044f4:	4b11      	ldr	r3, [pc, #68]	; (800453c <u_turnf+0x22c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80044fe:	4b0f      	ldr	r3, [pc, #60]	; (800453c <u_turnf+0x22c>)
 8004500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004504:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 8004506:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <u_turnf+0x230>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800450e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <u_turnf+0x230>)
 8004512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004516:	60da      	str	r2, [r3, #12]
}
 8004518:	bf00      	nop
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	bbbbbbbc 	.word	0xbbbbbbbc
 8004524:	40929bbb 	.word	0x40929bbb
 8004528:	0800e460 	.word	0x0800e460
 800452c:	2000070c 	.word	0x2000070c
 8004530:	200005dc 	.word	0x200005dc
 8004534:	20000504 	.word	0x20000504
 8004538:	40000400 	.word	0x40000400
 800453c:	2000054c 	.word	0x2000054c
 8004540:	20000594 	.word	0x20000594
 8004544:	200006ed 	.word	0x200006ed
 8004548:	40012c00 	.word	0x40012c00
 800454c:	200006f0 	.word	0x200006f0
 8004550:	200006f4 	.word	0x200006f4
 8004554:	00000000 	.word	0x00000000

08004558 <turn_left90>:
	__HAL_TIM_SET_COUNTER(&htim3, 100);
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
}

void turn_left90(uint8_t *direction) {
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b07      	cmp	r3, #7
 8004566:	d833      	bhi.n	80045d0 <turn_left90+0x78>
 8004568:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <turn_left90+0x18>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	08004591 	.word	0x08004591
 8004574:	08004599 	.word	0x08004599
 8004578:	080045a1 	.word	0x080045a1
 800457c:	080045a9 	.word	0x080045a9
 8004580:	080045b1 	.word	0x080045b1
 8004584:	080045b9 	.word	0x080045b9
 8004588:	080045c1 	.word	0x080045c1
 800458c:	080045c9 	.word	0x080045c9
		case west:  *direction = south; break;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2203      	movs	r2, #3
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	e01b      	b.n	80045d0 <turn_left90+0x78>
		case east:  *direction = north; break;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e017      	b.n	80045d0 <turn_left90+0x78>
		case north: *direction = west;  break;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e013      	b.n	80045d0 <turn_left90+0x78>
		case south: *direction = east;  break;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	e00f      	b.n	80045d0 <turn_left90+0x78>
		case north_west: *direction = south_west;  break;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2206      	movs	r2, #6
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	e00b      	b.n	80045d0 <turn_left90+0x78>
		case north_east: *direction = north_west;  break;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2204      	movs	r2, #4
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	e007      	b.n	80045d0 <turn_left90+0x78>
		case south_west: *direction = south_east;  break;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2207      	movs	r2, #7
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	e003      	b.n	80045d0 <turn_left90+0x78>
		case south_east: *direction = north_east;  break;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2205      	movs	r2, #5
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	bf00      	nop
	}
	if(__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) != htim1.Init.Period ||
 80045d0:	4b71      	ldr	r3, [pc, #452]	; (8004798 <turn_left90+0x240>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d6:	4b70      	ldr	r3, [pc, #448]	; (8004798 <turn_left90+0x240>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d106      	bne.n	80045ec <turn_left90+0x94>
			__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2) != htim1.Init.Period){
 80045de:	4b6e      	ldr	r3, [pc, #440]	; (8004798 <turn_left90+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e4:	4b6c      	ldr	r3, [pc, #432]	; (8004798 <turn_left90+0x240>)
 80045e6:	68db      	ldr	r3, [r3, #12]
	if(__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) != htim1.Init.Period ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d017      	beq.n	800461c <turn_left90+0xc4>
		running_right_motor(1, 650);
 80045ec:	4b6a      	ldr	r3, [pc, #424]	; (8004798 <turn_left90+0x240>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2200      	movs	r2, #0
 80045f2:	635a      	str	r2, [r3, #52]	; 0x34
 80045f4:	4b68      	ldr	r3, [pc, #416]	; (8004798 <turn_left90+0x240>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f240 228a 	movw	r2, #650	; 0x28a
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
		running_left_motor(1, 650);
 80045fe:	4b66      	ldr	r3, [pc, #408]	; (8004798 <turn_left90+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f240 228a 	movw	r2, #650	; 0x28a
 8004606:	63da      	str	r2, [r3, #60]	; 0x3c
 8004608:	4b63      	ldr	r3, [pc, #396]	; (8004798 <turn_left90+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2200      	movs	r2, #0
 800460e:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(50);
 8004610:	2032      	movs	r0, #50	; 0x32
 8004612:	f001 f8bd 	bl	8005790 <HAL_Delay>
		brake(2);
 8004616:	2002      	movs	r0, #2
 8004618:	f000 fff6 	bl	8005608 <brake>
	}
	uint16_t last = 10;
 800461c:	230a      	movs	r3, #10
 800461e:	82fb      	strh	r3, [r7, #22]
	while(last != TIM2->CNT){
 8004620:	e006      	b.n	8004630 <turn_left90+0xd8>
		last = TIM2->CNT;
 8004622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	82fb      	strh	r3, [r7, #22]
		HAL_Delay(20);
 800462a:	2014      	movs	r0, #20
 800462c:	f001 f8b0 	bl	8005790 <HAL_Delay>
	while(last != TIM2->CNT){
 8004630:	8afa      	ldrh	r2, [r7, #22]
 8004632:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	429a      	cmp	r2, r3
 800463a:	d1f2      	bne.n	8004622 <turn_left90+0xca>
	}
	uint16_t en = round(turn90_arc_en) + 500;
 800463c:	a354      	add	r3, pc, #336	; (adr r3, 8004790 <turn_left90+0x238>)
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	f009 f9f5 	bl	800da34 <round>
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	4b53      	ldr	r3, [pc, #332]	; (800479c <turn_left90+0x244>)
 8004650:	f7fb fe38 	bl	80002c4 <__adddf3>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4610      	mov	r0, r2
 800465a:	4619      	mov	r1, r3
 800465c:	f7fc faaa 	bl	8000bb4 <__aeabi_d2uiz>
 8004660:	4603      	mov	r3, r0
 8004662:	82bb      	strh	r3, [r7, #20]
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8004664:	4b4e      	ldr	r3, [pc, #312]	; (80047a0 <turn_left90+0x248>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800466c:	62da      	str	r2, [r3, #44]	; 0x2c
 800466e:	4b4c      	ldr	r3, [pc, #304]	; (80047a0 <turn_left90+0x248>)
 8004670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004674:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 8004676:	4b4b      	ldr	r3, [pc, #300]	; (80047a4 <turn_left90+0x24c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800467e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004680:	4b48      	ldr	r3, [pc, #288]	; (80047a4 <turn_left90+0x24c>)
 8004682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004686:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim3, 500);
 8004688:	4b46      	ldr	r3, [pc, #280]	; (80047a4 <turn_left90+0x24c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004690:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim2, 10000);
 8004692:	4b43      	ldr	r3, [pc, #268]	; (80047a0 <turn_left90+0x248>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f242 7210 	movw	r2, #10000	; 0x2710
 800469a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 800469c:	4b40      	ldr	r3, [pc, #256]	; (80047a0 <turn_left90+0x248>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80046a6:	4b3e      	ldr	r3, [pc, #248]	; (80047a0 <turn_left90+0x248>)
 80046a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046ac:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, en);
 80046ae:	4b3d      	ldr	r3, [pc, #244]	; (80047a4 <turn_left90+0x24c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	8aba      	ldrh	r2, [r7, #20]
 80046b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80046b6:	8abb      	ldrh	r3, [r7, #20]
 80046b8:	4a3a      	ldr	r2, [pc, #232]	; (80047a4 <turn_left90+0x24c>)
 80046ba:	60d3      	str	r3, [r2, #12]
	status = turn_left_90;
 80046bc:	4b3a      	ldr	r3, [pc, #232]	; (80047a8 <turn_left90+0x250>)
 80046be:	22fc      	movs	r2, #252	; 0xfc
 80046c0:	701a      	strb	r2, [r3, #0]
	int32_t P;
	uint16_t speed = 400;
 80046c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80046c6:	827b      	strh	r3, [r7, #18]

	TIM1->CCR3 = 250;
 80046c8:	4b38      	ldr	r3, [pc, #224]	; (80047ac <turn_left90+0x254>)
 80046ca:	22fa      	movs	r2, #250	; 0xfa
 80046cc:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 0;
 80046ce:	4b37      	ldr	r3, [pc, #220]	; (80047ac <turn_left90+0x254>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->CCR1 = 250;
 80046d4:	4b35      	ldr	r3, [pc, #212]	; (80047ac <turn_left90+0x254>)
 80046d6:	22fa      	movs	r2, #250	; 0xfa
 80046d8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80046da:	4b34      	ldr	r3, [pc, #208]	; (80047ac <turn_left90+0x254>)
 80046dc:	2200      	movs	r2, #0
 80046de:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(100);
 80046e0:	2064      	movs	r0, #100	; 0x64
 80046e2:	f001 f855 	bl	8005790 <HAL_Delay>

	while(status != 0){
 80046e6:	e01c      	b.n	8004722 <turn_left90+0x1ca>
		P = ((int32_t)(TIM3->CNT - 500) - (10000 - TIM2->CNT)) * 5;
 80046e8:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <turn_left90+0x258>)
 80046ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	441a      	add	r2, r3
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	f5a3 434d 	sub.w	r3, r3, #52480	; 0xcd00
 80046fe:	3b14      	subs	r3, #20
 8004700:	60fb      	str	r3, [r7, #12]
		TIM1->CCR3 = speed + P;
 8004702:	8a7a      	ldrh	r2, [r7, #18]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	441a      	add	r2, r3
 8004708:	4b28      	ldr	r3, [pc, #160]	; (80047ac <turn_left90+0x254>)
 800470a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = 0;
 800470c:	4b27      	ldr	r3, [pc, #156]	; (80047ac <turn_left90+0x254>)
 800470e:	2200      	movs	r2, #0
 8004710:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR1 = speed - P;
 8004712:	8a7a      	ldrh	r2, [r7, #18]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	1ad2      	subs	r2, r2, r3
 8004718:	4b24      	ldr	r3, [pc, #144]	; (80047ac <turn_left90+0x254>)
 800471a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 800471c:	4b23      	ldr	r3, [pc, #140]	; (80047ac <turn_left90+0x254>)
 800471e:	2200      	movs	r2, #0
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
	while(status != 0){
 8004722:	4b21      	ldr	r3, [pc, #132]	; (80047a8 <turn_left90+0x250>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	b25b      	sxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1dd      	bne.n	80046e8 <turn_left90+0x190>
	}
	TIM1->CCR3 = 0;
 800472c:	4b1f      	ldr	r3, [pc, #124]	; (80047ac <turn_left90+0x254>)
 800472e:	2200      	movs	r2, #0
 8004730:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 700;
 8004732:	4b1e      	ldr	r3, [pc, #120]	; (80047ac <turn_left90+0x254>)
 8004734:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8004738:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->CCR1 = 0;
 800473a:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <turn_left90+0x254>)
 800473c:	2200      	movs	r2, #0
 800473e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 700;
 8004740:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <turn_left90+0x254>)
 8004742:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8004746:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(50);
 8004748:	2032      	movs	r0, #50	; 0x32
 800474a:	f001 f821 	bl	8005790 <HAL_Delay>
	brake(2);
 800474e:	2002      	movs	r0, #2
 8004750:	f000 ff5a 	bl	8005608 <brake>
	__HAL_TIM_SET_COUNTER(&htim2, 100);
 8004754:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <turn_left90+0x248>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2264      	movs	r2, #100	; 0x64
 800475a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 100);
 800475c:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <turn_left90+0x24c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2264      	movs	r2, #100	; 0x64
 8004762:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8004764:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <turn_left90+0x248>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800476c:	62da      	str	r2, [r3, #44]	; 0x2c
 800476e:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <turn_left90+0x248>)
 8004770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004774:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <turn_left90+0x24c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004780:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <turn_left90+0x24c>)
 8004782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004786:	60da      	str	r2, [r3, #12]

}
 8004788:	bf00      	nop
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	bbbbbbbc 	.word	0xbbbbbbbc
 8004794:	40829bbb 	.word	0x40829bbb
 8004798:	20000504 	.word	0x20000504
 800479c:	407f4000 	.word	0x407f4000
 80047a0:	2000054c 	.word	0x2000054c
 80047a4:	20000594 	.word	0x20000594
 80047a8:	200006ed 	.word	0x200006ed
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40000400 	.word	0x40000400
 80047b4:	00000000 	.word	0x00000000

080047b8 <turn_right90>:

void turn_right90(uint8_t *direction) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	switch(*direction){
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b07      	cmp	r3, #7
 80047c6:	d833      	bhi.n	8004830 <turn_right90+0x78>
 80047c8:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <turn_right90+0x18>)
 80047ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ce:	bf00      	nop
 80047d0:	080047f1 	.word	0x080047f1
 80047d4:	080047f9 	.word	0x080047f9
 80047d8:	08004801 	.word	0x08004801
 80047dc:	08004809 	.word	0x08004809
 80047e0:	08004811 	.word	0x08004811
 80047e4:	08004819 	.word	0x08004819
 80047e8:	08004821 	.word	0x08004821
 80047ec:	08004829 	.word	0x08004829
		case west:  *direction = north; break;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	e01b      	b.n	8004830 <turn_right90+0x78>
		case east:  *direction = south; break;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2203      	movs	r2, #3
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	e017      	b.n	8004830 <turn_right90+0x78>
		case north: *direction = east;  break;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	e013      	b.n	8004830 <turn_right90+0x78>
		case south: *direction = west;  break;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	e00f      	b.n	8004830 <turn_right90+0x78>
		case north_west: *direction = north_east;  break;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2205      	movs	r2, #5
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	e00b      	b.n	8004830 <turn_right90+0x78>
		case north_east: *direction = south_east;  break;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2207      	movs	r2, #7
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	e007      	b.n	8004830 <turn_right90+0x78>
		case south_west: *direction = north_west;  break;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2204      	movs	r2, #4
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	e003      	b.n	8004830 <turn_right90+0x78>
		case south_east: *direction = south_west;  break;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2206      	movs	r2, #6
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	bf00      	nop
	}

	#if debug == 1
	sprintf((char*)uart_buffer, "turn_right90\n");
 8004830:	4983      	ldr	r1, [pc, #524]	; (8004a40 <turn_right90+0x288>)
 8004832:	4884      	ldr	r0, [pc, #528]	; (8004a44 <turn_right90+0x28c>)
 8004834:	f009 f98a 	bl	800db4c <siprintf>
	HAL_UART_Transmit(&huart3, uart_buffer, sizeof(uart_buffer), 10);
 8004838:	230a      	movs	r3, #10
 800483a:	2232      	movs	r2, #50	; 0x32
 800483c:	4981      	ldr	r1, [pc, #516]	; (8004a44 <turn_right90+0x28c>)
 800483e:	4882      	ldr	r0, [pc, #520]	; (8004a48 <turn_right90+0x290>)
 8004840:	f004 f84b 	bl	80088da <HAL_UART_Transmit>
	#endif

	if(__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) != htim1.Init.Period ||
 8004844:	4b81      	ldr	r3, [pc, #516]	; (8004a4c <turn_right90+0x294>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800484a:	4b80      	ldr	r3, [pc, #512]	; (8004a4c <turn_right90+0x294>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	429a      	cmp	r2, r3
 8004850:	d106      	bne.n	8004860 <turn_right90+0xa8>
		__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2) != htim1.Init.Period){
 8004852:	4b7e      	ldr	r3, [pc, #504]	; (8004a4c <turn_right90+0x294>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004858:	4b7c      	ldr	r3, [pc, #496]	; (8004a4c <turn_right90+0x294>)
 800485a:	68db      	ldr	r3, [r3, #12]
	if(__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) != htim1.Init.Period ||
 800485c:	429a      	cmp	r2, r3
 800485e:	d017      	beq.n	8004890 <turn_right90+0xd8>
		running_right_motor(1, 650);
 8004860:	4b7a      	ldr	r3, [pc, #488]	; (8004a4c <turn_right90+0x294>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2200      	movs	r2, #0
 8004866:	635a      	str	r2, [r3, #52]	; 0x34
 8004868:	4b78      	ldr	r3, [pc, #480]	; (8004a4c <turn_right90+0x294>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f240 228a 	movw	r2, #650	; 0x28a
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
		running_left_motor(1, 650);
 8004872:	4b76      	ldr	r3, [pc, #472]	; (8004a4c <turn_right90+0x294>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f240 228a 	movw	r2, #650	; 0x28a
 800487a:	63da      	str	r2, [r3, #60]	; 0x3c
 800487c:	4b73      	ldr	r3, [pc, #460]	; (8004a4c <turn_right90+0x294>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2200      	movs	r2, #0
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(50);
 8004884:	2032      	movs	r0, #50	; 0x32
 8004886:	f000 ff83 	bl	8005790 <HAL_Delay>
		brake(2);
 800488a:	2002      	movs	r0, #2
 800488c:	f000 febc 	bl	8005608 <brake>
	}
	uint16_t last = 10;
 8004890:	230a      	movs	r3, #10
 8004892:	82fb      	strh	r3, [r7, #22]
	while(last != TIM2->CNT){
 8004894:	e006      	b.n	80048a4 <turn_right90+0xec>
		last = TIM2->CNT;
 8004896:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	82fb      	strh	r3, [r7, #22]
		HAL_Delay(20);
 800489e:	2014      	movs	r0, #20
 80048a0:	f000 ff76 	bl	8005790 <HAL_Delay>
	while(last != TIM2->CNT){
 80048a4:	8afa      	ldrh	r2, [r7, #22]
 80048a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d1f2      	bne.n	8004896 <turn_right90+0xde>
	}
	uint16_t en = round(turn90_arc_en) + 450;
 80048b0:	a35f      	add	r3, pc, #380	; (adr r3, 8004a30 <turn_right90+0x278>)
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	4610      	mov	r0, r2
 80048b8:	4619      	mov	r1, r3
 80048ba:	f009 f8bb 	bl	800da34 <round>
 80048be:	a35e      	add	r3, pc, #376	; (adr r3, 8004a38 <turn_right90+0x280>)
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	f7fb fcfe 	bl	80002c4 <__adddf3>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	f7fc f970 	bl	8000bb4 <__aeabi_d2uiz>
 80048d4:	4603      	mov	r3, r0
 80048d6:	82bb      	strh	r3, [r7, #20]
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 80048d8:	4b5d      	ldr	r3, [pc, #372]	; (8004a50 <turn_right90+0x298>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80048e2:	4b5b      	ldr	r3, [pc, #364]	; (8004a50 <turn_right90+0x298>)
 80048e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048e8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 80048ea:	4b5a      	ldr	r3, [pc, #360]	; (8004a54 <turn_right90+0x29c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80048f4:	4b57      	ldr	r3, [pc, #348]	; (8004a54 <turn_right90+0x29c>)
 80048f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048fa:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim2, 500);
 80048fc:	4b54      	ldr	r3, [pc, #336]	; (8004a50 <turn_right90+0x298>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004904:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 10000);
 8004906:	4b53      	ldr	r3, [pc, #332]	; (8004a54 <turn_right90+0x29c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f242 7210 	movw	r2, #10000	; 0x2710
 800490e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, en);
 8004910:	4b4f      	ldr	r3, [pc, #316]	; (8004a50 <turn_right90+0x298>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	8aba      	ldrh	r2, [r7, #20]
 8004916:	62da      	str	r2, [r3, #44]	; 0x2c
 8004918:	8abb      	ldrh	r3, [r7, #20]
 800491a:	4a4d      	ldr	r2, [pc, #308]	; (8004a50 <turn_right90+0x298>)
 800491c:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 800491e:	4b4d      	ldr	r3, [pc, #308]	; (8004a54 <turn_right90+0x29c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004926:	62da      	str	r2, [r3, #44]	; 0x2c
 8004928:	4b4a      	ldr	r3, [pc, #296]	; (8004a54 <turn_right90+0x29c>)
 800492a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800492e:	60da      	str	r2, [r3, #12]
	status = turn_right_90;
 8004930:	4b49      	ldr	r3, [pc, #292]	; (8004a58 <turn_right90+0x2a0>)
 8004932:	22ff      	movs	r2, #255	; 0xff
 8004934:	701a      	strb	r2, [r3, #0]
	uint16_t speed = 400;
 8004936:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800493a:	827b      	strh	r3, [r7, #18]
	int32_t P;

	TIM1->CCR3 = 0;
 800493c:	4b47      	ldr	r3, [pc, #284]	; (8004a5c <turn_right90+0x2a4>)
 800493e:	2200      	movs	r2, #0
 8004940:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 250;
 8004942:	4b46      	ldr	r3, [pc, #280]	; (8004a5c <turn_right90+0x2a4>)
 8004944:	22fa      	movs	r2, #250	; 0xfa
 8004946:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->CCR1 = 0;
 8004948:	4b44      	ldr	r3, [pc, #272]	; (8004a5c <turn_right90+0x2a4>)
 800494a:	2200      	movs	r2, #0
 800494c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 250;
 800494e:	4b43      	ldr	r3, [pc, #268]	; (8004a5c <turn_right90+0x2a4>)
 8004950:	22fa      	movs	r2, #250	; 0xfa
 8004952:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(100);
 8004954:	2064      	movs	r0, #100	; 0x64
 8004956:	f000 ff1b 	bl	8005790 <HAL_Delay>

	while(status != 0){
 800495a:	e02e      	b.n	80049ba <turn_right90+0x202>
		P = ((int32_t)(10000 - TIM3->CNT) - ((int32_t)TIM2->CNT - 500)) * 5;
 800495c:	4b40      	ldr	r3, [pc, #256]	; (8004a60 <turn_right90+0x2a8>)
 800495e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	441a      	add	r2, r3
 8004968:	4613      	mov	r3, r2
 800496a:	079b      	lsls	r3, r3, #30
 800496c:	1a9b      	subs	r3, r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004976:	3314      	adds	r3, #20
 8004978:	60fb      	str	r3, [r7, #12]
		TIM1->CCR3 = 0;
 800497a:	4b38      	ldr	r3, [pc, #224]	; (8004a5c <turn_right90+0x2a4>)
 800497c:	2200      	movs	r2, #0
 800497e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = speed + P;
 8004980:	8a7a      	ldrh	r2, [r7, #18]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	441a      	add	r2, r3
 8004986:	4b35      	ldr	r3, [pc, #212]	; (8004a5c <turn_right90+0x2a4>)
 8004988:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR1 = 0;
 800498a:	4b34      	ldr	r3, [pc, #208]	; (8004a5c <turn_right90+0x2a4>)
 800498c:	2200      	movs	r2, #0
 800498e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = speed - P;
 8004990:	8a7a      	ldrh	r2, [r7, #18]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1ad2      	subs	r2, r2, r3
 8004996:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <turn_right90+0x2a4>)
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
		#if debug == 1
		a = (TIM2->CNT - 500);
 800499a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80049a4:	461a      	mov	r2, r3
 80049a6:	4b2f      	ldr	r3, [pc, #188]	; (8004a64 <turn_right90+0x2ac>)
 80049a8:	601a      	str	r2, [r3, #0]
		b = (10000 - TIM3->CNT);
 80049aa:	4b2d      	ldr	r3, [pc, #180]	; (8004a60 <turn_right90+0x2a8>)
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80049b2:	3310      	adds	r3, #16
 80049b4:	461a      	mov	r2, r3
 80049b6:	4b2c      	ldr	r3, [pc, #176]	; (8004a68 <turn_right90+0x2b0>)
 80049b8:	601a      	str	r2, [r3, #0]
	while(status != 0){
 80049ba:	4b27      	ldr	r3, [pc, #156]	; (8004a58 <turn_right90+0x2a0>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	b25b      	sxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1cb      	bne.n	800495c <turn_right90+0x1a4>
		#endif
	}
	running_left_motor(1, 700);
 80049c4:	4b21      	ldr	r3, [pc, #132]	; (8004a4c <turn_right90+0x294>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80049cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80049ce:	4b1f      	ldr	r3, [pc, #124]	; (8004a4c <turn_right90+0x294>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2200      	movs	r2, #0
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40
	running_right_motor(0, 700);
 80049d6:	4b1d      	ldr	r3, [pc, #116]	; (8004a4c <turn_right90+0x294>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80049de:	635a      	str	r2, [r3, #52]	; 0x34
 80049e0:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <turn_right90+0x294>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2200      	movs	r2, #0
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(50);
 80049e8:	2032      	movs	r0, #50	; 0x32
 80049ea:	f000 fed1 	bl	8005790 <HAL_Delay>
	brake(2);
 80049ee:	2002      	movs	r0, #2
 80049f0:	f000 fe0a 	bl	8005608 <brake>
	__HAL_TIM_SET_COUNTER(&htim2, 100);
 80049f4:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <turn_right90+0x298>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2264      	movs	r2, #100	; 0x64
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 100);
 80049fc:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <turn_right90+0x29c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2264      	movs	r2, #100	; 0x64
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8004a04:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <turn_right90+0x298>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a0e:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <turn_right90+0x298>)
 8004a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a14:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <turn_right90+0x29c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a20:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <turn_right90+0x29c>)
 8004a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a26:	60da      	str	r2, [r3, #12]

}
 8004a28:	bf00      	nop
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	bbbbbbbc 	.word	0xbbbbbbbc
 8004a34:	40829bbb 	.word	0x40829bbb
 8004a38:	00000000 	.word	0x00000000
 8004a3c:	407c2000 	.word	0x407c2000
 8004a40:	0800e468 	.word	0x0800e468
 8004a44:	2000070c 	.word	0x2000070c
 8004a48:	200005dc 	.word	0x200005dc
 8004a4c:	20000504 	.word	0x20000504
 8004a50:	2000054c 	.word	0x2000054c
 8004a54:	20000594 	.word	0x20000594
 8004a58:	200006ed 	.word	0x200006ed
 8004a5c:	40012c00 	.word	0x40012c00
 8004a60:	40000400 	.word	0x40000400
 8004a64:	200006f0 	.word	0x200006f0
 8004a68:	200006f4 	.word	0x200006f4
 8004a6c:	00000000 	.word	0x00000000

08004a70 <go_straight>:

void go_straight(double distance, bool brakee, int8_t next) { //millimeter
 8004a70:	b5b0      	push	{r4, r5, r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	460b      	mov	r3, r1
 8004a80:	71fb      	strb	r3, [r7, #7]
 8004a82:	4613      	mov	r3, r2
 8004a84:	71bb      	strb	r3, [r7, #6]
	uint16_t en = round(distance * counts_per_1mm);
 8004a86:	a172      	add	r1, pc, #456	; (adr r1, 8004c50 <go_straight+0x1e0>)
 8004a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a90:	f7fb fdce 	bl	8000630 <__aeabi_dmul>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	f008 ffca 	bl	800da34 <round>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	f7fc f884 	bl	8000bb4 <__aeabi_d2uiz>
 8004aac:	4603      	mov	r3, r0
 8004aae:	827b      	strh	r3, [r7, #18]
	bool isRunning = true;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	75fb      	strb	r3, [r7, #23]
	if(__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) == __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2)){
 8004ab4:	4b68      	ldr	r3, [pc, #416]	; (8004c58 <go_straight+0x1e8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aba:	4b67      	ldr	r3, [pc, #412]	; (8004c58 <go_straight+0x1e8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d119      	bne.n	8004af8 <go_straight+0x88>
		uint16_t last = 10;
 8004ac4:	230a      	movs	r3, #10
 8004ac6:	82bb      	strh	r3, [r7, #20]
		while(last != TIM2->CNT){
 8004ac8:	e006      	b.n	8004ad8 <go_straight+0x68>
			last = TIM2->CNT;
 8004aca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	82bb      	strh	r3, [r7, #20]
			HAL_Delay(20);
 8004ad2:	2014      	movs	r0, #20
 8004ad4:	f000 fe5c 	bl	8005790 <HAL_Delay>
		while(last != TIM2->CNT){
 8004ad8:	8aba      	ldrh	r2, [r7, #20]
 8004ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d1f2      	bne.n	8004aca <go_straight+0x5a>
		}
		set_counterTIM2_3(0, 0);
 8004ae4:	4b5d      	ldr	r3, [pc, #372]	; (8004c5c <go_straight+0x1ec>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24
 8004aec:	4b5c      	ldr	r3, [pc, #368]	; (8004c60 <go_straight+0x1f0>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2200      	movs	r2, #0
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24
		isRunning = false;
 8004af4:	2300      	movs	r3, #0
 8004af6:	75fb      	strb	r3, [r7, #23]
	}
	__HAL_TIM_SET_AUTORELOAD(&htim2, en + 100);
 8004af8:	8a7b      	ldrh	r3, [r7, #18]
 8004afa:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004afe:	4b57      	ldr	r3, [pc, #348]	; (8004c5c <go_straight+0x1ec>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b04:	8a7b      	ldrh	r3, [r7, #18]
 8004b06:	3364      	adds	r3, #100	; 0x64
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4b54      	ldr	r3, [pc, #336]	; (8004c5c <go_straight+0x1ec>)
 8004b0c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, en + 100);
 8004b0e:	8a7b      	ldrh	r3, [r7, #18]
 8004b10:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004b14:	4b52      	ldr	r3, [pc, #328]	; (8004c60 <go_straight+0x1f0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b1a:	8a7b      	ldrh	r3, [r7, #18]
 8004b1c:	3364      	adds	r3, #100	; 0x64
 8004b1e:	461a      	mov	r2, r3
 8004b20:	4b4f      	ldr	r3, [pc, #316]	; (8004c60 <go_straight+0x1f0>)
 8004b22:	60da      	str	r2, [r3, #12]
	set_counterTIM2_3(TIM2->CNT + 100, TIM3->CNT + 100);
 8004b24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b2a:	4b4c      	ldr	r3, [pc, #304]	; (8004c5c <go_straight+0x1ec>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3264      	adds	r2, #100	; 0x64
 8004b30:	625a      	str	r2, [r3, #36]	; 0x24
 8004b32:	4b4c      	ldr	r3, [pc, #304]	; (8004c64 <go_straight+0x1f4>)
 8004b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b36:	4b4a      	ldr	r3, [pc, #296]	; (8004c60 <go_straight+0x1f0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3264      	adds	r2, #100	; 0x64
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24

	status = straight;
 8004b3e:	4b4a      	ldr	r3, [pc, #296]	; (8004c68 <go_straight+0x1f8>)
 8004b40:	22fa      	movs	r2, #250	; 0xfa
 8004b42:	701a      	strb	r2, [r3, #0]
	old_Error = 0;
 8004b44:	4b49      	ldr	r3, [pc, #292]	; (8004c6c <go_straight+0x1fc>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
	useIRSensor = true;
 8004b4a:	4b49      	ldr	r3, [pc, #292]	; (8004c70 <go_straight+0x200>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	701a      	strb	r2, [r3, #0]
	oe2 = 120;
 8004b50:	4b48      	ldr	r3, [pc, #288]	; (8004c74 <go_straight+0x204>)
 8004b52:	2278      	movs	r2, #120	; 0x78
 8004b54:	801a      	strh	r2, [r3, #0]
		= right_sensor45
		= left_sensor90
		= right_sensor90
		= left_sensor0
		= right_sensor0
		= 8000;
 8004b56:	4b48      	ldr	r3, [pc, #288]	; (8004c78 <go_straight+0x208>)
 8004b58:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004b5c:	801a      	strh	r2, [r3, #0]
		= right_sensor0
 8004b5e:	4b46      	ldr	r3, [pc, #280]	; (8004c78 <go_straight+0x208>)
 8004b60:	881a      	ldrh	r2, [r3, #0]
 8004b62:	4b46      	ldr	r3, [pc, #280]	; (8004c7c <go_straight+0x20c>)
 8004b64:	801a      	strh	r2, [r3, #0]
		= left_sensor0
 8004b66:	4b45      	ldr	r3, [pc, #276]	; (8004c7c <go_straight+0x20c>)
 8004b68:	881a      	ldrh	r2, [r3, #0]
 8004b6a:	4b45      	ldr	r3, [pc, #276]	; (8004c80 <go_straight+0x210>)
 8004b6c:	801a      	strh	r2, [r3, #0]
		= right_sensor90
 8004b6e:	4b44      	ldr	r3, [pc, #272]	; (8004c80 <go_straight+0x210>)
 8004b70:	881a      	ldrh	r2, [r3, #0]
 8004b72:	4b44      	ldr	r3, [pc, #272]	; (8004c84 <go_straight+0x214>)
 8004b74:	801a      	strh	r2, [r3, #0]
		= left_sensor90
 8004b76:	4b43      	ldr	r3, [pc, #268]	; (8004c84 <go_straight+0x214>)
 8004b78:	881a      	ldrh	r2, [r3, #0]
 8004b7a:	4b43      	ldr	r3, [pc, #268]	; (8004c88 <go_straight+0x218>)
 8004b7c:	801a      	strh	r2, [r3, #0]
		= right_sensor45
 8004b7e:	4b42      	ldr	r3, [pc, #264]	; (8004c88 <go_straight+0x218>)
 8004b80:	881a      	ldrh	r2, [r3, #0]
 8004b82:	4b42      	ldr	r3, [pc, #264]	; (8004c8c <go_straight+0x21c>)
 8004b84:	801a      	strh	r2, [r3, #0]
	uint16_t temp;
	vl53l0x_GetRanging_now(leftSensor90,  &left_sensor90);
 8004b86:	4b42      	ldr	r3, [pc, #264]	; (8004c90 <go_straight+0x220>)
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	493e      	ldr	r1, [pc, #248]	; (8004c84 <go_straight+0x214>)
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f008 fd1c 	bl	800d5ca <vl53l0x_GetRanging_now>
	vl53l0x_GetRanging_now(rightSensor90, &right_sensor90);
 8004b92:	4b3f      	ldr	r3, [pc, #252]	; (8004c90 <go_straight+0x220>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	493a      	ldr	r1, [pc, #232]	; (8004c80 <go_straight+0x210>)
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f008 fd16 	bl	800d5ca <vl53l0x_GetRanging_now>
	hasleftWalllast = left_sensor90 < HasleftWallValue_90;
 8004b9e:	4b39      	ldr	r3, [pc, #228]	; (8004c84 <go_straight+0x214>)
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	2b95      	cmp	r3, #149	; 0x95
 8004ba4:	bf94      	ite	ls
 8004ba6:	2301      	movls	r3, #1
 8004ba8:	2300      	movhi	r3, #0
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	4b39      	ldr	r3, [pc, #228]	; (8004c94 <go_straight+0x224>)
 8004bae:	701a      	strb	r2, [r3, #0]
	hasrightWalllast = right_sensor90 < HasrightWallValue_90;
 8004bb0:	4b33      	ldr	r3, [pc, #204]	; (8004c80 <go_straight+0x210>)
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	2b95      	cmp	r3, #149	; 0x95
 8004bb6:	bf94      	ite	ls
 8004bb8:	2301      	movls	r3, #1
 8004bba:	2300      	movhi	r3, #0
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <go_straight+0x228>)
 8004bc0:	701a      	strb	r2, [r3, #0]
	speed0 = (next == -1 || next == -2) ? speed_levels[Rmode][0] : 400;
 8004bc2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bca:	d004      	beq.n	8004bd6 <go_straight+0x166>
 8004bcc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004bd0:	f113 0f02 	cmn.w	r3, #2
 8004bd4:	d108      	bne.n	8004be8 <go_straight+0x178>
 8004bd6:	4b31      	ldr	r3, [pc, #196]	; (8004c9c <go_straight+0x22c>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4b30      	ldr	r3, [pc, #192]	; (8004ca0 <go_straight+0x230>)
 8004be0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	e001      	b.n	8004bec <go_straight+0x17c>
 8004be8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004bec:	4a2d      	ldr	r2, [pc, #180]	; (8004ca4 <go_straight+0x234>)
 8004bee:	8013      	strh	r3, [r2, #0]
	speed1 = (next == -1 || next == -2) ? speed_levels[Rmode][1] : 400;
 8004bf0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d004      	beq.n	8004c04 <go_straight+0x194>
 8004bfa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004bfe:	f113 0f02 	cmn.w	r3, #2
 8004c02:	d108      	bne.n	8004c16 <go_straight+0x1a6>
 8004c04:	4b25      	ldr	r3, [pc, #148]	; (8004c9c <go_straight+0x22c>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	4a25      	ldr	r2, [pc, #148]	; (8004ca0 <go_straight+0x230>)
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	4413      	add	r3, r2
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	e001      	b.n	8004c1a <go_straight+0x1aa>
 8004c16:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004c1a:	4a23      	ldr	r2, [pc, #140]	; (8004ca8 <go_straight+0x238>)
 8004c1c:	8013      	strh	r3, [r2, #0]
	if(!isRunning){
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
 8004c20:	f083 0301 	eor.w	r3, r3, #1
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 81e7 	beq.w	8004ffa <go_straight+0x58a>
		TIM1->CCR3 = 0;
 8004c2c:	4b1f      	ldr	r3, [pc, #124]	; (8004cac <go_straight+0x23c>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = 250;
 8004c32:	4b1e      	ldr	r3, [pc, #120]	; (8004cac <go_straight+0x23c>)
 8004c34:	22fa      	movs	r2, #250	; 0xfa
 8004c36:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR1 = 250;
 8004c38:	4b1c      	ldr	r3, [pc, #112]	; (8004cac <go_straight+0x23c>)
 8004c3a:	22fa      	movs	r2, #250	; 0xfa
 8004c3c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8004c3e:	4b1b      	ldr	r3, [pc, #108]	; (8004cac <go_straight+0x23c>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(100);
 8004c44:	2064      	movs	r0, #100	; 0x64
 8004c46:	f000 fda3 	bl	8005790 <HAL_Delay>
	}

	while(status != 0 && (right_sensor0 > oe2 || left_sensor0 > oe2)){
 8004c4a:	e1d6      	b.n	8004ffa <go_straight+0x58a>
 8004c4c:	f3af 8000 	nop.w
 8004c50:	7bd40597 	.word	0x7bd40597
 8004c54:	401a24d3 	.word	0x401a24d3
 8004c58:	20000504 	.word	0x20000504
 8004c5c:	2000054c 	.word	0x2000054c
 8004c60:	20000594 	.word	0x20000594
 8004c64:	40000400 	.word	0x40000400
 8004c68:	200006ed 	.word	0x200006ed
 8004c6c:	20001fc4 	.word	0x20001fc4
 8004c70:	20001fd4 	.word	0x20001fd4
 8004c74:	20001fd6 	.word	0x20001fd6
 8004c78:	20001fe6 	.word	0x20001fe6
 8004c7c:	20001fe4 	.word	0x20001fe4
 8004c80:	20001fe2 	.word	0x20001fe2
 8004c84:	20001fe0 	.word	0x20001fe0
 8004c88:	20001fde 	.word	0x20001fde
 8004c8c:	20001fdc 	.word	0x20001fdc
 8004c90:	20001078 	.word	0x20001078
 8004c94:	20001fe8 	.word	0x20001fe8
 8004c98:	20001fe9 	.word	0x20001fe9
 8004c9c:	200006ec 	.word	0x200006ec
 8004ca0:	0800e924 	.word	0x0800e924
 8004ca4:	20001fea 	.word	0x20001fea
 8004ca8:	20001fec 	.word	0x20001fec
 8004cac:	40012c00 	.word	0x40012c00
		temp_3 = (int32_t)TIM3->CNT - TIM2->CNT;
 8004cb0:	4ba1      	ldr	r3, [pc, #644]	; (8004f38 <go_straight+0x4c8>)
 8004cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4b9f      	ldr	r3, [pc, #636]	; (8004f3c <go_straight+0x4cc>)
 8004cc0:	601a      	str	r2, [r3, #0]
		vl53l0x_GetRanging_now(leftSensor45,  &left_sensor45);
 8004cc2:	4b9f      	ldr	r3, [pc, #636]	; (8004f40 <go_straight+0x4d0>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	499f      	ldr	r1, [pc, #636]	; (8004f44 <go_straight+0x4d4>)
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f008 fc7e 	bl	800d5ca <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor45, &right_sensor45);
 8004cce:	4b9c      	ldr	r3, [pc, #624]	; (8004f40 <go_straight+0x4d0>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	499d      	ldr	r1, [pc, #628]	; (8004f48 <go_straight+0x4d8>)
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f008 fc78 	bl	800d5ca <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(leftSensor0,   &left_sensor0);
 8004cda:	4b99      	ldr	r3, [pc, #612]	; (8004f40 <go_straight+0x4d0>)
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	499b      	ldr	r1, [pc, #620]	; (8004f4c <go_straight+0x4dc>)
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f008 fc72 	bl	800d5ca <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor0,  &right_sensor0);
 8004ce6:	4b96      	ldr	r3, [pc, #600]	; (8004f40 <go_straight+0x4d0>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4999      	ldr	r1, [pc, #612]	; (8004f50 <go_straight+0x4e0>)
 8004cec:	4618      	mov	r0, r3
 8004cee:	f008 fc6c 	bl	800d5ca <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(leftSensor90,  &left_sensor90);
 8004cf2:	4b93      	ldr	r3, [pc, #588]	; (8004f40 <go_straight+0x4d0>)
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	4997      	ldr	r1, [pc, #604]	; (8004f54 <go_straight+0x4e4>)
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f008 fc66 	bl	800d5ca <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor90,  &right_sensor90);
 8004cfe:	4b90      	ldr	r3, [pc, #576]	; (8004f40 <go_straight+0x4d0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4995      	ldr	r1, [pc, #596]	; (8004f58 <go_straight+0x4e8>)
 8004d04:	4618      	mov	r0, r3
 8004d06:	f008 fc60 	bl	800d5ca <vl53l0x_GetRanging_now>
		if(next == -1 || next == 0 || next == -3){ // normal
 8004d0a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d12:	d009      	beq.n	8004d28 <go_straight+0x2b8>
 8004d14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <go_straight+0x2b8>
 8004d1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004d20:	f113 0f03 	cmn.w	r3, #3
 8004d24:	f040 8167 	bne.w	8004ff6 <go_straight+0x586>
			if((next == -1 || next == -3) && ((left_sensor90 < HasleftWallValue_90 && !hasleftWalllast) ||
 8004d28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	d005      	beq.n	8004d3e <go_straight+0x2ce>
 8004d32:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004d36:	f113 0f03 	cmn.w	r3, #3
 8004d3a:	f040 8159 	bne.w	8004ff0 <go_straight+0x580>
 8004d3e:	4b85      	ldr	r3, [pc, #532]	; (8004f54 <go_straight+0x4e4>)
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	2b95      	cmp	r3, #149	; 0x95
 8004d44:	d806      	bhi.n	8004d54 <go_straight+0x2e4>
 8004d46:	4b85      	ldr	r3, [pc, #532]	; (8004f5c <go_straight+0x4ec>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	f083 0301 	eor.w	r3, r3, #1
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d11c      	bne.n	8004d8e <go_straight+0x31e>
							(right_sensor90 < HasrightWallValue_90 && !hasrightWalllast) ||
 8004d54:	4b80      	ldr	r3, [pc, #512]	; (8004f58 <go_straight+0x4e8>)
 8004d56:	881b      	ldrh	r3, [r3, #0]
			if((next == -1 || next == -3) && ((left_sensor90 < HasleftWallValue_90 && !hasleftWalllast) ||
 8004d58:	2b95      	cmp	r3, #149	; 0x95
 8004d5a:	d806      	bhi.n	8004d6a <go_straight+0x2fa>
							(right_sensor90 < HasrightWallValue_90 && !hasrightWalllast) ||
 8004d5c:	4b80      	ldr	r3, [pc, #512]	; (8004f60 <go_straight+0x4f0>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	f083 0301 	eor.w	r3, r3, #1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d111      	bne.n	8004d8e <go_straight+0x31e>
							(left_sensor90 > HasleftWallValue_90 && hasleftWalllast) ||
 8004d6a:	4b7a      	ldr	r3, [pc, #488]	; (8004f54 <go_straight+0x4e4>)
 8004d6c:	881b      	ldrh	r3, [r3, #0]
							(right_sensor90 < HasrightWallValue_90 && !hasrightWalllast) ||
 8004d6e:	2b96      	cmp	r3, #150	; 0x96
 8004d70:	d903      	bls.n	8004d7a <go_straight+0x30a>
							(left_sensor90 > HasleftWallValue_90 && hasleftWalllast) ||
 8004d72:	4b7a      	ldr	r3, [pc, #488]	; (8004f5c <go_straight+0x4ec>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <go_straight+0x31e>
							(right_sensor90 > HasrightWallValue_90 && hasrightWalllast))){
 8004d7a:	4b77      	ldr	r3, [pc, #476]	; (8004f58 <go_straight+0x4e8>)
 8004d7c:	881b      	ldrh	r3, [r3, #0]
							(left_sensor90 > HasleftWallValue_90 && hasleftWalllast) ||
 8004d7e:	2b96      	cmp	r3, #150	; 0x96
 8004d80:	f240 8136 	bls.w	8004ff0 <go_straight+0x580>
							(right_sensor90 > HasrightWallValue_90 && hasrightWalllast))){
 8004d84:	4b76      	ldr	r3, [pc, #472]	; (8004f60 <go_straight+0x4f0>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 8131 	beq.w	8004ff0 <go_straight+0x580>
				temp = round((double)round((double)(TIM3->CNT)/counts_per_300mm) * counts_per_300mm);
 8004d8e:	4b6a      	ldr	r3, [pc, #424]	; (8004f38 <go_straight+0x4c8>)
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fb fbd2 	bl	800053c <__aeabi_ui2d>
 8004d98:	a363      	add	r3, pc, #396	; (adr r3, 8004f28 <go_straight+0x4b8>)
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	f7fb fd71 	bl	8000884 <__aeabi_ddiv>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4610      	mov	r0, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	f008 fe43 	bl	800da34 <round>
 8004dae:	a35e      	add	r3, pc, #376	; (adr r3, 8004f28 <go_straight+0x4b8>)
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	f7fb fc3c 	bl	8000630 <__aeabi_dmul>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f008 fe38 	bl	800da34 <round>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f7fb fef2 	bl	8000bb4 <__aeabi_d2uiz>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	823b      	strh	r3, [r7, #16]
				if((left_sensor90 < HasleftWallValue_90 && !hasleftWalllast) ||
 8004dd4:	4b5f      	ldr	r3, [pc, #380]	; (8004f54 <go_straight+0x4e4>)
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	2b95      	cmp	r3, #149	; 0x95
 8004dda:	d806      	bhi.n	8004dea <go_straight+0x37a>
 8004ddc:	4b5f      	ldr	r3, [pc, #380]	; (8004f5c <go_straight+0x4ec>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	f083 0301 	eor.w	r3, r3, #1
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <go_straight+0x390>
						(right_sensor90 < HasrightWallValue_90 && !hasrightWalllast)){
 8004dea:	4b5b      	ldr	r3, [pc, #364]	; (8004f58 <go_straight+0x4e8>)
 8004dec:	881b      	ldrh	r3, [r3, #0]
				if((left_sensor90 < HasleftWallValue_90 && !hasleftWalllast) ||
 8004dee:	2b95      	cmp	r3, #149	; 0x95
 8004df0:	d839      	bhi.n	8004e66 <go_straight+0x3f6>
						(right_sensor90 < HasrightWallValue_90 && !hasrightWalllast)){
 8004df2:	4b5b      	ldr	r3, [pc, #364]	; (8004f60 <go_straight+0x4f0>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	f083 0301 	eor.w	r3, r3, #1
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d032      	beq.n	8004e66 <go_straight+0x3f6>
					if(abs((int32_t)temp - en) < 100){
 8004e00:	8a3a      	ldrh	r2, [r7, #16]
 8004e02:	8a7b      	ldrh	r3, [r7, #18]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8004e0a:	db1f      	blt.n	8004e4c <go_straight+0x3dc>
 8004e0c:	8a3a      	ldrh	r2, [r7, #16]
 8004e0e:	8a7b      	ldrh	r3, [r7, #18]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b63      	cmp	r3, #99	; 0x63
 8004e14:	dc1a      	bgt.n	8004e4c <go_straight+0x3dc>
							__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8004e16:	4b53      	ldr	r3, [pc, #332]	; (8004f64 <go_straight+0x4f4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e20:	4b50      	ldr	r3, [pc, #320]	; (8004f64 <go_straight+0x4f4>)
 8004e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e26:	60da      	str	r2, [r3, #12]
							__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 8004e28:	4b4f      	ldr	r3, [pc, #316]	; (8004f68 <go_straight+0x4f8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e32:	4b4d      	ldr	r3, [pc, #308]	; (8004f68 <go_straight+0x4f8>)
 8004e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e38:	60da      	str	r2, [r3, #12]
							set_counterTIM2_3(0, 0);
 8004e3a:	4b4a      	ldr	r3, [pc, #296]	; (8004f64 <go_straight+0x4f4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24
 8004e42:	4b49      	ldr	r3, [pc, #292]	; (8004f68 <go_straight+0x4f8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2200      	movs	r2, #0
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004e4a:	e0e9      	b.n	8005020 <go_straight+0x5b0>
					}
					set_counterTIM2_3(temp + 100, temp + 100);
 8004e4c:	8a3b      	ldrh	r3, [r7, #16]
 8004e4e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004e52:	4b44      	ldr	r3, [pc, #272]	; (8004f64 <go_straight+0x4f4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	625a      	str	r2, [r3, #36]	; 0x24
 8004e58:	8a3b      	ldrh	r3, [r7, #16]
 8004e5a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004e5e:	4b42      	ldr	r3, [pc, #264]	; (8004f68 <go_straight+0x4f8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24
 8004e64:	e0b2      	b.n	8004fcc <go_straight+0x55c>
				} else if((left_sensor90 > HasleftWallValue_90 && hasleftWalllast) ||
 8004e66:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <go_straight+0x4e4>)
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	2b96      	cmp	r3, #150	; 0x96
 8004e6c:	d903      	bls.n	8004e76 <go_straight+0x406>
 8004e6e:	4b3b      	ldr	r3, [pc, #236]	; (8004f5c <go_straight+0x4ec>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <go_straight+0x41a>
						(right_sensor90 > HasrightWallValue_90 && hasrightWalllast)){
 8004e76:	4b38      	ldr	r3, [pc, #224]	; (8004f58 <go_straight+0x4e8>)
 8004e78:	881b      	ldrh	r3, [r3, #0]
				} else if((left_sensor90 > HasleftWallValue_90 && hasleftWalllast) ||
 8004e7a:	2b96      	cmp	r3, #150	; 0x96
 8004e7c:	f240 80a6 	bls.w	8004fcc <go_straight+0x55c>
						(right_sensor90 > HasrightWallValue_90 && hasrightWalllast)){
 8004e80:	4b37      	ldr	r3, [pc, #220]	; (8004f60 <go_straight+0x4f0>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80a1 	beq.w	8004fcc <go_straight+0x55c>
					if(abs((int32_t)temp - en) < 100){
 8004e8a:	8a3a      	ldrh	r2, [r7, #16]
 8004e8c:	8a7b      	ldrh	r3, [r7, #18]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8004e94:	db6c      	blt.n	8004f70 <go_straight+0x500>
 8004e96:	8a3a      	ldrh	r2, [r7, #16]
 8004e98:	8a7b      	ldrh	r3, [r7, #18]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b63      	cmp	r3, #99	; 0x63
 8004e9e:	dc67      	bgt.n	8004f70 <go_straight+0x500>
						__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8004ea0:	4b30      	ldr	r3, [pc, #192]	; (8004f64 <go_straight+0x4f4>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ea8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004eaa:	4b2e      	ldr	r3, [pc, #184]	; (8004f64 <go_straight+0x4f4>)
 8004eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eb0:	60da      	str	r2, [r3, #12]
						__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 8004eb2:	4b2d      	ldr	r3, [pc, #180]	; (8004f68 <go_straight+0x4f8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eba:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ebc:	4b2a      	ldr	r3, [pc, #168]	; (8004f68 <go_straight+0x4f8>)
 8004ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ec2:	60da      	str	r2, [r3, #12]
						set_counterTIM2_3(round(40 * counts_per_1mm), round(40 * counts_per_1mm));
 8004ec4:	a11a      	add	r1, pc, #104	; (adr r1, 8004f30 <go_straight+0x4c0>)
 8004ec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	4b27      	ldr	r3, [pc, #156]	; (8004f6c <go_straight+0x4fc>)
 8004ed0:	f7fb fbae 	bl	8000630 <__aeabi_dmul>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	f008 fdaa 	bl	800da34 <round>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	491f      	ldr	r1, [pc, #124]	; (8004f64 <go_straight+0x4f4>)
 8004ee6:	680c      	ldr	r4, [r1, #0]
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4619      	mov	r1, r3
 8004eec:	f7fb fe62 	bl	8000bb4 <__aeabi_d2uiz>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	6263      	str	r3, [r4, #36]	; 0x24
 8004ef4:	a10e      	add	r1, pc, #56	; (adr r1, 8004f30 <go_straight+0x4c0>)
 8004ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	4b1b      	ldr	r3, [pc, #108]	; (8004f6c <go_straight+0x4fc>)
 8004f00:	f7fb fb96 	bl	8000630 <__aeabi_dmul>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	f008 fd92 	bl	800da34 <round>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4914      	ldr	r1, [pc, #80]	; (8004f68 <go_straight+0x4f8>)
 8004f16:	680c      	ldr	r4, [r1, #0]
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f7fb fe4a 	bl	8000bb4 <__aeabi_d2uiz>
 8004f20:	4603      	mov	r3, r0
 8004f22:	6263      	str	r3, [r4, #36]	; 0x24
						break;
 8004f24:	e07c      	b.n	8005020 <go_straight+0x5b0>
 8004f26:	bf00      	nop
 8004f28:	d51c768d 	.word	0xd51c768d
 8004f2c:	409ea327 	.word	0x409ea327
 8004f30:	7bd40597 	.word	0x7bd40597
 8004f34:	401a24d3 	.word	0x401a24d3
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	20001fd0 	.word	0x20001fd0
 8004f40:	20001078 	.word	0x20001078
 8004f44:	20001fdc 	.word	0x20001fdc
 8004f48:	20001fde 	.word	0x20001fde
 8004f4c:	20001fe4 	.word	0x20001fe4
 8004f50:	20001fe6 	.word	0x20001fe6
 8004f54:	20001fe0 	.word	0x20001fe0
 8004f58:	20001fe2 	.word	0x20001fe2
 8004f5c:	20001fe8 	.word	0x20001fe8
 8004f60:	20001fe9 	.word	0x20001fe9
 8004f64:	2000054c 	.word	0x2000054c
 8004f68:	20000594 	.word	0x20000594
 8004f6c:	40440000 	.word	0x40440000
					}
					temp += round(40 * counts_per_1mm);
 8004f70:	8a3b      	ldrh	r3, [r7, #16]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fb faf2 	bl	800055c <__aeabi_i2d>
 8004f78:	4604      	mov	r4, r0
 8004f7a:	460d      	mov	r5, r1
 8004f7c:	a15c      	add	r1, pc, #368	; (adr r1, 80050f0 <go_straight+0x680>)
 8004f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	4b5c      	ldr	r3, [pc, #368]	; (80050f8 <go_straight+0x688>)
 8004f88:	f7fb fb52 	bl	8000630 <__aeabi_dmul>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4610      	mov	r0, r2
 8004f92:	4619      	mov	r1, r3
 8004f94:	f008 fd4e 	bl	800da34 <round>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	f7fb f990 	bl	80002c4 <__adddf3>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4610      	mov	r0, r2
 8004faa:	4619      	mov	r1, r3
 8004fac:	f7fb fe02 	bl	8000bb4 <__aeabi_d2uiz>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	823b      	strh	r3, [r7, #16]
					set_counterTIM2_3(temp + 100, temp + 100);
 8004fb4:	8a3b      	ldrh	r3, [r7, #16]
 8004fb6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004fba:	4b50      	ldr	r3, [pc, #320]	; (80050fc <go_straight+0x68c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	625a      	str	r2, [r3, #36]	; 0x24
 8004fc0:	8a3b      	ldrh	r3, [r7, #16]
 8004fc2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004fc6:	4b4e      	ldr	r3, [pc, #312]	; (8005100 <go_straight+0x690>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	625a      	str	r2, [r3, #36]	; 0x24

				}
				hasleftWalllast = left_sensor90 < HasleftWallValue_90;
 8004fcc:	4b4d      	ldr	r3, [pc, #308]	; (8005104 <go_straight+0x694>)
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	2b95      	cmp	r3, #149	; 0x95
 8004fd2:	bf94      	ite	ls
 8004fd4:	2301      	movls	r3, #1
 8004fd6:	2300      	movhi	r3, #0
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	4b4b      	ldr	r3, [pc, #300]	; (8005108 <go_straight+0x698>)
 8004fdc:	701a      	strb	r2, [r3, #0]
				hasrightWalllast = right_sensor90 < HasrightWallValue_90;
 8004fde:	4b4b      	ldr	r3, [pc, #300]	; (800510c <go_straight+0x69c>)
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	2b95      	cmp	r3, #149	; 0x95
 8004fe4:	bf94      	ite	ls
 8004fe6:	2301      	movls	r3, #1
 8004fe8:	2300      	movhi	r3, #0
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	4b48      	ldr	r3, [pc, #288]	; (8005110 <go_straight+0x6a0>)
 8004fee:	701a      	strb	r2, [r3, #0]
			}
			pid_normal();
 8004ff0:	f000 f89a 	bl	8005128 <pid_normal>
 8004ff4:	e001      	b.n	8004ffa <go_straight+0x58a>
		} else { //diagonal
			pid_diagonal();
 8004ff6:	f000 fa3b 	bl	8005470 <pid_diagonal>
	while(status != 0 && (right_sensor0 > oe2 || left_sensor0 > oe2)){
 8004ffa:	4b46      	ldr	r3, [pc, #280]	; (8005114 <go_straight+0x6a4>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00d      	beq.n	8005020 <go_straight+0x5b0>
 8005004:	4b44      	ldr	r3, [pc, #272]	; (8005118 <go_straight+0x6a8>)
 8005006:	881a      	ldrh	r2, [r3, #0]
 8005008:	4b44      	ldr	r3, [pc, #272]	; (800511c <go_straight+0x6ac>)
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	f63f ae4f 	bhi.w	8004cb0 <go_straight+0x240>
 8005012:	4b43      	ldr	r3, [pc, #268]	; (8005120 <go_straight+0x6b0>)
 8005014:	881a      	ldrh	r2, [r3, #0]
 8005016:	4b41      	ldr	r3, [pc, #260]	; (800511c <go_straight+0x6ac>)
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	f63f ae48 	bhi.w	8004cb0 <go_straight+0x240>
		}
	}
	if(brakee){
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d03a      	beq.n	800509c <go_straight+0x62c>
		if(next == -1 || next == -2){
 8005026:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502e:	d004      	beq.n	800503a <go_straight+0x5ca>
 8005030:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005034:	f113 0f02 	cmn.w	r3, #2
 8005038:	d118      	bne.n	800506c <go_straight+0x5fc>
			running_right_motor(1, 800);
 800503a:	4b3a      	ldr	r3, [pc, #232]	; (8005124 <go_straight+0x6b4>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2200      	movs	r2, #0
 8005040:	635a      	str	r2, [r3, #52]	; 0x34
 8005042:	4b38      	ldr	r3, [pc, #224]	; (8005124 <go_straight+0x6b4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f44f 7248 	mov.w	r2, #800	; 0x320
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
			running_left_motor(1, 800);
 800504c:	4b35      	ldr	r3, [pc, #212]	; (8005124 <go_straight+0x6b4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005054:	63da      	str	r2, [r3, #60]	; 0x3c
 8005056:	4b33      	ldr	r3, [pc, #204]	; (8005124 <go_straight+0x6b4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2200      	movs	r2, #0
 800505c:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(70);
 800505e:	2046      	movs	r0, #70	; 0x46
 8005060:	f000 fb96 	bl	8005790 <HAL_Delay>
			brake(2);
 8005064:	2002      	movs	r0, #2
 8005066:	f000 facf 	bl	8005608 <brake>
 800506a:	e017      	b.n	800509c <go_straight+0x62c>
		} else {
			running_right_motor(1, 700);
 800506c:	4b2d      	ldr	r3, [pc, #180]	; (8005124 <go_straight+0x6b4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2200      	movs	r2, #0
 8005072:	635a      	str	r2, [r3, #52]	; 0x34
 8005074:	4b2b      	ldr	r3, [pc, #172]	; (8005124 <go_straight+0x6b4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800507c:	639a      	str	r2, [r3, #56]	; 0x38
			running_left_motor(1, 700);
 800507e:	4b29      	ldr	r3, [pc, #164]	; (8005124 <go_straight+0x6b4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8005086:	63da      	str	r2, [r3, #60]	; 0x3c
 8005088:	4b26      	ldr	r3, [pc, #152]	; (8005124 <go_straight+0x6b4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2200      	movs	r2, #0
 800508e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(60);
 8005090:	203c      	movs	r0, #60	; 0x3c
 8005092:	f000 fb7d 	bl	8005790 <HAL_Delay>
			brake(2);
 8005096:	2002      	movs	r0, #2
 8005098:	f000 fab6 	bl	8005608 <brake>
		}
	}
	if(next == 0 || status == 0){
 800509c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <go_straight+0x63e>
 80050a4:	4b1b      	ldr	r3, [pc, #108]	; (8005114 <go_straight+0x6a4>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	b25b      	sxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d119      	bne.n	80050e2 <go_straight+0x672>
		__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 80050ae:	4b13      	ldr	r3, [pc, #76]	; (80050fc <go_straight+0x68c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80050b8:	4b10      	ldr	r3, [pc, #64]	; (80050fc <go_straight+0x68c>)
 80050ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050be:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 80050c0:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <go_straight+0x690>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80050ca:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <go_straight+0x690>)
 80050cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050d0:	60da      	str	r2, [r3, #12]
		set_counterTIM2_3(0, 0);
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <go_straight+0x68c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2200      	movs	r2, #0
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24
 80050da:	4b09      	ldr	r3, [pc, #36]	; (8005100 <go_straight+0x690>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2200      	movs	r2, #0
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24
	}

}
 80050e2:	bf00      	nop
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bdb0      	pop	{r4, r5, r7, pc}
 80050ea:	bf00      	nop
 80050ec:	f3af 8000 	nop.w
 80050f0:	7bd40597 	.word	0x7bd40597
 80050f4:	401a24d3 	.word	0x401a24d3
 80050f8:	40440000 	.word	0x40440000
 80050fc:	2000054c 	.word	0x2000054c
 8005100:	20000594 	.word	0x20000594
 8005104:	20001fe0 	.word	0x20001fe0
 8005108:	20001fe8 	.word	0x20001fe8
 800510c:	20001fe2 	.word	0x20001fe2
 8005110:	20001fe9 	.word	0x20001fe9
 8005114:	200006ed 	.word	0x200006ed
 8005118:	20001fe6 	.word	0x20001fe6
 800511c:	20001fd6 	.word	0x20001fd6
 8005120:	20001fe4 	.word	0x20001fe4
 8005124:	20000504 	.word	0x20000504

08005128 <pid_normal>:



void pid_normal(){
 8005128:	b5b0      	push	{r4, r5, r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
	if((left_sensor0 > 150 || right_sensor0 > 150) && left_sensor45 < 310 && left_sensor90 < HasleftWallValue_90
 800512e:	4b79      	ldr	r3, [pc, #484]	; (8005314 <pid_normal+0x1ec>)
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	2b96      	cmp	r3, #150	; 0x96
 8005134:	d803      	bhi.n	800513e <pid_normal+0x16>
 8005136:	4b78      	ldr	r3, [pc, #480]	; (8005318 <pid_normal+0x1f0>)
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	2b96      	cmp	r3, #150	; 0x96
 800513c:	d931      	bls.n	80051a2 <pid_normal+0x7a>
 800513e:	4b77      	ldr	r3, [pc, #476]	; (800531c <pid_normal+0x1f4>)
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8005146:	d22c      	bcs.n	80051a2 <pid_normal+0x7a>
 8005148:	4b75      	ldr	r3, [pc, #468]	; (8005320 <pid_normal+0x1f8>)
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	2b95      	cmp	r3, #149	; 0x95
 800514e:	d828      	bhi.n	80051a2 <pid_normal+0x7a>
			&& right_sensor45 < 310 && right_sensor90 < HasrightWallValue_90){
 8005150:	4b74      	ldr	r3, [pc, #464]	; (8005324 <pid_normal+0x1fc>)
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8005158:	d223      	bcs.n	80051a2 <pid_normal+0x7a>
 800515a:	4b73      	ldr	r3, [pc, #460]	; (8005328 <pid_normal+0x200>)
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	2b95      	cmp	r3, #149	; 0x95
 8005160:	d81f      	bhi.n	80051a2 <pid_normal+0x7a>
		if(left_sensor45 + right_sensor45 > 500){
 8005162:	4b6e      	ldr	r3, [pc, #440]	; (800531c <pid_normal+0x1f4>)
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	4b6e      	ldr	r3, [pc, #440]	; (8005324 <pid_normal+0x1fc>)
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	4413      	add	r3, r2
 800516e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005172:	dc61      	bgt.n	8005238 <pid_normal+0x110>
			goto useEncoder;
		}

		Err = (int32_t)right_sensor45 - left_sensor45;
 8005174:	4b6b      	ldr	r3, [pc, #428]	; (8005324 <pid_normal+0x1fc>)
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	4b68      	ldr	r3, [pc, #416]	; (800531c <pid_normal+0x1f4>)
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	4a6a      	ldr	r2, [pc, #424]	; (800532c <pid_normal+0x204>)
 8005182:	6013      	str	r3, [r2, #0]
		D = Err - old_Error;
 8005184:	4b69      	ldr	r3, [pc, #420]	; (800532c <pid_normal+0x204>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	4b69      	ldr	r3, [pc, #420]	; (8005330 <pid_normal+0x208>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	4a69      	ldr	r2, [pc, #420]	; (8005334 <pid_normal+0x20c>)
 8005190:	6013      	str	r3, [r2, #0]
		old_Error = Err;
 8005192:	4b66      	ldr	r3, [pc, #408]	; (800532c <pid_normal+0x204>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a66      	ldr	r2, [pc, #408]	; (8005330 <pid_normal+0x208>)
 8005198:	6013      	str	r3, [r2, #0]
		useIRSensor = true;
 800519a:	4b67      	ldr	r3, [pc, #412]	; (8005338 <pid_normal+0x210>)
 800519c:	2201      	movs	r2, #1
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	e086      	b.n	80052b0 <pid_normal+0x188>
	} else if((left_sensor0 > 150 || right_sensor0 > 150) && left_sensor45 < 310
 80051a2:	4b5c      	ldr	r3, [pc, #368]	; (8005314 <pid_normal+0x1ec>)
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	2b96      	cmp	r3, #150	; 0x96
 80051a8:	d803      	bhi.n	80051b2 <pid_normal+0x8a>
 80051aa:	4b5b      	ldr	r3, [pc, #364]	; (8005318 <pid_normal+0x1f0>)
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	2b96      	cmp	r3, #150	; 0x96
 80051b0:	d91d      	bls.n	80051ee <pid_normal+0xc6>
 80051b2:	4b5a      	ldr	r3, [pc, #360]	; (800531c <pid_normal+0x1f4>)
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80051ba:	d218      	bcs.n	80051ee <pid_normal+0xc6>
			&& left_sensor90 < HasleftWallValue_90){
 80051bc:	4b58      	ldr	r3, [pc, #352]	; (8005320 <pid_normal+0x1f8>)
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	2b95      	cmp	r3, #149	; 0x95
 80051c2:	d814      	bhi.n	80051ee <pid_normal+0xc6>
		Err = (int32_t)leftWallValue - left_sensor45;
 80051c4:	4b55      	ldr	r3, [pc, #340]	; (800531c <pid_normal+0x1f4>)
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	f1c3 03d2 	rsb	r3, r3, #210	; 0xd2
 80051cc:	4a57      	ldr	r2, [pc, #348]	; (800532c <pid_normal+0x204>)
 80051ce:	6013      	str	r3, [r2, #0]
		D = Err - old_Error;
 80051d0:	4b56      	ldr	r3, [pc, #344]	; (800532c <pid_normal+0x204>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4b56      	ldr	r3, [pc, #344]	; (8005330 <pid_normal+0x208>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	4a56      	ldr	r2, [pc, #344]	; (8005334 <pid_normal+0x20c>)
 80051dc:	6013      	str	r3, [r2, #0]
		old_Error = Err;
 80051de:	4b53      	ldr	r3, [pc, #332]	; (800532c <pid_normal+0x204>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a53      	ldr	r2, [pc, #332]	; (8005330 <pid_normal+0x208>)
 80051e4:	6013      	str	r3, [r2, #0]
		useIRSensor = true;
 80051e6:	4b54      	ldr	r3, [pc, #336]	; (8005338 <pid_normal+0x210>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	e060      	b.n	80052b0 <pid_normal+0x188>
	} else if((left_sensor0 > 150 || right_sensor0 > 150) && right_sensor45 < 310
 80051ee:	4b49      	ldr	r3, [pc, #292]	; (8005314 <pid_normal+0x1ec>)
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	2b96      	cmp	r3, #150	; 0x96
 80051f4:	d803      	bhi.n	80051fe <pid_normal+0xd6>
 80051f6:	4b48      	ldr	r3, [pc, #288]	; (8005318 <pid_normal+0x1f0>)
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	2b96      	cmp	r3, #150	; 0x96
 80051fc:	d91e      	bls.n	800523c <pid_normal+0x114>
 80051fe:	4b49      	ldr	r3, [pc, #292]	; (8005324 <pid_normal+0x1fc>)
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8005206:	d219      	bcs.n	800523c <pid_normal+0x114>
			&& right_sensor90 < HasrightWallValue_90){
 8005208:	4b47      	ldr	r3, [pc, #284]	; (8005328 <pid_normal+0x200>)
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	2b95      	cmp	r3, #149	; 0x95
 800520e:	d815      	bhi.n	800523c <pid_normal+0x114>
		Err = (int32_t)right_sensor45 - rightWallValue;
 8005210:	4b44      	ldr	r3, [pc, #272]	; (8005324 <pid_normal+0x1fc>)
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	3bd2      	subs	r3, #210	; 0xd2
 8005216:	4a45      	ldr	r2, [pc, #276]	; (800532c <pid_normal+0x204>)
 8005218:	6013      	str	r3, [r2, #0]
		D = Err - old_Error;
 800521a:	4b44      	ldr	r3, [pc, #272]	; (800532c <pid_normal+0x204>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	4b44      	ldr	r3, [pc, #272]	; (8005330 <pid_normal+0x208>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	4a43      	ldr	r2, [pc, #268]	; (8005334 <pid_normal+0x20c>)
 8005226:	6013      	str	r3, [r2, #0]
		old_Error = Err;
 8005228:	4b40      	ldr	r3, [pc, #256]	; (800532c <pid_normal+0x204>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a40      	ldr	r2, [pc, #256]	; (8005330 <pid_normal+0x208>)
 800522e:	6013      	str	r3, [r2, #0]
		useIRSensor = true;
 8005230:	4b41      	ldr	r3, [pc, #260]	; (8005338 <pid_normal+0x210>)
 8005232:	2201      	movs	r2, #1
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	e03b      	b.n	80052b0 <pid_normal+0x188>
			goto useEncoder;
 8005238:	bf00      	nop
 800523a:	e000      	b.n	800523e <pid_normal+0x116>
	} else {
		useEncoder:
 800523c:	bf00      	nop
		if(useIRSensor){
 800523e:	4b3e      	ldr	r3, [pc, #248]	; (8005338 <pid_normal+0x210>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d006      	beq.n	8005254 <pid_normal+0x12c>
			ofs = temp_3;
 8005246:	4b3d      	ldr	r3, [pc, #244]	; (800533c <pid_normal+0x214>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a3d      	ldr	r2, [pc, #244]	; (8005340 <pid_normal+0x218>)
 800524c:	6013      	str	r3, [r2, #0]
			old_Error = 0;
 800524e:	4b38      	ldr	r3, [pc, #224]	; (8005330 <pid_normal+0x208>)
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
		}
		temp_1 = TIM2->CNT;
 8005254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	461a      	mov	r2, r3
 800525c:	4b39      	ldr	r3, [pc, #228]	; (8005344 <pid_normal+0x21c>)
 800525e:	601a      	str	r2, [r3, #0]
		temp_2 = TIM3->CNT;
 8005260:	4b39      	ldr	r3, [pc, #228]	; (8005348 <pid_normal+0x220>)
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	461a      	mov	r2, r3
 8005266:	4b39      	ldr	r3, [pc, #228]	; (800534c <pid_normal+0x224>)
 8005268:	601a      	str	r2, [r3, #0]
		Err = temp_2 - (temp_1 + ofs);
 800526a:	4b38      	ldr	r3, [pc, #224]	; (800534c <pid_normal+0x224>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4b35      	ldr	r3, [pc, #212]	; (8005344 <pid_normal+0x21c>)
 8005270:	6819      	ldr	r1, [r3, #0]
 8005272:	4b33      	ldr	r3, [pc, #204]	; (8005340 <pid_normal+0x218>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	440b      	add	r3, r1
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	4a2c      	ldr	r2, [pc, #176]	; (800532c <pid_normal+0x204>)
 800527c:	6013      	str	r3, [r2, #0]
		D = Err - old_Error;
 800527e:	4b2b      	ldr	r3, [pc, #172]	; (800532c <pid_normal+0x204>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b2b      	ldr	r3, [pc, #172]	; (8005330 <pid_normal+0x208>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	4a2a      	ldr	r2, [pc, #168]	; (8005334 <pid_normal+0x20c>)
 800528a:	6013      	str	r3, [r2, #0]
		old_Error = Err;
 800528c:	4b27      	ldr	r3, [pc, #156]	; (800532c <pid_normal+0x204>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a27      	ldr	r2, [pc, #156]	; (8005330 <pid_normal+0x208>)
 8005292:	6013      	str	r3, [r2, #0]
		useIRSensor = false;
 8005294:	4b28      	ldr	r3, [pc, #160]	; (8005338 <pid_normal+0x210>)
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
		#if debug == 1
		a = TIM2->CNT;
 800529a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	461a      	mov	r2, r3
 80052a2:	4b2b      	ldr	r3, [pc, #172]	; (8005350 <pid_normal+0x228>)
 80052a4:	601a      	str	r2, [r3, #0]
		b = TIM3->CNT;
 80052a6:	4b28      	ldr	r3, [pc, #160]	; (8005348 <pid_normal+0x220>)
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	461a      	mov	r2, r3
 80052ac:	4b29      	ldr	r3, [pc, #164]	; (8005354 <pid_normal+0x22c>)
 80052ae:	601a      	str	r2, [r3, #0]
		#endif
	}
	if(useIRSensor){
 80052b0:	4b21      	ldr	r3, [pc, #132]	; (8005338 <pid_normal+0x210>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d055      	beq.n	8005364 <pid_normal+0x23c>
		P = round(P_params[Rmode][0] * Err + D * 0);
 80052b8:	4b27      	ldr	r3, [pc, #156]	; (8005358 <pid_normal+0x230>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	4a27      	ldr	r2, [pc, #156]	; (800535c <pid_normal+0x234>)
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	4413      	add	r3, r2
 80052c4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80052c8:	4b18      	ldr	r3, [pc, #96]	; (800532c <pid_normal+0x204>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fb f945 	bl	800055c <__aeabi_i2d>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4620      	mov	r0, r4
 80052d8:	4629      	mov	r1, r5
 80052da:	f7fb f9a9 	bl	8000630 <__aeabi_dmul>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4610      	mov	r0, r2
 80052e4:	4619      	mov	r1, r3
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	f7fa ffe9 	bl	80002c4 <__adddf3>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4610      	mov	r0, r2
 80052f8:	4619      	mov	r1, r3
 80052fa:	f008 fb9b 	bl	800da34 <round>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4610      	mov	r0, r2
 8005304:	4619      	mov	r1, r3
 8005306:	f7fb fc2d 	bl	8000b64 <__aeabi_d2iz>
 800530a:	4603      	mov	r3, r0
 800530c:	4a14      	ldr	r2, [pc, #80]	; (8005360 <pid_normal+0x238>)
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	e055      	b.n	80053be <pid_normal+0x296>
 8005312:	bf00      	nop
 8005314:	20001fe4 	.word	0x20001fe4
 8005318:	20001fe6 	.word	0x20001fe6
 800531c:	20001fdc 	.word	0x20001fdc
 8005320:	20001fe0 	.word	0x20001fe0
 8005324:	20001fde 	.word	0x20001fde
 8005328:	20001fe2 	.word	0x20001fe2
 800532c:	20001fb8 	.word	0x20001fb8
 8005330:	20001fc4 	.word	0x20001fc4
 8005334:	20001fc0 	.word	0x20001fc0
 8005338:	20001fd4 	.word	0x20001fd4
 800533c:	20001fd0 	.word	0x20001fd0
 8005340:	20001fd8 	.word	0x20001fd8
 8005344:	20001fc8 	.word	0x20001fc8
 8005348:	40000400 	.word	0x40000400
 800534c:	20001fcc 	.word	0x20001fcc
 8005350:	200006f0 	.word	0x200006f0
 8005354:	200006f4 	.word	0x200006f4
 8005358:	200006ec 	.word	0x200006ec
 800535c:	20000000 	.word	0x20000000
 8005360:	20001fbc 	.word	0x20001fbc
	} else {
		P = round(P_params[Rmode][1] * Err + D * 0);
 8005364:	4b3b      	ldr	r3, [pc, #236]	; (8005454 <pid_normal+0x32c>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	b2db      	uxtb	r3, r3
 800536a:	4a3b      	ldr	r2, [pc, #236]	; (8005458 <pid_normal+0x330>)
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	4413      	add	r3, r2
 8005370:	3308      	adds	r3, #8
 8005372:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005376:	4b39      	ldr	r3, [pc, #228]	; (800545c <pid_normal+0x334>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f7fb f8ee 	bl	800055c <__aeabi_i2d>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4620      	mov	r0, r4
 8005386:	4629      	mov	r1, r5
 8005388:	f7fb f952 	bl	8000630 <__aeabi_dmul>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4610      	mov	r0, r2
 8005392:	4619      	mov	r1, r3
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	f7fa ff92 	bl	80002c4 <__adddf3>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4610      	mov	r0, r2
 80053a6:	4619      	mov	r1, r3
 80053a8:	f008 fb44 	bl	800da34 <round>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4610      	mov	r0, r2
 80053b2:	4619      	mov	r1, r3
 80053b4:	f7fb fbd6 	bl	8000b64 <__aeabi_d2iz>
 80053b8:	4603      	mov	r3, r0
 80053ba:	4a29      	ldr	r2, [pc, #164]	; (8005460 <pid_normal+0x338>)
 80053bc:	6013      	str	r3, [r2, #0]
	}
	if(Rmode == 1){
 80053be:	4b25      	ldr	r3, [pc, #148]	; (8005454 <pid_normal+0x32c>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d115      	bne.n	80053f4 <pid_normal+0x2cc>
		P = max(-80, min(P, 80));
 80053c8:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	4b24      	ldr	r3, [pc, #144]	; (8005460 <pid_normal+0x338>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60bb      	str	r3, [r7, #8]
 80053d4:	2350      	movs	r3, #80	; 0x50
 80053d6:	607b      	str	r3, [r7, #4]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4293      	cmp	r3, r2
 80053de:	bfa8      	it	ge
 80053e0:	4613      	movge	r3, r2
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4293      	cmp	r3, r2
 80053ea:	bfb8      	it	lt
 80053ec:	4613      	movlt	r3, r2
 80053ee:	4a1c      	ldr	r2, [pc, #112]	; (8005460 <pid_normal+0x338>)
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	e014      	b.n	800541e <pid_normal+0x2f6>
	} else {
		P = max(-100, min(P, 100));
 80053f4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80053f8:	61fb      	str	r3, [r7, #28]
 80053fa:	4b19      	ldr	r3, [pc, #100]	; (8005460 <pid_normal+0x338>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	2364      	movs	r3, #100	; 0x64
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	4293      	cmp	r3, r2
 800540a:	bfa8      	it	ge
 800540c:	4613      	movge	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4293      	cmp	r3, r2
 8005416:	bfb8      	it	lt
 8005418:	4613      	movlt	r3, r2
 800541a:	4a11      	ldr	r2, [pc, #68]	; (8005460 <pid_normal+0x338>)
 800541c:	6013      	str	r3, [r2, #0]
	}
	TIM1->CCR3 = 0;
 800541e:	4b11      	ldr	r3, [pc, #68]	; (8005464 <pid_normal+0x33c>)
 8005420:	2200      	movs	r2, #0
 8005422:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = (uint16_t)speed0 + P;
 8005424:	4b10      	ldr	r3, [pc, #64]	; (8005468 <pid_normal+0x340>)
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <pid_normal+0x338>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	441a      	add	r2, r3
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <pid_normal+0x33c>)
 8005432:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->CCR1 = (uint16_t)speed1 - P;
 8005434:	4b0d      	ldr	r3, [pc, #52]	; (800546c <pid_normal+0x344>)
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	4b09      	ldr	r3, [pc, #36]	; (8005460 <pid_normal+0x338>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	4b08      	ldr	r3, [pc, #32]	; (8005464 <pid_normal+0x33c>)
 8005442:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <pid_normal+0x33c>)
 8005446:	2200      	movs	r2, #0
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
}
 800544a:	bf00      	nop
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bdb0      	pop	{r4, r5, r7, pc}
 8005452:	bf00      	nop
 8005454:	200006ec 	.word	0x200006ec
 8005458:	20000000 	.word	0x20000000
 800545c:	20001fb8 	.word	0x20001fb8
 8005460:	20001fbc 	.word	0x20001fbc
 8005464:	40012c00 	.word	0x40012c00
 8005468:	20001fea 	.word	0x20001fea
 800546c:	20001fec 	.word	0x20001fec

08005470 <pid_diagonal>:


void pid_diagonal(){
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
	if(left_sensor45 < 200){
 8005474:	4b52      	ldr	r3, [pc, #328]	; (80055c0 <pid_diagonal+0x150>)
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	2bc7      	cmp	r3, #199	; 0xc7
 800547a:	d809      	bhi.n	8005490 <pid_diagonal+0x20>
		Err = (int32_t)200 - left_sensor45;
 800547c:	4b50      	ldr	r3, [pc, #320]	; (80055c0 <pid_diagonal+0x150>)
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8005484:	4a4f      	ldr	r2, [pc, #316]	; (80055c4 <pid_diagonal+0x154>)
 8005486:	6013      	str	r3, [r2, #0]
		useIRSensor = true;
 8005488:	4b4f      	ldr	r3, [pc, #316]	; (80055c8 <pid_diagonal+0x158>)
 800548a:	2201      	movs	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e045      	b.n	800551c <pid_diagonal+0xac>
	} else if(right_sensor45 < 200){
 8005490:	4b4e      	ldr	r3, [pc, #312]	; (80055cc <pid_diagonal+0x15c>)
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	2bc7      	cmp	r3, #199	; 0xc7
 8005496:	d808      	bhi.n	80054aa <pid_diagonal+0x3a>
		Err = (int32_t)right_sensor45 - 200;
 8005498:	4b4c      	ldr	r3, [pc, #304]	; (80055cc <pid_diagonal+0x15c>)
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	3bc8      	subs	r3, #200	; 0xc8
 800549e:	4a49      	ldr	r2, [pc, #292]	; (80055c4 <pid_diagonal+0x154>)
 80054a0:	6013      	str	r3, [r2, #0]
		useIRSensor = true;
 80054a2:	4b49      	ldr	r3, [pc, #292]	; (80055c8 <pid_diagonal+0x158>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e038      	b.n	800551c <pid_diagonal+0xac>
	} else {
		if(useIRSensor){
 80054aa:	4b47      	ldr	r3, [pc, #284]	; (80055c8 <pid_diagonal+0x158>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d006      	beq.n	80054c0 <pid_diagonal+0x50>
			ofs = temp_3;
 80054b2:	4b47      	ldr	r3, [pc, #284]	; (80055d0 <pid_diagonal+0x160>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a47      	ldr	r2, [pc, #284]	; (80055d4 <pid_diagonal+0x164>)
 80054b8:	6013      	str	r3, [r2, #0]
			old_Error = 0;
 80054ba:	4b47      	ldr	r3, [pc, #284]	; (80055d8 <pid_diagonal+0x168>)
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
		}
		temp_1 = TIM2->CNT;
 80054c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	461a      	mov	r2, r3
 80054c8:	4b44      	ldr	r3, [pc, #272]	; (80055dc <pid_diagonal+0x16c>)
 80054ca:	601a      	str	r2, [r3, #0]
		temp_2 = TIM3->CNT;
 80054cc:	4b44      	ldr	r3, [pc, #272]	; (80055e0 <pid_diagonal+0x170>)
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	461a      	mov	r2, r3
 80054d2:	4b44      	ldr	r3, [pc, #272]	; (80055e4 <pid_diagonal+0x174>)
 80054d4:	601a      	str	r2, [r3, #0]
		Err = temp_2 - (temp_1 + ofs);
 80054d6:	4b43      	ldr	r3, [pc, #268]	; (80055e4 <pid_diagonal+0x174>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b40      	ldr	r3, [pc, #256]	; (80055dc <pid_diagonal+0x16c>)
 80054dc:	6819      	ldr	r1, [r3, #0]
 80054de:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <pid_diagonal+0x164>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	440b      	add	r3, r1
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	4a37      	ldr	r2, [pc, #220]	; (80055c4 <pid_diagonal+0x154>)
 80054e8:	6013      	str	r3, [r2, #0]
		D = Err - old_Error;
 80054ea:	4b36      	ldr	r3, [pc, #216]	; (80055c4 <pid_diagonal+0x154>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b3a      	ldr	r3, [pc, #232]	; (80055d8 <pid_diagonal+0x168>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	4a3c      	ldr	r2, [pc, #240]	; (80055e8 <pid_diagonal+0x178>)
 80054f6:	6013      	str	r3, [r2, #0]
		old_Error = Err;
 80054f8:	4b32      	ldr	r3, [pc, #200]	; (80055c4 <pid_diagonal+0x154>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a36      	ldr	r2, [pc, #216]	; (80055d8 <pid_diagonal+0x168>)
 80054fe:	6013      	str	r3, [r2, #0]
		useIRSensor = false;
 8005500:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <pid_diagonal+0x158>)
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
		#if debug == 1
		a = TIM2->CNT;
 8005506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	461a      	mov	r2, r3
 800550e:	4b37      	ldr	r3, [pc, #220]	; (80055ec <pid_diagonal+0x17c>)
 8005510:	601a      	str	r2, [r3, #0]
		b = TIM3->CNT;
 8005512:	4b33      	ldr	r3, [pc, #204]	; (80055e0 <pid_diagonal+0x170>)
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	461a      	mov	r2, r3
 8005518:	4b35      	ldr	r3, [pc, #212]	; (80055f0 <pid_diagonal+0x180>)
 800551a:	601a      	str	r2, [r3, #0]
		#endif
	}
	if(useIRSensor){
 800551c:	4b2a      	ldr	r3, [pc, #168]	; (80055c8 <pid_diagonal+0x158>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d023      	beq.n	800556c <pid_diagonal+0xfc>
		P = round(1.5 * Err + D * 0);
 8005524:	4b27      	ldr	r3, [pc, #156]	; (80055c4 <pid_diagonal+0x154>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f7fb f817 	bl	800055c <__aeabi_i2d>
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	4b30      	ldr	r3, [pc, #192]	; (80055f4 <pid_diagonal+0x184>)
 8005534:	f7fb f87c 	bl	8000630 <__aeabi_dmul>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4610      	mov	r0, r2
 800553e:	4619      	mov	r1, r3
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	f7fa febc 	bl	80002c4 <__adddf3>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4610      	mov	r0, r2
 8005552:	4619      	mov	r1, r3
 8005554:	f008 fa6e 	bl	800da34 <round>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4610      	mov	r0, r2
 800555e:	4619      	mov	r1, r3
 8005560:	f7fb fb00 	bl	8000b64 <__aeabi_d2iz>
 8005564:	4603      	mov	r3, r0
 8005566:	4a24      	ldr	r2, [pc, #144]	; (80055f8 <pid_diagonal+0x188>)
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	e010      	b.n	800558e <pid_diagonal+0x11e>
	} else {
		P = round(3 * Err + D * 0);
 800556c:	4b15      	ldr	r3, [pc, #84]	; (80055c4 <pid_diagonal+0x154>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4613      	mov	r3, r2
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	4413      	add	r3, r2
 8005576:	4618      	mov	r0, r3
 8005578:	f7fa fff0 	bl	800055c <__aeabi_i2d>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4610      	mov	r0, r2
 8005582:	4619      	mov	r1, r3
 8005584:	f7fb faee 	bl	8000b64 <__aeabi_d2iz>
 8005588:	4603      	mov	r3, r0
 800558a:	4a1b      	ldr	r2, [pc, #108]	; (80055f8 <pid_diagonal+0x188>)
 800558c:	6013      	str	r3, [r2, #0]
	}
	TIM1->CCR3 = 0;
 800558e:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <pid_diagonal+0x18c>)
 8005590:	2200      	movs	r2, #0
 8005592:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = (uint16_t)speed0 + P;
 8005594:	4b1a      	ldr	r3, [pc, #104]	; (8005600 <pid_diagonal+0x190>)
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	461a      	mov	r2, r3
 800559a:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <pid_diagonal+0x188>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	441a      	add	r2, r3
 80055a0:	4b16      	ldr	r3, [pc, #88]	; (80055fc <pid_diagonal+0x18c>)
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->CCR1 = (uint16_t)speed1 - P;
 80055a4:	4b17      	ldr	r3, [pc, #92]	; (8005604 <pid_diagonal+0x194>)
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <pid_diagonal+0x188>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	1ad2      	subs	r2, r2, r3
 80055b0:	4b12      	ldr	r3, [pc, #72]	; (80055fc <pid_diagonal+0x18c>)
 80055b2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80055b4:	4b11      	ldr	r3, [pc, #68]	; (80055fc <pid_diagonal+0x18c>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80055ba:	bf00      	nop
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20001fdc 	.word	0x20001fdc
 80055c4:	20001fb8 	.word	0x20001fb8
 80055c8:	20001fd4 	.word	0x20001fd4
 80055cc:	20001fde 	.word	0x20001fde
 80055d0:	20001fd0 	.word	0x20001fd0
 80055d4:	20001fd8 	.word	0x20001fd8
 80055d8:	20001fc4 	.word	0x20001fc4
 80055dc:	20001fc8 	.word	0x20001fc8
 80055e0:	40000400 	.word	0x40000400
 80055e4:	20001fcc 	.word	0x20001fcc
 80055e8:	20001fc0 	.word	0x20001fc0
 80055ec:	200006f0 	.word	0x200006f0
 80055f0:	200006f4 	.word	0x200006f4
 80055f4:	3ff80000 	.word	0x3ff80000
 80055f8:	20001fbc 	.word	0x20001fbc
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	20001fea 	.word	0x20001fea
 8005604:	20001fec 	.word	0x20001fec

08005608 <brake>:

void brake(uint8_t mode){
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	71fb      	strb	r3, [r7, #7]
	if(mode == 0){
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <brake+0x26>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 8005618:	4b18      	ldr	r3, [pc, #96]	; (800567c <brake+0x74>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a17      	ldr	r2, [pc, #92]	; (800567c <brake+0x74>)
 800561e:	68d2      	ldr	r2, [r2, #12]
 8005620:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 8005622:	4b16      	ldr	r3, [pc, #88]	; (800567c <brake+0x74>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a15      	ldr	r2, [pc, #84]	; (800567c <brake+0x74>)
 8005628:	68d2      	ldr	r2, [r2, #12]
 800562a:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
	}

}
 800562c:	e021      	b.n	8005672 <brake+0x6a>
	} else if(mode == 1){
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d10a      	bne.n	800564a <brake+0x42>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 8005634:	4b11      	ldr	r3, [pc, #68]	; (800567c <brake+0x74>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a10      	ldr	r2, [pc, #64]	; (800567c <brake+0x74>)
 800563a:	68d2      	ldr	r2, [r2, #12]
 800563c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 800563e:	4b0f      	ldr	r3, [pc, #60]	; (800567c <brake+0x74>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a0e      	ldr	r2, [pc, #56]	; (800567c <brake+0x74>)
 8005644:	68d2      	ldr	r2, [r2, #12]
 8005646:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005648:	e013      	b.n	8005672 <brake+0x6a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 800564a:	4b0c      	ldr	r3, [pc, #48]	; (800567c <brake+0x74>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a0b      	ldr	r2, [pc, #44]	; (800567c <brake+0x74>)
 8005650:	68d2      	ldr	r2, [r2, #12]
 8005652:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 8005654:	4b09      	ldr	r3, [pc, #36]	; (800567c <brake+0x74>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a08      	ldr	r2, [pc, #32]	; (800567c <brake+0x74>)
 800565a:	68d2      	ldr	r2, [r2, #12]
 800565c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 800565e:	4b07      	ldr	r3, [pc, #28]	; (800567c <brake+0x74>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a06      	ldr	r2, [pc, #24]	; (800567c <brake+0x74>)
 8005664:	68d2      	ldr	r2, [r2, #12]
 8005666:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <brake+0x74>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a03      	ldr	r2, [pc, #12]	; (800567c <brake+0x74>)
 800566e:	68d2      	ldr	r2, [r2, #12]
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr
 800567c:	20000504 	.word	0x20000504

08005680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005680:	f7fe fe3e 	bl	8004300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005684:	480b      	ldr	r0, [pc, #44]	; (80056b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005686:	490c      	ldr	r1, [pc, #48]	; (80056b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005688:	4a0c      	ldr	r2, [pc, #48]	; (80056bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800568a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800568c:	e002      	b.n	8005694 <LoopCopyDataInit>

0800568e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800568e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005692:	3304      	adds	r3, #4

08005694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005698:	d3f9      	bcc.n	800568e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800569a:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800569c:	4c09      	ldr	r4, [pc, #36]	; (80056c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800569e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056a0:	e001      	b.n	80056a6 <LoopFillZerobss>

080056a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056a4:	3204      	adds	r2, #4

080056a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056a8:	d3fb      	bcc.n	80056a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80056aa:	f008 fa15 	bl	800dad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80056ae:	f7fd fe43 	bl	8003338 <main>
  bx lr
 80056b2:	4770      	bx	lr
  ldr r0, =_sdata
 80056b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056b8:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 80056bc:	0800ea1c 	.word	0x0800ea1c
  ldr r2, =_sbss
 80056c0:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 80056c4:	20002044 	.word	0x20002044

080056c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80056c8:	e7fe      	b.n	80056c8 <ADC1_2_IRQHandler>
	...

080056cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056d0:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <HAL_Init+0x28>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a07      	ldr	r2, [pc, #28]	; (80056f4 <HAL_Init+0x28>)
 80056d6:	f043 0310 	orr.w	r3, r3, #16
 80056da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056dc:	2003      	movs	r0, #3
 80056de:	f000 f96b 	bl	80059b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80056e2:	200f      	movs	r0, #15
 80056e4:	f000 f808 	bl	80056f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80056e8:	f7fe fb86 	bl	8003df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40022000 	.word	0x40022000

080056f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005700:	4b12      	ldr	r3, [pc, #72]	; (800574c <HAL_InitTick+0x54>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	4b12      	ldr	r3, [pc, #72]	; (8005750 <HAL_InitTick+0x58>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	4619      	mov	r1, r3
 800570a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800570e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005712:	fbb2 f3f3 	udiv	r3, r2, r3
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f991 	bl	8005a3e <HAL_SYSTICK_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e00e      	b.n	8005744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b0f      	cmp	r3, #15
 800572a:	d80a      	bhi.n	8005742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800572c:	2200      	movs	r2, #0
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	f04f 30ff 	mov.w	r0, #4294967295
 8005734:	f000 f94b 	bl	80059ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005738:	4a06      	ldr	r2, [pc, #24]	; (8005754 <HAL_InitTick+0x5c>)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e000      	b.n	8005744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20000030 	.word	0x20000030
 8005750:	20000038 	.word	0x20000038
 8005754:	20000034 	.word	0x20000034

08005758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800575c:	4b05      	ldr	r3, [pc, #20]	; (8005774 <HAL_IncTick+0x1c>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_IncTick+0x20>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4413      	add	r3, r2
 8005768:	4a03      	ldr	r2, [pc, #12]	; (8005778 <HAL_IncTick+0x20>)
 800576a:	6013      	str	r3, [r2, #0]
}
 800576c:	bf00      	nop
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr
 8005774:	20000038 	.word	0x20000038
 8005778:	20001ff0 	.word	0x20001ff0

0800577c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  return uwTick;
 8005780:	4b02      	ldr	r3, [pc, #8]	; (800578c <HAL_GetTick+0x10>)
 8005782:	681b      	ldr	r3, [r3, #0]
}
 8005784:	4618      	mov	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr
 800578c:	20001ff0 	.word	0x20001ff0

08005790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005798:	f7ff fff0 	bl	800577c <HAL_GetTick>
 800579c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d005      	beq.n	80057b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057aa:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <HAL_Delay+0x44>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80057b6:	bf00      	nop
 80057b8:	f7ff ffe0 	bl	800577c <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d8f7      	bhi.n	80057b8 <HAL_Delay+0x28>
  {
  }
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000038 	.word	0x20000038

080057d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057e8:	4b0c      	ldr	r3, [pc, #48]	; (800581c <__NVIC_SetPriorityGrouping+0x44>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057f4:	4013      	ands	r3, r2
 80057f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800580a:	4a04      	ldr	r2, [pc, #16]	; (800581c <__NVIC_SetPriorityGrouping+0x44>)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	60d3      	str	r3, [r2, #12]
}
 8005810:	bf00      	nop
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	e000ed00 	.word	0xe000ed00

08005820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005824:	4b04      	ldr	r3, [pc, #16]	; (8005838 <__NVIC_GetPriorityGrouping+0x18>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	0a1b      	lsrs	r3, r3, #8
 800582a:	f003 0307 	and.w	r3, r3, #7
}
 800582e:	4618      	mov	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	e000ed00 	.word	0xe000ed00

0800583c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800584a:	2b00      	cmp	r3, #0
 800584c:	db0b      	blt.n	8005866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	f003 021f 	and.w	r2, r3, #31
 8005854:	4906      	ldr	r1, [pc, #24]	; (8005870 <__NVIC_EnableIRQ+0x34>)
 8005856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	2001      	movs	r0, #1
 800585e:	fa00 f202 	lsl.w	r2, r0, r2
 8005862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	e000e100 	.word	0xe000e100

08005874 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800587e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005882:	2b00      	cmp	r3, #0
 8005884:	db12      	blt.n	80058ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	f003 021f 	and.w	r2, r3, #31
 800588c:	490a      	ldr	r1, [pc, #40]	; (80058b8 <__NVIC_DisableIRQ+0x44>)
 800588e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	2001      	movs	r0, #1
 8005896:	fa00 f202 	lsl.w	r2, r0, r2
 800589a:	3320      	adds	r3, #32
 800589c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80058a0:	f3bf 8f4f 	dsb	sy
}
 80058a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80058a6:	f3bf 8f6f 	isb	sy
}
 80058aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	e000e100 	.word	0xe000e100

080058bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	6039      	str	r1, [r7, #0]
 80058c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	db0a      	blt.n	80058e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	490c      	ldr	r1, [pc, #48]	; (8005908 <__NVIC_SetPriority+0x4c>)
 80058d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058da:	0112      	lsls	r2, r2, #4
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	440b      	add	r3, r1
 80058e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058e4:	e00a      	b.n	80058fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	4908      	ldr	r1, [pc, #32]	; (800590c <__NVIC_SetPriority+0x50>)
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	3b04      	subs	r3, #4
 80058f4:	0112      	lsls	r2, r2, #4
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	440b      	add	r3, r1
 80058fa:	761a      	strb	r2, [r3, #24]
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	e000e100 	.word	0xe000e100
 800590c:	e000ed00 	.word	0xe000ed00

08005910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005910:	b480      	push	{r7}
 8005912:	b089      	sub	sp, #36	; 0x24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f1c3 0307 	rsb	r3, r3, #7
 800592a:	2b04      	cmp	r3, #4
 800592c:	bf28      	it	cs
 800592e:	2304      	movcs	r3, #4
 8005930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	3304      	adds	r3, #4
 8005936:	2b06      	cmp	r3, #6
 8005938:	d902      	bls.n	8005940 <NVIC_EncodePriority+0x30>
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	3b03      	subs	r3, #3
 800593e:	e000      	b.n	8005942 <NVIC_EncodePriority+0x32>
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005944:	f04f 32ff 	mov.w	r2, #4294967295
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	43da      	mvns	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	401a      	ands	r2, r3
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005958:	f04f 31ff 	mov.w	r1, #4294967295
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	fa01 f303 	lsl.w	r3, r1, r3
 8005962:	43d9      	mvns	r1, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005968:	4313      	orrs	r3, r2
         );
}
 800596a:	4618      	mov	r0, r3
 800596c:	3724      	adds	r7, #36	; 0x24
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3b01      	subs	r3, #1
 8005980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005984:	d301      	bcc.n	800598a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005986:	2301      	movs	r3, #1
 8005988:	e00f      	b.n	80059aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800598a:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <SysTick_Config+0x40>)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3b01      	subs	r3, #1
 8005990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005992:	210f      	movs	r1, #15
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	f7ff ff90 	bl	80058bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <SysTick_Config+0x40>)
 800599e:	2200      	movs	r2, #0
 80059a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059a2:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <SysTick_Config+0x40>)
 80059a4:	2207      	movs	r2, #7
 80059a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	e000e010 	.word	0xe000e010

080059b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff ff09 	bl	80057d8 <__NVIC_SetPriorityGrouping>
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	4603      	mov	r3, r0
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059e0:	f7ff ff1e 	bl	8005820 <__NVIC_GetPriorityGrouping>
 80059e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	6978      	ldr	r0, [r7, #20]
 80059ec:	f7ff ff90 	bl	8005910 <NVIC_EncodePriority>
 80059f0:	4602      	mov	r2, r0
 80059f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f6:	4611      	mov	r1, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff ff5f 	bl	80058bc <__NVIC_SetPriority>
}
 80059fe:	bf00      	nop
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff ff11 	bl	800583c <__NVIC_EnableIRQ>
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	4603      	mov	r3, r0
 8005a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff ff1f 	bl	8005874 <__NVIC_DisableIRQ>
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff ff94 	bl	8005974 <SysTick_Config>
 8005a4c:	4603      	mov	r3, r0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b08b      	sub	sp, #44	; 0x2c
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a62:	2300      	movs	r3, #0
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005a66:	2300      	movs	r3, #0
 8005a68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a6a:	e169      	b.n	8005d40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	f040 8158 	bne.w	8005d3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	4a9a      	ldr	r2, [pc, #616]	; (8005cf8 <HAL_GPIO_Init+0x2a0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d05e      	beq.n	8005b52 <HAL_GPIO_Init+0xfa>
 8005a94:	4a98      	ldr	r2, [pc, #608]	; (8005cf8 <HAL_GPIO_Init+0x2a0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d875      	bhi.n	8005b86 <HAL_GPIO_Init+0x12e>
 8005a9a:	4a98      	ldr	r2, [pc, #608]	; (8005cfc <HAL_GPIO_Init+0x2a4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d058      	beq.n	8005b52 <HAL_GPIO_Init+0xfa>
 8005aa0:	4a96      	ldr	r2, [pc, #600]	; (8005cfc <HAL_GPIO_Init+0x2a4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d86f      	bhi.n	8005b86 <HAL_GPIO_Init+0x12e>
 8005aa6:	4a96      	ldr	r2, [pc, #600]	; (8005d00 <HAL_GPIO_Init+0x2a8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d052      	beq.n	8005b52 <HAL_GPIO_Init+0xfa>
 8005aac:	4a94      	ldr	r2, [pc, #592]	; (8005d00 <HAL_GPIO_Init+0x2a8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d869      	bhi.n	8005b86 <HAL_GPIO_Init+0x12e>
 8005ab2:	4a94      	ldr	r2, [pc, #592]	; (8005d04 <HAL_GPIO_Init+0x2ac>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d04c      	beq.n	8005b52 <HAL_GPIO_Init+0xfa>
 8005ab8:	4a92      	ldr	r2, [pc, #584]	; (8005d04 <HAL_GPIO_Init+0x2ac>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d863      	bhi.n	8005b86 <HAL_GPIO_Init+0x12e>
 8005abe:	4a92      	ldr	r2, [pc, #584]	; (8005d08 <HAL_GPIO_Init+0x2b0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d046      	beq.n	8005b52 <HAL_GPIO_Init+0xfa>
 8005ac4:	4a90      	ldr	r2, [pc, #576]	; (8005d08 <HAL_GPIO_Init+0x2b0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d85d      	bhi.n	8005b86 <HAL_GPIO_Init+0x12e>
 8005aca:	2b12      	cmp	r3, #18
 8005acc:	d82a      	bhi.n	8005b24 <HAL_GPIO_Init+0xcc>
 8005ace:	2b12      	cmp	r3, #18
 8005ad0:	d859      	bhi.n	8005b86 <HAL_GPIO_Init+0x12e>
 8005ad2:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <HAL_GPIO_Init+0x80>)
 8005ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad8:	08005b53 	.word	0x08005b53
 8005adc:	08005b2d 	.word	0x08005b2d
 8005ae0:	08005b3f 	.word	0x08005b3f
 8005ae4:	08005b81 	.word	0x08005b81
 8005ae8:	08005b87 	.word	0x08005b87
 8005aec:	08005b87 	.word	0x08005b87
 8005af0:	08005b87 	.word	0x08005b87
 8005af4:	08005b87 	.word	0x08005b87
 8005af8:	08005b87 	.word	0x08005b87
 8005afc:	08005b87 	.word	0x08005b87
 8005b00:	08005b87 	.word	0x08005b87
 8005b04:	08005b87 	.word	0x08005b87
 8005b08:	08005b87 	.word	0x08005b87
 8005b0c:	08005b87 	.word	0x08005b87
 8005b10:	08005b87 	.word	0x08005b87
 8005b14:	08005b87 	.word	0x08005b87
 8005b18:	08005b87 	.word	0x08005b87
 8005b1c:	08005b35 	.word	0x08005b35
 8005b20:	08005b49 	.word	0x08005b49
 8005b24:	4a79      	ldr	r2, [pc, #484]	; (8005d0c <HAL_GPIO_Init+0x2b4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005b2a:	e02c      	b.n	8005b86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	623b      	str	r3, [r7, #32]
          break;
 8005b32:	e029      	b.n	8005b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	623b      	str	r3, [r7, #32]
          break;
 8005b3c:	e024      	b.n	8005b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	3308      	adds	r3, #8
 8005b44:	623b      	str	r3, [r7, #32]
          break;
 8005b46:	e01f      	b.n	8005b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	623b      	str	r3, [r7, #32]
          break;
 8005b50:	e01a      	b.n	8005b88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d102      	bne.n	8005b60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005b5a:	2304      	movs	r3, #4
 8005b5c:	623b      	str	r3, [r7, #32]
          break;
 8005b5e:	e013      	b.n	8005b88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d105      	bne.n	8005b74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b68:	2308      	movs	r3, #8
 8005b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	611a      	str	r2, [r3, #16]
          break;
 8005b72:	e009      	b.n	8005b88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b74:	2308      	movs	r3, #8
 8005b76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	615a      	str	r2, [r3, #20]
          break;
 8005b7e:	e003      	b.n	8005b88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005b80:	2300      	movs	r3, #0
 8005b82:	623b      	str	r3, [r7, #32]
          break;
 8005b84:	e000      	b.n	8005b88 <HAL_GPIO_Init+0x130>
          break;
 8005b86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	2bff      	cmp	r3, #255	; 0xff
 8005b8c:	d801      	bhi.n	8005b92 <HAL_GPIO_Init+0x13a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	e001      	b.n	8005b96 <HAL_GPIO_Init+0x13e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3304      	adds	r3, #4
 8005b96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2bff      	cmp	r3, #255	; 0xff
 8005b9c:	d802      	bhi.n	8005ba4 <HAL_GPIO_Init+0x14c>
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	e002      	b.n	8005baa <HAL_GPIO_Init+0x152>
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	3b08      	subs	r3, #8
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	210f      	movs	r1, #15
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	401a      	ands	r2, r3
 8005bbc:	6a39      	ldr	r1, [r7, #32]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 80b1 	beq.w	8005d3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005bd8:	4b4d      	ldr	r3, [pc, #308]	; (8005d10 <HAL_GPIO_Init+0x2b8>)
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	4a4c      	ldr	r2, [pc, #304]	; (8005d10 <HAL_GPIO_Init+0x2b8>)
 8005bde:	f043 0301 	orr.w	r3, r3, #1
 8005be2:	6193      	str	r3, [r2, #24]
 8005be4:	4b4a      	ldr	r3, [pc, #296]	; (8005d10 <HAL_GPIO_Init+0x2b8>)
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005bf0:	4a48      	ldr	r2, [pc, #288]	; (8005d14 <HAL_GPIO_Init+0x2bc>)
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	089b      	lsrs	r3, r3, #2
 8005bf6:	3302      	adds	r3, #2
 8005bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	f003 0303 	and.w	r3, r3, #3
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	220f      	movs	r2, #15
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4013      	ands	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a40      	ldr	r2, [pc, #256]	; (8005d18 <HAL_GPIO_Init+0x2c0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d013      	beq.n	8005c44 <HAL_GPIO_Init+0x1ec>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a3f      	ldr	r2, [pc, #252]	; (8005d1c <HAL_GPIO_Init+0x2c4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00d      	beq.n	8005c40 <HAL_GPIO_Init+0x1e8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a3e      	ldr	r2, [pc, #248]	; (8005d20 <HAL_GPIO_Init+0x2c8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <HAL_GPIO_Init+0x1e4>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a3d      	ldr	r2, [pc, #244]	; (8005d24 <HAL_GPIO_Init+0x2cc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d101      	bne.n	8005c38 <HAL_GPIO_Init+0x1e0>
 8005c34:	2303      	movs	r3, #3
 8005c36:	e006      	b.n	8005c46 <HAL_GPIO_Init+0x1ee>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	e004      	b.n	8005c46 <HAL_GPIO_Init+0x1ee>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e002      	b.n	8005c46 <HAL_GPIO_Init+0x1ee>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <HAL_GPIO_Init+0x1ee>
 8005c44:	2300      	movs	r3, #0
 8005c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c48:	f002 0203 	and.w	r2, r2, #3
 8005c4c:	0092      	lsls	r2, r2, #2
 8005c4e:	4093      	lsls	r3, r2
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005c56:	492f      	ldr	r1, [pc, #188]	; (8005d14 <HAL_GPIO_Init+0x2bc>)
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	089b      	lsrs	r3, r3, #2
 8005c5c:	3302      	adds	r3, #2
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d006      	beq.n	8005c7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005c70:	4b2d      	ldr	r3, [pc, #180]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	492c      	ldr	r1, [pc, #176]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	608b      	str	r3, [r1, #8]
 8005c7c:	e006      	b.n	8005c8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005c7e:	4b2a      	ldr	r3, [pc, #168]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	43db      	mvns	r3, r3
 8005c86:	4928      	ldr	r1, [pc, #160]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d006      	beq.n	8005ca6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005c98:	4b23      	ldr	r3, [pc, #140]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	4922      	ldr	r1, [pc, #136]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60cb      	str	r3, [r1, #12]
 8005ca4:	e006      	b.n	8005cb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005ca6:	4b20      	ldr	r3, [pc, #128]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	43db      	mvns	r3, r3
 8005cae:	491e      	ldr	r1, [pc, #120]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d006      	beq.n	8005cce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005cc0:	4b19      	ldr	r3, [pc, #100]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	4918      	ldr	r1, [pc, #96]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	604b      	str	r3, [r1, #4]
 8005ccc:	e006      	b.n	8005cdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005cce:	4b16      	ldr	r3, [pc, #88]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	4914      	ldr	r1, [pc, #80]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d021      	beq.n	8005d2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	490e      	ldr	r1, [pc, #56]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	600b      	str	r3, [r1, #0]
 8005cf4:	e021      	b.n	8005d3a <HAL_GPIO_Init+0x2e2>
 8005cf6:	bf00      	nop
 8005cf8:	10320000 	.word	0x10320000
 8005cfc:	10310000 	.word	0x10310000
 8005d00:	10220000 	.word	0x10220000
 8005d04:	10210000 	.word	0x10210000
 8005d08:	10120000 	.word	0x10120000
 8005d0c:	10110000 	.word	0x10110000
 8005d10:	40021000 	.word	0x40021000
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40010800 	.word	0x40010800
 8005d1c:	40010c00 	.word	0x40010c00
 8005d20:	40011000 	.word	0x40011000
 8005d24:	40011400 	.word	0x40011400
 8005d28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	; (8005d5c <HAL_GPIO_Init+0x304>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	43db      	mvns	r3, r3
 8005d34:	4909      	ldr	r1, [pc, #36]	; (8005d5c <HAL_GPIO_Init+0x304>)
 8005d36:	4013      	ands	r3, r2
 8005d38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f47f ae8e 	bne.w	8005a6c <HAL_GPIO_Init+0x14>
  }
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	372c      	adds	r7, #44	; 0x2c
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr
 8005d5c:	40010400 	.word	0x40010400

08005d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	807b      	strh	r3, [r7, #2]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d70:	787b      	ldrb	r3, [r7, #1]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d76:	887a      	ldrh	r2, [r7, #2]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005d7c:	e003      	b.n	8005d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005d7e:	887b      	ldrh	r3, [r7, #2]
 8005d80:	041a      	lsls	r2, r3, #16
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	611a      	str	r2, [r3, #16]
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr

08005d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	4603      	mov	r3, r0
 8005d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005d9a:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d9c:	695a      	ldr	r2, [r3, #20]
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d006      	beq.n	8005db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005da6:	4a05      	ldr	r2, [pc, #20]	; (8005dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005da8:	88fb      	ldrh	r3, [r7, #6]
 8005daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005dac:	88fb      	ldrh	r3, [r7, #6]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f806 	bl	8005dc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005db4:	bf00      	nop
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40010400 	.word	0x40010400

08005dc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e12b      	b.n	800603e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fe f82e 	bl	8003e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2224      	movs	r2, #36	; 0x24
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0201 	bic.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e38:	f001 fbca 	bl	80075d0 <HAL_RCC_GetPCLK1Freq>
 8005e3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	4a81      	ldr	r2, [pc, #516]	; (8006048 <HAL_I2C_Init+0x274>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d807      	bhi.n	8005e58 <HAL_I2C_Init+0x84>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a80      	ldr	r2, [pc, #512]	; (800604c <HAL_I2C_Init+0x278>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	bf94      	ite	ls
 8005e50:	2301      	movls	r3, #1
 8005e52:	2300      	movhi	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	e006      	b.n	8005e66 <HAL_I2C_Init+0x92>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4a7d      	ldr	r2, [pc, #500]	; (8006050 <HAL_I2C_Init+0x27c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	bf94      	ite	ls
 8005e60:	2301      	movls	r3, #1
 8005e62:	2300      	movhi	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e0e7      	b.n	800603e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4a78      	ldr	r2, [pc, #480]	; (8006054 <HAL_I2C_Init+0x280>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	0c9b      	lsrs	r3, r3, #18
 8005e78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	4a6a      	ldr	r2, [pc, #424]	; (8006048 <HAL_I2C_Init+0x274>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d802      	bhi.n	8005ea8 <HAL_I2C_Init+0xd4>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	e009      	b.n	8005ebc <HAL_I2C_Init+0xe8>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
 8005eb2:	4a69      	ldr	r2, [pc, #420]	; (8006058 <HAL_I2C_Init+0x284>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	099b      	lsrs	r3, r3, #6
 8005eba:	3301      	adds	r3, #1
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ece:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	495c      	ldr	r1, [pc, #368]	; (8006048 <HAL_I2C_Init+0x274>)
 8005ed8:	428b      	cmp	r3, r1
 8005eda:	d819      	bhi.n	8005f10 <HAL_I2C_Init+0x13c>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	1e59      	subs	r1, r3, #1
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005eea:	1c59      	adds	r1, r3, #1
 8005eec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ef0:	400b      	ands	r3, r1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <HAL_I2C_Init+0x138>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	1e59      	subs	r1, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f04:	3301      	adds	r3, #1
 8005f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f0a:	e051      	b.n	8005fb0 <HAL_I2C_Init+0x1dc>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	e04f      	b.n	8005fb0 <HAL_I2C_Init+0x1dc>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d111      	bne.n	8005f3c <HAL_I2C_Init+0x168>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	1e58      	subs	r0, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6859      	ldr	r1, [r3, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	440b      	add	r3, r1
 8005f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bf0c      	ite	eq
 8005f34:	2301      	moveq	r3, #1
 8005f36:	2300      	movne	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	e012      	b.n	8005f62 <HAL_I2C_Init+0x18e>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	1e58      	subs	r0, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6859      	ldr	r1, [r3, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	440b      	add	r3, r1
 8005f4a:	0099      	lsls	r1, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f52:	3301      	adds	r3, #1
 8005f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	bf0c      	ite	eq
 8005f5c:	2301      	moveq	r3, #1
 8005f5e:	2300      	movne	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_I2C_Init+0x196>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e022      	b.n	8005fb0 <HAL_I2C_Init+0x1dc>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10e      	bne.n	8005f90 <HAL_I2C_Init+0x1bc>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	1e58      	subs	r0, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6859      	ldr	r1, [r3, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	440b      	add	r3, r1
 8005f80:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f84:	3301      	adds	r3, #1
 8005f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8e:	e00f      	b.n	8005fb0 <HAL_I2C_Init+0x1dc>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	1e58      	subs	r0, r3, #1
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6859      	ldr	r1, [r3, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	0099      	lsls	r1, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	6809      	ldr	r1, [r1, #0]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	69da      	ldr	r2, [r3, #28]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005fde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6911      	ldr	r1, [r2, #16]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	68d2      	ldr	r2, [r2, #12]
 8005fea:	4311      	orrs	r1, r2
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6812      	ldr	r2, [r2, #0]
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	000186a0 	.word	0x000186a0
 800604c:	001e847f 	.word	0x001e847f
 8006050:	003d08ff 	.word	0x003d08ff
 8006054:	431bde83 	.word	0x431bde83
 8006058:	10624dd3 	.word	0x10624dd3

0800605c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	607a      	str	r2, [r7, #4]
 8006066:	461a      	mov	r2, r3
 8006068:	460b      	mov	r3, r1
 800606a:	817b      	strh	r3, [r7, #10]
 800606c:	4613      	mov	r3, r2
 800606e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006070:	f7ff fb84 	bl	800577c <HAL_GetTick>
 8006074:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b20      	cmp	r3, #32
 8006080:	f040 80e0 	bne.w	8006244 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	2319      	movs	r3, #25
 800608a:	2201      	movs	r2, #1
 800608c:	4970      	ldr	r1, [pc, #448]	; (8006250 <HAL_I2C_Master_Transmit+0x1f4>)
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 fc9e 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800609a:	2302      	movs	r3, #2
 800609c:	e0d3      	b.n	8006246 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_I2C_Master_Transmit+0x50>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e0cc      	b.n	8006246 <HAL_I2C_Master_Transmit+0x1ea>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d007      	beq.n	80060d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0201 	orr.w	r2, r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2221      	movs	r2, #33	; 0x21
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2210      	movs	r2, #16
 80060ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	893a      	ldrh	r2, [r7, #8]
 8006102:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4a50      	ldr	r2, [pc, #320]	; (8006254 <HAL_I2C_Master_Transmit+0x1f8>)
 8006112:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006114:	8979      	ldrh	r1, [r7, #10]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	6a3a      	ldr	r2, [r7, #32]
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 fb08 	bl	8006730 <I2C_MasterRequestWrite>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e08d      	b.n	8006246 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612a:	2300      	movs	r3, #0
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	613b      	str	r3, [r7, #16]
 800613e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006140:	e066      	b.n	8006210 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	6a39      	ldr	r1, [r7, #32]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fd5c 	bl	8006c04 <I2C_WaitOnTXEFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00d      	beq.n	800616e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	2b04      	cmp	r3, #4
 8006158:	d107      	bne.n	800616a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006168:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e06b      	b.n	8006246 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	781a      	ldrb	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d11b      	bne.n	80061e4 <HAL_I2C_Master_Transmit+0x188>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d017      	beq.n	80061e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	781a      	ldrb	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	6a39      	ldr	r1, [r7, #32]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fd53 	bl	8006c94 <I2C_WaitOnBTFFlagUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00d      	beq.n	8006210 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d107      	bne.n	800620c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800620a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e01a      	b.n	8006246 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006214:	2b00      	cmp	r3, #0
 8006216:	d194      	bne.n	8006142 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	e000      	b.n	8006246 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006244:	2302      	movs	r3, #2
  }
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	00100002 	.word	0x00100002
 8006254:	ffff0000 	.word	0xffff0000

08006258 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08c      	sub	sp, #48	; 0x30
 800625c:	af02      	add	r7, sp, #8
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	607a      	str	r2, [r7, #4]
 8006262:	461a      	mov	r2, r3
 8006264:	460b      	mov	r3, r1
 8006266:	817b      	strh	r3, [r7, #10]
 8006268:	4613      	mov	r3, r2
 800626a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006270:	f7ff fa84 	bl	800577c <HAL_GetTick>
 8006274:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b20      	cmp	r3, #32
 8006280:	f040 824b 	bne.w	800671a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	2319      	movs	r3, #25
 800628a:	2201      	movs	r2, #1
 800628c:	497f      	ldr	r1, [pc, #508]	; (800648c <HAL_I2C_Master_Receive+0x234>)
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fb9e 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800629a:	2302      	movs	r3, #2
 800629c:	e23e      	b.n	800671c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_I2C_Master_Receive+0x54>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e237      	b.n	800671c <HAL_I2C_Master_Receive+0x4c4>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d007      	beq.n	80062d2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0201 	orr.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2222      	movs	r2, #34	; 0x22
 80062e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2210      	movs	r2, #16
 80062ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	893a      	ldrh	r2, [r7, #8]
 8006302:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006308:	b29a      	uxth	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4a5f      	ldr	r2, [pc, #380]	; (8006490 <HAL_I2C_Master_Receive+0x238>)
 8006312:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006314:	8979      	ldrh	r1, [r7, #10]
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 fa8a 	bl	8006834 <I2C_MasterRequestRead>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e1f8      	b.n	800671c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632e:	2b00      	cmp	r3, #0
 8006330:	d113      	bne.n	800635a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	61fb      	str	r3, [r7, #28]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	61fb      	str	r3, [r7, #28]
 8006346:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	e1cc      	b.n	80066f4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800635e:	2b01      	cmp	r3, #1
 8006360:	d11e      	bne.n	80063a0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006370:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006372:	b672      	cpsid	i
}
 8006374:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006376:	2300      	movs	r3, #0
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800639a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800639c:	b662      	cpsie	i
}
 800639e:	e035      	b.n	800640c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d11e      	bne.n	80063e6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063b8:	b672      	cpsid	i
}
 80063ba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80063e2:	b662      	cpsie	i
}
 80063e4:	e012      	b.n	800640c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063f6:	2300      	movs	r3, #0
 80063f8:	613b      	str	r3, [r7, #16]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	613b      	str	r3, [r7, #16]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	613b      	str	r3, [r7, #16]
 800640a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800640c:	e172      	b.n	80066f4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006412:	2b03      	cmp	r3, #3
 8006414:	f200 811f 	bhi.w	8006656 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641c:	2b01      	cmp	r3, #1
 800641e:	d123      	bne.n	8006468 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006422:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fc7d 	bl	8006d24 <I2C_WaitOnRXNEFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e173      	b.n	800671c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006450:	3b01      	subs	r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006466:	e145      	b.n	80066f4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646c:	2b02      	cmp	r3, #2
 800646e:	d152      	bne.n	8006516 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	2200      	movs	r2, #0
 8006478:	4906      	ldr	r1, [pc, #24]	; (8006494 <HAL_I2C_Master_Receive+0x23c>)
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 faa8 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d008      	beq.n	8006498 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e148      	b.n	800671c <HAL_I2C_Master_Receive+0x4c4>
 800648a:	bf00      	nop
 800648c:	00100002 	.word	0x00100002
 8006490:	ffff0000 	.word	0xffff0000
 8006494:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006498:	b672      	cpsid	i
}
 800649a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691a      	ldr	r2, [r3, #16]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80064de:	b662      	cpsie	i
}
 80064e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006514:	e0ee      	b.n	80066f4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	2200      	movs	r2, #0
 800651e:	4981      	ldr	r1, [pc, #516]	; (8006724 <HAL_I2C_Master_Receive+0x4cc>)
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fa55 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e0f5      	b.n	800671c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006540:	b672      	cpsid	i
}
 8006542:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691a      	ldr	r2, [r3, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006576:	4b6c      	ldr	r3, [pc, #432]	; (8006728 <HAL_I2C_Master_Receive+0x4d0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	08db      	lsrs	r3, r3, #3
 800657c:	4a6b      	ldr	r2, [pc, #428]	; (800672c <HAL_I2C_Master_Receive+0x4d4>)
 800657e:	fba2 2303 	umull	r2, r3, r2, r3
 8006582:	0a1a      	lsrs	r2, r3, #8
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	00da      	lsls	r2, r3, #3
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	3b01      	subs	r3, #1
 8006594:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d118      	bne.n	80065ce <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	f043 0220 	orr.w	r2, r3, #32
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80065be:	b662      	cpsie	i
}
 80065c0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e0a6      	b.n	800671c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d1d9      	bne.n	8006590 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691a      	ldr	r2, [r3, #16]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006608:	3b01      	subs	r3, #1
 800660a:	b29a      	uxth	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800661e:	b662      	cpsie	i
}
 8006620:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	b2d2      	uxtb	r2, r2
 800662e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006654:	e04e      	b.n	80066f4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006658:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 fb62 	bl	8006d24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e058      	b.n	800671c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	b2d2      	uxtb	r2, r2
 8006676:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006686:	3b01      	subs	r3, #1
 8006688:	b29a      	uxth	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d124      	bne.n	80066f4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d107      	bne.n	80066c2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f47f ae88 	bne.w	800640e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	e000      	b.n	800671c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800671a:	2302      	movs	r3, #2
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3728      	adds	r7, #40	; 0x28
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	00010004 	.word	0x00010004
 8006728:	20000030 	.word	0x20000030
 800672c:	14f8b589 	.word	0x14f8b589

08006730 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af02      	add	r7, sp, #8
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	607a      	str	r2, [r7, #4]
 800673a:	603b      	str	r3, [r7, #0]
 800673c:	460b      	mov	r3, r1
 800673e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2b08      	cmp	r3, #8
 800674a:	d006      	beq.n	800675a <I2C_MasterRequestWrite+0x2a>
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d003      	beq.n	800675a <I2C_MasterRequestWrite+0x2a>
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006758:	d108      	bne.n	800676c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006768:	601a      	str	r2, [r3, #0]
 800676a:	e00b      	b.n	8006784 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	2b12      	cmp	r3, #18
 8006772:	d107      	bne.n	8006784 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006782:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 f91d 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00d      	beq.n	80067b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067aa:	d103      	bne.n	80067b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e035      	b.n	8006824 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067c0:	d108      	bne.n	80067d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067c2:	897b      	ldrh	r3, [r7, #10]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	461a      	mov	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067d0:	611a      	str	r2, [r3, #16]
 80067d2:	e01b      	b.n	800680c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80067d4:	897b      	ldrh	r3, [r7, #10]
 80067d6:	11db      	asrs	r3, r3, #7
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	f003 0306 	and.w	r3, r3, #6
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	f063 030f 	orn	r3, r3, #15
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	490e      	ldr	r1, [pc, #56]	; (800682c <I2C_MasterRequestWrite+0xfc>)
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 f966 	bl	8006ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e010      	b.n	8006824 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006802:	897b      	ldrh	r3, [r7, #10]
 8006804:	b2da      	uxtb	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	4907      	ldr	r1, [pc, #28]	; (8006830 <I2C_MasterRequestWrite+0x100>)
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 f956 	bl	8006ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e000      	b.n	8006824 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	00010008 	.word	0x00010008
 8006830:	00010002 	.word	0x00010002

08006834 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af02      	add	r7, sp, #8
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	607a      	str	r2, [r7, #4]
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	460b      	mov	r3, r1
 8006842:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006858:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b08      	cmp	r3, #8
 800685e:	d006      	beq.n	800686e <I2C_MasterRequestRead+0x3a>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d003      	beq.n	800686e <I2C_MasterRequestRead+0x3a>
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800686c:	d108      	bne.n	8006880 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	e00b      	b.n	8006898 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006884:	2b11      	cmp	r3, #17
 8006886:	d107      	bne.n	8006898 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006896:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 f893 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00d      	beq.n	80068cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068be:	d103      	bne.n	80068c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e079      	b.n	80069c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068d4:	d108      	bne.n	80068e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068d6:	897b      	ldrh	r3, [r7, #10]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	611a      	str	r2, [r3, #16]
 80068e6:	e05f      	b.n	80069a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80068e8:	897b      	ldrh	r3, [r7, #10]
 80068ea:	11db      	asrs	r3, r3, #7
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	f003 0306 	and.w	r3, r3, #6
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f063 030f 	orn	r3, r3, #15
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	4930      	ldr	r1, [pc, #192]	; (80069c8 <I2C_MasterRequestRead+0x194>)
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f8dc 	bl	8006ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e054      	b.n	80069c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006916:	897b      	ldrh	r3, [r7, #10]
 8006918:	b2da      	uxtb	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	4929      	ldr	r1, [pc, #164]	; (80069cc <I2C_MasterRequestRead+0x198>)
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 f8cc 	bl	8006ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e044      	b.n	80069c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006936:	2300      	movs	r3, #0
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	613b      	str	r3, [r7, #16]
 800694a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800695a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 f831 	bl	80069d0 <I2C_WaitOnFlagUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00d      	beq.n	8006990 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006982:	d103      	bne.n	800698c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800698a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e017      	b.n	80069c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006990:	897b      	ldrh	r3, [r7, #10]
 8006992:	11db      	asrs	r3, r3, #7
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f003 0306 	and.w	r3, r3, #6
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f063 030e 	orn	r3, r3, #14
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	4907      	ldr	r1, [pc, #28]	; (80069cc <I2C_MasterRequestRead+0x198>)
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 f888 	bl	8006ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	00010008 	.word	0x00010008
 80069cc:	00010002 	.word	0x00010002

080069d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	4613      	mov	r3, r2
 80069de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069e0:	e048      	b.n	8006a74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e8:	d044      	beq.n	8006a74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ea:	f7fe fec7 	bl	800577c <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d302      	bcc.n	8006a00 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d139      	bne.n	8006a74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	0c1b      	lsrs	r3, r3, #16
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d10d      	bne.n	8006a26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	43da      	mvns	r2, r3
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	4013      	ands	r3, r2
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	bf0c      	ite	eq
 8006a1c:	2301      	moveq	r3, #1
 8006a1e:	2300      	movne	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	e00c      	b.n	8006a40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	43da      	mvns	r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	4013      	ands	r3, r2
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	bf0c      	ite	eq
 8006a38:	2301      	moveq	r3, #1
 8006a3a:	2300      	movne	r3, #0
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	461a      	mov	r2, r3
 8006a40:	79fb      	ldrb	r3, [r7, #7]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d116      	bne.n	8006a74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	f043 0220 	orr.w	r2, r3, #32
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e023      	b.n	8006abc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	0c1b      	lsrs	r3, r3, #16
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d10d      	bne.n	8006a9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	43da      	mvns	r2, r3
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	bf0c      	ite	eq
 8006a90:	2301      	moveq	r3, #1
 8006a92:	2300      	movne	r3, #0
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	461a      	mov	r2, r3
 8006a98:	e00c      	b.n	8006ab4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	43da      	mvns	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bf0c      	ite	eq
 8006aac:	2301      	moveq	r3, #1
 8006aae:	2300      	movne	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d093      	beq.n	80069e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ad2:	e071      	b.n	8006bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae2:	d123      	bne.n	8006b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006af2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006afc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	f043 0204 	orr.w	r2, r3, #4
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e067      	b.n	8006bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b32:	d041      	beq.n	8006bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b34:	f7fe fe22 	bl	800577c <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d302      	bcc.n	8006b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d136      	bne.n	8006bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	0c1b      	lsrs	r3, r3, #16
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d10c      	bne.n	8006b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	43da      	mvns	r2, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	bf14      	ite	ne
 8006b66:	2301      	movne	r3, #1
 8006b68:	2300      	moveq	r3, #0
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	e00b      	b.n	8006b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	43da      	mvns	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bf14      	ite	ne
 8006b80:	2301      	movne	r3, #1
 8006b82:	2300      	moveq	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d016      	beq.n	8006bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba4:	f043 0220 	orr.w	r2, r3, #32
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e021      	b.n	8006bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	0c1b      	lsrs	r3, r3, #16
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d10c      	bne.n	8006bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	43da      	mvns	r2, r3
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	bf14      	ite	ne
 8006bd4:	2301      	movne	r3, #1
 8006bd6:	2300      	moveq	r3, #0
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	e00b      	b.n	8006bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	43da      	mvns	r2, r3
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4013      	ands	r3, r2
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	bf14      	ite	ne
 8006bee:	2301      	movne	r3, #1
 8006bf0:	2300      	moveq	r3, #0
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f47f af6d 	bne.w	8006ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c10:	e034      	b.n	8006c7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f8e3 	bl	8006dde <I2C_IsAcknowledgeFailed>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e034      	b.n	8006c8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c28:	d028      	beq.n	8006c7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c2a:	f7fe fda7 	bl	800577c <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d302      	bcc.n	8006c40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d11d      	bne.n	8006c7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4a:	2b80      	cmp	r3, #128	; 0x80
 8006c4c:	d016      	beq.n	8006c7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c68:	f043 0220 	orr.w	r2, r3, #32
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e007      	b.n	8006c8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c86:	2b80      	cmp	r3, #128	; 0x80
 8006c88:	d1c3      	bne.n	8006c12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ca0:	e034      	b.n	8006d0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 f89b 	bl	8006dde <I2C_IsAcknowledgeFailed>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e034      	b.n	8006d1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb8:	d028      	beq.n	8006d0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cba:	f7fe fd5f 	bl	800577c <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d302      	bcc.n	8006cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d11d      	bne.n	8006d0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d016      	beq.n	8006d0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	f043 0220 	orr.w	r2, r3, #32
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e007      	b.n	8006d1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d1c3      	bne.n	8006ca2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d30:	e049      	b.n	8006dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b10      	cmp	r3, #16
 8006d3e:	d119      	bne.n	8006d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0210 	mvn.w	r2, #16
 8006d48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e030      	b.n	8006dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d74:	f7fe fd02 	bl	800577c <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d302      	bcc.n	8006d8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d11d      	bne.n	8006dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d94:	2b40      	cmp	r3, #64	; 0x40
 8006d96:	d016      	beq.n	8006dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	f043 0220 	orr.w	r2, r3, #32
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e007      	b.n	8006dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd0:	2b40      	cmp	r3, #64	; 0x40
 8006dd2:	d1ae      	bne.n	8006d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df4:	d11b      	bne.n	8006e2e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dfe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	f043 0204 	orr.w	r2, r3, #4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr
	...

08006e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e272      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 8087 	beq.w	8006f6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e5c:	4b92      	ldr	r3, [pc, #584]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	f003 030c 	and.w	r3, r3, #12
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d00c      	beq.n	8006e82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e68:	4b8f      	ldr	r3, [pc, #572]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f003 030c 	and.w	r3, r3, #12
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d112      	bne.n	8006e9a <HAL_RCC_OscConfig+0x5e>
 8006e74:	4b8c      	ldr	r3, [pc, #560]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e80:	d10b      	bne.n	8006e9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e82:	4b89      	ldr	r3, [pc, #548]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d06c      	beq.n	8006f68 <HAL_RCC_OscConfig+0x12c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d168      	bne.n	8006f68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e24c      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea2:	d106      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x76>
 8006ea4:	4b80      	ldr	r3, [pc, #512]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a7f      	ldr	r2, [pc, #508]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	e02e      	b.n	8006f10 <HAL_RCC_OscConfig+0xd4>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10c      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x98>
 8006eba:	4b7b      	ldr	r3, [pc, #492]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a7a      	ldr	r2, [pc, #488]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	4b78      	ldr	r3, [pc, #480]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a77      	ldr	r2, [pc, #476]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	e01d      	b.n	8006f10 <HAL_RCC_OscConfig+0xd4>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006edc:	d10c      	bne.n	8006ef8 <HAL_RCC_OscConfig+0xbc>
 8006ede:	4b72      	ldr	r3, [pc, #456]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a71      	ldr	r2, [pc, #452]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	4b6f      	ldr	r3, [pc, #444]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a6e      	ldr	r2, [pc, #440]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	e00b      	b.n	8006f10 <HAL_RCC_OscConfig+0xd4>
 8006ef8:	4b6b      	ldr	r3, [pc, #428]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a6a      	ldr	r2, [pc, #424]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	4b68      	ldr	r3, [pc, #416]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a67      	ldr	r2, [pc, #412]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d013      	beq.n	8006f40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f18:	f7fe fc30 	bl	800577c <HAL_GetTick>
 8006f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f20:	f7fe fc2c 	bl	800577c <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b64      	cmp	r3, #100	; 0x64
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e200      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f32:	4b5d      	ldr	r3, [pc, #372]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d0f0      	beq.n	8006f20 <HAL_RCC_OscConfig+0xe4>
 8006f3e:	e014      	b.n	8006f6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f40:	f7fe fc1c 	bl	800577c <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f48:	f7fe fc18 	bl	800577c <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b64      	cmp	r3, #100	; 0x64
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e1ec      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f5a:	4b53      	ldr	r3, [pc, #332]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1f0      	bne.n	8006f48 <HAL_RCC_OscConfig+0x10c>
 8006f66:	e000      	b.n	8006f6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d063      	beq.n	800703e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f76:	4b4c      	ldr	r3, [pc, #304]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f003 030c 	and.w	r3, r3, #12
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006f82:	4b49      	ldr	r3, [pc, #292]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f003 030c 	and.w	r3, r3, #12
 8006f8a:	2b08      	cmp	r3, #8
 8006f8c:	d11c      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x18c>
 8006f8e:	4b46      	ldr	r3, [pc, #280]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d116      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f9a:	4b43      	ldr	r3, [pc, #268]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d005      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x176>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d001      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e1c0      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fb2:	4b3d      	ldr	r3, [pc, #244]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	4939      	ldr	r1, [pc, #228]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fc6:	e03a      	b.n	800703e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d020      	beq.n	8007012 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fd0:	4b36      	ldr	r3, [pc, #216]	; (80070ac <HAL_RCC_OscConfig+0x270>)
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd6:	f7fe fbd1 	bl	800577c <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fde:	f7fe fbcd 	bl	800577c <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e1a1      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff0:	4b2d      	ldr	r3, [pc, #180]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0f0      	beq.n	8006fde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ffc:	4b2a      	ldr	r3, [pc, #168]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	4927      	ldr	r1, [pc, #156]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 800700c:	4313      	orrs	r3, r2
 800700e:	600b      	str	r3, [r1, #0]
 8007010:	e015      	b.n	800703e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007012:	4b26      	ldr	r3, [pc, #152]	; (80070ac <HAL_RCC_OscConfig+0x270>)
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007018:	f7fe fbb0 	bl	800577c <HAL_GetTick>
 800701c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800701e:	e008      	b.n	8007032 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007020:	f7fe fbac 	bl	800577c <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e180      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007032:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1f0      	bne.n	8007020 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d03a      	beq.n	80070c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d019      	beq.n	8007086 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007052:	4b17      	ldr	r3, [pc, #92]	; (80070b0 <HAL_RCC_OscConfig+0x274>)
 8007054:	2201      	movs	r2, #1
 8007056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007058:	f7fe fb90 	bl	800577c <HAL_GetTick>
 800705c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007060:	f7fe fb8c 	bl	800577c <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e160      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007072:	4b0d      	ldr	r3, [pc, #52]	; (80070a8 <HAL_RCC_OscConfig+0x26c>)
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0f0      	beq.n	8007060 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800707e:	2001      	movs	r0, #1
 8007080:	f000 face 	bl	8007620 <RCC_Delay>
 8007084:	e01c      	b.n	80070c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007086:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <HAL_RCC_OscConfig+0x274>)
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800708c:	f7fe fb76 	bl	800577c <HAL_GetTick>
 8007090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007092:	e00f      	b.n	80070b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007094:	f7fe fb72 	bl	800577c <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d908      	bls.n	80070b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e146      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
 80070a6:	bf00      	nop
 80070a8:	40021000 	.word	0x40021000
 80070ac:	42420000 	.word	0x42420000
 80070b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070b4:	4b92      	ldr	r3, [pc, #584]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e9      	bne.n	8007094 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 80a6 	beq.w	800721a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070ce:	2300      	movs	r3, #0
 80070d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070d2:	4b8b      	ldr	r3, [pc, #556]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10d      	bne.n	80070fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070de:	4b88      	ldr	r3, [pc, #544]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	4a87      	ldr	r2, [pc, #540]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80070e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070e8:	61d3      	str	r3, [r2, #28]
 80070ea:	4b85      	ldr	r3, [pc, #532]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070f2:	60bb      	str	r3, [r7, #8]
 80070f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070f6:	2301      	movs	r3, #1
 80070f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070fa:	4b82      	ldr	r3, [pc, #520]	; (8007304 <HAL_RCC_OscConfig+0x4c8>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007102:	2b00      	cmp	r3, #0
 8007104:	d118      	bne.n	8007138 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007106:	4b7f      	ldr	r3, [pc, #508]	; (8007304 <HAL_RCC_OscConfig+0x4c8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a7e      	ldr	r2, [pc, #504]	; (8007304 <HAL_RCC_OscConfig+0x4c8>)
 800710c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007112:	f7fe fb33 	bl	800577c <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800711a:	f7fe fb2f 	bl	800577c <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b64      	cmp	r3, #100	; 0x64
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e103      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800712c:	4b75      	ldr	r3, [pc, #468]	; (8007304 <HAL_RCC_OscConfig+0x4c8>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0f0      	beq.n	800711a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d106      	bne.n	800714e <HAL_RCC_OscConfig+0x312>
 8007140:	4b6f      	ldr	r3, [pc, #444]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	4a6e      	ldr	r2, [pc, #440]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	6213      	str	r3, [r2, #32]
 800714c:	e02d      	b.n	80071aa <HAL_RCC_OscConfig+0x36e>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10c      	bne.n	8007170 <HAL_RCC_OscConfig+0x334>
 8007156:	4b6a      	ldr	r3, [pc, #424]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	4a69      	ldr	r2, [pc, #420]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 800715c:	f023 0301 	bic.w	r3, r3, #1
 8007160:	6213      	str	r3, [r2, #32]
 8007162:	4b67      	ldr	r3, [pc, #412]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	4a66      	ldr	r2, [pc, #408]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007168:	f023 0304 	bic.w	r3, r3, #4
 800716c:	6213      	str	r3, [r2, #32]
 800716e:	e01c      	b.n	80071aa <HAL_RCC_OscConfig+0x36e>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	2b05      	cmp	r3, #5
 8007176:	d10c      	bne.n	8007192 <HAL_RCC_OscConfig+0x356>
 8007178:	4b61      	ldr	r3, [pc, #388]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	4a60      	ldr	r2, [pc, #384]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 800717e:	f043 0304 	orr.w	r3, r3, #4
 8007182:	6213      	str	r3, [r2, #32]
 8007184:	4b5e      	ldr	r3, [pc, #376]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	4a5d      	ldr	r2, [pc, #372]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 800718a:	f043 0301 	orr.w	r3, r3, #1
 800718e:	6213      	str	r3, [r2, #32]
 8007190:	e00b      	b.n	80071aa <HAL_RCC_OscConfig+0x36e>
 8007192:	4b5b      	ldr	r3, [pc, #364]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	4a5a      	ldr	r2, [pc, #360]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007198:	f023 0301 	bic.w	r3, r3, #1
 800719c:	6213      	str	r3, [r2, #32]
 800719e:	4b58      	ldr	r3, [pc, #352]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	4a57      	ldr	r2, [pc, #348]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80071a4:	f023 0304 	bic.w	r3, r3, #4
 80071a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d015      	beq.n	80071de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071b2:	f7fe fae3 	bl	800577c <HAL_GetTick>
 80071b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071b8:	e00a      	b.n	80071d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ba:	f7fe fadf 	bl	800577c <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e0b1      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d0:	4b4b      	ldr	r3, [pc, #300]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0ee      	beq.n	80071ba <HAL_RCC_OscConfig+0x37e>
 80071dc:	e014      	b.n	8007208 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071de:	f7fe facd 	bl	800577c <HAL_GetTick>
 80071e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071e4:	e00a      	b.n	80071fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071e6:	f7fe fac9 	bl	800577c <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d901      	bls.n	80071fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e09b      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071fc:	4b40      	ldr	r3, [pc, #256]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1ee      	bne.n	80071e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d105      	bne.n	800721a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800720e:	4b3c      	ldr	r3, [pc, #240]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	4a3b      	ldr	r2, [pc, #236]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007218:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8087 	beq.w	8007332 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007224:	4b36      	ldr	r3, [pc, #216]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f003 030c 	and.w	r3, r3, #12
 800722c:	2b08      	cmp	r3, #8
 800722e:	d061      	beq.n	80072f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	2b02      	cmp	r3, #2
 8007236:	d146      	bne.n	80072c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007238:	4b33      	ldr	r3, [pc, #204]	; (8007308 <HAL_RCC_OscConfig+0x4cc>)
 800723a:	2200      	movs	r2, #0
 800723c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800723e:	f7fe fa9d 	bl	800577c <HAL_GetTick>
 8007242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007244:	e008      	b.n	8007258 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007246:	f7fe fa99 	bl	800577c <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	d901      	bls.n	8007258 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e06d      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007258:	4b29      	ldr	r3, [pc, #164]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1f0      	bne.n	8007246 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800726c:	d108      	bne.n	8007280 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800726e:	4b24      	ldr	r3, [pc, #144]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	4921      	ldr	r1, [pc, #132]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 800727c:	4313      	orrs	r3, r2
 800727e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007280:	4b1f      	ldr	r3, [pc, #124]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a19      	ldr	r1, [r3, #32]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	430b      	orrs	r3, r1
 8007292:	491b      	ldr	r1, [pc, #108]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 8007294:	4313      	orrs	r3, r2
 8007296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007298:	4b1b      	ldr	r3, [pc, #108]	; (8007308 <HAL_RCC_OscConfig+0x4cc>)
 800729a:	2201      	movs	r2, #1
 800729c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800729e:	f7fe fa6d 	bl	800577c <HAL_GetTick>
 80072a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072a4:	e008      	b.n	80072b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072a6:	f7fe fa69 	bl	800577c <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e03d      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072b8:	4b11      	ldr	r3, [pc, #68]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0f0      	beq.n	80072a6 <HAL_RCC_OscConfig+0x46a>
 80072c4:	e035      	b.n	8007332 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <HAL_RCC_OscConfig+0x4cc>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072cc:	f7fe fa56 	bl	800577c <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d4:	f7fe fa52 	bl	800577c <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e026      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072e6:	4b06      	ldr	r3, [pc, #24]	; (8007300 <HAL_RCC_OscConfig+0x4c4>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f0      	bne.n	80072d4 <HAL_RCC_OscConfig+0x498>
 80072f2:	e01e      	b.n	8007332 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d107      	bne.n	800730c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e019      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
 8007300:	40021000 	.word	0x40021000
 8007304:	40007000 	.word	0x40007000
 8007308:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800730c:	4b0b      	ldr	r3, [pc, #44]	; (800733c <HAL_RCC_OscConfig+0x500>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	429a      	cmp	r2, r3
 800731e:	d106      	bne.n	800732e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800732a:	429a      	cmp	r2, r3
 800732c:	d001      	beq.n	8007332 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e000      	b.n	8007334 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	40021000 	.word	0x40021000

08007340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e0d0      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007354:	4b6a      	ldr	r3, [pc, #424]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d910      	bls.n	8007384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007362:	4b67      	ldr	r3, [pc, #412]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f023 0207 	bic.w	r2, r3, #7
 800736a:	4965      	ldr	r1, [pc, #404]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	4313      	orrs	r3, r2
 8007370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007372:	4b63      	ldr	r3, [pc, #396]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d001      	beq.n	8007384 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e0b8      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d020      	beq.n	80073d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0304 	and.w	r3, r3, #4
 8007398:	2b00      	cmp	r3, #0
 800739a:	d005      	beq.n	80073a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800739c:	4b59      	ldr	r3, [pc, #356]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	4a58      	ldr	r2, [pc, #352]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80073a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80073a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0308 	and.w	r3, r3, #8
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073b4:	4b53      	ldr	r3, [pc, #332]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	4a52      	ldr	r2, [pc, #328]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80073ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80073be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073c0:	4b50      	ldr	r3, [pc, #320]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	494d      	ldr	r1, [pc, #308]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d040      	beq.n	8007460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d107      	bne.n	80073f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073e6:	4b47      	ldr	r3, [pc, #284]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d115      	bne.n	800741e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e07f      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d107      	bne.n	800740e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073fe:	4b41      	ldr	r3, [pc, #260]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d109      	bne.n	800741e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e073      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800740e:	4b3d      	ldr	r3, [pc, #244]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e06b      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800741e:	4b39      	ldr	r3, [pc, #228]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f023 0203 	bic.w	r2, r3, #3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	4936      	ldr	r1, [pc, #216]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 800742c:	4313      	orrs	r3, r2
 800742e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007430:	f7fe f9a4 	bl	800577c <HAL_GetTick>
 8007434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007436:	e00a      	b.n	800744e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007438:	f7fe f9a0 	bl	800577c <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	f241 3288 	movw	r2, #5000	; 0x1388
 8007446:	4293      	cmp	r3, r2
 8007448:	d901      	bls.n	800744e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e053      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800744e:	4b2d      	ldr	r3, [pc, #180]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f003 020c 	and.w	r2, r3, #12
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	429a      	cmp	r2, r3
 800745e:	d1eb      	bne.n	8007438 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007460:	4b27      	ldr	r3, [pc, #156]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	429a      	cmp	r2, r3
 800746c:	d210      	bcs.n	8007490 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746e:	4b24      	ldr	r3, [pc, #144]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f023 0207 	bic.w	r2, r3, #7
 8007476:	4922      	ldr	r1, [pc, #136]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	4313      	orrs	r3, r2
 800747c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800747e:	4b20      	ldr	r3, [pc, #128]	; (8007500 <HAL_RCC_ClockConfig+0x1c0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d001      	beq.n	8007490 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e032      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d008      	beq.n	80074ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800749c:	4b19      	ldr	r3, [pc, #100]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	4916      	ldr	r1, [pc, #88]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80074ba:	4b12      	ldr	r3, [pc, #72]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	490e      	ldr	r1, [pc, #56]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80074ce:	f000 f821 	bl	8007514 <HAL_RCC_GetSysClockFreq>
 80074d2:	4602      	mov	r2, r0
 80074d4:	4b0b      	ldr	r3, [pc, #44]	; (8007504 <HAL_RCC_ClockConfig+0x1c4>)
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	091b      	lsrs	r3, r3, #4
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	490a      	ldr	r1, [pc, #40]	; (8007508 <HAL_RCC_ClockConfig+0x1c8>)
 80074e0:	5ccb      	ldrb	r3, [r1, r3]
 80074e2:	fa22 f303 	lsr.w	r3, r2, r3
 80074e6:	4a09      	ldr	r2, [pc, #36]	; (800750c <HAL_RCC_ClockConfig+0x1cc>)
 80074e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80074ea:	4b09      	ldr	r3, [pc, #36]	; (8007510 <HAL_RCC_ClockConfig+0x1d0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fe f902 	bl	80056f8 <HAL_InitTick>

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	40022000 	.word	0x40022000
 8007504:	40021000 	.word	0x40021000
 8007508:	0800e954 	.word	0x0800e954
 800750c:	20000030 	.word	0x20000030
 8007510:	20000034 	.word	0x20000034

08007514 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]
 800751e:	2300      	movs	r3, #0
 8007520:	60bb      	str	r3, [r7, #8]
 8007522:	2300      	movs	r3, #0
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	2300      	movs	r3, #0
 8007528:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800752e:	4b1e      	ldr	r3, [pc, #120]	; (80075a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f003 030c 	and.w	r3, r3, #12
 800753a:	2b04      	cmp	r3, #4
 800753c:	d002      	beq.n	8007544 <HAL_RCC_GetSysClockFreq+0x30>
 800753e:	2b08      	cmp	r3, #8
 8007540:	d003      	beq.n	800754a <HAL_RCC_GetSysClockFreq+0x36>
 8007542:	e027      	b.n	8007594 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007544:	4b19      	ldr	r3, [pc, #100]	; (80075ac <HAL_RCC_GetSysClockFreq+0x98>)
 8007546:	613b      	str	r3, [r7, #16]
      break;
 8007548:	e027      	b.n	800759a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	0c9b      	lsrs	r3, r3, #18
 800754e:	f003 030f 	and.w	r3, r3, #15
 8007552:	4a17      	ldr	r2, [pc, #92]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007554:	5cd3      	ldrb	r3, [r2, r3]
 8007556:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d010      	beq.n	8007584 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007562:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	0c5b      	lsrs	r3, r3, #17
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	4a11      	ldr	r2, [pc, #68]	; (80075b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800756e:	5cd3      	ldrb	r3, [r2, r3]
 8007570:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a0d      	ldr	r2, [pc, #52]	; (80075ac <HAL_RCC_GetSysClockFreq+0x98>)
 8007576:	fb03 f202 	mul.w	r2, r3, r2
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	e004      	b.n	800758e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a0c      	ldr	r2, [pc, #48]	; (80075b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007588:	fb02 f303 	mul.w	r3, r2, r3
 800758c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	613b      	str	r3, [r7, #16]
      break;
 8007592:	e002      	b.n	800759a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007594:	4b05      	ldr	r3, [pc, #20]	; (80075ac <HAL_RCC_GetSysClockFreq+0x98>)
 8007596:	613b      	str	r3, [r7, #16]
      break;
 8007598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800759a:	693b      	ldr	r3, [r7, #16]
}
 800759c:	4618      	mov	r0, r3
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40021000 	.word	0x40021000
 80075ac:	007a1200 	.word	0x007a1200
 80075b0:	0800e96c 	.word	0x0800e96c
 80075b4:	0800e97c 	.word	0x0800e97c
 80075b8:	003d0900 	.word	0x003d0900

080075bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075c0:	4b02      	ldr	r3, [pc, #8]	; (80075cc <HAL_RCC_GetHCLKFreq+0x10>)
 80075c2:	681b      	ldr	r3, [r3, #0]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bc80      	pop	{r7}
 80075ca:	4770      	bx	lr
 80075cc:	20000030 	.word	0x20000030

080075d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075d4:	f7ff fff2 	bl	80075bc <HAL_RCC_GetHCLKFreq>
 80075d8:	4602      	mov	r2, r0
 80075da:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	0a1b      	lsrs	r3, r3, #8
 80075e0:	f003 0307 	and.w	r3, r3, #7
 80075e4:	4903      	ldr	r1, [pc, #12]	; (80075f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075e6:	5ccb      	ldrb	r3, [r1, r3]
 80075e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40021000 	.word	0x40021000
 80075f4:	0800e964 	.word	0x0800e964

080075f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80075fc:	f7ff ffde 	bl	80075bc <HAL_RCC_GetHCLKFreq>
 8007600:	4602      	mov	r2, r0
 8007602:	4b05      	ldr	r3, [pc, #20]	; (8007618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	0adb      	lsrs	r3, r3, #11
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	4903      	ldr	r1, [pc, #12]	; (800761c <HAL_RCC_GetPCLK2Freq+0x24>)
 800760e:	5ccb      	ldrb	r3, [r1, r3]
 8007610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007614:	4618      	mov	r0, r3
 8007616:	bd80      	pop	{r7, pc}
 8007618:	40021000 	.word	0x40021000
 800761c:	0800e964 	.word	0x0800e964

08007620 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007628:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <RCC_Delay+0x34>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a0a      	ldr	r2, [pc, #40]	; (8007658 <RCC_Delay+0x38>)
 800762e:	fba2 2303 	umull	r2, r3, r2, r3
 8007632:	0a5b      	lsrs	r3, r3, #9
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	fb02 f303 	mul.w	r3, r2, r3
 800763a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800763c:	bf00      	nop
  }
  while (Delay --);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	1e5a      	subs	r2, r3, #1
 8007642:	60fa      	str	r2, [r7, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1f9      	bne.n	800763c <RCC_Delay+0x1c>
}
 8007648:	bf00      	nop
 800764a:	bf00      	nop
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	bc80      	pop	{r7}
 8007652:	4770      	bx	lr
 8007654:	20000030 	.word	0x20000030
 8007658:	10624dd3 	.word	0x10624dd3

0800765c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e041      	b.n	80076f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fc fc28 	bl	8003ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3304      	adds	r3, #4
 8007698:	4619      	mov	r1, r3
 800769a:	4610      	mov	r0, r2
 800769c:	f000 fd68 	bl	8008170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b01      	cmp	r3, #1
 800770e:	d001      	beq.n	8007714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e03a      	b.n	800778a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0201 	orr.w	r2, r2, #1
 800772a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a18      	ldr	r2, [pc, #96]	; (8007794 <HAL_TIM_Base_Start_IT+0x98>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00e      	beq.n	8007754 <HAL_TIM_Base_Start_IT+0x58>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800773e:	d009      	beq.n	8007754 <HAL_TIM_Base_Start_IT+0x58>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a14      	ldr	r2, [pc, #80]	; (8007798 <HAL_TIM_Base_Start_IT+0x9c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d004      	beq.n	8007754 <HAL_TIM_Base_Start_IT+0x58>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a13      	ldr	r2, [pc, #76]	; (800779c <HAL_TIM_Base_Start_IT+0xa0>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d111      	bne.n	8007778 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b06      	cmp	r3, #6
 8007764:	d010      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f042 0201 	orr.w	r2, r2, #1
 8007774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007776:	e007      	b.n	8007788 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0201 	orr.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	bc80      	pop	{r7}
 8007792:	4770      	bx	lr
 8007794:	40012c00 	.word	0x40012c00
 8007798:	40000400 	.word	0x40000400
 800779c:	40000800 	.word	0x40000800

080077a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e041      	b.n	8007836 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f839 	bl	800783e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3304      	adds	r3, #4
 80077dc:	4619      	mov	r1, r3
 80077de:	4610      	mov	r0, r2
 80077e0:	f000 fcc6 	bl	8008170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800783e:	b480      	push	{r7}
 8007840:	b083      	sub	sp, #12
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007846:	bf00      	nop
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	bc80      	pop	{r7}
 800784e:	4770      	bx	lr

08007850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d109      	bne.n	8007874 <HAL_TIM_PWM_Start+0x24>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b01      	cmp	r3, #1
 800786a:	bf14      	ite	ne
 800786c:	2301      	movne	r3, #1
 800786e:	2300      	moveq	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	e022      	b.n	80078ba <HAL_TIM_PWM_Start+0x6a>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2b04      	cmp	r3, #4
 8007878:	d109      	bne.n	800788e <HAL_TIM_PWM_Start+0x3e>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b01      	cmp	r3, #1
 8007884:	bf14      	ite	ne
 8007886:	2301      	movne	r3, #1
 8007888:	2300      	moveq	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	e015      	b.n	80078ba <HAL_TIM_PWM_Start+0x6a>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b08      	cmp	r3, #8
 8007892:	d109      	bne.n	80078a8 <HAL_TIM_PWM_Start+0x58>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b01      	cmp	r3, #1
 800789e:	bf14      	ite	ne
 80078a0:	2301      	movne	r3, #1
 80078a2:	2300      	moveq	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	e008      	b.n	80078ba <HAL_TIM_PWM_Start+0x6a>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	bf14      	ite	ne
 80078b4:	2301      	movne	r3, #1
 80078b6:	2300      	moveq	r3, #0
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e05e      	b.n	8007980 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d104      	bne.n	80078d2 <HAL_TIM_PWM_Start+0x82>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2202      	movs	r2, #2
 80078cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078d0:	e013      	b.n	80078fa <HAL_TIM_PWM_Start+0xaa>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	d104      	bne.n	80078e2 <HAL_TIM_PWM_Start+0x92>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078e0:	e00b      	b.n	80078fa <HAL_TIM_PWM_Start+0xaa>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d104      	bne.n	80078f2 <HAL_TIM_PWM_Start+0xa2>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078f0:	e003      	b.n	80078fa <HAL_TIM_PWM_Start+0xaa>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2202      	movs	r2, #2
 80078f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2201      	movs	r2, #1
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	4618      	mov	r0, r3
 8007904:	f000 feb4 	bl	8008670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a1e      	ldr	r2, [pc, #120]	; (8007988 <HAL_TIM_PWM_Start+0x138>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d107      	bne.n	8007922 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007920:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a18      	ldr	r2, [pc, #96]	; (8007988 <HAL_TIM_PWM_Start+0x138>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d00e      	beq.n	800794a <HAL_TIM_PWM_Start+0xfa>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007934:	d009      	beq.n	800794a <HAL_TIM_PWM_Start+0xfa>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a14      	ldr	r2, [pc, #80]	; (800798c <HAL_TIM_PWM_Start+0x13c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d004      	beq.n	800794a <HAL_TIM_PWM_Start+0xfa>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a12      	ldr	r2, [pc, #72]	; (8007990 <HAL_TIM_PWM_Start+0x140>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d111      	bne.n	800796e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f003 0307 	and.w	r3, r3, #7
 8007954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b06      	cmp	r3, #6
 800795a:	d010      	beq.n	800797e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0201 	orr.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800796c:	e007      	b.n	800797e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0201 	orr.w	r2, r2, #1
 800797c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	40012c00 	.word	0x40012c00
 800798c:	40000400 	.word	0x40000400
 8007990:	40000800 	.word	0x40000800

08007994 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e093      	b.n	8007ad0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d106      	bne.n	80079c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7fc faa9 	bl	8003f14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2202      	movs	r2, #2
 80079c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	6812      	ldr	r2, [r2, #0]
 80079d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079d8:	f023 0307 	bic.w	r3, r3, #7
 80079dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3304      	adds	r3, #4
 80079e6:	4619      	mov	r1, r3
 80079e8:	4610      	mov	r0, r2
 80079ea:	f000 fbc1 	bl	8008170 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6a1b      	ldr	r3, [r3, #32]
 8007a04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a16:	f023 0303 	bic.w	r3, r3, #3
 8007a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	021b      	lsls	r3, r3, #8
 8007a26:	4313      	orrs	r3, r2
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007a34:	f023 030c 	bic.w	r3, r3, #12
 8007a38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	021b      	lsls	r3, r3, #8
 8007a50:	4313      	orrs	r3, r2
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	011a      	lsls	r2, r3, #4
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	031b      	lsls	r3, r3, #12
 8007a64:	4313      	orrs	r3, r2
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007a72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ae8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007af0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007af8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b00:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d110      	bne.n	8007b2a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d102      	bne.n	8007b14 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b0e:	7b7b      	ldrb	r3, [r7, #13]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d001      	beq.n	8007b18 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e069      	b.n	8007bec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b28:	e031      	b.n	8007b8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d110      	bne.n	8007b52 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d102      	bne.n	8007b3c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b36:	7b3b      	ldrb	r3, [r7, #12]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d001      	beq.n	8007b40 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e055      	b.n	8007bec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b50:	e01d      	b.n	8007b8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d108      	bne.n	8007b6a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d105      	bne.n	8007b6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b5e:	7b7b      	ldrb	r3, [r7, #13]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d102      	bne.n	8007b6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b64:	7b3b      	ldrb	r3, [r7, #12]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d001      	beq.n	8007b6e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e03e      	b.n	8007bec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2202      	movs	r2, #2
 8007b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2202      	movs	r2, #2
 8007b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2202      	movs	r2, #2
 8007b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <HAL_TIM_Encoder_Start+0xc4>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d008      	beq.n	8007bac <HAL_TIM_Encoder_Start+0xd4>
 8007b9a:	e00f      	b.n	8007bbc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 fd63 	bl	8008670 <TIM_CCxChannelCmd>
      break;
 8007baa:	e016      	b.n	8007bda <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	2104      	movs	r1, #4
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fd5b 	bl	8008670 <TIM_CCxChannelCmd>
      break;
 8007bba:	e00e      	b.n	8007bda <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fd53 	bl	8008670 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	2104      	movs	r1, #4
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fd4c 	bl	8008670 <TIM_CCxChannelCmd>
      break;
 8007bd8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 0201 	orr.w	r2, r2, #1
 8007be8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d122      	bne.n	8007c50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d11b      	bne.n	8007c50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f06f 0202 	mvn.w	r2, #2
 8007c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	f003 0303 	and.w	r3, r3, #3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa7f 	bl	800813a <HAL_TIM_IC_CaptureCallback>
 8007c3c:	e005      	b.n	8007c4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fa72 	bl	8008128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fa81 	bl	800814c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d122      	bne.n	8007ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	d11b      	bne.n	8007ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f06f 0204 	mvn.w	r2, #4
 8007c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa55 	bl	800813a <HAL_TIM_IC_CaptureCallback>
 8007c90:	e005      	b.n	8007c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa48 	bl	8008128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fa57 	bl	800814c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	f003 0308 	and.w	r3, r3, #8
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d122      	bne.n	8007cf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d11b      	bne.n	8007cf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f06f 0208 	mvn.w	r2, #8
 8007cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2204      	movs	r2, #4
 8007cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa2b 	bl	800813a <HAL_TIM_IC_CaptureCallback>
 8007ce4:	e005      	b.n	8007cf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fa1e 	bl	8008128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fa2d 	bl	800814c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	f003 0310 	and.w	r3, r3, #16
 8007d02:	2b10      	cmp	r3, #16
 8007d04:	d122      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f003 0310 	and.w	r3, r3, #16
 8007d10:	2b10      	cmp	r3, #16
 8007d12:	d11b      	bne.n	8007d4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f06f 0210 	mvn.w	r2, #16
 8007d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2208      	movs	r2, #8
 8007d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa01 	bl	800813a <HAL_TIM_IC_CaptureCallback>
 8007d38:	e005      	b.n	8007d46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f9f4 	bl	8008128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fa03 	bl	800814c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d10e      	bne.n	8007d78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d107      	bne.n	8007d78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f06f 0201 	mvn.w	r2, #1
 8007d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f9cf 	bl	8008116 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d82:	2b80      	cmp	r3, #128	; 0x80
 8007d84:	d10e      	bne.n	8007da4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d90:	2b80      	cmp	r3, #128	; 0x80
 8007d92:	d107      	bne.n	8007da4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fd42 	bl	8008828 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dae:	2b40      	cmp	r3, #64	; 0x40
 8007db0:	d10e      	bne.n	8007dd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dbc:	2b40      	cmp	r3, #64	; 0x40
 8007dbe:	d107      	bne.n	8007dd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f9c7 	bl	800815e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	f003 0320 	and.w	r3, r3, #32
 8007dda:	2b20      	cmp	r3, #32
 8007ddc:	d10e      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b20      	cmp	r3, #32
 8007dea:	d107      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f06f 0220 	mvn.w	r2, #32
 8007df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fd0d 	bl	8008816 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d101      	bne.n	8007e22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e1e:	2302      	movs	r3, #2
 8007e20:	e0ae      	b.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b0c      	cmp	r3, #12
 8007e2e:	f200 809f 	bhi.w	8007f70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e6d 	.word	0x08007e6d
 8007e3c:	08007f71 	.word	0x08007f71
 8007e40:	08007f71 	.word	0x08007f71
 8007e44:	08007f71 	.word	0x08007f71
 8007e48:	08007ead 	.word	0x08007ead
 8007e4c:	08007f71 	.word	0x08007f71
 8007e50:	08007f71 	.word	0x08007f71
 8007e54:	08007f71 	.word	0x08007f71
 8007e58:	08007eef 	.word	0x08007eef
 8007e5c:	08007f71 	.word	0x08007f71
 8007e60:	08007f71 	.word	0x08007f71
 8007e64:	08007f71 	.word	0x08007f71
 8007e68:	08007f2f 	.word	0x08007f2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f9de 	bl	8008234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699a      	ldr	r2, [r3, #24]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0208 	orr.w	r2, r2, #8
 8007e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0204 	bic.w	r2, r2, #4
 8007e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6999      	ldr	r1, [r3, #24]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	691a      	ldr	r2, [r3, #16]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	619a      	str	r2, [r3, #24]
      break;
 8007eaa:	e064      	b.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68b9      	ldr	r1, [r7, #8]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fa24 	bl	8008300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6999      	ldr	r1, [r3, #24]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	021a      	lsls	r2, r3, #8
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	619a      	str	r2, [r3, #24]
      break;
 8007eec:	e043      	b.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fa6d 	bl	80083d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69da      	ldr	r2, [r3, #28]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f042 0208 	orr.w	r2, r2, #8
 8007f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69da      	ldr	r2, [r3, #28]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0204 	bic.w	r2, r2, #4
 8007f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69d9      	ldr	r1, [r3, #28]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	61da      	str	r2, [r3, #28]
      break;
 8007f2c:	e023      	b.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68b9      	ldr	r1, [r7, #8]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 fab7 	bl	80084a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69da      	ldr	r2, [r3, #28]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69d9      	ldr	r1, [r3, #28]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	021a      	lsls	r2, r3, #8
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	61da      	str	r2, [r3, #28]
      break;
 8007f6e:	e002      	b.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	75fb      	strb	r3, [r7, #23]
      break;
 8007f74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_TIM_ConfigClockSource+0x1c>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e0b4      	b.n	800810e <HAL_TIM_ConfigClockSource+0x186>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fdc:	d03e      	beq.n	800805c <HAL_TIM_ConfigClockSource+0xd4>
 8007fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fe2:	f200 8087 	bhi.w	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fea:	f000 8086 	beq.w	80080fa <HAL_TIM_ConfigClockSource+0x172>
 8007fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff2:	d87f      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff4:	2b70      	cmp	r3, #112	; 0x70
 8007ff6:	d01a      	beq.n	800802e <HAL_TIM_ConfigClockSource+0xa6>
 8007ff8:	2b70      	cmp	r3, #112	; 0x70
 8007ffa:	d87b      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ffc:	2b60      	cmp	r3, #96	; 0x60
 8007ffe:	d050      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0x11a>
 8008000:	2b60      	cmp	r3, #96	; 0x60
 8008002:	d877      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008004:	2b50      	cmp	r3, #80	; 0x50
 8008006:	d03c      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0xfa>
 8008008:	2b50      	cmp	r3, #80	; 0x50
 800800a:	d873      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 800800c:	2b40      	cmp	r3, #64	; 0x40
 800800e:	d058      	beq.n	80080c2 <HAL_TIM_ConfigClockSource+0x13a>
 8008010:	2b40      	cmp	r3, #64	; 0x40
 8008012:	d86f      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008014:	2b30      	cmp	r3, #48	; 0x30
 8008016:	d064      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008018:	2b30      	cmp	r3, #48	; 0x30
 800801a:	d86b      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 800801c:	2b20      	cmp	r3, #32
 800801e:	d060      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008020:	2b20      	cmp	r3, #32
 8008022:	d867      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d05c      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008028:	2b10      	cmp	r3, #16
 800802a:	d05a      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x15a>
 800802c:	e062      	b.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6818      	ldr	r0, [r3, #0]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	6899      	ldr	r1, [r3, #8]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f000 faf8 	bl	8008632 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008050:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	609a      	str	r2, [r3, #8]
      break;
 800805a:	e04f      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	6899      	ldr	r1, [r3, #8]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f000 fae1 	bl	8008632 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689a      	ldr	r2, [r3, #8]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800807e:	609a      	str	r2, [r3, #8]
      break;
 8008080:	e03c      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	6859      	ldr	r1, [r3, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	461a      	mov	r2, r3
 8008090:	f000 fa58 	bl	8008544 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2150      	movs	r1, #80	; 0x50
 800809a:	4618      	mov	r0, r3
 800809c:	f000 faaf 	bl	80085fe <TIM_ITRx_SetConfig>
      break;
 80080a0:	e02c      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6818      	ldr	r0, [r3, #0]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	6859      	ldr	r1, [r3, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f000 fa76 	bl	80085a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2160      	movs	r1, #96	; 0x60
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fa9f 	bl	80085fe <TIM_ITRx_SetConfig>
      break;
 80080c0:	e01c      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6818      	ldr	r0, [r3, #0]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	6859      	ldr	r1, [r3, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f000 fa38 	bl	8008544 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2140      	movs	r1, #64	; 0x40
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fa8f 	bl	80085fe <TIM_ITRx_SetConfig>
      break;
 80080e0:	e00c      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4619      	mov	r1, r3
 80080ec:	4610      	mov	r0, r2
 80080ee:	f000 fa86 	bl	80085fe <TIM_ITRx_SetConfig>
      break;
 80080f2:	e003      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]
      break;
 80080f8:	e000      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800810c:	7bfb      	ldrb	r3, [r7, #15]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008116:	b480      	push	{r7}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800811e:	bf00      	nop
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	bc80      	pop	{r7}
 8008126:	4770      	bx	lr

08008128 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	bc80      	pop	{r7}
 8008138:	4770      	bx	lr

0800813a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008142:	bf00      	nop
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	bc80      	pop	{r7}
 800814a:	4770      	bx	lr

0800814c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr

0800815e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	bc80      	pop	{r7}
 800816e:	4770      	bx	lr

08008170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a29      	ldr	r2, [pc, #164]	; (8008228 <TIM_Base_SetConfig+0xb8>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d00b      	beq.n	80081a0 <TIM_Base_SetConfig+0x30>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800818e:	d007      	beq.n	80081a0 <TIM_Base_SetConfig+0x30>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a26      	ldr	r2, [pc, #152]	; (800822c <TIM_Base_SetConfig+0xbc>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d003      	beq.n	80081a0 <TIM_Base_SetConfig+0x30>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a25      	ldr	r2, [pc, #148]	; (8008230 <TIM_Base_SetConfig+0xc0>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d108      	bne.n	80081b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a1c      	ldr	r2, [pc, #112]	; (8008228 <TIM_Base_SetConfig+0xb8>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d00b      	beq.n	80081d2 <TIM_Base_SetConfig+0x62>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c0:	d007      	beq.n	80081d2 <TIM_Base_SetConfig+0x62>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a19      	ldr	r2, [pc, #100]	; (800822c <TIM_Base_SetConfig+0xbc>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d003      	beq.n	80081d2 <TIM_Base_SetConfig+0x62>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a18      	ldr	r2, [pc, #96]	; (8008230 <TIM_Base_SetConfig+0xc0>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d108      	bne.n	80081e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	689a      	ldr	r2, [r3, #8]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a07      	ldr	r2, [pc, #28]	; (8008228 <TIM_Base_SetConfig+0xb8>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d103      	bne.n	8008218 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	615a      	str	r2, [r3, #20]
}
 800821e:	bf00      	nop
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	bc80      	pop	{r7}
 8008226:	4770      	bx	lr
 8008228:	40012c00 	.word	0x40012c00
 800822c:	40000400 	.word	0x40000400
 8008230:	40000800 	.word	0x40000800

08008234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	f023 0201 	bic.w	r2, r3, #1
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0303 	bic.w	r3, r3, #3
 800826a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f023 0302 	bic.w	r3, r3, #2
 800827c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a1c      	ldr	r2, [pc, #112]	; (80082fc <TIM_OC1_SetConfig+0xc8>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d10c      	bne.n	80082aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f023 0308 	bic.w	r3, r3, #8
 8008296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	4313      	orrs	r3, r2
 80082a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f023 0304 	bic.w	r3, r3, #4
 80082a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a13      	ldr	r2, [pc, #76]	; (80082fc <TIM_OC1_SetConfig+0xc8>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d111      	bne.n	80082d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	621a      	str	r2, [r3, #32]
}
 80082f0:	bf00      	nop
 80082f2:	371c      	adds	r7, #28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bc80      	pop	{r7}
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	40012c00 	.word	0x40012c00

08008300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008300:	b480      	push	{r7}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	f023 0210 	bic.w	r2, r3, #16
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800832e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	021b      	lsls	r3, r3, #8
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	4313      	orrs	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f023 0320 	bic.w	r3, r3, #32
 800834a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	011b      	lsls	r3, r3, #4
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	4313      	orrs	r3, r2
 8008356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a1d      	ldr	r2, [pc, #116]	; (80083d0 <TIM_OC2_SetConfig+0xd0>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d10d      	bne.n	800837c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4313      	orrs	r3, r2
 8008372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800837a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a14      	ldr	r2, [pc, #80]	; (80083d0 <TIM_OC2_SetConfig+0xd0>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d113      	bne.n	80083ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800838a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	4313      	orrs	r3, r2
 800839e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr
 80083d0:	40012c00 	.word	0x40012c00

080083d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a1b      	ldr	r3, [r3, #32]
 80083e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f023 0303 	bic.w	r3, r3, #3
 800840a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	4313      	orrs	r3, r2
 8008414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800841c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	021b      	lsls	r3, r3, #8
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a1d      	ldr	r2, [pc, #116]	; (80084a4 <TIM_OC3_SetConfig+0xd0>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d10d      	bne.n	800844e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008438:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	021b      	lsls	r3, r3, #8
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	4313      	orrs	r3, r2
 8008444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800844c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a14      	ldr	r2, [pc, #80]	; (80084a4 <TIM_OC3_SetConfig+0xd0>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d113      	bne.n	800847e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800845c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	011b      	lsls	r3, r3, #4
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	4313      	orrs	r3, r2
 800847c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	621a      	str	r2, [r3, #32]
}
 8008498:	bf00      	nop
 800849a:	371c      	adds	r7, #28
 800849c:	46bd      	mov	sp, r7
 800849e:	bc80      	pop	{r7}
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	40012c00 	.word	0x40012c00

080084a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b087      	sub	sp, #28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a1b      	ldr	r3, [r3, #32]
 80084bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	021b      	lsls	r3, r3, #8
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	031b      	lsls	r3, r3, #12
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a0f      	ldr	r2, [pc, #60]	; (8008540 <TIM_OC4_SetConfig+0x98>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d109      	bne.n	800851c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800850e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	019b      	lsls	r3, r3, #6
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	4313      	orrs	r3, r2
 800851a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	621a      	str	r2, [r3, #32]
}
 8008536:	bf00      	nop
 8008538:	371c      	adds	r7, #28
 800853a:	46bd      	mov	sp, r7
 800853c:	bc80      	pop	{r7}
 800853e:	4770      	bx	lr
 8008540:	40012c00 	.word	0x40012c00

08008544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	f023 0201 	bic.w	r2, r3, #1
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800856e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	4313      	orrs	r3, r2
 8008578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f023 030a 	bic.w	r3, r3, #10
 8008580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	621a      	str	r2, [r3, #32]
}
 8008596:	bf00      	nop
 8008598:	371c      	adds	r7, #28
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr

080085a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6a1b      	ldr	r3, [r3, #32]
 80085b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	f023 0210 	bic.w	r2, r3, #16
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	031b      	lsls	r3, r3, #12
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	011b      	lsls	r3, r3, #4
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	621a      	str	r2, [r3, #32]
}
 80085f4:	bf00      	nop
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bc80      	pop	{r7}
 80085fc:	4770      	bx	lr

080085fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085fe:	b480      	push	{r7}
 8008600:	b085      	sub	sp, #20
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008614:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4313      	orrs	r3, r2
 800861c:	f043 0307 	orr.w	r3, r3, #7
 8008620:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	609a      	str	r2, [r3, #8]
}
 8008628:	bf00      	nop
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	bc80      	pop	{r7}
 8008630:	4770      	bx	lr

08008632 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008632:	b480      	push	{r7}
 8008634:	b087      	sub	sp, #28
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	607a      	str	r2, [r7, #4]
 800863e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800864c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	021a      	lsls	r2, r3, #8
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	431a      	orrs	r2, r3
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	4313      	orrs	r3, r2
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	4313      	orrs	r3, r2
 800865e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	609a      	str	r2, [r3, #8]
}
 8008666:	bf00      	nop
 8008668:	371c      	adds	r7, #28
 800866a:	46bd      	mov	sp, r7
 800866c:	bc80      	pop	{r7}
 800866e:	4770      	bx	lr

08008670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f003 031f 	and.w	r3, r3, #31
 8008682:	2201      	movs	r2, #1
 8008684:	fa02 f303 	lsl.w	r3, r2, r3
 8008688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6a1a      	ldr	r2, [r3, #32]
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	43db      	mvns	r3, r3
 8008692:	401a      	ands	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6a1a      	ldr	r2, [r3, #32]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f003 031f 	and.w	r3, r3, #31
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	fa01 f303 	lsl.w	r3, r1, r3
 80086a8:	431a      	orrs	r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	621a      	str	r2, [r3, #32]
}
 80086ae:	bf00      	nop
 80086b0:	371c      	adds	r7, #28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bc80      	pop	{r7}
 80086b6:	4770      	bx	lr

080086b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d101      	bne.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086cc:	2302      	movs	r3, #2
 80086ce:	e046      	b.n	800875e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2202      	movs	r2, #2
 80086dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a16      	ldr	r2, [pc, #88]	; (8008768 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d00e      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800871c:	d009      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a12      	ldr	r2, [pc, #72]	; (800876c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d004      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a10      	ldr	r2, [pc, #64]	; (8008770 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d10c      	bne.n	800874c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	4313      	orrs	r3, r2
 8008742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	bc80      	pop	{r7}
 8008766:	4770      	bx	lr
 8008768:	40012c00 	.word	0x40012c00
 800876c:	40000400 	.word	0x40000400
 8008770:	40000800 	.word	0x40000800

08008774 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800877e:	2300      	movs	r3, #0
 8008780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008788:	2b01      	cmp	r3, #1
 800878a:	d101      	bne.n	8008790 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800878c:	2302      	movs	r3, #2
 800878e:	e03d      	b.n	800880c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	4313      	orrs	r3, r2
 80087c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	bc80      	pop	{r7}
 8008814:	4770      	bx	lr

08008816 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008816:	b480      	push	{r7}
 8008818:	b083      	sub	sp, #12
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	bc80      	pop	{r7}
 8008826:	4770      	bx	lr

08008828 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	bc80      	pop	{r7}
 8008838:	4770      	bx	lr

0800883a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e042      	b.n	80088d2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008852:	b2db      	uxtb	r3, r3
 8008854:	2b00      	cmp	r3, #0
 8008856:	d106      	bne.n	8008866 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7fb fc45 	bl	80040f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2224      	movs	r2, #36	; 0x24
 800886a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68da      	ldr	r2, [r3, #12]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800887c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f91c 	bl	8008abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	691a      	ldr	r2, [r3, #16]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008892:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	695a      	ldr	r2, [r3, #20]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68da      	ldr	r2, [r3, #12]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2220      	movs	r2, #32
 80088be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b08a      	sub	sp, #40	; 0x28
 80088de:	af02      	add	r7, sp, #8
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	603b      	str	r3, [r7, #0]
 80088e6:	4613      	mov	r3, r2
 80088e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b20      	cmp	r3, #32
 80088f8:	d16d      	bne.n	80089d6 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <HAL_UART_Transmit+0x2c>
 8008900:	88fb      	ldrh	r3, [r7, #6]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e066      	b.n	80089d8 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2221      	movs	r2, #33	; 0x21
 8008914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008918:	f7fc ff30 	bl	800577c <HAL_GetTick>
 800891c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	88fa      	ldrh	r2, [r7, #6]
 8008922:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	88fa      	ldrh	r2, [r7, #6]
 8008928:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008932:	d108      	bne.n	8008946 <HAL_UART_Transmit+0x6c>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d104      	bne.n	8008946 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800893c:	2300      	movs	r3, #0
 800893e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	61bb      	str	r3, [r7, #24]
 8008944:	e003      	b.n	800894e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800894a:	2300      	movs	r3, #0
 800894c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800894e:	e02a      	b.n	80089a6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2200      	movs	r2, #0
 8008958:	2180      	movs	r1, #128	; 0x80
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 f840 	bl	80089e0 <UART_WaitOnFlagUntilTimeout>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e036      	b.n	80089d8 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10b      	bne.n	8008988 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	461a      	mov	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800897e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	3302      	adds	r3, #2
 8008984:	61bb      	str	r3, [r7, #24]
 8008986:	e007      	b.n	8008998 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	781a      	ldrb	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	3301      	adds	r3, #1
 8008996:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800899c:	b29b      	uxth	r3, r3
 800899e:	3b01      	subs	r3, #1
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1cf      	bne.n	8008950 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	2200      	movs	r2, #0
 80089b8:	2140      	movs	r1, #64	; 0x40
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 f810 	bl	80089e0 <UART_WaitOnFlagUntilTimeout>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e006      	b.n	80089d8 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2220      	movs	r2, #32
 80089ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	e000      	b.n	80089d8 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80089d6:	2302      	movs	r3, #2
  }
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3720      	adds	r7, #32
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b090      	sub	sp, #64	; 0x40
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	4613      	mov	r3, r2
 80089ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089f0:	e050      	b.n	8008a94 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f8:	d04c      	beq.n	8008a94 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d007      	beq.n	8008a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a00:	f7fc febc 	bl	800577c <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d241      	bcs.n	8008a94 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	330c      	adds	r3, #12
 8008a16:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1a:	e853 3f00 	ldrex	r3, [r3]
 8008a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	330c      	adds	r3, #12
 8008a2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a30:	637a      	str	r2, [r7, #52]	; 0x34
 8008a32:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a38:	e841 2300 	strex	r3, r2, [r1]
 8008a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e5      	bne.n	8008a10 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	3314      	adds	r3, #20
 8008a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	e853 3f00 	ldrex	r3, [r3]
 8008a52:	613b      	str	r3, [r7, #16]
   return(result);
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f023 0301 	bic.w	r3, r3, #1
 8008a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3314      	adds	r3, #20
 8008a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a64:	623a      	str	r2, [r7, #32]
 8008a66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a68:	69f9      	ldr	r1, [r7, #28]
 8008a6a:	6a3a      	ldr	r2, [r7, #32]
 8008a6c:	e841 2300 	strex	r3, r2, [r1]
 8008a70:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e5      	bne.n	8008a44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2220      	movs	r2, #32
 8008a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e00f      	b.n	8008ab4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	bf0c      	ite	eq
 8008aa4:	2301      	moveq	r3, #1
 8008aa6:	2300      	movne	r3, #0
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	461a      	mov	r2, r3
 8008aac:	79fb      	ldrb	r3, [r7, #7]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d09f      	beq.n	80089f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3740      	adds	r7, #64	; 0x40
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689a      	ldr	r2, [r3, #8]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008af6:	f023 030c 	bic.w	r3, r3, #12
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	6812      	ldr	r2, [r2, #0]
 8008afe:	68b9      	ldr	r1, [r7, #8]
 8008b00:	430b      	orrs	r3, r1
 8008b02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	699a      	ldr	r2, [r3, #24]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a2c      	ldr	r2, [pc, #176]	; (8008bd0 <UART_SetConfig+0x114>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d103      	bne.n	8008b2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008b24:	f7fe fd68 	bl	80075f8 <HAL_RCC_GetPCLK2Freq>
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	e002      	b.n	8008b32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008b2c:	f7fe fd50 	bl	80075d0 <HAL_RCC_GetPCLK1Freq>
 8008b30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	009a      	lsls	r2, r3, #2
 8008b3c:	441a      	add	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b48:	4a22      	ldr	r2, [pc, #136]	; (8008bd4 <UART_SetConfig+0x118>)
 8008b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b4e:	095b      	lsrs	r3, r3, #5
 8008b50:	0119      	lsls	r1, r3, #4
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009a      	lsls	r2, r3, #2
 8008b5c:	441a      	add	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b68:	4b1a      	ldr	r3, [pc, #104]	; (8008bd4 <UART_SetConfig+0x118>)
 8008b6a:	fba3 0302 	umull	r0, r3, r3, r2
 8008b6e:	095b      	lsrs	r3, r3, #5
 8008b70:	2064      	movs	r0, #100	; 0x64
 8008b72:	fb00 f303 	mul.w	r3, r0, r3
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	011b      	lsls	r3, r3, #4
 8008b7a:	3332      	adds	r3, #50	; 0x32
 8008b7c:	4a15      	ldr	r2, [pc, #84]	; (8008bd4 <UART_SetConfig+0x118>)
 8008b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b82:	095b      	lsrs	r3, r3, #5
 8008b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b88:	4419      	add	r1, r3
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	009a      	lsls	r2, r3, #2
 8008b94:	441a      	add	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ba0:	4b0c      	ldr	r3, [pc, #48]	; (8008bd4 <UART_SetConfig+0x118>)
 8008ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8008ba6:	095b      	lsrs	r3, r3, #5
 8008ba8:	2064      	movs	r0, #100	; 0x64
 8008baa:	fb00 f303 	mul.w	r3, r0, r3
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	011b      	lsls	r3, r3, #4
 8008bb2:	3332      	adds	r3, #50	; 0x32
 8008bb4:	4a07      	ldr	r2, [pc, #28]	; (8008bd4 <UART_SetConfig+0x118>)
 8008bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bba:	095b      	lsrs	r3, r3, #5
 8008bbc:	f003 020f 	and.w	r2, r3, #15
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	440a      	add	r2, r1
 8008bc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008bc8:	bf00      	nop
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	40013800 	.word	0x40013800
 8008bd4:	51eb851f 	.word	0x51eb851f

08008bd8 <VL53L0X_GetVersion>:
#endif

/* Group PAL General Functions */

VL53L0X_Error VL53L0X_GetVersion(VL53L0X_Version_t *pVersion)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	pVersion->major = VL53L0X_IMPLEMENTATION_VER_MAJOR;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	711a      	strb	r2, [r3, #4]
	pVersion->minor = VL53L0X_IMPLEMENTATION_VER_MINOR;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	715a      	strb	r2, [r3, #5]
	pVersion->build = VL53L0X_IMPLEMENTATION_VER_SUB;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	719a      	strb	r2, [r3, #6]

	pVersion->revision = VL53L0X_IMPLEMENTATION_VER_REVISION;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f241 12da 	movw	r2, #4570	; 0x11da
 8008bfc:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bc80      	pop	{r7}
 8008c0a:	4770      	bx	lr

08008c0c <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f004 fb89 	bl	800d334 <VL53L0X_get_device_info>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <VL53L0X_SetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_SetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t OffsetCalibrationDataMicroMeter)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_offset_calibration_data_micro_meter(Dev,
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f001 fc62 	bl	800a50c <VL53L0X_set_offset_calibration_data_micro_meter>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]
		OffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8008c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f001 fc97 	bl	800a59c <VL53L0X_get_offset_calibration_data_micro_meter>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8008c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8008c8e:	78fb      	ldrb	r3, [r7, #3]
 8008c90:	085b      	lsrs	r3, r3, #1
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	461a      	mov	r2, r3
 8008c96:	218a      	movs	r1, #138	; 0x8a
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f004 fe39 	bl	800d910 <VL53L0X_WrByte>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8008ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
	...

08008cb0 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8008cb0:	b5b0      	push	{r4, r5, r7, lr}
 8008cb2:	b094      	sub	sp, #80	; 0x50
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8008cbe:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d107      	bne.n	8008cd6 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	2188      	movs	r1, #136	; 0x88
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f004 fe20 	bl	800d910 <VL53L0X_WrByte>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ce4:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008cee:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a71      	ldr	r2, [pc, #452]	; (8008ebc <VL53L0X_DataInit+0x20c>)
 8008cf6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a70      	ldr	r2, [pc, #448]	; (8008ec0 <VL53L0X_DataInit+0x210>)
 8008cfe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008d08:	f107 0308 	add.w	r3, r7, #8
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fa5a 	bl	80091c8 <VL53L0X_GetDeviceParameters>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 8008d1a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d112      	bne.n	8008d48 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8008d22:	2300      	movs	r3, #0
 8008d24:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8008d26:	2300      	movs	r3, #0
 8008d28:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f103 0410 	add.w	r4, r3, #16
 8008d30:	f107 0508 	add.w	r5, r7, #8
 8008d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008d44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2264      	movs	r2, #100	; 0x64
 8008d4c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f44f 7261 	mov.w	r2, #900	; 0x384
 8008d56:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008d60:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008d6a:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008d76:	2300      	movs	r3, #0
 8008d78:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d7a:	e014      	b.n	8008da6 <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 8008d7c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d114      	bne.n	8008dae <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8008d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	2201      	movs	r2, #1
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 fd4b 	bl	8009828 <VL53L0X_SetLimitCheckEnable>
 8008d92:	4603      	mov	r3, r0
 8008d94:	461a      	mov	r2, r3
 8008d96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da2:	3301      	adds	r3, #1
 8008da4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da8:	2b05      	cmp	r3, #5
 8008daa:	dde7      	ble.n	8008d7c <VL53L0X_DataInit+0xcc>
 8008dac:	e000      	b.n	8008db0 <VL53L0X_DataInit+0x100>
		else
			break;
 8008dae:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8008db0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d107      	bne.n	8008dc8 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008db8:	2200      	movs	r2, #0
 8008dba:	2102      	movs	r1, #2
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fd33 	bl	8009828 <VL53L0X_SetLimitCheckEnable>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008dc8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d107      	bne.n	8008de0 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2103      	movs	r1, #3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fd27 	bl	8009828 <VL53L0X_SetLimitCheckEnable>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008de0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d107      	bne.n	8008df8 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008de8:	2200      	movs	r2, #0
 8008dea:	2104      	movs	r1, #4
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fd1b 	bl	8009828 <VL53L0X_SetLimitCheckEnable>
 8008df2:	4603      	mov	r3, r0
 8008df4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008df8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d107      	bne.n	8008e10 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008e00:	2200      	movs	r2, #0
 8008e02:	2105      	movs	r1, #5
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fd0f 	bl	8009828 <VL53L0X_SetLimitCheckEnable>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8008e10:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d108      	bne.n	8008e2a <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008e18:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fdb0 	bl	8009984 <VL53L0X_SetLimitCheckValue>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008e2a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d108      	bne.n	8008e44 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008e36:	2101      	movs	r1, #1
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fda3 	bl	8009984 <VL53L0X_SetLimitCheckValue>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008e44:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d108      	bne.n	8008e5e <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008e4c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8008e50:	2102      	movs	r1, #2
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fd96 	bl	8009984 <VL53L0X_SetLimitCheckValue>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008e5e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d107      	bne.n	8008e76 <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008e66:	2200      	movs	r2, #0
 8008e68:	2103      	movs	r1, #3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fd8a 	bl	8009984 <VL53L0X_SetLimitCheckValue>
 8008e70:	4603      	mov	r3, r0
 8008e72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008e76:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10f      	bne.n	8008e9e <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	22ff      	movs	r2, #255	; 0xff
 8008e82:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008e86:	22ff      	movs	r2, #255	; 0xff
 8008e88:	2101      	movs	r1, #1
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f004 fd40 	bl	800d910 <VL53L0X_WrByte>
 8008e90:	4603      	mov	r3, r0
 8008e92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008e9e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d103      	bne.n	8008eae <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8008eae:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3750      	adds	r7, #80	; 0x50
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	00016b85 	.word	0x00016b85
 8008ec0:	000970a4 	.word	0x000970a4

08008ec4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8008ec4:	b5b0      	push	{r4, r5, r7, lr}
 8008ec6:	b09e      	sub	sp, #120	; 0x78
 8008ec8:	af02      	add	r7, sp, #8
 8008eca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8008ed2:	f107 031c 	add.w	r3, r7, #28
 8008ed6:	2240      	movs	r2, #64	; 0x40
 8008ed8:	2100      	movs	r1, #0
 8008eda:	4618      	mov	r0, r3
 8008edc:	f004 fe2e 	bl	800db3c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8008efa:	2300      	movs	r3, #0
 8008efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8008f00:	2101      	movs	r1, #1
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f002 fa86 	bl	800b414 <VL53L0X_get_info_from_device>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8008f14:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8008f1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8008f20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d80d      	bhi.n	8008f44 <VL53L0X_StaticInit+0x80>
 8008f28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d102      	bne.n	8008f36 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8008f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f32:	2b20      	cmp	r3, #32
 8008f34:	d806      	bhi.n	8008f44 <VL53L0X_StaticInit+0x80>
 8008f36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10e      	bne.n	8008f5c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8008f3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f40:	2b0c      	cmp	r3, #12
 8008f42:	d90b      	bls.n	8008f5c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8008f44:	f107 0218 	add.w	r2, r7, #24
 8008f48:	f107 0314 	add.w	r3, r7, #20
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f001 fd1d 	bl	800a98e <VL53L0X_perform_ref_spad_management>
 8008f54:	4603      	mov	r3, r0
 8008f56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8008f5a:	e009      	b.n	8008f70 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8008f5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f60:	461a      	mov	r2, r3
 8008f62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f001 ff1e 	bl	800ada6 <VL53L0X_set_reference_spads>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8008f70:	4b94      	ldr	r3, [pc, #592]	; (80091c4 <VL53L0X_StaticInit+0x300>)
 8008f72:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8008f74:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10f      	bne.n	8008f9c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8008f82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8008f86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d104      	bne.n	8008f98 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8008f94:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f96:	e001      	b.n	8008f9c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8008f98:	4b8a      	ldr	r3, [pc, #552]	; (80091c4 <VL53L0X_StaticInit+0x300>)
 8008f9a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8008f9c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d106      	bne.n	8008fb2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8008fa4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f003 fb52 	bl	800c650 <VL53L0X_load_tuning_settings>
 8008fac:	4603      	mov	r3, r0
 8008fae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8008fb2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10a      	bne.n	8008fd0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8008fba:	2300      	movs	r3, #0
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	2304      	movs	r3, #4
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f001 f8cf 	bl	800a168 <VL53L0X_SetGpioConfig>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008fd0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d121      	bne.n	800901c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008fd8:	2201      	movs	r2, #1
 8008fda:	21ff      	movs	r1, #255	; 0xff
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f004 fc97 	bl	800d910 <VL53L0X_WrByte>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8008fe8:	f107 031a 	add.w	r3, r7, #26
 8008fec:	461a      	mov	r2, r3
 8008fee:	2184      	movs	r1, #132	; 0x84
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f004 fc19 	bl	800d828 <VL53L0X_RdWord>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008ffe:	4313      	orrs	r3, r2
 8009000:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009004:	2200      	movs	r2, #0
 8009006:	21ff      	movs	r1, #255	; 0xff
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f004 fc81 	bl	800d910 <VL53L0X_WrByte>
 800900e:	4603      	mov	r3, r0
 8009010:	461a      	mov	r2, r3
 8009012:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009016:	4313      	orrs	r3, r2
 8009018:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800901c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009020:	2b00      	cmp	r3, #0
 8009022:	d105      	bne.n	8009030 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8009024:	8b7b      	ldrh	r3, [r7, #26]
 8009026:	011b      	lsls	r3, r3, #4
 8009028:	461a      	mov	r2, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8009030:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009034:	2b00      	cmp	r3, #0
 8009036:	d108      	bne.n	800904a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009038:	f107 031c 	add.w	r3, r7, #28
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f8c2 	bl	80091c8 <VL53L0X_GetDeviceParameters>
 8009044:	4603      	mov	r3, r0
 8009046:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800904a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800904e:	2b00      	cmp	r3, #0
 8009050:	d110      	bne.n	8009074 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8009052:	f107 0319 	add.w	r3, r7, #25
 8009056:	4619      	mov	r1, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f981 	bl	8009360 <VL53L0X_GetFractionEnable>
 800905e:	4603      	mov	r3, r0
 8009060:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8009064:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009068:	2b00      	cmp	r3, #0
 800906a:	d103      	bne.n	8009074 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800906c:	7e7a      	ldrb	r2, [r7, #25]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009074:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10e      	bne.n	800909a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f103 0410 	add.w	r4, r3, #16
 8009082:	f107 051c 	add.w	r5, r7, #28
 8009086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800908a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800908c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800908e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009092:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800909a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d111      	bne.n	80090c6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80090a2:	f107 0319 	add.w	r3, r7, #25
 80090a6:	461a      	mov	r2, r3
 80090a8:	2101      	movs	r1, #1
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f004 fb35 	bl	800d71a <VL53L0X_RdByte>
 80090b0:	4603      	mov	r3, r0
 80090b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80090b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d103      	bne.n	80090c6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80090be:	7e7a      	ldrb	r2, [r7, #25]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80090c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d107      	bne.n	80090de <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80090ce:	2200      	movs	r2, #0
 80090d0:	2100      	movs	r1, #0
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f9a0 	bl	8009418 <VL53L0X_SetSequenceStepEnable>
 80090d8:	4603      	mov	r3, r0
 80090da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80090de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d107      	bne.n	80090f6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80090e6:	2200      	movs	r2, #0
 80090e8:	2102      	movs	r1, #2
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f994 	bl	8009418 <VL53L0X_SetSequenceStepEnable>
 80090f0:	4603      	mov	r3, r0
 80090f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80090f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d103      	bne.n	8009106 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2203      	movs	r2, #3
 8009102:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009106:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800910a:	2b00      	cmp	r3, #0
 800910c:	d109      	bne.n	8009122 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800910e:	f107 0313 	add.w	r3, r7, #19
 8009112:	461a      	mov	r2, r3
 8009114:	2100      	movs	r1, #0
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f967 	bl	80093ea <VL53L0X_GetVcselPulsePeriod>
 800911c:	4603      	mov	r3, r0
 800911e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009122:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009126:	2b00      	cmp	r3, #0
 8009128:	d103      	bne.n	8009132 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800912a:	7cfa      	ldrb	r2, [r7, #19]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009132:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009136:	2b00      	cmp	r3, #0
 8009138:	d109      	bne.n	800914e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800913a:	f107 0313 	add.w	r3, r7, #19
 800913e:	461a      	mov	r2, r3
 8009140:	2101      	movs	r1, #1
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f951 	bl	80093ea <VL53L0X_GetVcselPulsePeriod>
 8009148:	4603      	mov	r3, r0
 800914a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800914e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009152:	2b00      	cmp	r3, #0
 8009154:	d103      	bne.n	800915e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009156:	7cfa      	ldrb	r2, [r7, #19]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800915e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009162:	2b00      	cmp	r3, #0
 8009164:	d109      	bne.n	800917a <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 8009166:	f107 030c 	add.w	r3, r7, #12
 800916a:	461a      	mov	r2, r3
 800916c:	2103      	movs	r1, #3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fa9e 	bl	80096b0 <VL53L0X_GetSequenceStepTimeout>
 8009174:	4603      	mov	r3, r0
 8009176:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800917a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800917e:	2b00      	cmp	r3, #0
 8009180:	d103      	bne.n	800918a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800918a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800918e:	2b00      	cmp	r3, #0
 8009190:	d109      	bne.n	80091a6 <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 8009192:	f107 030c 	add.w	r3, r7, #12
 8009196:	461a      	mov	r2, r3
 8009198:	2104      	movs	r1, #4
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fa88 	bl	80096b0 <VL53L0X_GetSequenceStepTimeout>
 80091a0:	4603      	mov	r3, r0
 80091a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80091a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d103      	bne.n	80091b6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80091b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3770      	adds	r7, #112	; 0x70
 80091be:	46bd      	mov	sp, r7
 80091c0:	bdb0      	pop	{r4, r5, r7, pc}
 80091c2:	bf00      	nop
 80091c4:	2000003c 	.word	0x2000003c

080091c8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80091d2:	2300      	movs	r3, #0
 80091d4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f8ae 	bl	800933c <VL53L0X_GetDeviceMode>
 80091e0:	4603      	mov	r3, r0
 80091e2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80091e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d107      	bne.n	80091fc <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	3308      	adds	r3, #8
 80091f0:	4619      	mov	r1, r3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fa9c 	bl	8009730 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80091f8:	4603      	mov	r3, r0
 80091fa:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80091fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d102      	bne.n	800920a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2200      	movs	r2, #0
 8009208:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800920a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d107      	bne.n	8009222 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	3310      	adds	r3, #16
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fad1 	bl	80097c0 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800921e:	4603      	mov	r3, r0
 8009220:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8009222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d107      	bne.n	800923a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	3314      	adds	r3, #20
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7ff fd11 	bl	8008c58 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8009236:	4603      	mov	r3, r0
 8009238:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800923a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d134      	bne.n	80092ac <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009242:	2300      	movs	r3, #0
 8009244:	60bb      	str	r3, [r7, #8]
 8009246:	e02a      	b.n	800929e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d12a      	bne.n	80092a6 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	b299      	uxth	r1, r3
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	3308      	adds	r3, #8
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	4413      	add	r3, r2
 800925e:	3304      	adds	r3, #4
 8009260:	461a      	mov	r2, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fbf0 	bl	8009a48 <VL53L0X_GetLimitCheckValue>
 8009268:	4603      	mov	r3, r0
 800926a:	461a      	mov	r2, r3
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	4313      	orrs	r3, r2
 8009270:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d117      	bne.n	80092aa <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	b299      	uxth	r1, r3
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	3318      	adds	r3, #24
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	4413      	add	r3, r2
 8009286:	461a      	mov	r2, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 fb59 	bl	8009940 <VL53L0X_GetLimitCheckEnable>
 800928e:	4603      	mov	r3, r0
 8009290:	461a      	mov	r2, r3
 8009292:	7bfb      	ldrb	r3, [r7, #15]
 8009294:	4313      	orrs	r3, r2
 8009296:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	3301      	adds	r3, #1
 800929c:	60bb      	str	r3, [r7, #8]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2b05      	cmp	r3, #5
 80092a2:	ddd1      	ble.n	8009248 <VL53L0X_GetDeviceParameters+0x80>
 80092a4:	e002      	b.n	80092ac <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80092a6:	bf00      	nop
 80092a8:	e000      	b.n	80092ac <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80092aa:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80092ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d107      	bne.n	80092c4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	333c      	adds	r3, #60	; 0x3c
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fc52 	bl	8009b64 <VL53L0X_GetWrapAroundCheckEnable>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80092c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d107      	bne.n	80092dc <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	3304      	adds	r3, #4
 80092d0:	4619      	mov	r1, r3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f876 	bl	80093c4 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80092d8:	4603      	mov	r3, r0
 80092da:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80092dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	460b      	mov	r3, r1
 80092f2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80092f8:	78fb      	ldrb	r3, [r7, #3]
 80092fa:	2b15      	cmp	r3, #21
 80092fc:	bf8c      	ite	hi
 80092fe:	2201      	movhi	r2, #1
 8009300:	2200      	movls	r2, #0
 8009302:	b2d2      	uxtb	r2, r2
 8009304:	2a00      	cmp	r2, #0
 8009306:	d10e      	bne.n	8009326 <VL53L0X_SetDeviceMode+0x3e>
 8009308:	2201      	movs	r2, #1
 800930a:	409a      	lsls	r2, r3
 800930c:	4b0a      	ldr	r3, [pc, #40]	; (8009338 <VL53L0X_SetDeviceMode+0x50>)
 800930e:	4013      	ands	r3, r2
 8009310:	2b00      	cmp	r3, #0
 8009312:	bf14      	ite	ne
 8009314:	2301      	movne	r3, #1
 8009316:	2300      	moveq	r3, #0
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	78fa      	ldrb	r2, [r7, #3]
 8009322:	741a      	strb	r2, [r3, #16]
		break;
 8009324:	e001      	b.n	800932a <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009326:	23f8      	movs	r3, #248	; 0xf8
 8009328:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800932a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	bc80      	pop	{r7}
 8009336:	4770      	bx	lr
 8009338:	0030000b 	.word	0x0030000b

0800933c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009346:	2300      	movs	r3, #0
 8009348:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	7c1a      	ldrb	r2, [r3, #16]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009352:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	bc80      	pop	{r7}
 800935e:	4770      	bx	lr

08009360 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800936a:	2300      	movs	r3, #0
 800936c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	2109      	movs	r1, #9
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f004 f9d1 	bl	800d71a <VL53L0X_RdByte>
 8009378:	4603      	mov	r3, r0
 800937a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800937c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d106      	bne.n	8009392 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	f003 0301 	and.w	r3, r3, #1
 800938c:	b2da      	uxtb	r2, r3
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009392:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f002 ffbc 	bl	800c32c <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80093b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f003 f889 	bl	800c4ec <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80093da:	4603      	mov	r3, r0
 80093dc:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80093de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b086      	sub	sp, #24
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	460b      	mov	r3, r1
 80093f4:	607a      	str	r2, [r7, #4]
 80093f6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093f8:	2300      	movs	r3, #0
 80093fa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80093fc:	7afb      	ldrb	r3, [r7, #11]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	4619      	mov	r1, r3
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f002 ff5b 	bl	800c2be <VL53L0X_get_vcsel_pulse_period>
 8009408:	4603      	mov	r3, r0
 800940a:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800940c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
 8009424:	4613      	mov	r3, r2
 8009426:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009428:	2300      	movs	r3, #0
 800942a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8009430:	2300      	movs	r3, #0
 8009432:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009434:	f107 030f 	add.w	r3, r7, #15
 8009438:	461a      	mov	r2, r3
 800943a:	2101      	movs	r1, #1
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f004 f96c 	bl	800d71a <VL53L0X_RdByte>
 8009442:	4603      	mov	r3, r0
 8009444:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8009446:	7bfb      	ldrb	r3, [r7, #15]
 8009448:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800944a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d15a      	bne.n	8009508 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8009452:	78bb      	ldrb	r3, [r7, #2]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d12b      	bne.n	80094b0 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8009458:	78fb      	ldrb	r3, [r7, #3]
 800945a:	2b04      	cmp	r3, #4
 800945c:	d825      	bhi.n	80094aa <VL53L0X_SetSequenceStepEnable+0x92>
 800945e:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8009460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009464:	08009479 	.word	0x08009479
 8009468:	08009483 	.word	0x08009483
 800946c:	0800948d 	.word	0x0800948d
 8009470:	08009497 	.word	0x08009497
 8009474:	080094a1 	.word	0x080094a1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8009478:	7dbb      	ldrb	r3, [r7, #22]
 800947a:	f043 0310 	orr.w	r3, r3, #16
 800947e:	75bb      	strb	r3, [r7, #22]
				break;
 8009480:	e043      	b.n	800950a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8009482:	7dbb      	ldrb	r3, [r7, #22]
 8009484:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8009488:	75bb      	strb	r3, [r7, #22]
				break;
 800948a:	e03e      	b.n	800950a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800948c:	7dbb      	ldrb	r3, [r7, #22]
 800948e:	f043 0304 	orr.w	r3, r3, #4
 8009492:	75bb      	strb	r3, [r7, #22]
				break;
 8009494:	e039      	b.n	800950a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8009496:	7dbb      	ldrb	r3, [r7, #22]
 8009498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800949c:	75bb      	strb	r3, [r7, #22]
				break;
 800949e:	e034      	b.n	800950a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80094a0:	7dbb      	ldrb	r3, [r7, #22]
 80094a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80094a6:	75bb      	strb	r3, [r7, #22]
				break;
 80094a8:	e02f      	b.n	800950a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80094aa:	23fc      	movs	r3, #252	; 0xfc
 80094ac:	75fb      	strb	r3, [r7, #23]
 80094ae:	e02c      	b.n	800950a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	2b04      	cmp	r3, #4
 80094b4:	d825      	bhi.n	8009502 <VL53L0X_SetSequenceStepEnable+0xea>
 80094b6:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <VL53L0X_SetSequenceStepEnable+0xa4>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	080094d1 	.word	0x080094d1
 80094c0:	080094db 	.word	0x080094db
 80094c4:	080094e5 	.word	0x080094e5
 80094c8:	080094ef 	.word	0x080094ef
 80094cc:	080094f9 	.word	0x080094f9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80094d0:	7dbb      	ldrb	r3, [r7, #22]
 80094d2:	f023 0310 	bic.w	r3, r3, #16
 80094d6:	75bb      	strb	r3, [r7, #22]
				break;
 80094d8:	e017      	b.n	800950a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80094da:	7dbb      	ldrb	r3, [r7, #22]
 80094dc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80094e0:	75bb      	strb	r3, [r7, #22]
				break;
 80094e2:	e012      	b.n	800950a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80094e4:	7dbb      	ldrb	r3, [r7, #22]
 80094e6:	f023 0304 	bic.w	r3, r3, #4
 80094ea:	75bb      	strb	r3, [r7, #22]
				break;
 80094ec:	e00d      	b.n	800950a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80094ee:	7dbb      	ldrb	r3, [r7, #22]
 80094f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094f4:	75bb      	strb	r3, [r7, #22]
				break;
 80094f6:	e008      	b.n	800950a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80094f8:	7dbb      	ldrb	r3, [r7, #22]
 80094fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094fe:	75bb      	strb	r3, [r7, #22]
				break;
 8009500:	e003      	b.n	800950a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009502:	23fc      	movs	r3, #252	; 0xfc
 8009504:	75fb      	strb	r3, [r7, #23]
 8009506:	e000      	b.n	800950a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8009508:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800950a:	7bfb      	ldrb	r3, [r7, #15]
 800950c:	7dba      	ldrb	r2, [r7, #22]
 800950e:	429a      	cmp	r2, r3
 8009510:	d01e      	beq.n	8009550 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8009512:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d107      	bne.n	800952a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800951a:	7dbb      	ldrb	r3, [r7, #22]
 800951c:	461a      	mov	r2, r3
 800951e:	2101      	movs	r1, #1
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f004 f9f5 	bl	800d910 <VL53L0X_WrByte>
 8009526:	4603      	mov	r3, r0
 8009528:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800952a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d103      	bne.n	800953a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	7dba      	ldrb	r2, [r7, #22]
 8009536:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800953a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d106      	bne.n	8009550 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009548:	6939      	ldr	r1, [r7, #16]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7ff ff27 	bl	800939e <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009550:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800955c:	b480      	push	{r7}
 800955e:	b087      	sub	sp, #28
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	607b      	str	r3, [r7, #4]
 8009566:	460b      	mov	r3, r1
 8009568:	72fb      	strb	r3, [r7, #11]
 800956a:	4613      	mov	r3, r2
 800956c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800956e:	2300      	movs	r3, #0
 8009570:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8009578:	7afb      	ldrb	r3, [r7, #11]
 800957a:	2b04      	cmp	r3, #4
 800957c:	d836      	bhi.n	80095ec <sequence_step_enabled+0x90>
 800957e:	a201      	add	r2, pc, #4	; (adr r2, 8009584 <sequence_step_enabled+0x28>)
 8009580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009584:	08009599 	.word	0x08009599
 8009588:	080095ab 	.word	0x080095ab
 800958c:	080095bd 	.word	0x080095bd
 8009590:	080095cf 	.word	0x080095cf
 8009594:	080095e1 	.word	0x080095e1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8009598:	7abb      	ldrb	r3, [r7, #10]
 800959a:	111b      	asrs	r3, r3, #4
 800959c:	b2db      	uxtb	r3, r3
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	701a      	strb	r2, [r3, #0]
		break;
 80095a8:	e022      	b.n	80095f0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80095aa:	7abb      	ldrb	r3, [r7, #10]
 80095ac:	10db      	asrs	r3, r3, #3
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	701a      	strb	r2, [r3, #0]
		break;
 80095ba:	e019      	b.n	80095f0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80095bc:	7abb      	ldrb	r3, [r7, #10]
 80095be:	109b      	asrs	r3, r3, #2
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	701a      	strb	r2, [r3, #0]
		break;
 80095cc:	e010      	b.n	80095f0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80095ce:	7abb      	ldrb	r3, [r7, #10]
 80095d0:	119b      	asrs	r3, r3, #6
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	f003 0301 	and.w	r3, r3, #1
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	701a      	strb	r2, [r3, #0]
		break;
 80095de:	e007      	b.n	80095f0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80095e0:	7abb      	ldrb	r3, [r7, #10]
 80095e2:	09db      	lsrs	r3, r3, #7
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	701a      	strb	r2, [r3, #0]
		break;
 80095ea:	e001      	b.n	80095f0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80095ec:	23fc      	movs	r3, #252	; 0xfc
 80095ee:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80095f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	371c      	adds	r7, #28
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bc80      	pop	{r7}
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop

08009600 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800960a:	2300      	movs	r3, #0
 800960c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009612:	f107 030e 	add.w	r3, r7, #14
 8009616:	461a      	mov	r2, r3
 8009618:	2101      	movs	r1, #1
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f004 f87d 	bl	800d71a <VL53L0X_RdByte>
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8009624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d107      	bne.n	800963c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800962c:	7bba      	ldrb	r2, [r7, #14]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2100      	movs	r1, #0
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f7ff ff92 	bl	800955c <sequence_step_enabled>
 8009638:	4603      	mov	r3, r0
 800963a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800963c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d108      	bne.n	8009656 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8009644:	7bba      	ldrb	r2, [r7, #14]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	3302      	adds	r3, #2
 800964a:	2101      	movs	r1, #1
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff ff85 	bl	800955c <sequence_step_enabled>
 8009652:	4603      	mov	r3, r0
 8009654:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d108      	bne.n	8009670 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800965e:	7bba      	ldrb	r2, [r7, #14]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	3301      	adds	r3, #1
 8009664:	2102      	movs	r1, #2
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7ff ff78 	bl	800955c <sequence_step_enabled>
 800966c:	4603      	mov	r3, r0
 800966e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d108      	bne.n	800968a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8009678:	7bba      	ldrb	r2, [r7, #14]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	3303      	adds	r3, #3
 800967e:	2103      	movs	r1, #3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff ff6b 	bl	800955c <sequence_step_enabled>
 8009686:	4603      	mov	r3, r0
 8009688:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800968a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d108      	bne.n	80096a4 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8009692:	7bba      	ldrb	r2, [r7, #14]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	3304      	adds	r3, #4
 8009698:	2104      	movs	r1, #4
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7ff ff5e 	bl	800955c <sequence_step_enabled>
 80096a0:	4603      	mov	r3, r0
 80096a2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80096a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	460b      	mov	r3, r1
 80096ba:	607a      	str	r2, [r7, #4]
 80096bc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096be:	2300      	movs	r3, #0
 80096c0:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 80096ca:	f107 0210 	add.w	r2, r7, #16
 80096ce:	7afb      	ldrb	r3, [r7, #11]
 80096d0:	4619      	mov	r1, r3
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f002 fc1e 	bl	800bf14 <get_sequence_step_timeout>
 80096d8:	4603      	mov	r3, r0
 80096da:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 80096dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d11c      	bne.n	800971e <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	4a11      	ldr	r2, [pc, #68]	; (800972c <VL53L0X_GetSequenceStepTimeout+0x7c>)
 80096e8:	fba2 2303 	umull	r2, r3, r2, r3
 80096ec:	099b      	lsrs	r3, r3, #6
 80096ee:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 80096f0:	693a      	ldr	r2, [r7, #16]
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80096f8:	fb01 f303 	mul.w	r3, r1, r3
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	4613      	mov	r3, r2
 8009708:	041b      	lsls	r3, r3, #16
 800970a:	1a9b      	subs	r3, r3, r2
 800970c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009710:	4a06      	ldr	r2, [pc, #24]	; (800972c <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8009712:	fba2 2303 	umull	r2, r3, r2, r3
 8009716:	099b      	lsrs	r3, r3, #6
 8009718:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800971e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3720      	adds	r7, #32
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	10624dd3 	.word	0x10624dd3

08009730 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800973a:	2300      	movs	r3, #0
 800973c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800973e:	f107 030c 	add.w	r3, r7, #12
 8009742:	461a      	mov	r2, r3
 8009744:	21f8      	movs	r1, #248	; 0xf8
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f004 f86e 	bl	800d828 <VL53L0X_RdWord>
 800974c:	4603      	mov	r3, r0
 800974e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8009750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d108      	bne.n	800976a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8009758:	f107 0308 	add.w	r3, r7, #8
 800975c:	461a      	mov	r2, r3
 800975e:	2104      	movs	r1, #4
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f004 f899 	bl	800d898 <VL53L0X_RdDWord>
 8009766:	4603      	mov	r3, r0
 8009768:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800976a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10c      	bne.n	800978c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8009772:	89bb      	ldrh	r3, [r7, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d005      	beq.n	8009784 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	89ba      	ldrh	r2, [r7, #12]
 800977c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800978c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097a2:	2300      	movs	r3, #0
 80097a4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	7f1b      	ldrb	r3, [r3, #28]
 80097aa:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	7bba      	ldrb	r2, [r7, #14]
 80097b0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80097b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bc80      	pop	{r7}
 80097be:	4770      	bx	lr

080097c0 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097ca:	2300      	movs	r3, #0
 80097cc:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80097ce:	f107 030e 	add.w	r3, r7, #14
 80097d2:	461a      	mov	r2, r3
 80097d4:	2120      	movs	r1, #32
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f004 f826 	bl	800d828 <VL53L0X_RdWord>
 80097dc:	4603      	mov	r3, r0
 80097de:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80097e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d118      	bne.n	800981a <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80097e8:	89fb      	ldrh	r3, [r7, #14]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d109      	bne.n	8009802 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	771a      	strb	r2, [r3, #28]
 8009800:	e00b      	b.n	800981a <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8009802:	89fb      	ldrh	r3, [r7, #14]
 8009804:	00db      	lsls	r3, r3, #3
 8009806:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800981a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
	...

08009828 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	807b      	strh	r3, [r7, #2]
 8009834:	4613      	mov	r3, r2
 8009836:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009838:	2300      	movs	r3, #0
 800983a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800983c:	2300      	movs	r3, #0
 800983e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8009840:	2300      	movs	r3, #0
 8009842:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8009844:	2300      	movs	r3, #0
 8009846:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009848:	887b      	ldrh	r3, [r7, #2]
 800984a:	2b05      	cmp	r3, #5
 800984c:	d902      	bls.n	8009854 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800984e:	23fc      	movs	r3, #252	; 0xfc
 8009850:	75fb      	strb	r3, [r7, #23]
 8009852:	e05b      	b.n	800990c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8009854:	787b      	ldrb	r3, [r7, #1]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d106      	bne.n	8009868 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800985e:	2300      	movs	r3, #0
 8009860:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8009862:	2301      	movs	r3, #1
 8009864:	73bb      	strb	r3, [r7, #14]
 8009866:	e00a      	b.n	800987e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009868:	887b      	ldrh	r3, [r7, #2]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	330c      	adds	r3, #12
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8009876:	2300      	movs	r3, #0
 8009878:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800987a:	2301      	movs	r3, #1
 800987c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800987e:	887b      	ldrh	r3, [r7, #2]
 8009880:	2b05      	cmp	r3, #5
 8009882:	d841      	bhi.n	8009908 <VL53L0X_SetLimitCheckEnable+0xe0>
 8009884:	a201      	add	r2, pc, #4	; (adr r2, 800988c <VL53L0X_SetLimitCheckEnable+0x64>)
 8009886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988a:	bf00      	nop
 800988c:	080098a5 	.word	0x080098a5
 8009890:	080098af 	.word	0x080098af
 8009894:	080098c5 	.word	0x080098c5
 8009898:	080098cf 	.word	0x080098cf
 800989c:	080098d9 	.word	0x080098d9
 80098a0:	080098f1 	.word	0x080098f1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	7bfa      	ldrb	r2, [r7, #15]
 80098a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80098ac:	e02e      	b.n	800990c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	461a      	mov	r2, r3
 80098b6:	2144      	movs	r1, #68	; 0x44
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f004 f84d 	bl	800d958 <VL53L0X_WrWord>
 80098be:	4603      	mov	r3, r0
 80098c0:	75fb      	strb	r3, [r7, #23]

			break;
 80098c2:	e023      	b.n	800990c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	7bfa      	ldrb	r2, [r7, #15]
 80098c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80098cc:	e01e      	b.n	800990c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	7bfa      	ldrb	r2, [r7, #15]
 80098d2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80098d6:	e019      	b.n	800990c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
 80098da:	005b      	lsls	r3, r3, #1
 80098dc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80098de:	7b7b      	ldrb	r3, [r7, #13]
 80098e0:	22fe      	movs	r2, #254	; 0xfe
 80098e2:	2160      	movs	r1, #96	; 0x60
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f004 f861 	bl	800d9ac <VL53L0X_UpdateByte>
 80098ea:	4603      	mov	r3, r0
 80098ec:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80098ee:	e00d      	b.n	800990c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
 80098f2:	011b      	lsls	r3, r3, #4
 80098f4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80098f6:	7b7b      	ldrb	r3, [r7, #13]
 80098f8:	22ef      	movs	r2, #239	; 0xef
 80098fa:	2160      	movs	r1, #96	; 0x60
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f004 f855 	bl	800d9ac <VL53L0X_UpdateByte>
 8009902:	4603      	mov	r3, r0
 8009904:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8009906:	e001      	b.n	800990c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009908:	23fc      	movs	r3, #252	; 0xfc
 800990a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800990c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10f      	bne.n	8009934 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8009914:	787b      	ldrb	r3, [r7, #1]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d106      	bne.n	8009928 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800991a:	887b      	ldrh	r3, [r7, #2]
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	4413      	add	r3, r2
 8009920:	2200      	movs	r2, #0
 8009922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009926:	e005      	b.n	8009934 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009928:	887b      	ldrh	r3, [r7, #2]
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	4413      	add	r3, r2
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009934:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3718      	adds	r7, #24
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	460b      	mov	r3, r1
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800994e:	2300      	movs	r3, #0
 8009950:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009952:	897b      	ldrh	r3, [r7, #10]
 8009954:	2b05      	cmp	r3, #5
 8009956:	d905      	bls.n	8009964 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009958:	23fc      	movs	r3, #252	; 0xfc
 800995a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	701a      	strb	r2, [r3, #0]
 8009962:	e008      	b.n	8009976 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009964:	897b      	ldrh	r3, [r7, #10]
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	4413      	add	r3, r2
 800996a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800996e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	7dba      	ldrb	r2, [r7, #22]
 8009974:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009976:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800997a:	4618      	mov	r0, r3
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	bc80      	pop	{r7}
 8009982:	4770      	bx	lr

08009984 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	460b      	mov	r3, r1
 800998e:	607a      	str	r2, [r7, #4]
 8009990:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009992:	2300      	movs	r3, #0
 8009994:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8009996:	897b      	ldrh	r3, [r7, #10]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	4413      	add	r3, r2
 800999c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099a0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80099a2:	7dbb      	ldrb	r3, [r7, #22]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d107      	bne.n	80099b8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80099a8:	897b      	ldrh	r3, [r7, #10]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	330c      	adds	r3, #12
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4413      	add	r3, r2
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	605a      	str	r2, [r3, #4]
 80099b6:	e040      	b.n	8009a3a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80099b8:	897b      	ldrh	r3, [r7, #10]
 80099ba:	2b05      	cmp	r3, #5
 80099bc:	d830      	bhi.n	8009a20 <VL53L0X_SetLimitCheckValue+0x9c>
 80099be:	a201      	add	r2, pc, #4	; (adr r2, 80099c4 <VL53L0X_SetLimitCheckValue+0x40>)
 80099c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c4:	080099dd 	.word	0x080099dd
 80099c8:	080099e5 	.word	0x080099e5
 80099cc:	080099fb 	.word	0x080099fb
 80099d0:	08009a03 	.word	0x08009a03
 80099d4:	08009a0b 	.word	0x08009a0b
 80099d8:	08009a0b 	.word	0x08009a0b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80099e2:	e01f      	b.n	8009a24 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	461a      	mov	r2, r3
 80099ec:	2144      	movs	r1, #68	; 0x44
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f003 ffb2 	bl	800d958 <VL53L0X_WrWord>
 80099f4:	4603      	mov	r3, r0
 80099f6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80099f8:	e014      	b.n	8009a24 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8009a00:	e010      	b.n	8009a24 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8009a08:	e00c      	b.n	8009a24 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	461a      	mov	r2, r3
 8009a12:	2164      	movs	r1, #100	; 0x64
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f003 ff9f 	bl	800d958 <VL53L0X_WrWord>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009a1e:	e001      	b.n	8009a24 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a20:	23fc      	movs	r3, #252	; 0xfc
 8009a22:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009a24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d106      	bne.n	8009a3a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009a2c:	897b      	ldrh	r3, [r7, #10]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	330c      	adds	r3, #12
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4413      	add	r3, r2
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3718      	adds	r7, #24
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop

08009a48 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b088      	sub	sp, #32
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	460b      	mov	r3, r1
 8009a52:	607a      	str	r2, [r7, #4]
 8009a54:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a56:	2300      	movs	r3, #0
 8009a58:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009a5e:	897b      	ldrh	r3, [r7, #10]
 8009a60:	2b05      	cmp	r3, #5
 8009a62:	d847      	bhi.n	8009af4 <VL53L0X_GetLimitCheckValue+0xac>
 8009a64:	a201      	add	r2, pc, #4	; (adr r2, 8009a6c <VL53L0X_GetLimitCheckValue+0x24>)
 8009a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6a:	bf00      	nop
 8009a6c:	08009a85 	.word	0x08009a85
 8009a70:	08009a91 	.word	0x08009a91
 8009a74:	08009ab7 	.word	0x08009ab7
 8009a78:	08009ac3 	.word	0x08009ac3
 8009a7c:	08009acf 	.word	0x08009acf
 8009a80:	08009acf 	.word	0x08009acf

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a88:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	77bb      	strb	r3, [r7, #30]
		break;
 8009a8e:	e033      	b.n	8009af8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009a90:	f107 0316 	add.w	r3, r7, #22
 8009a94:	461a      	mov	r2, r3
 8009a96:	2144      	movs	r1, #68	; 0x44
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f003 fec5 	bl	800d828 <VL53L0X_RdWord>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009aa2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d102      	bne.n	8009ab0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009aaa:	8afb      	ldrh	r3, [r7, #22]
 8009aac:	025b      	lsls	r3, r3, #9
 8009aae:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	77bb      	strb	r3, [r7, #30]
		break;
 8009ab4:	e020      	b.n	8009af8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aba:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	77bb      	strb	r3, [r7, #30]
		break;
 8009ac0:	e01a      	b.n	8009af8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	77bb      	strb	r3, [r7, #30]
		break;
 8009acc:	e014      	b.n	8009af8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009ace:	f107 0316 	add.w	r3, r7, #22
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	2164      	movs	r1, #100	; 0x64
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f003 fea6 	bl	800d828 <VL53L0X_RdWord>
 8009adc:	4603      	mov	r3, r0
 8009ade:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009ae0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d102      	bne.n	8009aee <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009ae8:	8afb      	ldrh	r3, [r7, #22]
 8009aea:	025b      	lsls	r3, r3, #9
 8009aec:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8009aee:	2300      	movs	r3, #0
 8009af0:	77bb      	strb	r3, [r7, #30]
		break;
 8009af2:	e001      	b.n	8009af8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009af4:	23fc      	movs	r3, #252	; 0xfc
 8009af6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009af8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d12a      	bne.n	8009b56 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8009b00:	7fbb      	ldrb	r3, [r7, #30]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d124      	bne.n	8009b50 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d110      	bne.n	8009b2e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8009b0c:	897b      	ldrh	r3, [r7, #10]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	330c      	adds	r3, #12
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009b20:	897b      	ldrh	r3, [r7, #10]
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	4413      	add	r3, r2
 8009b26:	2200      	movs	r2, #0
 8009b28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009b2c:	e013      	b.n	8009b56 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	69ba      	ldr	r2, [r7, #24]
 8009b32:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009b34:	897b      	ldrh	r3, [r7, #10]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	330c      	adds	r3, #12
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	69ba      	ldr	r2, [r7, #24]
 8009b40:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009b42:	897b      	ldrh	r3, [r7, #10]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	4413      	add	r3, r2
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009b4e:	e002      	b.n	8009b56 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009b56:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3720      	adds	r7, #32
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop

08009b64 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8009b72:	f107 030e 	add.w	r3, r7, #14
 8009b76:	461a      	mov	r2, r3
 8009b78:	2101      	movs	r1, #1
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f003 fdcd 	bl	800d71a <VL53L0X_RdByte>
 8009b80:	4603      	mov	r3, r0
 8009b82:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8009b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10e      	bne.n	8009baa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8009b8c:	7bba      	ldrb	r2, [r7, #14]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
 8009b96:	b25b      	sxtb	r3, r3
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	da03      	bge.n	8009ba4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	701a      	strb	r2, [r3, #0]
 8009ba2:	e002      	b.n	8009baa <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d104      	bne.n	8009bbc <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	781a      	ldrb	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009bd4:	f107 030e 	add.w	r3, r7, #14
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7ff fbae 	bl	800933c <VL53L0X_GetDeviceMode>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d107      	bne.n	8009bfc <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d104      	bne.n	8009bfc <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f898 	bl	8009d28 <VL53L0X_StartMeasurement>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d104      	bne.n	8009c0e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f001 fb50 	bl	800b2aa <VL53L0X_measurement_poll_for_completion>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d106      	bne.n	8009c24 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009c16:	7bbb      	ldrb	r3, [r7, #14]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d103      	bne.n	8009c24 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2203      	movs	r2, #3
 8009c20:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8009c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8009c40:	2301      	movs	r3, #1
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	68b9      	ldr	r1, [r7, #8]
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f001 faf2 	bl	800b230 <VL53L0X_perform_ref_calibration>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8009c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8009c72:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8009c74:	7dbb      	ldrb	r3, [r7, #22]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d005      	beq.n	8009c86 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8009c7a:	7dbb      	ldrb	r3, [r7, #22]
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d002      	beq.n	8009c86 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8009c80:	7dbb      	ldrb	r3, [r7, #22]
 8009c82:	2b03      	cmp	r3, #3
 8009c84:	d147      	bne.n	8009d16 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8009c86:	f107 030c 	add.w	r3, r7, #12
 8009c8a:	f107 0210 	add.w	r2, r7, #16
 8009c8e:	2101      	movs	r1, #1
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fb8d 	bl	800a3b0 <VL53L0X_GetInterruptThresholds>
 8009c96:	4603      	mov	r3, r0
 8009c98:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8009ca0:	d803      	bhi.n	8009caa <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8009ca2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8009ca4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8009ca8:	d935      	bls.n	8009d16 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8009caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d131      	bne.n	8009d16 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8009cb2:	78fb      	ldrb	r3, [r7, #3]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d006      	beq.n	8009cc6 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8009cb8:	491a      	ldr	r1, [pc, #104]	; (8009d24 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f002 fcc8 	bl	800c650 <VL53L0X_load_tuning_settings>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	75fb      	strb	r3, [r7, #23]
 8009cc4:	e027      	b.n	8009d16 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8009cc6:	2204      	movs	r2, #4
 8009cc8:	21ff      	movs	r1, #255	; 0xff
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f003 fe20 	bl	800d910 <VL53L0X_WrByte>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8009cda:	2200      	movs	r2, #0
 8009cdc:	2170      	movs	r1, #112	; 0x70
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f003 fe16 	bl	800d910 <VL53L0X_WrByte>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009cee:	2200      	movs	r2, #0
 8009cf0:	21ff      	movs	r1, #255	; 0xff
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f003 fe0c 	bl	800d910 <VL53L0X_WrByte>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009d02:	2200      	movs	r2, #0
 8009d04:	2180      	movs	r1, #128	; 0x80
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f003 fe02 	bl	800d910 <VL53L0X_WrByte>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	461a      	mov	r2, r3
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8009d16:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	20000130 	.word	0x20000130

08009d28 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d30:	2300      	movs	r3, #0
 8009d32:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8009d34:	2301      	movs	r3, #1
 8009d36:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009d38:	f107 030e 	add.w	r3, r7, #14
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7ff fafc 	bl	800933c <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d052      	beq.n	8009df0 <VL53L0X_StartMeasurement+0xc8>
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	dc6a      	bgt.n	8009e24 <VL53L0X_StartMeasurement+0xfc>
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d002      	beq.n	8009d58 <VL53L0X_StartMeasurement+0x30>
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d032      	beq.n	8009dbc <VL53L0X_StartMeasurement+0x94>
 8009d56:	e065      	b.n	8009e24 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8009d58:	2201      	movs	r2, #1
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f003 fdd7 	bl	800d910 <VL53L0X_WrByte>
 8009d62:	4603      	mov	r3, r0
 8009d64:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
 8009d68:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8009d6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d15b      	bne.n	8009e2a <VL53L0X_StartMeasurement+0x102>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8009d72:	2300      	movs	r3, #0
 8009d74:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d008      	beq.n	8009d8e <VL53L0X_StartMeasurement+0x66>
					Status = VL53L0X_RdByte(Dev,
 8009d7c:	f107 030d 	add.w	r3, r7, #13
 8009d80:	461a      	mov	r2, r3
 8009d82:	2100      	movs	r1, #0
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f003 fcc8 	bl	800d71a <VL53L0X_RdByte>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	3301      	adds	r3, #1
 8009d92:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8009d94:	7b7a      	ldrb	r2, [r7, #13]
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	4013      	ands	r3, r2
 8009d9a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009d9c:	7bfa      	ldrb	r2, [r7, #15]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d106      	bne.n	8009db0 <VL53L0X_StartMeasurement+0x88>
				&& (Status == VL53L0X_ERROR_NONE)
 8009da2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d102      	bne.n	8009db0 <VL53L0X_StartMeasurement+0x88>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2bc7      	cmp	r3, #199	; 0xc7
 8009dae:	d9e2      	bls.n	8009d76 <VL53L0X_StartMeasurement+0x4e>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	2bc7      	cmp	r3, #199	; 0xc7
 8009db4:	d939      	bls.n	8009e2a <VL53L0X_StartMeasurement+0x102>
				Status = VL53L0X_ERROR_TIME_OUT;
 8009db6:	23f9      	movs	r3, #249	; 0xf9
 8009db8:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8009dba:	e036      	b.n	8009e2a <VL53L0X_StartMeasurement+0x102>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d105      	bne.n	8009dd0 <VL53L0X_StartMeasurement+0xa8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f7ff ff48 	bl	8009c5c <VL53L0X_CheckAndLoadInterruptSettings>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f003 fd9b 	bl	800d910 <VL53L0X_WrByte>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8009dde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d123      	bne.n	8009e2e <VL53L0X_StartMeasurement+0x106>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2204      	movs	r2, #4
 8009dea:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8009dee:	e01e      	b.n	8009e2e <VL53L0X_StartMeasurement+0x106>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009df0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d105      	bne.n	8009e04 <VL53L0X_StartMeasurement+0xdc>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009df8:	2101      	movs	r1, #1
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f7ff ff2e 	bl	8009c5c <VL53L0X_CheckAndLoadInterruptSettings>
 8009e00:	4603      	mov	r3, r0
 8009e02:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009e04:	2204      	movs	r2, #4
 8009e06:	2100      	movs	r1, #0
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f003 fd81 	bl	800d910 <VL53L0X_WrByte>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8009e12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10b      	bne.n	8009e32 <VL53L0X_StartMeasurement+0x10a>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2204      	movs	r2, #4
 8009e1e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8009e22:	e006      	b.n	8009e32 <VL53L0X_StartMeasurement+0x10a>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009e24:	23f8      	movs	r3, #248	; 0xf8
 8009e26:	75fb      	strb	r3, [r7, #23]
 8009e28:	e004      	b.n	8009e34 <VL53L0X_StartMeasurement+0x10c>
		break;
 8009e2a:	bf00      	nop
 8009e2c:	e002      	b.n	8009e34 <VL53L0X_StartMeasurement+0x10c>
		break;
 8009e2e:	bf00      	nop
 8009e30:	e000      	b.n	8009e34 <VL53L0X_StartMeasurement+0x10c>
		break;
 8009e32:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8009e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8009e54:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	2b04      	cmp	r3, #4
 8009e5a:	d112      	bne.n	8009e82 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8009e5c:	f107 0308 	add.w	r3, r7, #8
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fb1a 	bl	800a49c <VL53L0X_GetInterruptMaskStatus>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2b04      	cmp	r3, #4
 8009e70:	d103      	bne.n	8009e7a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	2201      	movs	r2, #1
 8009e76:	701a      	strb	r2, [r3, #0]
 8009e78:	e01c      	b.n	8009eb4 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	701a      	strb	r2, [r3, #0]
 8009e80:	e018      	b.n	8009eb4 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8009e82:	f107 030d 	add.w	r3, r7, #13
 8009e86:	461a      	mov	r2, r3
 8009e88:	2114      	movs	r1, #20
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f003 fc45 	bl	800d71a <VL53L0X_RdByte>
 8009e90:	4603      	mov	r3, r0
 8009e92:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8009e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10b      	bne.n	8009eb4 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8009e9c:	7b7b      	ldrb	r3, [r7, #13]
 8009e9e:	f003 0301 	and.w	r3, r3, #1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d003      	beq.n	8009eae <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	701a      	strb	r2, [r3, #0]
 8009eac:	e002      	b.n	8009eb4 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009ec0:	b5b0      	push	{r4, r5, r7, lr}
 8009ec2:	b096      	sub	sp, #88	; 0x58
 8009ec4:	af02      	add	r7, sp, #8
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8009ed0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009ed4:	230c      	movs	r3, #12
 8009ed6:	2114      	movs	r1, #20
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f003 fc79 	bl	800d7d0 <VL53L0X_ReadMulti>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8009ee4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f040 80d1 	bne.w	800a090 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8009efa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	021b      	lsls	r3, r3, #8
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	2200      	movs	r2, #0
 8009f14:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8009f16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	021b      	lsls	r3, r3, #8
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	4413      	add	r3, r2
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	025b      	lsls	r3, r3, #9
 8009f2c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f32:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8009f34:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	021b      	lsls	r3, r3, #8
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	4413      	add	r3, r2
 8009f46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8009f4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009f4e:	025b      	lsls	r3, r3, #9
 8009f50:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8009f56:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	021b      	lsls	r3, r3, #8
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	4413      	add	r3, r2
 8009f68:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009f72:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8009f74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8009f82:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8009f8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8009f8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f94:	d046      	beq.n	800a024 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8009f96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009f98:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009f9c:	fb02 f303 	mul.w	r3, r2, r3
 8009fa0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009fa4:	4a57      	ldr	r2, [pc, #348]	; (800a104 <VL53L0X_GetRangingMeasurementData+0x244>)
 8009fa6:	fb82 1203 	smull	r1, r2, r2, r3
 8009faa:	1192      	asrs	r2, r2, #6
 8009fac:	17db      	asrs	r3, r3, #31
 8009fae:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8009fb0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a1b      	ldr	r3, [r3, #32]
 8009fb8:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	7f1b      	ldrb	r3, [r3, #28]
 8009fbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8009fc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d02c      	beq.n	800a024 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8009fca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009fcc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009fd0:	fb02 f303 	mul.w	r3, r2, r3
 8009fd4:	121a      	asrs	r2, r3, #8
					<= 0) {
 8009fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d10d      	bne.n	8009ff8 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8009fdc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d004      	beq.n	8009fee <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8009fe4:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8009fe8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009fec:	e016      	b.n	800a01c <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8009fee:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8009ff2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009ff6:	e011      	b.n	800a01c <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8009ff8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009ffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ffe:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800a002:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a004:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800a008:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800a00c:	121b      	asrs	r3, r3, #8
 800a00e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800a010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a012:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800a014:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800a018:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800a01c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a020:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800a024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00d      	beq.n	800a048 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800a02c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a030:	089b      	lsrs	r3, r3, #2
 800a032:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800a038:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	019b      	lsls	r3, r3, #6
 800a040:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	75da      	strb	r2, [r3, #23]
 800a046:	e006      	b.n	800a056 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a04e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2200      	movs	r2, #0
 800a054:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800a056:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a05a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800a05e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800a062:	9301      	str	r3, [sp, #4]
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	4613      	mov	r3, r2
 800a06a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f002 ff51 	bl	800cf14 <VL53L0X_get_pal_range_status>
 800a072:	4603      	mov	r3, r0
 800a074:	461a      	mov	r2, r3
 800a076:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a07a:	4313      	orrs	r3, r2
 800a07c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800a080:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a084:	2b00      	cmp	r3, #0
 800a086:	d103      	bne.n	800a090 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800a088:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a090:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a094:	2b00      	cmp	r3, #0
 800a096:	d12f      	bne.n	800a0f8 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f107 040c 	add.w	r4, r7, #12
 800a09e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a0a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a0aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800a0b2:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800a0b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800a0c0:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800a0c6:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800a0cc:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800a0d2:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800a0d8:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800a0de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800a0e8:	f107 050c 	add.w	r5, r7, #12
 800a0ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a0f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a0f8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3750      	adds	r7, #80	; 0x50
 800a100:	46bd      	mov	sp, r7
 800a102:	bdb0      	pop	{r4, r5, r7, pc}
 800a104:	10624dd3 	.word	0x10624dd3

0800a108 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a112:	2300      	movs	r3, #0
 800a114:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800a116:	2100      	movs	r1, #0
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7ff f8e5 	bl	80092e8 <VL53L0X_SetDeviceMode>
 800a11e:	4603      	mov	r3, r0
 800a120:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d104      	bne.n	800a134 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7ff fd4c 	bl	8009bc8 <VL53L0X_PerformSingleMeasurement>
 800a130:	4603      	mov	r3, r0
 800a132:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d105      	bne.n	800a148 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7ff febe 	bl	8009ec0 <VL53L0X_GetRangingMeasurementData>
 800a144:	4603      	mov	r3, r0
 800a146:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800a148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d105      	bne.n	800a15c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a150:	2100      	movs	r1, #0
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f962 	bl	800a41c <VL53L0X_ClearInterruptMask>
 800a158:	4603      	mov	r3, r0
 800a15a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800a15c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	4608      	mov	r0, r1
 800a172:	4611      	mov	r1, r2
 800a174:	461a      	mov	r2, r3
 800a176:	4603      	mov	r3, r0
 800a178:	70fb      	strb	r3, [r7, #3]
 800a17a:	460b      	mov	r3, r1
 800a17c:	70bb      	strb	r3, [r7, #2]
 800a17e:	4613      	mov	r3, r2
 800a180:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a182:	2300      	movs	r3, #0
 800a184:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800a186:	78fb      	ldrb	r3, [r7, #3]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800a18c:	23f6      	movs	r3, #246	; 0xf6
 800a18e:	73fb      	strb	r3, [r7, #15]
 800a190:	e107      	b.n	800a3a2 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800a192:	78bb      	ldrb	r3, [r7, #2]
 800a194:	2b14      	cmp	r3, #20
 800a196:	d110      	bne.n	800a1ba <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a198:	7e3b      	ldrb	r3, [r7, #24]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d102      	bne.n	800a1a4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800a19e:	2310      	movs	r3, #16
 800a1a0:	73bb      	strb	r3, [r7, #14]
 800a1a2:	e001      	b.n	800a1a8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800a1a8:	7bbb      	ldrb	r3, [r7, #14]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	2184      	movs	r1, #132	; 0x84
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f003 fbae 	bl	800d910 <VL53L0X_WrByte>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	73fb      	strb	r3, [r7, #15]
 800a1b8:	e0f3      	b.n	800a3a2 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800a1ba:	78bb      	ldrb	r3, [r7, #2]
 800a1bc:	2b15      	cmp	r3, #21
 800a1be:	f040 8097 	bne.w	800a2f0 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	21ff      	movs	r1, #255	; 0xff
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f003 fba2 	bl	800d910 <VL53L0X_WrByte>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	2100      	movs	r1, #0
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f003 fb98 	bl	800d910 <VL53L0X_WrByte>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	21ff      	movs	r1, #255	; 0xff
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f003 fb8e 	bl	800d910 <VL53L0X_WrByte>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a1fe:	2201      	movs	r2, #1
 800a200:	2180      	movs	r1, #128	; 0x80
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f003 fb84 	bl	800d910 <VL53L0X_WrByte>
 800a208:	4603      	mov	r3, r0
 800a20a:	461a      	mov	r2, r3
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	4313      	orrs	r3, r2
 800a210:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800a212:	2202      	movs	r2, #2
 800a214:	2185      	movs	r1, #133	; 0x85
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f003 fb7a 	bl	800d910 <VL53L0X_WrByte>
 800a21c:	4603      	mov	r3, r0
 800a21e:	461a      	mov	r2, r3
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	4313      	orrs	r3, r2
 800a224:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800a226:	2204      	movs	r2, #4
 800a228:	21ff      	movs	r1, #255	; 0xff
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f003 fb70 	bl	800d910 <VL53L0X_WrByte>
 800a230:	4603      	mov	r3, r0
 800a232:	461a      	mov	r2, r3
 800a234:	7bfb      	ldrb	r3, [r7, #15]
 800a236:	4313      	orrs	r3, r2
 800a238:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800a23a:	2200      	movs	r2, #0
 800a23c:	21cd      	movs	r1, #205	; 0xcd
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f003 fb66 	bl	800d910 <VL53L0X_WrByte>
 800a244:	4603      	mov	r3, r0
 800a246:	461a      	mov	r2, r3
 800a248:	7bfb      	ldrb	r3, [r7, #15]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800a24e:	2211      	movs	r2, #17
 800a250:	21cc      	movs	r1, #204	; 0xcc
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f003 fb5c 	bl	800d910 <VL53L0X_WrByte>
 800a258:	4603      	mov	r3, r0
 800a25a:	461a      	mov	r2, r3
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
 800a25e:	4313      	orrs	r3, r2
 800a260:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800a262:	2207      	movs	r2, #7
 800a264:	21ff      	movs	r1, #255	; 0xff
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f003 fb52 	bl	800d910 <VL53L0X_WrByte>
 800a26c:	4603      	mov	r3, r0
 800a26e:	461a      	mov	r2, r3
 800a270:	7bfb      	ldrb	r3, [r7, #15]
 800a272:	4313      	orrs	r3, r2
 800a274:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800a276:	2200      	movs	r2, #0
 800a278:	21be      	movs	r1, #190	; 0xbe
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f003 fb48 	bl	800d910 <VL53L0X_WrByte>
 800a280:	4603      	mov	r3, r0
 800a282:	461a      	mov	r2, r3
 800a284:	7bfb      	ldrb	r3, [r7, #15]
 800a286:	4313      	orrs	r3, r2
 800a288:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800a28a:	2206      	movs	r2, #6
 800a28c:	21ff      	movs	r1, #255	; 0xff
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f003 fb3e 	bl	800d910 <VL53L0X_WrByte>
 800a294:	4603      	mov	r3, r0
 800a296:	461a      	mov	r2, r3
 800a298:	7bfb      	ldrb	r3, [r7, #15]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800a29e:	2209      	movs	r2, #9
 800a2a0:	21cc      	movs	r1, #204	; 0xcc
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f003 fb34 	bl	800d910 <VL53L0X_WrByte>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	21ff      	movs	r1, #255	; 0xff
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f003 fb2a 	bl	800d910 <VL53L0X_WrByte>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	461a      	mov	r2, r3
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	21ff      	movs	r1, #255	; 0xff
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f003 fb20 	bl	800d910 <VL53L0X_WrByte>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a2da:	2200      	movs	r2, #0
 800a2dc:	2100      	movs	r1, #0
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f003 fb16 	bl	800d910 <VL53L0X_WrByte>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	73fb      	strb	r3, [r7, #15]
 800a2ee:	e058      	b.n	800a3a2 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800a2f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d121      	bne.n	800a33c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800a2f8:	787b      	ldrb	r3, [r7, #1]
 800a2fa:	2b04      	cmp	r3, #4
 800a2fc:	d81b      	bhi.n	800a336 <VL53L0X_SetGpioConfig+0x1ce>
 800a2fe:	a201      	add	r2, pc, #4	; (adr r2, 800a304 <VL53L0X_SetGpioConfig+0x19c>)
 800a300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a304:	0800a319 	.word	0x0800a319
 800a308:	0800a31f 	.word	0x0800a31f
 800a30c:	0800a325 	.word	0x0800a325
 800a310:	0800a32b 	.word	0x0800a32b
 800a314:	0800a331 	.word	0x0800a331
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800a318:	2300      	movs	r3, #0
 800a31a:	73bb      	strb	r3, [r7, #14]
				break;
 800a31c:	e00f      	b.n	800a33e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800a31e:	2301      	movs	r3, #1
 800a320:	73bb      	strb	r3, [r7, #14]
				break;
 800a322:	e00c      	b.n	800a33e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800a324:	2302      	movs	r3, #2
 800a326:	73bb      	strb	r3, [r7, #14]
				break;
 800a328:	e009      	b.n	800a33e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800a32a:	2303      	movs	r3, #3
 800a32c:	73bb      	strb	r3, [r7, #14]
				break;
 800a32e:	e006      	b.n	800a33e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800a330:	2304      	movs	r3, #4
 800a332:	73bb      	strb	r3, [r7, #14]
				break;
 800a334:	e003      	b.n	800a33e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800a336:	23f5      	movs	r3, #245	; 0xf5
 800a338:	73fb      	strb	r3, [r7, #15]
 800a33a:	e000      	b.n	800a33e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800a33c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800a33e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d107      	bne.n	800a356 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800a346:	7bbb      	ldrb	r3, [r7, #14]
 800a348:	461a      	mov	r2, r3
 800a34a:	210a      	movs	r1, #10
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f003 fadf 	bl	800d910 <VL53L0X_WrByte>
 800a352:	4603      	mov	r3, r0
 800a354:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800a356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10f      	bne.n	800a37e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a35e:	7e3b      	ldrb	r3, [r7, #24]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d102      	bne.n	800a36a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800a364:	2300      	movs	r3, #0
 800a366:	73bb      	strb	r3, [r7, #14]
 800a368:	e001      	b.n	800a36e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800a36a:	2310      	movs	r3, #16
 800a36c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800a36e:	7bbb      	ldrb	r3, [r7, #14]
 800a370:	22ef      	movs	r2, #239	; 0xef
 800a372:	2184      	movs	r1, #132	; 0x84
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f003 fb19 	bl	800d9ac <VL53L0X_UpdateByte>
 800a37a:	4603      	mov	r3, r0
 800a37c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800a37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d103      	bne.n	800a38e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	787a      	ldrb	r2, [r7, #1]
 800a38a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800a38e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d105      	bne.n	800a3a2 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a396:	2100      	movs	r1, #0
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f83f 	bl	800a41c <VL53L0X_ClearInterruptMask>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a3a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop

0800a3b0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	607a      	str	r2, [r7, #4]
 800a3ba:	603b      	str	r3, [r7, #0]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800a3c4:	f107 0314 	add.w	r3, r7, #20
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	210e      	movs	r1, #14
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f003 fa2b 	bl	800d828 <VL53L0X_RdWord>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a3d6:	8abb      	ldrh	r3, [r7, #20]
 800a3d8:	045b      	lsls	r3, r3, #17
 800a3da:	461a      	mov	r2, r3
 800a3dc:	4b0e      	ldr	r3, [pc, #56]	; (800a418 <VL53L0X_GetInterruptThresholds+0x68>)
 800a3de:	4013      	ands	r3, r2
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800a3e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10f      	bne.n	800a40c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800a3ec:	f107 0314 	add.w	r3, r7, #20
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	210c      	movs	r1, #12
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f003 fa17 	bl	800d828 <VL53L0X_RdWord>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a3fe:	8abb      	ldrh	r3, [r7, #20]
 800a400:	045b      	lsls	r3, r3, #17
 800a402:	461a      	mov	r2, r3
 800a404:	4b04      	ldr	r3, [pc, #16]	; (800a418 <VL53L0X_GetInterruptThresholds+0x68>)
 800a406:	4013      	ands	r3, r2
		*pThresholdHigh =
 800a408:	683a      	ldr	r2, [r7, #0]
 800a40a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a40c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3718      	adds	r7, #24
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	1ffe0000 	.word	0x1ffe0000

0800a41c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a426:	2300      	movs	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800a42e:	2201      	movs	r2, #1
 800a430:	210b      	movs	r1, #11
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f003 fa6c 	bl	800d910 <VL53L0X_WrByte>
 800a438:	4603      	mov	r3, r0
 800a43a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800a43c:	2200      	movs	r2, #0
 800a43e:	210b      	movs	r1, #11
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f003 fa65 	bl	800d910 <VL53L0X_WrByte>
 800a446:	4603      	mov	r3, r0
 800a448:	461a      	mov	r2, r3
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800a450:	f107 030d 	add.w	r3, r7, #13
 800a454:	461a      	mov	r2, r3
 800a456:	2113      	movs	r1, #19
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f003 f95e 	bl	800d71a <VL53L0X_RdByte>
 800a45e:	4603      	mov	r3, r0
 800a460:	461a      	mov	r2, r3
 800a462:	7bfb      	ldrb	r3, [r7, #15]
 800a464:	4313      	orrs	r3, r2
 800a466:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	3301      	adds	r3, #1
 800a46c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800a46e:	7b7b      	ldrb	r3, [r7, #13]
 800a470:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800a474:	2b00      	cmp	r3, #0
 800a476:	d006      	beq.n	800a486 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800a478:	7bbb      	ldrb	r3, [r7, #14]
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d803      	bhi.n	800a486 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800a47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d0d3      	beq.n	800a42e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800a486:	7bbb      	ldrb	r3, [r7, #14]
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d901      	bls.n	800a490 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800a48c:	23f4      	movs	r3, #244	; 0xf4
 800a48e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a490:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800a4aa:	f107 030e 	add.w	r3, r7, #14
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	2113      	movs	r1, #19
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f003 f931 	bl	800d71a <VL53L0X_RdByte>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800a4bc:	7bbb      	ldrb	r3, [r7, #14]
 800a4be:	f003 0207 	and.w	r2, r3, #7
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800a4c6:	7bbb      	ldrb	r3, [r7, #14]
 800a4c8:	f003 0318 	and.w	r3, r3, #24
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800a4d0:	23fa      	movs	r3, #250	; 0xfa
 800a4d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a4d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	68b9      	ldr	r1, [r7, #8]
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f000 fa4a 	bl	800a98e <VL53L0X_perform_ref_spad_management>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800a4fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a502:	4618      	mov	r0, r3
 800a504:	3718      	adds	r7, #24
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
	...

0800a50c <VL53L0X_set_offset_calibration_data_micro_meter>:
}


VL53L0X_Error VL53L0X_set_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t OffsetCalibrationDataMicroMeter)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a516:	2300      	movs	r3, #0
 800a518:	76fb      	strb	r3, [r7, #27]
	int32_t cMaxOffsetMicroMeter = 511000;
 800a51a:	4b1d      	ldr	r3, [pc, #116]	; (800a590 <VL53L0X_set_offset_calibration_data_micro_meter+0x84>)
 800a51c:	617b      	str	r3, [r7, #20]
	int32_t cMinOffsetMicroMeter = -512000;
 800a51e:	4b1d      	ldr	r3, [pc, #116]	; (800a594 <VL53L0X_set_offset_calibration_data_micro_meter+0x88>)
 800a520:	613b      	str	r3, [r7, #16]
	int16_t cOffsetRange = 4096;
 800a522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a526:	81fb      	strh	r3, [r7, #14]
	uint32_t encodedOffsetVal;

	LOG_FUNCTION_START("");

	if (OffsetCalibrationDataMicroMeter > cMaxOffsetMicroMeter)
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	dd02      	ble.n	800a536 <VL53L0X_set_offset_calibration_data_micro_meter+0x2a>
		OffsetCalibrationDataMicroMeter = cMaxOffsetMicroMeter;
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	603b      	str	r3, [r7, #0]
 800a534:	e005      	b.n	800a542 <VL53L0X_set_offset_calibration_data_micro_meter+0x36>
	else if (OffsetCalibrationDataMicroMeter < cMinOffsetMicroMeter)
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	da01      	bge.n	800a542 <VL53L0X_set_offset_calibration_data_micro_meter+0x36>
		OffsetCalibrationDataMicroMeter = cMinOffsetMicroMeter;
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	603b      	str	r3, [r7, #0]

	/* The offset register is 10.2 format and units are mm
	 * therefore conversion is applied by a division of
	 * 250.
	 */
	if (OffsetCalibrationDataMicroMeter >= 0) {
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	db08      	blt.n	800a55a <VL53L0X_set_offset_calibration_data_micro_meter+0x4e>
		encodedOffsetVal =
			OffsetCalibrationDataMicroMeter/250;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	4a13      	ldr	r2, [pc, #76]	; (800a598 <VL53L0X_set_offset_calibration_data_micro_meter+0x8c>)
 800a54c:	fb82 1203 	smull	r1, r2, r2, r3
 800a550:	1112      	asrs	r2, r2, #4
 800a552:	17db      	asrs	r3, r3, #31
 800a554:	1ad3      	subs	r3, r2, r3
		encodedOffsetVal =
 800a556:	61fb      	str	r3, [r7, #28]
 800a558:	e00a      	b.n	800a570 <VL53L0X_set_offset_calibration_data_micro_meter+0x64>
	} else {
		encodedOffsetVal =
			cOffsetRange +
 800a55a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
			OffsetCalibrationDataMicroMeter/250;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	490d      	ldr	r1, [pc, #52]	; (800a598 <VL53L0X_set_offset_calibration_data_micro_meter+0x8c>)
 800a562:	fb81 0103 	smull	r0, r1, r1, r3
 800a566:	1109      	asrs	r1, r1, #4
 800a568:	17db      	asrs	r3, r3, #31
 800a56a:	1acb      	subs	r3, r1, r3
			cOffsetRange +
 800a56c:	4413      	add	r3, r2
		encodedOffsetVal =
 800a56e:	61fb      	str	r3, [r7, #28]
	}

	Status = VL53L0X_WrWord(Dev,
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	b29b      	uxth	r3, r3
 800a574:	461a      	mov	r2, r3
 800a576:	2128      	movs	r1, #40	; 0x28
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f003 f9ed 	bl	800d958 <VL53L0X_WrWord>
 800a57e:	4603      	mov	r3, r0
 800a580:	76fb      	strb	r3, [r7, #27]
		VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
		encodedOffsetVal);

	LOG_FUNCTION_END(Status);
	return Status;
 800a582:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3720      	adds	r7, #32
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	0007cc18 	.word	0x0007cc18
 800a594:	fff83000 	.word	0xfff83000
 800a598:	10624dd3 	.word	0x10624dd3

0800a59c <VL53L0X_get_offset_calibration_data_micro_meter>:

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800a5aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a5ae:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800a5b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5b4:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800a5b6:	f107 0308 	add.w	r3, r7, #8
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	2128      	movs	r1, #40	; 0x28
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f003 f932 	bl	800d828 <VL53L0X_RdWord>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800a5c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d11e      	bne.n	800a60e <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800a5d0:	893b      	ldrh	r3, [r7, #8]
 800a5d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800a5da:	893b      	ldrh	r3, [r7, #8]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	dd0b      	ble.n	800a5fe <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800a5e6:	893a      	ldrh	r2, [r7, #8]
 800a5e8:	897b      	ldrh	r3, [r7, #10]
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	b21b      	sxth	r3, r3
 800a5f0:	461a      	mov	r2, r3
					* 250;
 800a5f2:	23fa      	movs	r3, #250	; 0xfa
 800a5f4:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	601a      	str	r2, [r3, #0]
 800a5fc:	e007      	b.n	800a60e <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800a5fe:	893b      	ldrh	r3, [r7, #8]
 800a600:	b21b      	sxth	r3, r3
 800a602:	461a      	mov	r2, r3
 800a604:	23fa      	movs	r3, #250	; 0xfa
 800a606:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800a60e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b08b      	sub	sp, #44	; 0x2c
 800a61e:	af00      	add	r7, sp, #0
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	607a      	str	r2, [r7, #4]
 800a626:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800a628:	2308      	movs	r3, #8
 800a62a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800a62c:	2300      	movs	r3, #0
 800a62e:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	f04f 32ff 	mov.w	r2, #4294967295
 800a636:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a640:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	69ba      	ldr	r2, [r7, #24]
 800a646:	fbb3 f2f2 	udiv	r2, r3, r2
 800a64a:	69b9      	ldr	r1, [r7, #24]
 800a64c:	fb01 f202 	mul.w	r2, r1, r2
 800a650:	1a9b      	subs	r3, r3, r2
 800a652:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	627b      	str	r3, [r7, #36]	; 0x24
 800a658:	e030      	b.n	800a6bc <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	4413      	add	r3, r2
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800a668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d11e      	bne.n	800a6ae <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800a670:	7ffa      	ldrb	r2, [r7, #31]
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	fa42 f303 	asr.w	r3, r2, r3
 800a678:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800a67e:	e016      	b.n	800a6ae <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800a680:	7ffb      	ldrb	r3, [r7, #31]
 800a682:	f003 0301 	and.w	r3, r3, #1
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00b      	beq.n	800a6a2 <get_next_good_spad+0x88>
				success = 1;
 800a68a:	2301      	movs	r3, #1
 800a68c:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	69ba      	ldr	r2, [r7, #24]
 800a692:	fb03 f202 	mul.w	r2, r3, r2
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	4413      	add	r3, r2
 800a69a:	461a      	mov	r2, r3
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	601a      	str	r2, [r3, #0]
				break;
 800a6a0:	e009      	b.n	800a6b6 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800a6a2:	7ffb      	ldrb	r3, [r7, #31]
 800a6a4:	085b      	lsrs	r3, r3, #1
 800a6a6:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800a6ae:	6a3a      	ldr	r2, [r7, #32]
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d3e4      	bcc.n	800a680 <get_next_good_spad+0x66>
				coarseIndex++) {
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a6bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d202      	bcs.n	800a6ca <get_next_good_spad+0xb0>
 800a6c4:	7fbb      	ldrb	r3, [r7, #30]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d0c7      	beq.n	800a65a <get_next_good_spad+0x40>
		}
	}
}
 800a6ca:	bf00      	nop
 800a6cc:	372c      	adds	r7, #44	; 0x2c
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bc80      	pop	{r7}
 800a6d2:	4770      	bx	lr

0800a6d4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	099b      	lsrs	r3, r3, #6
 800a6e4:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800a6e6:	4a07      	ldr	r2, [pc, #28]	; (800a704 <is_aperture+0x30>)
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d101      	bne.n	800a6f6 <is_aperture+0x22>
		isAperture = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bc80      	pop	{r7}
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	200002e8 	.word	0x200002e8

0800a708 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800a708:	b480      	push	{r7}
 800a70a:	b089      	sub	sp, #36	; 0x24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a714:	2300      	movs	r3, #0
 800a716:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800a718:	2308      	movs	r3, #8
 800a71a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	fbb2 f3f3 	udiv	r3, r2, r3
 800a724:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	69ba      	ldr	r2, [r7, #24]
 800a72a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a72e:	69b9      	ldr	r1, [r7, #24]
 800a730:	fb01 f202 	mul.w	r2, r1, r2
 800a734:	1a9b      	subs	r3, r3, r2
 800a736:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d302      	bcc.n	800a746 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a740:	23ce      	movs	r3, #206	; 0xce
 800a742:	77fb      	strb	r3, [r7, #31]
 800a744:	e010      	b.n	800a768 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	4413      	add	r3, r2
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	b25a      	sxtb	r2, r3
 800a750:	2101      	movs	r1, #1
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	fa01 f303 	lsl.w	r3, r1, r3
 800a758:	b25b      	sxtb	r3, r3
 800a75a:	4313      	orrs	r3, r2
 800a75c:	b259      	sxtb	r1, r3
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	4413      	add	r3, r2
 800a764:	b2ca      	uxtb	r2, r1
 800a766:	701a      	strb	r2, [r3, #0]

	return status;
 800a768:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3724      	adds	r7, #36	; 0x24
 800a770:	46bd      	mov	sp, r7
 800a772:	bc80      	pop	{r7}
 800a774:	4770      	bx	lr

0800a776 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b084      	sub	sp, #16
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800a780:	2306      	movs	r3, #6
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	21b0      	movs	r1, #176	; 0xb0
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f002 fff2 	bl	800d770 <VL53L0X_WriteMulti>
 800a78c:	4603      	mov	r3, r0
 800a78e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800a790:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800a7a6:	2306      	movs	r3, #6
 800a7a8:	683a      	ldr	r2, [r7, #0]
 800a7aa:	21b0      	movs	r1, #176	; 0xb0
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f003 f80f 	bl	800d7d0 <VL53L0X_ReadMulti>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800a7b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b08c      	sub	sp, #48	; 0x30
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	60f8      	str	r0, [r7, #12]
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	603b      	str	r3, [r7, #0]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800a7d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7da:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800a7dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7de:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7e4:	e02b      	b.n	800a83e <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800a7e6:	f107 031c 	add.w	r3, r7, #28
 800a7ea:	6a3a      	ldr	r2, [r7, #32]
 800a7ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7ff ff13 	bl	800a61a <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fa:	d103      	bne.n	800a804 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a7fc:	23ce      	movs	r3, #206	; 0xce
 800a7fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800a802:	e020      	b.n	800a846 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	461a      	mov	r2, r3
 800a808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a80a:	4413      	add	r3, r2
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7ff ff61 	bl	800a6d4 <is_aperture>
 800a812:	4603      	mov	r3, r0
 800a814:	461a      	mov	r2, r3
 800a816:	7afb      	ldrb	r3, [r7, #11]
 800a818:	4293      	cmp	r3, r2
 800a81a:	d003      	beq.n	800a824 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a81c:	23ce      	movs	r3, #206	; 0xce
 800a81e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800a822:	e010      	b.n	800a846 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800a828:	6a3a      	ldr	r2, [r7, #32]
 800a82a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a82c:	6838      	ldr	r0, [r7, #0]
 800a82e:	f7ff ff6b 	bl	800a708 <enable_spad_bit>
		currentSpad++;
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	3301      	adds	r3, #1
 800a836:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83a:	3301      	adds	r3, #1
 800a83c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a83e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a842:	429a      	cmp	r2, r3
 800a844:	d3cf      	bcc.n	800a7e6 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800a846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a848:	6a3a      	ldr	r2, [r7, #32]
 800a84a:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800a84c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a850:	2b00      	cmp	r3, #0
 800a852:	d106      	bne.n	800a862 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f7ff ff8d 	bl	800a776 <set_ref_spad_map>
 800a85c:	4603      	mov	r3, r0
 800a85e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800a862:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a866:	2b00      	cmp	r3, #0
 800a868:	d121      	bne.n	800a8ae <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800a86a:	f107 0314 	add.w	r3, r7, #20
 800a86e:	4619      	mov	r1, r3
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f7ff ff93 	bl	800a79c <get_ref_spad_map>
 800a876:	4603      	mov	r3, r0
 800a878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800a880:	e011      	b.n	800a8a6 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a886:	4413      	add	r3, r2
 800a888:	781a      	ldrb	r2, [r3, #0]
 800a88a:	f107 0114 	add.w	r1, r7, #20
 800a88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a890:	440b      	add	r3, r1
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	429a      	cmp	r2, r3
 800a896:	d003      	beq.n	800a8a0 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a898:	23ce      	movs	r3, #206	; 0xce
 800a89a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800a89e:	e006      	b.n	800a8ae <enable_ref_spads+0xec>
			}
			i++;
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800a8a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d3e9      	bcc.n	800a882 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800a8ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3730      	adds	r7, #48	; 0x30
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b08a      	sub	sp, #40	; 0x28
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a8d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800a8da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d107      	bne.n	800a8f2 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800a8e2:	22c0      	movs	r2, #192	; 0xc0
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f003 f812 	bl	800d910 <VL53L0X_WrByte>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800a8f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d108      	bne.n	800a90c <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800a8fa:	f107 0308 	add.w	r3, r7, #8
 800a8fe:	4619      	mov	r1, r3
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f7ff fc01 	bl	800a108 <VL53L0X_PerformSingleRangingMeasurement>
 800a906:	4603      	mov	r3, r0
 800a908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800a90c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a910:	2b00      	cmp	r3, #0
 800a912:	d107      	bne.n	800a924 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a914:	2201      	movs	r2, #1
 800a916:	21ff      	movs	r1, #255	; 0xff
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f002 fff9 	bl	800d910 <VL53L0X_WrByte>
 800a91e:	4603      	mov	r3, r0
 800a920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800a924:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d107      	bne.n	800a93c <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	21b6      	movs	r1, #182	; 0xb6
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f002 ff79 	bl	800d828 <VL53L0X_RdWord>
 800a936:	4603      	mov	r3, r0
 800a938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800a93c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a940:	2b00      	cmp	r3, #0
 800a942:	d107      	bne.n	800a954 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a944:	2200      	movs	r2, #0
 800a946:	21ff      	movs	r1, #255	; 0xff
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f002 ffe1 	bl	800d910 <VL53L0X_WrByte>
 800a94e:	4603      	mov	r3, r0
 800a950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800a954:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d112      	bne.n	800a982 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a95c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a960:	461a      	mov	r2, r3
 800a962:	2101      	movs	r1, #1
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f002 ffd3 	bl	800d910 <VL53L0X_WrByte>
 800a96a:	4603      	mov	r3, r0
 800a96c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800a970:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a974:	2b00      	cmp	r3, #0
 800a976:	d104      	bne.n	800a982 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a97e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800a982:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a986:	4618      	mov	r0, r3
 800a988:	3728      	adds	r7, #40	; 0x28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800a98e:	b590      	push	{r4, r7, lr}
 800a990:	b09d      	sub	sp, #116	; 0x74
 800a992:	af06      	add	r7, sp, #24
 800a994:	60f8      	str	r0, [r7, #12]
 800a996:	60b9      	str	r1, [r7, #8]
 800a998:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a99a:	2300      	movs	r3, #0
 800a99c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800a9a0:	23b4      	movs	r3, #180	; 0xb4
 800a9a2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800a9aa:	232c      	movs	r3, #44	; 0x2c
 800a9ac:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800a9ba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a9be:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800a9c8:	2306      	movs	r3, #6
 800a9ca:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 800a9f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9f8:	e009      	b.n	800aa0e <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800aa04:	2200      	movs	r2, #0
 800aa06:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800aa08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d3f1      	bcc.n	800a9fa <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aa16:	2201      	movs	r2, #1
 800aa18:	21ff      	movs	r1, #255	; 0xff
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f002 ff78 	bl	800d910 <VL53L0X_WrByte>
 800aa20:	4603      	mov	r3, r0
 800aa22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800aa26:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d107      	bne.n	800aa3e <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800aa2e:	2200      	movs	r2, #0
 800aa30:	214f      	movs	r1, #79	; 0x4f
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f002 ff6c 	bl	800d910 <VL53L0X_WrByte>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800aa3e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d107      	bne.n	800aa56 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800aa46:	222c      	movs	r2, #44	; 0x2c
 800aa48:	214e      	movs	r1, #78	; 0x4e
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f002 ff60 	bl	800d910 <VL53L0X_WrByte>
 800aa50:	4603      	mov	r3, r0
 800aa52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800aa56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d107      	bne.n	800aa6e <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800aa5e:	2200      	movs	r2, #0
 800aa60:	21ff      	movs	r1, #255	; 0xff
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f002 ff54 	bl	800d910 <VL53L0X_WrByte>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800aa6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d109      	bne.n	800aa8a <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800aa76:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	21b6      	movs	r1, #182	; 0xb6
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f002 ff46 	bl	800d910 <VL53L0X_WrByte>
 800aa84:	4603      	mov	r3, r0
 800aa86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800aa8a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d107      	bne.n	800aaa2 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800aa92:	2200      	movs	r2, #0
 800aa94:	2180      	movs	r1, #128	; 0x80
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f002 ff3a 	bl	800d910 <VL53L0X_WrByte>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800aaa2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10a      	bne.n	800aac0 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800aaaa:	f107 0210 	add.w	r2, r7, #16
 800aaae:	f107 0111 	add.w	r1, r7, #17
 800aab2:	2300      	movs	r3, #0
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f000 fbbb 	bl	800b230 <VL53L0X_perform_ref_calibration>
 800aaba:	4603      	mov	r3, r0
 800aabc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800aac0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d121      	bne.n	800ab0c <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800aacc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aace:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800aad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aad6:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800aae4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800aae8:	f107 0218 	add.w	r2, r7, #24
 800aaec:	9204      	str	r2, [sp, #16]
 800aaee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaf0:	9203      	str	r2, [sp, #12]
 800aaf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aaf4:	9202      	str	r2, [sp, #8]
 800aaf6:	9301      	str	r3, [sp, #4]
 800aaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	4623      	mov	r3, r4
 800aafe:	4602      	mov	r2, r0
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f7ff fe5e 	bl	800a7c2 <enable_ref_spads>
 800ab06:	4603      	mov	r3, r0
 800ab08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ab0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d174      	bne.n	800abfe <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800ab18:	f107 0312 	add.w	r3, r7, #18
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f7ff fecb 	bl	800a8ba <perform_ref_signal_measurement>
 800ab24:	4603      	mov	r3, r0
 800ab26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800ab2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d161      	bne.n	800abf6 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800ab32:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800ab34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d25d      	bcs.n	800abf6 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab3e:	e009      	b.n	800ab54 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab44:	4413      	add	r3, r2
 800ab46:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800ab4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab50:	3301      	adds	r3, #1
 800ab52:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d3f1      	bcc.n	800ab40 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800ab5c:	e002      	b.n	800ab64 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800ab5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab60:	3301      	adds	r3, #1
 800ab62:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800ab64:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800ab68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab6a:	4413      	add	r3, r2
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7ff fdb1 	bl	800a6d4 <is_aperture>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d103      	bne.n	800ab80 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800ab78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d3ee      	bcc.n	800ab5e <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800ab80:	2301      	movs	r3, #1
 800ab82:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800ab84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab86:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800ab94:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ab98:	f107 0218 	add.w	r2, r7, #24
 800ab9c:	9204      	str	r2, [sp, #16]
 800ab9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aba0:	9203      	str	r2, [sp, #12]
 800aba2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aba4:	9202      	str	r2, [sp, #8]
 800aba6:	9301      	str	r3, [sp, #4]
 800aba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	4623      	mov	r3, r4
 800abae:	4602      	mov	r2, r0
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f7ff fe06 	bl	800a7c2 <enable_ref_spads>
 800abb6:	4603      	mov	r3, r0
 800abb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800abbc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d11b      	bne.n	800abfc <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800abc8:	f107 0312 	add.w	r3, r7, #18
 800abcc:	4619      	mov	r1, r3
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f7ff fe73 	bl	800a8ba <perform_ref_signal_measurement>
 800abd4:	4603      	mov	r3, r0
 800abd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800abda:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10c      	bne.n	800abfc <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800abe2:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800abe4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d208      	bcs.n	800abfc <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800abea:	2301      	movs	r3, #1
 800abec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800abf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf2:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800abf4:	e002      	b.n	800abfc <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abfa:	e000      	b.n	800abfe <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800abfc:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800abfe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f040 80af 	bne.w	800ad66 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800ac08:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800ac0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	f240 80aa 	bls.w	800ad66 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800ac12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac14:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800ac18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1a:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800ac22:	f107 031c 	add.w	r3, r7, #28
 800ac26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f002 ff79 	bl	800db20 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800ac2e:	8a7b      	ldrh	r3, [r7, #18]
 800ac30:	461a      	mov	r2, r3
 800ac32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ac34:	1ad3      	subs	r3, r2, r3
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	bfb8      	it	lt
 800ac3a:	425b      	neglt	r3, r3
 800ac3c:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800ac44:	e086      	b.n	800ad54 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800ac4c:	f107 0314 	add.w	r3, r7, #20
 800ac50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac54:	f7ff fce1 	bl	800a61a <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac5e:	d103      	bne.n	800ac68 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ac60:	23ce      	movs	r3, #206	; 0xce
 800ac62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800ac66:	e07e      	b.n	800ad66 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800ac68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800ac6e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	4413      	add	r3, r2
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7ff fd2c 	bl	800a6d4 <is_aperture>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	461a      	mov	r2, r3
 800ac80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d003      	beq.n	800ac8e <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ac86:	23ce      	movs	r3, #206	; 0xce
 800ac88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800ac8c:	e06b      	b.n	800ad66 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800ac98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7ff fd33 	bl	800a708 <enable_spad_bit>
 800aca2:	4603      	mov	r3, r0
 800aca4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800aca8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10c      	bne.n	800acca <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800acb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acb2:	3301      	adds	r3, #1
 800acb4:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800acbc:	4619      	mov	r1, r3
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f7ff fd59 	bl	800a776 <set_ref_spad_map>
 800acc4:	4603      	mov	r3, r0
 800acc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800acca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d146      	bne.n	800ad60 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800acd2:	f107 0312 	add.w	r3, r7, #18
 800acd6:	4619      	mov	r1, r3
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f7ff fdee 	bl	800a8ba <perform_ref_signal_measurement>
 800acde:	4603      	mov	r3, r0
 800ace0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800ace4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d13b      	bne.n	800ad64 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800acec:	8a7b      	ldrh	r3, [r7, #18]
 800acee:	461a      	mov	r2, r3
 800acf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	bfb8      	it	lt
 800acf8:	425b      	neglt	r3, r3
 800acfa:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800acfc:	8a7b      	ldrh	r3, [r7, #18]
 800acfe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d21c      	bcs.n	800ad3e <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800ad04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d914      	bls.n	800ad36 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800ad0c:	f107 031c 	add.w	r3, r7, #28
 800ad10:	4619      	mov	r1, r3
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f7ff fd2f 	bl	800a776 <set_ref_spad_map>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800ad24:	f107 011c 	add.w	r1, r7, #28
 800ad28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f002 fef8 	bl	800db20 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800ad30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad32:	3b01      	subs	r3, #1
 800ad34:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800ad36:	2301      	movs	r3, #1
 800ad38:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad3c:	e00a      	b.n	800ad54 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800ad3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad40:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800ad48:	f107 031c 	add.w	r3, r7, #28
 800ad4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f002 fee6 	bl	800db20 <memcpy>
		while (!complete) {
 800ad54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f43f af74 	beq.w	800ac46 <VL53L0X_perform_ref_spad_management+0x2b8>
 800ad5e:	e002      	b.n	800ad66 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800ad60:	bf00      	nop
 800ad62:	e000      	b.n	800ad66 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800ad64:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ad66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d115      	bne.n	800ad9a <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad72:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800ad7a:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	781a      	ldrb	r2, [r3, #0]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800ad9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	375c      	adds	r7, #92	; 0x5c
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd90      	pop	{r4, r7, pc}

0800ada6 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800ada6:	b590      	push	{r4, r7, lr}
 800ada8:	b093      	sub	sp, #76	; 0x4c
 800adaa:	af06      	add	r7, sp, #24
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	4613      	mov	r3, r2
 800adb2:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adb4:	2300      	movs	r3, #0
 800adb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800adba:	2300      	movs	r3, #0
 800adbc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800adbe:	23b4      	movs	r3, #180	; 0xb4
 800adc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800adc4:	2306      	movs	r3, #6
 800adc6:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800adc8:	232c      	movs	r3, #44	; 0x2c
 800adca:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800adcc:	2201      	movs	r2, #1
 800adce:	21ff      	movs	r1, #255	; 0xff
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f002 fd9d 	bl	800d910 <VL53L0X_WrByte>
 800add6:	4603      	mov	r3, r0
 800add8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800addc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d107      	bne.n	800adf4 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800ade4:	2200      	movs	r2, #0
 800ade6:	214f      	movs	r1, #79	; 0x4f
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f002 fd91 	bl	800d910 <VL53L0X_WrByte>
 800adee:	4603      	mov	r3, r0
 800adf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800adf4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d107      	bne.n	800ae0c <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800adfc:	222c      	movs	r2, #44	; 0x2c
 800adfe:	214e      	movs	r1, #78	; 0x4e
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f002 fd85 	bl	800d910 <VL53L0X_WrByte>
 800ae06:	4603      	mov	r3, r0
 800ae08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800ae0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d107      	bne.n	800ae24 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ae14:	2200      	movs	r2, #0
 800ae16:	21ff      	movs	r1, #255	; 0xff
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f002 fd79 	bl	800d910 <VL53L0X_WrByte>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800ae24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d109      	bne.n	800ae40 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800ae2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae30:	461a      	mov	r2, r3
 800ae32:	21b6      	movs	r1, #182	; 0xb6
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f002 fd6b 	bl	800d910 <VL53L0X_WrByte>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800ae40:	2300      	movs	r3, #0
 800ae42:	627b      	str	r3, [r7, #36]	; 0x24
 800ae44:	e009      	b.n	800ae5a <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ae50:	2200      	movs	r2, #0
 800ae52:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	3301      	adds	r3, #1
 800ae58:	627b      	str	r3, [r7, #36]	; 0x24
 800ae5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d3f1      	bcc.n	800ae46 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800ae62:	79fb      	ldrb	r3, [r7, #7]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d011      	beq.n	800ae8c <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800ae68:	e002      	b.n	800ae70 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800ae6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800ae70:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ae74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae76:	4413      	add	r3, r2
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff fc2b 	bl	800a6d4 <is_aperture>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d103      	bne.n	800ae8c <VL53L0X_set_reference_spads+0xe6>
 800ae84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d3ee      	bcc.n	800ae6a <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800ae98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae9c:	79f9      	ldrb	r1, [r7, #7]
 800ae9e:	f107 0214 	add.w	r2, r7, #20
 800aea2:	9204      	str	r2, [sp, #16]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	9203      	str	r2, [sp, #12]
 800aea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeaa:	9202      	str	r2, [sp, #8]
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	4623      	mov	r3, r4
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f7ff fc83 	bl	800a7c2 <enable_ref_spads>
 800aebc:	4603      	mov	r3, r0
 800aebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800aec2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10c      	bne.n	800aee4 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	b2da      	uxtb	r2, r3
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	79fa      	ldrb	r2, [r7, #7]
 800aee0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800aee4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3734      	adds	r7, #52	; 0x34
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd90      	pop	{r4, r7, pc}

0800aef0 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	460b      	mov	r3, r1
 800aefa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aefc:	2300      	movs	r3, #0
 800aefe:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800af00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10a      	bne.n	800af1e <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800af08:	78fb      	ldrb	r3, [r7, #3]
 800af0a:	f043 0301 	orr.w	r3, r3, #1
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	461a      	mov	r2, r3
 800af12:	2100      	movs	r1, #0
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f002 fcfb 	bl	800d910 <VL53L0X_WrByte>
 800af1a:	4603      	mov	r3, r0
 800af1c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800af1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d104      	bne.n	800af30 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f9bf 	bl	800b2aa <VL53L0X_measurement_poll_for_completion>
 800af2c:	4603      	mov	r3, r0
 800af2e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800af30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d105      	bne.n	800af44 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800af38:	2100      	movs	r1, #0
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f7ff fa6e 	bl	800a41c <VL53L0X_ClearInterruptMask>
 800af40:	4603      	mov	r3, r0
 800af42:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800af44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d106      	bne.n	800af5a <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800af4c:	2200      	movs	r2, #0
 800af4e:	2100      	movs	r1, #0
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f002 fcdd 	bl	800d910 <VL53L0X_WrByte>
 800af56:	4603      	mov	r3, r0
 800af58:	73fb      	strb	r3, [r7, #15]

	return Status;
 800af5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b084      	sub	sp, #16
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	4608      	mov	r0, r1
 800af70:	4611      	mov	r1, r2
 800af72:	461a      	mov	r2, r3
 800af74:	4603      	mov	r3, r0
 800af76:	70fb      	strb	r3, [r7, #3]
 800af78:	460b      	mov	r3, r1
 800af7a:	70bb      	strb	r3, [r7, #2]
 800af7c:	4613      	mov	r3, r2
 800af7e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af80:	2300      	movs	r3, #0
 800af82:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800af88:	2201      	movs	r2, #1
 800af8a:	21ff      	movs	r1, #255	; 0xff
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f002 fcbf 	bl	800d910 <VL53L0X_WrByte>
 800af92:	4603      	mov	r3, r0
 800af94:	461a      	mov	r2, r3
 800af96:	7bfb      	ldrb	r3, [r7, #15]
 800af98:	4313      	orrs	r3, r2
 800af9a:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800af9c:	2200      	movs	r2, #0
 800af9e:	2100      	movs	r1, #0
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f002 fcb5 	bl	800d910 <VL53L0X_WrByte>
 800afa6:	4603      	mov	r3, r0
 800afa8:	461a      	mov	r2, r3
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
 800afac:	4313      	orrs	r3, r2
 800afae:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800afb0:	2200      	movs	r2, #0
 800afb2:	21ff      	movs	r1, #255	; 0xff
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f002 fcab 	bl	800d910 <VL53L0X_WrByte>
 800afba:	4603      	mov	r3, r0
 800afbc:	461a      	mov	r2, r3
 800afbe:	7bfb      	ldrb	r3, [r7, #15]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800afc4:	78fb      	ldrb	r3, [r7, #3]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d01e      	beq.n	800b008 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800afca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d009      	beq.n	800afe6 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800afd2:	69ba      	ldr	r2, [r7, #24]
 800afd4:	21cb      	movs	r1, #203	; 0xcb
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f002 fb9f 	bl	800d71a <VL53L0X_RdByte>
 800afdc:	4603      	mov	r3, r0
 800afde:	461a      	mov	r2, r3
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800afe6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800afea:	2b00      	cmp	r3, #0
 800afec:	d02a      	beq.n	800b044 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800afee:	f107 030e 	add.w	r3, r7, #14
 800aff2:	461a      	mov	r2, r3
 800aff4:	21ee      	movs	r1, #238	; 0xee
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f002 fb8f 	bl	800d71a <VL53L0X_RdByte>
 800affc:	4603      	mov	r3, r0
 800affe:	461a      	mov	r2, r3
 800b000:	7bfb      	ldrb	r3, [r7, #15]
 800b002:	4313      	orrs	r3, r2
 800b004:	73fb      	strb	r3, [r7, #15]
 800b006:	e01d      	b.n	800b044 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800b008:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00a      	beq.n	800b026 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800b010:	78bb      	ldrb	r3, [r7, #2]
 800b012:	461a      	mov	r2, r3
 800b014:	21cb      	movs	r1, #203	; 0xcb
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f002 fc7a 	bl	800d910 <VL53L0X_WrByte>
 800b01c:	4603      	mov	r3, r0
 800b01e:	461a      	mov	r2, r3
 800b020:	7bfb      	ldrb	r3, [r7, #15]
 800b022:	4313      	orrs	r3, r2
 800b024:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b026:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00a      	beq.n	800b044 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800b02e:	787b      	ldrb	r3, [r7, #1]
 800b030:	2280      	movs	r2, #128	; 0x80
 800b032:	21ee      	movs	r1, #238	; 0xee
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f002 fcb9 	bl	800d9ac <VL53L0X_UpdateByte>
 800b03a:	4603      	mov	r3, r0
 800b03c:	461a      	mov	r2, r3
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
 800b040:	4313      	orrs	r3, r2
 800b042:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b044:	2201      	movs	r2, #1
 800b046:	21ff      	movs	r1, #255	; 0xff
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f002 fc61 	bl	800d910 <VL53L0X_WrByte>
 800b04e:	4603      	mov	r3, r0
 800b050:	461a      	mov	r2, r3
 800b052:	7bfb      	ldrb	r3, [r7, #15]
 800b054:	4313      	orrs	r3, r2
 800b056:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b058:	2201      	movs	r2, #1
 800b05a:	2100      	movs	r1, #0
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f002 fc57 	bl	800d910 <VL53L0X_WrByte>
 800b062:	4603      	mov	r3, r0
 800b064:	461a      	mov	r2, r3
 800b066:	7bfb      	ldrb	r3, [r7, #15]
 800b068:	4313      	orrs	r3, r2
 800b06a:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b06c:	2200      	movs	r2, #0
 800b06e:	21ff      	movs	r1, #255	; 0xff
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f002 fc4d 	bl	800d910 <VL53L0X_WrByte>
 800b076:	4603      	mov	r3, r0
 800b078:	461a      	mov	r2, r3
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800b080:	7bbb      	ldrb	r3, [r7, #14]
 800b082:	f023 0310 	bic.w	r3, r3, #16
 800b086:	b2da      	uxtb	r2, r3
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	701a      	strb	r2, [r3, #0]

	return Status;
 800b08c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b08a      	sub	sp, #40	; 0x28
 800b09c:	af04      	add	r7, sp, #16
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	71fb      	strb	r3, [r7, #7]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b0c2:	79bb      	ldrb	r3, [r7, #6]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d003      	beq.n	800b0d0 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b0ce:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	2101      	movs	r1, #1
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f002 fc1b 	bl	800d910 <VL53L0X_WrByte>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b0de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d105      	bne.n	800b0f2 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800b0e6:	2140      	movs	r1, #64	; 0x40
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f7ff ff01 	bl	800aef0 <VL53L0X_perform_single_ref_calibration>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b0f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d115      	bne.n	800b126 <VL53L0X_perform_vhv_calibration+0x8e>
 800b0fa:	79fb      	ldrb	r3, [r7, #7]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d112      	bne.n	800b126 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b100:	7d39      	ldrb	r1, [r7, #20]
 800b102:	7d7a      	ldrb	r2, [r7, #21]
 800b104:	2300      	movs	r3, #0
 800b106:	9303      	str	r3, [sp, #12]
 800b108:	2301      	movs	r3, #1
 800b10a:	9302      	str	r3, [sp, #8]
 800b10c:	f107 0313 	add.w	r3, r7, #19
 800b110:	9301      	str	r3, [sp, #4]
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	460b      	mov	r3, r1
 800b118:	2101      	movs	r1, #1
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f7ff ff23 	bl	800af66 <VL53L0X_ref_calibration_io>
 800b120:	4603      	mov	r3, r0
 800b122:	75fb      	strb	r3, [r7, #23]
 800b124:	e002      	b.n	800b12c <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2200      	movs	r2, #0
 800b12a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b12c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d112      	bne.n	800b15a <VL53L0X_perform_vhv_calibration+0xc2>
 800b134:	79bb      	ldrb	r3, [r7, #6]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00f      	beq.n	800b15a <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b13a:	7dbb      	ldrb	r3, [r7, #22]
 800b13c:	461a      	mov	r2, r3
 800b13e:	2101      	movs	r1, #1
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f002 fbe5 	bl	800d910 <VL53L0X_WrByte>
 800b146:	4603      	mov	r3, r0
 800b148:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b14a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d103      	bne.n	800b15a <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	7dba      	ldrb	r2, [r7, #22]
 800b156:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b15a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b08a      	sub	sp, #40	; 0x28
 800b16a:	af04      	add	r7, sp, #16
 800b16c:	60f8      	str	r0, [r7, #12]
 800b16e:	60b9      	str	r1, [r7, #8]
 800b170:	4611      	mov	r1, r2
 800b172:	461a      	mov	r2, r3
 800b174:	460b      	mov	r3, r1
 800b176:	71fb      	strb	r3, [r7, #7]
 800b178:	4613      	mov	r3, r2
 800b17a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b17c:	2300      	movs	r3, #0
 800b17e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b184:	2300      	movs	r3, #0
 800b186:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b18c:	79bb      	ldrb	r3, [r7, #6]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d003      	beq.n	800b19a <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b198:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800b19a:	2202      	movs	r2, #2
 800b19c:	2101      	movs	r1, #1
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f002 fbb6 	bl	800d910 <VL53L0X_WrByte>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b1a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d105      	bne.n	800b1bc <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f7ff fe9c 	bl	800aef0 <VL53L0X_perform_single_ref_calibration>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b1bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d115      	bne.n	800b1f0 <VL53L0X_perform_phase_calibration+0x8a>
 800b1c4:	79fb      	ldrb	r3, [r7, #7]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d112      	bne.n	800b1f0 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b1ca:	7d39      	ldrb	r1, [r7, #20]
 800b1cc:	7d7a      	ldrb	r2, [r7, #21]
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	9303      	str	r3, [sp, #12]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	9302      	str	r3, [sp, #8]
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	9301      	str	r3, [sp, #4]
 800b1da:	f107 0313 	add.w	r3, r7, #19
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	2101      	movs	r1, #1
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f7ff febe 	bl	800af66 <VL53L0X_ref_calibration_io>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	75fb      	strb	r3, [r7, #23]
 800b1ee:	e002      	b.n	800b1f6 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b1f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d112      	bne.n	800b224 <VL53L0X_perform_phase_calibration+0xbe>
 800b1fe:	79bb      	ldrb	r3, [r7, #6]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00f      	beq.n	800b224 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b204:	7dbb      	ldrb	r3, [r7, #22]
 800b206:	461a      	mov	r2, r3
 800b208:	2101      	movs	r1, #1
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f002 fb80 	bl	800d910 <VL53L0X_WrByte>
 800b210:	4603      	mov	r3, r0
 800b212:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b214:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d103      	bne.n	800b224 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	7dba      	ldrb	r2, [r7, #22]
 800b220:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b224:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
 800b23c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b23e:	2300      	movs	r3, #0
 800b240:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b242:	2300      	movs	r3, #0
 800b244:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b24c:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800b24e:	78fa      	ldrb	r2, [r7, #3]
 800b250:	2300      	movs	r3, #0
 800b252:	68b9      	ldr	r1, [r7, #8]
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f7ff ff1f 	bl	800b098 <VL53L0X_perform_vhv_calibration>
 800b25a:	4603      	mov	r3, r0
 800b25c:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b25e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d107      	bne.n	800b276 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800b266:	78fa      	ldrb	r2, [r7, #3]
 800b268:	2300      	movs	r3, #0
 800b26a:	6879      	ldr	r1, [r7, #4]
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f7ff ff7a 	bl	800b166 <VL53L0X_perform_phase_calibration>
 800b272:	4603      	mov	r3, r0
 800b274:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800b276:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d10f      	bne.n	800b29e <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b27e:	7dbb      	ldrb	r3, [r7, #22]
 800b280:	461a      	mov	r2, r3
 800b282:	2101      	movs	r1, #1
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f002 fb43 	bl	800d910 <VL53L0X_WrByte>
 800b28a:	4603      	mov	r3, r0
 800b28c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b28e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d103      	bne.n	800b29e <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	7dba      	ldrb	r2, [r7, #22]
 800b29a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b29e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3718      	adds	r7, #24
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b086      	sub	sp, #24
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b2be:	f107 030f 	add.w	r3, r7, #15
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7fe fdbb 	bl	8009e40 <VL53L0X_GetMeasurementDataReady>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800b2ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10f      	bne.n	800b2f6 <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d00e      	beq.n	800b2fa <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	2bc7      	cmp	r3, #199	; 0xc7
 800b2e6:	d902      	bls.n	800b2ee <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b2e8:	23f9      	movs	r3, #249	; 0xf9
 800b2ea:	75fb      	strb	r3, [r7, #23]
			break;
 800b2ec:	e006      	b.n	800b2fc <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f002 fb90 	bl	800da14 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b2f4:	e7e3      	b.n	800b2be <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800b2f6:	bf00      	nop
 800b2f8:	e000      	b.n	800b2fc <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 800b2fa:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800b2fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3718      	adds	r7, #24
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	4603      	mov	r3, r0
 800b310:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800b312:	2300      	movs	r3, #0
 800b314:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b316:	79fb      	ldrb	r3, [r7, #7]
 800b318:	3301      	adds	r3, #1
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	005b      	lsls	r3, r3, #1
 800b31e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800b320:	7bfb      	ldrb	r3, [r7, #15]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	bc80      	pop	{r7}
 800b32a:	4770      	bx	lr

0800b32c <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800b334:	2300      	movs	r3, #0
 800b336:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b33c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800b33e:	e002      	b.n	800b346 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	089b      	lsrs	r3, r3, #2
 800b344:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b346:	68ba      	ldr	r2, [r7, #8]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d8f8      	bhi.n	800b340 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800b34e:	e017      	b.n	800b380 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	4413      	add	r3, r2
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d30b      	bcc.n	800b374 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	4413      	add	r3, r2
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	085b      	lsrs	r3, r3, #1
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	4413      	add	r3, r2
 800b370:	60fb      	str	r3, [r7, #12]
 800b372:	e002      	b.n	800b37a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	085b      	lsrs	r3, r3, #1
 800b378:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	089b      	lsrs	r3, r3, #2
 800b37e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1e4      	bne.n	800b350 <VL53L0X_isqrt+0x24>
	}

	return res;
 800b386:	68fb      	ldr	r3, [r7, #12]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bc80      	pop	{r7}
 800b390:	4770      	bx	lr

0800b392 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b086      	sub	sp, #24
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b39a:	2300      	movs	r3, #0
 800b39c:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800b39e:	2200      	movs	r2, #0
 800b3a0:	2183      	movs	r1, #131	; 0x83
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f002 fab4 	bl	800d910 <VL53L0X_WrByte>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	7dfb      	ldrb	r3, [r7, #23]
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800b3b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d11c      	bne.n	800b3f4 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800b3be:	f107 030f 	add.w	r3, r7, #15
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	2183      	movs	r1, #131	; 0x83
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f002 f9a7 	bl	800d71a <VL53L0X_RdByte>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d109      	bne.n	800b3ea <VL53L0X_device_read_strobe+0x58>
 800b3d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d105      	bne.n	800b3ea <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	2bc7      	cmp	r3, #199	; 0xc7
 800b3e8:	d9e9      	bls.n	800b3be <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	2bc7      	cmp	r3, #199	; 0xc7
 800b3ee:	d901      	bls.n	800b3f4 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b3f0:	23f9      	movs	r3, #249	; 0xf9
 800b3f2:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	2183      	movs	r1, #131	; 0x83
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f002 fa89 	bl	800d910 <VL53L0X_WrByte>
 800b3fe:	4603      	mov	r3, r0
 800b400:	461a      	mov	r2, r3
 800b402:	7dfb      	ldrb	r3, [r7, #23]
 800b404:	4313      	orrs	r3, r2
 800b406:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800b408:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3718      	adds	r7, #24
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b098      	sub	sp, #96	; 0x60
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	460b      	mov	r3, r1
 800b41e:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b420:	2300      	movs	r3, #0
 800b422:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800b426:	2300      	movs	r3, #0
 800b428:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800b42c:	2300      	movs	r3, #0
 800b42e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800b432:	2300      	movs	r3, #0
 800b434:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800b436:	2300      	movs	r3, #0
 800b438:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800b444:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800b448:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b45c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800b460:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b464:	2b07      	cmp	r3, #7
 800b466:	f000 8408 	beq.w	800bc7a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b46a:	2201      	movs	r2, #1
 800b46c:	2180      	movs	r1, #128	; 0x80
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f002 fa4e 	bl	800d910 <VL53L0X_WrByte>
 800b474:	4603      	mov	r3, r0
 800b476:	461a      	mov	r2, r3
 800b478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b47c:	4313      	orrs	r3, r2
 800b47e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b482:	2201      	movs	r2, #1
 800b484:	21ff      	movs	r1, #255	; 0xff
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f002 fa42 	bl	800d910 <VL53L0X_WrByte>
 800b48c:	4603      	mov	r3, r0
 800b48e:	461a      	mov	r2, r3
 800b490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b494:	4313      	orrs	r3, r2
 800b496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b49a:	2200      	movs	r2, #0
 800b49c:	2100      	movs	r1, #0
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f002 fa36 	bl	800d910 <VL53L0X_WrByte>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b4b2:	2206      	movs	r2, #6
 800b4b4:	21ff      	movs	r1, #255	; 0xff
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f002 fa2a 	bl	800d910 <VL53L0X_WrByte>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	461a      	mov	r2, r3
 800b4c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b4ca:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	2183      	movs	r1, #131	; 0x83
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f002 f921 	bl	800d71a <VL53L0X_RdByte>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	461a      	mov	r2, r3
 800b4dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800b4e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b4ea:	f043 0304 	orr.w	r3, r3, #4
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	2183      	movs	r1, #131	; 0x83
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f002 fa0b 	bl	800d910 <VL53L0X_WrByte>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b502:	4313      	orrs	r3, r2
 800b504:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800b508:	2207      	movs	r2, #7
 800b50a:	21ff      	movs	r1, #255	; 0xff
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f002 f9ff 	bl	800d910 <VL53L0X_WrByte>
 800b512:	4603      	mov	r3, r0
 800b514:	461a      	mov	r2, r3
 800b516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b51a:	4313      	orrs	r3, r2
 800b51c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800b520:	2201      	movs	r2, #1
 800b522:	2181      	movs	r1, #129	; 0x81
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f002 f9f3 	bl	800d910 <VL53L0X_WrByte>
 800b52a:	4603      	mov	r3, r0
 800b52c:	461a      	mov	r2, r3
 800b52e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b532:	4313      	orrs	r3, r2
 800b534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f002 fa6b 	bl	800da14 <VL53L0X_PollingDelay>
 800b53e:	4603      	mov	r3, r0
 800b540:	461a      	mov	r2, r3
 800b542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b546:	4313      	orrs	r3, r2
 800b548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b54c:	2201      	movs	r2, #1
 800b54e:	2180      	movs	r1, #128	; 0x80
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f002 f9dd 	bl	800d910 <VL53L0X_WrByte>
 800b556:	4603      	mov	r3, r0
 800b558:	461a      	mov	r2, r3
 800b55a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b55e:	4313      	orrs	r3, r2
 800b560:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800b564:	78fb      	ldrb	r3, [r7, #3]
 800b566:	f003 0301 	and.w	r3, r3, #1
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f000 8098 	beq.w	800b6a0 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800b570:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b574:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f040 8091 	bne.w	800b6a0 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800b57e:	226b      	movs	r2, #107	; 0x6b
 800b580:	2194      	movs	r1, #148	; 0x94
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f002 f9c4 	bl	800d910 <VL53L0X_WrByte>
 800b588:	4603      	mov	r3, r0
 800b58a:	461a      	mov	r2, r3
 800b58c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b590:	4313      	orrs	r3, r2
 800b592:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f7ff fefb 	bl	800b392 <VL53L0X_device_read_strobe>
 800b59c:	4603      	mov	r3, r0
 800b59e:	461a      	mov	r2, r3
 800b5a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b5aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	2190      	movs	r1, #144	; 0x90
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f002 f970 	bl	800d898 <VL53L0X_RdDWord>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c8:	0a1b      	lsrs	r3, r3, #8
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5d0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800b5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d6:	0bdb      	lsrs	r3, r3, #15
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	f003 0301 	and.w	r3, r3, #1
 800b5de:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800b5e2:	2224      	movs	r2, #36	; 0x24
 800b5e4:	2194      	movs	r1, #148	; 0x94
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f002 f992 	bl	800d910 <VL53L0X_WrByte>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7ff fec9 	bl	800b392 <VL53L0X_device_read_strobe>
 800b600:	4603      	mov	r3, r0
 800b602:	461a      	mov	r2, r3
 800b604:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b608:	4313      	orrs	r3, r2
 800b60a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b60e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b612:	461a      	mov	r2, r3
 800b614:	2190      	movs	r1, #144	; 0x90
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f002 f93e 	bl	800d898 <VL53L0X_RdDWord>
 800b61c:	4603      	mov	r3, r0
 800b61e:	461a      	mov	r2, r3
 800b620:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b624:	4313      	orrs	r3, r2
 800b626:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800b62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62c:	0e1b      	lsrs	r3, r3, #24
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800b632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b634:	0c1b      	lsrs	r3, r3, #16
 800b636:	b2db      	uxtb	r3, r3
 800b638:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800b63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63c:	0a1b      	lsrs	r3, r3, #8
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	b2db      	uxtb	r3, r3
 800b646:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800b648:	2225      	movs	r2, #37	; 0x25
 800b64a:	2194      	movs	r1, #148	; 0x94
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f002 f95f 	bl	800d910 <VL53L0X_WrByte>
 800b652:	4603      	mov	r3, r0
 800b654:	461a      	mov	r2, r3
 800b656:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b65a:	4313      	orrs	r3, r2
 800b65c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff fe96 	bl	800b392 <VL53L0X_device_read_strobe>
 800b666:	4603      	mov	r3, r0
 800b668:	461a      	mov	r2, r3
 800b66a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b66e:	4313      	orrs	r3, r2
 800b670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b674:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b678:	461a      	mov	r2, r3
 800b67a:	2190      	movs	r1, #144	; 0x90
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f002 f90b 	bl	800d898 <VL53L0X_RdDWord>
 800b682:	4603      	mov	r3, r0
 800b684:	461a      	mov	r2, r3
 800b686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b68a:	4313      	orrs	r3, r2
 800b68c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800b690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b692:	0e1b      	lsrs	r3, r3, #24
 800b694:	b2db      	uxtb	r3, r3
 800b696:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800b698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69a:	0c1b      	lsrs	r3, r3, #16
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	f003 0302 	and.w	r3, r3, #2
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f000 8189 	beq.w	800b9be <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800b6ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b6b0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f040 8182 	bne.w	800b9be <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	2194      	movs	r1, #148	; 0x94
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f002 f926 	bl	800d910 <VL53L0X_WrByte>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7ff fe5d 	bl	800b392 <VL53L0X_device_read_strobe>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	461a      	mov	r2, r3
 800b6dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800b6e6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	2190      	movs	r1, #144	; 0x90
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f002 f813 	bl	800d71a <VL53L0X_RdByte>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800b702:	227b      	movs	r2, #123	; 0x7b
 800b704:	2194      	movs	r1, #148	; 0x94
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f002 f902 	bl	800d910 <VL53L0X_WrByte>
 800b70c:	4603      	mov	r3, r0
 800b70e:	461a      	mov	r2, r3
 800b710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b714:	4313      	orrs	r3, r2
 800b716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f7ff fe39 	bl	800b392 <VL53L0X_device_read_strobe>
 800b720:	4603      	mov	r3, r0
 800b722:	461a      	mov	r2, r3
 800b724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b728:	4313      	orrs	r3, r2
 800b72a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800b72e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800b732:	461a      	mov	r2, r3
 800b734:	2190      	movs	r1, #144	; 0x90
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f001 ffef 	bl	800d71a <VL53L0X_RdByte>
 800b73c:	4603      	mov	r3, r0
 800b73e:	461a      	mov	r2, r3
 800b740:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b744:	4313      	orrs	r3, r2
 800b746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800b74a:	2277      	movs	r2, #119	; 0x77
 800b74c:	2194      	movs	r1, #148	; 0x94
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f002 f8de 	bl	800d910 <VL53L0X_WrByte>
 800b754:	4603      	mov	r3, r0
 800b756:	461a      	mov	r2, r3
 800b758:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b75c:	4313      	orrs	r3, r2
 800b75e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7ff fe15 	bl	800b392 <VL53L0X_device_read_strobe>
 800b768:	4603      	mov	r3, r0
 800b76a:	461a      	mov	r2, r3
 800b76c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b770:	4313      	orrs	r3, r2
 800b772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b776:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b77a:	461a      	mov	r2, r3
 800b77c:	2190      	movs	r1, #144	; 0x90
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f002 f88a 	bl	800d898 <VL53L0X_RdDWord>
 800b784:	4603      	mov	r3, r0
 800b786:	461a      	mov	r2, r3
 800b788:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b78c:	4313      	orrs	r3, r2
 800b78e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800b792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b794:	0e5b      	lsrs	r3, r3, #25
 800b796:	b2db      	uxtb	r3, r3
 800b798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a2:	0c9b      	lsrs	r3, r3, #18
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b0:	0adb      	lsrs	r3, r3, #11
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800b7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7be:	091b      	lsrs	r3, r3, #4
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800b7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	00db      	lsls	r3, r3, #3
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800b7dc:	2278      	movs	r2, #120	; 0x78
 800b7de:	2194      	movs	r1, #148	; 0x94
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f002 f895 	bl	800d910 <VL53L0X_WrByte>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7ff fdcc 	bl	800b392 <VL53L0X_device_read_strobe>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b802:	4313      	orrs	r3, r2
 800b804:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b808:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b80c:	461a      	mov	r2, r3
 800b80e:	2190      	movs	r1, #144	; 0x90
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f002 f841 	bl	800d898 <VL53L0X_RdDWord>
 800b816:	4603      	mov	r3, r0
 800b818:	461a      	mov	r2, r3
 800b81a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b81e:	4313      	orrs	r3, r2
 800b820:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	0f5b      	lsrs	r3, r3, #29
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b82e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800b830:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b834:	4413      	add	r3, r2
 800b836:	b2db      	uxtb	r3, r3
 800b838:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800b83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83c:	0d9b      	lsrs	r3, r3, #22
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b844:	b2db      	uxtb	r3, r3
 800b846:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800b848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84a:	0bdb      	lsrs	r3, r3, #15
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b852:	b2db      	uxtb	r3, r3
 800b854:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800b856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b858:	0a1b      	lsrs	r3, r3, #8
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b860:	b2db      	uxtb	r3, r3
 800b862:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800b864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b866:	085b      	lsrs	r3, r3, #1
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800b872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b874:	b2db      	uxtb	r3, r3
 800b876:	019b      	lsls	r3, r3, #6
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800b884:	2279      	movs	r2, #121	; 0x79
 800b886:	2194      	movs	r1, #148	; 0x94
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f002 f841 	bl	800d910 <VL53L0X_WrByte>
 800b88e:	4603      	mov	r3, r0
 800b890:	461a      	mov	r2, r3
 800b892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b896:	4313      	orrs	r3, r2
 800b898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7ff fd78 	bl	800b392 <VL53L0X_device_read_strobe>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b8b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	2190      	movs	r1, #144	; 0x90
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f001 ffed 	bl	800d898 <VL53L0X_RdDWord>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ce:	0e9b      	lsrs	r3, r3, #26
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8d6:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800b8d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b8dc:	4413      	add	r3, r2
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	0cdb      	lsrs	r3, r3, #19
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800b8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f2:	0b1b      	lsrs	r3, r3, #12
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800b8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b900:	095b      	lsrs	r3, r3, #5
 800b902:	b2db      	uxtb	r3, r3
 800b904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800b90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	b2db      	uxtb	r3, r3
 800b914:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800b91e:	227a      	movs	r2, #122	; 0x7a
 800b920:	2194      	movs	r1, #148	; 0x94
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f001 fff4 	bl	800d910 <VL53L0X_WrByte>
 800b928:	4603      	mov	r3, r0
 800b92a:	461a      	mov	r2, r3
 800b92c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b930:	4313      	orrs	r3, r2
 800b932:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff fd2b 	bl	800b392 <VL53L0X_device_read_strobe>
 800b93c:	4603      	mov	r3, r0
 800b93e:	461a      	mov	r2, r3
 800b940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b944:	4313      	orrs	r3, r2
 800b946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b94a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b94e:	461a      	mov	r2, r3
 800b950:	2190      	movs	r1, #144	; 0x90
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f001 ffa0 	bl	800d898 <VL53L0X_RdDWord>
 800b958:	4603      	mov	r3, r0
 800b95a:	461a      	mov	r2, r3
 800b95c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b960:	4313      	orrs	r3, r2
 800b962:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800b966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b968:	0f9b      	lsrs	r3, r3, #30
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b970:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800b972:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b976:	4413      	add	r3, r2
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800b97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97e:	0ddb      	lsrs	r3, r3, #23
 800b980:	b2db      	uxtb	r3, r3
 800b982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b986:	b2db      	uxtb	r3, r3
 800b988:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800b98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98c:	0c1b      	lsrs	r3, r3, #16
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b994:	b2db      	uxtb	r3, r3
 800b996:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800b998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99a:	0a5b      	lsrs	r3, r3, #9
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9aa:	089b      	lsrs	r3, r3, #2
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800b9be:	78fb      	ldrb	r3, [r7, #3]
 800b9c0:	f003 0304 	and.w	r3, r3, #4
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f000 80f1 	beq.w	800bbac <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800b9ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b9ce:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f040 80ea 	bne.w	800bbac <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800b9d8:	227b      	movs	r2, #123	; 0x7b
 800b9da:	2194      	movs	r1, #148	; 0x94
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f001 ff97 	bl	800d910 <VL53L0X_WrByte>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f7ff fcce 	bl	800b392 <VL53L0X_device_read_strobe>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800ba04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba08:	461a      	mov	r2, r3
 800ba0a:	2190      	movs	r1, #144	; 0x90
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f001 ff43 	bl	800d898 <VL53L0X_RdDWord>
 800ba12:	4603      	mov	r3, r0
 800ba14:	461a      	mov	r2, r3
 800ba16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800ba20:	227c      	movs	r2, #124	; 0x7c
 800ba22:	2194      	movs	r1, #148	; 0x94
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f001 ff73 	bl	800d910 <VL53L0X_WrByte>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba32:	4313      	orrs	r3, r2
 800ba34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f7ff fcaa 	bl	800b392 <VL53L0X_device_read_strobe>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	461a      	mov	r2, r3
 800ba42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba46:	4313      	orrs	r3, r2
 800ba48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800ba4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba50:	461a      	mov	r2, r3
 800ba52:	2190      	movs	r1, #144	; 0x90
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f001 ff1f 	bl	800d898 <VL53L0X_RdDWord>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba62:	4313      	orrs	r3, r2
 800ba64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800ba68:	2273      	movs	r2, #115	; 0x73
 800ba6a:	2194      	movs	r1, #148	; 0x94
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f001 ff4f 	bl	800d910 <VL53L0X_WrByte>
 800ba72:	4603      	mov	r3, r0
 800ba74:	461a      	mov	r2, r3
 800ba76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f7ff fc86 	bl	800b392 <VL53L0X_device_read_strobe>
 800ba86:	4603      	mov	r3, r0
 800ba88:	461a      	mov	r2, r3
 800ba8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ba94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba98:	461a      	mov	r2, r3
 800ba9a:	2190      	movs	r1, #144	; 0x90
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f001 fefb 	bl	800d898 <VL53L0X_RdDWord>
 800baa2:	4603      	mov	r3, r0
 800baa4:	461a      	mov	r2, r3
 800baa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baaa:	4313      	orrs	r3, r2
 800baac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 800bab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800bab8:	2274      	movs	r2, #116	; 0x74
 800baba:	2194      	movs	r1, #148	; 0x94
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f001 ff27 	bl	800d910 <VL53L0X_WrByte>
 800bac2:	4603      	mov	r3, r0
 800bac4:	461a      	mov	r2, r3
 800bac6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baca:	4313      	orrs	r3, r2
 800bacc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f7ff fc5e 	bl	800b392 <VL53L0X_device_read_strobe>
 800bad6:	4603      	mov	r3, r0
 800bad8:	461a      	mov	r2, r3
 800bada:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bade:	4313      	orrs	r3, r2
 800bae0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bae4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bae8:	461a      	mov	r2, r3
 800baea:	2190      	movs	r1, #144	; 0x90
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f001 fed3 	bl	800d898 <VL53L0X_RdDWord>
 800baf2:	4603      	mov	r3, r0
 800baf4:	461a      	mov	r2, r3
 800baf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bafa:	4313      	orrs	r3, r2
 800bafc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb02:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800bb04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb06:	4313      	orrs	r3, r2
 800bb08:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800bb0a:	2275      	movs	r2, #117	; 0x75
 800bb0c:	2194      	movs	r1, #148	; 0x94
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f001 fefe 	bl	800d910 <VL53L0X_WrByte>
 800bb14:	4603      	mov	r3, r0
 800bb16:	461a      	mov	r2, r3
 800bb18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7ff fc35 	bl	800b392 <VL53L0X_device_read_strobe>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb30:	4313      	orrs	r3, r2
 800bb32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bb36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	2190      	movs	r1, #144	; 0x90
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f001 feaa 	bl	800d898 <VL53L0X_RdDWord>
 800bb44:	4603      	mov	r3, r0
 800bb46:	461a      	mov	r2, r3
 800bb48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 800bb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb54:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800bb5a:	2276      	movs	r2, #118	; 0x76
 800bb5c:	2194      	movs	r1, #148	; 0x94
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f001 fed6 	bl	800d910 <VL53L0X_WrByte>
 800bb64:	4603      	mov	r3, r0
 800bb66:	461a      	mov	r2, r3
 800bb68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7ff fc0d 	bl	800b392 <VL53L0X_device_read_strobe>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb80:	4313      	orrs	r3, r2
 800bb82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bb86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	2190      	movs	r1, #144	; 0x90
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f001 fe82 	bl	800d898 <VL53L0X_RdDWord>
 800bb94:	4603      	mov	r3, r0
 800bb96:	461a      	mov	r2, r3
 800bb98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba4:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800bba6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800bbac:	2200      	movs	r2, #0
 800bbae:	2181      	movs	r1, #129	; 0x81
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f001 fead 	bl	800d910 <VL53L0X_WrByte>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	461a      	mov	r2, r3
 800bbba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800bbc4:	2206      	movs	r2, #6
 800bbc6:	21ff      	movs	r1, #255	; 0xff
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f001 fea1 	bl	800d910 <VL53L0X_WrByte>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800bbdc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	2183      	movs	r1, #131	; 0x83
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f001 fd98 	bl	800d71a <VL53L0X_RdByte>
 800bbea:	4603      	mov	r3, r0
 800bbec:	461a      	mov	r2, r3
 800bbee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800bbf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbfc:	f023 0304 	bic.w	r3, r3, #4
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	461a      	mov	r2, r3
 800bc04:	2183      	movs	r1, #131	; 0x83
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f001 fe82 	bl	800d910 <VL53L0X_WrByte>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	461a      	mov	r2, r3
 800bc10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc14:	4313      	orrs	r3, r2
 800bc16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	21ff      	movs	r1, #255	; 0xff
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f001 fe76 	bl	800d910 <VL53L0X_WrByte>
 800bc24:	4603      	mov	r3, r0
 800bc26:	461a      	mov	r2, r3
 800bc28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800bc32:	2201      	movs	r2, #1
 800bc34:	2100      	movs	r1, #0
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f001 fe6a 	bl	800d910 <VL53L0X_WrByte>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	461a      	mov	r2, r3
 800bc40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc44:	4313      	orrs	r3, r2
 800bc46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	21ff      	movs	r1, #255	; 0xff
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f001 fe5e 	bl	800d910 <VL53L0X_WrByte>
 800bc54:	4603      	mov	r3, r0
 800bc56:	461a      	mov	r2, r3
 800bc58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800bc62:	2200      	movs	r2, #0
 800bc64:	2180      	movs	r1, #128	; 0x80
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f001 fe52 	bl	800d910 <VL53L0X_WrByte>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	461a      	mov	r2, r3
 800bc70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc74:	4313      	orrs	r3, r2
 800bc76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800bc7a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f040 808f 	bne.w	800bda2 <VL53L0X_get_info_from_device+0x98e>
 800bc84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc88:	2b07      	cmp	r3, #7
 800bc8a:	f000 808a 	beq.w	800bda2 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800bc8e:	78fb      	ldrb	r3, [r7, #3]
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d024      	beq.n	800bce2 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800bc98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc9c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d11e      	bne.n	800bce2 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800bcaa:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800bcb4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800bcb8:	2300      	movs	r3, #0
 800bcba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcbc:	e00e      	b.n	800bcdc <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800bcbe:	f107 0208 	add.w	r2, r7, #8
 800bcc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcc4:	4413      	add	r3, r2
 800bcc6:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bccc:	4413      	add	r3, r2
 800bcce:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800bcd2:	460a      	mov	r2, r1
 800bcd4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800bcd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcd8:	3301      	adds	r3, #1
 800bcda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcde:	2b05      	cmp	r3, #5
 800bce0:	dded      	ble.n	800bcbe <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800bce2:	78fb      	ldrb	r3, [r7, #3]
 800bce4:	f003 0302 	and.w	r3, r3, #2
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d018      	beq.n	800bd1e <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800bcec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bcf0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d112      	bne.n	800bd1e <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bcf8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bd02:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	33f3      	adds	r3, #243	; 0xf3
 800bd10:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800bd12:	f107 0310 	add.w	r3, r7, #16
 800bd16:	4619      	mov	r1, r3
 800bd18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd1a:	f001 ff37 	bl	800db8c <strcpy>

		}

		if (((option & 4) == 4) &&
 800bd1e:	78fb      	ldrb	r3, [r7, #3]
 800bd20:	f003 0304 	and.w	r3, r3, #4
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d030      	beq.n	800bd8a <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800bd28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd2c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d12a      	bne.n	800bd8a <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bd34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bd3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800bd44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd46:	025b      	lsls	r3, r3, #9
 800bd48:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd4e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800bd52:	2300      	movs	r3, #0
 800bd54:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800bd58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d011      	beq.n	800bd82 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800bd5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd62:	1ad3      	subs	r3, r2, r3
 800bd64:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800bd66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bd6c:	fb02 f303 	mul.w	r3, r2, r3
 800bd70:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800bd72:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800bd76:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800bd7a:	425b      	negs	r3, r3
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800bd82:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800bd8a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800bd8e:	78fb      	ldrb	r3, [r7, #3]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800bd98:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bda2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3760      	adds	r7, #96	; 0x60
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}

0800bdae <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800bdae:	b480      	push	{r7}
 800bdb0:	b087      	sub	sp, #28
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800bdba:	f240 6277 	movw	r2, #1655	; 0x677
 800bdbe:	f04f 0300 	mov.w	r3, #0
 800bdc2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800bdc6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800bdca:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800bdcc:	78fb      	ldrb	r3, [r7, #3]
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800bdd4:	693a      	ldr	r2, [r7, #16]
 800bdd6:	fb02 f303 	mul.w	r3, r2, r3
 800bdda:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800bddc:	68bb      	ldr	r3, [r7, #8]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	371c      	adds	r7, #28
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bc80      	pop	{r7}
 800bde6:	4770      	bx	lr

0800bde8 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d017      	beq.n	800be32 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	3b01      	subs	r3, #1
 800be06:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800be08:	e005      	b.n	800be16 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	085b      	lsrs	r3, r3, #1
 800be0e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800be10:	89fb      	ldrh	r3, [r7, #14]
 800be12:	3301      	adds	r3, #1
 800be14:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1f4      	bne.n	800be0a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800be20:	89fb      	ldrh	r3, [r7, #14]
 800be22:	021b      	lsls	r3, r3, #8
 800be24:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	b29b      	uxth	r3, r3
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800be2e:	4413      	add	r3, r2
 800be30:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800be32:	8afb      	ldrh	r3, [r7, #22]

}
 800be34:	4618      	mov	r0, r3
 800be36:	371c      	adds	r7, #28
 800be38:	46bd      	mov	sp, r7
 800be3a:	bc80      	pop	{r7}
 800be3c:	4770      	bx	lr

0800be3e <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800be3e:	b480      	push	{r7}
 800be40:	b085      	sub	sp, #20
 800be42:	af00      	add	r7, sp, #0
 800be44:	4603      	mov	r3, r0
 800be46:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800be48:	2300      	movs	r3, #0
 800be4a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800be4c:	88fb      	ldrh	r3, [r7, #6]
 800be4e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800be50:	88fa      	ldrh	r2, [r7, #6]
 800be52:	0a12      	lsrs	r2, r2, #8
 800be54:	b292      	uxth	r2, r2
 800be56:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800be58:	3301      	adds	r3, #1
 800be5a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800be5c:	68fb      	ldr	r3, [r7, #12]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3714      	adds	r7, #20
 800be62:	46bd      	mov	sp, r7
 800be64:	bc80      	pop	{r7}
 800be66:	4770      	bx	lr

0800be68 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b088      	sub	sp, #32
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	4613      	mov	r3, r2
 800be74:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800be76:	2300      	movs	r3, #0
 800be78:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800be7a:	79fb      	ldrb	r3, [r7, #7]
 800be7c:	4619      	mov	r1, r3
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f7ff ff95 	bl	800bdae <VL53L0X_calc_macro_period_ps>
 800be84:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800be8c:	4a0a      	ldr	r2, [pc, #40]	; (800beb8 <VL53L0X_calc_timeout_mclks+0x50>)
 800be8e:	fba2 2303 	umull	r2, r3, r2, r3
 800be92:	099b      	lsrs	r3, r3, #6
 800be94:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be9c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	085b      	lsrs	r3, r3, #1
 800bea4:	441a      	add	r2, r3
	timeout_period_mclks =
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	fbb2 f3f3 	udiv	r3, r2, r3
 800beac:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800beae:	69fb      	ldr	r3, [r7, #28]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3720      	adds	r7, #32
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	10624dd3 	.word	0x10624dd3

0800bebc <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b086      	sub	sp, #24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	460b      	mov	r3, r1
 800bec6:	807b      	strh	r3, [r7, #2]
 800bec8:	4613      	mov	r3, r2
 800beca:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800becc:	2300      	movs	r3, #0
 800bece:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800bed0:	787b      	ldrb	r3, [r7, #1]
 800bed2:	4619      	mov	r1, r3
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff ff6a 	bl	800bdae <VL53L0X_calc_macro_period_ps>
 800beda:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bee2:	4a0b      	ldr	r2, [pc, #44]	; (800bf10 <VL53L0X_calc_timeout_us+0x54>)
 800bee4:	fba2 2303 	umull	r2, r3, r2, r3
 800bee8:	099b      	lsrs	r3, r3, #6
 800beea:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 800beec:	887b      	ldrh	r3, [r7, #2]
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / 1000;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	085b      	lsrs	r3, r3, #1
 800bef8:	4413      	add	r3, r2
	actual_timeout_period_us =
 800befa:	4a05      	ldr	r2, [pc, #20]	; (800bf10 <VL53L0X_calc_timeout_us+0x54>)
 800befc:	fba2 2303 	umull	r2, r3, r2, r3
 800bf00:	099b      	lsrs	r3, r3, #6
 800bf02:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800bf04:	697b      	ldr	r3, [r7, #20]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3718      	adds	r7, #24
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	10624dd3 	.word	0x10624dd3

0800bf14 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b08c      	sub	sp, #48	; 0x30
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	607a      	str	r2, [r7, #4]
 800bf20:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf22:	2300      	movs	r3, #0
 800bf24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800bf32:	2300      	movs	r3, #0
 800bf34:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800bf36:	2300      	movs	r3, #0
 800bf38:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800bf3a:	7afb      	ldrb	r3, [r7, #11]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d005      	beq.n	800bf4c <get_sequence_step_timeout+0x38>
 800bf40:	7afb      	ldrb	r3, [r7, #11]
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d002      	beq.n	800bf4c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800bf46:	7afb      	ldrb	r3, [r7, #11]
 800bf48:	2b02      	cmp	r3, #2
 800bf4a:	d128      	bne.n	800bf9e <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bf4c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800bf50:	461a      	mov	r2, r3
 800bf52:	2100      	movs	r1, #0
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f7fd fa48 	bl	80093ea <VL53L0X_GetVcselPulsePeriod>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800bf60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d109      	bne.n	800bf7c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800bf68:	f107 0320 	add.w	r3, r7, #32
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	2146      	movs	r1, #70	; 0x46
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f001 fbd2 	bl	800d71a <VL53L0X_RdByte>
 800bf76:	4603      	mov	r3, r0
 800bf78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800bf7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7ff ff5b 	bl	800be3e <VL53L0X_decode_timeout>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800bf8c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800bf90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf92:	4619      	mov	r1, r3
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f7ff ff91 	bl	800bebc <VL53L0X_calc_timeout_us>
 800bf9a:	62b8      	str	r0, [r7, #40]	; 0x28
 800bf9c:	e092      	b.n	800c0c4 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800bf9e:	7afb      	ldrb	r3, [r7, #11]
 800bfa0:	2b03      	cmp	r3, #3
 800bfa2:	d135      	bne.n	800c010 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bfa4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	2100      	movs	r1, #0
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f7fd fa1c 	bl	80093ea <VL53L0X_GetVcselPulsePeriod>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800bfb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f040 8081 	bne.w	800c0c4 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800bfc2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	2100      	movs	r1, #0
 800bfca:	68f8      	ldr	r0, [r7, #12]
 800bfcc:	f7fd fa0d 	bl	80093ea <VL53L0X_GetVcselPulsePeriod>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800bfd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d109      	bne.n	800bff2 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800bfde:	f107 031e 	add.w	r3, r7, #30
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	2151      	movs	r1, #81	; 0x51
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f001 fc1e 	bl	800d828 <VL53L0X_RdWord>
 800bfec:	4603      	mov	r3, r0
 800bfee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800bff2:	8bfb      	ldrh	r3, [r7, #30]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7ff ff22 	bl	800be3e <VL53L0X_decode_timeout>
 800bffa:	4603      	mov	r3, r0
 800bffc:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800bffe:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c002:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c004:	4619      	mov	r1, r3
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	f7ff ff58 	bl	800bebc <VL53L0X_calc_timeout_us>
 800c00c:	62b8      	str	r0, [r7, #40]	; 0x28
 800c00e:	e059      	b.n	800c0c4 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c010:	7afb      	ldrb	r3, [r7, #11]
 800c012:	2b04      	cmp	r3, #4
 800c014:	d156      	bne.n	800c0c4 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c016:	f107 0314 	add.w	r3, r7, #20
 800c01a:	4619      	mov	r1, r3
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f7fd faef 	bl	8009600 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800c022:	2300      	movs	r3, #0
 800c024:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800c026:	7dfb      	ldrb	r3, [r7, #23]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d01d      	beq.n	800c068 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c02c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c030:	461a      	mov	r2, r3
 800c032:	2100      	movs	r1, #0
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f7fd f9d8 	bl	80093ea <VL53L0X_GetVcselPulsePeriod>
 800c03a:	4603      	mov	r3, r0
 800c03c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800c040:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10f      	bne.n	800c068 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800c048:	f107 031e 	add.w	r3, r7, #30
 800c04c:	461a      	mov	r2, r3
 800c04e:	2151      	movs	r1, #81	; 0x51
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f001 fbe9 	bl	800d828 <VL53L0X_RdWord>
 800c056:	4603      	mov	r3, r0
 800c058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c05c:	8bfb      	ldrh	r3, [r7, #30]
 800c05e:	4618      	mov	r0, r3
 800c060:	f7ff feed 	bl	800be3e <VL53L0X_decode_timeout>
 800c064:	4603      	mov	r3, r0
 800c066:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c068:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d109      	bne.n	800c084 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c070:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c074:	461a      	mov	r2, r3
 800c076:	2101      	movs	r1, #1
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f7fd f9b6 	bl	80093ea <VL53L0X_GetVcselPulsePeriod>
 800c07e:	4603      	mov	r3, r0
 800c080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c084:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d10f      	bne.n	800c0ac <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800c08c:	f107 031c 	add.w	r3, r7, #28
 800c090:	461a      	mov	r2, r3
 800c092:	2171      	movs	r1, #113	; 0x71
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f001 fbc7 	bl	800d828 <VL53L0X_RdWord>
 800c09a:	4603      	mov	r3, r0
 800c09c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c0a0:	8bbb      	ldrh	r3, [r7, #28]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7ff fecb 	bl	800be3e <VL53L0X_decode_timeout>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800c0ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c0ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c0b4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c0b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f7ff fefd 	bl	800bebc <VL53L0X_calc_timeout_us>
 800c0c2:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0c8:	601a      	str	r2, [r3, #0]

	return Status;
 800c0ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3730      	adds	r7, #48	; 0x30
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b08a      	sub	sp, #40	; 0x28
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	60f8      	str	r0, [r7, #12]
 800c0de:	460b      	mov	r3, r1
 800c0e0:	607a      	str	r2, [r7, #4]
 800c0e2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c0ea:	7afb      	ldrb	r3, [r7, #11]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d005      	beq.n	800c0fc <set_sequence_step_timeout+0x26>
 800c0f0:	7afb      	ldrb	r3, [r7, #11]
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d002      	beq.n	800c0fc <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c0f6:	7afb      	ldrb	r3, [r7, #11]
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	d138      	bne.n	800c16e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c0fc:	f107 031d 	add.w	r3, r7, #29
 800c100:	461a      	mov	r2, r3
 800c102:	2100      	movs	r1, #0
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f7fd f970 	bl	80093ea <VL53L0X_GetVcselPulsePeriod>
 800c10a:	4603      	mov	r3, r0
 800c10c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800c110:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c114:	2b00      	cmp	r3, #0
 800c116:	d11a      	bne.n	800c14e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800c118:	7f7b      	ldrb	r3, [r7, #29]
 800c11a:	461a      	mov	r2, r3
 800c11c:	6879      	ldr	r1, [r7, #4]
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f7ff fea2 	bl	800be68 <VL53L0X_calc_timeout_mclks>
 800c124:	4603      	mov	r3, r0
 800c126:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800c128:	8bfb      	ldrh	r3, [r7, #30]
 800c12a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c12e:	d903      	bls.n	800c138 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800c130:	23ff      	movs	r3, #255	; 0xff
 800c132:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c136:	e004      	b.n	800c142 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800c138:	8bfb      	ldrh	r3, [r7, #30]
 800c13a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800c13c:	3b01      	subs	r3, #1
 800c13e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c142:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c146:	b29a      	uxth	r2, r3
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c14e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c152:	2b00      	cmp	r3, #0
 800c154:	f040 80ad 	bne.w	800c2b2 <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 800c158:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c15c:	461a      	mov	r2, r3
 800c15e:	2146      	movs	r1, #70	; 0x46
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f001 fbd5 	bl	800d910 <VL53L0X_WrByte>
 800c166:	4603      	mov	r3, r0
 800c168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800c16c:	e0a1      	b.n	800c2b2 <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c16e:	7afb      	ldrb	r3, [r7, #11]
 800c170:	2b03      	cmp	r3, #3
 800c172:	d135      	bne.n	800c1e0 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800c174:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d11b      	bne.n	800c1b4 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c17c:	f107 031d 	add.w	r3, r7, #29
 800c180:	461a      	mov	r2, r3
 800c182:	2100      	movs	r1, #0
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	f7fd f930 	bl	80093ea <VL53L0X_GetVcselPulsePeriod>
 800c18a:	4603      	mov	r3, r0
 800c18c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c190:	7f7b      	ldrb	r3, [r7, #29]
 800c192:	461a      	mov	r2, r3
 800c194:	6879      	ldr	r1, [r7, #4]
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f7ff fe66 	bl	800be68 <VL53L0X_calc_timeout_mclks>
 800c19c:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800c19e:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800c1a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7ff fe20 	bl	800bde8 <VL53L0X_encode_timeout>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c1ac:	8b7a      	ldrh	r2, [r7, #26]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c1b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d108      	bne.n	800c1ce <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800c1bc:	8b7b      	ldrh	r3, [r7, #26]
 800c1be:	461a      	mov	r2, r3
 800c1c0:	2151      	movs	r1, #81	; 0x51
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f001 fbc8 	bl	800d958 <VL53L0X_WrWord>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c1ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d16d      	bne.n	800c2b2 <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800c1de:	e068      	b.n	800c2b2 <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c1e0:	7afb      	ldrb	r3, [r7, #11]
 800c1e2:	2b04      	cmp	r3, #4
 800c1e4:	d162      	bne.n	800c2ac <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800c1e6:	f107 0314 	add.w	r3, r7, #20
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f7fd fa07 	bl	8009600 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800c1f6:	7dfb      	ldrb	r3, [r7, #23]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d01d      	beq.n	800c238 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c1fc:	f107 031d 	add.w	r3, r7, #29
 800c200:	461a      	mov	r2, r3
 800c202:	2100      	movs	r1, #0
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f7fd f8f0 	bl	80093ea <VL53L0X_GetVcselPulsePeriod>
 800c20a:	4603      	mov	r3, r0
 800c20c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800c210:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10f      	bne.n	800c238 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800c218:	f107 031a 	add.w	r3, r7, #26
 800c21c:	461a      	mov	r2, r3
 800c21e:	2151      	movs	r1, #81	; 0x51
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f001 fb01 	bl	800d828 <VL53L0X_RdWord>
 800c226:	4603      	mov	r3, r0
 800c228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800c22c:	8b7b      	ldrh	r3, [r7, #26]
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff fe05 	bl	800be3e <VL53L0X_decode_timeout>
 800c234:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800c236:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800c238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d109      	bne.n	800c254 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c240:	f107 031d 	add.w	r3, r7, #29
 800c244:	461a      	mov	r2, r3
 800c246:	2101      	movs	r1, #1
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f7fd f8ce 	bl	80093ea <VL53L0X_GetVcselPulsePeriod>
 800c24e:	4603      	mov	r3, r0
 800c250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800c254:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d12a      	bne.n	800c2b2 <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c25c:	7f7b      	ldrb	r3, [r7, #29]
 800c25e:	461a      	mov	r2, r3
 800c260:	6879      	ldr	r1, [r7, #4]
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f7ff fe00 	bl	800be68 <VL53L0X_calc_timeout_mclks>
 800c268:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 800c26a:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800c26c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c26e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c270:	4413      	add	r3, r2
 800c272:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800c274:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c276:	4618      	mov	r0, r3
 800c278:	f7ff fdb6 	bl	800bde8 <VL53L0X_encode_timeout>
 800c27c:	4603      	mov	r3, r0
 800c27e:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 800c280:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c284:	2b00      	cmp	r3, #0
 800c286:	d108      	bne.n	800c29a <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800c288:	8c3b      	ldrh	r3, [r7, #32]
 800c28a:	461a      	mov	r2, r3
 800c28c:	2171      	movs	r1, #113	; 0x71
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f001 fb62 	bl	800d958 <VL53L0X_WrWord>
 800c294:	4603      	mov	r3, r0
 800c296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800c29a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d107      	bne.n	800c2b2 <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800c2aa:	e002      	b.n	800c2b2 <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c2ac:	23fc      	movs	r3, #252	; 0xfc
 800c2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800c2b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3728      	adds	r7, #40	; 0x28
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b086      	sub	sp, #24
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	60f8      	str	r0, [r7, #12]
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	607a      	str	r2, [r7, #4]
 800c2ca:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800c2d0:	7afb      	ldrb	r3, [r7, #11]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d002      	beq.n	800c2dc <VL53L0X_get_vcsel_pulse_period+0x1e>
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d00a      	beq.n	800c2f0 <VL53L0X_get_vcsel_pulse_period+0x32>
 800c2da:	e013      	b.n	800c304 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c2dc:	f107 0316 	add.w	r3, r7, #22
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	2150      	movs	r1, #80	; 0x50
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f001 fa18 	bl	800d71a <VL53L0X_RdByte>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c2ee:	e00b      	b.n	800c308 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c2f0:	f107 0316 	add.w	r3, r7, #22
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	2170      	movs	r1, #112	; 0x70
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	f001 fa0e 	bl	800d71a <VL53L0X_RdByte>
 800c2fe:	4603      	mov	r3, r0
 800c300:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c302:	e001      	b.n	800c308 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c304:	23fc      	movs	r3, #252	; 0xfc
 800c306:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800c308:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d107      	bne.n	800c320 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800c310:	7dbb      	ldrb	r3, [r7, #22]
 800c312:	4618      	mov	r0, r3
 800c314:	f7fe fff8 	bl	800b308 <VL53L0X_decode_vcsel_period>
 800c318:	4603      	mov	r3, r0
 800c31a:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	701a      	strb	r2, [r3, #0]

	return Status;
 800c320:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3718      	adds	r7, #24
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b092      	sub	sp, #72	; 0x48
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c336:	2300      	movs	r3, #0
 800c338:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800c33c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c340:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 800c342:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800c346:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800c348:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c34c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800c34e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c352:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800c354:	f240 234e 	movw	r3, #590	; 0x24e
 800c358:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800c35a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800c35e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800c360:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c364:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800c366:	f240 2326 	movw	r3, #550	; 0x226
 800c36a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800c36c:	2300      	movs	r3, #0
 800c36e:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800c370:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c374:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800c376:	2300      	movs	r3, #0
 800c378:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800c37a:	683a      	ldr	r2, [r7, #0]
 800c37c:	6a3b      	ldr	r3, [r7, #32]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d205      	bcs.n	800c38e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c382:	23fc      	movs	r3, #252	; 0xfc
 800c384:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800c388:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c38c:	e0aa      	b.n	800c4e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800c38e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c392:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	1ad3      	subs	r3, r2, r3
 800c398:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c39a:	f107 0314 	add.w	r3, r7, #20
 800c39e:	4619      	mov	r1, r3
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f7fd f92d 	bl	8009600 <VL53L0X_GetSequenceStepEnables>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800c3ac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d15b      	bne.n	800c46c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800c3b4:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d105      	bne.n	800c3c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800c3ba:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d102      	bne.n	800c3c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800c3c0:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d052      	beq.n	800c46c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800c3c6:	f107 0310 	add.w	r3, r7, #16
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	2102      	movs	r1, #2
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7ff fda0 	bl	800bf14 <get_sequence_step_timeout>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800c3da:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d002      	beq.n	800c3e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800c3e2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c3e6:	e07d      	b.n	800c4e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800c3e8:	7d3b      	ldrb	r3, [r7, #20]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00f      	beq.n	800c40e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800c3ee:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800c3f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3f2:	4413      	add	r3, r2
 800c3f4:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800c3f6:	69fa      	ldr	r2, [r7, #28]
 800c3f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d204      	bcs.n	800c408 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800c3fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	1ad3      	subs	r3, r2, r3
 800c404:	643b      	str	r3, [r7, #64]	; 0x40
 800c406:	e002      	b.n	800c40e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c408:	23fc      	movs	r3, #252	; 0xfc
 800c40a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800c40e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c412:	2b00      	cmp	r3, #0
 800c414:	d002      	beq.n	800c41c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800c416:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c41a:	e063      	b.n	800c4e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800c41c:	7dbb      	ldrb	r3, [r7, #22]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d011      	beq.n	800c446 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800c422:	693a      	ldr	r2, [r7, #16]
 800c424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c426:	4413      	add	r3, r2
 800c428:	005b      	lsls	r3, r3, #1
 800c42a:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c42c:	69fa      	ldr	r2, [r7, #28]
 800c42e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c430:	429a      	cmp	r2, r3
 800c432:	d204      	bcs.n	800c43e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800c434:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c436:	69fb      	ldr	r3, [r7, #28]
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	643b      	str	r3, [r7, #64]	; 0x40
 800c43c:	e016      	b.n	800c46c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c43e:	23fc      	movs	r3, #252	; 0xfc
 800c440:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c444:	e012      	b.n	800c46c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800c446:	7d7b      	ldrb	r3, [r7, #21]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00f      	beq.n	800c46c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c450:	4413      	add	r3, r2
 800c452:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c454:	69fa      	ldr	r2, [r7, #28]
 800c456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c458:	429a      	cmp	r2, r3
 800c45a:	d204      	bcs.n	800c466 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800c45c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	643b      	str	r3, [r7, #64]	; 0x40
 800c464:	e002      	b.n	800c46c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c466:	23fc      	movs	r3, #252	; 0xfc
 800c468:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c46c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c470:	2b00      	cmp	r3, #0
 800c472:	d002      	beq.n	800c47a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800c474:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c478:	e034      	b.n	800c4e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800c47a:	7dfb      	ldrb	r3, [r7, #23]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d019      	beq.n	800c4b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800c480:	f107 030c 	add.w	r3, r7, #12
 800c484:	461a      	mov	r2, r3
 800c486:	2103      	movs	r1, #3
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f7ff fd43 	bl	800bf14 <get_sequence_step_timeout>
 800c48e:	4603      	mov	r3, r0
 800c490:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c498:	4413      	add	r3, r2
 800c49a:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c49c:	69fa      	ldr	r2, [r7, #28]
 800c49e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d204      	bcs.n	800c4ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800c4a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	643b      	str	r3, [r7, #64]	; 0x40
 800c4ac:	e002      	b.n	800c4b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c4ae:	23fc      	movs	r3, #252	; 0xfc
 800c4b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800c4b4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d111      	bne.n	800c4e0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800c4bc:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00e      	beq.n	800c4e0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800c4c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	1ad3      	subs	r3, r2, r3
 800c4c8:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 800c4ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4cc:	2104      	movs	r1, #4
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f7ff fe01 	bl	800c0d6 <set_sequence_step_timeout>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800c4e0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3748      	adds	r7, #72	; 0x48
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b090      	sub	sp, #64	; 0x40
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800c4fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c500:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800c502:	f240 7376 	movw	r3, #1910	; 0x776
 800c506:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800c508:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c50c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800c50e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c512:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800c514:	f240 234e 	movw	r3, #590	; 0x24e
 800c518:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800c51a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800c51e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800c520:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c524:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800c526:	f240 2326 	movw	r3, #550	; 0x226
 800c52a:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800c530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c534:	441a      	add	r2, r3
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c53a:	f107 0318 	add.w	r3, r7, #24
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f7fd f85d 	bl	8009600 <VL53L0X_GetSequenceStepEnables>
 800c546:	4603      	mov	r3, r0
 800c548:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800c54c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c550:	2b00      	cmp	r3, #0
 800c552:	d002      	beq.n	800c55a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800c554:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c558:	e075      	b.n	800c646 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800c55a:	7e3b      	ldrb	r3, [r7, #24]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d105      	bne.n	800c56c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800c560:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800c562:	2b00      	cmp	r3, #0
 800c564:	d102      	bne.n	800c56c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800c566:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d030      	beq.n	800c5ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800c56c:	f107 0310 	add.w	r3, r7, #16
 800c570:	461a      	mov	r2, r3
 800c572:	2102      	movs	r1, #2
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7ff fccd 	bl	800bf14 <get_sequence_step_timeout>
 800c57a:	4603      	mov	r3, r0
 800c57c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800c580:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c584:	2b00      	cmp	r3, #0
 800c586:	d122      	bne.n	800c5ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800c588:	7e3b      	ldrb	r3, [r7, #24]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d007      	beq.n	800c59e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800c592:	6939      	ldr	r1, [r7, #16]
 800c594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c596:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c598:	441a      	add	r2, r3
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800c59e:	7ebb      	ldrb	r3, [r7, #26]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d009      	beq.n	800c5b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800c5a8:	6939      	ldr	r1, [r7, #16]
 800c5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ac:	440b      	add	r3, r1
 800c5ae:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c5b0:	441a      	add	r2, r3
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	e00a      	b.n	800c5ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800c5b8:	7e7b      	ldrb	r3, [r7, #25]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d007      	beq.n	800c5ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800c5c2:	6939      	ldr	r1, [r7, #16]
 800c5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c6:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c5c8:	441a      	add	r2, r3
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c5ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d114      	bne.n	800c600 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800c5d6:	7efb      	ldrb	r3, [r7, #27]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d011      	beq.n	800c600 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800c5dc:	f107 030c 	add.w	r3, r7, #12
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	2103      	movs	r1, #3
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f7ff fc95 	bl	800bf14 <get_sequence_step_timeout>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800c5f4:	68f9      	ldr	r1, [r7, #12]
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800c5fa:	441a      	add	r2, r3
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c600:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c604:	2b00      	cmp	r3, #0
 800c606:	d114      	bne.n	800c632 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800c608:	7f3b      	ldrb	r3, [r7, #28]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d011      	beq.n	800c632 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800c60e:	f107 0314 	add.w	r3, r7, #20
 800c612:	461a      	mov	r2, r3
 800c614:	2104      	movs	r1, #4
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f7ff fc7c 	bl	800bf14 <get_sequence_step_timeout>
 800c61c:	4603      	mov	r3, r0
 800c61e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800c626:	6979      	ldr	r1, [r7, #20]
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800c62c:	441a      	add	r2, r3
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c632:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c636:	2b00      	cmp	r3, #0
 800c638:	d103      	bne.n	800c642 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c642:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c646:	4618      	mov	r0, r3
 800c648:	3740      	adds	r7, #64	; 0x40
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
	...

0800c650 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b088      	sub	sp, #32
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c65a:	2300      	movs	r3, #0
 800c65c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800c662:	e0c6      	b.n	800c7f2 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	683a      	ldr	r2, [r7, #0]
 800c668:	4413      	add	r3, r2
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	3301      	adds	r3, #1
 800c672:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800c674:	7cfb      	ldrb	r3, [r7, #19]
 800c676:	2bff      	cmp	r3, #255	; 0xff
 800c678:	f040 808d 	bne.w	800c796 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	683a      	ldr	r2, [r7, #0]
 800c680:	4413      	add	r3, r2
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	747b      	strb	r3, [r7, #17]
			Index++;
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	3301      	adds	r3, #1
 800c68a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800c68c:	7c7b      	ldrb	r3, [r7, #17]
 800c68e:	2b03      	cmp	r3, #3
 800c690:	d87e      	bhi.n	800c790 <VL53L0X_load_tuning_settings+0x140>
 800c692:	a201      	add	r2, pc, #4	; (adr r2, 800c698 <VL53L0X_load_tuning_settings+0x48>)
 800c694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c698:	0800c6a9 	.word	0x0800c6a9
 800c69c:	0800c6e3 	.word	0x0800c6e3
 800c6a0:	0800c71d 	.word	0x0800c71d
 800c6a4:	0800c757 	.word	0x0800c757
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	683a      	ldr	r2, [r7, #0]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	743b      	strb	r3, [r7, #16]
				Index++;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	683a      	ldr	r2, [r7, #0]
 800c6bc:	4413      	add	r3, r2
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c6c8:	7c3b      	ldrb	r3, [r7, #16]
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	021b      	lsls	r3, r3, #8
 800c6ce:	b29a      	uxth	r2, r3
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	4413      	add	r3, r2
 800c6d6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	89ba      	ldrh	r2, [r7, #12]
 800c6dc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800c6e0:	e087      	b.n	800c7f2 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	683a      	ldr	r2, [r7, #0]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	743b      	strb	r3, [r7, #16]
				Index++;
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	683a      	ldr	r2, [r7, #0]
 800c6f6:	4413      	add	r3, r2
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	3301      	adds	r3, #1
 800c700:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c702:	7c3b      	ldrb	r3, [r7, #16]
 800c704:	b29b      	uxth	r3, r3
 800c706:	021b      	lsls	r3, r3, #8
 800c708:	b29a      	uxth	r2, r3
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	4413      	add	r3, r2
 800c710:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	89ba      	ldrh	r2, [r7, #12]
 800c716:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800c71a:	e06a      	b.n	800c7f2 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	4413      	add	r3, r2
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	743b      	strb	r3, [r7, #16]
				Index++;
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	3301      	adds	r3, #1
 800c72a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	4413      	add	r3, r2
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	3301      	adds	r3, #1
 800c73a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c73c:	7c3b      	ldrb	r3, [r7, #16]
 800c73e:	b29b      	uxth	r3, r3
 800c740:	021b      	lsls	r3, r3, #8
 800c742:	b29a      	uxth	r2, r3
 800c744:	7bfb      	ldrb	r3, [r7, #15]
 800c746:	b29b      	uxth	r3, r3
 800c748:	4413      	add	r3, r2
 800c74a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	89ba      	ldrh	r2, [r7, #12]
 800c750:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800c754:	e04d      	b.n	800c7f2 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	683a      	ldr	r2, [r7, #0]
 800c75a:	4413      	add	r3, r2
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	743b      	strb	r3, [r7, #16]
				Index++;
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	3301      	adds	r3, #1
 800c764:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	683a      	ldr	r2, [r7, #0]
 800c76a:	4413      	add	r3, r2
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	3301      	adds	r3, #1
 800c774:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800c776:	7c3b      	ldrb	r3, [r7, #16]
 800c778:	b29b      	uxth	r3, r3
 800c77a:	021b      	lsls	r3, r3, #8
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	b29b      	uxth	r3, r3
 800c782:	4413      	add	r3, r2
 800c784:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	89ba      	ldrh	r2, [r7, #12]
 800c78a:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 800c78e:	e030      	b.n	800c7f2 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c790:	23fc      	movs	r3, #252	; 0xfc
 800c792:	77fb      	strb	r3, [r7, #31]
 800c794:	e02d      	b.n	800c7f2 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800c796:	7cfb      	ldrb	r3, [r7, #19]
 800c798:	2b04      	cmp	r3, #4
 800c79a:	d828      	bhi.n	800c7ee <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	683a      	ldr	r2, [r7, #0]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	74bb      	strb	r3, [r7, #18]
			Index++;
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	61bb      	str	r3, [r7, #24]
 800c7b0:	e00f      	b.n	800c7d2 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	683a      	ldr	r2, [r7, #0]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	7819      	ldrb	r1, [r3, #0]
 800c7ba:	f107 0208 	add.w	r2, r7, #8
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	460a      	mov	r2, r1
 800c7c4:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	61bb      	str	r3, [r7, #24]
 800c7d2:	7cfb      	ldrb	r3, [r7, #19]
 800c7d4:	69ba      	ldr	r2, [r7, #24]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	dbeb      	blt.n	800c7b2 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800c7da:	7cfb      	ldrb	r3, [r7, #19]
 800c7dc:	f107 0208 	add.w	r2, r7, #8
 800c7e0:	7cb9      	ldrb	r1, [r7, #18]
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 ffc4 	bl	800d770 <VL53L0X_WriteMulti>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	77fb      	strb	r3, [r7, #31]
 800c7ec:	e001      	b.n	800c7f2 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c7ee:	23fc      	movs	r3, #252	; 0xfc
 800c7f0:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d004      	beq.n	800c808 <VL53L0X_load_tuning_settings+0x1b8>
 800c7fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c802:	2b00      	cmp	r3, #0
 800c804:	f43f af2e 	beq.w	800c664 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c808:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3720      	adds	r7, #32
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b088      	sub	sp, #32
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c820:	2300      	movs	r3, #0
 800c822:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2200      	movs	r2, #0
 800c828:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800c82a:	f107 0313 	add.w	r3, r7, #19
 800c82e:	4619      	mov	r1, r3
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f7fc ffb1 	bl	8009798 <VL53L0X_GetXTalkCompensationEnable>
 800c836:	4603      	mov	r3, r0
 800c838:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800c83a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d111      	bne.n	800c866 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800c842:	7cfb      	ldrb	r3, [r7, #19]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00e      	beq.n	800c866 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6a1b      	ldr	r3, [r3, #32]
 800c84c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	8a9b      	ldrh	r3, [r3, #20]
 800c852:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800c854:	69bb      	ldr	r3, [r7, #24]
 800c856:	fb02 f303 	mul.w	r3, r2, r3
 800c85a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	3380      	adds	r3, #128	; 0x80
 800c860:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800c866:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3720      	adds	r7, #32
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b086      	sub	sp, #24
 800c876:	af00      	add	r7, sp, #0
 800c878:	60f8      	str	r0, [r7, #12]
 800c87a:	60b9      	str	r1, [r7, #8]
 800c87c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c87e:	2300      	movs	r3, #0
 800c880:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800c88a:	f107 0310 	add.w	r3, r7, #16
 800c88e:	461a      	mov	r2, r3
 800c890:	68b9      	ldr	r1, [r7, #8]
 800c892:	68f8      	ldr	r0, [r7, #12]
 800c894:	f7ff ffbe 	bl	800c814 <VL53L0X_get_total_xtalk_rate>
 800c898:	4603      	mov	r3, r0
 800c89a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800c89c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d105      	bne.n	800c8b0 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	441a      	add	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	601a      	str	r2, [r3, #0]

	return Status;
 800c8b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3718      	adds	r7, #24
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b09a      	sub	sp, #104	; 0x68
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]
 800c8c8:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800c8ca:	2312      	movs	r3, #18
 800c8cc:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800c8ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c8d2:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800c8d4:	2342      	movs	r3, #66	; 0x42
 800c8d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800c8d8:	2306      	movs	r3, #6
 800c8da:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800c8dc:	2307      	movs	r3, #7
 800c8de:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 800c8ec:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800c8f4:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800c8f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8fa:	fb02 f303 	mul.w	r3, r2, r3
 800c8fe:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800c900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c902:	3380      	adds	r3, #128	; 0x80
 800c904:	0a1b      	lsrs	r3, r3, #8
 800c906:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800c908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c90a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c90c:	fb02 f303 	mul.w	r3, r2, r3
 800c910:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800c912:	2300      	movs	r3, #0
 800c914:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d01a      	beq.n	800c952 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	029b      	lsls	r3, r3, #10
 800c920:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800c926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c928:	4413      	add	r3, r2
 800c92a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800c92c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	fbb2 f3f3 	udiv	r3, r2, r3
 800c934:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800c936:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c938:	4613      	mov	r3, r2
 800c93a:	005b      	lsls	r3, r3, #1
 800c93c:	4413      	add	r3, r2
 800c93e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800c940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c942:	fb03 f303 	mul.w	r3, r3, r3
 800c946:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800c948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c94a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c94e:	0c1b      	lsrs	r3, r3, #16
 800c950:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c956:	fb02 f303 	mul.w	r3, r2, r3
 800c95a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800c95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c962:	0c1b      	lsrs	r3, r3, #16
 800c964:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800c966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c968:	fb03 f303 	mul.w	r3, r3, r3
 800c96c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800c96e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c970:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c974:	0c1b      	lsrs	r3, r3, #16
 800c976:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800c978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c97a:	085a      	lsrs	r2, r3, #1
 800c97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97e:	441a      	add	r2, r3
 800c980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c982:	fbb2 f3f3 	udiv	r3, r2, r3
 800c986:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800c988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c98c:	fb02 f303 	mul.w	r3, r2, r3
 800c990:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800c992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c998:	d302      	bcc.n	800c9a0 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800c99a:	4b54      	ldr	r3, [pc, #336]	; (800caec <VL53L0X_calc_dmax+0x230>)
 800c99c:	663b      	str	r3, [r7, #96]	; 0x60
 800c99e:	e015      	b.n	800c9cc <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800c9a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9a2:	085a      	lsrs	r2, r3, #1
 800c9a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9a6:	441a      	add	r2, r3
 800c9a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9ae:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800c9b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9b4:	fb02 f303 	mul.w	r3, r2, r3
 800c9b8:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800c9ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c9c0:	0c1b      	lsrs	r3, r3, #16
 800c9c2:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800c9c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9c6:	fb03 f303 	mul.w	r3, r3, r3
 800c9ca:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800c9cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9ce:	039b      	lsls	r3, r3, #14
 800c9d0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c9d4:	4a46      	ldr	r2, [pc, #280]	; (800caf0 <VL53L0X_calc_dmax+0x234>)
 800c9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9da:	099b      	lsrs	r3, r3, #6
 800c9dc:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800c9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e0:	fb03 f303 	mul.w	r3, r3, r3
 800c9e4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800c9e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9e8:	fb03 f303 	mul.w	r3, r3, r3
 800c9ec:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800c9ee:	6a3b      	ldr	r3, [r7, #32]
 800c9f0:	3308      	adds	r3, #8
 800c9f2:	091b      	lsrs	r3, r3, #4
 800c9f4:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800c9f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9f8:	6a3b      	ldr	r3, [r7, #32]
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800c9fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca00:	4613      	mov	r3, r2
 800ca02:	005b      	lsls	r3, r3, #1
 800ca04:	4413      	add	r3, r2
 800ca06:	011b      	lsls	r3, r3, #4
 800ca08:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ca10:	0b9b      	lsrs	r3, r3, #14
 800ca12:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800ca14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca18:	4413      	add	r3, r2
 800ca1a:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800ca1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca1e:	085b      	lsrs	r3, r3, #1
 800ca20:	69ba      	ldr	r2, [r7, #24]
 800ca22:	4413      	add	r3, r2
 800ca24:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800ca26:	69ba      	ldr	r2, [r7, #24]
 800ca28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca2e:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	039b      	lsls	r3, r3, #14
 800ca34:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	085b      	lsrs	r3, r3, #1
 800ca3a:	69ba      	ldr	r2, [r7, #24]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800ca40:	69ba      	ldr	r2, [r7, #24]
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca48:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800ca4a:	69bb      	ldr	r3, [r7, #24]
 800ca4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ca4e:	fb02 f303 	mul.w	r3, r2, r3
 800ca52:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ca5a:	4a25      	ldr	r2, [pc, #148]	; (800caf0 <VL53L0X_calc_dmax+0x234>)
 800ca5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca60:	099b      	lsrs	r3, r3, #6
 800ca62:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	011b      	lsls	r3, r3, #4
 800ca68:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ca70:	4a1f      	ldr	r2, [pc, #124]	; (800caf0 <VL53L0X_calc_dmax+0x234>)
 800ca72:	fba2 2303 	umull	r2, r3, r2, r3
 800ca76:	099b      	lsrs	r3, r3, #6
 800ca78:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800ca7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca7c:	3380      	adds	r3, #128	; 0x80
 800ca7e:	0a1b      	lsrs	r3, r3, #8
 800ca80:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d008      	beq.n	800ca9a <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	085a      	lsrs	r2, r3, #1
 800ca8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca8e:	441a      	add	r2, r3
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca96:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca98:	e001      	b.n	800ca9e <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800ca9e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800caa0:	f7fe fc44 	bl	800b32c <VL53L0X_isqrt>
 800caa4:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d008      	beq.n	800cabe <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	085a      	lsrs	r2, r3, #1
 800cab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab2:	441a      	add	r2, r3
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	fbb2 f3f3 	udiv	r3, r2, r3
 800caba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cabc:	e001      	b.n	800cac2 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800cabe:	2300      	movs	r3, #0
 800cac0:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800cac2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cac4:	f7fe fc32 	bl	800b32c <VL53L0X_isqrt>
 800cac8:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800caca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cacc:	693a      	ldr	r2, [r7, #16]
 800cace:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800cad0:	693a      	ldr	r2, [r7, #16]
 800cad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d902      	bls.n	800cade <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800cad8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cada:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cadc:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800cade:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3768      	adds	r7, #104	; 0x68
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	fff00000 	.word	0xfff00000
 800caf0:	10624dd3 	.word	0x10624dd3

0800caf4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b0b2      	sub	sp, #200	; 0xc8
 800caf8:	af04      	add	r7, sp, #16
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
 800cb00:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800cb02:	f44f 7348 	mov.w	r3, #800	; 0x320
 800cb06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800cb0a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800cb0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800cb12:	2342      	movs	r3, #66	; 0x42
 800cb14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800cb18:	f241 235c 	movw	r3, #4700	; 0x125c
 800cb1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800cb20:	4b6b      	ldr	r3, [pc, #428]	; (800ccd0 <VL53L0X_calc_sigma_estimate+0x1dc>)
 800cb22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800cb26:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800cb2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800cb2e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800cb32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb36:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb3a:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800cb3c:	4b65      	ldr	r3, [pc, #404]	; (800ccd4 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800cb3e:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800cb40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb44:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800cb46:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800cb4a:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 800cb4c:	f240 6377 	movw	r3, #1655	; 0x677
 800cb50:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb52:	2300      	movs	r3, #0
 800cb54:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6a1b      	ldr	r3, [r3, #32]
 800cb5c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cb66:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800cb6a:	0c1b      	lsrs	r3, r3, #16
 800cb6c:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800cb74:	f107 0310 	add.w	r3, r7, #16
 800cb78:	461a      	mov	r2, r3
 800cb7a:	68b9      	ldr	r1, [r7, #8]
 800cb7c:	68f8      	ldr	r0, [r7, #12]
 800cb7e:	f7ff fe78 	bl	800c872 <VL53L0X_get_total_signal_rate>
 800cb82:	4603      	mov	r3, r0
 800cb84:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800cb88:	f107 0314 	add.w	r3, r7, #20
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	68b9      	ldr	r1, [r7, #8]
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	f7ff fe3f 	bl	800c814 <VL53L0X_get_total_xtalk_rate>
 800cb96:	4603      	mov	r3, r0
 800cb98:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cba2:	fb02 f303 	mul.w	r3, r2, r3
 800cba6:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800cba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbaa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cbae:	0c1b      	lsrs	r3, r3, #16
 800cbb0:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cbb8:	fb02 f303 	mul.w	r3, r2, r3
 800cbbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800cbc0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800cbc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d902      	bls.n	800cbd0 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800cbca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 800cbd0:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d164      	bne.n	800cca2 <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800cbde:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800cbe6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800cbea:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cbee:	461a      	mov	r2, r3
 800cbf0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f7ff f938 	bl	800be68 <VL53L0X_calc_timeout_mclks>
 800cbf8:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cc00:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800cc08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800cc0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cc10:	461a      	mov	r2, r3
 800cc12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f7ff f927 	bl	800be68 <VL53L0X_calc_timeout_mclks>
 800cc1a:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800cc1c:	2303      	movs	r3, #3
 800cc1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800cc22:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cc26:	2b08      	cmp	r3, #8
 800cc28:	d102      	bne.n	800cc30 <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 800cc2a:	2302      	movs	r3, #2
 800cc2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800cc30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc34:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800cc36:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800cc3a:	fb02 f303 	mul.w	r3, r2, r3
 800cc3e:	02db      	lsls	r3, r3, #11
 800cc40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800cc44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc48:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cc4c:	4a22      	ldr	r2, [pc, #136]	; (800ccd8 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800cc4e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc52:	099b      	lsrs	r3, r3, #6
 800cc54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 800cc58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cc5e:	fb02 f303 	mul.w	r3, r2, r3
 800cc62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800cc66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc6a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cc6e:	4a1a      	ldr	r2, [pc, #104]	; (800ccd8 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800cc70:	fba2 2303 	umull	r2, r3, r2, r3
 800cc74:	099b      	lsrs	r3, r3, #6
 800cc76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	3380      	adds	r3, #128	; 0x80
 800cc7e:	0a1b      	lsrs	r3, r3, #8
 800cc80:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800cc82:	693a      	ldr	r2, [r7, #16]
 800cc84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc88:	fb02 f303 	mul.w	r3, r2, r3
 800cc8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800cc90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc94:	3380      	adds	r3, #128	; 0x80
 800cc96:	0a1b      	lsrs	r3, r3, #8
 800cc98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	021b      	lsls	r3, r3, #8
 800cca0:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800cca2:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d002      	beq.n	800ccb0 <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 800ccaa:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800ccae:	e127      	b.n	800cf00 <VL53L0X_calc_sigma_estimate+0x40c>
	}

	if (peakSignalRate_kcps == 0) {
 800ccb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d112      	bne.n	800ccdc <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ccbc:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ccc4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	2200      	movs	r2, #0
 800cccc:	601a      	str	r2, [r3, #0]
 800ccce:	e115      	b.n	800cefc <VL53L0X_calc_sigma_estimate+0x408>
 800ccd0:	028f87ae 	.word	0x028f87ae
 800ccd4:	0006999a 	.word	0x0006999a
 800ccd8:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 800ccdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d102      	bne.n	800ccea <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 800cce4:	2301      	movs	r3, #1
 800cce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800ccea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ccee:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800ccf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccf2:	041a      	lsls	r2, r3, #16
 800ccf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800ccfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cd02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d902      	bls.n	800cd0e <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800cd08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cd0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800cd0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cd12:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cd16:	fb02 f303 	mul.w	r3, r2, r3
 800cd1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800cd1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cd22:	4613      	mov	r3, r2
 800cd24:	005b      	lsls	r3, r3, #1
 800cd26:	4413      	add	r3, r2
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fe fafe 	bl	800b32c <VL53L0X_isqrt>
 800cd30:	4603      	mov	r3, r0
 800cd32:	005b      	lsls	r3, r3, #1
 800cd34:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	891b      	ldrh	r3, [r3, #8]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd3e:	fb02 f303 	mul.w	r3, r2, r3
 800cd42:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800cd44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd46:	041a      	lsls	r2, r3, #16
 800cd48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cd4c:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 800cd4e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800cd52:	4a6d      	ldr	r2, [pc, #436]	; (800cf08 <VL53L0X_calc_sigma_estimate+0x414>)
 800cd54:	fba2 2303 	umull	r2, r3, r2, r3
 800cd58:	099b      	lsrs	r3, r3, #6
 800cd5a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800cd5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd5e:	041a      	lsls	r2, r3, #16
 800cd60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cd64:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 800cd66:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800cd6a:	4a67      	ldr	r2, [pc, #412]	; (800cf08 <VL53L0X_calc_sigma_estimate+0x414>)
 800cd6c:	fba2 2303 	umull	r2, r3, r2, r3
 800cd70:	099b      	lsrs	r3, r3, #6
 800cd72:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800cd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd76:	021b      	lsls	r3, r3, #8
 800cd78:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800cd7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	bfb8      	it	lt
 800cd86:	425b      	neglt	r3, r3
 800cd88:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8c:	021b      	lsls	r3, r3, #8
 800cd8e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800cd90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cd96:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9e:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800cda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda4:	fb02 f303 	mul.w	r3, r2, r3
 800cda8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800cdaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdae:	4413      	add	r3, r2
 800cdb0:	0c1b      	lsrs	r3, r3, #16
 800cdb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 800cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800cdba:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 800cdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbe:	085b      	lsrs	r3, r3, #1
 800cdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 800cdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc4:	fb03 f303 	mul.w	r3, r3, r3
 800cdc8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 800cdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdcc:	0b9b      	lsrs	r3, r3, #14
 800cdce:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cdd4:	fb02 f303 	mul.w	r3, r2, r3
 800cdd8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800cdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cddc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cde0:	0c1b      	lsrs	r3, r3, #16
 800cde2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800cde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde6:	fb03 f303 	mul.w	r3, r3, r3
 800cdea:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 800cdec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cdf0:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cdf8:	0c1b      	lsrs	r3, r3, #16
 800cdfa:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfe:	fb03 f303 	mul.w	r3, r3, r3
 800ce02:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800ce04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce08:	4413      	add	r3, r2
 800ce0a:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800ce0c:	6a38      	ldr	r0, [r7, #32]
 800ce0e:	f7fe fa8d 	bl	800b32c <VL53L0X_isqrt>
 800ce12:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	041b      	lsls	r3, r3, #16
 800ce18:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800ce1a:	69fb      	ldr	r3, [r7, #28]
 800ce1c:	3332      	adds	r3, #50	; 0x32
 800ce1e:	4a3b      	ldr	r2, [pc, #236]	; (800cf0c <VL53L0X_calc_sigma_estimate+0x418>)
 800ce20:	fba2 2303 	umull	r2, r3, r2, r3
 800ce24:	095a      	lsrs	r2, r3, #5
 800ce26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800ce30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce34:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800ce38:	fb02 f303 	mul.w	r3, r2, r3
 800ce3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800ce40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce44:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ce48:	3308      	adds	r3, #8
 800ce4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 800ce4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce52:	4a2f      	ldr	r2, [pc, #188]	; (800cf10 <VL53L0X_calc_sigma_estimate+0x41c>)
 800ce54:	fba2 2303 	umull	r2, r3, r2, r3
 800ce58:	0b5b      	lsrs	r3, r3, #13
 800ce5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800ce5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ce62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d903      	bls.n	800ce72 <VL53L0X_calc_sigma_estimate+0x37e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800ce6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ce6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800ce72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ce76:	fb03 f303 	mul.w	r3, r3, r3
 800ce7a:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 800ce7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce80:	fb03 f303 	mul.w	r3, r3, r3
 800ce84:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800ce86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	4413      	add	r3, r2
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fe fa4d 	bl	800b32c <VL53L0X_isqrt>
 800ce92:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ce9a:	fb02 f303 	mul.w	r3, r2, r3
 800ce9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800cea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d009      	beq.n	800cebc <VL53L0X_calc_sigma_estimate+0x3c8>
 800cea8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d005      	beq.n	800cebc <VL53L0X_calc_sigma_estimate+0x3c8>
 800ceb0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ceb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d903      	bls.n	800cec4 <VL53L0X_calc_sigma_estimate+0x3d0>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800cebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cec0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ceca:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 800ced6:	6939      	ldr	r1, [r7, #16]
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	9303      	str	r3, [sp, #12]
 800cedc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cee0:	9302      	str	r3, [sp, #8]
 800cee2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cee6:	9301      	str	r3, [sp, #4]
 800cee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceea:	9300      	str	r3, [sp, #0]
 800ceec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f7ff fce3 	bl	800c8bc <VL53L0X_calc_dmax>
 800cef6:	4603      	mov	r3, r0
 800cef8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cefc:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	37b8      	adds	r7, #184	; 0xb8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	10624dd3 	.word	0x10624dd3
 800cf0c:	51eb851f 	.word	0x51eb851f
 800cf10:	d1b71759 	.word	0xd1b71759

0800cf14 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b090      	sub	sp, #64	; 0x40
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	607a      	str	r2, [r7, #4]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	460b      	mov	r3, r1
 800cf22:	72fb      	strb	r3, [r7, #11]
 800cf24:	4613      	mov	r3, r2
 800cf26:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800cf40:	2300      	movs	r3, #0
 800cf42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800cf52:	2300      	movs	r3, #0
 800cf54:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800cf62:	2300      	movs	r3, #0
 800cf64:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800cf66:	7afb      	ldrb	r3, [r7, #11]
 800cf68:	10db      	asrs	r3, r3, #3
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	f003 030f 	and.w	r3, r3, #15
 800cf70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800cf74:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d017      	beq.n	800cfac <VL53L0X_get_pal_range_status+0x98>
 800cf7c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cf80:	2b05      	cmp	r3, #5
 800cf82:	d013      	beq.n	800cfac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800cf84:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cf88:	2b07      	cmp	r3, #7
 800cf8a:	d00f      	beq.n	800cfac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800cf8c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cf90:	2b0c      	cmp	r3, #12
 800cf92:	d00b      	beq.n	800cfac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800cf94:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cf98:	2b0d      	cmp	r3, #13
 800cf9a:	d007      	beq.n	800cfac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800cf9c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cfa0:	2b0e      	cmp	r3, #14
 800cfa2:	d003      	beq.n	800cfac <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800cfa4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cfa8:	2b0f      	cmp	r3, #15
 800cfaa:	d103      	bne.n	800cfb4 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800cfac:	2301      	movs	r3, #1
 800cfae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800cfb2:	e002      	b.n	800cfba <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 800cfba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d107      	bne.n	800cfd2 <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	21ff      	movs	r1, #255	; 0xff
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	f000 fca2 	bl	800d910 <VL53L0X_WrByte>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 800cfd2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d109      	bne.n	800cfee <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 800cfda:	f107 0316 	add.w	r3, r7, #22
 800cfde:	461a      	mov	r2, r3
 800cfe0:	21b6      	movs	r1, #182	; 0xb6
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f000 fc20 	bl	800d828 <VL53L0X_RdWord>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800cfee:	8afb      	ldrh	r3, [r7, #22]
 800cff0:	025b      	lsls	r3, r3, #9
 800cff2:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 800cff4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d107      	bne.n	800d00c <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cffc:	2200      	movs	r2, #0
 800cffe:	21ff      	movs	r1, #255	; 0xff
 800d000:	68f8      	ldr	r0, [r7, #12]
 800d002:	f000 fc85 	bl	800d910 <VL53L0X_WrByte>
 800d006:	4603      	mov	r3, r0
 800d008:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d010:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d014:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d109      	bne.n	800d030 <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d01c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d020:	461a      	mov	r2, r3
 800d022:	2100      	movs	r1, #0
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f7fc fc8b 	bl	8009940 <VL53L0X_GetLimitCheckEnable>
 800d02a:	4603      	mov	r3, r0
 800d02c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800d030:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d034:	2b00      	cmp	r3, #0
 800d036:	d02e      	beq.n	800d096 <VL53L0X_get_pal_range_status+0x182>
 800d038:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d12a      	bne.n	800d096 <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800d040:	f107 0310 	add.w	r3, r7, #16
 800d044:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d048:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d04a:	68f8      	ldr	r0, [r7, #12]
 800d04c:	f7ff fd52 	bl	800caf4 <VL53L0X_calc_sigma_estimate>
 800d050:	4603      	mov	r3, r0
 800d052:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800d056:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d103      	bne.n	800d066 <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	b29a      	uxth	r2, r3
 800d062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d064:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800d066:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d113      	bne.n	800d096 <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800d06e:	f107 0320 	add.w	r3, r7, #32
 800d072:	461a      	mov	r2, r3
 800d074:	2100      	movs	r1, #0
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f7fc fce6 	bl	8009a48 <VL53L0X_GetLimitCheckValue>
 800d07c:	4603      	mov	r3, r0
 800d07e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800d082:	6a3b      	ldr	r3, [r7, #32]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d006      	beq.n	800d096 <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 800d088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d08a:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d902      	bls.n	800d096 <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800d090:	2301      	movs	r3, #1
 800d092:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d096:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d109      	bne.n	800d0b2 <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d09e:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	2102      	movs	r1, #2
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f7fc fc4a 	bl	8009940 <VL53L0X_GetLimitCheckEnable>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800d0b2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d017      	beq.n	800d0ea <VL53L0X_get_pal_range_status+0x1d6>
 800d0ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d113      	bne.n	800d0ea <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d0c2:	f107 031c 	add.w	r3, r7, #28
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	2102      	movs	r1, #2
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	f7fc fcbc 	bl	8009a48 <VL53L0X_GetLimitCheckValue>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d006      	beq.n	800d0ea <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800d0dc:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800d0de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d902      	bls.n	800d0ea <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d0ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d109      	bne.n	800d106 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d0f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	2103      	movs	r1, #3
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f7fc fc20 	bl	8009940 <VL53L0X_GetLimitCheckEnable>
 800d100:	4603      	mov	r3, r0
 800d102:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800d106:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d023      	beq.n	800d156 <VL53L0X_get_pal_range_status+0x242>
 800d10e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d112:	2b00      	cmp	r3, #0
 800d114:	d11f      	bne.n	800d156 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800d116:	893b      	ldrh	r3, [r7, #8]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d102      	bne.n	800d122 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800d11c:	2300      	movs	r3, #0
 800d11e:	637b      	str	r3, [r7, #52]	; 0x34
 800d120:	e005      	b.n	800d12e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	021a      	lsls	r2, r3, #8
 800d126:	893b      	ldrh	r3, [r7, #8]
 800d128:	fbb2 f3f3 	udiv	r3, r2, r3
 800d12c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d12e:	f107 0318 	add.w	r3, r7, #24
 800d132:	461a      	mov	r2, r3
 800d134:	2103      	movs	r1, #3
 800d136:	68f8      	ldr	r0, [r7, #12]
 800d138:	f7fc fc86 	bl	8009a48 <VL53L0X_GetLimitCheckValue>
 800d13c:	4603      	mov	r3, r0
 800d13e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d006      	beq.n	800d156 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800d148:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800d14a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d202      	bcs.n	800d156 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800d150:	2301      	movs	r3, #1
 800d152:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d156:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d14a      	bne.n	800d1f4 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800d15e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d162:	2b01      	cmp	r3, #1
 800d164:	d103      	bne.n	800d16e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800d166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d168:	22ff      	movs	r2, #255	; 0xff
 800d16a:	701a      	strb	r2, [r3, #0]
 800d16c:	e042      	b.n	800d1f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800d16e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d172:	2b01      	cmp	r3, #1
 800d174:	d007      	beq.n	800d186 <VL53L0X_get_pal_range_status+0x272>
 800d176:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d003      	beq.n	800d186 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800d17e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d182:	2b03      	cmp	r3, #3
 800d184:	d103      	bne.n	800d18e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800d186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d188:	2205      	movs	r2, #5
 800d18a:	701a      	strb	r2, [r3, #0]
 800d18c:	e032      	b.n	800d1f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800d18e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d192:	2b06      	cmp	r3, #6
 800d194:	d003      	beq.n	800d19e <VL53L0X_get_pal_range_status+0x28a>
 800d196:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d19a:	2b09      	cmp	r3, #9
 800d19c:	d103      	bne.n	800d1a6 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800d19e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1a0:	2204      	movs	r2, #4
 800d1a2:	701a      	strb	r2, [r3, #0]
 800d1a4:	e026      	b.n	800d1f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800d1a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d1aa:	2b08      	cmp	r3, #8
 800d1ac:	d007      	beq.n	800d1be <VL53L0X_get_pal_range_status+0x2aa>
 800d1ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d1b2:	2b0a      	cmp	r3, #10
 800d1b4:	d003      	beq.n	800d1be <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800d1b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d103      	bne.n	800d1c6 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800d1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1c0:	2203      	movs	r2, #3
 800d1c2:	701a      	strb	r2, [r3, #0]
 800d1c4:	e016      	b.n	800d1f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800d1c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d1ca:	2b04      	cmp	r3, #4
 800d1cc:	d003      	beq.n	800d1d6 <VL53L0X_get_pal_range_status+0x2c2>
 800d1ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d103      	bne.n	800d1de <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800d1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1d8:	2202      	movs	r2, #2
 800d1da:	701a      	strb	r2, [r3, #0]
 800d1dc:	e00a      	b.n	800d1f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800d1de:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d103      	bne.n	800d1ee <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800d1e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	701a      	strb	r2, [r3, #0]
 800d1ec:	e002      	b.n	800d1f4 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800d1ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800d1f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d102      	bne.n	800d202 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800d1fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1fe:	2200      	movs	r2, #0
 800d200:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d202:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800d206:	461a      	mov	r2, r3
 800d208:	2101      	movs	r1, #1
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f7fc fb98 	bl	8009940 <VL53L0X_GetLimitCheckEnable>
 800d210:	4603      	mov	r3, r0
 800d212:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800d216:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d14f      	bne.n	800d2be <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800d21e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d222:	2b00      	cmp	r3, #0
 800d224:	d003      	beq.n	800d22e <VL53L0X_get_pal_range_status+0x31a>
 800d226:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d103      	bne.n	800d236 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800d22e:	2301      	movs	r3, #1
 800d230:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d234:	e002      	b.n	800d23c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800d236:	2300      	movs	r3, #0
 800d238:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d242:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800d246:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d24a:	2b04      	cmp	r3, #4
 800d24c:	d003      	beq.n	800d256 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800d24e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800d252:	2b00      	cmp	r3, #0
 800d254:	d103      	bne.n	800d25e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800d256:	2301      	movs	r3, #1
 800d258:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d25c:	e002      	b.n	800d264 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800d25e:	2300      	movs	r3, #0
 800d260:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d26a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800d26e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d272:	2b00      	cmp	r3, #0
 800d274:	d003      	beq.n	800d27e <VL53L0X_get_pal_range_status+0x36a>
 800d276:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d103      	bne.n	800d286 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800d27e:	2301      	movs	r3, #1
 800d280:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d284:	e002      	b.n	800d28c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800d286:	2300      	movs	r3, #0
 800d288:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d292:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800d296:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d003      	beq.n	800d2a6 <VL53L0X_get_pal_range_status+0x392>
 800d29e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d103      	bne.n	800d2ae <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2ac:	e002      	b.n	800d2b4 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d2ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d2be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3740      	adds	r7, #64	; 0x40
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b086      	sub	sp, #24
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	60f8      	str	r0, [r7, #12]
 800d2d2:	60b9      	str	r1, [r7, #8]
 800d2d4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800d2da:	2102      	movs	r1, #2
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f7fe f899 	bl	800b414 <VL53L0X_get_info_from_device>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800d2e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d11c      	bne.n	800d328 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800d2f4:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 800d2f6:	7dbb      	ldrb	r3, [r7, #22]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d107      	bne.n	800d30c <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	2200      	movs	r2, #0
 800d300:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	3340      	adds	r3, #64	; 0x40
 800d306:	2200      	movs	r2, #0
 800d308:	701a      	strb	r2, [r3, #0]
 800d30a:	e00d      	b.n	800d328 <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	33f3      	adds	r3, #243	; 0xf3
 800d31a:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	3340      	adds	r3, #64	; 0x40
 800d320:	6939      	ldr	r1, [r7, #16]
 800d322:	4618      	mov	r0, r3
 800d324:	f000 fc32 	bl	800db8c <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d328:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3718      	adds	r7, #24
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800d334:	b5b0      	push	{r4, r5, r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d33e:	2300      	movs	r3, #0
 800d340:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800d342:	f107 030d 	add.w	r3, r7, #13
 800d346:	683a      	ldr	r2, [r7, #0]
 800d348:	4619      	mov	r1, r3
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f7ff ffbd 	bl	800d2ca <VL53L0X_check_part_used>
 800d350:	4603      	mov	r3, r0
 800d352:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800d354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d13b      	bne.n	800d3d4 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 800d35c:	7b7b      	ldrb	r3, [r7, #13]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d108      	bne.n	800d374 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	4a30      	ldr	r2, [pc, #192]	; (800d428 <VL53L0X_get_device_info+0xf4>)
 800d366:	461c      	mov	r4, r3
 800d368:	4613      	mov	r3, r2
 800d36a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d36c:	6020      	str	r0, [r4, #0]
 800d36e:	6061      	str	r1, [r4, #4]
 800d370:	60a2      	str	r2, [r4, #8]
 800d372:	e027      	b.n	800d3c4 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 800d374:	7b7b      	ldrb	r3, [r7, #13]
 800d376:	2b22      	cmp	r3, #34	; 0x22
 800d378:	d80b      	bhi.n	800d392 <VL53L0X_get_device_info+0x5e>
 800d37a:	7b7b      	ldrb	r3, [r7, #13]
 800d37c:	2b20      	cmp	r3, #32
 800d37e:	d008      	beq.n	800d392 <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	4a2a      	ldr	r2, [pc, #168]	; (800d42c <VL53L0X_get_device_info+0xf8>)
 800d384:	461c      	mov	r4, r3
 800d386:	4613      	mov	r3, r2
 800d388:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d38a:	6020      	str	r0, [r4, #0]
 800d38c:	6061      	str	r1, [r4, #4]
 800d38e:	60a2      	str	r2, [r4, #8]
 800d390:	e018      	b.n	800d3c4 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800d392:	7b7b      	ldrb	r3, [r7, #13]
 800d394:	2b26      	cmp	r3, #38	; 0x26
 800d396:	d808      	bhi.n	800d3aa <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	4a25      	ldr	r2, [pc, #148]	; (800d430 <VL53L0X_get_device_info+0xfc>)
 800d39c:	461c      	mov	r4, r3
 800d39e:	4613      	mov	r3, r2
 800d3a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d3a2:	6020      	str	r0, [r4, #0]
 800d3a4:	6061      	str	r1, [r4, #4]
 800d3a6:	60a2      	str	r2, [r4, #8]
 800d3a8:	e00c      	b.n	800d3c4 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	4a21      	ldr	r2, [pc, #132]	; (800d434 <VL53L0X_get_device_info+0x100>)
 800d3ae:	461d      	mov	r5, r3
 800d3b0:	4614      	mov	r4, r2
 800d3b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3b4:	6028      	str	r0, [r5, #0]
 800d3b6:	6069      	str	r1, [r5, #4]
 800d3b8:	60aa      	str	r2, [r5, #8]
 800d3ba:	60eb      	str	r3, [r5, #12]
 800d3bc:	6820      	ldr	r0, [r4, #0]
 800d3be:	6128      	str	r0, [r5, #16]
 800d3c0:	7923      	ldrb	r3, [r4, #4]
 800d3c2:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	3320      	adds	r3, #32
 800d3c8:	491b      	ldr	r1, [pc, #108]	; (800d438 <VL53L0X_get_device_info+0x104>)
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	cb03      	ldmia	r3!, {r0, r1}
 800d3d0:	6010      	str	r0, [r2, #0]
 800d3d2:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d3d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d108      	bne.n	800d3ee <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	3360      	adds	r3, #96	; 0x60
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	21c0      	movs	r1, #192	; 0xc0
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 f998 	bl	800d71a <VL53L0X_RdByte>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d3ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d112      	bne.n	800d41c <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800d3f6:	f107 030e 	add.w	r3, r7, #14
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	21c2      	movs	r1, #194	; 0xc2
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 f98b 	bl	800d71a <VL53L0X_RdByte>
 800d404:	4603      	mov	r3, r0
 800d406:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	2201      	movs	r2, #1
 800d40c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800d410:	7bbb      	ldrb	r3, [r7, #14]
 800d412:	091b      	lsrs	r3, r3, #4
 800d414:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 800d41c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bdb0      	pop	{r4, r5, r7, pc}
 800d428:	0800e478 	.word	0x0800e478
 800d42c:	0800e484 	.word	0x0800e484
 800d430:	0800e490 	.word	0x0800e490
 800d434:	0800e49c 	.word	0x0800e49c
 800d438:	0800e4b4 	.word	0x0800e4b4

0800d43c <vl53l0x_init>:
#include "vl53l0x_init.h"

//ContinuousRanging
VL53L0X_Error vl53l0x_init(VL53L0X_DEV pMyDevice, VL53L0X_Version_t *pVersion, VL53L0X_DeviceInfo_t *pDeviceInfo, uint8_t address){
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b088      	sub	sp, #32
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
 800d448:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d44a:	2300      	movs	r3, #0
 800d44c:	77fb      	strb	r3, [r7, #31]
    
	int32_t status_int;

    status_int = VL53L0X_GetVersion(pVersion);
 800d44e:	68b8      	ldr	r0, [r7, #8]
 800d450:	f7fb fbc2 	bl	8008bd8 <VL53L0X_GetVersion>
 800d454:	4603      	mov	r3, r0
 800d456:	61bb      	str	r3, [r7, #24]
    if (status_int != 0){
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d001      	beq.n	800d462 <vl53l0x_init+0x26>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d45e:	23ec      	movs	r3, #236	; 0xec
 800d460:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800d462:	200a      	movs	r0, #10
 800d464:	f7f8 f994 	bl	8005790 <HAL_Delay>


    if(Status == VL53L0X_ERROR_NONE){
 800d468:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d104      	bne.n	800d47a <vl53l0x_init+0x3e>
    	Status = VL53L0X_DataInit(pMyDevice); // Data initialization
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f7fb fc1d 	bl	8008cb0 <VL53L0X_DataInit>
 800d476:	4603      	mov	r3, r0
 800d478:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800d47a:	200a      	movs	r0, #10
 800d47c:	f7f8 f988 	bl	8005790 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800d480:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d10d      	bne.n	800d4a4 <vl53l0x_init+0x68>
    	HAL_Delay(10);
 800d488:	200a      	movs	r0, #10
 800d48a:	f7f8 f981 	bl	8005790 <HAL_Delay>
    	Status = VL53L0X_SetDeviceAddress(pMyDevice, address);
 800d48e:	78fb      	ldrb	r3, [r7, #3]
 800d490:	4619      	mov	r1, r3
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f7fb fbf3 	bl	8008c7e <VL53L0X_SetDeviceAddress>
 800d498:	4603      	mov	r3, r0
 800d49a:	77fb      	strb	r3, [r7, #31]
    	pMyDevice->I2cDevAddr = address;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	78fa      	ldrb	r2, [r7, #3]
 800d4a0:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    }
    HAL_Delay(10);
 800d4a4:	200a      	movs	r0, #10
 800d4a6:	f7f8 f973 	bl	8005790 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800d4aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d105      	bne.n	800d4be <vl53l0x_init+0x82>
    	Status = VL53L0X_GetDeviceInfo(pMyDevice, pDeviceInfo);
 800d4b2:	6879      	ldr	r1, [r7, #4]
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f7fb fba9 	bl	8008c0c <VL53L0X_GetDeviceInfo>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800d4be:	200a      	movs	r0, #10
 800d4c0:	f7f8 f966 	bl	8005790 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800d4c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d104      	bne.n	800d4d6 <vl53l0x_init+0x9a>
        Status = VL53L0X_StaticInit(pMyDevice); // Device Initialization
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f7fb fcf9 	bl	8008ec4 <VL53L0X_StaticInit>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800d4d6:	200a      	movs	r0, #10
 800d4d8:	f7f8 f95a 	bl	8005790 <HAL_Delay>
    uint32_t refSpadCount;
    uint8_t isApertureSpads;
    uint8_t VhvSettings;
    uint8_t PhaseCal;

    if(Status == VL53L0X_ERROR_NONE){
 800d4dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d109      	bne.n	800d4f8 <vl53l0x_init+0xbc>
    	Status = VL53L0X_PerformRefCalibration(pMyDevice, &VhvSettings, &PhaseCal); // Device Initialization
 800d4e4:	f107 0211 	add.w	r2, r7, #17
 800d4e8:	f107 0312 	add.w	r3, r7, #18
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	f7fc fb9e 	bl	8009c30 <VL53L0X_PerformRefCalibration>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800d4f8:	200a      	movs	r0, #10
 800d4fa:	f7f8 f949 	bl	8005790 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800d4fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d109      	bne.n	800d51a <vl53l0x_init+0xde>
    	Status = VL53L0X_PerformRefSpadManagement(pMyDevice, &refSpadCount, &isApertureSpads); // Device Initialization
 800d506:	f107 0213 	add.w	r2, r7, #19
 800d50a:	f107 0314 	add.w	r3, r7, #20
 800d50e:	4619      	mov	r1, r3
 800d510:	68f8      	ldr	r0, [r7, #12]
 800d512:	f7fc ffe5 	bl	800a4e0 <VL53L0X_PerformRefSpadManagement>
 800d516:	4603      	mov	r3, r0
 800d518:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800d51a:	200a      	movs	r0, #10
 800d51c:	f7f8 f938 	bl	8005790 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800d520:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d105      	bne.n	800d534 <vl53l0x_init+0xf8>
        Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING); // Setup in single ranging mode
 800d528:	2101      	movs	r1, #1
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f7fb fedc 	bl	80092e8 <VL53L0X_SetDeviceMode>
 800d530:	4603      	mov	r3, r0
 800d532:	77fb      	strb	r3, [r7, #31]
    }
    if (Status == VL53L0X_ERROR_NONE) {
 800d534:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d106      	bne.n	800d54a <vl53l0x_init+0x10e>
    	Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pMyDevice, 20000);
 800d53c:	f644 6120 	movw	r1, #20000	; 0x4e20
 800d540:	68f8      	ldr	r0, [r7, #12]
 800d542:	f7fb ff2c 	bl	800939e <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800d546:	4603      	mov	r3, r0
 800d548:	77fb      	strb	r3, [r7, #31]
    }
    if (Status == VL53L0X_ERROR_NONE) {
 800d54a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d106      	bne.n	800d560 <vl53l0x_init+0x124>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 800d552:	2201      	movs	r2, #1
 800d554:	2100      	movs	r1, #0
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f7fc f966 	bl	8009828 <VL53L0X_SetLimitCheckEnable>
 800d55c:	4603      	mov	r3, r0
 800d55e:	77fb      	strb	r3, [r7, #31]
        		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
    }
    if (Status == VL53L0X_ERROR_NONE) {
 800d560:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d106      	bne.n	800d576 <vl53l0x_init+0x13a>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 800d568:	2201      	movs	r2, #1
 800d56a:	2101      	movs	r1, #1
 800d56c:	68f8      	ldr	r0, [r7, #12]
 800d56e:	f7fc f95b 	bl	8009828 <VL53L0X_SetLimitCheckEnable>
 800d572:	4603      	mov	r3, r0
 800d574:	77fb      	strb	r3, [r7, #31]
        		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800d576:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d107      	bne.n	800d58e <vl53l0x_init+0x152>
        Status = VL53L0X_SetLimitCheckValue(pMyDevice,
 800d57e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d582:	2101      	movs	r1, #1
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f7fc f9fd 	bl	8009984 <VL53L0X_SetLimitCheckValue>
 800d58a:	4603      	mov	r3, r0
 800d58c:	77fb      	strb	r3, [r7, #31]
        		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
        		(FixPoint1616_t)(0.5*65536));
	}
    if (Status == VL53L0X_ERROR_NONE) {
 800d58e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d107      	bne.n	800d5a6 <vl53l0x_init+0x16a>
        Status = VL53L0X_SetLimitCheckValue(pMyDevice,
 800d596:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800d59a:	2100      	movs	r1, #0
 800d59c:	68f8      	ldr	r0, [r7, #12]
 800d59e:	f7fc f9f1 	bl	8009984 <VL53L0X_SetLimitCheckValue>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	77fb      	strb	r3, [r7, #31]
        		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
        		(FixPoint1616_t)(18*65536));
    }
    HAL_Delay(10);
 800d5a6:	200a      	movs	r0, #10
 800d5a8:	f7f8 f8f2 	bl	8005790 <HAL_Delay>
    if(Status == VL53L0X_ERROR_NONE){
 800d5ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d104      	bne.n	800d5be <vl53l0x_init+0x182>
    	Status = VL53L0X_StartMeasurement(pMyDevice);
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	f7fc fbb7 	bl	8009d28 <VL53L0X_StartMeasurement>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	77fb      	strb	r3, [r7, #31]
    }
    return Status;
 800d5be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3720      	adds	r7, #32
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <vl53l0x_GetRanging_now>:

VL53L0X_Error vl53l0x_GetRanging_now(VL53L0X_DEV pMyDevice, uint16_t *result) {
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b08c      	sub	sp, #48	; 0x30
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	6039      	str	r1, [r7, #0]
	VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData = &RangingMeasurementData;
 800d5d4:	f107 030c 	add.w	r3, r7, #12
 800d5d8:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Status = WaitMeasurementDataReady(pMyDevice);
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f000 f828 	bl	800d636 <WaitMeasurementDataReady>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(Status == VL53L0X_ERROR_NONE){
 800d5ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d11a      	bne.n	800d62a <vl53l0x_GetRanging_now+0x60>
		Status = VL53L0X_GetRangingMeasurementData(pMyDevice, pRangingMeasurementData);
 800d5f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7fc fc62 	bl	8009ec0 <VL53L0X_GetRangingMeasurementData>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		VL53L0X_ClearInterruptMask(pMyDevice, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 800d602:	2104      	movs	r1, #4
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7fc ff09 	bl	800a41c <VL53L0X_ClearInterruptMask>
		VL53L0X_PollingDelay(pMyDevice);
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 fa02 	bl	800da14 <VL53L0X_PollingDelay>
		if(pRangingMeasurementData->RangeStatus == 0){
 800d610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d612:	7e1b      	ldrb	r3, [r3, #24]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d104      	bne.n	800d622 <vl53l0x_GetRanging_now+0x58>
			*result = pRangingMeasurementData->RangeMilliMeter;
 800d618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61a:	891a      	ldrh	r2, [r3, #8]
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	801a      	strh	r2, [r3, #0]
 800d620:	e003      	b.n	800d62a <vl53l0x_GetRanging_now+0x60>
		} else {
			*result = 8000;
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d628:	801a      	strh	r2, [r3, #0]
		}
	}
	return Status;
 800d62a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3730      	adds	r7, #48	; 0x30
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}

0800d636 <WaitMeasurementDataReady>:
    }

    return Status;
}

VL53L0X_Error WaitMeasurementDataReady(VL53L0X_DEV Dev) {
 800d636:	b580      	push	{r7, lr}
 800d638:	b086      	sub	sp, #24
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d63e:	2300      	movs	r3, #0
 800d640:	75fb      	strb	r3, [r7, #23]
    uint8_t NewDatReady=0;
 800d642:	2300      	movs	r3, #0
 800d644:	73fb      	strb	r3, [r7, #15]
    uint32_t LoopNb;

    // Wait until it finished
    // use timeout to avoid deadlock
    if (Status == VL53L0X_ERROR_NONE) {
 800d646:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d11e      	bne.n	800d68c <WaitMeasurementDataReady+0x56>
        LoopNb = 0;
 800d64e:	2300      	movs	r3, #0
 800d650:	613b      	str	r3, [r7, #16]
        do {
            Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDatReady);
 800d652:	f107 030f 	add.w	r3, r7, #15
 800d656:	4619      	mov	r1, r3
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f7fc fbf1 	bl	8009e40 <VL53L0X_GetMeasurementDataReady>
 800d65e:	4603      	mov	r3, r0
 800d660:	75fb      	strb	r3, [r7, #23]
            if ((NewDatReady == 0x01) || Status != VL53L0X_ERROR_NONE) {
 800d662:	7bfb      	ldrb	r3, [r7, #15]
 800d664:	2b01      	cmp	r3, #1
 800d666:	d00c      	beq.n	800d682 <WaitMeasurementDataReady+0x4c>
 800d668:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d108      	bne.n	800d682 <WaitMeasurementDataReady+0x4c>
                break;
            }
            LoopNb = LoopNb + 1;
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	3301      	adds	r3, #1
 800d674:	613b      	str	r3, [r7, #16]
            VL53L0X_PollingDelay(Dev);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 f9cc 	bl	800da14 <VL53L0X_PollingDelay>
        } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	2bc7      	cmp	r3, #199	; 0xc7
 800d680:	d9e7      	bls.n	800d652 <WaitMeasurementDataReady+0x1c>

        if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	2bc7      	cmp	r3, #199	; 0xc7
 800d686:	d901      	bls.n	800d68c <WaitMeasurementDataReady+0x56>
            Status = VL53L0X_ERROR_TIME_OUT;
 800d688:	23f9      	movs	r3, #249	; 0xf9
 800d68a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return Status;
 800d68c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d690:	4618      	mov	r0, r3
 800d692:	3718      	adds	r7, #24
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d698:	b580      	push	{r7, lr}
 800d69a:	b088      	sub	sp, #32
 800d69c:	af02      	add	r7, sp, #8
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	330a      	adds	r3, #10
 800d6a8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800d6b6:	b299      	uxth	r1, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	4613      	mov	r3, r2
 800d6c2:	68ba      	ldr	r2, [r7, #8]
 800d6c4:	f7f8 fcca 	bl	800605c <HAL_I2C_Master_Transmit>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	613b      	str	r3, [r7, #16]
    
    return status;
 800d6cc:	693b      	ldr	r3, [r7, #16]
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3718      	adds	r7, #24
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b088      	sub	sp, #32
 800d6da:	af02      	add	r7, sp, #8
 800d6dc:	60f8      	str	r0, [r7, #12]
 800d6de:	60b9      	str	r1, [r7, #8]
 800d6e0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	330a      	adds	r3, #10
 800d6e6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800d6f4:	f043 0301 	orr.w	r3, r3, #1
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	b299      	uxth	r1, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	4613      	mov	r3, r2
 800d706:	68ba      	ldr	r2, [r7, #8]
 800d708:	f7f8 fda6 	bl	8006258 <HAL_I2C_Master_Receive>
 800d70c:	4603      	mov	r3, r0
 800d70e:	613b      	str	r3, [r7, #16]
    
    return status;
 800d710:	693b      	ldr	r3, [r7, #16]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3718      	adds	r7, #24
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b086      	sub	sp, #24
 800d71e:	af00      	add	r7, sp, #0
 800d720:	60f8      	str	r0, [r7, #12]
 800d722:	460b      	mov	r3, r1
 800d724:	607a      	str	r2, [r7, #4]
 800d726:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d728:	2300      	movs	r3, #0
 800d72a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800d72c:	f107 030b 	add.w	r3, r7, #11
 800d730:	2201      	movs	r2, #1
 800d732:	4619      	mov	r1, r3
 800d734:	68f8      	ldr	r0, [r7, #12]
 800d736:	f7ff ffaf 	bl	800d698 <_I2CWrite>
 800d73a:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d002      	beq.n	800d748 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d742:	23ec      	movs	r3, #236	; 0xec
 800d744:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d746:	e00c      	b.n	800d762 <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 800d748:	2201      	movs	r2, #1
 800d74a:	6879      	ldr	r1, [r7, #4]
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f7ff ffc2 	bl	800d6d6 <_I2CRead>
 800d752:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d002      	beq.n	800d760 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d75a:	23ec      	movs	r3, #236	; 0xec
 800d75c:	75fb      	strb	r3, [r7, #23]
 800d75e:	e000      	b.n	800d762 <VL53L0X_RdByte+0x48>
    }
done:
 800d760:	bf00      	nop
    return Status;
 800d762:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3718      	adds	r7, #24
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
	...

0800d770 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	607a      	str	r2, [r7, #4]
 800d77a:	603b      	str	r3, [r7, #0]
 800d77c:	460b      	mov	r3, r1
 800d77e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d780:	2300      	movs	r3, #0
 800d782:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	2b3f      	cmp	r3, #63	; 0x3f
 800d788:	d902      	bls.n	800d790 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800d78a:	f06f 0303 	mvn.w	r3, #3
 800d78e:	e016      	b.n	800d7be <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 800d790:	4a0d      	ldr	r2, [pc, #52]	; (800d7c8 <VL53L0X_WriteMulti+0x58>)
 800d792:	7afb      	ldrb	r3, [r7, #11]
 800d794:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800d796:	683a      	ldr	r2, [r7, #0]
 800d798:	6879      	ldr	r1, [r7, #4]
 800d79a:	480c      	ldr	r0, [pc, #48]	; (800d7cc <VL53L0X_WriteMulti+0x5c>)
 800d79c:	f000 f9c0 	bl	800db20 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	4908      	ldr	r1, [pc, #32]	; (800d7c8 <VL53L0X_WriteMulti+0x58>)
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f7ff ff75 	bl	800d698 <_I2CWrite>
 800d7ae:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d001      	beq.n	800d7ba <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d7b6:	23ec      	movs	r3, #236	; 0xec
 800d7b8:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 800d7ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3718      	adds	r7, #24
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	20001ff4 	.word	0x20001ff4
 800d7cc:	20001ff5 	.word	0x20001ff5

0800d7d0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b086      	sub	sp, #24
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	607a      	str	r2, [r7, #4]
 800d7da:	603b      	str	r3, [r7, #0]
 800d7dc:	460b      	mov	r3, r1
 800d7de:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 800d7e4:	f107 030b 	add.w	r3, r7, #11
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	f7ff ff53 	bl	800d698 <_I2CWrite>
 800d7f2:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d002      	beq.n	800d800 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d7fa:	23ec      	movs	r3, #236	; 0xec
 800d7fc:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d7fe:	e00c      	b.n	800d81a <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 800d800:	683a      	ldr	r2, [r7, #0]
 800d802:	6879      	ldr	r1, [r7, #4]
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	f7ff ff66 	bl	800d6d6 <_I2CRead>
 800d80a:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d002      	beq.n	800d818 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d812:	23ec      	movs	r3, #236	; 0xec
 800d814:	75fb      	strb	r3, [r7, #23]
 800d816:	e000      	b.n	800d81a <VL53L0X_ReadMulti+0x4a>
    }
done:
 800d818:	bf00      	nop
    return Status;
 800d81a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3718      	adds	r7, #24
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
	...

0800d828 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800d828:	b580      	push	{r7, lr}
 800d82a:	b086      	sub	sp, #24
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	460b      	mov	r3, r1
 800d832:	607a      	str	r2, [r7, #4]
 800d834:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d836:	2300      	movs	r3, #0
 800d838:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800d83a:	f107 030b 	add.w	r3, r7, #11
 800d83e:	2201      	movs	r2, #1
 800d840:	4619      	mov	r1, r3
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f7ff ff28 	bl	800d698 <_I2CWrite>
 800d848:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d002      	beq.n	800d856 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d850:	23ec      	movs	r3, #236	; 0xec
 800d852:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d854:	e017      	b.n	800d886 <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800d856:	2202      	movs	r2, #2
 800d858:	490e      	ldr	r1, [pc, #56]	; (800d894 <VL53L0X_RdWord+0x6c>)
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	f7ff ff3b 	bl	800d6d6 <_I2CRead>
 800d860:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d002      	beq.n	800d86e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d868:	23ec      	movs	r3, #236	; 0xec
 800d86a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d86c:	e00b      	b.n	800d886 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800d86e:	4b09      	ldr	r3, [pc, #36]	; (800d894 <VL53L0X_RdWord+0x6c>)
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	b29b      	uxth	r3, r3
 800d874:	021b      	lsls	r3, r3, #8
 800d876:	b29a      	uxth	r2, r3
 800d878:	4b06      	ldr	r3, [pc, #24]	; (800d894 <VL53L0X_RdWord+0x6c>)
 800d87a:	785b      	ldrb	r3, [r3, #1]
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	4413      	add	r3, r2
 800d880:	b29a      	uxth	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 800d886:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3718      	adds	r7, #24
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	20001ff4 	.word	0x20001ff4

0800d898 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800d898:	b580      	push	{r7, lr}
 800d89a:	b086      	sub	sp, #24
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800d8aa:	f107 030b 	add.w	r3, r7, #11
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	68f8      	ldr	r0, [r7, #12]
 800d8b4:	f7ff fef0 	bl	800d698 <_I2CWrite>
 800d8b8:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d002      	beq.n	800d8c6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d8c0:	23ec      	movs	r3, #236	; 0xec
 800d8c2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d8c4:	e01b      	b.n	800d8fe <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800d8c6:	2204      	movs	r2, #4
 800d8c8:	4910      	ldr	r1, [pc, #64]	; (800d90c <VL53L0X_RdDWord+0x74>)
 800d8ca:	68f8      	ldr	r0, [r7, #12]
 800d8cc:	f7ff ff03 	bl	800d6d6 <_I2CRead>
 800d8d0:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d002      	beq.n	800d8de <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d8d8:	23ec      	movs	r3, #236	; 0xec
 800d8da:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d8dc:	e00f      	b.n	800d8fe <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800d8de:	4b0b      	ldr	r3, [pc, #44]	; (800d90c <VL53L0X_RdDWord+0x74>)
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	061a      	lsls	r2, r3, #24
 800d8e4:	4b09      	ldr	r3, [pc, #36]	; (800d90c <VL53L0X_RdDWord+0x74>)
 800d8e6:	785b      	ldrb	r3, [r3, #1]
 800d8e8:	041b      	lsls	r3, r3, #16
 800d8ea:	441a      	add	r2, r3
 800d8ec:	4b07      	ldr	r3, [pc, #28]	; (800d90c <VL53L0X_RdDWord+0x74>)
 800d8ee:	789b      	ldrb	r3, [r3, #2]
 800d8f0:	021b      	lsls	r3, r3, #8
 800d8f2:	4413      	add	r3, r2
 800d8f4:	4a05      	ldr	r2, [pc, #20]	; (800d90c <VL53L0X_RdDWord+0x74>)
 800d8f6:	78d2      	ldrb	r2, [r2, #3]
 800d8f8:	441a      	add	r2, r3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	601a      	str	r2, [r3, #0]

done:
    return Status;
 800d8fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3718      	adds	r7, #24
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	20001ff4 	.word	0x20001ff4

0800d910 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	460b      	mov	r3, r1
 800d91a:	70fb      	strb	r3, [r7, #3]
 800d91c:	4613      	mov	r3, r2
 800d91e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d920:	2300      	movs	r3, #0
 800d922:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800d924:	4a0b      	ldr	r2, [pc, #44]	; (800d954 <VL53L0X_WrByte+0x44>)
 800d926:	78fb      	ldrb	r3, [r7, #3]
 800d928:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800d92a:	4a0a      	ldr	r2, [pc, #40]	; (800d954 <VL53L0X_WrByte+0x44>)
 800d92c:	78bb      	ldrb	r3, [r7, #2]
 800d92e:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d930:	2202      	movs	r2, #2
 800d932:	4908      	ldr	r1, [pc, #32]	; (800d954 <VL53L0X_WrByte+0x44>)
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7ff feaf 	bl	800d698 <_I2CWrite>
 800d93a:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d001      	beq.n	800d946 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d942:	23ec      	movs	r3, #236	; 0xec
 800d944:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800d946:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	20001ff4 	.word	0x20001ff4

0800d958 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	460b      	mov	r3, r1
 800d962:	70fb      	strb	r3, [r7, #3]
 800d964:	4613      	mov	r3, r2
 800d966:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d968:	2300      	movs	r3, #0
 800d96a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800d96c:	4a0e      	ldr	r2, [pc, #56]	; (800d9a8 <VL53L0X_WrWord+0x50>)
 800d96e:	78fb      	ldrb	r3, [r7, #3]
 800d970:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800d972:	883b      	ldrh	r3, [r7, #0]
 800d974:	0a1b      	lsrs	r3, r3, #8
 800d976:	b29b      	uxth	r3, r3
 800d978:	b2da      	uxtb	r2, r3
 800d97a:	4b0b      	ldr	r3, [pc, #44]	; (800d9a8 <VL53L0X_WrWord+0x50>)
 800d97c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800d97e:	883b      	ldrh	r3, [r7, #0]
 800d980:	b2da      	uxtb	r2, r3
 800d982:	4b09      	ldr	r3, [pc, #36]	; (800d9a8 <VL53L0X_WrWord+0x50>)
 800d984:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800d986:	2203      	movs	r2, #3
 800d988:	4907      	ldr	r1, [pc, #28]	; (800d9a8 <VL53L0X_WrWord+0x50>)
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f7ff fe84 	bl	800d698 <_I2CWrite>
 800d990:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d001      	beq.n	800d99c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d998:	23ec      	movs	r3, #236	; 0xec
 800d99a:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800d99c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	20001ff4 	.word	0x20001ff4

0800d9ac <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	4608      	mov	r0, r1
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	70fb      	strb	r3, [r7, #3]
 800d9be:	460b      	mov	r3, r1
 800d9c0:	70bb      	strb	r3, [r7, #2]
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800d9ca:	f107 020e 	add.w	r2, r7, #14
 800d9ce:	78fb      	ldrb	r3, [r7, #3]
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7ff fea1 	bl	800d71a <VL53L0X_RdByte>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 800d9dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d110      	bne.n	800da06 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 800d9e4:	7bba      	ldrb	r2, [r7, #14]
 800d9e6:	78bb      	ldrb	r3, [r7, #2]
 800d9e8:	4013      	ands	r3, r2
 800d9ea:	b2da      	uxtb	r2, r3
 800d9ec:	787b      	ldrb	r3, [r7, #1]
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800d9f4:	7bba      	ldrb	r2, [r7, #14]
 800d9f6:	78fb      	ldrb	r3, [r7, #3]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7ff ff88 	bl	800d910 <VL53L0X_WrByte>
 800da00:	4603      	mov	r3, r0
 800da02:	73fb      	strb	r3, [r7, #15]
 800da04:	e000      	b.n	800da08 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800da06:	bf00      	nop
done:
    return Status;
 800da08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800da1c:	2300      	movs	r3, #0
 800da1e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800da20:	2002      	movs	r0, #2
 800da22:	f7f7 feb5 	bl	8005790 <HAL_Delay>
    return status;
 800da26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3710      	adds	r7, #16
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
	...

0800da34 <round>:
 800da34:	b538      	push	{r3, r4, r5, lr}
 800da36:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800da3a:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800da3e:	2a13      	cmp	r2, #19
 800da40:	460b      	mov	r3, r1
 800da42:	4684      	mov	ip, r0
 800da44:	468e      	mov	lr, r1
 800da46:	4604      	mov	r4, r0
 800da48:	dc20      	bgt.n	800da8c <round+0x58>
 800da4a:	2a00      	cmp	r2, #0
 800da4c:	db0e      	blt.n	800da6c <round+0x38>
 800da4e:	491e      	ldr	r1, [pc, #120]	; (800dac8 <round+0x94>)
 800da50:	4111      	asrs	r1, r2
 800da52:	ea03 0001 	and.w	r0, r3, r1
 800da56:	4320      	orrs	r0, r4
 800da58:	d015      	beq.n	800da86 <round+0x52>
 800da5a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800da5e:	fa43 f202 	asr.w	r2, r3, r2
 800da62:	4496      	add	lr, r2
 800da64:	2400      	movs	r4, #0
 800da66:	ea2e 0e01 	bic.w	lr, lr, r1
 800da6a:	e00a      	b.n	800da82 <round+0x4e>
 800da6c:	3201      	adds	r2, #1
 800da6e:	bf14      	ite	ne
 800da70:	2400      	movne	r4, #0
 800da72:	2400      	moveq	r4, #0
 800da74:	f001 4e00 	and.w	lr, r1, #2147483648	; 0x80000000
 800da78:	bf04      	itt	eq
 800da7a:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
 800da7e:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
 800da82:	4673      	mov	r3, lr
 800da84:	46a4      	mov	ip, r4
 800da86:	4660      	mov	r0, ip
 800da88:	4619      	mov	r1, r3
 800da8a:	bd38      	pop	{r3, r4, r5, pc}
 800da8c:	2a33      	cmp	r2, #51	; 0x33
 800da8e:	dd08      	ble.n	800daa2 <round+0x6e>
 800da90:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800da94:	d1f7      	bne.n	800da86 <round+0x52>
 800da96:	4602      	mov	r2, r0
 800da98:	f7f2 fc14 	bl	80002c4 <__adddf3>
 800da9c:	4684      	mov	ip, r0
 800da9e:	460b      	mov	r3, r1
 800daa0:	e7f1      	b.n	800da86 <round+0x52>
 800daa2:	f04f 31ff 	mov.w	r1, #4294967295
 800daa6:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800daaa:	fa21 f505 	lsr.w	r5, r1, r5
 800daae:	4228      	tst	r0, r5
 800dab0:	d0e9      	beq.n	800da86 <round+0x52>
 800dab2:	2301      	movs	r3, #1
 800dab4:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800dab8:	fa03 f202 	lsl.w	r2, r3, r2
 800dabc:	1884      	adds	r4, r0, r2
 800dabe:	bf28      	it	cs
 800dac0:	449e      	addcs	lr, r3
 800dac2:	ea24 0405 	bic.w	r4, r4, r5
 800dac6:	e7dc      	b.n	800da82 <round+0x4e>
 800dac8:	000fffff 	.word	0x000fffff

0800dacc <__errno>:
 800dacc:	4b01      	ldr	r3, [pc, #4]	; (800dad4 <__errno+0x8>)
 800dace:	6818      	ldr	r0, [r3, #0]
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	200002f8 	.word	0x200002f8

0800dad8 <__libc_init_array>:
 800dad8:	b570      	push	{r4, r5, r6, lr}
 800dada:	2600      	movs	r6, #0
 800dadc:	4d0c      	ldr	r5, [pc, #48]	; (800db10 <__libc_init_array+0x38>)
 800dade:	4c0d      	ldr	r4, [pc, #52]	; (800db14 <__libc_init_array+0x3c>)
 800dae0:	1b64      	subs	r4, r4, r5
 800dae2:	10a4      	asrs	r4, r4, #2
 800dae4:	42a6      	cmp	r6, r4
 800dae6:	d109      	bne.n	800dafc <__libc_init_array+0x24>
 800dae8:	f000 fca4 	bl	800e434 <_init>
 800daec:	2600      	movs	r6, #0
 800daee:	4d0a      	ldr	r5, [pc, #40]	; (800db18 <__libc_init_array+0x40>)
 800daf0:	4c0a      	ldr	r4, [pc, #40]	; (800db1c <__libc_init_array+0x44>)
 800daf2:	1b64      	subs	r4, r4, r5
 800daf4:	10a4      	asrs	r4, r4, #2
 800daf6:	42a6      	cmp	r6, r4
 800daf8:	d105      	bne.n	800db06 <__libc_init_array+0x2e>
 800dafa:	bd70      	pop	{r4, r5, r6, pc}
 800dafc:	f855 3b04 	ldr.w	r3, [r5], #4
 800db00:	4798      	blx	r3
 800db02:	3601      	adds	r6, #1
 800db04:	e7ee      	b.n	800dae4 <__libc_init_array+0xc>
 800db06:	f855 3b04 	ldr.w	r3, [r5], #4
 800db0a:	4798      	blx	r3
 800db0c:	3601      	adds	r6, #1
 800db0e:	e7f2      	b.n	800daf6 <__libc_init_array+0x1e>
 800db10:	0800ea14 	.word	0x0800ea14
 800db14:	0800ea14 	.word	0x0800ea14
 800db18:	0800ea14 	.word	0x0800ea14
 800db1c:	0800ea18 	.word	0x0800ea18

0800db20 <memcpy>:
 800db20:	440a      	add	r2, r1
 800db22:	4291      	cmp	r1, r2
 800db24:	f100 33ff 	add.w	r3, r0, #4294967295
 800db28:	d100      	bne.n	800db2c <memcpy+0xc>
 800db2a:	4770      	bx	lr
 800db2c:	b510      	push	{r4, lr}
 800db2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db32:	4291      	cmp	r1, r2
 800db34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db38:	d1f9      	bne.n	800db2e <memcpy+0xe>
 800db3a:	bd10      	pop	{r4, pc}

0800db3c <memset>:
 800db3c:	4603      	mov	r3, r0
 800db3e:	4402      	add	r2, r0
 800db40:	4293      	cmp	r3, r2
 800db42:	d100      	bne.n	800db46 <memset+0xa>
 800db44:	4770      	bx	lr
 800db46:	f803 1b01 	strb.w	r1, [r3], #1
 800db4a:	e7f9      	b.n	800db40 <memset+0x4>

0800db4c <siprintf>:
 800db4c:	b40e      	push	{r1, r2, r3}
 800db4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800db52:	b500      	push	{lr}
 800db54:	b09c      	sub	sp, #112	; 0x70
 800db56:	ab1d      	add	r3, sp, #116	; 0x74
 800db58:	9002      	str	r0, [sp, #8]
 800db5a:	9006      	str	r0, [sp, #24]
 800db5c:	9107      	str	r1, [sp, #28]
 800db5e:	9104      	str	r1, [sp, #16]
 800db60:	4808      	ldr	r0, [pc, #32]	; (800db84 <siprintf+0x38>)
 800db62:	4909      	ldr	r1, [pc, #36]	; (800db88 <siprintf+0x3c>)
 800db64:	f853 2b04 	ldr.w	r2, [r3], #4
 800db68:	9105      	str	r1, [sp, #20]
 800db6a:	6800      	ldr	r0, [r0, #0]
 800db6c:	a902      	add	r1, sp, #8
 800db6e:	9301      	str	r3, [sp, #4]
 800db70:	f000 f94e 	bl	800de10 <_svfiprintf_r>
 800db74:	2200      	movs	r2, #0
 800db76:	9b02      	ldr	r3, [sp, #8]
 800db78:	701a      	strb	r2, [r3, #0]
 800db7a:	b01c      	add	sp, #112	; 0x70
 800db7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800db80:	b003      	add	sp, #12
 800db82:	4770      	bx	lr
 800db84:	200002f8 	.word	0x200002f8
 800db88:	ffff0208 	.word	0xffff0208

0800db8c <strcpy>:
 800db8c:	4603      	mov	r3, r0
 800db8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db92:	f803 2b01 	strb.w	r2, [r3], #1
 800db96:	2a00      	cmp	r2, #0
 800db98:	d1f9      	bne.n	800db8e <strcpy+0x2>
 800db9a:	4770      	bx	lr

0800db9c <__retarget_lock_acquire_recursive>:
 800db9c:	4770      	bx	lr

0800db9e <__retarget_lock_release_recursive>:
 800db9e:	4770      	bx	lr

0800dba0 <_free_r>:
 800dba0:	b538      	push	{r3, r4, r5, lr}
 800dba2:	4605      	mov	r5, r0
 800dba4:	2900      	cmp	r1, #0
 800dba6:	d040      	beq.n	800dc2a <_free_r+0x8a>
 800dba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbac:	1f0c      	subs	r4, r1, #4
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	bfb8      	it	lt
 800dbb2:	18e4      	addlt	r4, r4, r3
 800dbb4:	f000 fbfa 	bl	800e3ac <__malloc_lock>
 800dbb8:	4a1c      	ldr	r2, [pc, #112]	; (800dc2c <_free_r+0x8c>)
 800dbba:	6813      	ldr	r3, [r2, #0]
 800dbbc:	b933      	cbnz	r3, 800dbcc <_free_r+0x2c>
 800dbbe:	6063      	str	r3, [r4, #4]
 800dbc0:	6014      	str	r4, [r2, #0]
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbc8:	f000 bbf6 	b.w	800e3b8 <__malloc_unlock>
 800dbcc:	42a3      	cmp	r3, r4
 800dbce:	d908      	bls.n	800dbe2 <_free_r+0x42>
 800dbd0:	6820      	ldr	r0, [r4, #0]
 800dbd2:	1821      	adds	r1, r4, r0
 800dbd4:	428b      	cmp	r3, r1
 800dbd6:	bf01      	itttt	eq
 800dbd8:	6819      	ldreq	r1, [r3, #0]
 800dbda:	685b      	ldreq	r3, [r3, #4]
 800dbdc:	1809      	addeq	r1, r1, r0
 800dbde:	6021      	streq	r1, [r4, #0]
 800dbe0:	e7ed      	b.n	800dbbe <_free_r+0x1e>
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	b10b      	cbz	r3, 800dbec <_free_r+0x4c>
 800dbe8:	42a3      	cmp	r3, r4
 800dbea:	d9fa      	bls.n	800dbe2 <_free_r+0x42>
 800dbec:	6811      	ldr	r1, [r2, #0]
 800dbee:	1850      	adds	r0, r2, r1
 800dbf0:	42a0      	cmp	r0, r4
 800dbf2:	d10b      	bne.n	800dc0c <_free_r+0x6c>
 800dbf4:	6820      	ldr	r0, [r4, #0]
 800dbf6:	4401      	add	r1, r0
 800dbf8:	1850      	adds	r0, r2, r1
 800dbfa:	4283      	cmp	r3, r0
 800dbfc:	6011      	str	r1, [r2, #0]
 800dbfe:	d1e0      	bne.n	800dbc2 <_free_r+0x22>
 800dc00:	6818      	ldr	r0, [r3, #0]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	4401      	add	r1, r0
 800dc06:	6011      	str	r1, [r2, #0]
 800dc08:	6053      	str	r3, [r2, #4]
 800dc0a:	e7da      	b.n	800dbc2 <_free_r+0x22>
 800dc0c:	d902      	bls.n	800dc14 <_free_r+0x74>
 800dc0e:	230c      	movs	r3, #12
 800dc10:	602b      	str	r3, [r5, #0]
 800dc12:	e7d6      	b.n	800dbc2 <_free_r+0x22>
 800dc14:	6820      	ldr	r0, [r4, #0]
 800dc16:	1821      	adds	r1, r4, r0
 800dc18:	428b      	cmp	r3, r1
 800dc1a:	bf01      	itttt	eq
 800dc1c:	6819      	ldreq	r1, [r3, #0]
 800dc1e:	685b      	ldreq	r3, [r3, #4]
 800dc20:	1809      	addeq	r1, r1, r0
 800dc22:	6021      	streq	r1, [r4, #0]
 800dc24:	6063      	str	r3, [r4, #4]
 800dc26:	6054      	str	r4, [r2, #4]
 800dc28:	e7cb      	b.n	800dbc2 <_free_r+0x22>
 800dc2a:	bd38      	pop	{r3, r4, r5, pc}
 800dc2c:	20002038 	.word	0x20002038

0800dc30 <sbrk_aligned>:
 800dc30:	b570      	push	{r4, r5, r6, lr}
 800dc32:	4e0e      	ldr	r6, [pc, #56]	; (800dc6c <sbrk_aligned+0x3c>)
 800dc34:	460c      	mov	r4, r1
 800dc36:	6831      	ldr	r1, [r6, #0]
 800dc38:	4605      	mov	r5, r0
 800dc3a:	b911      	cbnz	r1, 800dc42 <sbrk_aligned+0x12>
 800dc3c:	f000 fb7e 	bl	800e33c <_sbrk_r>
 800dc40:	6030      	str	r0, [r6, #0]
 800dc42:	4621      	mov	r1, r4
 800dc44:	4628      	mov	r0, r5
 800dc46:	f000 fb79 	bl	800e33c <_sbrk_r>
 800dc4a:	1c43      	adds	r3, r0, #1
 800dc4c:	d00a      	beq.n	800dc64 <sbrk_aligned+0x34>
 800dc4e:	1cc4      	adds	r4, r0, #3
 800dc50:	f024 0403 	bic.w	r4, r4, #3
 800dc54:	42a0      	cmp	r0, r4
 800dc56:	d007      	beq.n	800dc68 <sbrk_aligned+0x38>
 800dc58:	1a21      	subs	r1, r4, r0
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	f000 fb6e 	bl	800e33c <_sbrk_r>
 800dc60:	3001      	adds	r0, #1
 800dc62:	d101      	bne.n	800dc68 <sbrk_aligned+0x38>
 800dc64:	f04f 34ff 	mov.w	r4, #4294967295
 800dc68:	4620      	mov	r0, r4
 800dc6a:	bd70      	pop	{r4, r5, r6, pc}
 800dc6c:	2000203c 	.word	0x2000203c

0800dc70 <_malloc_r>:
 800dc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc74:	1ccd      	adds	r5, r1, #3
 800dc76:	f025 0503 	bic.w	r5, r5, #3
 800dc7a:	3508      	adds	r5, #8
 800dc7c:	2d0c      	cmp	r5, #12
 800dc7e:	bf38      	it	cc
 800dc80:	250c      	movcc	r5, #12
 800dc82:	2d00      	cmp	r5, #0
 800dc84:	4607      	mov	r7, r0
 800dc86:	db01      	blt.n	800dc8c <_malloc_r+0x1c>
 800dc88:	42a9      	cmp	r1, r5
 800dc8a:	d905      	bls.n	800dc98 <_malloc_r+0x28>
 800dc8c:	230c      	movs	r3, #12
 800dc8e:	2600      	movs	r6, #0
 800dc90:	603b      	str	r3, [r7, #0]
 800dc92:	4630      	mov	r0, r6
 800dc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc98:	4e2e      	ldr	r6, [pc, #184]	; (800dd54 <_malloc_r+0xe4>)
 800dc9a:	f000 fb87 	bl	800e3ac <__malloc_lock>
 800dc9e:	6833      	ldr	r3, [r6, #0]
 800dca0:	461c      	mov	r4, r3
 800dca2:	bb34      	cbnz	r4, 800dcf2 <_malloc_r+0x82>
 800dca4:	4629      	mov	r1, r5
 800dca6:	4638      	mov	r0, r7
 800dca8:	f7ff ffc2 	bl	800dc30 <sbrk_aligned>
 800dcac:	1c43      	adds	r3, r0, #1
 800dcae:	4604      	mov	r4, r0
 800dcb0:	d14d      	bne.n	800dd4e <_malloc_r+0xde>
 800dcb2:	6834      	ldr	r4, [r6, #0]
 800dcb4:	4626      	mov	r6, r4
 800dcb6:	2e00      	cmp	r6, #0
 800dcb8:	d140      	bne.n	800dd3c <_malloc_r+0xcc>
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	4631      	mov	r1, r6
 800dcbe:	4638      	mov	r0, r7
 800dcc0:	eb04 0803 	add.w	r8, r4, r3
 800dcc4:	f000 fb3a 	bl	800e33c <_sbrk_r>
 800dcc8:	4580      	cmp	r8, r0
 800dcca:	d13a      	bne.n	800dd42 <_malloc_r+0xd2>
 800dccc:	6821      	ldr	r1, [r4, #0]
 800dcce:	3503      	adds	r5, #3
 800dcd0:	1a6d      	subs	r5, r5, r1
 800dcd2:	f025 0503 	bic.w	r5, r5, #3
 800dcd6:	3508      	adds	r5, #8
 800dcd8:	2d0c      	cmp	r5, #12
 800dcda:	bf38      	it	cc
 800dcdc:	250c      	movcc	r5, #12
 800dcde:	4638      	mov	r0, r7
 800dce0:	4629      	mov	r1, r5
 800dce2:	f7ff ffa5 	bl	800dc30 <sbrk_aligned>
 800dce6:	3001      	adds	r0, #1
 800dce8:	d02b      	beq.n	800dd42 <_malloc_r+0xd2>
 800dcea:	6823      	ldr	r3, [r4, #0]
 800dcec:	442b      	add	r3, r5
 800dcee:	6023      	str	r3, [r4, #0]
 800dcf0:	e00e      	b.n	800dd10 <_malloc_r+0xa0>
 800dcf2:	6822      	ldr	r2, [r4, #0]
 800dcf4:	1b52      	subs	r2, r2, r5
 800dcf6:	d41e      	bmi.n	800dd36 <_malloc_r+0xc6>
 800dcf8:	2a0b      	cmp	r2, #11
 800dcfa:	d916      	bls.n	800dd2a <_malloc_r+0xba>
 800dcfc:	1961      	adds	r1, r4, r5
 800dcfe:	42a3      	cmp	r3, r4
 800dd00:	6025      	str	r5, [r4, #0]
 800dd02:	bf18      	it	ne
 800dd04:	6059      	strne	r1, [r3, #4]
 800dd06:	6863      	ldr	r3, [r4, #4]
 800dd08:	bf08      	it	eq
 800dd0a:	6031      	streq	r1, [r6, #0]
 800dd0c:	5162      	str	r2, [r4, r5]
 800dd0e:	604b      	str	r3, [r1, #4]
 800dd10:	4638      	mov	r0, r7
 800dd12:	f104 060b 	add.w	r6, r4, #11
 800dd16:	f000 fb4f 	bl	800e3b8 <__malloc_unlock>
 800dd1a:	f026 0607 	bic.w	r6, r6, #7
 800dd1e:	1d23      	adds	r3, r4, #4
 800dd20:	1af2      	subs	r2, r6, r3
 800dd22:	d0b6      	beq.n	800dc92 <_malloc_r+0x22>
 800dd24:	1b9b      	subs	r3, r3, r6
 800dd26:	50a3      	str	r3, [r4, r2]
 800dd28:	e7b3      	b.n	800dc92 <_malloc_r+0x22>
 800dd2a:	6862      	ldr	r2, [r4, #4]
 800dd2c:	42a3      	cmp	r3, r4
 800dd2e:	bf0c      	ite	eq
 800dd30:	6032      	streq	r2, [r6, #0]
 800dd32:	605a      	strne	r2, [r3, #4]
 800dd34:	e7ec      	b.n	800dd10 <_malloc_r+0xa0>
 800dd36:	4623      	mov	r3, r4
 800dd38:	6864      	ldr	r4, [r4, #4]
 800dd3a:	e7b2      	b.n	800dca2 <_malloc_r+0x32>
 800dd3c:	4634      	mov	r4, r6
 800dd3e:	6876      	ldr	r6, [r6, #4]
 800dd40:	e7b9      	b.n	800dcb6 <_malloc_r+0x46>
 800dd42:	230c      	movs	r3, #12
 800dd44:	4638      	mov	r0, r7
 800dd46:	603b      	str	r3, [r7, #0]
 800dd48:	f000 fb36 	bl	800e3b8 <__malloc_unlock>
 800dd4c:	e7a1      	b.n	800dc92 <_malloc_r+0x22>
 800dd4e:	6025      	str	r5, [r4, #0]
 800dd50:	e7de      	b.n	800dd10 <_malloc_r+0xa0>
 800dd52:	bf00      	nop
 800dd54:	20002038 	.word	0x20002038

0800dd58 <__ssputs_r>:
 800dd58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd5c:	688e      	ldr	r6, [r1, #8]
 800dd5e:	4682      	mov	sl, r0
 800dd60:	429e      	cmp	r6, r3
 800dd62:	460c      	mov	r4, r1
 800dd64:	4690      	mov	r8, r2
 800dd66:	461f      	mov	r7, r3
 800dd68:	d838      	bhi.n	800dddc <__ssputs_r+0x84>
 800dd6a:	898a      	ldrh	r2, [r1, #12]
 800dd6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd70:	d032      	beq.n	800ddd8 <__ssputs_r+0x80>
 800dd72:	6825      	ldr	r5, [r4, #0]
 800dd74:	6909      	ldr	r1, [r1, #16]
 800dd76:	3301      	adds	r3, #1
 800dd78:	eba5 0901 	sub.w	r9, r5, r1
 800dd7c:	6965      	ldr	r5, [r4, #20]
 800dd7e:	444b      	add	r3, r9
 800dd80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd88:	106d      	asrs	r5, r5, #1
 800dd8a:	429d      	cmp	r5, r3
 800dd8c:	bf38      	it	cc
 800dd8e:	461d      	movcc	r5, r3
 800dd90:	0553      	lsls	r3, r2, #21
 800dd92:	d531      	bpl.n	800ddf8 <__ssputs_r+0xa0>
 800dd94:	4629      	mov	r1, r5
 800dd96:	f7ff ff6b 	bl	800dc70 <_malloc_r>
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	b950      	cbnz	r0, 800ddb4 <__ssputs_r+0x5c>
 800dd9e:	230c      	movs	r3, #12
 800dda0:	f04f 30ff 	mov.w	r0, #4294967295
 800dda4:	f8ca 3000 	str.w	r3, [sl]
 800dda8:	89a3      	ldrh	r3, [r4, #12]
 800ddaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddae:	81a3      	strh	r3, [r4, #12]
 800ddb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddb4:	464a      	mov	r2, r9
 800ddb6:	6921      	ldr	r1, [r4, #16]
 800ddb8:	f7ff feb2 	bl	800db20 <memcpy>
 800ddbc:	89a3      	ldrh	r3, [r4, #12]
 800ddbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ddc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddc6:	81a3      	strh	r3, [r4, #12]
 800ddc8:	6126      	str	r6, [r4, #16]
 800ddca:	444e      	add	r6, r9
 800ddcc:	6026      	str	r6, [r4, #0]
 800ddce:	463e      	mov	r6, r7
 800ddd0:	6165      	str	r5, [r4, #20]
 800ddd2:	eba5 0509 	sub.w	r5, r5, r9
 800ddd6:	60a5      	str	r5, [r4, #8]
 800ddd8:	42be      	cmp	r6, r7
 800ddda:	d900      	bls.n	800ddde <__ssputs_r+0x86>
 800dddc:	463e      	mov	r6, r7
 800ddde:	4632      	mov	r2, r6
 800dde0:	4641      	mov	r1, r8
 800dde2:	6820      	ldr	r0, [r4, #0]
 800dde4:	f000 fac8 	bl	800e378 <memmove>
 800dde8:	68a3      	ldr	r3, [r4, #8]
 800ddea:	2000      	movs	r0, #0
 800ddec:	1b9b      	subs	r3, r3, r6
 800ddee:	60a3      	str	r3, [r4, #8]
 800ddf0:	6823      	ldr	r3, [r4, #0]
 800ddf2:	4433      	add	r3, r6
 800ddf4:	6023      	str	r3, [r4, #0]
 800ddf6:	e7db      	b.n	800ddb0 <__ssputs_r+0x58>
 800ddf8:	462a      	mov	r2, r5
 800ddfa:	f000 fae3 	bl	800e3c4 <_realloc_r>
 800ddfe:	4606      	mov	r6, r0
 800de00:	2800      	cmp	r0, #0
 800de02:	d1e1      	bne.n	800ddc8 <__ssputs_r+0x70>
 800de04:	4650      	mov	r0, sl
 800de06:	6921      	ldr	r1, [r4, #16]
 800de08:	f7ff feca 	bl	800dba0 <_free_r>
 800de0c:	e7c7      	b.n	800dd9e <__ssputs_r+0x46>
	...

0800de10 <_svfiprintf_r>:
 800de10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de14:	4698      	mov	r8, r3
 800de16:	898b      	ldrh	r3, [r1, #12]
 800de18:	4607      	mov	r7, r0
 800de1a:	061b      	lsls	r3, r3, #24
 800de1c:	460d      	mov	r5, r1
 800de1e:	4614      	mov	r4, r2
 800de20:	b09d      	sub	sp, #116	; 0x74
 800de22:	d50e      	bpl.n	800de42 <_svfiprintf_r+0x32>
 800de24:	690b      	ldr	r3, [r1, #16]
 800de26:	b963      	cbnz	r3, 800de42 <_svfiprintf_r+0x32>
 800de28:	2140      	movs	r1, #64	; 0x40
 800de2a:	f7ff ff21 	bl	800dc70 <_malloc_r>
 800de2e:	6028      	str	r0, [r5, #0]
 800de30:	6128      	str	r0, [r5, #16]
 800de32:	b920      	cbnz	r0, 800de3e <_svfiprintf_r+0x2e>
 800de34:	230c      	movs	r3, #12
 800de36:	603b      	str	r3, [r7, #0]
 800de38:	f04f 30ff 	mov.w	r0, #4294967295
 800de3c:	e0d1      	b.n	800dfe2 <_svfiprintf_r+0x1d2>
 800de3e:	2340      	movs	r3, #64	; 0x40
 800de40:	616b      	str	r3, [r5, #20]
 800de42:	2300      	movs	r3, #0
 800de44:	9309      	str	r3, [sp, #36]	; 0x24
 800de46:	2320      	movs	r3, #32
 800de48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de4c:	2330      	movs	r3, #48	; 0x30
 800de4e:	f04f 0901 	mov.w	r9, #1
 800de52:	f8cd 800c 	str.w	r8, [sp, #12]
 800de56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dffc <_svfiprintf_r+0x1ec>
 800de5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de5e:	4623      	mov	r3, r4
 800de60:	469a      	mov	sl, r3
 800de62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de66:	b10a      	cbz	r2, 800de6c <_svfiprintf_r+0x5c>
 800de68:	2a25      	cmp	r2, #37	; 0x25
 800de6a:	d1f9      	bne.n	800de60 <_svfiprintf_r+0x50>
 800de6c:	ebba 0b04 	subs.w	fp, sl, r4
 800de70:	d00b      	beq.n	800de8a <_svfiprintf_r+0x7a>
 800de72:	465b      	mov	r3, fp
 800de74:	4622      	mov	r2, r4
 800de76:	4629      	mov	r1, r5
 800de78:	4638      	mov	r0, r7
 800de7a:	f7ff ff6d 	bl	800dd58 <__ssputs_r>
 800de7e:	3001      	adds	r0, #1
 800de80:	f000 80aa 	beq.w	800dfd8 <_svfiprintf_r+0x1c8>
 800de84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de86:	445a      	add	r2, fp
 800de88:	9209      	str	r2, [sp, #36]	; 0x24
 800de8a:	f89a 3000 	ldrb.w	r3, [sl]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f000 80a2 	beq.w	800dfd8 <_svfiprintf_r+0x1c8>
 800de94:	2300      	movs	r3, #0
 800de96:	f04f 32ff 	mov.w	r2, #4294967295
 800de9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de9e:	f10a 0a01 	add.w	sl, sl, #1
 800dea2:	9304      	str	r3, [sp, #16]
 800dea4:	9307      	str	r3, [sp, #28]
 800dea6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800deaa:	931a      	str	r3, [sp, #104]	; 0x68
 800deac:	4654      	mov	r4, sl
 800deae:	2205      	movs	r2, #5
 800deb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deb4:	4851      	ldr	r0, [pc, #324]	; (800dffc <_svfiprintf_r+0x1ec>)
 800deb6:	f000 fa51 	bl	800e35c <memchr>
 800deba:	9a04      	ldr	r2, [sp, #16]
 800debc:	b9d8      	cbnz	r0, 800def6 <_svfiprintf_r+0xe6>
 800debe:	06d0      	lsls	r0, r2, #27
 800dec0:	bf44      	itt	mi
 800dec2:	2320      	movmi	r3, #32
 800dec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dec8:	0711      	lsls	r1, r2, #28
 800deca:	bf44      	itt	mi
 800decc:	232b      	movmi	r3, #43	; 0x2b
 800dece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ded2:	f89a 3000 	ldrb.w	r3, [sl]
 800ded6:	2b2a      	cmp	r3, #42	; 0x2a
 800ded8:	d015      	beq.n	800df06 <_svfiprintf_r+0xf6>
 800deda:	4654      	mov	r4, sl
 800dedc:	2000      	movs	r0, #0
 800dede:	f04f 0c0a 	mov.w	ip, #10
 800dee2:	9a07      	ldr	r2, [sp, #28]
 800dee4:	4621      	mov	r1, r4
 800dee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deea:	3b30      	subs	r3, #48	; 0x30
 800deec:	2b09      	cmp	r3, #9
 800deee:	d94e      	bls.n	800df8e <_svfiprintf_r+0x17e>
 800def0:	b1b0      	cbz	r0, 800df20 <_svfiprintf_r+0x110>
 800def2:	9207      	str	r2, [sp, #28]
 800def4:	e014      	b.n	800df20 <_svfiprintf_r+0x110>
 800def6:	eba0 0308 	sub.w	r3, r0, r8
 800defa:	fa09 f303 	lsl.w	r3, r9, r3
 800defe:	4313      	orrs	r3, r2
 800df00:	46a2      	mov	sl, r4
 800df02:	9304      	str	r3, [sp, #16]
 800df04:	e7d2      	b.n	800deac <_svfiprintf_r+0x9c>
 800df06:	9b03      	ldr	r3, [sp, #12]
 800df08:	1d19      	adds	r1, r3, #4
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	9103      	str	r1, [sp, #12]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	bfbb      	ittet	lt
 800df12:	425b      	neglt	r3, r3
 800df14:	f042 0202 	orrlt.w	r2, r2, #2
 800df18:	9307      	strge	r3, [sp, #28]
 800df1a:	9307      	strlt	r3, [sp, #28]
 800df1c:	bfb8      	it	lt
 800df1e:	9204      	strlt	r2, [sp, #16]
 800df20:	7823      	ldrb	r3, [r4, #0]
 800df22:	2b2e      	cmp	r3, #46	; 0x2e
 800df24:	d10c      	bne.n	800df40 <_svfiprintf_r+0x130>
 800df26:	7863      	ldrb	r3, [r4, #1]
 800df28:	2b2a      	cmp	r3, #42	; 0x2a
 800df2a:	d135      	bne.n	800df98 <_svfiprintf_r+0x188>
 800df2c:	9b03      	ldr	r3, [sp, #12]
 800df2e:	3402      	adds	r4, #2
 800df30:	1d1a      	adds	r2, r3, #4
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	9203      	str	r2, [sp, #12]
 800df36:	2b00      	cmp	r3, #0
 800df38:	bfb8      	it	lt
 800df3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800df3e:	9305      	str	r3, [sp, #20]
 800df40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800e000 <_svfiprintf_r+0x1f0>
 800df44:	2203      	movs	r2, #3
 800df46:	4650      	mov	r0, sl
 800df48:	7821      	ldrb	r1, [r4, #0]
 800df4a:	f000 fa07 	bl	800e35c <memchr>
 800df4e:	b140      	cbz	r0, 800df62 <_svfiprintf_r+0x152>
 800df50:	2340      	movs	r3, #64	; 0x40
 800df52:	eba0 000a 	sub.w	r0, r0, sl
 800df56:	fa03 f000 	lsl.w	r0, r3, r0
 800df5a:	9b04      	ldr	r3, [sp, #16]
 800df5c:	3401      	adds	r4, #1
 800df5e:	4303      	orrs	r3, r0
 800df60:	9304      	str	r3, [sp, #16]
 800df62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df66:	2206      	movs	r2, #6
 800df68:	4826      	ldr	r0, [pc, #152]	; (800e004 <_svfiprintf_r+0x1f4>)
 800df6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df6e:	f000 f9f5 	bl	800e35c <memchr>
 800df72:	2800      	cmp	r0, #0
 800df74:	d038      	beq.n	800dfe8 <_svfiprintf_r+0x1d8>
 800df76:	4b24      	ldr	r3, [pc, #144]	; (800e008 <_svfiprintf_r+0x1f8>)
 800df78:	bb1b      	cbnz	r3, 800dfc2 <_svfiprintf_r+0x1b2>
 800df7a:	9b03      	ldr	r3, [sp, #12]
 800df7c:	3307      	adds	r3, #7
 800df7e:	f023 0307 	bic.w	r3, r3, #7
 800df82:	3308      	adds	r3, #8
 800df84:	9303      	str	r3, [sp, #12]
 800df86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df88:	4433      	add	r3, r6
 800df8a:	9309      	str	r3, [sp, #36]	; 0x24
 800df8c:	e767      	b.n	800de5e <_svfiprintf_r+0x4e>
 800df8e:	460c      	mov	r4, r1
 800df90:	2001      	movs	r0, #1
 800df92:	fb0c 3202 	mla	r2, ip, r2, r3
 800df96:	e7a5      	b.n	800dee4 <_svfiprintf_r+0xd4>
 800df98:	2300      	movs	r3, #0
 800df9a:	f04f 0c0a 	mov.w	ip, #10
 800df9e:	4619      	mov	r1, r3
 800dfa0:	3401      	adds	r4, #1
 800dfa2:	9305      	str	r3, [sp, #20]
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfaa:	3a30      	subs	r2, #48	; 0x30
 800dfac:	2a09      	cmp	r2, #9
 800dfae:	d903      	bls.n	800dfb8 <_svfiprintf_r+0x1a8>
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d0c5      	beq.n	800df40 <_svfiprintf_r+0x130>
 800dfb4:	9105      	str	r1, [sp, #20]
 800dfb6:	e7c3      	b.n	800df40 <_svfiprintf_r+0x130>
 800dfb8:	4604      	mov	r4, r0
 800dfba:	2301      	movs	r3, #1
 800dfbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfc0:	e7f0      	b.n	800dfa4 <_svfiprintf_r+0x194>
 800dfc2:	ab03      	add	r3, sp, #12
 800dfc4:	9300      	str	r3, [sp, #0]
 800dfc6:	462a      	mov	r2, r5
 800dfc8:	4638      	mov	r0, r7
 800dfca:	4b10      	ldr	r3, [pc, #64]	; (800e00c <_svfiprintf_r+0x1fc>)
 800dfcc:	a904      	add	r1, sp, #16
 800dfce:	f3af 8000 	nop.w
 800dfd2:	1c42      	adds	r2, r0, #1
 800dfd4:	4606      	mov	r6, r0
 800dfd6:	d1d6      	bne.n	800df86 <_svfiprintf_r+0x176>
 800dfd8:	89ab      	ldrh	r3, [r5, #12]
 800dfda:	065b      	lsls	r3, r3, #25
 800dfdc:	f53f af2c 	bmi.w	800de38 <_svfiprintf_r+0x28>
 800dfe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfe2:	b01d      	add	sp, #116	; 0x74
 800dfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe8:	ab03      	add	r3, sp, #12
 800dfea:	9300      	str	r3, [sp, #0]
 800dfec:	462a      	mov	r2, r5
 800dfee:	4638      	mov	r0, r7
 800dff0:	4b06      	ldr	r3, [pc, #24]	; (800e00c <_svfiprintf_r+0x1fc>)
 800dff2:	a904      	add	r1, sp, #16
 800dff4:	f000 f87c 	bl	800e0f0 <_printf_i>
 800dff8:	e7eb      	b.n	800dfd2 <_svfiprintf_r+0x1c2>
 800dffa:	bf00      	nop
 800dffc:	0800e9e0 	.word	0x0800e9e0
 800e000:	0800e9e6 	.word	0x0800e9e6
 800e004:	0800e9ea 	.word	0x0800e9ea
 800e008:	00000000 	.word	0x00000000
 800e00c:	0800dd59 	.word	0x0800dd59

0800e010 <_printf_common>:
 800e010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e014:	4616      	mov	r6, r2
 800e016:	4699      	mov	r9, r3
 800e018:	688a      	ldr	r2, [r1, #8]
 800e01a:	690b      	ldr	r3, [r1, #16]
 800e01c:	4607      	mov	r7, r0
 800e01e:	4293      	cmp	r3, r2
 800e020:	bfb8      	it	lt
 800e022:	4613      	movlt	r3, r2
 800e024:	6033      	str	r3, [r6, #0]
 800e026:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e02a:	460c      	mov	r4, r1
 800e02c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e030:	b10a      	cbz	r2, 800e036 <_printf_common+0x26>
 800e032:	3301      	adds	r3, #1
 800e034:	6033      	str	r3, [r6, #0]
 800e036:	6823      	ldr	r3, [r4, #0]
 800e038:	0699      	lsls	r1, r3, #26
 800e03a:	bf42      	ittt	mi
 800e03c:	6833      	ldrmi	r3, [r6, #0]
 800e03e:	3302      	addmi	r3, #2
 800e040:	6033      	strmi	r3, [r6, #0]
 800e042:	6825      	ldr	r5, [r4, #0]
 800e044:	f015 0506 	ands.w	r5, r5, #6
 800e048:	d106      	bne.n	800e058 <_printf_common+0x48>
 800e04a:	f104 0a19 	add.w	sl, r4, #25
 800e04e:	68e3      	ldr	r3, [r4, #12]
 800e050:	6832      	ldr	r2, [r6, #0]
 800e052:	1a9b      	subs	r3, r3, r2
 800e054:	42ab      	cmp	r3, r5
 800e056:	dc28      	bgt.n	800e0aa <_printf_common+0x9a>
 800e058:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e05c:	1e13      	subs	r3, r2, #0
 800e05e:	6822      	ldr	r2, [r4, #0]
 800e060:	bf18      	it	ne
 800e062:	2301      	movne	r3, #1
 800e064:	0692      	lsls	r2, r2, #26
 800e066:	d42d      	bmi.n	800e0c4 <_printf_common+0xb4>
 800e068:	4649      	mov	r1, r9
 800e06a:	4638      	mov	r0, r7
 800e06c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e070:	47c0      	blx	r8
 800e072:	3001      	adds	r0, #1
 800e074:	d020      	beq.n	800e0b8 <_printf_common+0xa8>
 800e076:	6823      	ldr	r3, [r4, #0]
 800e078:	68e5      	ldr	r5, [r4, #12]
 800e07a:	f003 0306 	and.w	r3, r3, #6
 800e07e:	2b04      	cmp	r3, #4
 800e080:	bf18      	it	ne
 800e082:	2500      	movne	r5, #0
 800e084:	6832      	ldr	r2, [r6, #0]
 800e086:	f04f 0600 	mov.w	r6, #0
 800e08a:	68a3      	ldr	r3, [r4, #8]
 800e08c:	bf08      	it	eq
 800e08e:	1aad      	subeq	r5, r5, r2
 800e090:	6922      	ldr	r2, [r4, #16]
 800e092:	bf08      	it	eq
 800e094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e098:	4293      	cmp	r3, r2
 800e09a:	bfc4      	itt	gt
 800e09c:	1a9b      	subgt	r3, r3, r2
 800e09e:	18ed      	addgt	r5, r5, r3
 800e0a0:	341a      	adds	r4, #26
 800e0a2:	42b5      	cmp	r5, r6
 800e0a4:	d11a      	bne.n	800e0dc <_printf_common+0xcc>
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	e008      	b.n	800e0bc <_printf_common+0xac>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	4652      	mov	r2, sl
 800e0ae:	4649      	mov	r1, r9
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	47c0      	blx	r8
 800e0b4:	3001      	adds	r0, #1
 800e0b6:	d103      	bne.n	800e0c0 <_printf_common+0xb0>
 800e0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0c0:	3501      	adds	r5, #1
 800e0c2:	e7c4      	b.n	800e04e <_printf_common+0x3e>
 800e0c4:	2030      	movs	r0, #48	; 0x30
 800e0c6:	18e1      	adds	r1, r4, r3
 800e0c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e0cc:	1c5a      	adds	r2, r3, #1
 800e0ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e0d2:	4422      	add	r2, r4
 800e0d4:	3302      	adds	r3, #2
 800e0d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e0da:	e7c5      	b.n	800e068 <_printf_common+0x58>
 800e0dc:	2301      	movs	r3, #1
 800e0de:	4622      	mov	r2, r4
 800e0e0:	4649      	mov	r1, r9
 800e0e2:	4638      	mov	r0, r7
 800e0e4:	47c0      	blx	r8
 800e0e6:	3001      	adds	r0, #1
 800e0e8:	d0e6      	beq.n	800e0b8 <_printf_common+0xa8>
 800e0ea:	3601      	adds	r6, #1
 800e0ec:	e7d9      	b.n	800e0a2 <_printf_common+0x92>
	...

0800e0f0 <_printf_i>:
 800e0f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f4:	7e0f      	ldrb	r7, [r1, #24]
 800e0f6:	4691      	mov	r9, r2
 800e0f8:	2f78      	cmp	r7, #120	; 0x78
 800e0fa:	4680      	mov	r8, r0
 800e0fc:	460c      	mov	r4, r1
 800e0fe:	469a      	mov	sl, r3
 800e100:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e102:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e106:	d807      	bhi.n	800e118 <_printf_i+0x28>
 800e108:	2f62      	cmp	r7, #98	; 0x62
 800e10a:	d80a      	bhi.n	800e122 <_printf_i+0x32>
 800e10c:	2f00      	cmp	r7, #0
 800e10e:	f000 80d9 	beq.w	800e2c4 <_printf_i+0x1d4>
 800e112:	2f58      	cmp	r7, #88	; 0x58
 800e114:	f000 80a4 	beq.w	800e260 <_printf_i+0x170>
 800e118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e11c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e120:	e03a      	b.n	800e198 <_printf_i+0xa8>
 800e122:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e126:	2b15      	cmp	r3, #21
 800e128:	d8f6      	bhi.n	800e118 <_printf_i+0x28>
 800e12a:	a101      	add	r1, pc, #4	; (adr r1, 800e130 <_printf_i+0x40>)
 800e12c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e130:	0800e189 	.word	0x0800e189
 800e134:	0800e19d 	.word	0x0800e19d
 800e138:	0800e119 	.word	0x0800e119
 800e13c:	0800e119 	.word	0x0800e119
 800e140:	0800e119 	.word	0x0800e119
 800e144:	0800e119 	.word	0x0800e119
 800e148:	0800e19d 	.word	0x0800e19d
 800e14c:	0800e119 	.word	0x0800e119
 800e150:	0800e119 	.word	0x0800e119
 800e154:	0800e119 	.word	0x0800e119
 800e158:	0800e119 	.word	0x0800e119
 800e15c:	0800e2ab 	.word	0x0800e2ab
 800e160:	0800e1cd 	.word	0x0800e1cd
 800e164:	0800e28d 	.word	0x0800e28d
 800e168:	0800e119 	.word	0x0800e119
 800e16c:	0800e119 	.word	0x0800e119
 800e170:	0800e2cd 	.word	0x0800e2cd
 800e174:	0800e119 	.word	0x0800e119
 800e178:	0800e1cd 	.word	0x0800e1cd
 800e17c:	0800e119 	.word	0x0800e119
 800e180:	0800e119 	.word	0x0800e119
 800e184:	0800e295 	.word	0x0800e295
 800e188:	682b      	ldr	r3, [r5, #0]
 800e18a:	1d1a      	adds	r2, r3, #4
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	602a      	str	r2, [r5, #0]
 800e190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e198:	2301      	movs	r3, #1
 800e19a:	e0a4      	b.n	800e2e6 <_printf_i+0x1f6>
 800e19c:	6820      	ldr	r0, [r4, #0]
 800e19e:	6829      	ldr	r1, [r5, #0]
 800e1a0:	0606      	lsls	r6, r0, #24
 800e1a2:	f101 0304 	add.w	r3, r1, #4
 800e1a6:	d50a      	bpl.n	800e1be <_printf_i+0xce>
 800e1a8:	680e      	ldr	r6, [r1, #0]
 800e1aa:	602b      	str	r3, [r5, #0]
 800e1ac:	2e00      	cmp	r6, #0
 800e1ae:	da03      	bge.n	800e1b8 <_printf_i+0xc8>
 800e1b0:	232d      	movs	r3, #45	; 0x2d
 800e1b2:	4276      	negs	r6, r6
 800e1b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1b8:	230a      	movs	r3, #10
 800e1ba:	485e      	ldr	r0, [pc, #376]	; (800e334 <_printf_i+0x244>)
 800e1bc:	e019      	b.n	800e1f2 <_printf_i+0x102>
 800e1be:	680e      	ldr	r6, [r1, #0]
 800e1c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e1c4:	602b      	str	r3, [r5, #0]
 800e1c6:	bf18      	it	ne
 800e1c8:	b236      	sxthne	r6, r6
 800e1ca:	e7ef      	b.n	800e1ac <_printf_i+0xbc>
 800e1cc:	682b      	ldr	r3, [r5, #0]
 800e1ce:	6820      	ldr	r0, [r4, #0]
 800e1d0:	1d19      	adds	r1, r3, #4
 800e1d2:	6029      	str	r1, [r5, #0]
 800e1d4:	0601      	lsls	r1, r0, #24
 800e1d6:	d501      	bpl.n	800e1dc <_printf_i+0xec>
 800e1d8:	681e      	ldr	r6, [r3, #0]
 800e1da:	e002      	b.n	800e1e2 <_printf_i+0xf2>
 800e1dc:	0646      	lsls	r6, r0, #25
 800e1de:	d5fb      	bpl.n	800e1d8 <_printf_i+0xe8>
 800e1e0:	881e      	ldrh	r6, [r3, #0]
 800e1e2:	2f6f      	cmp	r7, #111	; 0x6f
 800e1e4:	bf0c      	ite	eq
 800e1e6:	2308      	moveq	r3, #8
 800e1e8:	230a      	movne	r3, #10
 800e1ea:	4852      	ldr	r0, [pc, #328]	; (800e334 <_printf_i+0x244>)
 800e1ec:	2100      	movs	r1, #0
 800e1ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e1f2:	6865      	ldr	r5, [r4, #4]
 800e1f4:	2d00      	cmp	r5, #0
 800e1f6:	bfa8      	it	ge
 800e1f8:	6821      	ldrge	r1, [r4, #0]
 800e1fa:	60a5      	str	r5, [r4, #8]
 800e1fc:	bfa4      	itt	ge
 800e1fe:	f021 0104 	bicge.w	r1, r1, #4
 800e202:	6021      	strge	r1, [r4, #0]
 800e204:	b90e      	cbnz	r6, 800e20a <_printf_i+0x11a>
 800e206:	2d00      	cmp	r5, #0
 800e208:	d04d      	beq.n	800e2a6 <_printf_i+0x1b6>
 800e20a:	4615      	mov	r5, r2
 800e20c:	fbb6 f1f3 	udiv	r1, r6, r3
 800e210:	fb03 6711 	mls	r7, r3, r1, r6
 800e214:	5dc7      	ldrb	r7, [r0, r7]
 800e216:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e21a:	4637      	mov	r7, r6
 800e21c:	42bb      	cmp	r3, r7
 800e21e:	460e      	mov	r6, r1
 800e220:	d9f4      	bls.n	800e20c <_printf_i+0x11c>
 800e222:	2b08      	cmp	r3, #8
 800e224:	d10b      	bne.n	800e23e <_printf_i+0x14e>
 800e226:	6823      	ldr	r3, [r4, #0]
 800e228:	07de      	lsls	r6, r3, #31
 800e22a:	d508      	bpl.n	800e23e <_printf_i+0x14e>
 800e22c:	6923      	ldr	r3, [r4, #16]
 800e22e:	6861      	ldr	r1, [r4, #4]
 800e230:	4299      	cmp	r1, r3
 800e232:	bfde      	ittt	le
 800e234:	2330      	movle	r3, #48	; 0x30
 800e236:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e23a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e23e:	1b52      	subs	r2, r2, r5
 800e240:	6122      	str	r2, [r4, #16]
 800e242:	464b      	mov	r3, r9
 800e244:	4621      	mov	r1, r4
 800e246:	4640      	mov	r0, r8
 800e248:	f8cd a000 	str.w	sl, [sp]
 800e24c:	aa03      	add	r2, sp, #12
 800e24e:	f7ff fedf 	bl	800e010 <_printf_common>
 800e252:	3001      	adds	r0, #1
 800e254:	d14c      	bne.n	800e2f0 <_printf_i+0x200>
 800e256:	f04f 30ff 	mov.w	r0, #4294967295
 800e25a:	b004      	add	sp, #16
 800e25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e260:	4834      	ldr	r0, [pc, #208]	; (800e334 <_printf_i+0x244>)
 800e262:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e266:	6829      	ldr	r1, [r5, #0]
 800e268:	6823      	ldr	r3, [r4, #0]
 800e26a:	f851 6b04 	ldr.w	r6, [r1], #4
 800e26e:	6029      	str	r1, [r5, #0]
 800e270:	061d      	lsls	r5, r3, #24
 800e272:	d514      	bpl.n	800e29e <_printf_i+0x1ae>
 800e274:	07df      	lsls	r7, r3, #31
 800e276:	bf44      	itt	mi
 800e278:	f043 0320 	orrmi.w	r3, r3, #32
 800e27c:	6023      	strmi	r3, [r4, #0]
 800e27e:	b91e      	cbnz	r6, 800e288 <_printf_i+0x198>
 800e280:	6823      	ldr	r3, [r4, #0]
 800e282:	f023 0320 	bic.w	r3, r3, #32
 800e286:	6023      	str	r3, [r4, #0]
 800e288:	2310      	movs	r3, #16
 800e28a:	e7af      	b.n	800e1ec <_printf_i+0xfc>
 800e28c:	6823      	ldr	r3, [r4, #0]
 800e28e:	f043 0320 	orr.w	r3, r3, #32
 800e292:	6023      	str	r3, [r4, #0]
 800e294:	2378      	movs	r3, #120	; 0x78
 800e296:	4828      	ldr	r0, [pc, #160]	; (800e338 <_printf_i+0x248>)
 800e298:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e29c:	e7e3      	b.n	800e266 <_printf_i+0x176>
 800e29e:	0659      	lsls	r1, r3, #25
 800e2a0:	bf48      	it	mi
 800e2a2:	b2b6      	uxthmi	r6, r6
 800e2a4:	e7e6      	b.n	800e274 <_printf_i+0x184>
 800e2a6:	4615      	mov	r5, r2
 800e2a8:	e7bb      	b.n	800e222 <_printf_i+0x132>
 800e2aa:	682b      	ldr	r3, [r5, #0]
 800e2ac:	6826      	ldr	r6, [r4, #0]
 800e2ae:	1d18      	adds	r0, r3, #4
 800e2b0:	6961      	ldr	r1, [r4, #20]
 800e2b2:	6028      	str	r0, [r5, #0]
 800e2b4:	0635      	lsls	r5, r6, #24
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	d501      	bpl.n	800e2be <_printf_i+0x1ce>
 800e2ba:	6019      	str	r1, [r3, #0]
 800e2bc:	e002      	b.n	800e2c4 <_printf_i+0x1d4>
 800e2be:	0670      	lsls	r0, r6, #25
 800e2c0:	d5fb      	bpl.n	800e2ba <_printf_i+0x1ca>
 800e2c2:	8019      	strh	r1, [r3, #0]
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	4615      	mov	r5, r2
 800e2c8:	6123      	str	r3, [r4, #16]
 800e2ca:	e7ba      	b.n	800e242 <_printf_i+0x152>
 800e2cc:	682b      	ldr	r3, [r5, #0]
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	1d1a      	adds	r2, r3, #4
 800e2d2:	602a      	str	r2, [r5, #0]
 800e2d4:	681d      	ldr	r5, [r3, #0]
 800e2d6:	6862      	ldr	r2, [r4, #4]
 800e2d8:	4628      	mov	r0, r5
 800e2da:	f000 f83f 	bl	800e35c <memchr>
 800e2de:	b108      	cbz	r0, 800e2e4 <_printf_i+0x1f4>
 800e2e0:	1b40      	subs	r0, r0, r5
 800e2e2:	6060      	str	r0, [r4, #4]
 800e2e4:	6863      	ldr	r3, [r4, #4]
 800e2e6:	6123      	str	r3, [r4, #16]
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2ee:	e7a8      	b.n	800e242 <_printf_i+0x152>
 800e2f0:	462a      	mov	r2, r5
 800e2f2:	4649      	mov	r1, r9
 800e2f4:	4640      	mov	r0, r8
 800e2f6:	6923      	ldr	r3, [r4, #16]
 800e2f8:	47d0      	blx	sl
 800e2fa:	3001      	adds	r0, #1
 800e2fc:	d0ab      	beq.n	800e256 <_printf_i+0x166>
 800e2fe:	6823      	ldr	r3, [r4, #0]
 800e300:	079b      	lsls	r3, r3, #30
 800e302:	d413      	bmi.n	800e32c <_printf_i+0x23c>
 800e304:	68e0      	ldr	r0, [r4, #12]
 800e306:	9b03      	ldr	r3, [sp, #12]
 800e308:	4298      	cmp	r0, r3
 800e30a:	bfb8      	it	lt
 800e30c:	4618      	movlt	r0, r3
 800e30e:	e7a4      	b.n	800e25a <_printf_i+0x16a>
 800e310:	2301      	movs	r3, #1
 800e312:	4632      	mov	r2, r6
 800e314:	4649      	mov	r1, r9
 800e316:	4640      	mov	r0, r8
 800e318:	47d0      	blx	sl
 800e31a:	3001      	adds	r0, #1
 800e31c:	d09b      	beq.n	800e256 <_printf_i+0x166>
 800e31e:	3501      	adds	r5, #1
 800e320:	68e3      	ldr	r3, [r4, #12]
 800e322:	9903      	ldr	r1, [sp, #12]
 800e324:	1a5b      	subs	r3, r3, r1
 800e326:	42ab      	cmp	r3, r5
 800e328:	dcf2      	bgt.n	800e310 <_printf_i+0x220>
 800e32a:	e7eb      	b.n	800e304 <_printf_i+0x214>
 800e32c:	2500      	movs	r5, #0
 800e32e:	f104 0619 	add.w	r6, r4, #25
 800e332:	e7f5      	b.n	800e320 <_printf_i+0x230>
 800e334:	0800e9f1 	.word	0x0800e9f1
 800e338:	0800ea02 	.word	0x0800ea02

0800e33c <_sbrk_r>:
 800e33c:	b538      	push	{r3, r4, r5, lr}
 800e33e:	2300      	movs	r3, #0
 800e340:	4d05      	ldr	r5, [pc, #20]	; (800e358 <_sbrk_r+0x1c>)
 800e342:	4604      	mov	r4, r0
 800e344:	4608      	mov	r0, r1
 800e346:	602b      	str	r3, [r5, #0]
 800e348:	f7f5 ffa4 	bl	8004294 <_sbrk>
 800e34c:	1c43      	adds	r3, r0, #1
 800e34e:	d102      	bne.n	800e356 <_sbrk_r+0x1a>
 800e350:	682b      	ldr	r3, [r5, #0]
 800e352:	b103      	cbz	r3, 800e356 <_sbrk_r+0x1a>
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	bd38      	pop	{r3, r4, r5, pc}
 800e358:	20002040 	.word	0x20002040

0800e35c <memchr>:
 800e35c:	4603      	mov	r3, r0
 800e35e:	b510      	push	{r4, lr}
 800e360:	b2c9      	uxtb	r1, r1
 800e362:	4402      	add	r2, r0
 800e364:	4293      	cmp	r3, r2
 800e366:	4618      	mov	r0, r3
 800e368:	d101      	bne.n	800e36e <memchr+0x12>
 800e36a:	2000      	movs	r0, #0
 800e36c:	e003      	b.n	800e376 <memchr+0x1a>
 800e36e:	7804      	ldrb	r4, [r0, #0]
 800e370:	3301      	adds	r3, #1
 800e372:	428c      	cmp	r4, r1
 800e374:	d1f6      	bne.n	800e364 <memchr+0x8>
 800e376:	bd10      	pop	{r4, pc}

0800e378 <memmove>:
 800e378:	4288      	cmp	r0, r1
 800e37a:	b510      	push	{r4, lr}
 800e37c:	eb01 0402 	add.w	r4, r1, r2
 800e380:	d902      	bls.n	800e388 <memmove+0x10>
 800e382:	4284      	cmp	r4, r0
 800e384:	4623      	mov	r3, r4
 800e386:	d807      	bhi.n	800e398 <memmove+0x20>
 800e388:	1e43      	subs	r3, r0, #1
 800e38a:	42a1      	cmp	r1, r4
 800e38c:	d008      	beq.n	800e3a0 <memmove+0x28>
 800e38e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e392:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e396:	e7f8      	b.n	800e38a <memmove+0x12>
 800e398:	4601      	mov	r1, r0
 800e39a:	4402      	add	r2, r0
 800e39c:	428a      	cmp	r2, r1
 800e39e:	d100      	bne.n	800e3a2 <memmove+0x2a>
 800e3a0:	bd10      	pop	{r4, pc}
 800e3a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e3a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e3aa:	e7f7      	b.n	800e39c <memmove+0x24>

0800e3ac <__malloc_lock>:
 800e3ac:	4801      	ldr	r0, [pc, #4]	; (800e3b4 <__malloc_lock+0x8>)
 800e3ae:	f7ff bbf5 	b.w	800db9c <__retarget_lock_acquire_recursive>
 800e3b2:	bf00      	nop
 800e3b4:	20002034 	.word	0x20002034

0800e3b8 <__malloc_unlock>:
 800e3b8:	4801      	ldr	r0, [pc, #4]	; (800e3c0 <__malloc_unlock+0x8>)
 800e3ba:	f7ff bbf0 	b.w	800db9e <__retarget_lock_release_recursive>
 800e3be:	bf00      	nop
 800e3c0:	20002034 	.word	0x20002034

0800e3c4 <_realloc_r>:
 800e3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3c8:	4680      	mov	r8, r0
 800e3ca:	4614      	mov	r4, r2
 800e3cc:	460e      	mov	r6, r1
 800e3ce:	b921      	cbnz	r1, 800e3da <_realloc_r+0x16>
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d6:	f7ff bc4b 	b.w	800dc70 <_malloc_r>
 800e3da:	b92a      	cbnz	r2, 800e3e8 <_realloc_r+0x24>
 800e3dc:	f7ff fbe0 	bl	800dba0 <_free_r>
 800e3e0:	4625      	mov	r5, r4
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e8:	f000 f81b 	bl	800e422 <_malloc_usable_size_r>
 800e3ec:	4284      	cmp	r4, r0
 800e3ee:	4607      	mov	r7, r0
 800e3f0:	d802      	bhi.n	800e3f8 <_realloc_r+0x34>
 800e3f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e3f6:	d812      	bhi.n	800e41e <_realloc_r+0x5a>
 800e3f8:	4621      	mov	r1, r4
 800e3fa:	4640      	mov	r0, r8
 800e3fc:	f7ff fc38 	bl	800dc70 <_malloc_r>
 800e400:	4605      	mov	r5, r0
 800e402:	2800      	cmp	r0, #0
 800e404:	d0ed      	beq.n	800e3e2 <_realloc_r+0x1e>
 800e406:	42bc      	cmp	r4, r7
 800e408:	4622      	mov	r2, r4
 800e40a:	4631      	mov	r1, r6
 800e40c:	bf28      	it	cs
 800e40e:	463a      	movcs	r2, r7
 800e410:	f7ff fb86 	bl	800db20 <memcpy>
 800e414:	4631      	mov	r1, r6
 800e416:	4640      	mov	r0, r8
 800e418:	f7ff fbc2 	bl	800dba0 <_free_r>
 800e41c:	e7e1      	b.n	800e3e2 <_realloc_r+0x1e>
 800e41e:	4635      	mov	r5, r6
 800e420:	e7df      	b.n	800e3e2 <_realloc_r+0x1e>

0800e422 <_malloc_usable_size_r>:
 800e422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e426:	1f18      	subs	r0, r3, #4
 800e428:	2b00      	cmp	r3, #0
 800e42a:	bfbc      	itt	lt
 800e42c:	580b      	ldrlt	r3, [r1, r0]
 800e42e:	18c0      	addlt	r0, r0, r3
 800e430:	4770      	bx	lr
	...

0800e434 <_init>:
 800e434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e436:	bf00      	nop
 800e438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e43a:	bc08      	pop	{r3}
 800e43c:	469e      	mov	lr, r3
 800e43e:	4770      	bx	lr

0800e440 <_fini>:
 800e440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e442:	bf00      	nop
 800e444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e446:	bc08      	pop	{r3}
 800e448:	469e      	mov	lr, r3
 800e44a:	4770      	bx	lr
