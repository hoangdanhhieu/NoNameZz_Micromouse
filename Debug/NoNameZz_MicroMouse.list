
NoNameZz_MicroMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c36c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800c47c  0800c47c  0001c47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c960  0800c960  000202d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c960  0800c960  000202d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c960  0800c960  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c960  0800c960  0001c960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c964  0800c964  0001c964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800c968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc4  200002d0  0800cc38  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001294  0800cc38  00021294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c08b  00000000  00000000  000202f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce6  00000000  00000000  0003c384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0003f070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  00040568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af45  00000000  00000000  00041990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176b5  00000000  00000000  0005c8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000956f3  00000000  00000000  00073f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  0010967d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c0c  00000000  00000000  001096c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002d0 	.word	0x200002d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c464 	.word	0x0800c464

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002d4 	.word	0x200002d4
 800014c:	0800c464 	.word	0x0800c464

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_fmul>:
 80003a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003ac:	bf1e      	ittt	ne
 80003ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b2:	ea92 0f0c 	teqne	r2, ip
 80003b6:	ea93 0f0c 	teqne	r3, ip
 80003ba:	d06f      	beq.n	800049c <__aeabi_fmul+0xf8>
 80003bc:	441a      	add	r2, r3
 80003be:	ea80 0c01 	eor.w	ip, r0, r1
 80003c2:	0240      	lsls	r0, r0, #9
 80003c4:	bf18      	it	ne
 80003c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ca:	d01e      	beq.n	800040a <__aeabi_fmul+0x66>
 80003cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d8:	fba0 3101 	umull	r3, r1, r0, r1
 80003dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e4:	bf3e      	ittt	cc
 80003e6:	0049      	lslcc	r1, r1, #1
 80003e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003ec:	005b      	lslcc	r3, r3, #1
 80003ee:	ea40 0001 	orr.w	r0, r0, r1
 80003f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003f6:	2afd      	cmp	r2, #253	; 0xfd
 80003f8:	d81d      	bhi.n	8000436 <__aeabi_fmul+0x92>
 80003fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000402:	bf08      	it	eq
 8000404:	f020 0001 	biceq.w	r0, r0, #1
 8000408:	4770      	bx	lr
 800040a:	f090 0f00 	teq	r0, #0
 800040e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000412:	bf08      	it	eq
 8000414:	0249      	lsleq	r1, r1, #9
 8000416:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041e:	3a7f      	subs	r2, #127	; 0x7f
 8000420:	bfc2      	ittt	gt
 8000422:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000426:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042a:	4770      	bxgt	lr
 800042c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	3a01      	subs	r2, #1
 8000436:	dc5d      	bgt.n	80004f4 <__aeabi_fmul+0x150>
 8000438:	f112 0f19 	cmn.w	r2, #25
 800043c:	bfdc      	itt	le
 800043e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000442:	4770      	bxle	lr
 8000444:	f1c2 0200 	rsb	r2, r2, #0
 8000448:	0041      	lsls	r1, r0, #1
 800044a:	fa21 f102 	lsr.w	r1, r1, r2
 800044e:	f1c2 0220 	rsb	r2, r2, #32
 8000452:	fa00 fc02 	lsl.w	ip, r0, r2
 8000456:	ea5f 0031 	movs.w	r0, r1, rrx
 800045a:	f140 0000 	adc.w	r0, r0, #0
 800045e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000462:	bf08      	it	eq
 8000464:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000468:	4770      	bx	lr
 800046a:	f092 0f00 	teq	r2, #0
 800046e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0040      	lsleq	r0, r0, #1
 8000476:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047a:	3a01      	subeq	r2, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xce>
 800047e:	ea40 000c 	orr.w	r0, r0, ip
 8000482:	f093 0f00 	teq	r3, #0
 8000486:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048a:	bf02      	ittt	eq
 800048c:	0049      	lsleq	r1, r1, #1
 800048e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000492:	3b01      	subeq	r3, #1
 8000494:	d0f9      	beq.n	800048a <__aeabi_fmul+0xe6>
 8000496:	ea41 010c 	orr.w	r1, r1, ip
 800049a:	e78f      	b.n	80003bc <__aeabi_fmul+0x18>
 800049c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	bf18      	it	ne
 80004a6:	ea93 0f0c 	teqne	r3, ip
 80004aa:	d00a      	beq.n	80004c2 <__aeabi_fmul+0x11e>
 80004ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b0:	bf18      	it	ne
 80004b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004b6:	d1d8      	bne.n	800046a <__aeabi_fmul+0xc6>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f090 0f00 	teq	r0, #0
 80004c6:	bf17      	itett	ne
 80004c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004cc:	4608      	moveq	r0, r1
 80004ce:	f091 0f00 	teqne	r1, #0
 80004d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004d6:	d014      	beq.n	8000502 <__aeabi_fmul+0x15e>
 80004d8:	ea92 0f0c 	teq	r2, ip
 80004dc:	d101      	bne.n	80004e2 <__aeabi_fmul+0x13e>
 80004de:	0242      	lsls	r2, r0, #9
 80004e0:	d10f      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004e2:	ea93 0f0c 	teq	r3, ip
 80004e6:	d103      	bne.n	80004f0 <__aeabi_fmul+0x14c>
 80004e8:	024b      	lsls	r3, r1, #9
 80004ea:	bf18      	it	ne
 80004ec:	4608      	movne	r0, r1
 80004ee:	d108      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004f0:	ea80 0001 	eor.w	r0, r0, r1
 80004f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000500:	4770      	bx	lr
 8000502:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000506:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050a:	4770      	bx	lr

0800050c <__aeabi_drsub>:
 800050c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e002      	b.n	8000518 <__adddf3>
 8000512:	bf00      	nop

08000514 <__aeabi_dsub>:
 8000514:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000518 <__adddf3>:
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800051e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000522:	ea94 0f05 	teq	r4, r5
 8000526:	bf08      	it	eq
 8000528:	ea90 0f02 	teqeq	r0, r2
 800052c:	bf1f      	itttt	ne
 800052e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000532:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000536:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800053a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053e:	f000 80e2 	beq.w	8000706 <__adddf3+0x1ee>
 8000542:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000546:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800054a:	bfb8      	it	lt
 800054c:	426d      	neglt	r5, r5
 800054e:	dd0c      	ble.n	800056a <__adddf3+0x52>
 8000550:	442c      	add	r4, r5
 8000552:	ea80 0202 	eor.w	r2, r0, r2
 8000556:	ea81 0303 	eor.w	r3, r1, r3
 800055a:	ea82 0000 	eor.w	r0, r2, r0
 800055e:	ea83 0101 	eor.w	r1, r3, r1
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	2d36      	cmp	r5, #54	; 0x36
 800056c:	bf88      	it	hi
 800056e:	bd30      	pophi	{r4, r5, pc}
 8000570:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000574:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000578:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800057c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000580:	d002      	beq.n	8000588 <__adddf3+0x70>
 8000582:	4240      	negs	r0, r0
 8000584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000588:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800058c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000590:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000594:	d002      	beq.n	800059c <__adddf3+0x84>
 8000596:	4252      	negs	r2, r2
 8000598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800059c:	ea94 0f05 	teq	r4, r5
 80005a0:	f000 80a7 	beq.w	80006f2 <__adddf3+0x1da>
 80005a4:	f1a4 0401 	sub.w	r4, r4, #1
 80005a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005ac:	db0d      	blt.n	80005ca <__adddf3+0xb2>
 80005ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005b2:	fa22 f205 	lsr.w	r2, r2, r5
 80005b6:	1880      	adds	r0, r0, r2
 80005b8:	f141 0100 	adc.w	r1, r1, #0
 80005bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c0:	1880      	adds	r0, r0, r2
 80005c2:	fa43 f305 	asr.w	r3, r3, r5
 80005c6:	4159      	adcs	r1, r3
 80005c8:	e00e      	b.n	80005e8 <__adddf3+0xd0>
 80005ca:	f1a5 0520 	sub.w	r5, r5, #32
 80005ce:	f10e 0e20 	add.w	lr, lr, #32
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d8:	bf28      	it	cs
 80005da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005de:	fa43 f305 	asr.w	r3, r3, r5
 80005e2:	18c0      	adds	r0, r0, r3
 80005e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	d507      	bpl.n	80005fe <__adddf3+0xe6>
 80005ee:	f04f 0e00 	mov.w	lr, #0
 80005f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80005fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000602:	d31b      	bcc.n	800063c <__adddf3+0x124>
 8000604:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000608:	d30c      	bcc.n	8000624 <__adddf3+0x10c>
 800060a:	0849      	lsrs	r1, r1, #1
 800060c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000610:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000614:	f104 0401 	add.w	r4, r4, #1
 8000618:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800061c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000620:	f080 809a 	bcs.w	8000758 <__adddf3+0x240>
 8000624:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800062e:	f150 0000 	adcs.w	r0, r0, #0
 8000632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000636:	ea41 0105 	orr.w	r1, r1, r5
 800063a:	bd30      	pop	{r4, r5, pc}
 800063c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000640:	4140      	adcs	r0, r0
 8000642:	eb41 0101 	adc.w	r1, r1, r1
 8000646:	3c01      	subs	r4, #1
 8000648:	bf28      	it	cs
 800064a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800064e:	d2e9      	bcs.n	8000624 <__adddf3+0x10c>
 8000650:	f091 0f00 	teq	r1, #0
 8000654:	bf04      	itt	eq
 8000656:	4601      	moveq	r1, r0
 8000658:	2000      	moveq	r0, #0
 800065a:	fab1 f381 	clz	r3, r1
 800065e:	bf08      	it	eq
 8000660:	3320      	addeq	r3, #32
 8000662:	f1a3 030b 	sub.w	r3, r3, #11
 8000666:	f1b3 0220 	subs.w	r2, r3, #32
 800066a:	da0c      	bge.n	8000686 <__adddf3+0x16e>
 800066c:	320c      	adds	r2, #12
 800066e:	dd08      	ble.n	8000682 <__adddf3+0x16a>
 8000670:	f102 0c14 	add.w	ip, r2, #20
 8000674:	f1c2 020c 	rsb	r2, r2, #12
 8000678:	fa01 f00c 	lsl.w	r0, r1, ip
 800067c:	fa21 f102 	lsr.w	r1, r1, r2
 8000680:	e00c      	b.n	800069c <__adddf3+0x184>
 8000682:	f102 0214 	add.w	r2, r2, #20
 8000686:	bfd8      	it	le
 8000688:	f1c2 0c20 	rsble	ip, r2, #32
 800068c:	fa01 f102 	lsl.w	r1, r1, r2
 8000690:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000694:	bfdc      	itt	le
 8000696:	ea41 010c 	orrle.w	r1, r1, ip
 800069a:	4090      	lslle	r0, r2
 800069c:	1ae4      	subs	r4, r4, r3
 800069e:	bfa2      	ittt	ge
 80006a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a4:	4329      	orrge	r1, r5
 80006a6:	bd30      	popge	{r4, r5, pc}
 80006a8:	ea6f 0404 	mvn.w	r4, r4
 80006ac:	3c1f      	subs	r4, #31
 80006ae:	da1c      	bge.n	80006ea <__adddf3+0x1d2>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc0e      	bgt.n	80006d2 <__adddf3+0x1ba>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0220 	rsb	r2, r4, #32
 80006bc:	fa20 f004 	lsr.w	r0, r0, r4
 80006c0:	fa01 f302 	lsl.w	r3, r1, r2
 80006c4:	ea40 0003 	orr.w	r0, r0, r3
 80006c8:	fa21 f304 	lsr.w	r3, r1, r4
 80006cc:	ea45 0103 	orr.w	r1, r5, r3
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	f1c4 040c 	rsb	r4, r4, #12
 80006d6:	f1c4 0220 	rsb	r2, r4, #32
 80006da:	fa20 f002 	lsr.w	r0, r0, r2
 80006de:	fa01 f304 	lsl.w	r3, r1, r4
 80006e2:	ea40 0003 	orr.w	r0, r0, r3
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	fa21 f004 	lsr.w	r0, r1, r4
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	f094 0f00 	teq	r4, #0
 80006f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006fa:	bf06      	itte	eq
 80006fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000700:	3401      	addeq	r4, #1
 8000702:	3d01      	subne	r5, #1
 8000704:	e74e      	b.n	80005a4 <__adddf3+0x8c>
 8000706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070a:	bf18      	it	ne
 800070c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000710:	d029      	beq.n	8000766 <__adddf3+0x24e>
 8000712:	ea94 0f05 	teq	r4, r5
 8000716:	bf08      	it	eq
 8000718:	ea90 0f02 	teqeq	r0, r2
 800071c:	d005      	beq.n	800072a <__adddf3+0x212>
 800071e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000722:	bf04      	itt	eq
 8000724:	4619      	moveq	r1, r3
 8000726:	4610      	moveq	r0, r2
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	ea91 0f03 	teq	r1, r3
 800072e:	bf1e      	ittt	ne
 8000730:	2100      	movne	r1, #0
 8000732:	2000      	movne	r0, #0
 8000734:	bd30      	popne	{r4, r5, pc}
 8000736:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800073a:	d105      	bne.n	8000748 <__adddf3+0x230>
 800073c:	0040      	lsls	r0, r0, #1
 800073e:	4149      	adcs	r1, r1
 8000740:	bf28      	it	cs
 8000742:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd30      	pop	{r4, r5, pc}
 8000748:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800074c:	bf3c      	itt	cc
 800074e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000752:	bd30      	popcc	{r4, r5, pc}
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800076a:	bf1a      	itte	ne
 800076c:	4619      	movne	r1, r3
 800076e:	4610      	movne	r0, r2
 8000770:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000774:	bf1c      	itt	ne
 8000776:	460b      	movne	r3, r1
 8000778:	4602      	movne	r2, r0
 800077a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800077e:	bf06      	itte	eq
 8000780:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000784:	ea91 0f03 	teqeq	r1, r3
 8000788:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	bf00      	nop

08000790 <__aeabi_ui2d>:
 8000790:	f090 0f00 	teq	r0, #0
 8000794:	bf04      	itt	eq
 8000796:	2100      	moveq	r1, #0
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a4:	f04f 0500 	mov.w	r5, #0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e750      	b.n	8000650 <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_i2d>:
 80007b0:	f090 0f00 	teq	r0, #0
 80007b4:	bf04      	itt	eq
 80007b6:	2100      	moveq	r1, #0
 80007b8:	4770      	bxeq	lr
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	f04f 0100 	mov.w	r1, #0
 80007d0:	e73e      	b.n	8000650 <__adddf3+0x138>
 80007d2:	bf00      	nop

080007d4 <__aeabi_f2d>:
 80007d4:	0042      	lsls	r2, r0, #1
 80007d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007da:	ea4f 0131 	mov.w	r1, r1, rrx
 80007de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007e2:	bf1f      	itttt	ne
 80007e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f0:	4770      	bxne	lr
 80007f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007f6:	bf08      	it	eq
 80007f8:	4770      	bxeq	lr
 80007fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007fe:	bf04      	itt	eq
 8000800:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000804:	4770      	bxeq	lr
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	f44f 7460 	mov.w	r4, #896	; 0x380
 800080c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	e71c      	b.n	8000650 <__adddf3+0x138>
 8000816:	bf00      	nop

08000818 <__aeabi_ul2d>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	b530      	push	{r4, r5, lr}
 8000822:	f04f 0500 	mov.w	r5, #0
 8000826:	e00a      	b.n	800083e <__aeabi_l2d+0x16>

08000828 <__aeabi_l2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000836:	d502      	bpl.n	800083e <__aeabi_l2d+0x16>
 8000838:	4240      	negs	r0, r0
 800083a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000842:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000846:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800084a:	f43f aed8 	beq.w	80005fe <__adddf3+0xe6>
 800084e:	f04f 0203 	mov.w	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000866:	f1c2 0320 	rsb	r3, r2, #32
 800086a:	fa00 fc03 	lsl.w	ip, r0, r3
 800086e:	fa20 f002 	lsr.w	r0, r0, r2
 8000872:	fa01 fe03 	lsl.w	lr, r1, r3
 8000876:	ea40 000e 	orr.w	r0, r0, lr
 800087a:	fa21 f102 	lsr.w	r1, r1, r2
 800087e:	4414      	add	r4, r2
 8000880:	e6bd      	b.n	80005fe <__adddf3+0xe6>
 8000882:	bf00      	nop

08000884 <__aeabi_d2uiz>:
 8000884:	004a      	lsls	r2, r1, #1
 8000886:	d211      	bcs.n	80008ac <__aeabi_d2uiz+0x28>
 8000888:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800088c:	d211      	bcs.n	80008b2 <__aeabi_d2uiz+0x2e>
 800088e:	d50d      	bpl.n	80008ac <__aeabi_d2uiz+0x28>
 8000890:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000894:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000898:	d40e      	bmi.n	80008b8 <__aeabi_d2uiz+0x34>
 800089a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800089e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008a6:	fa23 f002 	lsr.w	r0, r3, r2
 80008aa:	4770      	bx	lr
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	4770      	bx	lr
 80008b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008b6:	d102      	bne.n	80008be <__aeabi_d2uiz+0x3a>
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	4770      	bx	lr
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	4770      	bx	lr

080008c4 <__aeabi_frsub>:
 80008c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80008c8:	e002      	b.n	80008d0 <__addsf3>
 80008ca:	bf00      	nop

080008cc <__aeabi_fsub>:
 80008cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080008d0 <__addsf3>:
 80008d0:	0042      	lsls	r2, r0, #1
 80008d2:	bf1f      	itttt	ne
 80008d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80008d8:	ea92 0f03 	teqne	r2, r3
 80008dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80008e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008e4:	d06a      	beq.n	80009bc <__addsf3+0xec>
 80008e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80008ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80008ee:	bfc1      	itttt	gt
 80008f0:	18d2      	addgt	r2, r2, r3
 80008f2:	4041      	eorgt	r1, r0
 80008f4:	4048      	eorgt	r0, r1
 80008f6:	4041      	eorgt	r1, r0
 80008f8:	bfb8      	it	lt
 80008fa:	425b      	neglt	r3, r3
 80008fc:	2b19      	cmp	r3, #25
 80008fe:	bf88      	it	hi
 8000900:	4770      	bxhi	lr
 8000902:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000906:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800090a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800090e:	bf18      	it	ne
 8000910:	4240      	negne	r0, r0
 8000912:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000916:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800091a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800091e:	bf18      	it	ne
 8000920:	4249      	negne	r1, r1
 8000922:	ea92 0f03 	teq	r2, r3
 8000926:	d03f      	beq.n	80009a8 <__addsf3+0xd8>
 8000928:	f1a2 0201 	sub.w	r2, r2, #1
 800092c:	fa41 fc03 	asr.w	ip, r1, r3
 8000930:	eb10 000c 	adds.w	r0, r0, ip
 8000934:	f1c3 0320 	rsb	r3, r3, #32
 8000938:	fa01 f103 	lsl.w	r1, r1, r3
 800093c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000940:	d502      	bpl.n	8000948 <__addsf3+0x78>
 8000942:	4249      	negs	r1, r1
 8000944:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000948:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800094c:	d313      	bcc.n	8000976 <__addsf3+0xa6>
 800094e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000952:	d306      	bcc.n	8000962 <__addsf3+0x92>
 8000954:	0840      	lsrs	r0, r0, #1
 8000956:	ea4f 0131 	mov.w	r1, r1, rrx
 800095a:	f102 0201 	add.w	r2, r2, #1
 800095e:	2afe      	cmp	r2, #254	; 0xfe
 8000960:	d251      	bcs.n	8000a06 <__addsf3+0x136>
 8000962:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000966:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800096a:	bf08      	it	eq
 800096c:	f020 0001 	biceq.w	r0, r0, #1
 8000970:	ea40 0003 	orr.w	r0, r0, r3
 8000974:	4770      	bx	lr
 8000976:	0049      	lsls	r1, r1, #1
 8000978:	eb40 0000 	adc.w	r0, r0, r0
 800097c:	3a01      	subs	r2, #1
 800097e:	bf28      	it	cs
 8000980:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000984:	d2ed      	bcs.n	8000962 <__addsf3+0x92>
 8000986:	fab0 fc80 	clz	ip, r0
 800098a:	f1ac 0c08 	sub.w	ip, ip, #8
 800098e:	ebb2 020c 	subs.w	r2, r2, ip
 8000992:	fa00 f00c 	lsl.w	r0, r0, ip
 8000996:	bfaa      	itet	ge
 8000998:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800099c:	4252      	neglt	r2, r2
 800099e:	4318      	orrge	r0, r3
 80009a0:	bfbc      	itt	lt
 80009a2:	40d0      	lsrlt	r0, r2
 80009a4:	4318      	orrlt	r0, r3
 80009a6:	4770      	bx	lr
 80009a8:	f092 0f00 	teq	r2, #0
 80009ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80009b0:	bf06      	itte	eq
 80009b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80009b6:	3201      	addeq	r2, #1
 80009b8:	3b01      	subne	r3, #1
 80009ba:	e7b5      	b.n	8000928 <__addsf3+0x58>
 80009bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009c4:	bf18      	it	ne
 80009c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ca:	d021      	beq.n	8000a10 <__addsf3+0x140>
 80009cc:	ea92 0f03 	teq	r2, r3
 80009d0:	d004      	beq.n	80009dc <__addsf3+0x10c>
 80009d2:	f092 0f00 	teq	r2, #0
 80009d6:	bf08      	it	eq
 80009d8:	4608      	moveq	r0, r1
 80009da:	4770      	bx	lr
 80009dc:	ea90 0f01 	teq	r0, r1
 80009e0:	bf1c      	itt	ne
 80009e2:	2000      	movne	r0, #0
 80009e4:	4770      	bxne	lr
 80009e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80009ea:	d104      	bne.n	80009f6 <__addsf3+0x126>
 80009ec:	0040      	lsls	r0, r0, #1
 80009ee:	bf28      	it	cs
 80009f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80009f4:	4770      	bx	lr
 80009f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80009fa:	bf3c      	itt	cc
 80009fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bxcc	lr
 8000a02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0e:	4770      	bx	lr
 8000a10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a14:	bf16      	itet	ne
 8000a16:	4608      	movne	r0, r1
 8000a18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a1c:	4601      	movne	r1, r0
 8000a1e:	0242      	lsls	r2, r0, #9
 8000a20:	bf06      	itte	eq
 8000a22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a26:	ea90 0f01 	teqeq	r0, r1
 8000a2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_ui2f>:
 8000a30:	f04f 0300 	mov.w	r3, #0
 8000a34:	e004      	b.n	8000a40 <__aeabi_i2f+0x8>
 8000a36:	bf00      	nop

08000a38 <__aeabi_i2f>:
 8000a38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a3c:	bf48      	it	mi
 8000a3e:	4240      	negmi	r0, r0
 8000a40:	ea5f 0c00 	movs.w	ip, r0
 8000a44:	bf08      	it	eq
 8000a46:	4770      	bxeq	lr
 8000a48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a4c:	4601      	mov	r1, r0
 8000a4e:	f04f 0000 	mov.w	r0, #0
 8000a52:	e01c      	b.n	8000a8e <__aeabi_l2f+0x2a>

08000a54 <__aeabi_ul2f>:
 8000a54:	ea50 0201 	orrs.w	r2, r0, r1
 8000a58:	bf08      	it	eq
 8000a5a:	4770      	bxeq	lr
 8000a5c:	f04f 0300 	mov.w	r3, #0
 8000a60:	e00a      	b.n	8000a78 <__aeabi_l2f+0x14>
 8000a62:	bf00      	nop

08000a64 <__aeabi_l2f>:
 8000a64:	ea50 0201 	orrs.w	r2, r0, r1
 8000a68:	bf08      	it	eq
 8000a6a:	4770      	bxeq	lr
 8000a6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000a70:	d502      	bpl.n	8000a78 <__aeabi_l2f+0x14>
 8000a72:	4240      	negs	r0, r0
 8000a74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a78:	ea5f 0c01 	movs.w	ip, r1
 8000a7c:	bf02      	ittt	eq
 8000a7e:	4684      	moveq	ip, r0
 8000a80:	4601      	moveq	r1, r0
 8000a82:	2000      	moveq	r0, #0
 8000a84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000a88:	bf08      	it	eq
 8000a8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000a92:	fabc f28c 	clz	r2, ip
 8000a96:	3a08      	subs	r2, #8
 8000a98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a9c:	db10      	blt.n	8000ac0 <__aeabi_l2f+0x5c>
 8000a9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000aa2:	4463      	add	r3, ip
 8000aa4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000aa8:	f1c2 0220 	rsb	r2, r2, #32
 8000aac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ab0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab4:	eb43 0002 	adc.w	r0, r3, r2
 8000ab8:	bf08      	it	eq
 8000aba:	f020 0001 	biceq.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	f102 0220 	add.w	r2, r2, #32
 8000ac4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ac8:	f1c2 0220 	rsb	r2, r2, #32
 8000acc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ad0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ad4:	eb43 0002 	adc.w	r0, r3, r2
 8000ad8:	bf08      	it	eq
 8000ada:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_f2iz>:
 8000ae0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ae4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ae8:	d30f      	bcc.n	8000b0a <__aeabi_f2iz+0x2a>
 8000aea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000aee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_f2iz+0x30>
 8000af4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000af8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b00:	fa23 f002 	lsr.w	r0, r3, r2
 8000b04:	bf18      	it	ne
 8000b06:	4240      	negne	r0, r0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0000 	mov.w	r0, #0
 8000b0e:	4770      	bx	lr
 8000b10:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b14:	d101      	bne.n	8000b1a <__aeabi_f2iz+0x3a>
 8000b16:	0242      	lsls	r2, r0, #9
 8000b18:	d105      	bne.n	8000b26 <__aeabi_f2iz+0x46>
 8000b1a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b1e:	bf08      	it	eq
 8000b20:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_f2uiz>:
 8000b2c:	0042      	lsls	r2, r0, #1
 8000b2e:	d20e      	bcs.n	8000b4e <__aeabi_f2uiz+0x22>
 8000b30:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b34:	d30b      	bcc.n	8000b4e <__aeabi_f2uiz+0x22>
 8000b36:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b3a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b3e:	d409      	bmi.n	8000b54 <__aeabi_f2uiz+0x28>
 8000b40:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b48:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr
 8000b54:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b58:	d101      	bne.n	8000b5e <__aeabi_f2uiz+0x32>
 8000b5a:	0242      	lsls	r2, r0, #9
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_f2uiz+0x38>
 8000b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <start_fill>:


void found(int16_t index);
void set_wall(bool rbl, bool rbr, bool rbf);

void start_fill() {
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
	memset(visited, false, sizeof(visited));
 8000b72:	2264      	movs	r2, #100	; 0x64
 8000b74:	2100      	movs	r1, #0
 8000b76:	48ab      	ldr	r0, [pc, #684]	; (8000e24 <start_fill+0x2b8>)
 8000b78:	f00b fc64 	bl	800c444 <memset>
	memset(maze, 0, sizeof(maze));
 8000b7c:	2264      	movs	r2, #100	; 0x64
 8000b7e:	2100      	movs	r1, #0
 8000b80:	48a9      	ldr	r0, [pc, #676]	; (8000e28 <start_fill+0x2bc>)
 8000b82:	f00b fc5f 	bl	800c444 <memset>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000b86:	4ba9      	ldr	r3, [pc, #676]	; (8000e2c <start_fill+0x2c0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000b8e:	4ba8      	ldr	r3, [pc, #672]	; (8000e30 <start_fill+0x2c4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
	visited[starting_coordinates[1]][starting_coordinates[0]] = true;
 8000b96:	4ba7      	ldr	r3, [pc, #668]	; (8000e34 <start_fill+0x2c8>)
 8000b98:	785b      	ldrb	r3, [r3, #1]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4ba5      	ldr	r3, [pc, #660]	; (8000e34 <start_fill+0x2c8>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	4aa0      	ldr	r2, [pc, #640]	; (8000e24 <start_fill+0x2b8>)
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	440b      	add	r3, r1
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	4403      	add	r3, r0
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
	int16_t i = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	82fb      	strh	r3, [r7, #22]
	x = starting_coordinates[0];
 8000bb8:	4b9e      	ldr	r3, [pc, #632]	; (8000e34 <start_fill+0x2c8>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b25a      	sxtb	r2, r3
 8000bbe:	4b9e      	ldr	r3, [pc, #632]	; (8000e38 <start_fill+0x2cc>)
 8000bc0:	701a      	strb	r2, [r3, #0]
	y = starting_coordinates[1] + 1;
 8000bc2:	4b9c      	ldr	r3, [pc, #624]	; (8000e34 <start_fill+0x2c8>)
 8000bc4:	785b      	ldrb	r3, [r3, #1]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	b25a      	sxtb	r2, r3
 8000bcc:	4b9b      	ldr	r3, [pc, #620]	; (8000e3c <start_fill+0x2d0>)
 8000bce:	701a      	strb	r2, [r3, #0]
	maze[y - 1][x] |= bottom_wall;
 8000bd0:	4b9a      	ldr	r3, [pc, #616]	; (8000e3c <start_fill+0x2d0>)
 8000bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8000bd6:	1e5a      	subs	r2, r3, #1
 8000bd8:	4b97      	ldr	r3, [pc, #604]	; (8000e38 <start_fill+0x2cc>)
 8000bda:	f993 3000 	ldrsb.w	r3, [r3]
 8000bde:	4618      	mov	r0, r3
 8000be0:	4991      	ldr	r1, [pc, #580]	; (8000e28 <start_fill+0x2bc>)
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	440b      	add	r3, r1
 8000bec:	4403      	add	r3, r0
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4a92      	ldr	r2, [pc, #584]	; (8000e3c <start_fill+0x2d0>)
 8000bf2:	f992 2000 	ldrsb.w	r2, [r2]
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	498f      	ldr	r1, [pc, #572]	; (8000e38 <start_fill+0x2cc>)
 8000bfa:	f991 1000 	ldrsb.w	r1, [r1]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	b2d8      	uxtb	r0, r3
 8000c06:	4988      	ldr	r1, [pc, #544]	; (8000e28 <start_fill+0x2bc>)
 8000c08:	4613      	mov	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	440b      	add	r3, r1
 8000c12:	4423      	add	r3, r4
 8000c14:	4602      	mov	r2, r0
 8000c16:	701a      	strb	r2, [r3, #0]
	direction = north;
 8000c18:	4b89      	ldr	r3, [pc, #548]	; (8000e40 <start_fill+0x2d4>)
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	701a      	strb	r2, [r3, #0]
	bool frontfree, leftfree, rightfree;
	uint16_t frontValue, leftValue, rightValue;
	while(1){
		vl53l0x_GetRanging_now(rightSensor0, &frontValue);
 8000c1e:	4b89      	ldr	r3, [pc, #548]	; (8000e44 <start_fill+0x2d8>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	1dba      	adds	r2, r7, #6
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f00b f963 	bl	800bef2 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(leftSensor45, &leftValue);
 8000c2c:	4b85      	ldr	r3, [pc, #532]	; (8000e44 <start_fill+0x2d8>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	1d3a      	adds	r2, r7, #4
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f00b f95c 	bl	800bef2 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor45, &rightValue);
 8000c3a:	4b82      	ldr	r3, [pc, #520]	; (8000e44 <start_fill+0x2d8>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	1cba      	adds	r2, r7, #2
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f00b f955 	bl	800bef2 <vl53l0x_GetRanging_now>
		ts1 = frontValue;
 8000c48:	88fa      	ldrh	r2, [r7, #6]
 8000c4a:	4b7f      	ldr	r3, [pc, #508]	; (8000e48 <start_fill+0x2dc>)
 8000c4c:	801a      	strh	r2, [r3, #0]
		ts2 = leftValue;
 8000c4e:	88ba      	ldrh	r2, [r7, #4]
 8000c50:	4b7e      	ldr	r3, [pc, #504]	; (8000e4c <start_fill+0x2e0>)
 8000c52:	801a      	strh	r2, [r3, #0]
		ts3 = rightValue;
 8000c54:	887a      	ldrh	r2, [r7, #2]
 8000c56:	4b7e      	ldr	r3, [pc, #504]	; (8000e50 <start_fill+0x2e4>)
 8000c58:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c60:	487c      	ldr	r0, [pc, #496]	; (8000e54 <start_fill+0x2e8>)
 8000c62:	f003 fe5d 	bl	8004920 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000c66:	2032      	movs	r0, #50	; 0x32
 8000c68:	f003 fb72 	bl	8004350 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c72:	4878      	ldr	r0, [pc, #480]	; (8000e54 <start_fill+0x2e8>)
 8000c74:	f003 fe54 	bl	8004920 <HAL_GPIO_WritePin>
		frontfree = frontValue > HasfrontWallValue;
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c7e:	bf8c      	ite	hi
 8000c80:	2301      	movhi	r3, #1
 8000c82:	2300      	movls	r3, #0
 8000c84:	757b      	strb	r3, [r7, #21]
		leftfree  = leftValue > HasleftWallValue_45;
 8000c86:	88bb      	ldrh	r3, [r7, #4]
 8000c88:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c8c:	bf8c      	ite	hi
 8000c8e:	2301      	movhi	r3, #1
 8000c90:	2300      	movls	r3, #0
 8000c92:	753b      	strb	r3, [r7, #20]
		rightfree = rightValue > HasrightWallValue_45;
 8000c94:	887b      	ldrh	r3, [r7, #2]
 8000c96:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c9a:	bf8c      	ite	hi
 8000c9c:	2301      	movhi	r3, #1
 8000c9e:	2300      	movls	r3, #0
 8000ca0:	74fb      	strb	r3, [r7, #19]
		set_wall(!leftfree, !rightfree, !frontfree);
 8000ca2:	7d3b      	ldrb	r3, [r7, #20]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf14      	ite	ne
 8000ca8:	2301      	movne	r3, #1
 8000caa:	2300      	moveq	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	f083 0301 	eor.w	r3, r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	b2d8      	uxtb	r0, r3
 8000cba:	7cfb      	ldrb	r3, [r7, #19]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	bf14      	ite	ne
 8000cc0:	2301      	movne	r3, #1
 8000cc2:	2300      	moveq	r3, #0
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	f083 0301 	eor.w	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	b2d9      	uxtb	r1, r3
 8000cd2:	7d7b      	ldrb	r3, [r7, #21]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	bf14      	ite	ne
 8000cd8:	2301      	movne	r3, #1
 8000cda:	2300      	moveq	r3, #0
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	f083 0301 	eor.w	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	461a      	mov	r2, r3
 8000cec:	f001 fbd8 	bl	80024a0 <set_wall>
		visited[y][x] = true;
 8000cf0:	4b52      	ldr	r3, [pc, #328]	; (8000e3c <start_fill+0x2d0>)
 8000cf2:	f993 3000 	ldrsb.w	r3, [r3]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4b4f      	ldr	r3, [pc, #316]	; (8000e38 <start_fill+0x2cc>)
 8000cfa:	f993 3000 	ldrsb.w	r3, [r3]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <start_fill+0x2b8>)
 8000d02:	460b      	mov	r3, r1
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	440b      	add	r3, r1
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4403      	add	r3, r0
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
		if(x == ending_coordinates[0] && y == ending_coordinates[1]){
 8000d12:	4b49      	ldr	r3, [pc, #292]	; (8000e38 <start_fill+0x2cc>)
 8000d14:	f993 3000 	ldrsb.w	r3, [r3]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b4f      	ldr	r3, [pc, #316]	; (8000e58 <start_fill+0x2ec>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d135      	bne.n	8000d8e <start_fill+0x222>
 8000d22:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <start_fill+0x2d0>)
 8000d24:	f993 3000 	ldrsb.w	r3, [r3]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <start_fill+0x2ec>)
 8000d2c:	785b      	ldrb	r3, [r3, #1]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d12d      	bne.n	8000d8e <start_fill+0x222>
			found(i);
 8000d32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fb5e 	bl	80023f8 <found>
			maze[y][x] |= top_wall;
 8000d3c:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <start_fill+0x2d0>)
 8000d3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4b3c      	ldr	r3, [pc, #240]	; (8000e38 <start_fill+0x2cc>)
 8000d46:	f993 3000 	ldrsb.w	r3, [r3]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	4a36      	ldr	r2, [pc, #216]	; (8000e28 <start_fill+0x2bc>)
 8000d4e:	460b      	mov	r3, r1
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	440b      	add	r3, r1
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	4403      	add	r3, r0
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4a37      	ldr	r2, [pc, #220]	; (8000e3c <start_fill+0x2d0>)
 8000d5e:	f992 2000 	ldrsb.w	r2, [r2]
 8000d62:	4611      	mov	r1, r2
 8000d64:	4a34      	ldr	r2, [pc, #208]	; (8000e38 <start_fill+0x2cc>)
 8000d66:	f992 2000 	ldrsb.w	r2, [r2]
 8000d6a:	4614      	mov	r4, r2
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	b2d8      	uxtb	r0, r3
 8000d72:	4a2d      	ldr	r2, [pc, #180]	; (8000e28 <start_fill+0x2bc>)
 8000d74:	460b      	mov	r3, r1
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4423      	add	r3, r4
 8000d80:	4602      	mov	r2, r0
 8000d82:	701a      	strb	r2, [r3, #0]
			break;
 8000d84:	bf00      	nop
					}
					break;
			}
		}
	}
	for(int n = 0; n < grid_size; n++){
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	f001 bb27 	b.w	80023dc <start_fill+0x1870>
		switch(direction){
 8000d8e:	4b2c      	ldr	r3, [pc, #176]	; (8000e40 <start_fill+0x2d4>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	f200 81b3 	bhi.w	80010fe <start_fill+0x592>
 8000d98:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <start_fill+0x234>)
 8000d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9e:	bf00      	nop
 8000da0:	08000db1 	.word	0x08000db1
 8000da4:	08000eab 	.word	0x08000eab
 8000da8:	08000f6d 	.word	0x08000f6d
 8000dac:	0800102f 	.word	0x0800102f
				frontfree = frontfree && !visited[y][x - 1];
 8000db0:	7d7b      	ldrb	r3, [r7, #21]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d016      	beq.n	8000de4 <start_fill+0x278>
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <start_fill+0x2d0>)
 8000db8:	f993 3000 	ldrsb.w	r3, [r3]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <start_fill+0x2cc>)
 8000dc0:	f993 3000 	ldrsb.w	r3, [r3]
 8000dc4:	1e5a      	subs	r2, r3, #1
 8000dc6:	4917      	ldr	r1, [pc, #92]	; (8000e24 <start_fill+0x2b8>)
 8000dc8:	4603      	mov	r3, r0
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4403      	add	r3, r0
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	440b      	add	r3, r1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	f083 0301 	eor.w	r3, r3, #1
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <start_fill+0x278>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e000      	b.n	8000de6 <start_fill+0x27a>
 8000de4:	2300      	movs	r3, #0
 8000de6:	757b      	strb	r3, [r7, #21]
 8000de8:	7d7b      	ldrb	r3, [r7, #21]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	757b      	strb	r3, [r7, #21]
				leftfree  = leftfree && !visited[y + 1][x];
 8000df0:	7d3b      	ldrb	r3, [r7, #20]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d032      	beq.n	8000e5c <start_fill+0x2f0>
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <start_fill+0x2d0>)
 8000df8:	f993 3000 	ldrsb.w	r3, [r3]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <start_fill+0x2cc>)
 8000e00:	f993 3000 	ldrsb.w	r3, [r3]
 8000e04:	4618      	mov	r0, r3
 8000e06:	4907      	ldr	r1, [pc, #28]	; (8000e24 <start_fill+0x2b8>)
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	440b      	add	r3, r1
 8000e12:	4403      	add	r3, r0
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	f083 0301 	eor.w	r3, r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d01d      	beq.n	8000e5c <start_fill+0x2f0>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e01c      	b.n	8000e5e <start_fill+0x2f2>
 8000e24:	200005f4 	.word	0x200005f4
 8000e28:	20000590 	.word	0x20000590
 8000e2c:	200004b8 	.word	0x200004b8
 8000e30:	20000500 	.word	0x20000500
 8000e34:	0800c920 	.word	0x0800c920
 8000e38:	20000418 	.word	0x20000418
 8000e3c:	20000419 	.word	0x20000419
 8000e40:	2000041a 	.word	0x2000041a
 8000e44:	20000f9c 	.word	0x20000f9c
 8000e48:	20000664 	.word	0x20000664
 8000e4c:	20000666 	.word	0x20000666
 8000e50:	20000668 	.word	0x20000668
 8000e54:	40011000 	.word	0x40011000
 8000e58:	0800c924 	.word	0x0800c924
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	753b      	strb	r3, [r7, #20]
 8000e60:	7d3b      	ldrb	r3, [r7, #20]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	753b      	strb	r3, [r7, #20]
				rightfree  = rightfree && !visited[y - 1][x];
 8000e68:	7cfb      	ldrb	r3, [r7, #19]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d016      	beq.n	8000e9c <start_fill+0x330>
 8000e6e:	4b9d      	ldr	r3, [pc, #628]	; (80010e4 <start_fill+0x578>)
 8000e70:	f993 3000 	ldrsb.w	r3, [r3]
 8000e74:	1e5a      	subs	r2, r3, #1
 8000e76:	4b9c      	ldr	r3, [pc, #624]	; (80010e8 <start_fill+0x57c>)
 8000e78:	f993 3000 	ldrsb.w	r3, [r3]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	499b      	ldr	r1, [pc, #620]	; (80010ec <start_fill+0x580>)
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	440b      	add	r3, r1
 8000e8a:	4403      	add	r3, r0
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	f083 0301 	eor.w	r3, r3, #1
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <start_fill+0x330>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <start_fill+0x332>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	74fb      	strb	r3, [r7, #19]
 8000ea0:	7cfb      	ldrb	r3, [r7, #19]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	74fb      	strb	r3, [r7, #19]
				break;
 8000ea8:	e129      	b.n	80010fe <start_fill+0x592>
				frontfree = frontfree && !visited[y][x + 1];
 8000eaa:	7d7b      	ldrb	r3, [r7, #21]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d016      	beq.n	8000ede <start_fill+0x372>
 8000eb0:	4b8c      	ldr	r3, [pc, #560]	; (80010e4 <start_fill+0x578>)
 8000eb2:	f993 3000 	ldrsb.w	r3, [r3]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	4b8b      	ldr	r3, [pc, #556]	; (80010e8 <start_fill+0x57c>)
 8000eba:	f993 3000 	ldrsb.w	r3, [r3]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	498a      	ldr	r1, [pc, #552]	; (80010ec <start_fill+0x580>)
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4403      	add	r3, r0
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	440b      	add	r3, r1
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	f083 0301 	eor.w	r3, r3, #1
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <start_fill+0x372>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <start_fill+0x374>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	757b      	strb	r3, [r7, #21]
 8000ee2:	7d7b      	ldrb	r3, [r7, #21]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	757b      	strb	r3, [r7, #21]
				leftfree  = leftfree && !visited[y - 1][x];
 8000eea:	7d3b      	ldrb	r3, [r7, #20]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d016      	beq.n	8000f1e <start_fill+0x3b2>
 8000ef0:	4b7c      	ldr	r3, [pc, #496]	; (80010e4 <start_fill+0x578>)
 8000ef2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ef6:	1e5a      	subs	r2, r3, #1
 8000ef8:	4b7b      	ldr	r3, [pc, #492]	; (80010e8 <start_fill+0x57c>)
 8000efa:	f993 3000 	ldrsb.w	r3, [r3]
 8000efe:	4618      	mov	r0, r3
 8000f00:	497a      	ldr	r1, [pc, #488]	; (80010ec <start_fill+0x580>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	440b      	add	r3, r1
 8000f0c:	4403      	add	r3, r0
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	f083 0301 	eor.w	r3, r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <start_fill+0x3b2>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <start_fill+0x3b4>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	753b      	strb	r3, [r7, #20]
 8000f22:	7d3b      	ldrb	r3, [r7, #20]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	753b      	strb	r3, [r7, #20]
				rightfree  = rightfree && !visited[y + 1][x];
 8000f2a:	7cfb      	ldrb	r3, [r7, #19]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d016      	beq.n	8000f5e <start_fill+0x3f2>
 8000f30:	4b6c      	ldr	r3, [pc, #432]	; (80010e4 <start_fill+0x578>)
 8000f32:	f993 3000 	ldrsb.w	r3, [r3]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	4b6b      	ldr	r3, [pc, #428]	; (80010e8 <start_fill+0x57c>)
 8000f3a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	496a      	ldr	r1, [pc, #424]	; (80010ec <start_fill+0x580>)
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	440b      	add	r3, r1
 8000f4c:	4403      	add	r3, r0
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	f083 0301 	eor.w	r3, r3, #1
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <start_fill+0x3f2>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <start_fill+0x3f4>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	74fb      	strb	r3, [r7, #19]
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	74fb      	strb	r3, [r7, #19]
				break;
 8000f6a:	e0c8      	b.n	80010fe <start_fill+0x592>
				frontfree = frontfree && !visited[y - 1][x];
 8000f6c:	7d7b      	ldrb	r3, [r7, #21]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d016      	beq.n	8000fa0 <start_fill+0x434>
 8000f72:	4b5c      	ldr	r3, [pc, #368]	; (80010e4 <start_fill+0x578>)
 8000f74:	f993 3000 	ldrsb.w	r3, [r3]
 8000f78:	1e5a      	subs	r2, r3, #1
 8000f7a:	4b5b      	ldr	r3, [pc, #364]	; (80010e8 <start_fill+0x57c>)
 8000f7c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f80:	4618      	mov	r0, r3
 8000f82:	495a      	ldr	r1, [pc, #360]	; (80010ec <start_fill+0x580>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	440b      	add	r3, r1
 8000f8e:	4403      	add	r3, r0
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	f083 0301 	eor.w	r3, r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <start_fill+0x434>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <start_fill+0x436>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	757b      	strb	r3, [r7, #21]
 8000fa4:	7d7b      	ldrb	r3, [r7, #21]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	757b      	strb	r3, [r7, #21]
				leftfree  = leftfree && !visited[y][x - 1];
 8000fac:	7d3b      	ldrb	r3, [r7, #20]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d016      	beq.n	8000fe0 <start_fill+0x474>
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <start_fill+0x578>)
 8000fb4:	f993 3000 	ldrsb.w	r3, [r3]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	4b4b      	ldr	r3, [pc, #300]	; (80010e8 <start_fill+0x57c>)
 8000fbc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc0:	1e5a      	subs	r2, r3, #1
 8000fc2:	494a      	ldr	r1, [pc, #296]	; (80010ec <start_fill+0x580>)
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4403      	add	r3, r0
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	440b      	add	r3, r1
 8000fce:	4413      	add	r3, r2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	f083 0301 	eor.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <start_fill+0x474>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <start_fill+0x476>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	753b      	strb	r3, [r7, #20]
 8000fe4:	7d3b      	ldrb	r3, [r7, #20]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	753b      	strb	r3, [r7, #20]
				rightfree  = rightfree && !visited[y][x + 1];
 8000fec:	7cfb      	ldrb	r3, [r7, #19]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d016      	beq.n	8001020 <start_fill+0x4b4>
 8000ff2:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <start_fill+0x578>)
 8000ff4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <start_fill+0x57c>)
 8000ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	493a      	ldr	r1, [pc, #232]	; (80010ec <start_fill+0x580>)
 8001004:	4603      	mov	r3, r0
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4403      	add	r3, r0
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	440b      	add	r3, r1
 800100e:	4413      	add	r3, r2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	f083 0301 	eor.w	r3, r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <start_fill+0x4b4>
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <start_fill+0x4b6>
 8001020:	2300      	movs	r3, #0
 8001022:	74fb      	strb	r3, [r7, #19]
 8001024:	7cfb      	ldrb	r3, [r7, #19]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	74fb      	strb	r3, [r7, #19]
				break;
 800102c:	e067      	b.n	80010fe <start_fill+0x592>
				frontfree = frontfree && !visited[y + 1][x];
 800102e:	7d7b      	ldrb	r3, [r7, #21]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d016      	beq.n	8001062 <start_fill+0x4f6>
 8001034:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <start_fill+0x578>)
 8001036:	f993 3000 	ldrsb.w	r3, [r3]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <start_fill+0x57c>)
 800103e:	f993 3000 	ldrsb.w	r3, [r3]
 8001042:	4618      	mov	r0, r3
 8001044:	4929      	ldr	r1, [pc, #164]	; (80010ec <start_fill+0x580>)
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	440b      	add	r3, r1
 8001050:	4403      	add	r3, r0
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	f083 0301 	eor.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <start_fill+0x4f6>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <start_fill+0x4f8>
 8001062:	2300      	movs	r3, #0
 8001064:	757b      	strb	r3, [r7, #21]
 8001066:	7d7b      	ldrb	r3, [r7, #21]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	757b      	strb	r3, [r7, #21]
				leftfree  = leftfree && !visited[y][x + 1];
 800106e:	7d3b      	ldrb	r3, [r7, #20]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d016      	beq.n	80010a2 <start_fill+0x536>
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <start_fill+0x578>)
 8001076:	f993 3000 	ldrsb.w	r3, [r3]
 800107a:	4618      	mov	r0, r3
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <start_fill+0x57c>)
 800107e:	f993 3000 	ldrsb.w	r3, [r3]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	4919      	ldr	r1, [pc, #100]	; (80010ec <start_fill+0x580>)
 8001086:	4603      	mov	r3, r0
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4403      	add	r3, r0
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	440b      	add	r3, r1
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	f083 0301 	eor.w	r3, r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <start_fill+0x536>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <start_fill+0x538>
 80010a2:	2300      	movs	r3, #0
 80010a4:	753b      	strb	r3, [r7, #20]
 80010a6:	7d3b      	ldrb	r3, [r7, #20]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	753b      	strb	r3, [r7, #20]
				rightfree  = rightfree && !visited[y][x - 1];
 80010ae:	7cfb      	ldrb	r3, [r7, #19]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d01d      	beq.n	80010f0 <start_fill+0x584>
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <start_fill+0x578>)
 80010b6:	f993 3000 	ldrsb.w	r3, [r3]
 80010ba:	4618      	mov	r0, r3
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <start_fill+0x57c>)
 80010be:	f993 3000 	ldrsb.w	r3, [r3]
 80010c2:	1e5a      	subs	r2, r3, #1
 80010c4:	4909      	ldr	r1, [pc, #36]	; (80010ec <start_fill+0x580>)
 80010c6:	4603      	mov	r3, r0
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4403      	add	r3, r0
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	440b      	add	r3, r1
 80010d0:	4413      	add	r3, r2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	f083 0301 	eor.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d008      	beq.n	80010f0 <start_fill+0x584>
 80010de:	2301      	movs	r3, #1
 80010e0:	e007      	b.n	80010f2 <start_fill+0x586>
 80010e2:	bf00      	nop
 80010e4:	20000419 	.word	0x20000419
 80010e8:	20000418 	.word	0x20000418
 80010ec:	200005f4 	.word	0x200005f4
 80010f0:	2300      	movs	r3, #0
 80010f2:	74fb      	strb	r3, [r7, #19]
 80010f4:	7cfb      	ldrb	r3, [r7, #19]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	74fb      	strb	r3, [r7, #19]
				break;
 80010fc:	bf00      	nop
		if((leftfree && rightfree) || (leftfree && frontfree) || (rightfree && frontfree)){
 80010fe:	7d3b      	ldrb	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <start_fill+0x59e>
 8001104:	7cfb      	ldrb	r3, [r7, #19]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10d      	bne.n	8001126 <start_fill+0x5ba>
 800110a:	7d3b      	ldrb	r3, [r7, #20]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <start_fill+0x5aa>
 8001110:	7d7b      	ldrb	r3, [r7, #21]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d107      	bne.n	8001126 <start_fill+0x5ba>
 8001116:	7cfb      	ldrb	r3, [r7, #19]
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80be 	beq.w	800129a <start_fill+0x72e>
 800111e:	7d7b      	ldrb	r3, [r7, #21]
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80ba 	beq.w	800129a <start_fill+0x72e>
			i++;
 8001126:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800112a:	b29b      	uxth	r3, r3
 800112c:	3301      	adds	r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	82fb      	strh	r3, [r7, #22]
			stack[i][1] = x;
 8001132:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001136:	4bbc      	ldr	r3, [pc, #752]	; (8001428 <start_fill+0x8bc>)
 8001138:	f993 0000 	ldrsb.w	r0, [r3]
 800113c:	49bb      	ldr	r1, [pc, #748]	; (800142c <start_fill+0x8c0>)
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	440b      	add	r3, r1
 8001146:	3301      	adds	r3, #1
 8001148:	4602      	mov	r2, r0
 800114a:	701a      	strb	r2, [r3, #0]
			stack[i][2] = y;
 800114c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001150:	4bb7      	ldr	r3, [pc, #732]	; (8001430 <start_fill+0x8c4>)
 8001152:	f993 0000 	ldrsb.w	r0, [r3]
 8001156:	49b5      	ldr	r1, [pc, #724]	; (800142c <start_fill+0x8c0>)
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	440b      	add	r3, r1
 8001160:	3302      	adds	r3, #2
 8001162:	4602      	mov	r2, r0
 8001164:	701a      	strb	r2, [r3, #0]
			if(direction == west){
 8001166:	4bb3      	ldr	r3, [pc, #716]	; (8001434 <start_fill+0x8c8>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d129      	bne.n	80011c2 <start_fill+0x656>
				if(rightfree){
 800116e:	7cfb      	ldrb	r3, [r7, #19]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d017      	beq.n	80011a4 <start_fill+0x638>
					stack[i][0] = turn_right_90;
 8001174:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001178:	49ac      	ldr	r1, [pc, #688]	; (800142c <start_fill+0x8c0>)
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	440b      	add	r3, r1
 8001182:	22ff      	movs	r2, #255	; 0xff
 8001184:	701a      	strb	r2, [r3, #0]
					go_straight(WidthOESide, 1);
 8001186:	4bac      	ldr	r3, [pc, #688]	; (8001438 <start_fill+0x8cc>)
 8001188:	2101      	movs	r1, #1
 800118a:	4618      	mov	r0, r3
 800118c:	f002 feac 	bl	8003ee8 <go_straight>
					turn_right90(&direction);
 8001190:	48a8      	ldr	r0, [pc, #672]	; (8001434 <start_fill+0x8c8>)
 8001192:	f002 fde9 	bl	8003d68 <turn_right90>
					go_straight(WidthOESide, 0);
 8001196:	4ba8      	ldr	r3, [pc, #672]	; (8001438 <start_fill+0x8cc>)
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f002 fea4 	bl	8003ee8 <go_straight>
			if(direction == west){
 80011a0:	f001 b85f 	b.w	8002262 <start_fill+0x16f6>
					stack[i][0] = straight;
 80011a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011a8:	49a0      	ldr	r1, [pc, #640]	; (800142c <start_fill+0x8c0>)
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	22fa      	movs	r2, #250	; 0xfa
 80011b4:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 80011b6:	2100      	movs	r1, #0
 80011b8:	48a0      	ldr	r0, [pc, #640]	; (800143c <start_fill+0x8d0>)
 80011ba:	f002 fe95 	bl	8003ee8 <go_straight>
			if(direction == west){
 80011be:	f001 b850 	b.w	8002262 <start_fill+0x16f6>
			} else if(direction == east){
 80011c2:	4b9c      	ldr	r3, [pc, #624]	; (8001434 <start_fill+0x8c8>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d133      	bne.n	8001232 <start_fill+0x6c6>
				if(leftfree){
 80011ca:	7d3b      	ldrb	r3, [r7, #20]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d021      	beq.n	8001214 <start_fill+0x6a8>
					stack[i][0] = turn_left_90;
 80011d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011d4:	4995      	ldr	r1, [pc, #596]	; (800142c <start_fill+0x8c0>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	440b      	add	r3, r1
 80011de:	22fc      	movs	r2, #252	; 0xfc
 80011e0:	701a      	strb	r2, [r3, #0]
					go_straight(WidthOESide + dbtWheels_c, 1);
 80011e2:	4b95      	ldr	r3, [pc, #596]	; (8001438 <start_fill+0x8cc>)
 80011e4:	4996      	ldr	r1, [pc, #600]	; (8001440 <start_fill+0x8d4>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fb72 	bl	80008d0 <__addsf3>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2101      	movs	r1, #1
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 fe79 	bl	8003ee8 <go_straight>
					turn_left90(&direction);
 80011f6:	488f      	ldr	r0, [pc, #572]	; (8001434 <start_fill+0x8c8>)
 80011f8:	f002 fcf2 	bl	8003be0 <turn_left90>
					go_straight(WidthOESide - dbtWheels_c, 0);
 80011fc:	4b8e      	ldr	r3, [pc, #568]	; (8001438 <start_fill+0x8cc>)
 80011fe:	4990      	ldr	r1, [pc, #576]	; (8001440 <start_fill+0x8d4>)
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fb63 	bl	80008cc <__aeabi_fsub>
 8001206:	4603      	mov	r3, r0
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f002 fe6c 	bl	8003ee8 <go_straight>
			if(direction == west){
 8001210:	f001 b827 	b.w	8002262 <start_fill+0x16f6>
					stack[i][0] = straight;
 8001214:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001218:	4984      	ldr	r1, [pc, #528]	; (800142c <start_fill+0x8c0>)
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	440b      	add	r3, r1
 8001222:	22fa      	movs	r2, #250	; 0xfa
 8001224:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 8001226:	2100      	movs	r1, #0
 8001228:	4884      	ldr	r0, [pc, #528]	; (800143c <start_fill+0x8d0>)
 800122a:	f002 fe5d 	bl	8003ee8 <go_straight>
			if(direction == west){
 800122e:	f001 b818 	b.w	8002262 <start_fill+0x16f6>
				if(frontfree){
 8001232:	7d7b      	ldrb	r3, [r7, #21]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00e      	beq.n	8001256 <start_fill+0x6ea>
					stack[i][0] = straight;
 8001238:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800123c:	497b      	ldr	r1, [pc, #492]	; (800142c <start_fill+0x8c0>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	440b      	add	r3, r1
 8001246:	22fa      	movs	r2, #250	; 0xfa
 8001248:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 800124a:	2100      	movs	r1, #0
 800124c:	487b      	ldr	r0, [pc, #492]	; (800143c <start_fill+0x8d0>)
 800124e:	f002 fe4b 	bl	8003ee8 <go_straight>
			if(direction == west){
 8001252:	f001 b806 	b.w	8002262 <start_fill+0x16f6>
					stack[i][0] = turn_left_90;
 8001256:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800125a:	4974      	ldr	r1, [pc, #464]	; (800142c <start_fill+0x8c0>)
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	440b      	add	r3, r1
 8001264:	22fc      	movs	r2, #252	; 0xfc
 8001266:	701a      	strb	r2, [r3, #0]
					go_straight(WidthOESide + dbtWheels_c, 1);
 8001268:	4b73      	ldr	r3, [pc, #460]	; (8001438 <start_fill+0x8cc>)
 800126a:	4975      	ldr	r1, [pc, #468]	; (8001440 <start_fill+0x8d4>)
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fb2f 	bl	80008d0 <__addsf3>
 8001272:	4603      	mov	r3, r0
 8001274:	2101      	movs	r1, #1
 8001276:	4618      	mov	r0, r3
 8001278:	f002 fe36 	bl	8003ee8 <go_straight>
					turn_left90(&direction);
 800127c:	486d      	ldr	r0, [pc, #436]	; (8001434 <start_fill+0x8c8>)
 800127e:	f002 fcaf 	bl	8003be0 <turn_left90>
					go_straight(WidthOESide - dbtWheels_c, 0);
 8001282:	4b6d      	ldr	r3, [pc, #436]	; (8001438 <start_fill+0x8cc>)
 8001284:	496e      	ldr	r1, [pc, #440]	; (8001440 <start_fill+0x8d4>)
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fb20 	bl	80008cc <__aeabi_fsub>
 800128c:	4603      	mov	r3, r0
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f002 fe29 	bl	8003ee8 <go_straight>
			if(direction == west){
 8001296:	f000 bfe4 	b.w	8002262 <start_fill+0x16f6>
		} else if(leftfree || rightfree || frontfree){
 800129a:	7d3b      	ldrb	r3, [r7, #20]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d106      	bne.n	80012ae <start_fill+0x742>
 80012a0:	7cfb      	ldrb	r3, [r7, #19]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d103      	bne.n	80012ae <start_fill+0x742>
 80012a6:	7d7b      	ldrb	r3, [r7, #21]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80cb 	beq.w	8001444 <start_fill+0x8d8>
			if(frontfree){
 80012ae:	7d7b      	ldrb	r3, [r7, #21]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d058      	beq.n	8001366 <start_fill+0x7fa>
				if(stack[i][0] == straight && stack[i][1] == -1){
 80012b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80012b8:	495c      	ldr	r1, [pc, #368]	; (800142c <start_fill+0x8c0>)
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	f993 3000 	ldrsb.w	r3, [r3]
 80012c6:	f113 0f06 	cmn.w	r3, #6
 80012ca:	d123      	bne.n	8001314 <start_fill+0x7a8>
 80012cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80012d0:	4956      	ldr	r1, [pc, #344]	; (800142c <start_fill+0x8c0>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	440b      	add	r3, r1
 80012da:	3301      	adds	r3, #1
 80012dc:	f993 3000 	ldrsb.w	r3, [r3]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d116      	bne.n	8001314 <start_fill+0x7a8>
					stack[i][2]++;
 80012e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80012ea:	4950      	ldr	r1, [pc, #320]	; (800142c <start_fill+0x8c0>)
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	3302      	adds	r3, #2
 80012f6:	f993 3000 	ldrsb.w	r3, [r3]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	3301      	adds	r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	b258      	sxtb	r0, r3
 8001302:	494a      	ldr	r1, [pc, #296]	; (800142c <start_fill+0x8c0>)
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	440b      	add	r3, r1
 800130c:	3302      	adds	r3, #2
 800130e:	4602      	mov	r2, r0
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	e022      	b.n	800135a <start_fill+0x7ee>
					i++;
 8001314:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001318:	b29b      	uxth	r3, r3
 800131a:	3301      	adds	r3, #1
 800131c:	b29b      	uxth	r3, r3
 800131e:	82fb      	strh	r3, [r7, #22]
					stack[i][0] = straight;
 8001320:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001324:	4941      	ldr	r1, [pc, #260]	; (800142c <start_fill+0x8c0>)
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	440b      	add	r3, r1
 800132e:	22fa      	movs	r2, #250	; 0xfa
 8001330:	701a      	strb	r2, [r3, #0]
					stack[i][1] = -1;
 8001332:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001336:	493d      	ldr	r1, [pc, #244]	; (800142c <start_fill+0x8c0>)
 8001338:	4613      	mov	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	440b      	add	r3, r1
 8001340:	3301      	adds	r3, #1
 8001342:	22ff      	movs	r2, #255	; 0xff
 8001344:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 8001346:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800134a:	4938      	ldr	r1, [pc, #224]	; (800142c <start_fill+0x8c0>)
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	440b      	add	r3, r1
 8001354:	3302      	adds	r3, #2
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
				go_straight(square_size, 0);
 800135a:	2100      	movs	r1, #0
 800135c:	4837      	ldr	r0, [pc, #220]	; (800143c <start_fill+0x8d0>)
 800135e:	f002 fdc3 	bl	8003ee8 <go_straight>
			if(frontfree){
 8001362:	f000 bf71 	b.w	8002248 <start_fill+0x16dc>
			} else if(leftfree){
 8001366:	7d3b      	ldrb	r3, [r7, #20]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d031      	beq.n	80013d0 <start_fill+0x864>
				i++;
 800136c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001370:	b29b      	uxth	r3, r3
 8001372:	3301      	adds	r3, #1
 8001374:	b29b      	uxth	r3, r3
 8001376:	82fb      	strh	r3, [r7, #22]
				stack[i][0] = turn_left_90;
 8001378:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800137c:	492b      	ldr	r1, [pc, #172]	; (800142c <start_fill+0x8c0>)
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	440b      	add	r3, r1
 8001386:	22fc      	movs	r2, #252	; 0xfc
 8001388:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 800138a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800138e:	4927      	ldr	r1, [pc, #156]	; (800142c <start_fill+0x8c0>)
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	440b      	add	r3, r1
 8001398:	3301      	adds	r3, #1
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	701a      	strb	r2, [r3, #0]
				go_straight(WidthOESide + dbtWheels_c, 1);
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <start_fill+0x8cc>)
 80013a0:	4927      	ldr	r1, [pc, #156]	; (8001440 <start_fill+0x8d4>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fa94 	bl	80008d0 <__addsf3>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2101      	movs	r1, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 fd9b 	bl	8003ee8 <go_straight>
				turn_left90(&direction);
 80013b2:	4820      	ldr	r0, [pc, #128]	; (8001434 <start_fill+0x8c8>)
 80013b4:	f002 fc14 	bl	8003be0 <turn_left90>
				go_straight(WidthOESide - dbtWheels_c, 0);
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <start_fill+0x8cc>)
 80013ba:	4921      	ldr	r1, [pc, #132]	; (8001440 <start_fill+0x8d4>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fa85 	bl	80008cc <__aeabi_fsub>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fd8e 	bl	8003ee8 <go_straight>
			if(frontfree){
 80013cc:	f000 bf3c 	b.w	8002248 <start_fill+0x16dc>
			} else if(rightfree){
 80013d0:	7cfb      	ldrb	r3, [r7, #19]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 8738 	beq.w	8002248 <start_fill+0x16dc>
				i++;
 80013d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3301      	adds	r3, #1
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	82fb      	strh	r3, [r7, #22]
				stack[i][0] = turn_right_90;
 80013e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80013e8:	4910      	ldr	r1, [pc, #64]	; (800142c <start_fill+0x8c0>)
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	22ff      	movs	r2, #255	; 0xff
 80013f4:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 80013f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80013fa:	490c      	ldr	r1, [pc, #48]	; (800142c <start_fill+0x8c0>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	440b      	add	r3, r1
 8001404:	3301      	adds	r3, #1
 8001406:	22ff      	movs	r2, #255	; 0xff
 8001408:	701a      	strb	r2, [r3, #0]
				go_straight(WidthOESide, 1);
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <start_fill+0x8cc>)
 800140c:	2101      	movs	r1, #1
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fd6a 	bl	8003ee8 <go_straight>
				turn_right90(&direction);
 8001414:	4807      	ldr	r0, [pc, #28]	; (8001434 <start_fill+0x8c8>)
 8001416:	f002 fca7 	bl	8003d68 <turn_right90>
				go_straight(WidthOESide, 0);
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <start_fill+0x8cc>)
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f002 fd62 	bl	8003ee8 <go_straight>
			if(frontfree){
 8001424:	f000 bf10 	b.w	8002248 <start_fill+0x16dc>
 8001428:	20000418 	.word	0x20000418
 800142c:	200002ec 	.word	0x200002ec
 8001430:	20000419 	.word	0x20000419
 8001434:	2000041a 	.word	0x2000041a
 8001438:	42c20000 	.word	0x42c20000
 800143c:	43960000 	.word	0x43960000
 8001440:	42180000 	.word	0x42180000
			go_straight(WidthOESide, 1);
 8001444:	4bbb      	ldr	r3, [pc, #748]	; (8001734 <start_fill+0xbc8>)
 8001446:	2101      	movs	r1, #1
 8001448:	4618      	mov	r0, r3
 800144a:	f002 fd4d 	bl	8003ee8 <go_straight>
			u_turnf(&direction);
 800144e:	48ba      	ldr	r0, [pc, #744]	; (8001738 <start_fill+0xbcc>)
 8001450:	f002 fad2 	bl	80039f8 <u_turnf>
			go_straight(WidthOESide, 0);
 8001454:	4bb7      	ldr	r3, [pc, #732]	; (8001734 <start_fill+0xbc8>)
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f002 fd45 	bl	8003ee8 <go_straight>
			if(stack[i][1] != -1 &&
 800145e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001462:	49b6      	ldr	r1, [pc, #728]	; (800173c <start_fill+0xbd0>)
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	440b      	add	r3, r1
 800146c:	3301      	adds	r3, #1
 800146e:	f993 3000 	ldrsb.w	r3, [r3]
 8001472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001476:	f000 82b3 	beq.w	80019e0 <start_fill+0xe74>
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 800147a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800147e:	49af      	ldr	r1, [pc, #700]	; (800173c <start_fill+0xbd0>)
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	440b      	add	r3, r1
 8001488:	3302      	adds	r3, #2
 800148a:	f993 3000 	ldrsb.w	r3, [r3]
 800148e:	4618      	mov	r0, r3
 8001490:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001494:	49a9      	ldr	r1, [pc, #676]	; (800173c <start_fill+0xbd0>)
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	440b      	add	r3, r1
 800149e:	3301      	adds	r3, #1
 80014a0:	f993 3000 	ldrsb.w	r3, [r3]
 80014a4:	4619      	mov	r1, r3
 80014a6:	4aa6      	ldr	r2, [pc, #664]	; (8001740 <start_fill+0xbd4>)
 80014a8:	4603      	mov	r3, r0
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4403      	add	r3, r0
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
			if(stack[i][1] != -1 &&
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d120      	bne.n	8001500 <start_fill+0x994>
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 80014be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014c2:	499e      	ldr	r1, [pc, #632]	; (800173c <start_fill+0xbd0>)
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	3302      	adds	r3, #2
 80014ce:	f993 3000 	ldrsb.w	r3, [r3]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014d8:	4998      	ldr	r1, [pc, #608]	; (800173c <start_fill+0xbd0>)
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	3301      	adds	r3, #1
 80014e4:	f993 3000 	ldrsb.w	r3, [r3]
 80014e8:	1e5a      	subs	r2, r3, #1
 80014ea:	4996      	ldr	r1, [pc, #600]	; (8001744 <start_fill+0xbd8>)
 80014ec:	4603      	mov	r3, r0
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4403      	add	r3, r0
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	440b      	add	r3, r1
 80014f6:	4413      	add	r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8270 	beq.w	80019e0 <start_fill+0xe74>
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001500:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001504:	498d      	ldr	r1, [pc, #564]	; (800173c <start_fill+0xbd0>)
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	440b      	add	r3, r1
 800150e:	3302      	adds	r3, #2
 8001510:	f993 3000 	ldrsb.w	r3, [r3]
 8001514:	4618      	mov	r0, r3
 8001516:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800151a:	4988      	ldr	r1, [pc, #544]	; (800173c <start_fill+0xbd0>)
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	440b      	add	r3, r1
 8001524:	3301      	adds	r3, #1
 8001526:	f993 3000 	ldrsb.w	r3, [r3]
 800152a:	4619      	mov	r1, r3
 800152c:	4a84      	ldr	r2, [pc, #528]	; (8001740 <start_fill+0xbd4>)
 800152e:	4603      	mov	r3, r0
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4403      	add	r3, r0
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	440b      	add	r3, r1
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001540:	2b00      	cmp	r3, #0
 8001542:	d120      	bne.n	8001586 <start_fill+0xa1a>
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001544:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001548:	497c      	ldr	r1, [pc, #496]	; (800173c <start_fill+0xbd0>)
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	440b      	add	r3, r1
 8001552:	3302      	adds	r3, #2
 8001554:	f993 3000 	ldrsb.w	r3, [r3]
 8001558:	4618      	mov	r0, r3
 800155a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800155e:	4977      	ldr	r1, [pc, #476]	; (800173c <start_fill+0xbd0>)
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	440b      	add	r3, r1
 8001568:	3301      	adds	r3, #1
 800156a:	f993 3000 	ldrsb.w	r3, [r3]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	4974      	ldr	r1, [pc, #464]	; (8001744 <start_fill+0xbd8>)
 8001572:	4603      	mov	r3, r0
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4403      	add	r3, r0
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	440b      	add	r3, r1
 800157c:	4413      	add	r3, r2
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 822d 	beq.w	80019e0 <start_fill+0xe74>
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001586:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800158a:	496c      	ldr	r1, [pc, #432]	; (800173c <start_fill+0xbd0>)
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	440b      	add	r3, r1
 8001594:	3302      	adds	r3, #2
 8001596:	f993 3000 	ldrsb.w	r3, [r3]
 800159a:	4618      	mov	r0, r3
 800159c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015a0:	4966      	ldr	r1, [pc, #408]	; (800173c <start_fill+0xbd0>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	3301      	adds	r3, #1
 80015ac:	f993 3000 	ldrsb.w	r3, [r3]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4a63      	ldr	r2, [pc, #396]	; (8001740 <start_fill+0xbd4>)
 80015b4:	4603      	mov	r3, r0
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4403      	add	r3, r0
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	440b      	add	r3, r1
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d120      	bne.n	800160c <start_fill+0xaa0>
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 80015ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015ce:	495b      	ldr	r1, [pc, #364]	; (800173c <start_fill+0xbd0>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	3302      	adds	r3, #2
 80015da:	f993 3000 	ldrsb.w	r3, [r3]
 80015de:	1e5a      	subs	r2, r3, #1
 80015e0:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80015e4:	4855      	ldr	r0, [pc, #340]	; (800173c <start_fill+0xbd0>)
 80015e6:	460b      	mov	r3, r1
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	440b      	add	r3, r1
 80015ec:	4403      	add	r3, r0
 80015ee:	3301      	adds	r3, #1
 80015f0:	f993 3000 	ldrsb.w	r3, [r3]
 80015f4:	4618      	mov	r0, r3
 80015f6:	4953      	ldr	r1, [pc, #332]	; (8001744 <start_fill+0xbd8>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	440b      	add	r3, r1
 8001602:	4403      	add	r3, r0
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 81ea 	beq.w	80019e0 <start_fill+0xe74>
					((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 800160c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001610:	494a      	ldr	r1, [pc, #296]	; (800173c <start_fill+0xbd0>)
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	440b      	add	r3, r1
 800161a:	3302      	adds	r3, #2
 800161c:	f993 3000 	ldrsb.w	r3, [r3]
 8001620:	4618      	mov	r0, r3
 8001622:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001626:	4945      	ldr	r1, [pc, #276]	; (800173c <start_fill+0xbd0>)
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	440b      	add	r3, r1
 8001630:	3301      	adds	r3, #1
 8001632:	f993 3000 	ldrsb.w	r3, [r3]
 8001636:	4619      	mov	r1, r3
 8001638:	4a41      	ldr	r2, [pc, #260]	; (8001740 <start_fill+0xbd4>)
 800163a:	4603      	mov	r3, r0
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4403      	add	r3, r0
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	440b      	add	r3, r1
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	f003 0301 	and.w	r3, r3, #1
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 800164c:	2b00      	cmp	r3, #0
 800164e:	d120      	bne.n	8001692 <start_fill+0xb26>
					((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001650:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001654:	4939      	ldr	r1, [pc, #228]	; (800173c <start_fill+0xbd0>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	440b      	add	r3, r1
 800165e:	3302      	adds	r3, #2
 8001660:	f993 3000 	ldrsb.w	r3, [r3]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800166a:	4834      	ldr	r0, [pc, #208]	; (800173c <start_fill+0xbd0>)
 800166c:	460b      	mov	r3, r1
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	440b      	add	r3, r1
 8001672:	4403      	add	r3, r0
 8001674:	3301      	adds	r3, #1
 8001676:	f993 3000 	ldrsb.w	r3, [r3]
 800167a:	4618      	mov	r0, r3
 800167c:	4931      	ldr	r1, [pc, #196]	; (8001744 <start_fill+0xbd8>)
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	440b      	add	r3, r1
 8001688:	4403      	add	r3, r0
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 81a7 	beq.w	80019e0 <start_fill+0xe74>
				stack[i][1] = -1;
 8001692:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001696:	4929      	ldr	r1, [pc, #164]	; (800173c <start_fill+0xbd0>)
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	440b      	add	r3, r1
 80016a0:	3301      	adds	r3, #1
 80016a2:	22ff      	movs	r2, #255	; 0xff
 80016a4:	701a      	strb	r2, [r3, #0]
				stack[i][2] = 1;
 80016a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016aa:	4924      	ldr	r1, [pc, #144]	; (800173c <start_fill+0xbd0>)
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	3302      	adds	r3, #2
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
			while(stack[i][1] == -1){
 80016ba:	e191      	b.n	80019e0 <start_fill+0xe74>
				switch(stack[i][0]){
 80016bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016c0:	491e      	ldr	r1, [pc, #120]	; (800173c <start_fill+0xbd0>)
 80016c2:	4613      	mov	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	440b      	add	r3, r1
 80016ca:	f993 3000 	ldrsb.w	r3, [r3]
 80016ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d2:	d03b      	beq.n	800174c <start_fill+0xbe0>
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	da51      	bge.n	800177c <start_fill+0xc10>
 80016d8:	f113 0f06 	cmn.w	r3, #6
 80016dc:	d003      	beq.n	80016e6 <start_fill+0xb7a>
 80016de:	f113 0f04 	cmn.w	r3, #4
 80016e2:	d018      	beq.n	8001716 <start_fill+0xbaa>
 80016e4:	e04a      	b.n	800177c <start_fill+0xc10>
						go_straight((float)stack[i][2] * square_size, 0);
 80016e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016ea:	4914      	ldr	r1, [pc, #80]	; (800173c <start_fill+0xbd0>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	3302      	adds	r3, #2
 80016f6:	f993 3000 	ldrsb.w	r3, [r3]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff f99c 	bl	8000a38 <__aeabi_i2f>
 8001700:	4603      	mov	r3, r0
 8001702:	4911      	ldr	r1, [pc, #68]	; (8001748 <start_fill+0xbdc>)
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe fe4d 	bl	80003a4 <__aeabi_fmul>
 800170a:	4603      	mov	r3, r0
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f002 fbea 	bl	8003ee8 <go_straight>
						break;
 8001714:	e032      	b.n	800177c <start_fill+0xc10>
						go_straight(WidthOESide, 1);
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <start_fill+0xbc8>)
 8001718:	2101      	movs	r1, #1
 800171a:	4618      	mov	r0, r3
 800171c:	f002 fbe4 	bl	8003ee8 <go_straight>
						turn_right90(&direction);
 8001720:	4805      	ldr	r0, [pc, #20]	; (8001738 <start_fill+0xbcc>)
 8001722:	f002 fb21 	bl	8003d68 <turn_right90>
						go_straight(WidthOESide, 0);
 8001726:	4b03      	ldr	r3, [pc, #12]	; (8001734 <start_fill+0xbc8>)
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f002 fbdc 	bl	8003ee8 <go_straight>
						break;
 8001730:	e024      	b.n	800177c <start_fill+0xc10>
 8001732:	bf00      	nop
 8001734:	42c20000 	.word	0x42c20000
 8001738:	2000041a 	.word	0x2000041a
 800173c:	200002ec 	.word	0x200002ec
 8001740:	20000590 	.word	0x20000590
 8001744:	200005f4 	.word	0x200005f4
 8001748:	43960000 	.word	0x43960000
						go_straight(WidthOESide + dbtWheels_c, 1);
 800174c:	4bbf      	ldr	r3, [pc, #764]	; (8001a4c <start_fill+0xee0>)
 800174e:	49c0      	ldr	r1, [pc, #768]	; (8001a50 <start_fill+0xee4>)
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff f8bd 	bl	80008d0 <__addsf3>
 8001756:	4603      	mov	r3, r0
 8001758:	2101      	movs	r1, #1
 800175a:	4618      	mov	r0, r3
 800175c:	f002 fbc4 	bl	8003ee8 <go_straight>
						turn_left90(&direction);
 8001760:	48bc      	ldr	r0, [pc, #752]	; (8001a54 <start_fill+0xee8>)
 8001762:	f002 fa3d 	bl	8003be0 <turn_left90>
						go_straight(WidthOESide - dbtWheels_c, 0);
 8001766:	4bb9      	ldr	r3, [pc, #740]	; (8001a4c <start_fill+0xee0>)
 8001768:	49b9      	ldr	r1, [pc, #740]	; (8001a50 <start_fill+0xee4>)
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff f8ae 	bl	80008cc <__aeabi_fsub>
 8001770:	4603      	mov	r3, r0
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f002 fbb7 	bl	8003ee8 <go_straight>
						break;
 800177a:	bf00      	nop
				i--;
 800177c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001780:	b29b      	uxth	r3, r3
 8001782:	3b01      	subs	r3, #1
 8001784:	b29b      	uxth	r3, r3
 8001786:	82fb      	strh	r3, [r7, #22]
				if(stack[i][1] != -1 &&
 8001788:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800178c:	49b2      	ldr	r1, [pc, #712]	; (8001a58 <start_fill+0xeec>)
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	440b      	add	r3, r1
 8001796:	3301      	adds	r3, #1
 8001798:	f993 3000 	ldrsb.w	r3, [r3]
 800179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a0:	f000 811e 	beq.w	80019e0 <start_fill+0xe74>
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 80017a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017a8:	49ab      	ldr	r1, [pc, #684]	; (8001a58 <start_fill+0xeec>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	3302      	adds	r3, #2
 80017b4:	f993 3000 	ldrsb.w	r3, [r3]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017be:	49a6      	ldr	r1, [pc, #664]	; (8001a58 <start_fill+0xeec>)
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	3301      	adds	r3, #1
 80017ca:	f993 3000 	ldrsb.w	r3, [r3]
 80017ce:	4619      	mov	r1, r3
 80017d0:	4aa2      	ldr	r2, [pc, #648]	; (8001a5c <start_fill+0xef0>)
 80017d2:	4603      	mov	r3, r0
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4403      	add	r3, r0
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	440b      	add	r3, r1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	f003 0308 	and.w	r3, r3, #8
				if(stack[i][1] != -1 &&
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d120      	bne.n	800182a <start_fill+0xcbe>
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 80017e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017ec:	499a      	ldr	r1, [pc, #616]	; (8001a58 <start_fill+0xeec>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	3302      	adds	r3, #2
 80017f8:	f993 3000 	ldrsb.w	r3, [r3]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001802:	4995      	ldr	r1, [pc, #596]	; (8001a58 <start_fill+0xeec>)
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	440b      	add	r3, r1
 800180c:	3301      	adds	r3, #1
 800180e:	f993 3000 	ldrsb.w	r3, [r3]
 8001812:	1e5a      	subs	r2, r3, #1
 8001814:	4992      	ldr	r1, [pc, #584]	; (8001a60 <start_fill+0xef4>)
 8001816:	4603      	mov	r3, r0
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4403      	add	r3, r0
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	440b      	add	r3, r1
 8001820:	4413      	add	r3, r2
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80db 	beq.w	80019e0 <start_fill+0xe74>
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 800182a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800182e:	498a      	ldr	r1, [pc, #552]	; (8001a58 <start_fill+0xeec>)
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	440b      	add	r3, r1
 8001838:	3302      	adds	r3, #2
 800183a:	f993 3000 	ldrsb.w	r3, [r3]
 800183e:	4618      	mov	r0, r3
 8001840:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001844:	4984      	ldr	r1, [pc, #528]	; (8001a58 <start_fill+0xeec>)
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	440b      	add	r3, r1
 800184e:	3301      	adds	r3, #1
 8001850:	f993 3000 	ldrsb.w	r3, [r3]
 8001854:	4619      	mov	r1, r3
 8001856:	4a81      	ldr	r2, [pc, #516]	; (8001a5c <start_fill+0xef0>)
 8001858:	4603      	mov	r3, r0
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4403      	add	r3, r0
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	440b      	add	r3, r1
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	f003 0304 	and.w	r3, r3, #4
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 800186a:	2b00      	cmp	r3, #0
 800186c:	d120      	bne.n	80018b0 <start_fill+0xd44>
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 800186e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001872:	4979      	ldr	r1, [pc, #484]	; (8001a58 <start_fill+0xeec>)
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	440b      	add	r3, r1
 800187c:	3302      	adds	r3, #2
 800187e:	f993 3000 	ldrsb.w	r3, [r3]
 8001882:	4618      	mov	r0, r3
 8001884:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001888:	4973      	ldr	r1, [pc, #460]	; (8001a58 <start_fill+0xeec>)
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	440b      	add	r3, r1
 8001892:	3301      	adds	r3, #1
 8001894:	f993 3000 	ldrsb.w	r3, [r3]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	4971      	ldr	r1, [pc, #452]	; (8001a60 <start_fill+0xef4>)
 800189c:	4603      	mov	r3, r0
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4403      	add	r3, r0
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	440b      	add	r3, r1
 80018a6:	4413      	add	r3, r2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8098 	beq.w	80019e0 <start_fill+0xe74>
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 80018b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018b4:	4968      	ldr	r1, [pc, #416]	; (8001a58 <start_fill+0xeec>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	440b      	add	r3, r1
 80018be:	3302      	adds	r3, #2
 80018c0:	f993 3000 	ldrsb.w	r3, [r3]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018ca:	4963      	ldr	r1, [pc, #396]	; (8001a58 <start_fill+0xeec>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	440b      	add	r3, r1
 80018d4:	3301      	adds	r3, #1
 80018d6:	f993 3000 	ldrsb.w	r3, [r3]
 80018da:	4619      	mov	r1, r3
 80018dc:	4a5f      	ldr	r2, [pc, #380]	; (8001a5c <start_fill+0xef0>)
 80018de:	4603      	mov	r3, r0
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4403      	add	r3, r0
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d11f      	bne.n	8001934 <start_fill+0xdc8>
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 80018f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018f8:	4957      	ldr	r1, [pc, #348]	; (8001a58 <start_fill+0xeec>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	440b      	add	r3, r1
 8001902:	3302      	adds	r3, #2
 8001904:	f993 3000 	ldrsb.w	r3, [r3]
 8001908:	1e5a      	subs	r2, r3, #1
 800190a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800190e:	4852      	ldr	r0, [pc, #328]	; (8001a58 <start_fill+0xeec>)
 8001910:	460b      	mov	r3, r1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	440b      	add	r3, r1
 8001916:	4403      	add	r3, r0
 8001918:	3301      	adds	r3, #1
 800191a:	f993 3000 	ldrsb.w	r3, [r3]
 800191e:	4618      	mov	r0, r3
 8001920:	494f      	ldr	r1, [pc, #316]	; (8001a60 <start_fill+0xef4>)
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	440b      	add	r3, r1
 800192c:	4403      	add	r3, r0
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d055      	beq.n	80019e0 <start_fill+0xe74>
						((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001934:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001938:	4947      	ldr	r1, [pc, #284]	; (8001a58 <start_fill+0xeec>)
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	440b      	add	r3, r1
 8001942:	3302      	adds	r3, #2
 8001944:	f993 3000 	ldrsb.w	r3, [r3]
 8001948:	4618      	mov	r0, r3
 800194a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800194e:	4942      	ldr	r1, [pc, #264]	; (8001a58 <start_fill+0xeec>)
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	440b      	add	r3, r1
 8001958:	3301      	adds	r3, #1
 800195a:	f993 3000 	ldrsb.w	r3, [r3]
 800195e:	4619      	mov	r1, r3
 8001960:	4a3e      	ldr	r2, [pc, #248]	; (8001a5c <start_fill+0xef0>)
 8001962:	4603      	mov	r3, r0
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4403      	add	r3, r0
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	440b      	add	r3, r1
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001974:	2b00      	cmp	r3, #0
 8001976:	d11f      	bne.n	80019b8 <start_fill+0xe4c>
						((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001978:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800197c:	4936      	ldr	r1, [pc, #216]	; (8001a58 <start_fill+0xeec>)
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	440b      	add	r3, r1
 8001986:	3302      	adds	r3, #2
 8001988:	f993 3000 	ldrsb.w	r3, [r3]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001992:	4831      	ldr	r0, [pc, #196]	; (8001a58 <start_fill+0xeec>)
 8001994:	460b      	mov	r3, r1
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	440b      	add	r3, r1
 800199a:	4403      	add	r3, r0
 800199c:	3301      	adds	r3, #1
 800199e:	f993 3000 	ldrsb.w	r3, [r3]
 80019a2:	4618      	mov	r0, r3
 80019a4:	492e      	ldr	r1, [pc, #184]	; (8001a60 <start_fill+0xef4>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	440b      	add	r3, r1
 80019b0:	4403      	add	r3, r0
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d013      	beq.n	80019e0 <start_fill+0xe74>
					stack[i][1] = -1;
 80019b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019bc:	4926      	ldr	r1, [pc, #152]	; (8001a58 <start_fill+0xeec>)
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	3301      	adds	r3, #1
 80019c8:	22ff      	movs	r2, #255	; 0xff
 80019ca:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 80019cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019d0:	4921      	ldr	r1, [pc, #132]	; (8001a58 <start_fill+0xeec>)
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	440b      	add	r3, r1
 80019da:	3302      	adds	r3, #2
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
			while(stack[i][1] == -1){
 80019e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019e4:	491c      	ldr	r1, [pc, #112]	; (8001a58 <start_fill+0xeec>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	3301      	adds	r3, #1
 80019f0:	f993 3000 	ldrsb.w	r3, [r3]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f8:	f43f ae60 	beq.w	80016bc <start_fill+0xb50>
			x = stack[i][1];
 80019fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a00:	4915      	ldr	r1, [pc, #84]	; (8001a58 <start_fill+0xeec>)
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f993 2000 	ldrsb.w	r2, [r3]
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <start_fill+0xef8>)
 8001a12:	701a      	strb	r2, [r3, #0]
			y = stack[i][2];
 8001a14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a18:	490f      	ldr	r1, [pc, #60]	; (8001a58 <start_fill+0xeec>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	3302      	adds	r3, #2
 8001a24:	f993 2000 	ldrsb.w	r2, [r3]
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <start_fill+0xefc>)
 8001a2a:	701a      	strb	r2, [r3, #0]
			switch(direction){
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <start_fill+0xee8>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	f63f a8f4 	bhi.w	8000c1e <start_fill+0xb2>
 8001a36:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <start_fill+0xed0>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001a6d 	.word	0x08001a6d
 8001a40:	08001bdd 	.word	0x08001bdd
 8001a44:	08001d71 	.word	0x08001d71
 8001a48:	08001ee1 	.word	0x08001ee1
 8001a4c:	42c20000 	.word	0x42c20000
 8001a50:	42180000 	.word	0x42180000
 8001a54:	2000041a 	.word	0x2000041a
 8001a58:	200002ec 	.word	0x200002ec
 8001a5c:	20000590 	.word	0x20000590
 8001a60:	200005f4 	.word	0x200005f4
 8001a64:	20000418 	.word	0x20000418
 8001a68:	20000419 	.word	0x20000419
					if(stack[i][0] == straight){
 8001a6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a70:	49b6      	ldr	r1, [pc, #728]	; (8001d4c <start_fill+0x11e0>)
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	440b      	add	r3, r1
 8001a7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a7e:	f113 0f06 	cmn.w	r3, #6
 8001a82:	f040 808c 	bne.w	8001b9e <start_fill+0x1032>
						if((maze[y][x] & top_wall) == 0 && !visited[y - 1][x]){
 8001a86:	4bb2      	ldr	r3, [pc, #712]	; (8001d50 <start_fill+0x11e4>)
 8001a88:	f993 3000 	ldrsb.w	r3, [r3]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4bb1      	ldr	r3, [pc, #708]	; (8001d54 <start_fill+0x11e8>)
 8001a90:	f993 3000 	ldrsb.w	r3, [r3]
 8001a94:	4618      	mov	r0, r3
 8001a96:	4ab0      	ldr	r2, [pc, #704]	; (8001d58 <start_fill+0x11ec>)
 8001a98:	460b      	mov	r3, r1
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4403      	add	r3, r0
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d12b      	bne.n	8001b06 <start_fill+0xf9a>
 8001aae:	4ba8      	ldr	r3, [pc, #672]	; (8001d50 <start_fill+0x11e4>)
 8001ab0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ab4:	1e5a      	subs	r2, r3, #1
 8001ab6:	4ba7      	ldr	r3, [pc, #668]	; (8001d54 <start_fill+0x11e8>)
 8001ab8:	f993 3000 	ldrsb.w	r3, [r3]
 8001abc:	4618      	mov	r0, r3
 8001abe:	49a7      	ldr	r1, [pc, #668]	; (8001d5c <start_fill+0x11f0>)
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	440b      	add	r3, r1
 8001aca:	4403      	add	r3, r0
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	f083 0301 	eor.w	r3, r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d016      	beq.n	8001b06 <start_fill+0xf9a>
							stack[i][0] = turn_left_90;
 8001ad8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001adc:	499b      	ldr	r1, [pc, #620]	; (8001d4c <start_fill+0x11e0>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	22fc      	movs	r2, #252	; 0xfc
 8001ae8:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 8001aea:	4b9d      	ldr	r3, [pc, #628]	; (8001d60 <start_fill+0x11f4>)
 8001aec:	2101      	movs	r1, #1
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 f9fa 	bl	8003ee8 <go_straight>
							turn_right90(&direction);
 8001af4:	489b      	ldr	r0, [pc, #620]	; (8001d64 <start_fill+0x11f8>)
 8001af6:	f002 f937 	bl	8003d68 <turn_right90>
							go_straight(WidthOESide, 0);
 8001afa:	4b99      	ldr	r3, [pc, #612]	; (8001d60 <start_fill+0x11f4>)
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 f9f2 	bl	8003ee8 <go_straight>
					break;
 8001b04:	e3a3      	b.n	800224e <start_fill+0x16e2>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8001b06:	4b92      	ldr	r3, [pc, #584]	; (8001d50 <start_fill+0x11e4>)
 8001b08:	f993 3000 	ldrsb.w	r3, [r3]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4b91      	ldr	r3, [pc, #580]	; (8001d54 <start_fill+0x11e8>)
 8001b10:	f993 3000 	ldrsb.w	r3, [r3]
 8001b14:	4618      	mov	r0, r3
 8001b16:	4a90      	ldr	r2, [pc, #576]	; (8001d58 <start_fill+0x11ec>)
 8001b18:	460b      	mov	r3, r1
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	4403      	add	r3, r0
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 838f 	bne.w	800224e <start_fill+0x16e2>
 8001b30:	4b87      	ldr	r3, [pc, #540]	; (8001d50 <start_fill+0x11e4>)
 8001b32:	f993 3000 	ldrsb.w	r3, [r3]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <start_fill+0x11e8>)
 8001b3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	4986      	ldr	r1, [pc, #536]	; (8001d5c <start_fill+0x11f0>)
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	440b      	add	r3, r1
 8001b4c:	4403      	add	r3, r0
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	f083 0301 	eor.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8379 	beq.w	800224e <start_fill+0x16e2>
							stack[i][0] = turn_right_90;
 8001b5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b60:	497a      	ldr	r1, [pc, #488]	; (8001d4c <start_fill+0x11e0>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	22ff      	movs	r2, #255	; 0xff
 8001b6c:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 8001b6e:	4b7c      	ldr	r3, [pc, #496]	; (8001d60 <start_fill+0x11f4>)
 8001b70:	497d      	ldr	r1, [pc, #500]	; (8001d68 <start_fill+0x11fc>)
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe feac 	bl	80008d0 <__addsf3>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 f9b3 	bl	8003ee8 <go_straight>
							turn_left90(&direction);
 8001b82:	4878      	ldr	r0, [pc, #480]	; (8001d64 <start_fill+0x11f8>)
 8001b84:	f002 f82c 	bl	8003be0 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 8001b88:	4b75      	ldr	r3, [pc, #468]	; (8001d60 <start_fill+0x11f4>)
 8001b8a:	4977      	ldr	r1, [pc, #476]	; (8001d68 <start_fill+0x11fc>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fe9d 	bl	80008cc <__aeabi_fsub>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 f9a6 	bl	8003ee8 <go_straight>
					break;
 8001b9c:	e357      	b.n	800224e <start_fill+0x16e2>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001b9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ba2:	496a      	ldr	r1, [pc, #424]	; (8001d4c <start_fill+0x11e0>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb0:	f113 0f04 	cmn.w	r3, #4
 8001bb4:	d102      	bne.n	8001bbc <start_fill+0x1050>
 8001bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bba:	e001      	b.n	8001bc0 <start_fill+0x1054>
 8001bbc:	f06f 0003 	mvn.w	r0, #3
 8001bc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001bc4:	4961      	ldr	r1, [pc, #388]	; (8001d4c <start_fill+0x11e0>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	4602      	mov	r2, r0
 8001bd0:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4865      	ldr	r0, [pc, #404]	; (8001d6c <start_fill+0x1200>)
 8001bd6:	f002 f987 	bl	8003ee8 <go_straight>
					break;
 8001bda:	e338      	b.n	800224e <start_fill+0x16e2>
					if(stack[i][0] == straight){
 8001bdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001be0:	495a      	ldr	r1, [pc, #360]	; (8001d4c <start_fill+0x11e0>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	f993 3000 	ldrsb.w	r3, [r3]
 8001bee:	f113 0f06 	cmn.w	r3, #6
 8001bf2:	f040 808c 	bne.w	8001d0e <start_fill+0x11a2>
						if(((maze[y][x] & top_wall) == 0) && !visited[y - 1][x]){
 8001bf6:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <start_fill+0x11e4>)
 8001bf8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4b55      	ldr	r3, [pc, #340]	; (8001d54 <start_fill+0x11e8>)
 8001c00:	f993 3000 	ldrsb.w	r3, [r3]
 8001c04:	4618      	mov	r0, r3
 8001c06:	4a54      	ldr	r2, [pc, #336]	; (8001d58 <start_fill+0x11ec>)
 8001c08:	460b      	mov	r3, r1
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	4403      	add	r3, r0
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d135      	bne.n	8001c8a <start_fill+0x111e>
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <start_fill+0x11e4>)
 8001c20:	f993 3000 	ldrsb.w	r3, [r3]
 8001c24:	1e5a      	subs	r2, r3, #1
 8001c26:	4b4b      	ldr	r3, [pc, #300]	; (8001d54 <start_fill+0x11e8>)
 8001c28:	f993 3000 	ldrsb.w	r3, [r3]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	494b      	ldr	r1, [pc, #300]	; (8001d5c <start_fill+0x11f0>)
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	440b      	add	r3, r1
 8001c3a:	4403      	add	r3, r0
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	f083 0301 	eor.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <start_fill+0x111e>
							stack[i][0] = turn_right_90;
 8001c48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c4c:	493f      	ldr	r1, [pc, #252]	; (8001d4c <start_fill+0x11e0>)
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	22ff      	movs	r2, #255	; 0xff
 8001c58:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 8001c5a:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <start_fill+0x11f4>)
 8001c5c:	4942      	ldr	r1, [pc, #264]	; (8001d68 <start_fill+0x11fc>)
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fe36 	bl	80008d0 <__addsf3>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2101      	movs	r1, #1
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f002 f93d 	bl	8003ee8 <go_straight>
							turn_left90(&direction);
 8001c6e:	483d      	ldr	r0, [pc, #244]	; (8001d64 <start_fill+0x11f8>)
 8001c70:	f001 ffb6 	bl	8003be0 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 8001c74:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <start_fill+0x11f4>)
 8001c76:	493c      	ldr	r1, [pc, #240]	; (8001d68 <start_fill+0x11fc>)
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fe27 	bl	80008cc <__aeabi_fsub>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 f930 	bl	8003ee8 <go_straight>
					break;
 8001c88:	e2e4      	b.n	8002254 <start_fill+0x16e8>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <start_fill+0x11e4>)
 8001c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c90:	4619      	mov	r1, r3
 8001c92:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <start_fill+0x11e8>)
 8001c94:	f993 3000 	ldrsb.w	r3, [r3]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <start_fill+0x11ec>)
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4403      	add	r3, r0
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 82d0 	bne.w	8002254 <start_fill+0x16e8>
 8001cb4:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <start_fill+0x11e4>)
 8001cb6:	f993 3000 	ldrsb.w	r3, [r3]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <start_fill+0x11e8>)
 8001cbe:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	4925      	ldr	r1, [pc, #148]	; (8001d5c <start_fill+0x11f0>)
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	440b      	add	r3, r1
 8001cd0:	4403      	add	r3, r0
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	f083 0301 	eor.w	r3, r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 82ba 	beq.w	8002254 <start_fill+0x16e8>
							stack[i][0] = turn_left_90;
 8001ce0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ce4:	4919      	ldr	r1, [pc, #100]	; (8001d4c <start_fill+0x11e0>)
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	22fc      	movs	r2, #252	; 0xfc
 8001cf0:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <start_fill+0x11f4>)
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f002 f8f6 	bl	8003ee8 <go_straight>
							turn_right90(&direction);
 8001cfc:	4819      	ldr	r0, [pc, #100]	; (8001d64 <start_fill+0x11f8>)
 8001cfe:	f002 f833 	bl	8003d68 <turn_right90>
							go_straight(WidthOESide, 0);
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <start_fill+0x11f4>)
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 f8ee 	bl	8003ee8 <go_straight>
					break;
 8001d0c:	e2a2      	b.n	8002254 <start_fill+0x16e8>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001d0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d12:	490e      	ldr	r1, [pc, #56]	; (8001d4c <start_fill+0x11e0>)
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d20:	f113 0f04 	cmn.w	r3, #4
 8001d24:	d102      	bne.n	8001d2c <start_fill+0x11c0>
 8001d26:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2a:	e001      	b.n	8001d30 <start_fill+0x11c4>
 8001d2c:	f06f 0003 	mvn.w	r0, #3
 8001d30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d34:	4905      	ldr	r1, [pc, #20]	; (8001d4c <start_fill+0x11e0>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	4602      	mov	r2, r0
 8001d40:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8001d42:	2100      	movs	r1, #0
 8001d44:	4809      	ldr	r0, [pc, #36]	; (8001d6c <start_fill+0x1200>)
 8001d46:	f002 f8cf 	bl	8003ee8 <go_straight>
					break;
 8001d4a:	e283      	b.n	8002254 <start_fill+0x16e8>
 8001d4c:	200002ec 	.word	0x200002ec
 8001d50:	20000419 	.word	0x20000419
 8001d54:	20000418 	.word	0x20000418
 8001d58:	20000590 	.word	0x20000590
 8001d5c:	200005f4 	.word	0x200005f4
 8001d60:	42c20000 	.word	0x42c20000
 8001d64:	2000041a 	.word	0x2000041a
 8001d68:	42180000 	.word	0x42180000
 8001d6c:	43960000 	.word	0x43960000
					if(stack[i][0] == straight){
 8001d70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d74:	49a7      	ldr	r1, [pc, #668]	; (8002014 <start_fill+0x14a8>)
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d82:	f113 0f06 	cmn.w	r3, #6
 8001d86:	f040 808c 	bne.w	8001ea2 <start_fill+0x1336>
						if((maze[y][x] & left_wall) == 0 && !visited[y][x - 1]){
 8001d8a:	4ba3      	ldr	r3, [pc, #652]	; (8002018 <start_fill+0x14ac>)
 8001d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d90:	4619      	mov	r1, r3
 8001d92:	4ba2      	ldr	r3, [pc, #648]	; (800201c <start_fill+0x14b0>)
 8001d94:	f993 3000 	ldrsb.w	r3, [r3]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	4aa1      	ldr	r2, [pc, #644]	; (8002020 <start_fill+0x14b4>)
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	4403      	add	r3, r0
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d135      	bne.n	8001e1e <start_fill+0x12b2>
 8001db2:	4b99      	ldr	r3, [pc, #612]	; (8002018 <start_fill+0x14ac>)
 8001db4:	f993 3000 	ldrsb.w	r3, [r3]
 8001db8:	4618      	mov	r0, r3
 8001dba:	4b98      	ldr	r3, [pc, #608]	; (800201c <start_fill+0x14b0>)
 8001dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8001dc0:	1e5a      	subs	r2, r3, #1
 8001dc2:	4998      	ldr	r1, [pc, #608]	; (8002024 <start_fill+0x14b8>)
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4403      	add	r3, r0
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	440b      	add	r3, r1
 8001dce:	4413      	add	r3, r2
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	f083 0301 	eor.w	r3, r3, #1
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <start_fill+0x12b2>
							stack[i][0] = turn_right_90;
 8001ddc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001de0:	498c      	ldr	r1, [pc, #560]	; (8002014 <start_fill+0x14a8>)
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	440b      	add	r3, r1
 8001dea:	22ff      	movs	r2, #255	; 0xff
 8001dec:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 8001dee:	4b8e      	ldr	r3, [pc, #568]	; (8002028 <start_fill+0x14bc>)
 8001df0:	498e      	ldr	r1, [pc, #568]	; (800202c <start_fill+0x14c0>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fd6c 	bl	80008d0 <__addsf3>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f002 f873 	bl	8003ee8 <go_straight>
							turn_left90(&direction);
 8001e02:	488b      	ldr	r0, [pc, #556]	; (8002030 <start_fill+0x14c4>)
 8001e04:	f001 feec 	bl	8003be0 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 8001e08:	4b87      	ldr	r3, [pc, #540]	; (8002028 <start_fill+0x14bc>)
 8001e0a:	4988      	ldr	r1, [pc, #544]	; (800202c <start_fill+0x14c0>)
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fd5d 	bl	80008cc <__aeabi_fsub>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 f866 	bl	8003ee8 <go_straight>
					break;
 8001e1c:	e21d      	b.n	800225a <start_fill+0x16ee>
						} else if((maze[y][x] & right_wall) == 0 && !visited[y][x + 1]) {
 8001e1e:	4b7e      	ldr	r3, [pc, #504]	; (8002018 <start_fill+0x14ac>)
 8001e20:	f993 3000 	ldrsb.w	r3, [r3]
 8001e24:	4619      	mov	r1, r3
 8001e26:	4b7d      	ldr	r3, [pc, #500]	; (800201c <start_fill+0x14b0>)
 8001e28:	f993 3000 	ldrsb.w	r3, [r3]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	4a7c      	ldr	r2, [pc, #496]	; (8002020 <start_fill+0x14b4>)
 8001e30:	460b      	mov	r3, r1
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	4403      	add	r3, r0
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 8209 	bne.w	800225a <start_fill+0x16ee>
 8001e48:	4b73      	ldr	r3, [pc, #460]	; (8002018 <start_fill+0x14ac>)
 8001e4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	4b72      	ldr	r3, [pc, #456]	; (800201c <start_fill+0x14b0>)
 8001e52:	f993 3000 	ldrsb.w	r3, [r3]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	4972      	ldr	r1, [pc, #456]	; (8002024 <start_fill+0x14b8>)
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4403      	add	r3, r0
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	440b      	add	r3, r1
 8001e64:	4413      	add	r3, r2
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	f083 0301 	eor.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 81f3 	beq.w	800225a <start_fill+0x16ee>
							stack[i][0] = turn_left_90;
 8001e74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e78:	4966      	ldr	r1, [pc, #408]	; (8002014 <start_fill+0x14a8>)
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	22fc      	movs	r2, #252	; 0xfc
 8001e84:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 8001e86:	4b68      	ldr	r3, [pc, #416]	; (8002028 <start_fill+0x14bc>)
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f002 f82c 	bl	8003ee8 <go_straight>
							turn_right90(&direction);
 8001e90:	4867      	ldr	r0, [pc, #412]	; (8002030 <start_fill+0x14c4>)
 8001e92:	f001 ff69 	bl	8003d68 <turn_right90>
							go_straight(WidthOESide, 0);
 8001e96:	4b64      	ldr	r3, [pc, #400]	; (8002028 <start_fill+0x14bc>)
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 f824 	bl	8003ee8 <go_straight>
					break;
 8001ea0:	e1db      	b.n	800225a <start_fill+0x16ee>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001ea2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ea6:	495b      	ldr	r1, [pc, #364]	; (8002014 <start_fill+0x14a8>)
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f993 3000 	ldrsb.w	r3, [r3]
 8001eb4:	f113 0f04 	cmn.w	r3, #4
 8001eb8:	d102      	bne.n	8001ec0 <start_fill+0x1354>
 8001eba:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebe:	e001      	b.n	8001ec4 <start_fill+0x1358>
 8001ec0:	f06f 0003 	mvn.w	r0, #3
 8001ec4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ec8:	4952      	ldr	r1, [pc, #328]	; (8002014 <start_fill+0x14a8>)
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4856      	ldr	r0, [pc, #344]	; (8002034 <start_fill+0x14c8>)
 8001eda:	f002 f805 	bl	8003ee8 <go_straight>
					break;
 8001ede:	e1bc      	b.n	800225a <start_fill+0x16ee>
					if(stack[i][0] == straight){
 8001ee0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ee4:	494b      	ldr	r1, [pc, #300]	; (8002014 <start_fill+0x14a8>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	440b      	add	r3, r1
 8001eee:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef2:	f113 0f06 	cmn.w	r3, #6
 8001ef6:	f040 809f 	bne.w	8002038 <start_fill+0x14cc>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <start_fill+0x14ac>)
 8001efc:	f993 3000 	ldrsb.w	r3, [r3]
 8001f00:	4619      	mov	r1, r3
 8001f02:	4b46      	ldr	r3, [pc, #280]	; (800201c <start_fill+0x14b0>)
 8001f04:	f993 3000 	ldrsb.w	r3, [r3]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	4a45      	ldr	r2, [pc, #276]	; (8002020 <start_fill+0x14b4>)
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	4403      	add	r3, r0
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d12b      	bne.n	8001f7a <start_fill+0x140e>
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <start_fill+0x14ac>)
 8001f24:	f993 3000 	ldrsb.w	r3, [r3]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	; (800201c <start_fill+0x14b0>)
 8001f2c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f30:	1e5a      	subs	r2, r3, #1
 8001f32:	493c      	ldr	r1, [pc, #240]	; (8002024 <start_fill+0x14b8>)
 8001f34:	4603      	mov	r3, r0
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4403      	add	r3, r0
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	440b      	add	r3, r1
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	f083 0301 	eor.w	r3, r3, #1
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d016      	beq.n	8001f7a <start_fill+0x140e>
							stack[i][0] = turn_left_90;
 8001f4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001f50:	4930      	ldr	r1, [pc, #192]	; (8002014 <start_fill+0x14a8>)
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	440b      	add	r3, r1
 8001f5a:	22fc      	movs	r2, #252	; 0xfc
 8001f5c:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 8001f5e:	4b32      	ldr	r3, [pc, #200]	; (8002028 <start_fill+0x14bc>)
 8001f60:	2101      	movs	r1, #1
 8001f62:	4618      	mov	r0, r3
 8001f64:	f001 ffc0 	bl	8003ee8 <go_straight>
							turn_right90(&direction);
 8001f68:	4831      	ldr	r0, [pc, #196]	; (8002030 <start_fill+0x14c4>)
 8001f6a:	f001 fefd 	bl	8003d68 <turn_right90>
							go_straight(WidthOESide, 0);
 8001f6e:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <start_fill+0x14bc>)
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 ffb8 	bl	8003ee8 <go_straight>
 8001f78:	e165      	b.n	8002246 <start_fill+0x16da>
						} else if(((maze[y][x] & right_wall) == 0) && !visited[y][x + 1]){
 8001f7a:	4b27      	ldr	r3, [pc, #156]	; (8002018 <start_fill+0x14ac>)
 8001f7c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f80:	4619      	mov	r1, r3
 8001f82:	4b26      	ldr	r3, [pc, #152]	; (800201c <start_fill+0x14b0>)
 8001f84:	f993 3000 	ldrsb.w	r3, [r3]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	4a25      	ldr	r2, [pc, #148]	; (8002020 <start_fill+0x14b4>)
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	4403      	add	r3, r0
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 815e 	bne.w	8002260 <start_fill+0x16f4>
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <start_fill+0x14ac>)
 8001fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8001faa:	4618      	mov	r0, r3
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <start_fill+0x14b0>)
 8001fae:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	491b      	ldr	r1, [pc, #108]	; (8002024 <start_fill+0x14b8>)
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4403      	add	r3, r0
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	440b      	add	r3, r1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	f083 0301 	eor.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8148 	beq.w	8002260 <start_fill+0x16f4>
							stack[i][0] = turn_right_90;
 8001fd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001fd4:	490f      	ldr	r1, [pc, #60]	; (8002014 <start_fill+0x14a8>)
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	22ff      	movs	r2, #255	; 0xff
 8001fe0:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <start_fill+0x14bc>)
 8001fe4:	4911      	ldr	r1, [pc, #68]	; (800202c <start_fill+0x14c0>)
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fc72 	bl	80008d0 <__addsf3>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f001 ff79 	bl	8003ee8 <go_straight>
							turn_left90(&direction);
 8001ff6:	480e      	ldr	r0, [pc, #56]	; (8002030 <start_fill+0x14c4>)
 8001ff8:	f001 fdf2 	bl	8003be0 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <start_fill+0x14bc>)
 8001ffe:	490b      	ldr	r1, [pc, #44]	; (800202c <start_fill+0x14c0>)
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fc63 	bl	80008cc <__aeabi_fsub>
 8002006:	4603      	mov	r3, r0
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f001 ff6c 	bl	8003ee8 <go_straight>
					break;
 8002010:	e126      	b.n	8002260 <start_fill+0x16f4>
 8002012:	bf00      	nop
 8002014:	200002ec 	.word	0x200002ec
 8002018:	20000419 	.word	0x20000419
 800201c:	20000418 	.word	0x20000418
 8002020:	20000590 	.word	0x20000590
 8002024:	200005f4 	.word	0x200005f4
 8002028:	42c20000 	.word	0x42c20000
 800202c:	42180000 	.word	0x42180000
 8002030:	2000041a 	.word	0x2000041a
 8002034:	43960000 	.word	0x43960000
					} else if(stack[i][0] == turn_left_90){
 8002038:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800203c:	498b      	ldr	r1, [pc, #556]	; (800226c <start_fill+0x1700>)
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	440b      	add	r3, r1
 8002046:	f993 3000 	ldrsb.w	r3, [r3]
 800204a:	f113 0f04 	cmn.w	r3, #4
 800204e:	f040 8083 	bne.w	8002158 <start_fill+0x15ec>
						if(((maze[y][x] & right_wall) == 0) && !visited[y][x + 1]){
 8002052:	4b87      	ldr	r3, [pc, #540]	; (8002270 <start_fill+0x1704>)
 8002054:	f993 3000 	ldrsb.w	r3, [r3]
 8002058:	4619      	mov	r1, r3
 800205a:	4b86      	ldr	r3, [pc, #536]	; (8002274 <start_fill+0x1708>)
 800205c:	f993 3000 	ldrsb.w	r3, [r3]
 8002060:	4618      	mov	r0, r3
 8002062:	4a85      	ldr	r2, [pc, #532]	; (8002278 <start_fill+0x170c>)
 8002064:	460b      	mov	r3, r1
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	4403      	add	r3, r0
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d135      	bne.n	80020e6 <start_fill+0x157a>
 800207a:	4b7d      	ldr	r3, [pc, #500]	; (8002270 <start_fill+0x1704>)
 800207c:	f993 3000 	ldrsb.w	r3, [r3]
 8002080:	4618      	mov	r0, r3
 8002082:	4b7c      	ldr	r3, [pc, #496]	; (8002274 <start_fill+0x1708>)
 8002084:	f993 3000 	ldrsb.w	r3, [r3]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	497c      	ldr	r1, [pc, #496]	; (800227c <start_fill+0x1710>)
 800208c:	4603      	mov	r3, r0
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4403      	add	r3, r0
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	440b      	add	r3, r1
 8002096:	4413      	add	r3, r2
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	f083 0301 	eor.w	r3, r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d020      	beq.n	80020e6 <start_fill+0x157a>
							stack[i][0] = straight;
 80020a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80020a8:	4970      	ldr	r1, [pc, #448]	; (800226c <start_fill+0x1700>)
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	440b      	add	r3, r1
 80020b2:	22fa      	movs	r2, #250	; 0xfa
 80020b4:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 80020b6:	4b72      	ldr	r3, [pc, #456]	; (8002280 <start_fill+0x1714>)
 80020b8:	4972      	ldr	r1, [pc, #456]	; (8002284 <start_fill+0x1718>)
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fc08 	bl	80008d0 <__addsf3>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2101      	movs	r1, #1
 80020c4:	4618      	mov	r0, r3
 80020c6:	f001 ff0f 	bl	8003ee8 <go_straight>
							turn_left90(&direction);
 80020ca:	486f      	ldr	r0, [pc, #444]	; (8002288 <start_fill+0x171c>)
 80020cc:	f001 fd88 	bl	8003be0 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 80020d0:	4b6b      	ldr	r3, [pc, #428]	; (8002280 <start_fill+0x1714>)
 80020d2:	496c      	ldr	r1, [pc, #432]	; (8002284 <start_fill+0x1718>)
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fbf9 	bl	80008cc <__aeabi_fsub>
 80020da:	4603      	mov	r3, r0
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f001 ff02 	bl	8003ee8 <go_straight>
 80020e4:	e0af      	b.n	8002246 <start_fill+0x16da>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 80020e6:	4b62      	ldr	r3, [pc, #392]	; (8002270 <start_fill+0x1704>)
 80020e8:	f993 3000 	ldrsb.w	r3, [r3]
 80020ec:	4619      	mov	r1, r3
 80020ee:	4b61      	ldr	r3, [pc, #388]	; (8002274 <start_fill+0x1708>)
 80020f0:	f993 3000 	ldrsb.w	r3, [r3]
 80020f4:	4618      	mov	r0, r3
 80020f6:	4a60      	ldr	r2, [pc, #384]	; (8002278 <start_fill+0x170c>)
 80020f8:	460b      	mov	r3, r1
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	4403      	add	r3, r0
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 80a8 	bne.w	8002260 <start_fill+0x16f4>
 8002110:	4b57      	ldr	r3, [pc, #348]	; (8002270 <start_fill+0x1704>)
 8002112:	f993 3000 	ldrsb.w	r3, [r3]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	4b56      	ldr	r3, [pc, #344]	; (8002274 <start_fill+0x1708>)
 800211a:	f993 3000 	ldrsb.w	r3, [r3]
 800211e:	4618      	mov	r0, r3
 8002120:	4956      	ldr	r1, [pc, #344]	; (800227c <start_fill+0x1710>)
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	440b      	add	r3, r1
 800212c:	4403      	add	r3, r0
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	f083 0301 	eor.w	r3, r3, #1
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8092 	beq.w	8002260 <start_fill+0x16f4>
							stack[i][0] = turn_right_90;
 800213c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002140:	494a      	ldr	r1, [pc, #296]	; (800226c <start_fill+0x1700>)
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	440b      	add	r3, r1
 800214a:	22ff      	movs	r2, #255	; 0xff
 800214c:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 800214e:	2100      	movs	r1, #0
 8002150:	484e      	ldr	r0, [pc, #312]	; (800228c <start_fill+0x1720>)
 8002152:	f001 fec9 	bl	8003ee8 <go_straight>
					break;
 8002156:	e083      	b.n	8002260 <start_fill+0x16f4>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 8002158:	4b45      	ldr	r3, [pc, #276]	; (8002270 <start_fill+0x1704>)
 800215a:	f993 3000 	ldrsb.w	r3, [r3]
 800215e:	4619      	mov	r1, r3
 8002160:	4b44      	ldr	r3, [pc, #272]	; (8002274 <start_fill+0x1708>)
 8002162:	f993 3000 	ldrsb.w	r3, [r3]
 8002166:	4618      	mov	r0, r3
 8002168:	4a43      	ldr	r2, [pc, #268]	; (8002278 <start_fill+0x170c>)
 800216a:	460b      	mov	r3, r1
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	4403      	add	r3, r0
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d12b      	bne.n	80021d8 <start_fill+0x166c>
 8002180:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <start_fill+0x1704>)
 8002182:	f993 3000 	ldrsb.w	r3, [r3]
 8002186:	4618      	mov	r0, r3
 8002188:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <start_fill+0x1708>)
 800218a:	f993 3000 	ldrsb.w	r3, [r3]
 800218e:	1e5a      	subs	r2, r3, #1
 8002190:	493a      	ldr	r1, [pc, #232]	; (800227c <start_fill+0x1710>)
 8002192:	4603      	mov	r3, r0
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4403      	add	r3, r0
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	440b      	add	r3, r1
 800219c:	4413      	add	r3, r2
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	f083 0301 	eor.w	r3, r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d016      	beq.n	80021d8 <start_fill+0x166c>
							stack[i][0] = straight;
 80021aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80021ae:	492f      	ldr	r1, [pc, #188]	; (800226c <start_fill+0x1700>)
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	22fa      	movs	r2, #250	; 0xfa
 80021ba:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 80021bc:	4b30      	ldr	r3, [pc, #192]	; (8002280 <start_fill+0x1714>)
 80021be:	2101      	movs	r1, #1
 80021c0:	4618      	mov	r0, r3
 80021c2:	f001 fe91 	bl	8003ee8 <go_straight>
							turn_right90(&direction);
 80021c6:	4830      	ldr	r0, [pc, #192]	; (8002288 <start_fill+0x171c>)
 80021c8:	f001 fdce 	bl	8003d68 <turn_right90>
							go_straight(WidthOESide, 0);
 80021cc:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <start_fill+0x1714>)
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f001 fe89 	bl	8003ee8 <go_straight>
 80021d6:	e036      	b.n	8002246 <start_fill+0x16da>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <start_fill+0x1704>)
 80021da:	f993 3000 	ldrsb.w	r3, [r3]
 80021de:	4619      	mov	r1, r3
 80021e0:	4b24      	ldr	r3, [pc, #144]	; (8002274 <start_fill+0x1708>)
 80021e2:	f993 3000 	ldrsb.w	r3, [r3]
 80021e6:	4618      	mov	r0, r3
 80021e8:	4a23      	ldr	r2, [pc, #140]	; (8002278 <start_fill+0x170c>)
 80021ea:	460b      	mov	r3, r1
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	4403      	add	r3, r0
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d12f      	bne.n	8002260 <start_fill+0x16f4>
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <start_fill+0x1704>)
 8002202:	f993 3000 	ldrsb.w	r3, [r3]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <start_fill+0x1708>)
 800220a:	f993 3000 	ldrsb.w	r3, [r3]
 800220e:	4618      	mov	r0, r3
 8002210:	491a      	ldr	r1, [pc, #104]	; (800227c <start_fill+0x1710>)
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	440b      	add	r3, r1
 800221c:	4403      	add	r3, r0
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	f083 0301 	eor.w	r3, r3, #1
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d01a      	beq.n	8002260 <start_fill+0x16f4>
							stack[i][0] = turn_left_90;
 800222a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800222e:	490f      	ldr	r1, [pc, #60]	; (800226c <start_fill+0x1700>)
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	440b      	add	r3, r1
 8002238:	22fc      	movs	r2, #252	; 0xfc
 800223a:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 800223c:	2100      	movs	r1, #0
 800223e:	4813      	ldr	r0, [pc, #76]	; (800228c <start_fill+0x1720>)
 8002240:	f001 fe52 	bl	8003ee8 <go_straight>
					break;
 8002244:	e00c      	b.n	8002260 <start_fill+0x16f4>
 8002246:	e00b      	b.n	8002260 <start_fill+0x16f4>
			if(frontfree){
 8002248:	bf00      	nop
 800224a:	f7fe bce8 	b.w	8000c1e <start_fill+0xb2>
					break;
 800224e:	bf00      	nop
 8002250:	f7fe bce5 	b.w	8000c1e <start_fill+0xb2>
					break;
 8002254:	bf00      	nop
 8002256:	f7fe bce2 	b.w	8000c1e <start_fill+0xb2>
					break;
 800225a:	bf00      	nop
 800225c:	f7fe bcdf 	b.w	8000c1e <start_fill+0xb2>
					break;
 8002260:	bf00      	nop
		vl53l0x_GetRanging_now(rightSensor0, &frontValue);
 8002262:	f7fe bcdc 	b.w	8000c1e <start_fill+0xb2>
		for(int m = 0; m < grid_size; m++){
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	e0b0      	b.n	80023ce <start_fill+0x1862>
 800226c:	200002ec 	.word	0x200002ec
 8002270:	20000419 	.word	0x20000419
 8002274:	20000418 	.word	0x20000418
 8002278:	20000590 	.word	0x20000590
 800227c:	200005f4 	.word	0x200005f4
 8002280:	42c20000 	.word	0x42c20000
 8002284:	42180000 	.word	0x42180000
 8002288:	2000041a 	.word	0x2000041a
 800228c:	43960000 	.word	0x43960000
			if(!visited[n][m]){
 8002290:	4957      	ldr	r1, [pc, #348]	; (80023f0 <start_fill+0x1884>)
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	18ca      	adds	r2, r1, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	4413      	add	r3, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	f083 0301 	eor.w	r3, r3, #1
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 808c 	beq.w	80023c8 <start_fill+0x185c>
				maze[n][m] |= 15;
 80022b0:	4950      	ldr	r1, [pc, #320]	; (80023f4 <start_fill+0x1888>)
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	18ca      	adds	r2, r1, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	4413      	add	r3, r2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	f043 030f 	orr.w	r3, r3, #15
 80022c8:	b2d8      	uxtb	r0, r3
 80022ca:	494a      	ldr	r1, [pc, #296]	; (80023f4 <start_fill+0x1888>)
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	18ca      	adds	r2, r1, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4413      	add	r3, r2
 80022dc:	4602      	mov	r2, r0
 80022de:	701a      	strb	r2, [r3, #0]
				if(n > 0){ maze[n - 1][m] |= bottom_wall; }
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	dd19      	ble.n	800231a <start_fill+0x17ae>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1e5a      	subs	r2, r3, #1
 80022ea:	4942      	ldr	r1, [pc, #264]	; (80023f4 <start_fill+0x1888>)
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	18ca      	adds	r2, r1, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	4413      	add	r3, r2
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	3a01      	subs	r2, #1
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	b2d8      	uxtb	r0, r3
 8002306:	493b      	ldr	r1, [pc, #236]	; (80023f4 <start_fill+0x1888>)
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	18ca      	adds	r2, r1, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4413      	add	r3, r2
 8002316:	4602      	mov	r2, r0
 8002318:	701a      	strb	r2, [r3, #0]
				if(n + 1 < grid_size){ maze[n + 1][m] |= top_wall; }
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b08      	cmp	r3, #8
 800231e:	dc19      	bgt.n	8002354 <start_fill+0x17e8>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	4933      	ldr	r1, [pc, #204]	; (80023f4 <start_fill+0x1888>)
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	18ca      	adds	r2, r1, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4413      	add	r3, r2
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	3201      	adds	r2, #1
 800233a:	f043 0302 	orr.w	r3, r3, #2
 800233e:	b2d8      	uxtb	r0, r3
 8002340:	492c      	ldr	r1, [pc, #176]	; (80023f4 <start_fill+0x1888>)
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	18ca      	adds	r2, r1, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4413      	add	r3, r2
 8002350:	4602      	mov	r2, r0
 8002352:	701a      	strb	r2, [r3, #0]
				if(m > 0){ maze[n][m - 1] |= right_wall; }
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	dd19      	ble.n	800238e <start_fill+0x1822>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1e59      	subs	r1, r3, #1
 800235e:	4825      	ldr	r0, [pc, #148]	; (80023f4 <start_fill+0x1888>)
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4403      	add	r3, r0
 800236c:	440b      	add	r3, r1
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	1e51      	subs	r1, r2, #1
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	b2dc      	uxtb	r4, r3
 800237a:	481e      	ldr	r0, [pc, #120]	; (80023f4 <start_fill+0x1888>)
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4403      	add	r3, r0
 8002388:	440b      	add	r3, r1
 800238a:	4622      	mov	r2, r4
 800238c:	701a      	strb	r2, [r3, #0]
				if(m + 1 < grid_size){ maze[n][m + 1] |= left_wall; }
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b08      	cmp	r3, #8
 8002392:	dc19      	bgt.n	80023c8 <start_fill+0x185c>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	1c59      	adds	r1, r3, #1
 8002398:	4816      	ldr	r0, [pc, #88]	; (80023f4 <start_fill+0x1888>)
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4403      	add	r3, r0
 80023a6:	440b      	add	r3, r1
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	1c51      	adds	r1, r2, #1
 80023ae:	f043 0308 	orr.w	r3, r3, #8
 80023b2:	b2dc      	uxtb	r4, r3
 80023b4:	480f      	ldr	r0, [pc, #60]	; (80023f4 <start_fill+0x1888>)
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4403      	add	r3, r0
 80023c2:	440b      	add	r3, r1
 80023c4:	4622      	mov	r2, r4
 80023c6:	701a      	strb	r2, [r3, #0]
		for(int m = 0; m < grid_size; m++){
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	3301      	adds	r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b09      	cmp	r3, #9
 80023d2:	f77f af5d 	ble.w	8002290 <start_fill+0x1724>
	for(int n = 0; n < grid_size; n++){
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3301      	adds	r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b09      	cmp	r3, #9
 80023e0:	f77f af41 	ble.w	8002266 <start_fill+0x16fa>
			}
		}
	}
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd90      	pop	{r4, r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200005f4 	.word	0x200005f4
 80023f4:	20000590 	.word	0x20000590

080023f8 <found>:
void found(int16_t index){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	80fb      	strh	r3, [r7, #6]
	switch(direction){
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <found+0x94>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d036      	beq.n	8002478 <found+0x80>
 800240a:	2b02      	cmp	r3, #2
 800240c:	dc39      	bgt.n	8002482 <found+0x8a>
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <found+0x20>
 8002412:	2b01      	cmp	r3, #1
 8002414:	d013      	beq.n	800243e <found+0x46>
			break;
		case north:
			go_straight(square_size * 2, 1);
			break;
	}
}
 8002416:	e034      	b.n	8002482 <found+0x8a>
			go_straight(WidthOESide, 1);
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <found+0x98>)
 800241a:	2101      	movs	r1, #1
 800241c:	4618      	mov	r0, r3
 800241e:	f001 fd63 	bl	8003ee8 <go_straight>
			turn_right90(&direction);
 8002422:	481a      	ldr	r0, [pc, #104]	; (800248c <found+0x94>)
 8002424:	f001 fca0 	bl	8003d68 <turn_right90>
			go_straight(WidthOESide + square_size, 1);
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <found+0x98>)
 800242a:	491a      	ldr	r1, [pc, #104]	; (8002494 <found+0x9c>)
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fa4f 	bl	80008d0 <__addsf3>
 8002432:	4603      	mov	r3, r0
 8002434:	2101      	movs	r1, #1
 8002436:	4618      	mov	r0, r3
 8002438:	f001 fd56 	bl	8003ee8 <go_straight>
			break;
 800243c:	e021      	b.n	8002482 <found+0x8a>
			go_straight(WidthOESide + dbtWheels_c, 1);
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <found+0x98>)
 8002440:	4915      	ldr	r1, [pc, #84]	; (8002498 <found+0xa0>)
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fa44 	bl	80008d0 <__addsf3>
 8002448:	4603      	mov	r3, r0
 800244a:	2101      	movs	r1, #1
 800244c:	4618      	mov	r0, r3
 800244e:	f001 fd4b 	bl	8003ee8 <go_straight>
			turn_left90(&direction);
 8002452:	480e      	ldr	r0, [pc, #56]	; (800248c <found+0x94>)
 8002454:	f001 fbc4 	bl	8003be0 <turn_left90>
			go_straight(WidthOESide + square_size - dbtWheels_c, 1);
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <found+0x98>)
 800245a:	490e      	ldr	r1, [pc, #56]	; (8002494 <found+0x9c>)
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe fa37 	bl	80008d0 <__addsf3>
 8002462:	4603      	mov	r3, r0
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <found+0xa0>)
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fa30 	bl	80008cc <__aeabi_fsub>
 800246c:	4603      	mov	r3, r0
 800246e:	2101      	movs	r1, #1
 8002470:	4618      	mov	r0, r3
 8002472:	f001 fd39 	bl	8003ee8 <go_straight>
			break;
 8002476:	e004      	b.n	8002482 <found+0x8a>
			go_straight(square_size * 2, 1);
 8002478:	2101      	movs	r1, #1
 800247a:	4808      	ldr	r0, [pc, #32]	; (800249c <found+0xa4>)
 800247c:	f001 fd34 	bl	8003ee8 <go_straight>
			break;
 8002480:	bf00      	nop
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2000041a 	.word	0x2000041a
 8002490:	42c20000 	.word	0x42c20000
 8002494:	43960000 	.word	0x43960000
 8002498:	42180000 	.word	0x42180000
 800249c:	44160000 	.word	0x44160000

080024a0 <set_wall>:

void set_wall(bool rbl, bool rbr, bool rbf){
 80024a0:	b490      	push	{r4, r7}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
 80024aa:	460b      	mov	r3, r1
 80024ac:	71bb      	strb	r3, [r7, #6]
 80024ae:	4613      	mov	r3, r2
 80024b0:	717b      	strb	r3, [r7, #5]
	switch(direction){
 80024b2:	4b86      	ldr	r3, [pc, #536]	; (80026cc <set_wall+0x22c>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	f200 8415 	bhi.w	8002ce6 <set_wall+0x846>
 80024bc:	a201      	add	r2, pc, #4	; (adr r2, 80024c4 <set_wall+0x24>)
 80024be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c2:	bf00      	nop
 80024c4:	080024d5 	.word	0x080024d5
 80024c8:	080026dd 	.word	0x080026dd
 80024cc:	080028e1 	.word	0x080028e1
 80024d0:	08002ae5 	.word	0x08002ae5
		case west:
			x--;
 80024d4:	4b7e      	ldr	r3, [pc, #504]	; (80026d0 <set_wall+0x230>)
 80024d6:	f993 3000 	ldrsb.w	r3, [r3]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	b25a      	sxtb	r2, r3
 80024e2:	4b7b      	ldr	r3, [pc, #492]	; (80026d0 <set_wall+0x230>)
 80024e4:	701a      	strb	r2, [r3, #0]
			if(rbl){
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d04c      	beq.n	8002586 <set_wall+0xe6>
				maze[y][x] |= bottom_wall;
 80024ec:	4b79      	ldr	r3, [pc, #484]	; (80026d4 <set_wall+0x234>)
 80024ee:	f993 3000 	ldrsb.w	r3, [r3]
 80024f2:	4619      	mov	r1, r3
 80024f4:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <set_wall+0x230>)
 80024f6:	f993 3000 	ldrsb.w	r3, [r3]
 80024fa:	4618      	mov	r0, r3
 80024fc:	4a76      	ldr	r2, [pc, #472]	; (80026d8 <set_wall+0x238>)
 80024fe:	460b      	mov	r3, r1
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	4403      	add	r3, r0
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4a71      	ldr	r2, [pc, #452]	; (80026d4 <set_wall+0x234>)
 800250e:	f992 2000 	ldrsb.w	r2, [r2]
 8002512:	4611      	mov	r1, r2
 8002514:	4a6e      	ldr	r2, [pc, #440]	; (80026d0 <set_wall+0x230>)
 8002516:	f992 2000 	ldrsb.w	r2, [r2]
 800251a:	4614      	mov	r4, r2
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	b2d8      	uxtb	r0, r3
 8002522:	4a6d      	ldr	r2, [pc, #436]	; (80026d8 <set_wall+0x238>)
 8002524:	460b      	mov	r3, r1
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	4423      	add	r3, r4
 8002530:	4602      	mov	r2, r0
 8002532:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002534:	4b67      	ldr	r3, [pc, #412]	; (80026d4 <set_wall+0x234>)
 8002536:	f993 3000 	ldrsb.w	r3, [r3]
 800253a:	2b08      	cmp	r3, #8
 800253c:	dc23      	bgt.n	8002586 <set_wall+0xe6>
 800253e:	4b65      	ldr	r3, [pc, #404]	; (80026d4 <set_wall+0x234>)
 8002540:	f993 3000 	ldrsb.w	r3, [r3]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	4b62      	ldr	r3, [pc, #392]	; (80026d0 <set_wall+0x230>)
 8002548:	f993 3000 	ldrsb.w	r3, [r3]
 800254c:	4618      	mov	r0, r3
 800254e:	4962      	ldr	r1, [pc, #392]	; (80026d8 <set_wall+0x238>)
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	440b      	add	r3, r1
 800255a:	4403      	add	r3, r0
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	4a5d      	ldr	r2, [pc, #372]	; (80026d4 <set_wall+0x234>)
 8002560:	f992 2000 	ldrsb.w	r2, [r2]
 8002564:	3201      	adds	r2, #1
 8002566:	495a      	ldr	r1, [pc, #360]	; (80026d0 <set_wall+0x230>)
 8002568:	f991 1000 	ldrsb.w	r1, [r1]
 800256c:	460c      	mov	r4, r1
 800256e:	f043 0302 	orr.w	r3, r3, #2
 8002572:	b2d8      	uxtb	r0, r3
 8002574:	4958      	ldr	r1, [pc, #352]	; (80026d8 <set_wall+0x238>)
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	440b      	add	r3, r1
 8002580:	4423      	add	r3, r4
 8002582:	4602      	mov	r2, r0
 8002584:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002586:	79bb      	ldrb	r3, [r7, #6]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d04c      	beq.n	8002626 <set_wall+0x186>
				maze[y][x] |= top_wall;
 800258c:	4b51      	ldr	r3, [pc, #324]	; (80026d4 <set_wall+0x234>)
 800258e:	f993 3000 	ldrsb.w	r3, [r3]
 8002592:	4619      	mov	r1, r3
 8002594:	4b4e      	ldr	r3, [pc, #312]	; (80026d0 <set_wall+0x230>)
 8002596:	f993 3000 	ldrsb.w	r3, [r3]
 800259a:	4618      	mov	r0, r3
 800259c:	4a4e      	ldr	r2, [pc, #312]	; (80026d8 <set_wall+0x238>)
 800259e:	460b      	mov	r3, r1
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	4403      	add	r3, r0
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4a49      	ldr	r2, [pc, #292]	; (80026d4 <set_wall+0x234>)
 80025ae:	f992 2000 	ldrsb.w	r2, [r2]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4a46      	ldr	r2, [pc, #280]	; (80026d0 <set_wall+0x230>)
 80025b6:	f992 2000 	ldrsb.w	r2, [r2]
 80025ba:	4614      	mov	r4, r2
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	b2d8      	uxtb	r0, r3
 80025c2:	4a45      	ldr	r2, [pc, #276]	; (80026d8 <set_wall+0x238>)
 80025c4:	460b      	mov	r3, r1
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	4423      	add	r3, r4
 80025d0:	4602      	mov	r2, r0
 80025d2:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 80025d4:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <set_wall+0x234>)
 80025d6:	f993 3000 	ldrsb.w	r3, [r3]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	dd23      	ble.n	8002626 <set_wall+0x186>
 80025de:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <set_wall+0x234>)
 80025e0:	f993 3000 	ldrsb.w	r3, [r3]
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	4b3a      	ldr	r3, [pc, #232]	; (80026d0 <set_wall+0x230>)
 80025e8:	f993 3000 	ldrsb.w	r3, [r3]
 80025ec:	4618      	mov	r0, r3
 80025ee:	493a      	ldr	r1, [pc, #232]	; (80026d8 <set_wall+0x238>)
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	440b      	add	r3, r1
 80025fa:	4403      	add	r3, r0
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	4a35      	ldr	r2, [pc, #212]	; (80026d4 <set_wall+0x234>)
 8002600:	f992 2000 	ldrsb.w	r2, [r2]
 8002604:	3a01      	subs	r2, #1
 8002606:	4932      	ldr	r1, [pc, #200]	; (80026d0 <set_wall+0x230>)
 8002608:	f991 1000 	ldrsb.w	r1, [r1]
 800260c:	460c      	mov	r4, r1
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	b2d8      	uxtb	r0, r3
 8002614:	4930      	ldr	r1, [pc, #192]	; (80026d8 <set_wall+0x238>)
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	440b      	add	r3, r1
 8002620:	4423      	add	r3, r4
 8002622:	4602      	mov	r2, r0
 8002624:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002626:	797b      	ldrb	r3, [r7, #5]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8355 	beq.w	8002cd8 <set_wall+0x838>
				maze[y][x] |= left_wall;
 800262e:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <set_wall+0x234>)
 8002630:	f993 3000 	ldrsb.w	r3, [r3]
 8002634:	4619      	mov	r1, r3
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <set_wall+0x230>)
 8002638:	f993 3000 	ldrsb.w	r3, [r3]
 800263c:	4618      	mov	r0, r3
 800263e:	4a26      	ldr	r2, [pc, #152]	; (80026d8 <set_wall+0x238>)
 8002640:	460b      	mov	r3, r1
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	4403      	add	r3, r0
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <set_wall+0x234>)
 8002650:	f992 2000 	ldrsb.w	r2, [r2]
 8002654:	4611      	mov	r1, r2
 8002656:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <set_wall+0x230>)
 8002658:	f992 2000 	ldrsb.w	r2, [r2]
 800265c:	4614      	mov	r4, r2
 800265e:	f043 0308 	orr.w	r3, r3, #8
 8002662:	b2d8      	uxtb	r0, r3
 8002664:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <set_wall+0x238>)
 8002666:	460b      	mov	r3, r1
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	4423      	add	r3, r4
 8002672:	4602      	mov	r2, r0
 8002674:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <set_wall+0x230>)
 8002678:	f993 3000 	ldrsb.w	r3, [r3]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f340 832b 	ble.w	8002cd8 <set_wall+0x838>
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <set_wall+0x234>)
 8002684:	f993 3000 	ldrsb.w	r3, [r3]
 8002688:	4618      	mov	r0, r3
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <set_wall+0x230>)
 800268c:	f993 3000 	ldrsb.w	r3, [r3]
 8002690:	1e5a      	subs	r2, r3, #1
 8002692:	4911      	ldr	r1, [pc, #68]	; (80026d8 <set_wall+0x238>)
 8002694:	4603      	mov	r3, r0
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4403      	add	r3, r0
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	440b      	add	r3, r1
 800269e:	4413      	add	r3, r2
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <set_wall+0x234>)
 80026a4:	f992 2000 	ldrsb.w	r2, [r2]
 80026a8:	4610      	mov	r0, r2
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <set_wall+0x230>)
 80026ac:	f992 2000 	ldrsb.w	r2, [r2]
 80026b0:	3a01      	subs	r2, #1
 80026b2:	f043 0304 	orr.w	r3, r3, #4
 80026b6:	b2dc      	uxtb	r4, r3
 80026b8:	4907      	ldr	r1, [pc, #28]	; (80026d8 <set_wall+0x238>)
 80026ba:	4603      	mov	r3, r0
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4403      	add	r3, r0
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	440b      	add	r3, r1
 80026c4:	4413      	add	r3, r2
 80026c6:	4622      	mov	r2, r4
 80026c8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80026ca:	e305      	b.n	8002cd8 <set_wall+0x838>
 80026cc:	2000041a 	.word	0x2000041a
 80026d0:	20000418 	.word	0x20000418
 80026d4:	20000419 	.word	0x20000419
 80026d8:	20000590 	.word	0x20000590
		case east:
			x++;
 80026dc:	4b7d      	ldr	r3, [pc, #500]	; (80028d4 <set_wall+0x434>)
 80026de:	f993 3000 	ldrsb.w	r3, [r3]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	b25a      	sxtb	r2, r3
 80026ea:	4b7a      	ldr	r3, [pc, #488]	; (80028d4 <set_wall+0x434>)
 80026ec:	701a      	strb	r2, [r3, #0]
			if(rbl){
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d04c      	beq.n	800278e <set_wall+0x2ee>
				maze[y][x] |= top_wall;
 80026f4:	4b78      	ldr	r3, [pc, #480]	; (80028d8 <set_wall+0x438>)
 80026f6:	f993 3000 	ldrsb.w	r3, [r3]
 80026fa:	4619      	mov	r1, r3
 80026fc:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <set_wall+0x434>)
 80026fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002702:	4618      	mov	r0, r3
 8002704:	4a75      	ldr	r2, [pc, #468]	; (80028dc <set_wall+0x43c>)
 8002706:	460b      	mov	r3, r1
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	4403      	add	r3, r0
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4a70      	ldr	r2, [pc, #448]	; (80028d8 <set_wall+0x438>)
 8002716:	f992 2000 	ldrsb.w	r2, [r2]
 800271a:	4611      	mov	r1, r2
 800271c:	4a6d      	ldr	r2, [pc, #436]	; (80028d4 <set_wall+0x434>)
 800271e:	f992 2000 	ldrsb.w	r2, [r2]
 8002722:	4614      	mov	r4, r2
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	b2d8      	uxtb	r0, r3
 800272a:	4a6c      	ldr	r2, [pc, #432]	; (80028dc <set_wall+0x43c>)
 800272c:	460b      	mov	r3, r1
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	4423      	add	r3, r4
 8002738:	4602      	mov	r2, r0
 800273a:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 800273c:	4b66      	ldr	r3, [pc, #408]	; (80028d8 <set_wall+0x438>)
 800273e:	f993 3000 	ldrsb.w	r3, [r3]
 8002742:	2b00      	cmp	r3, #0
 8002744:	dd23      	ble.n	800278e <set_wall+0x2ee>
 8002746:	4b64      	ldr	r3, [pc, #400]	; (80028d8 <set_wall+0x438>)
 8002748:	f993 3000 	ldrsb.w	r3, [r3]
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	4b61      	ldr	r3, [pc, #388]	; (80028d4 <set_wall+0x434>)
 8002750:	f993 3000 	ldrsb.w	r3, [r3]
 8002754:	4618      	mov	r0, r3
 8002756:	4961      	ldr	r1, [pc, #388]	; (80028dc <set_wall+0x43c>)
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	440b      	add	r3, r1
 8002762:	4403      	add	r3, r0
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	4a5c      	ldr	r2, [pc, #368]	; (80028d8 <set_wall+0x438>)
 8002768:	f992 2000 	ldrsb.w	r2, [r2]
 800276c:	3a01      	subs	r2, #1
 800276e:	4959      	ldr	r1, [pc, #356]	; (80028d4 <set_wall+0x434>)
 8002770:	f991 1000 	ldrsb.w	r1, [r1]
 8002774:	460c      	mov	r4, r1
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	b2d8      	uxtb	r0, r3
 800277c:	4957      	ldr	r1, [pc, #348]	; (80028dc <set_wall+0x43c>)
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	440b      	add	r3, r1
 8002788:	4423      	add	r3, r4
 800278a:	4602      	mov	r2, r0
 800278c:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d04c      	beq.n	800282e <set_wall+0x38e>
				maze[y][x] |= bottom_wall;
 8002794:	4b50      	ldr	r3, [pc, #320]	; (80028d8 <set_wall+0x438>)
 8002796:	f993 3000 	ldrsb.w	r3, [r3]
 800279a:	4619      	mov	r1, r3
 800279c:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <set_wall+0x434>)
 800279e:	f993 3000 	ldrsb.w	r3, [r3]
 80027a2:	4618      	mov	r0, r3
 80027a4:	4a4d      	ldr	r2, [pc, #308]	; (80028dc <set_wall+0x43c>)
 80027a6:	460b      	mov	r3, r1
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	4403      	add	r3, r0
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	4a48      	ldr	r2, [pc, #288]	; (80028d8 <set_wall+0x438>)
 80027b6:	f992 2000 	ldrsb.w	r2, [r2]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4a45      	ldr	r2, [pc, #276]	; (80028d4 <set_wall+0x434>)
 80027be:	f992 2000 	ldrsb.w	r2, [r2]
 80027c2:	4614      	mov	r4, r2
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	b2d8      	uxtb	r0, r3
 80027ca:	4a44      	ldr	r2, [pc, #272]	; (80028dc <set_wall+0x43c>)
 80027cc:	460b      	mov	r3, r1
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	4423      	add	r3, r4
 80027d8:	4602      	mov	r2, r0
 80027da:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 80027dc:	4b3e      	ldr	r3, [pc, #248]	; (80028d8 <set_wall+0x438>)
 80027de:	f993 3000 	ldrsb.w	r3, [r3]
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	dc23      	bgt.n	800282e <set_wall+0x38e>
 80027e6:	4b3c      	ldr	r3, [pc, #240]	; (80028d8 <set_wall+0x438>)
 80027e8:	f993 3000 	ldrsb.w	r3, [r3]
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <set_wall+0x434>)
 80027f0:	f993 3000 	ldrsb.w	r3, [r3]
 80027f4:	4618      	mov	r0, r3
 80027f6:	4939      	ldr	r1, [pc, #228]	; (80028dc <set_wall+0x43c>)
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	440b      	add	r3, r1
 8002802:	4403      	add	r3, r0
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <set_wall+0x438>)
 8002808:	f992 2000 	ldrsb.w	r2, [r2]
 800280c:	3201      	adds	r2, #1
 800280e:	4931      	ldr	r1, [pc, #196]	; (80028d4 <set_wall+0x434>)
 8002810:	f991 1000 	ldrsb.w	r1, [r1]
 8002814:	460c      	mov	r4, r1
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	b2d8      	uxtb	r0, r3
 800281c:	492f      	ldr	r1, [pc, #188]	; (80028dc <set_wall+0x43c>)
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	440b      	add	r3, r1
 8002828:	4423      	add	r3, r4
 800282a:	4602      	mov	r2, r0
 800282c:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 800282e:	797b      	ldrb	r3, [r7, #5]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8253 	beq.w	8002cdc <set_wall+0x83c>
				maze[y][x] |= right_wall;
 8002836:	4b28      	ldr	r3, [pc, #160]	; (80028d8 <set_wall+0x438>)
 8002838:	f993 3000 	ldrsb.w	r3, [r3]
 800283c:	4619      	mov	r1, r3
 800283e:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <set_wall+0x434>)
 8002840:	f993 3000 	ldrsb.w	r3, [r3]
 8002844:	4618      	mov	r0, r3
 8002846:	4a25      	ldr	r2, [pc, #148]	; (80028dc <set_wall+0x43c>)
 8002848:	460b      	mov	r3, r1
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	4403      	add	r3, r0
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	4a20      	ldr	r2, [pc, #128]	; (80028d8 <set_wall+0x438>)
 8002858:	f992 2000 	ldrsb.w	r2, [r2]
 800285c:	4611      	mov	r1, r2
 800285e:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <set_wall+0x434>)
 8002860:	f992 2000 	ldrsb.w	r2, [r2]
 8002864:	4614      	mov	r4, r2
 8002866:	f043 0304 	orr.w	r3, r3, #4
 800286a:	b2d8      	uxtb	r0, r3
 800286c:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <set_wall+0x43c>)
 800286e:	460b      	mov	r3, r1
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	4423      	add	r3, r4
 800287a:	4602      	mov	r2, r0
 800287c:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <set_wall+0x434>)
 8002880:	f993 3000 	ldrsb.w	r3, [r3]
 8002884:	2b08      	cmp	r3, #8
 8002886:	f300 8229 	bgt.w	8002cdc <set_wall+0x83c>
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <set_wall+0x438>)
 800288c:	f993 3000 	ldrsb.w	r3, [r3]
 8002890:	4618      	mov	r0, r3
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <set_wall+0x434>)
 8002894:	f993 3000 	ldrsb.w	r3, [r3]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	4910      	ldr	r1, [pc, #64]	; (80028dc <set_wall+0x43c>)
 800289c:	4603      	mov	r3, r0
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4403      	add	r3, r0
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	440b      	add	r3, r1
 80028a6:	4413      	add	r3, r2
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <set_wall+0x438>)
 80028ac:	f992 2000 	ldrsb.w	r2, [r2]
 80028b0:	4610      	mov	r0, r2
 80028b2:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <set_wall+0x434>)
 80028b4:	f992 2000 	ldrsb.w	r2, [r2]
 80028b8:	3201      	adds	r2, #1
 80028ba:	f043 0308 	orr.w	r3, r3, #8
 80028be:	b2dc      	uxtb	r4, r3
 80028c0:	4906      	ldr	r1, [pc, #24]	; (80028dc <set_wall+0x43c>)
 80028c2:	4603      	mov	r3, r0
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4403      	add	r3, r0
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	440b      	add	r3, r1
 80028cc:	4413      	add	r3, r2
 80028ce:	4622      	mov	r2, r4
 80028d0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80028d2:	e203      	b.n	8002cdc <set_wall+0x83c>
 80028d4:	20000418 	.word	0x20000418
 80028d8:	20000419 	.word	0x20000419
 80028dc:	20000590 	.word	0x20000590
		case north:
			y--;
 80028e0:	4b7d      	ldr	r3, [pc, #500]	; (8002ad8 <set_wall+0x638>)
 80028e2:	f993 3000 	ldrsb.w	r3, [r3]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	b25a      	sxtb	r2, r3
 80028ee:	4b7a      	ldr	r3, [pc, #488]	; (8002ad8 <set_wall+0x638>)
 80028f0:	701a      	strb	r2, [r3, #0]
			if(rbl){
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d04c      	beq.n	8002992 <set_wall+0x4f2>
				maze[y][x] |= left_wall;
 80028f8:	4b77      	ldr	r3, [pc, #476]	; (8002ad8 <set_wall+0x638>)
 80028fa:	f993 3000 	ldrsb.w	r3, [r3]
 80028fe:	4619      	mov	r1, r3
 8002900:	4b76      	ldr	r3, [pc, #472]	; (8002adc <set_wall+0x63c>)
 8002902:	f993 3000 	ldrsb.w	r3, [r3]
 8002906:	4618      	mov	r0, r3
 8002908:	4a75      	ldr	r2, [pc, #468]	; (8002ae0 <set_wall+0x640>)
 800290a:	460b      	mov	r3, r1
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	4403      	add	r3, r0
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	4a6f      	ldr	r2, [pc, #444]	; (8002ad8 <set_wall+0x638>)
 800291a:	f992 2000 	ldrsb.w	r2, [r2]
 800291e:	4611      	mov	r1, r2
 8002920:	4a6e      	ldr	r2, [pc, #440]	; (8002adc <set_wall+0x63c>)
 8002922:	f992 2000 	ldrsb.w	r2, [r2]
 8002926:	4614      	mov	r4, r2
 8002928:	f043 0308 	orr.w	r3, r3, #8
 800292c:	b2d8      	uxtb	r0, r3
 800292e:	4a6c      	ldr	r2, [pc, #432]	; (8002ae0 <set_wall+0x640>)
 8002930:	460b      	mov	r3, r1
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	4423      	add	r3, r4
 800293c:	4602      	mov	r2, r0
 800293e:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002940:	4b66      	ldr	r3, [pc, #408]	; (8002adc <set_wall+0x63c>)
 8002942:	f993 3000 	ldrsb.w	r3, [r3]
 8002946:	2b00      	cmp	r3, #0
 8002948:	dd23      	ble.n	8002992 <set_wall+0x4f2>
 800294a:	4b63      	ldr	r3, [pc, #396]	; (8002ad8 <set_wall+0x638>)
 800294c:	f993 3000 	ldrsb.w	r3, [r3]
 8002950:	4618      	mov	r0, r3
 8002952:	4b62      	ldr	r3, [pc, #392]	; (8002adc <set_wall+0x63c>)
 8002954:	f993 3000 	ldrsb.w	r3, [r3]
 8002958:	1e5a      	subs	r2, r3, #1
 800295a:	4961      	ldr	r1, [pc, #388]	; (8002ae0 <set_wall+0x640>)
 800295c:	4603      	mov	r3, r0
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4403      	add	r3, r0
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	440b      	add	r3, r1
 8002966:	4413      	add	r3, r2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	4a5b      	ldr	r2, [pc, #364]	; (8002ad8 <set_wall+0x638>)
 800296c:	f992 2000 	ldrsb.w	r2, [r2]
 8002970:	4610      	mov	r0, r2
 8002972:	4a5a      	ldr	r2, [pc, #360]	; (8002adc <set_wall+0x63c>)
 8002974:	f992 2000 	ldrsb.w	r2, [r2]
 8002978:	3a01      	subs	r2, #1
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	b2dc      	uxtb	r4, r3
 8002980:	4957      	ldr	r1, [pc, #348]	; (8002ae0 <set_wall+0x640>)
 8002982:	4603      	mov	r3, r0
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4403      	add	r3, r0
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	440b      	add	r3, r1
 800298c:	4413      	add	r3, r2
 800298e:	4622      	mov	r2, r4
 8002990:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002992:	79bb      	ldrb	r3, [r7, #6]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d04c      	beq.n	8002a32 <set_wall+0x592>
				maze[y][x] |= right_wall;
 8002998:	4b4f      	ldr	r3, [pc, #316]	; (8002ad8 <set_wall+0x638>)
 800299a:	f993 3000 	ldrsb.w	r3, [r3]
 800299e:	4619      	mov	r1, r3
 80029a0:	4b4e      	ldr	r3, [pc, #312]	; (8002adc <set_wall+0x63c>)
 80029a2:	f993 3000 	ldrsb.w	r3, [r3]
 80029a6:	4618      	mov	r0, r3
 80029a8:	4a4d      	ldr	r2, [pc, #308]	; (8002ae0 <set_wall+0x640>)
 80029aa:	460b      	mov	r3, r1
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4413      	add	r3, r2
 80029b4:	4403      	add	r3, r0
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4a47      	ldr	r2, [pc, #284]	; (8002ad8 <set_wall+0x638>)
 80029ba:	f992 2000 	ldrsb.w	r2, [r2]
 80029be:	4611      	mov	r1, r2
 80029c0:	4a46      	ldr	r2, [pc, #280]	; (8002adc <set_wall+0x63c>)
 80029c2:	f992 2000 	ldrsb.w	r2, [r2]
 80029c6:	4614      	mov	r4, r2
 80029c8:	f043 0304 	orr.w	r3, r3, #4
 80029cc:	b2d8      	uxtb	r0, r3
 80029ce:	4a44      	ldr	r2, [pc, #272]	; (8002ae0 <set_wall+0x640>)
 80029d0:	460b      	mov	r3, r1
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	4423      	add	r3, r4
 80029dc:	4602      	mov	r2, r0
 80029de:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 80029e0:	4b3e      	ldr	r3, [pc, #248]	; (8002adc <set_wall+0x63c>)
 80029e2:	f993 3000 	ldrsb.w	r3, [r3]
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	dc23      	bgt.n	8002a32 <set_wall+0x592>
 80029ea:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <set_wall+0x638>)
 80029ec:	f993 3000 	ldrsb.w	r3, [r3]
 80029f0:	4618      	mov	r0, r3
 80029f2:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <set_wall+0x63c>)
 80029f4:	f993 3000 	ldrsb.w	r3, [r3]
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	4939      	ldr	r1, [pc, #228]	; (8002ae0 <set_wall+0x640>)
 80029fc:	4603      	mov	r3, r0
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4403      	add	r3, r0
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	440b      	add	r3, r1
 8002a06:	4413      	add	r3, r2
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	4a33      	ldr	r2, [pc, #204]	; (8002ad8 <set_wall+0x638>)
 8002a0c:	f992 2000 	ldrsb.w	r2, [r2]
 8002a10:	4610      	mov	r0, r2
 8002a12:	4a32      	ldr	r2, [pc, #200]	; (8002adc <set_wall+0x63c>)
 8002a14:	f992 2000 	ldrsb.w	r2, [r2]
 8002a18:	3201      	adds	r2, #1
 8002a1a:	f043 0308 	orr.w	r3, r3, #8
 8002a1e:	b2dc      	uxtb	r4, r3
 8002a20:	492f      	ldr	r1, [pc, #188]	; (8002ae0 <set_wall+0x640>)
 8002a22:	4603      	mov	r3, r0
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4403      	add	r3, r0
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	440b      	add	r3, r1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	4622      	mov	r2, r4
 8002a30:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002a32:	797b      	ldrb	r3, [r7, #5]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8153 	beq.w	8002ce0 <set_wall+0x840>
				maze[y][x] |= top_wall;
 8002a3a:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <set_wall+0x638>)
 8002a3c:	f993 3000 	ldrsb.w	r3, [r3]
 8002a40:	4619      	mov	r1, r3
 8002a42:	4b26      	ldr	r3, [pc, #152]	; (8002adc <set_wall+0x63c>)
 8002a44:	f993 3000 	ldrsb.w	r3, [r3]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <set_wall+0x640>)
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	4403      	add	r3, r0
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <set_wall+0x638>)
 8002a5c:	f992 2000 	ldrsb.w	r2, [r2]
 8002a60:	4611      	mov	r1, r2
 8002a62:	4a1e      	ldr	r2, [pc, #120]	; (8002adc <set_wall+0x63c>)
 8002a64:	f992 2000 	ldrsb.w	r2, [r2]
 8002a68:	4614      	mov	r4, r2
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	b2d8      	uxtb	r0, r3
 8002a70:	4a1b      	ldr	r2, [pc, #108]	; (8002ae0 <set_wall+0x640>)
 8002a72:	460b      	mov	r3, r1
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4423      	add	r3, r4
 8002a7e:	4602      	mov	r2, r0
 8002a80:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <set_wall+0x638>)
 8002a84:	f993 3000 	ldrsb.w	r3, [r3]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f340 8129 	ble.w	8002ce0 <set_wall+0x840>
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <set_wall+0x638>)
 8002a90:	f993 3000 	ldrsb.w	r3, [r3]
 8002a94:	1e5a      	subs	r2, r3, #1
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <set_wall+0x63c>)
 8002a98:	f993 3000 	ldrsb.w	r3, [r3]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	4910      	ldr	r1, [pc, #64]	; (8002ae0 <set_wall+0x640>)
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	440b      	add	r3, r1
 8002aaa:	4403      	add	r3, r0
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <set_wall+0x638>)
 8002ab0:	f992 2000 	ldrsb.w	r2, [r2]
 8002ab4:	3a01      	subs	r2, #1
 8002ab6:	4909      	ldr	r1, [pc, #36]	; (8002adc <set_wall+0x63c>)
 8002ab8:	f991 1000 	ldrsb.w	r1, [r1]
 8002abc:	460c      	mov	r4, r1
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	b2d8      	uxtb	r0, r3
 8002ac4:	4906      	ldr	r1, [pc, #24]	; (8002ae0 <set_wall+0x640>)
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	440b      	add	r3, r1
 8002ad0:	4423      	add	r3, r4
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002ad6:	e103      	b.n	8002ce0 <set_wall+0x840>
 8002ad8:	20000419 	.word	0x20000419
 8002adc:	20000418 	.word	0x20000418
 8002ae0:	20000590 	.word	0x20000590
		case south:
			y++;
 8002ae4:	4b82      	ldr	r3, [pc, #520]	; (8002cf0 <set_wall+0x850>)
 8002ae6:	f993 3000 	ldrsb.w	r3, [r3]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	b25a      	sxtb	r2, r3
 8002af2:	4b7f      	ldr	r3, [pc, #508]	; (8002cf0 <set_wall+0x850>)
 8002af4:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d04c      	beq.n	8002b96 <set_wall+0x6f6>
				maze[y][x] |= right_wall;
 8002afc:	4b7c      	ldr	r3, [pc, #496]	; (8002cf0 <set_wall+0x850>)
 8002afe:	f993 3000 	ldrsb.w	r3, [r3]
 8002b02:	4619      	mov	r1, r3
 8002b04:	4b7b      	ldr	r3, [pc, #492]	; (8002cf4 <set_wall+0x854>)
 8002b06:	f993 3000 	ldrsb.w	r3, [r3]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	4a7a      	ldr	r2, [pc, #488]	; (8002cf8 <set_wall+0x858>)
 8002b0e:	460b      	mov	r3, r1
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	4403      	add	r3, r0
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	4a74      	ldr	r2, [pc, #464]	; (8002cf0 <set_wall+0x850>)
 8002b1e:	f992 2000 	ldrsb.w	r2, [r2]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4a73      	ldr	r2, [pc, #460]	; (8002cf4 <set_wall+0x854>)
 8002b26:	f992 2000 	ldrsb.w	r2, [r2]
 8002b2a:	4614      	mov	r4, r2
 8002b2c:	f043 0304 	orr.w	r3, r3, #4
 8002b30:	b2d8      	uxtb	r0, r3
 8002b32:	4a71      	ldr	r2, [pc, #452]	; (8002cf8 <set_wall+0x858>)
 8002b34:	460b      	mov	r3, r1
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4423      	add	r3, r4
 8002b40:	4602      	mov	r2, r0
 8002b42:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002b44:	4b6b      	ldr	r3, [pc, #428]	; (8002cf4 <set_wall+0x854>)
 8002b46:	f993 3000 	ldrsb.w	r3, [r3]
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	dc23      	bgt.n	8002b96 <set_wall+0x6f6>
 8002b4e:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <set_wall+0x850>)
 8002b50:	f993 3000 	ldrsb.w	r3, [r3]
 8002b54:	4618      	mov	r0, r3
 8002b56:	4b67      	ldr	r3, [pc, #412]	; (8002cf4 <set_wall+0x854>)
 8002b58:	f993 3000 	ldrsb.w	r3, [r3]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	4966      	ldr	r1, [pc, #408]	; (8002cf8 <set_wall+0x858>)
 8002b60:	4603      	mov	r3, r0
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4403      	add	r3, r0
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	440b      	add	r3, r1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	4a60      	ldr	r2, [pc, #384]	; (8002cf0 <set_wall+0x850>)
 8002b70:	f992 2000 	ldrsb.w	r2, [r2]
 8002b74:	4610      	mov	r0, r2
 8002b76:	4a5f      	ldr	r2, [pc, #380]	; (8002cf4 <set_wall+0x854>)
 8002b78:	f992 2000 	ldrsb.w	r2, [r2]
 8002b7c:	3201      	adds	r2, #1
 8002b7e:	f043 0308 	orr.w	r3, r3, #8
 8002b82:	b2dc      	uxtb	r4, r3
 8002b84:	495c      	ldr	r1, [pc, #368]	; (8002cf8 <set_wall+0x858>)
 8002b86:	4603      	mov	r3, r0
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4403      	add	r3, r0
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	440b      	add	r3, r1
 8002b90:	4413      	add	r3, r2
 8002b92:	4622      	mov	r2, r4
 8002b94:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002b96:	79bb      	ldrb	r3, [r7, #6]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d04c      	beq.n	8002c36 <set_wall+0x796>
				maze[y][x] |= left_wall;
 8002b9c:	4b54      	ldr	r3, [pc, #336]	; (8002cf0 <set_wall+0x850>)
 8002b9e:	f993 3000 	ldrsb.w	r3, [r3]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4b53      	ldr	r3, [pc, #332]	; (8002cf4 <set_wall+0x854>)
 8002ba6:	f993 3000 	ldrsb.w	r3, [r3]
 8002baa:	4618      	mov	r0, r3
 8002bac:	4a52      	ldr	r2, [pc, #328]	; (8002cf8 <set_wall+0x858>)
 8002bae:	460b      	mov	r3, r1
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4403      	add	r3, r0
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	4a4c      	ldr	r2, [pc, #304]	; (8002cf0 <set_wall+0x850>)
 8002bbe:	f992 2000 	ldrsb.w	r2, [r2]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4a4b      	ldr	r2, [pc, #300]	; (8002cf4 <set_wall+0x854>)
 8002bc6:	f992 2000 	ldrsb.w	r2, [r2]
 8002bca:	4614      	mov	r4, r2
 8002bcc:	f043 0308 	orr.w	r3, r3, #8
 8002bd0:	b2d8      	uxtb	r0, r3
 8002bd2:	4a49      	ldr	r2, [pc, #292]	; (8002cf8 <set_wall+0x858>)
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	4423      	add	r3, r4
 8002be0:	4602      	mov	r2, r0
 8002be2:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002be4:	4b43      	ldr	r3, [pc, #268]	; (8002cf4 <set_wall+0x854>)
 8002be6:	f993 3000 	ldrsb.w	r3, [r3]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	dd23      	ble.n	8002c36 <set_wall+0x796>
 8002bee:	4b40      	ldr	r3, [pc, #256]	; (8002cf0 <set_wall+0x850>)
 8002bf0:	f993 3000 	ldrsb.w	r3, [r3]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <set_wall+0x854>)
 8002bf8:	f993 3000 	ldrsb.w	r3, [r3]
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	493e      	ldr	r1, [pc, #248]	; (8002cf8 <set_wall+0x858>)
 8002c00:	4603      	mov	r3, r0
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4403      	add	r3, r0
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	440b      	add	r3, r1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	4a38      	ldr	r2, [pc, #224]	; (8002cf0 <set_wall+0x850>)
 8002c10:	f992 2000 	ldrsb.w	r2, [r2]
 8002c14:	4610      	mov	r0, r2
 8002c16:	4a37      	ldr	r2, [pc, #220]	; (8002cf4 <set_wall+0x854>)
 8002c18:	f992 2000 	ldrsb.w	r2, [r2]
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	b2dc      	uxtb	r4, r3
 8002c24:	4934      	ldr	r1, [pc, #208]	; (8002cf8 <set_wall+0x858>)
 8002c26:	4603      	mov	r3, r0
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4403      	add	r3, r0
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	440b      	add	r3, r1
 8002c30:	4413      	add	r3, r2
 8002c32:	4622      	mov	r2, r4
 8002c34:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002c36:	797b      	ldrb	r3, [r7, #5]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d053      	beq.n	8002ce4 <set_wall+0x844>
				maze[y][x] |= bottom_wall;
 8002c3c:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <set_wall+0x850>)
 8002c3e:	f993 3000 	ldrsb.w	r3, [r3]
 8002c42:	4619      	mov	r1, r3
 8002c44:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <set_wall+0x854>)
 8002c46:	f993 3000 	ldrsb.w	r3, [r3]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	4a2a      	ldr	r2, [pc, #168]	; (8002cf8 <set_wall+0x858>)
 8002c4e:	460b      	mov	r3, r1
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	4403      	add	r3, r0
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4a24      	ldr	r2, [pc, #144]	; (8002cf0 <set_wall+0x850>)
 8002c5e:	f992 2000 	ldrsb.w	r2, [r2]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <set_wall+0x854>)
 8002c66:	f992 2000 	ldrsb.w	r2, [r2]
 8002c6a:	4614      	mov	r4, r2
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	b2d8      	uxtb	r0, r3
 8002c72:	4a21      	ldr	r2, [pc, #132]	; (8002cf8 <set_wall+0x858>)
 8002c74:	460b      	mov	r3, r1
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	4423      	add	r3, r4
 8002c80:	4602      	mov	r2, r0
 8002c82:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002c84:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <set_wall+0x850>)
 8002c86:	f993 3000 	ldrsb.w	r3, [r3]
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	dc2a      	bgt.n	8002ce4 <set_wall+0x844>
 8002c8e:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <set_wall+0x850>)
 8002c90:	f993 3000 	ldrsb.w	r3, [r3]
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <set_wall+0x854>)
 8002c98:	f993 3000 	ldrsb.w	r3, [r3]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	4916      	ldr	r1, [pc, #88]	; (8002cf8 <set_wall+0x858>)
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	440b      	add	r3, r1
 8002caa:	4403      	add	r3, r0
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	4a10      	ldr	r2, [pc, #64]	; (8002cf0 <set_wall+0x850>)
 8002cb0:	f992 2000 	ldrsb.w	r2, [r2]
 8002cb4:	3201      	adds	r2, #1
 8002cb6:	490f      	ldr	r1, [pc, #60]	; (8002cf4 <set_wall+0x854>)
 8002cb8:	f991 1000 	ldrsb.w	r1, [r1]
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	b2d8      	uxtb	r0, r3
 8002cc4:	490c      	ldr	r1, [pc, #48]	; (8002cf8 <set_wall+0x858>)
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	440b      	add	r3, r1
 8002cd0:	4423      	add	r3, r4
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002cd6:	e005      	b.n	8002ce4 <set_wall+0x844>
			break;
 8002cd8:	bf00      	nop
 8002cda:	e004      	b.n	8002ce6 <set_wall+0x846>
			break;
 8002cdc:	bf00      	nop
 8002cde:	e002      	b.n	8002ce6 <set_wall+0x846>
			break;
 8002ce0:	bf00      	nop
 8002ce2:	e000      	b.n	8002ce6 <set_wall+0x846>
			break;
 8002ce4:	bf00      	nop
	}
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc90      	pop	{r4, r7}
 8002cee:	4770      	bx	lr
 8002cf0:	20000419 	.word	0x20000419
 8002cf4:	20000418 	.word	0x20000418
 8002cf8:	20000590 	.word	0x20000590

08002cfc <sensor_init>:
VL53L0X_Version_t *pVersion[n_vl53l0x];
VL53L0X_DeviceInfo_t DeviceInfo[n_vl53l0x];



void sensor_init(){
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 8002d02:	2200      	movs	r2, #0
 8002d04:	217e      	movs	r1, #126	; 0x7e
 8002d06:	483a      	ldr	r0, [pc, #232]	; (8002df0 <sensor_init+0xf4>)
 8002d08:	f001 fe0a 	bl	8004920 <HAL_GPIO_WritePin>
            |xSHUT_4_Pin|xSHUT_5_Pin, GPIO_PIN_RESET);
	HAL_Delay(100);
 8002d0c:	2064      	movs	r0, #100	; 0x64
 8002d0e:	f001 fb1f 	bl	8004350 <HAL_Delay>
	uint8_t addr = 0x54;
 8002d12:	2354      	movs	r3, #84	; 0x54
 8002d14:	71fb      	strb	r3, [r7, #7]
	for(int i = 0 ; i < n_vl53l0x; i++){
 8002d16:	2300      	movs	r3, #0
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	e060      	b.n	8002dde <sensor_init+0xe2>
		pMyDevice[i] = &MyDevice[i];
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	4a33      	ldr	r2, [pc, #204]	; (8002df4 <sensor_init+0xf8>)
 8002d28:	441a      	add	r2, r3
 8002d2a:	4933      	ldr	r1, [pc, #204]	; (8002df8 <sensor_init+0xfc>)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		pMyDevice[i]->I2cDevAddr      = 0x52;
 8002d32:	4a31      	ldr	r2, [pc, #196]	; (8002df8 <sensor_init+0xfc>)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3a:	2252      	movs	r2, #82	; 0x52
 8002d3c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		pMyDevice[i]->comms_type      =  1;
 8002d40:	4a2d      	ldr	r2, [pc, #180]	; (8002df8 <sensor_init+0xfc>)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		pMyDevice[i]->comms_speed_khz =  100;
 8002d4e:	4a2a      	ldr	r2, [pc, #168]	; (8002df8 <sensor_init+0xfc>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d56:	2264      	movs	r2, #100	; 0x64
 8002d58:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
		pMyDevice[i]->I2cHandle = &hi2c1;
 8002d5c:	4a26      	ldr	r2, [pc, #152]	; (8002df8 <sensor_init+0xfc>)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d64:	4a25      	ldr	r2, [pc, #148]	; (8002dfc <sensor_init+0x100>)
 8002d66:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		pVersion[i] = &Version[i];
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4a24      	ldr	r2, [pc, #144]	; (8002e00 <sensor_init+0x104>)
 8002d70:	441a      	add	r2, r3
 8002d72:	4924      	ldr	r1, [pc, #144]	; (8002e04 <sensor_init+0x108>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_GPIO_WritePin(GPIOA, ((uint16_t)0x0002) << i, GPIO_PIN_SET);
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2201      	movs	r2, #1
 8002d86:	4619      	mov	r1, r3
 8002d88:	4819      	ldr	r0, [pc, #100]	; (8002df0 <sensor_init+0xf4>)
 8002d8a:	f001 fdc9 	bl	8004920 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8002d8e:	2064      	movs	r0, #100	; 0x64
 8002d90:	f001 fade 	bl	8004350 <HAL_Delay>
		status_debug = vl53l0x_init(pMyDevice[i], pVersion[i], &DeviceInfo[i], addr);
 8002d94:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <sensor_init+0xfc>)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002d9c:	4a19      	ldr	r2, [pc, #100]	; (8002e04 <sensor_init+0x108>)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	4413      	add	r3, r2
 8002db0:	4a15      	ldr	r2, [pc, #84]	; (8002e08 <sensor_init+0x10c>)
 8002db2:	441a      	add	r2, r3
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	f008 ffd5 	bl	800bd64 <vl53l0x_init>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <sensor_init+0x110>)
 8002dc0:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8002dc2:	2064      	movs	r0, #100	; 0x64
 8002dc4:	f001 fac4 	bl	8004350 <HAL_Delay>
		addr+=2;
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	3302      	adds	r3, #2
 8002dcc:	71fb      	strb	r3, [r7, #7]
		if(status_debug != VL53L0X_ERROR_NONE)
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <sensor_init+0x110>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <sensor_init+0xea>
	for(int i = 0 ; i < n_vl53l0x; i++){
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	dd9b      	ble.n	8002d1c <sensor_init+0x20>
			break;
	}
}
 8002de4:	e000      	b.n	8002de8 <sensor_init+0xec>
			break;
 8002de6:	bf00      	nop
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40010800 	.word	0x40010800
 8002df4:	2000066c 	.word	0x2000066c
 8002df8:	20000f9c 	.word	0x20000f9c
 8002dfc:	2000041c 	.word	0x2000041c
 8002e00:	20000fb4 	.word	0x20000fb4
 8002e04:	20000fe4 	.word	0x20000fe4
 8002e08:	20000ffc 	.word	0x20000ffc
 8002e0c:	2000066a 	.word	0x2000066a

08002e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e14:	f001 fa3a 	bl	800428c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e18:	f000 f89a 	bl	8002f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e1c:	f000 faa2 	bl	8003364 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002e20:	f000 f90a 	bl	8003038 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002e24:	f000 f9cc 	bl	80031c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002e28:	f000 fa1e 	bl	8003268 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002e2c:	f000 f8d6 	bl	8002fdc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002e30:	f000 fa6e 	bl	8003310 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002e34:	2100      	movs	r1, #0
 8002e36:	483f      	ldr	r0, [pc, #252]	; (8002f34 <main+0x124>)
 8002e38:	f003 faea 	bl	8006410 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	483d      	ldr	r0, [pc, #244]	; (8002f34 <main+0x124>)
 8002e40:	f003 fae6 	bl	8006410 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002e44:	2108      	movs	r1, #8
 8002e46:	483b      	ldr	r0, [pc, #236]	; (8002f34 <main+0x124>)
 8002e48:	f003 fae2 	bl	8006410 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002e4c:	210c      	movs	r1, #12
 8002e4e:	4839      	ldr	r0, [pc, #228]	; (8002f34 <main+0x124>)
 8002e50:	f003 fade 	bl	8006410 <HAL_TIM_PWM_Start>
  	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002e54:	213c      	movs	r1, #60	; 0x3c
 8002e56:	4838      	ldr	r0, [pc, #224]	; (8002f38 <main+0x128>)
 8002e58:	f003 fc1e 	bl	8006698 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Base_Start_IT(&htim2);
 8002e5c:	4836      	ldr	r0, [pc, #216]	; (8002f38 <main+0x128>)
 8002e5e:	f003 fa2d 	bl	80062bc <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002e62:	213c      	movs	r1, #60	; 0x3c
 8002e64:	4835      	ldr	r0, [pc, #212]	; (8002f3c <main+0x12c>)
 8002e66:	f003 fc17 	bl	8006698 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Base_Start_IT(&htim3);
 8002e6a:	4834      	ldr	r0, [pc, #208]	; (8002f3c <main+0x12c>)
 8002e6c:	f003 fa26 	bl	80062bc <HAL_TIM_Base_Start_IT>
	HAL_Delay(2000);
 8002e70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e74:	f001 fa6c 	bl	8004350 <HAL_Delay>

	Rmode = 0;
 8002e78:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <main+0x130>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
	status = 0;
 8002e7e:	4b31      	ldr	r3, [pc, #196]	; (8002f44 <main+0x134>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 8002e84:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <main+0x124>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a2a      	ldr	r2, [pc, #168]	; (8002f34 <main+0x124>)
 8002e8a:	68d2      	ldr	r2, [r2, #12]
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 8002e8e:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <main+0x124>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a28      	ldr	r2, [pc, #160]	; (8002f34 <main+0x124>)
 8002e94:	68d2      	ldr	r2, [r2, #12]
 8002e96:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 8002e98:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <main+0x124>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a25      	ldr	r2, [pc, #148]	; (8002f34 <main+0x124>)
 8002e9e:	68d2      	ldr	r2, [r2, #12]
 8002ea0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <main+0x124>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a23      	ldr	r2, [pc, #140]	; (8002f34 <main+0x124>)
 8002ea8:	68d2      	ldr	r2, [r2, #12]
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
	#if debug == 1
		sprintf((char*)uart_buffer, "uart send data\n");
		HAL_UART_Transmit(&huart3, uart_buffer, sizeof (uart_buffer), 10);
	#endif
	HAL_Delay(2000);
 8002eac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002eb0:	f001 fa4e 	bl	8004350 <HAL_Delay>
	sensor_init();
 8002eb4:	f7ff ff22 	bl	8002cfc <sensor_init>
	if(status_debug == VL53L0X_ERROR_NONE){
 8002eb8:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <main+0x138>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b25b      	sxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d105      	bne.n	8002ece <main+0xbe>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ec8:	4820      	ldr	r0, [pc, #128]	; (8002f4c <main+0x13c>)
 8002eca:	f001 fd29 	bl	8004920 <HAL_GPIO_WritePin>
			b = TIM3->CNT;
		#endif
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Rmode == 1) {
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <main+0x130>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d114      	bne.n	8002f02 <main+0xf2>
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002ed8:	2006      	movs	r0, #6
 8002eda:	f001 fb82 	bl	80045e2 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8002ede:	2007      	movs	r0, #7
 8002ee0:	f001 fb7f 	bl	80045e2 <HAL_NVIC_DisableIRQ>
			HAL_Delay(2000);
 8002ee4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ee8:	f001 fa32 	bl	8004350 <HAL_Delay>
			start_fill();
 8002eec:	f7fd fe3e 	bl	8000b6c <start_fill>


			//findShortestPath();
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ef0:	2006      	movs	r0, #6
 8002ef2:	f001 fb68 	bl	80045c6 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002ef6:	2007      	movs	r0, #7
 8002ef8:	f001 fb65 	bl	80045c6 <HAL_NVIC_EnableIRQ>
			Rmode = 0;
 8002efc:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <main+0x130>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
		}
		if (Rmode == 2) {
 8002f02:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <main+0x130>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d1e0      	bne.n	8002ece <main+0xbe>
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002f0c:	2006      	movs	r0, #6
 8002f0e:	f001 fb68 	bl	80045e2 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8002f12:	2007      	movs	r0, #7
 8002f14:	f001 fb65 	bl	80045e2 <HAL_NVIC_DisableIRQ>

			HAL_Delay(500);
 8002f18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f1c:	f001 fa18 	bl	8004350 <HAL_Delay>
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f20:	2006      	movs	r0, #6
 8002f22:	f001 fb50 	bl	80045c6 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002f26:	2007      	movs	r0, #7
 8002f28:	f001 fb4d 	bl	80045c6 <HAL_NVIC_EnableIRQ>
			Rmode = 0;
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <main+0x130>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
		if (Rmode == 1) {
 8002f32:	e7cc      	b.n	8002ece <main+0xbe>
 8002f34:	20000470 	.word	0x20000470
 8002f38:	200004b8 	.word	0x200004b8
 8002f3c:	20000500 	.word	0x20000500
 8002f40:	20000658 	.word	0x20000658
 8002f44:	20000659 	.word	0x20000659
 8002f48:	2000066a 	.word	0x2000066a
 8002f4c:	40011000 	.word	0x40011000

08002f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b090      	sub	sp, #64	; 0x40
 8002f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f56:	f107 0318 	add.w	r3, r7, #24
 8002f5a:	2228      	movs	r2, #40	; 0x28
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f009 fa70 	bl	800c444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	60da      	str	r2, [r3, #12]
 8002f70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f72:	2301      	movs	r3, #1
 8002f74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f80:	2301      	movs	r3, #1
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f84:	2302      	movs	r3, #2
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002f8e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f94:	f107 0318 	add.w	r3, r7, #24
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f002 fd2f 	bl	80059fc <HAL_RCC_OscConfig>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002fa4:	f000 fa6a 	bl	800347c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fa8:	230f      	movs	r3, #15
 8002faa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fac:	2302      	movs	r3, #2
 8002fae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f002 ff9c 	bl	8005f00 <HAL_RCC_ClockConfig>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002fce:	f000 fa55 	bl	800347c <Error_Handler>
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	3740      	adds	r7, #64	; 0x40
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <MX_I2C1_Init+0x50>)
 8002fe2:	4a13      	ldr	r2, [pc, #76]	; (8003030 <MX_I2C1_Init+0x54>)
 8002fe4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <MX_I2C1_Init+0x50>)
 8002fe8:	4a12      	ldr	r2, [pc, #72]	; (8003034 <MX_I2C1_Init+0x58>)
 8002fea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <MX_I2C1_Init+0x50>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <MX_I2C1_Init+0x50>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <MX_I2C1_Init+0x50>)
 8002ffa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ffe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <MX_I2C1_Init+0x50>)
 8003002:	2200      	movs	r2, #0
 8003004:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <MX_I2C1_Init+0x50>)
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <MX_I2C1_Init+0x50>)
 800300e:	2200      	movs	r2, #0
 8003010:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <MX_I2C1_Init+0x50>)
 8003014:	2200      	movs	r2, #0
 8003016:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003018:	4804      	ldr	r0, [pc, #16]	; (800302c <MX_I2C1_Init+0x50>)
 800301a:	f001 fcbb 	bl	8004994 <HAL_I2C_Init>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003024:	f000 fa2a 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003028:	bf00      	nop
 800302a:	bd80      	pop	{r7, pc}
 800302c:	2000041c 	.word	0x2000041c
 8003030:	40005400 	.word	0x40005400
 8003034:	000186a0 	.word	0x000186a0

08003038 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b096      	sub	sp, #88	; 0x58
 800303c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800303e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	609a      	str	r2, [r3, #8]
 800304a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800304c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	609a      	str	r2, [r3, #8]
 8003062:	60da      	str	r2, [r3, #12]
 8003064:	611a      	str	r2, [r3, #16]
 8003066:	615a      	str	r2, [r3, #20]
 8003068:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	2220      	movs	r2, #32
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f009 f9e7 	bl	800c444 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003076:	4b50      	ldr	r3, [pc, #320]	; (80031b8 <MX_TIM1_Init+0x180>)
 8003078:	4a50      	ldr	r2, [pc, #320]	; (80031bc <MX_TIM1_Init+0x184>)
 800307a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 800307c:	4b4e      	ldr	r3, [pc, #312]	; (80031b8 <MX_TIM1_Init+0x180>)
 800307e:	2263      	movs	r2, #99	; 0x63
 8003080:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003082:	4b4d      	ldr	r3, [pc, #308]	; (80031b8 <MX_TIM1_Init+0x180>)
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8003088:	4b4b      	ldr	r3, [pc, #300]	; (80031b8 <MX_TIM1_Init+0x180>)
 800308a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800308e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003090:	4b49      	ldr	r3, [pc, #292]	; (80031b8 <MX_TIM1_Init+0x180>)
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003096:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <MX_TIM1_Init+0x180>)
 8003098:	2200      	movs	r2, #0
 800309a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800309c:	4b46      	ldr	r3, [pc, #280]	; (80031b8 <MX_TIM1_Init+0x180>)
 800309e:	2280      	movs	r2, #128	; 0x80
 80030a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80030a2:	4845      	ldr	r0, [pc, #276]	; (80031b8 <MX_TIM1_Init+0x180>)
 80030a4:	f003 f8ba 	bl	800621c <HAL_TIM_Base_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80030ae:	f000 f9e5 	bl	800347c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030bc:	4619      	mov	r1, r3
 80030be:	483e      	ldr	r0, [pc, #248]	; (80031b8 <MX_TIM1_Init+0x180>)
 80030c0:	f003 fd42 	bl	8006b48 <HAL_TIM_ConfigClockSource>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80030ca:	f000 f9d7 	bl	800347c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030ce:	483a      	ldr	r0, [pc, #232]	; (80031b8 <MX_TIM1_Init+0x180>)
 80030d0:	f003 f946 	bl	8006360 <HAL_TIM_PWM_Init>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80030da:	f000 f9cf 	bl	800347c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030ea:	4619      	mov	r1, r3
 80030ec:	4832      	ldr	r0, [pc, #200]	; (80031b8 <MX_TIM1_Init+0x180>)
 80030ee:	f004 f8c3 	bl	8007278 <HAL_TIMEx_MasterConfigSynchronization>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80030f8:	f000 f9c0 	bl	800347c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030fc:	2360      	movs	r3, #96	; 0x60
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003104:	2300      	movs	r3, #0
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003108:	2300      	movs	r3, #0
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800310c:	2300      	movs	r3, #0
 800310e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003114:	2300      	movs	r3, #0
 8003116:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800311c:	2200      	movs	r2, #0
 800311e:	4619      	mov	r1, r3
 8003120:	4825      	ldr	r0, [pc, #148]	; (80031b8 <MX_TIM1_Init+0x180>)
 8003122:	f003 fc4f 	bl	80069c4 <HAL_TIM_PWM_ConfigChannel>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800312c:	f000 f9a6 	bl	800347c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003134:	2204      	movs	r2, #4
 8003136:	4619      	mov	r1, r3
 8003138:	481f      	ldr	r0, [pc, #124]	; (80031b8 <MX_TIM1_Init+0x180>)
 800313a:	f003 fc43 	bl	80069c4 <HAL_TIM_PWM_ConfigChannel>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003144:	f000 f99a 	bl	800347c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800314c:	2208      	movs	r2, #8
 800314e:	4619      	mov	r1, r3
 8003150:	4819      	ldr	r0, [pc, #100]	; (80031b8 <MX_TIM1_Init+0x180>)
 8003152:	f003 fc37 	bl	80069c4 <HAL_TIM_PWM_ConfigChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800315c:	f000 f98e 	bl	800347c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003164:	220c      	movs	r2, #12
 8003166:	4619      	mov	r1, r3
 8003168:	4813      	ldr	r0, [pc, #76]	; (80031b8 <MX_TIM1_Init+0x180>)
 800316a:	f003 fc2b 	bl	80069c4 <HAL_TIM_PWM_ConfigChannel>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003174:	f000 f982 	bl	800347c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003178:	2300      	movs	r3, #0
 800317a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800318c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003190:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003192:	2300      	movs	r3, #0
 8003194:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	4619      	mov	r1, r3
 800319a:	4807      	ldr	r0, [pc, #28]	; (80031b8 <MX_TIM1_Init+0x180>)
 800319c:	f004 f8ca 	bl	8007334 <HAL_TIMEx_ConfigBreakDeadTime>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80031a6:	f000 f969 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80031aa:	4803      	ldr	r0, [pc, #12]	; (80031b8 <MX_TIM1_Init+0x180>)
 80031ac:	f000 fab4 	bl	8003718 <HAL_TIM_MspPostInit>

}
 80031b0:	bf00      	nop
 80031b2:	3758      	adds	r7, #88	; 0x58
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000470 	.word	0x20000470
 80031bc:	40012c00 	.word	0x40012c00

080031c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08c      	sub	sp, #48	; 0x30
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031c6:	f107 030c 	add.w	r3, r7, #12
 80031ca:	2224      	movs	r2, #36	; 0x24
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f009 f938 	bl	800c444 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031dc:	4b21      	ldr	r3, [pc, #132]	; (8003264 <MX_TIM2_Init+0xa4>)
 80031de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80031e4:	4b1f      	ldr	r3, [pc, #124]	; (8003264 <MX_TIM2_Init+0xa4>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ea:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <MX_TIM2_Init+0xa4>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80031f0:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <MX_TIM2_Init+0xa4>)
 80031f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f8:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <MX_TIM2_Init+0xa4>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031fe:	4b19      	ldr	r3, [pc, #100]	; (8003264 <MX_TIM2_Init+0xa4>)
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003204:	2301      	movs	r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800320c:	2301      	movs	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003210:	2300      	movs	r3, #0
 8003212:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003218:	2300      	movs	r3, #0
 800321a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800321c:	2301      	movs	r3, #1
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003220:	2300      	movs	r3, #0
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003228:	f107 030c 	add.w	r3, r7, #12
 800322c:	4619      	mov	r1, r3
 800322e:	480d      	ldr	r0, [pc, #52]	; (8003264 <MX_TIM2_Init+0xa4>)
 8003230:	f003 f990 	bl	8006554 <HAL_TIM_Encoder_Init>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800323a:	f000 f91f 	bl	800347c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	4619      	mov	r1, r3
 800324a:	4806      	ldr	r0, [pc, #24]	; (8003264 <MX_TIM2_Init+0xa4>)
 800324c:	f004 f814 	bl	8007278 <HAL_TIMEx_MasterConfigSynchronization>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003256:	f000 f911 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800325a:	bf00      	nop
 800325c:	3730      	adds	r7, #48	; 0x30
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200004b8 	.word	0x200004b8

08003268 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08c      	sub	sp, #48	; 0x30
 800326c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800326e:	f107 030c 	add.w	r3, r7, #12
 8003272:	2224      	movs	r2, #36	; 0x24
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f009 f8e4 	bl	800c444 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003284:	4b20      	ldr	r3, [pc, #128]	; (8003308 <MX_TIM3_Init+0xa0>)
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <MX_TIM3_Init+0xa4>)
 8003288:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800328a:	4b1f      	ldr	r3, [pc, #124]	; (8003308 <MX_TIM3_Init+0xa0>)
 800328c:	2200      	movs	r2, #0
 800328e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <MX_TIM3_Init+0xa0>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003296:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <MX_TIM3_Init+0xa0>)
 8003298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800329c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <MX_TIM3_Init+0xa0>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a4:	4b18      	ldr	r3, [pc, #96]	; (8003308 <MX_TIM3_Init+0xa0>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80032aa:	2301      	movs	r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032b2:	2301      	movs	r3, #1
 80032b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80032be:	2300      	movs	r3, #0
 80032c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032c2:	2301      	movs	r3, #1
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032c6:	2300      	movs	r3, #0
 80032c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80032ce:	f107 030c 	add.w	r3, r7, #12
 80032d2:	4619      	mov	r1, r3
 80032d4:	480c      	ldr	r0, [pc, #48]	; (8003308 <MX_TIM3_Init+0xa0>)
 80032d6:	f003 f93d 	bl	8006554 <HAL_TIM_Encoder_Init>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80032e0:	f000 f8cc 	bl	800347c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032e4:	2300      	movs	r3, #0
 80032e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	4619      	mov	r1, r3
 80032f0:	4805      	ldr	r0, [pc, #20]	; (8003308 <MX_TIM3_Init+0xa0>)
 80032f2:	f003 ffc1 	bl	8007278 <HAL_TIMEx_MasterConfigSynchronization>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80032fc:	f000 f8be 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003300:	bf00      	nop
 8003302:	3730      	adds	r7, #48	; 0x30
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000500 	.word	0x20000500
 800330c:	40000400 	.word	0x40000400

08003310 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <MX_USART3_UART_Init+0x4c>)
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <MX_USART3_UART_Init+0x50>)
 8003318:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <MX_USART3_UART_Init+0x4c>)
 800331c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003320:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003322:	4b0e      	ldr	r3, [pc, #56]	; (800335c <MX_USART3_UART_Init+0x4c>)
 8003324:	2200      	movs	r2, #0
 8003326:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <MX_USART3_UART_Init+0x4c>)
 800332a:	2200      	movs	r2, #0
 800332c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800332e:	4b0b      	ldr	r3, [pc, #44]	; (800335c <MX_USART3_UART_Init+0x4c>)
 8003330:	2200      	movs	r2, #0
 8003332:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003334:	4b09      	ldr	r3, [pc, #36]	; (800335c <MX_USART3_UART_Init+0x4c>)
 8003336:	220c      	movs	r2, #12
 8003338:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <MX_USART3_UART_Init+0x4c>)
 800333c:	2200      	movs	r2, #0
 800333e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <MX_USART3_UART_Init+0x4c>)
 8003342:	2200      	movs	r2, #0
 8003344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003346:	4805      	ldr	r0, [pc, #20]	; (800335c <MX_USART3_UART_Init+0x4c>)
 8003348:	f004 f857 	bl	80073fa <HAL_UART_Init>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003352:	f000 f893 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000548 	.word	0x20000548
 8003360:	40004800 	.word	0x40004800

08003364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336a:	f107 0310 	add.w	r3, r7, #16
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003378:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <MX_GPIO_Init+0x104>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	4a3a      	ldr	r2, [pc, #232]	; (8003468 <MX_GPIO_Init+0x104>)
 800337e:	f043 0310 	orr.w	r3, r3, #16
 8003382:	6193      	str	r3, [r2, #24]
 8003384:	4b38      	ldr	r3, [pc, #224]	; (8003468 <MX_GPIO_Init+0x104>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003390:	4b35      	ldr	r3, [pc, #212]	; (8003468 <MX_GPIO_Init+0x104>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	4a34      	ldr	r2, [pc, #208]	; (8003468 <MX_GPIO_Init+0x104>)
 8003396:	f043 0320 	orr.w	r3, r3, #32
 800339a:	6193      	str	r3, [r2, #24]
 800339c:	4b32      	ldr	r3, [pc, #200]	; (8003468 <MX_GPIO_Init+0x104>)
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a8:	4b2f      	ldr	r3, [pc, #188]	; (8003468 <MX_GPIO_Init+0x104>)
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	4a2e      	ldr	r2, [pc, #184]	; (8003468 <MX_GPIO_Init+0x104>)
 80033ae:	f043 0304 	orr.w	r3, r3, #4
 80033b2:	6193      	str	r3, [r2, #24]
 80033b4:	4b2c      	ldr	r3, [pc, #176]	; (8003468 <MX_GPIO_Init+0x104>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c0:	4b29      	ldr	r3, [pc, #164]	; (8003468 <MX_GPIO_Init+0x104>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	4a28      	ldr	r2, [pc, #160]	; (8003468 <MX_GPIO_Init+0x104>)
 80033c6:	f043 0308 	orr.w	r3, r3, #8
 80033ca:	6193      	str	r3, [r2, #24]
 80033cc:	4b26      	ldr	r3, [pc, #152]	; (8003468 <MX_GPIO_Init+0x104>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80033d8:	2200      	movs	r2, #0
 80033da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033de:	4823      	ldr	r0, [pc, #140]	; (800346c <MX_GPIO_Init+0x108>)
 80033e0:	f001 fa9e 	bl	8004920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 80033e4:	2200      	movs	r2, #0
 80033e6:	217e      	movs	r1, #126	; 0x7e
 80033e8:	4821      	ldr	r0, [pc, #132]	; (8003470 <MX_GPIO_Init+0x10c>)
 80033ea:	f001 fa99 	bl	8004920 <HAL_GPIO_WritePin>
                          |xSHUT_4_Pin|xSHUT_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80033ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f4:	2301      	movs	r3, #1
 80033f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fc:	2302      	movs	r3, #2
 80033fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003400:	f107 0310 	add.w	r3, r7, #16
 8003404:	4619      	mov	r1, r3
 8003406:	4819      	ldr	r0, [pc, #100]	; (800346c <MX_GPIO_Init+0x108>)
 8003408:	f001 f906 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : xSHUT_0_Pin xSHUT_1_Pin xSHUT_2_Pin xSHUT_3_Pin
                           xSHUT_4_Pin xSHUT_5_Pin */
  GPIO_InitStruct.Pin = xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 800340c:	237e      	movs	r3, #126	; 0x7e
 800340e:	613b      	str	r3, [r7, #16]
                          |xSHUT_4_Pin|xSHUT_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003410:	2301      	movs	r3, #1
 8003412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003414:	2301      	movs	r3, #1
 8003416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003418:	2302      	movs	r3, #2
 800341a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341c:	f107 0310 	add.w	r3, r7, #16
 8003420:	4619      	mov	r1, r3
 8003422:	4813      	ldr	r0, [pc, #76]	; (8003470 <MX_GPIO_Init+0x10c>)
 8003424:	f001 f8f8 	bl	8004618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003428:	2303      	movs	r3, #3
 800342a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800342c:	4b11      	ldr	r3, [pc, #68]	; (8003474 <MX_GPIO_Init+0x110>)
 800342e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003430:	2301      	movs	r3, #1
 8003432:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003434:	f107 0310 	add.w	r3, r7, #16
 8003438:	4619      	mov	r1, r3
 800343a:	480f      	ldr	r0, [pc, #60]	; (8003478 <MX_GPIO_Init+0x114>)
 800343c:	f001 f8ec 	bl	8004618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003440:	2200      	movs	r2, #0
 8003442:	2100      	movs	r1, #0
 8003444:	2006      	movs	r0, #6
 8003446:	f001 f8a2 	bl	800458e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800344a:	2006      	movs	r0, #6
 800344c:	f001 f8bb 	bl	80045c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003450:	2200      	movs	r2, #0
 8003452:	2100      	movs	r1, #0
 8003454:	2007      	movs	r0, #7
 8003456:	f001 f89a 	bl	800458e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800345a:	2007      	movs	r0, #7
 800345c:	f001 f8b3 	bl	80045c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003460:	bf00      	nop
 8003462:	3720      	adds	r7, #32
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000
 800346c:	40011000 	.word	0x40011000
 8003470:	40010800 	.word	0x40010800
 8003474:	10210000 	.word	0x10210000
 8003478:	40010c00 	.word	0x40010c00

0800347c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003480:	b672      	cpsid	i
}
 8003482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003484:	e7fe      	b.n	8003484 <Error_Handler+0x8>
	...

08003488 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <HAL_MspInit+0x5c>)
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <HAL_MspInit+0x5c>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6193      	str	r3, [r2, #24]
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_MspInit+0x5c>)
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <HAL_MspInit+0x5c>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <HAL_MspInit+0x5c>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b0:	61d3      	str	r3, [r2, #28]
 80034b2:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <HAL_MspInit+0x5c>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ba:	607b      	str	r3, [r7, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <HAL_MspInit+0x60>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <HAL_MspInit+0x60>)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40010000 	.word	0x40010000

080034ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f4:	f107 0310 	add.w	r3, r7, #16
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a15      	ldr	r2, [pc, #84]	; (800355c <HAL_I2C_MspInit+0x70>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d123      	bne.n	8003554 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800350c:	4b14      	ldr	r3, [pc, #80]	; (8003560 <HAL_I2C_MspInit+0x74>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	4a13      	ldr	r2, [pc, #76]	; (8003560 <HAL_I2C_MspInit+0x74>)
 8003512:	f043 0308 	orr.w	r3, r3, #8
 8003516:	6193      	str	r3, [r2, #24]
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_I2C_MspInit+0x74>)
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003524:	23c0      	movs	r3, #192	; 0xc0
 8003526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003528:	2312      	movs	r3, #18
 800352a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800352c:	2303      	movs	r3, #3
 800352e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003530:	f107 0310 	add.w	r3, r7, #16
 8003534:	4619      	mov	r1, r3
 8003536:	480b      	ldr	r0, [pc, #44]	; (8003564 <HAL_I2C_MspInit+0x78>)
 8003538:	f001 f86e 	bl	8004618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <HAL_I2C_MspInit+0x74>)
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	4a07      	ldr	r2, [pc, #28]	; (8003560 <HAL_I2C_MspInit+0x74>)
 8003542:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003546:	61d3      	str	r3, [r2, #28]
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_I2C_MspInit+0x74>)
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003554:	bf00      	nop
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40005400 	.word	0x40005400
 8003560:	40021000 	.word	0x40021000
 8003564:	40010c00 	.word	0x40010c00

08003568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a09      	ldr	r2, [pc, #36]	; (800359c <HAL_TIM_Base_MspInit+0x34>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10b      	bne.n	8003592 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <HAL_TIM_Base_MspInit+0x38>)
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <HAL_TIM_Base_MspInit+0x38>)
 8003580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003584:	6193      	str	r3, [r2, #24]
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_TIM_Base_MspInit+0x38>)
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40021000 	.word	0x40021000

080035a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08e      	sub	sp, #56	; 0x38
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ac:	f107 0320 	add.w	r3, r7, #32
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c2:	d157      	bne.n	8003674 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035c4:	4b4f      	ldr	r3, [pc, #316]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	4a4e      	ldr	r2, [pc, #312]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	61d3      	str	r3, [r2, #28]
 80035d0:	4b4c      	ldr	r3, [pc, #304]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035dc:	4b49      	ldr	r3, [pc, #292]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4a48      	ldr	r2, [pc, #288]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 80035e2:	f043 0304 	orr.w	r3, r3, #4
 80035e6:	6193      	str	r3, [r2, #24]
 80035e8:	4b46      	ldr	r3, [pc, #280]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f4:	4b43      	ldr	r3, [pc, #268]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	4a42      	ldr	r2, [pc, #264]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 80035fa:	f043 0308 	orr.w	r3, r3, #8
 80035fe:	6193      	str	r3, [r2, #24]
 8003600:	4b40      	ldr	r3, [pc, #256]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800360c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003612:	2300      	movs	r3, #0
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003616:	2300      	movs	r3, #0
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361a:	f107 0320 	add.w	r3, r7, #32
 800361e:	4619      	mov	r1, r3
 8003620:	4839      	ldr	r0, [pc, #228]	; (8003708 <HAL_TIM_Encoder_MspInit+0x164>)
 8003622:	f000 fff9 	bl	8004618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003626:	2308      	movs	r3, #8
 8003628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800362a:	2300      	movs	r3, #0
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003632:	f107 0320 	add.w	r3, r7, #32
 8003636:	4619      	mov	r1, r3
 8003638:	4834      	ldr	r0, [pc, #208]	; (800370c <HAL_TIM_Encoder_MspInit+0x168>)
 800363a:	f000 ffed 	bl	8004618 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800363e:	4b34      	ldr	r3, [pc, #208]	; (8003710 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	633b      	str	r3, [r7, #48]	; 0x30
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364a:	633b      	str	r3, [r7, #48]	; 0x30
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003652:	633b      	str	r3, [r7, #48]	; 0x30
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800365a:	633b      	str	r3, [r7, #48]	; 0x30
 800365c:	4a2c      	ldr	r2, [pc, #176]	; (8003710 <HAL_TIM_Encoder_MspInit+0x16c>)
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003662:	2200      	movs	r2, #0
 8003664:	2100      	movs	r1, #0
 8003666:	201c      	movs	r0, #28
 8003668:	f000 ff91 	bl	800458e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800366c:	201c      	movs	r0, #28
 800366e:	f000 ffaa 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003672:	e042      	b.n	80036fa <HAL_TIM_Encoder_MspInit+0x156>
  else if(htim_encoder->Instance==TIM3)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a26      	ldr	r2, [pc, #152]	; (8003714 <HAL_TIM_Encoder_MspInit+0x170>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d13d      	bne.n	80036fa <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800367e:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	4a20      	ldr	r2, [pc, #128]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	61d3      	str	r3, [r2, #28]
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003696:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	4a1a      	ldr	r2, [pc, #104]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 800369c:	f043 0308 	orr.w	r3, r3, #8
 80036a0:	6193      	str	r3, [r2, #24]
 80036a2:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_TIM_Encoder_MspInit+0x160>)
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80036ae:	2330      	movs	r3, #48	; 0x30
 80036b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036b2:	2300      	movs	r3, #0
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ba:	f107 0320 	add.w	r3, r7, #32
 80036be:	4619      	mov	r1, r3
 80036c0:	4812      	ldr	r0, [pc, #72]	; (800370c <HAL_TIM_Encoder_MspInit+0x168>)
 80036c2:	f000 ffa9 	bl	8004618 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80036c6:	4b12      	ldr	r3, [pc, #72]	; (8003710 <HAL_TIM_Encoder_MspInit+0x16c>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	637b      	str	r3, [r7, #52]	; 0x34
 80036cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80036da:	637b      	str	r3, [r7, #52]	; 0x34
 80036dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036e2:	637b      	str	r3, [r7, #52]	; 0x34
 80036e4:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <HAL_TIM_Encoder_MspInit+0x16c>)
 80036e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e8:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80036ea:	2200      	movs	r2, #0
 80036ec:	2100      	movs	r1, #0
 80036ee:	201d      	movs	r0, #29
 80036f0:	f000 ff4d 	bl	800458e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036f4:	201d      	movs	r0, #29
 80036f6:	f000 ff66 	bl	80045c6 <HAL_NVIC_EnableIRQ>
}
 80036fa:	bf00      	nop
 80036fc:	3738      	adds	r7, #56	; 0x38
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000
 8003708:	40010800 	.word	0x40010800
 800370c:	40010c00 	.word	0x40010c00
 8003710:	40010000 	.word	0x40010000
 8003714:	40000400 	.word	0x40000400

08003718 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003720:	f107 0310 	add.w	r3, r7, #16
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a10      	ldr	r2, [pc, #64]	; (8003774 <HAL_TIM_MspPostInit+0x5c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d118      	bne.n	800376a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_TIM_MspPostInit+0x60>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	4a0e      	ldr	r2, [pc, #56]	; (8003778 <HAL_TIM_MspPostInit+0x60>)
 800373e:	f043 0304 	orr.w	r3, r3, #4
 8003742:	6193      	str	r3, [r2, #24]
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <HAL_TIM_MspPostInit+0x60>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003750:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003754:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003756:	2302      	movs	r3, #2
 8003758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375a:	2302      	movs	r3, #2
 800375c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800375e:	f107 0310 	add.w	r3, r7, #16
 8003762:	4619      	mov	r1, r3
 8003764:	4805      	ldr	r0, [pc, #20]	; (800377c <HAL_TIM_MspPostInit+0x64>)
 8003766:	f000 ff57 	bl	8004618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800376a:	bf00      	nop
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40021000 	.word	0x40021000
 800377c:	40010800 	.word	0x40010800

08003780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 0310 	add.w	r3, r7, #16
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1c      	ldr	r2, [pc, #112]	; (800380c <HAL_UART_MspInit+0x8c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d131      	bne.n	8003804 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_UART_MspInit+0x90>)
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	4a1a      	ldr	r2, [pc, #104]	; (8003810 <HAL_UART_MspInit+0x90>)
 80037a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037aa:	61d3      	str	r3, [r2, #28]
 80037ac:	4b18      	ldr	r3, [pc, #96]	; (8003810 <HAL_UART_MspInit+0x90>)
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b8:	4b15      	ldr	r3, [pc, #84]	; (8003810 <HAL_UART_MspInit+0x90>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	4a14      	ldr	r2, [pc, #80]	; (8003810 <HAL_UART_MspInit+0x90>)
 80037be:	f043 0308 	orr.w	r3, r3, #8
 80037c2:	6193      	str	r3, [r2, #24]
 80037c4:	4b12      	ldr	r3, [pc, #72]	; (8003810 <HAL_UART_MspInit+0x90>)
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d6:	2302      	movs	r3, #2
 80037d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037da:	2303      	movs	r3, #3
 80037dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037de:	f107 0310 	add.w	r3, r7, #16
 80037e2:	4619      	mov	r1, r3
 80037e4:	480b      	ldr	r0, [pc, #44]	; (8003814 <HAL_UART_MspInit+0x94>)
 80037e6:	f000 ff17 	bl	8004618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80037ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f8:	f107 0310 	add.w	r3, r7, #16
 80037fc:	4619      	mov	r1, r3
 80037fe:	4805      	ldr	r0, [pc, #20]	; (8003814 <HAL_UART_MspInit+0x94>)
 8003800:	f000 ff0a 	bl	8004618 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003804:	bf00      	nop
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40004800 	.word	0x40004800
 8003810:	40021000 	.word	0x40021000
 8003814:	40010c00 	.word	0x40010c00

08003818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800381c:	e7fe      	b.n	800381c <NMI_Handler+0x4>

0800381e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800381e:	b480      	push	{r7}
 8003820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003822:	e7fe      	b.n	8003822 <HardFault_Handler+0x4>

08003824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003828:	e7fe      	b.n	8003828 <MemManage_Handler+0x4>

0800382a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800382e:	e7fe      	b.n	800382e <BusFault_Handler+0x4>

08003830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003834:	e7fe      	b.n	8003834 <UsageFault_Handler+0x4>

08003836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800384e:	b480      	push	{r7}
 8003850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800385e:	f000 fd5b 	bl	8004318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800386c:	2001      	movs	r0, #1
 800386e:	f001 f86f 	bl	8004950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	Rmode = 2;
 8003872:	4b02      	ldr	r3, [pc, #8]	; (800387c <EXTI0_IRQHandler+0x14>)
 8003874:	2202      	movs	r2, #2
 8003876:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 8003878:	bf00      	nop
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000658 	.word	0x20000658

08003880 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003884:	2002      	movs	r0, #2
 8003886:	f001 f863 	bl	8004950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	Rmode = 1;
 800388a:	4b02      	ldr	r3, [pc, #8]	; (8003894 <EXTI1_IRQHandler+0x14>)
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 8003890:	bf00      	nop
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000658 	.word	0x20000658

08003898 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800389c:	4812      	ldr	r0, [pc, #72]	; (80038e8 <TIM2_IRQHandler+0x50>)
 800389e:	f002 ff89 	bl	80067b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if(status == turn_right_90 || status == turn_right_45){
 80038a2:	4b12      	ldr	r3, [pc, #72]	; (80038ec <TIM2_IRQHandler+0x54>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b25b      	sxtb	r3, r3
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d005      	beq.n	80038ba <TIM2_IRQHandler+0x22>
 80038ae:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <TIM2_IRQHandler+0x54>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	b25b      	sxtb	r3, r3
 80038b4:	f113 0f02 	cmn.w	r3, #2
 80038b8:	d103      	bne.n	80038c2 <TIM2_IRQHandler+0x2a>
	  status = 0;
 80038ba:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <TIM2_IRQHandler+0x54>)
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
	  flag_uturn+=1;
	  brake(0);
  }

  /* USER CODE END TIM2_IRQn 1 */
}
 80038c0:	e00f      	b.n	80038e2 <TIM2_IRQHandler+0x4a>
  } else if(status == u_turn){
 80038c2:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <TIM2_IRQHandler+0x54>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b25b      	sxtb	r3, r3
 80038c8:	f113 0f05 	cmn.w	r3, #5
 80038cc:	d109      	bne.n	80038e2 <TIM2_IRQHandler+0x4a>
	  flag_uturn+=1;
 80038ce:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <TIM2_IRQHandler+0x58>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	3301      	adds	r3, #1
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <TIM2_IRQHandler+0x58>)
 80038da:	701a      	strb	r2, [r3, #0]
	  brake(0);
 80038dc:	2000      	movs	r0, #0
 80038de:	f000 fc73 	bl	80041c8 <brake>
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200004b8 	.word	0x200004b8
 80038ec:	20000659 	.word	0x20000659
 80038f0:	2000124e 	.word	0x2000124e

080038f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038f8:	4815      	ldr	r0, [pc, #84]	; (8003950 <TIM3_IRQHandler+0x5c>)
 80038fa:	f002 ff5b 	bl	80067b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(status == turn_left_90 || status == turn_left_45 || status == straight){
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <TIM3_IRQHandler+0x60>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	b25b      	sxtb	r3, r3
 8003904:	f113 0f04 	cmn.w	r3, #4
 8003908:	d00b      	beq.n	8003922 <TIM3_IRQHandler+0x2e>
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <TIM3_IRQHandler+0x60>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	b25b      	sxtb	r3, r3
 8003910:	f113 0f03 	cmn.w	r3, #3
 8003914:	d005      	beq.n	8003922 <TIM3_IRQHandler+0x2e>
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <TIM3_IRQHandler+0x60>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	b25b      	sxtb	r3, r3
 800391c:	f113 0f06 	cmn.w	r3, #6
 8003920:	d103      	bne.n	800392a <TIM3_IRQHandler+0x36>
	  status = 0;
 8003922:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <TIM3_IRQHandler+0x60>)
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]
	  flag_uturn+=1;
	  brake(1);
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8003928:	e00f      	b.n	800394a <TIM3_IRQHandler+0x56>
  } else if(status == u_turn){
 800392a:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <TIM3_IRQHandler+0x60>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	b25b      	sxtb	r3, r3
 8003930:	f113 0f05 	cmn.w	r3, #5
 8003934:	d109      	bne.n	800394a <TIM3_IRQHandler+0x56>
	  flag_uturn+=1;
 8003936:	4b08      	ldr	r3, [pc, #32]	; (8003958 <TIM3_IRQHandler+0x64>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	3301      	adds	r3, #1
 800393e:	b2da      	uxtb	r2, r3
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <TIM3_IRQHandler+0x64>)
 8003942:	701a      	strb	r2, [r3, #0]
	  brake(1);
 8003944:	2001      	movs	r0, #1
 8003946:	f000 fc3f 	bl	80041c8 <brake>
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000500 	.word	0x20000500
 8003954:	20000659 	.word	0x20000659
 8003958:	2000124e 	.word	0x2000124e

0800395c <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003960:	bf00      	nop
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <running_left_motor>:
const float turn90_arc_en = (float)turning_radius * M_PI * 4 * (90.0/360) * counts_per_1mm;
const float turn45_arc_en = (float)turning_radius * M_PI * 4 * (45.0/360) * counts_per_1mm;
volatile uint8_t flag_uturn;


void running_left_motor(uint8_t mode, uint16_t speed){
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	460a      	mov	r2, r1
 8003972:	71fb      	strb	r3, [r7, #7]
 8003974:	4613      	mov	r3, r2
 8003976:	80bb      	strh	r3, [r7, #4]
	if(mode == 0){
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d108      	bne.n	8003990 <running_left_motor+0x28>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <running_left_motor+0x44>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, speed);
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <running_left_motor+0x44>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	88ba      	ldrh	r2, [r7, #4]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
	} else {
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
	}
}
 800398e:	e007      	b.n	80039a0 <running_left_motor+0x38>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <running_left_motor+0x44>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	88ba      	ldrh	r2, [r7, #4]
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8003998:	4b04      	ldr	r3, [pc, #16]	; (80039ac <running_left_motor+0x44>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	641a      	str	r2, [r3, #64]	; 0x40
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000470 	.word	0x20000470

080039b0 <running_right_motor>:

void running_right_motor(uint8_t mode, uint16_t speed){
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	460a      	mov	r2, r1
 80039ba:	71fb      	strb	r3, [r7, #7]
 80039bc:	4613      	mov	r3, r2
 80039be:	80bb      	strh	r3, [r7, #4]
	if(mode == 0){
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d108      	bne.n	80039d8 <running_right_motor+0x28>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <running_right_motor+0x44>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	88ba      	ldrh	r2, [r7, #4]
 80039cc:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <running_right_motor+0x44>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2200      	movs	r2, #0
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38
	} else {
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
	}
}
 80039d6:	e007      	b.n	80039e8 <running_right_motor+0x38>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <running_right_motor+0x44>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2200      	movs	r2, #0
 80039de:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <running_right_motor+0x44>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	88ba      	ldrh	r2, [r7, #4]
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20000470 	.word	0x20000470

080039f8 <u_turnf>:

void u_turnf(uint8_t *direction) {
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d81b      	bhi.n	8003a40 <u_turnf+0x48>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <u_turnf+0x18>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a29 	.word	0x08003a29
 8003a18:	08003a31 	.word	0x08003a31
 8003a1c:	08003a39 	.word	0x08003a39
		case west:  *direction = east;   break;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	e00b      	b.n	8003a40 <u_turnf+0x48>
		case east:  *direction = west;   break;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	e007      	b.n	8003a40 <u_turnf+0x48>
		case north: *direction = south;  break;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2203      	movs	r2, #3
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e003      	b.n	8003a40 <u_turnf+0x48>
		case south: *direction = north;  break;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	bf00      	nop
	#if debug == 1
		sprintf((char*)uart_buffer, "uturn\n");
		HAL_UART_Transmit(&huart3, uart_buffer, sizeof (uart_buffer), 10);
	#endif

	running_left_motor(1, 500);
 8003a40:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003a44:	2001      	movs	r0, #1
 8003a46:	f7ff ff8f 	bl	8003968 <running_left_motor>
	running_right_motor(1, 500);
 8003a4a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003a4e:	2001      	movs	r0, #1
 8003a50:	f7ff ffae 	bl	80039b0 <running_right_motor>
	HAL_Delay(50);
 8003a54:	2032      	movs	r0, #50	; 0x32
 8003a56:	f000 fc7b 	bl	8004350 <HAL_Delay>
	brake(2);
 8003a5a:	2002      	movs	r0, #2
 8003a5c:	f000 fbb4 	bl	80041c8 <brake>

	uint16_t last = 2702;
 8003a60:	f640 238e 	movw	r3, #2702	; 0xa8e
 8003a64:	82fb      	strh	r3, [r7, #22]
	while(last != TIM3->CNT){
 8003a66:	e005      	b.n	8003a74 <u_turnf+0x7c>
		last = TIM3->CNT;
 8003a68:	4b55      	ldr	r3, [pc, #340]	; (8003bc0 <u_turnf+0x1c8>)
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	82fb      	strh	r3, [r7, #22]
		HAL_Delay(50);
 8003a6e:	2032      	movs	r0, #50	; 0x32
 8003a70:	f000 fc6e 	bl	8004350 <HAL_Delay>
	while(last != TIM3->CNT){
 8003a74:	8afa      	ldrh	r2, [r7, #22]
 8003a76:	4b52      	ldr	r3, [pc, #328]	; (8003bc0 <u_turnf+0x1c8>)
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d1f4      	bne.n	8003a68 <u_turnf+0x70>
	}

	uint16_t en = round(uturn_arc_en + uturn_arc_en*0.03);
 8003a7e:	4b51      	ldr	r3, [pc, #324]	; (8003bc4 <u_turnf+0x1cc>)
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fc fea7 	bl	80007d4 <__aeabi_f2d>
 8003a86:	4604      	mov	r4, r0
 8003a88:	460d      	mov	r5, r1
 8003a8a:	4b4e      	ldr	r3, [pc, #312]	; (8003bc4 <u_turnf+0x1cc>)
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fc fea1 	bl	80007d4 <__aeabi_f2d>
 8003a92:	a349      	add	r3, pc, #292	; (adr r3, 8003bb8 <u_turnf+0x1c0>)
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f7fc fb5a 	bl	8000150 <__aeabi_dmul>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	f7fc fd38 	bl	8000518 <__adddf3>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	f008 fc4a 	bl	800c348 <round>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	f7fc fee2 	bl	8000884 <__aeabi_d2uiz>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	827b      	strh	r3, [r7, #18]
	__HAL_TIM_SET_COUNTER(&htim2, en);
 8003ac4:	4b40      	ldr	r3, [pc, #256]	; (8003bc8 <u_turnf+0x1d0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	8a7a      	ldrh	r2, [r7, #18]
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003acc:	4b3f      	ldr	r3, [pc, #252]	; (8003bcc <u_turnf+0x1d4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8003ad4:	4b3c      	ldr	r3, [pc, #240]	; (8003bc8 <u_turnf+0x1d0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003adc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ade:	4b3a      	ldr	r3, [pc, #232]	; (8003bc8 <u_turnf+0x1d0>)
 8003ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ae4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, en);
 8003ae6:	4b39      	ldr	r3, [pc, #228]	; (8003bcc <u_turnf+0x1d4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	8a7a      	ldrh	r2, [r7, #18]
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aee:	8a7b      	ldrh	r3, [r7, #18]
 8003af0:	4a36      	ldr	r2, [pc, #216]	; (8003bcc <u_turnf+0x1d4>)
 8003af2:	60d3      	str	r3, [r2, #12]
	status = u_turn;
 8003af4:	4b36      	ldr	r3, [pc, #216]	; (8003bd0 <u_turnf+0x1d8>)
 8003af6:	22fb      	movs	r2, #251	; 0xfb
 8003af8:	701a      	strb	r2, [r3, #0]
	flag_uturn = 0;
 8003afa:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <u_turnf+0x1dc>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]

	uint16_t speed = 300;
 8003b00:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003b04:	82bb      	strh	r3, [r7, #20]
	int32_t P;
	while(flag_uturn == 0){
 8003b06:	e032      	b.n	8003b6e <u_turnf+0x176>
		P = ((int32_t)TIM3->CNT - ((int32_t)en - TIM2->CNT)) *2;
 8003b08:	4b2d      	ldr	r3, [pc, #180]	; (8003bc0 <u_turnf+0x1c8>)
 8003b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b12:	8a7b      	ldrh	r3, [r7, #18]
 8003b14:	1acb      	subs	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	60fb      	str	r3, [r7, #12]
		running_left_motor(1, speed + P);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	8abb      	ldrh	r3, [r7, #20]
 8003b22:	4413      	add	r3, r2
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	4619      	mov	r1, r3
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f7ff ff1d 	bl	8003968 <running_left_motor>
		running_right_motor(0, speed - P);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	8aba      	ldrh	r2, [r7, #20]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	4619      	mov	r1, r3
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f7ff ff38 	bl	80039b0 <running_right_motor>
		if(en - TIM3->CNT < 300){
 8003b40:	8a7a      	ldrh	r2, [r7, #18]
 8003b42:	4b1f      	ldr	r3, [pc, #124]	; (8003bc0 <u_turnf+0x1c8>)
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003b4c:	d202      	bcs.n	8003b54 <u_turnf+0x15c>
			speed = 300;
 8003b4e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003b52:	82bb      	strh	r3, [r7, #20]
		}
		a = (int32_t)en - TIM2->CNT;
 8003b54:	8a7a      	ldrh	r2, [r7, #18]
 8003b56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4b1d      	ldr	r3, [pc, #116]	; (8003bd8 <u_turnf+0x1e0>)
 8003b62:	601a      	str	r2, [r3, #0]
		b = TIM3->CNT;
 8003b64:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <u_turnf+0x1c8>)
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b1c      	ldr	r3, [pc, #112]	; (8003bdc <u_turnf+0x1e4>)
 8003b6c:	601a      	str	r2, [r3, #0]
	while(flag_uturn == 0){
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <u_turnf+0x1dc>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0c7      	beq.n	8003b08 <u_turnf+0x110>
	}
	while(flag_uturn < 2);
 8003b78:	bf00      	nop
 8003b7a:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <u_turnf+0x1dc>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d9fa      	bls.n	8003b7a <u_turnf+0x182>
	status = 0;
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <u_turnf+0x1d8>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
	running_left_motor(1, 500);
 8003b8a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f7ff feea 	bl	8003968 <running_left_motor>
	running_right_motor(1, 500);
 8003b94:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f7ff ff09 	bl	80039b0 <running_right_motor>
	HAL_Delay(50);
 8003b9e:	2032      	movs	r0, #50	; 0x32
 8003ba0:	f000 fbd6 	bl	8004350 <HAL_Delay>
	brake(2);
 8003ba4:	2002      	movs	r0, #2
 8003ba6:	f000 fb0f 	bl	80041c8 <brake>
}
 8003baa:	bf00      	nop
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	f3af 8000 	nop.w
 8003bb8:	eb851eb8 	.word	0xeb851eb8
 8003bbc:	3f9eb851 	.word	0x3f9eb851
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	4494b08d 	.word	0x4494b08d
 8003bc8:	200004b8 	.word	0x200004b8
 8003bcc:	20000500 	.word	0x20000500
 8003bd0:	20000659 	.word	0x20000659
 8003bd4:	2000124e 	.word	0x2000124e
 8003bd8:	2000065c 	.word	0x2000065c
 8003bdc:	20000660 	.word	0x20000660

08003be0 <turn_left90>:
	brake(0);
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	__HAL_TIM_SET_COUNTER(&htim3, 0);
}

void turn_left90(uint8_t *direction) {
 8003be0:	b5b0      	push	{r4, r5, r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d81b      	bhi.n	8003c28 <turn_left90+0x48>
 8003bf0:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <turn_left90+0x18>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003c11 	.word	0x08003c11
 8003c00:	08003c19 	.word	0x08003c19
 8003c04:	08003c21 	.word	0x08003c21
		case west:  *direction = south; break;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	e00b      	b.n	8003c28 <turn_left90+0x48>
		case east:  *direction = north; break;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	e007      	b.n	8003c28 <turn_left90+0x48>
		case north: *direction = west;  break;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	e003      	b.n	8003c28 <turn_left90+0x48>
		case south: *direction = east;  break;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	bf00      	nop
	#if debug == 1
		sprintf((char*)uart_buffer, "turn_left90\n");
		HAL_UART_Transmit(&huart3, uart_buffer, sizeof (uart_buffer), 10);
	#endif

	uint16_t last = 2702;
 8003c28:	f640 238e 	movw	r3, #2702	; 0xa8e
 8003c2c:	81fb      	strh	r3, [r7, #14]
	while(last != TIM3->CNT){
 8003c2e:	e005      	b.n	8003c3c <turn_left90+0x5c>
		last = TIM3->CNT;
 8003c30:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <turn_left90+0x170>)
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	81fb      	strh	r3, [r7, #14]
		HAL_Delay(50);
 8003c36:	2032      	movs	r0, #50	; 0x32
 8003c38:	f000 fb8a 	bl	8004350 <HAL_Delay>
	while(last != TIM3->CNT){
 8003c3c:	89fa      	ldrh	r2, [r7, #14]
 8003c3e:	4b44      	ldr	r3, [pc, #272]	; (8003d50 <turn_left90+0x170>)
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d1f4      	bne.n	8003c30 <turn_left90+0x50>
	}

	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003c46:	4b43      	ldr	r3, [pc, #268]	; (8003d54 <turn_left90+0x174>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003c4e:	4b42      	ldr	r3, [pc, #264]	; (8003d58 <turn_left90+0x178>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8003c56:	4b40      	ldr	r3, [pc, #256]	; (8003d58 <turn_left90+0x178>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c60:	4b3d      	ldr	r3, [pc, #244]	; (8003d58 <turn_left90+0x178>)
 8003c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c66:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn90_arc_en + turn90_arc_en*0.1));
 8003c68:	4b3c      	ldr	r3, [pc, #240]	; (8003d5c <turn_left90+0x17c>)
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fc fdb2 	bl	80007d4 <__aeabi_f2d>
 8003c70:	4604      	mov	r4, r0
 8003c72:	460d      	mov	r5, r1
 8003c74:	4b39      	ldr	r3, [pc, #228]	; (8003d5c <turn_left90+0x17c>)
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fc fdac 	bl	80007d4 <__aeabi_f2d>
 8003c7c:	a332      	add	r3, pc, #200	; (adr r3, 8003d48 <turn_left90+0x168>)
 8003c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c82:	f7fc fa65 	bl	8000150 <__aeabi_dmul>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	f7fc fc43 	bl	8000518 <__adddf3>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4610      	mov	r0, r2
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f008 fb55 	bl	800c348 <round>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	492c      	ldr	r1, [pc, #176]	; (8003d54 <turn_left90+0x174>)
 8003ca4:	680c      	ldr	r4, [r1, #0]
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f7fc fdeb 	bl	8000884 <__aeabi_d2uiz>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cb2:	4b2a      	ldr	r3, [pc, #168]	; (8003d5c <turn_left90+0x17c>)
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fc fd8d 	bl	80007d4 <__aeabi_f2d>
 8003cba:	4604      	mov	r4, r0
 8003cbc:	460d      	mov	r5, r1
 8003cbe:	4b27      	ldr	r3, [pc, #156]	; (8003d5c <turn_left90+0x17c>)
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fc fd87 	bl	80007d4 <__aeabi_f2d>
 8003cc6:	a320      	add	r3, pc, #128	; (adr r3, 8003d48 <turn_left90+0x168>)
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f7fc fa40 	bl	8000150 <__aeabi_dmul>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	f7fc fc1e 	bl	8000518 <__adddf3>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f008 fb30 	bl	800c348 <round>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4610      	mov	r0, r2
 8003cee:	4619      	mov	r1, r3
 8003cf0:	f7fc fdc8 	bl	8000884 <__aeabi_d2uiz>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <turn_left90+0x174>)
 8003cf8:	60d3      	str	r3, [r2, #12]
	status = turn_left_90;
 8003cfa:	4b19      	ldr	r3, [pc, #100]	; (8003d60 <turn_left90+0x180>)
 8003cfc:	22fc      	movs	r2, #252	; 0xfc
 8003cfe:	701a      	strb	r2, [r3, #0]

	running_right_motor(0, 500);
 8003d00:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d04:	2000      	movs	r0, #0
 8003d06:	f7ff fe53 	bl	80039b0 <running_right_motor>
	while(status != 0);
 8003d0a:	bf00      	nop
 8003d0c:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <turn_left90+0x180>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	b25b      	sxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1fa      	bne.n	8003d0c <turn_left90+0x12c>
	running_right_motor(1, 500);
 8003d16:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f7ff fe48 	bl	80039b0 <running_right_motor>
	HAL_Delay(50);
 8003d20:	2032      	movs	r0, #50	; 0x32
 8003d22:	f000 fb15 	bl	8004350 <HAL_Delay>
	brake(1);
 8003d26:	2001      	movs	r0, #1
 8003d28:	f000 fa4e 	bl	80041c8 <brake>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <turn_left90+0x178>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2200      	movs	r2, #0
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <turn_left90+0x174>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bdb0      	pop	{r4, r5, r7, pc}
 8003d44:	f3af 8000 	nop.w
 8003d48:	9999999a 	.word	0x9999999a
 8003d4c:	3fb99999 	.word	0x3fb99999
 8003d50:	40000400 	.word	0x40000400
 8003d54:	20000500 	.word	0x20000500
 8003d58:	200004b8 	.word	0x200004b8
 8003d5c:	4494b08d 	.word	0x4494b08d
 8003d60:	20000659 	.word	0x20000659
 8003d64:	00000000 	.word	0x00000000

08003d68 <turn_right90>:

void turn_right90(uint8_t *direction) {
 8003d68:	b5b0      	push	{r4, r5, r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d81b      	bhi.n	8003db0 <turn_right90+0x48>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <turn_right90+0x18>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003d91 	.word	0x08003d91
 8003d84:	08003d99 	.word	0x08003d99
 8003d88:	08003da1 	.word	0x08003da1
 8003d8c:	08003da9 	.word	0x08003da9
		case west:  *direction = north; break;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e00b      	b.n	8003db0 <turn_right90+0x48>
		case east:  *direction = south; break;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	e007      	b.n	8003db0 <turn_right90+0x48>
		case north: *direction = east;  break;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e003      	b.n	8003db0 <turn_right90+0x48>
		case south: *direction = west;  break;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	701a      	strb	r2, [r3, #0]
 8003dae:	bf00      	nop
	#if debug == 1
		sprintf((char*)uart_buffer, "turn_right90\n");
		HAL_UART_Transmit(&huart3, uart_buffer, sizeof(uart_buffer), 10);
	#endif

	uint16_t last = 2702;
 8003db0:	f640 238e 	movw	r3, #2702	; 0xa8e
 8003db4:	81fb      	strh	r3, [r7, #14]
	while(last != TIM2->CNT){
 8003db6:	e006      	b.n	8003dc6 <turn_right90+0x5e>
		last = TIM2->CNT;
 8003db8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	81fb      	strh	r3, [r7, #14]
		HAL_Delay(50);
 8003dc0:	2032      	movs	r0, #50	; 0x32
 8003dc2:	f000 fac5 	bl	8004350 <HAL_Delay>
	while(last != TIM2->CNT){
 8003dc6:	89fa      	ldrh	r2, [r7, #14]
 8003dc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d1f2      	bne.n	8003db8 <turn_right90+0x50>
	}

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003dd2:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <turn_right90+0x170>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003dda:	4b40      	ldr	r3, [pc, #256]	; (8003edc <turn_right90+0x174>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, round(turn90_arc_en - turn90_arc_en*0.05));
 8003de2:	4b3f      	ldr	r3, [pc, #252]	; (8003ee0 <turn_right90+0x178>)
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fc fcf5 	bl	80007d4 <__aeabi_f2d>
 8003dea:	4604      	mov	r4, r0
 8003dec:	460d      	mov	r5, r1
 8003dee:	4b3c      	ldr	r3, [pc, #240]	; (8003ee0 <turn_right90+0x178>)
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fc fcef 	bl	80007d4 <__aeabi_f2d>
 8003df6:	a336      	add	r3, pc, #216	; (adr r3, 8003ed0 <turn_right90+0x168>)
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f7fc f9a8 	bl	8000150 <__aeabi_dmul>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4620      	mov	r0, r4
 8003e06:	4629      	mov	r1, r5
 8003e08:	f7fc fb84 	bl	8000514 <__aeabi_dsub>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	f008 fa98 	bl	800c348 <round>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	492e      	ldr	r1, [pc, #184]	; (8003ed8 <turn_right90+0x170>)
 8003e1e:	680c      	ldr	r4, [r1, #0]
 8003e20:	4610      	mov	r0, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	f7fc fd2e 	bl	8000884 <__aeabi_d2uiz>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ee0 <turn_right90+0x178>)
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fc fcd0 	bl	80007d4 <__aeabi_f2d>
 8003e34:	4604      	mov	r4, r0
 8003e36:	460d      	mov	r5, r1
 8003e38:	4b29      	ldr	r3, [pc, #164]	; (8003ee0 <turn_right90+0x178>)
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc fcca 	bl	80007d4 <__aeabi_f2d>
 8003e40:	a323      	add	r3, pc, #140	; (adr r3, 8003ed0 <turn_right90+0x168>)
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	f7fc f983 	bl	8000150 <__aeabi_dmul>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4620      	mov	r0, r4
 8003e50:	4629      	mov	r1, r5
 8003e52:	f7fc fb5f 	bl	8000514 <__aeabi_dsub>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f008 fa73 	bl	800c348 <round>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f7fc fd0b 	bl	8000884 <__aeabi_d2uiz>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4a19      	ldr	r2, [pc, #100]	; (8003ed8 <turn_right90+0x170>)
 8003e72:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 8003e74:	4b19      	ldr	r3, [pc, #100]	; (8003edc <turn_right90+0x174>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <turn_right90+0x174>)
 8003e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e84:	60da      	str	r2, [r3, #12]
	status = turn_right_90;
 8003e86:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <turn_right90+0x17c>)
 8003e88:	22ff      	movs	r2, #255	; 0xff
 8003e8a:	701a      	strb	r2, [r3, #0]

	running_left_motor(0, 500);
 8003e8c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003e90:	2000      	movs	r0, #0
 8003e92:	f7ff fd69 	bl	8003968 <running_left_motor>
	while(status != 0);
 8003e96:	bf00      	nop
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <turn_right90+0x17c>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	b25b      	sxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1fa      	bne.n	8003e98 <turn_right90+0x130>
	running_left_motor(1, 500);
 8003ea2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	f7ff fd5e 	bl	8003968 <running_left_motor>
	HAL_Delay(50);
 8003eac:	2032      	movs	r0, #50	; 0x32
 8003eae:	f000 fa4f 	bl	8004350 <HAL_Delay>
	brake(0);
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f000 f988 	bl	80041c8 <brake>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003eb8:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <turn_right90+0x170>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <turn_right90+0x174>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bdb0      	pop	{r4, r5, r7, pc}
 8003ed0:	9999999a 	.word	0x9999999a
 8003ed4:	3fa99999 	.word	0x3fa99999
 8003ed8:	200004b8 	.word	0x200004b8
 8003edc:	20000500 	.word	0x20000500
 8003ee0:	4494b08d 	.word	0x4494b08d
 8003ee4:	20000659 	.word	0x20000659

08003ee8 <go_straight>:

void go_straight(float distance, bool brakee) { //millimeter
 8003ee8:	b590      	push	{r4, r7, lr}
 8003eea:	b093      	sub	sp, #76	; 0x4c
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	70fb      	strb	r3, [r7, #3]
	uint16_t en = round(distance * counts_per_1mm);
 8003ef4:	4ba7      	ldr	r3, [pc, #668]	; (8004194 <go_straight+0x2ac>)
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fc fa53 	bl	80003a4 <__aeabi_fmul>
 8003efe:	4603      	mov	r3, r0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc fc67 	bl	80007d4 <__aeabi_f2d>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	f008 fa1b 	bl	800c348 <round>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4610      	mov	r0, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f7fc fcb3 	bl	8000884 <__aeabi_d2uiz>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	86bb      	strh	r3, [r7, #52]	; 0x34
	#if debug == 1
		sprintf((char*)uart_buffer, "go_straight: %d | brake: %d\n", (int)distance, (int)brake);
		HAL_UART_Transmit(&huart3, uart_buffer, sizeof (uart_buffer), 10);
	#endif

	if(__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) == htim1.Init.Period){
 8003f22:	4b9d      	ldr	r3, [pc, #628]	; (8004198 <go_straight+0x2b0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f28:	4b9b      	ldr	r3, [pc, #620]	; (8004198 <go_straight+0x2b0>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d111      	bne.n	8003f54 <go_straight+0x6c>
		uint16_t last = 2702;
 8003f30:	f640 238e 	movw	r3, #2702	; 0xa8e
 8003f34:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		while(last != TIM3->CNT){
 8003f38:	e006      	b.n	8003f48 <go_straight+0x60>
			last = TIM3->CNT;
 8003f3a:	4b98      	ldr	r3, [pc, #608]	; (800419c <go_straight+0x2b4>)
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			HAL_Delay(100);
 8003f42:	2064      	movs	r0, #100	; 0x64
 8003f44:	f000 fa04 	bl	8004350 <HAL_Delay>
		while(last != TIM3->CNT){
 8003f48:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003f4c:	4b93      	ldr	r3, [pc, #588]	; (800419c <go_straight+0x2b4>)
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d1f2      	bne.n	8003f3a <go_straight+0x52>
		}
	}
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8003f54:	4b92      	ldr	r3, [pc, #584]	; (80041a0 <go_straight+0x2b8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f5e:	4b90      	ldr	r3, [pc, #576]	; (80041a0 <go_straight+0x2b8>)
 8003f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f64:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, en);
 8003f66:	4b8f      	ldr	r3, [pc, #572]	; (80041a4 <go_straight+0x2bc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f70:	4a8c      	ldr	r2, [pc, #560]	; (80041a4 <go_straight+0x2bc>)
 8003f72:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003f74:	4b8a      	ldr	r3, [pc, #552]	; (80041a0 <go_straight+0x2b8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003f7c:	4b89      	ldr	r3, [pc, #548]	; (80041a4 <go_straight+0x2bc>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2200      	movs	r2, #0
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24

	status = straight;
 8003f84:	4b88      	ldr	r3, [pc, #544]	; (80041a8 <go_straight+0x2c0>)
 8003f86:	22fa      	movs	r2, #250	; 0xfa
 8003f88:	701a      	strb	r2, [r3, #0]
	int32_t Err, P, D, old_Error = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t temp_1, temp_2;
	bool useIRSensor = true;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint16_t oe2 = WidthOESide;
 8003f94:	4b85      	ldr	r3, [pc, #532]	; (80041ac <go_straight+0x2c4>)
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fc fdc8 	bl	8000b2c <__aeabi_f2uiz>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t left_sensor45, right_sensor45, left_sensor90, right_sensor90, right_sensor0 = 8000;
 8003fa0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8003fa4:	817b      	strh	r3, [r7, #10]
	uint16_t speed = speed_levels[Rmode];
 8003fa6:	4b82      	ldr	r3, [pc, #520]	; (80041b0 <go_straight+0x2c8>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	4b81      	ldr	r3, [pc, #516]	; (80041b4 <go_straight+0x2cc>)
 8003fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb4:	863b      	strh	r3, [r7, #48]	; 0x30
	while(status != 0 && right_sensor0 > oe2){
 8003fb6:	e0cc      	b.n	8004152 <go_straight+0x26a>
		vl53l0x_GetRanging_now(leftSensor90, &left_sensor90);
 8003fb8:	4b7f      	ldr	r3, [pc, #508]	; (80041b8 <go_straight+0x2d0>)
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f107 020e 	add.w	r2, r7, #14
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f007 ff95 	bl	800bef2 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(leftSensor45, &left_sensor45);
 8003fc8:	4b7b      	ldr	r3, [pc, #492]	; (80041b8 <go_straight+0x2d0>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f107 0212 	add.w	r2, r7, #18
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f007 ff8d 	bl	800bef2 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor45, &right_sensor45);
 8003fd8:	4b77      	ldr	r3, [pc, #476]	; (80041b8 <go_straight+0x2d0>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f107 0210 	add.w	r2, r7, #16
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f007 ff85 	bl	800bef2 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor90, &right_sensor90);
 8003fe8:	4b73      	ldr	r3, [pc, #460]	; (80041b8 <go_straight+0x2d0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f107 020c 	add.w	r2, r7, #12
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f007 ff7d 	bl	800bef2 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor0, &right_sensor0);
 8003ff8:	4b6f      	ldr	r3, [pc, #444]	; (80041b8 <go_straight+0x2d0>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f107 020a 	add.w	r2, r7, #10
 8004000:	4611      	mov	r1, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f007 ff75 	bl	800bef2 <vl53l0x_GetRanging_now>
		if(left_sensor45 < HasleftWallValue_45 && right_sensor45 < HasrightWallValue_45
 8004008:	8a7b      	ldrh	r3, [r7, #18]
 800400a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800400e:	d219      	bcs.n	8004044 <go_straight+0x15c>
 8004010:	8a3b      	ldrh	r3, [r7, #16]
 8004012:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004016:	d215      	bcs.n	8004044 <go_straight+0x15c>
				&& left_sensor90 < HasleftWallValue_90 && right_sensor90 < HasrightWallValue_90){
 8004018:	89fb      	ldrh	r3, [r7, #14]
 800401a:	2ba9      	cmp	r3, #169	; 0xa9
 800401c:	d812      	bhi.n	8004044 <go_straight+0x15c>
 800401e:	89bb      	ldrh	r3, [r7, #12]
 8004020:	2ba9      	cmp	r3, #169	; 0xa9
 8004022:	d80f      	bhi.n	8004044 <go_straight+0x15c>
			Err = right_sensor45 - left_sensor45 + 10;
 8004024:	8a3b      	ldrh	r3, [r7, #16]
 8004026:	461a      	mov	r2, r3
 8004028:	8a7b      	ldrh	r3, [r7, #18]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	330a      	adds	r3, #10
 800402e:	643b      	str	r3, [r7, #64]	; 0x40
			D = Err - old_Error;
 8004030:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c
			old_Error = Err;
 8004038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800403a:	63bb      	str	r3, [r7, #56]	; 0x38
			useIRSensor = true;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004042:	e042      	b.n	80040ca <go_straight+0x1e2>
		} else if(left_sensor45 < HasleftWallValue_45 && left_sensor90 < HasleftWallValue_90){
 8004044:	8a7b      	ldrh	r3, [r7, #18]
 8004046:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800404a:	d210      	bcs.n	800406e <go_straight+0x186>
 800404c:	89fb      	ldrh	r3, [r7, #14]
 800404e:	2ba9      	cmp	r3, #169	; 0xa9
 8004050:	d80d      	bhi.n	800406e <go_straight+0x186>
			Err = (int32_t)leftWallValue - (int32_t)left_sensor45;
 8004052:	8a7b      	ldrh	r3, [r7, #18]
 8004054:	f5c3 7382 	rsb	r3, r3, #260	; 0x104
 8004058:	643b      	str	r3, [r7, #64]	; 0x40
			D = Err - old_Error;
 800405a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
			old_Error = Err;
 8004062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004064:	63bb      	str	r3, [r7, #56]	; 0x38
			useIRSensor = true;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800406c:	e02d      	b.n	80040ca <go_straight+0x1e2>
		} else if(right_sensor45 < HasrightWallValue_45 && right_sensor90 < HasrightWallValue_90){
 800406e:	8a3b      	ldrh	r3, [r7, #16]
 8004070:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004074:	d210      	bcs.n	8004098 <go_straight+0x1b0>
 8004076:	89bb      	ldrh	r3, [r7, #12]
 8004078:	2ba9      	cmp	r3, #169	; 0xa9
 800407a:	d80d      	bhi.n	8004098 <go_straight+0x1b0>
			Err = (int32_t)right_sensor45 - (int32_t)rightWallValue;
 800407c:	8a3b      	ldrh	r3, [r7, #16]
 800407e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004082:	643b      	str	r3, [r7, #64]	; 0x40
			D = Err - old_Error;
 8004084:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
			old_Error = Err;
 800408c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800408e:	63bb      	str	r3, [r7, #56]	; 0x38
			useIRSensor = true;
 8004090:	2301      	movs	r3, #1
 8004092:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004096:	e018      	b.n	80040ca <go_straight+0x1e2>
		} else {
			temp_1 = TIM2->CNT;
 8004098:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
			temp_2 = TIM3->CNT;
 80040a0:	4b3e      	ldr	r3, [pc, #248]	; (800419c <go_straight+0x2b4>)
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
			Err = temp_2 - temp_1;
 80040a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	643b      	str	r3, [r7, #64]	; 0x40
			useIRSensor = false;
 80040ae:	2300      	movs	r3, #0
 80040b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			a = TIM2->CNT;
 80040b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	461a      	mov	r2, r3
 80040bc:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <go_straight+0x2d4>)
 80040be:	601a      	str	r2, [r3, #0]
			b = TIM3->CNT;
 80040c0:	4b36      	ldr	r3, [pc, #216]	; (800419c <go_straight+0x2b4>)
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <go_straight+0x2d8>)
 80040c8:	601a      	str	r2, [r3, #0]
		}
		if(useIRSensor){
 80040ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d018      	beq.n	8004104 <go_straight+0x21c>
			P = P_params[0] * Err;
 80040d2:	4b3c      	ldr	r3, [pc, #240]	; (80041c4 <go_straight+0x2dc>)
 80040d4:	681c      	ldr	r4, [r3, #0]
 80040d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80040d8:	f7fc fcae 	bl	8000a38 <__aeabi_i2f>
 80040dc:	4603      	mov	r3, r0
 80040de:	4619      	mov	r1, r3
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7fc f95f 	bl	80003a4 <__aeabi_fmul>
 80040e6:	4603      	mov	r3, r0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fc fcf9 	bl	8000ae0 <__aeabi_f2iz>
 80040ee:	4603      	mov	r3, r0
 80040f0:	63fb      	str	r3, [r7, #60]	; 0x3c
			a = right_sensor45;
 80040f2:	8a3b      	ldrh	r3, [r7, #16]
 80040f4:	461a      	mov	r2, r3
 80040f6:	4b31      	ldr	r3, [pc, #196]	; (80041bc <go_straight+0x2d4>)
 80040f8:	601a      	str	r2, [r3, #0]
			b = left_sensor45;
 80040fa:	8a7b      	ldrh	r3, [r7, #18]
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <go_straight+0x2d8>)
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e001      	b.n	8004108 <go_straight+0x220>
		} else {
			P = 0; //P_params[1] * Err;
 8004104:	2300      	movs	r3, #0
 8004106:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		P = max(-200, min(P, 200));
 8004108:	f06f 03c7 	mvn.w	r3, #199	; 0xc7
 800410c:	623b      	str	r3, [r7, #32]
 800410e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	23c8      	movs	r3, #200	; 0xc8
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	4293      	cmp	r3, r2
 800411c:	bfa8      	it	ge
 800411e:	4613      	movge	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	4293      	cmp	r3, r2
 8004128:	bfb8      	it	lt
 800412a:	4613      	movlt	r3, r2
 800412c:	63fb      	str	r3, [r7, #60]	; 0x3c
		running_left_motor(0, speed + P);
 800412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004130:	b29a      	uxth	r2, r3
 8004132:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004134:	4413      	add	r3, r2
 8004136:	b29b      	uxth	r3, r3
 8004138:	4619      	mov	r1, r3
 800413a:	2000      	movs	r0, #0
 800413c:	f7ff fc14 	bl	8003968 <running_left_motor>
		running_right_motor(0, speed - P);
 8004140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004142:	b29b      	uxth	r3, r3
 8004144:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	b29b      	uxth	r3, r3
 800414a:	4619      	mov	r1, r3
 800414c:	2000      	movs	r0, #0
 800414e:	f7ff fc2f 	bl	80039b0 <running_right_motor>
	while(status != 0 && right_sensor0 > oe2){
 8004152:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <go_straight+0x2c0>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	b25b      	sxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d004      	beq.n	8004166 <go_straight+0x27e>
 800415c:	897b      	ldrh	r3, [r7, #10]
 800415e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004160:	429a      	cmp	r2, r3
 8004162:	f4ff af29 	bcc.w	8003fb8 <go_straight+0xd0>
		//HAL_Delay(50);
	}
	if(brakee){
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00f      	beq.n	800418c <go_straight+0x2a4>
		running_right_motor(1, 500);
 800416c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004170:	2001      	movs	r0, #1
 8004172:	f7ff fc1d 	bl	80039b0 <running_right_motor>
		running_left_motor(1, 500);
 8004176:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800417a:	2001      	movs	r0, #1
 800417c:	f7ff fbf4 	bl	8003968 <running_left_motor>
		HAL_Delay(50);
 8004180:	2032      	movs	r0, #50	; 0x32
 8004182:	f000 f8e5 	bl	8004350 <HAL_Delay>
		brake(2);
 8004186:	2002      	movs	r0, #2
 8004188:	f000 f81e 	bl	80041c8 <brake>
	}
}
 800418c:	bf00      	nop
 800418e:	374c      	adds	r7, #76	; 0x4c
 8004190:	46bd      	mov	sp, r7
 8004192:	bd90      	pop	{r4, r7, pc}
 8004194:	40d85ce8 	.word	0x40d85ce8
 8004198:	20000470 	.word	0x20000470
 800419c:	40000400 	.word	0x40000400
 80041a0:	200004b8 	.word	0x200004b8
 80041a4:	20000500 	.word	0x20000500
 80041a8:	20000659 	.word	0x20000659
 80041ac:	42c20000 	.word	0x42c20000
 80041b0:	20000658 	.word	0x20000658
 80041b4:	0800c928 	.word	0x0800c928
 80041b8:	20000f9c 	.word	0x20000f9c
 80041bc:	2000065c 	.word	0x2000065c
 80041c0:	20000660 	.word	0x20000660
 80041c4:	20000000 	.word	0x20000000

080041c8 <brake>:

void brake(uint8_t mode){
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	71fb      	strb	r3, [r7, #7]
	if(mode == 0){
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <brake+0x26>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 80041d8:	4b18      	ldr	r3, [pc, #96]	; (800423c <brake+0x74>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a17      	ldr	r2, [pc, #92]	; (800423c <brake+0x74>)
 80041de:	68d2      	ldr	r2, [r2, #12]
 80041e0:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 80041e2:	4b16      	ldr	r3, [pc, #88]	; (800423c <brake+0x74>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a15      	ldr	r2, [pc, #84]	; (800423c <brake+0x74>)
 80041e8:	68d2      	ldr	r2, [r2, #12]
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
	}

}
 80041ec:	e021      	b.n	8004232 <brake+0x6a>
	} else if(mode == 1){
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d10a      	bne.n	800420a <brake+0x42>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 80041f4:	4b11      	ldr	r3, [pc, #68]	; (800423c <brake+0x74>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a10      	ldr	r2, [pc, #64]	; (800423c <brake+0x74>)
 80041fa:	68d2      	ldr	r2, [r2, #12]
 80041fc:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 80041fe:	4b0f      	ldr	r3, [pc, #60]	; (800423c <brake+0x74>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a0e      	ldr	r2, [pc, #56]	; (800423c <brake+0x74>)
 8004204:	68d2      	ldr	r2, [r2, #12]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004208:	e013      	b.n	8004232 <brake+0x6a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 800420a:	4b0c      	ldr	r3, [pc, #48]	; (800423c <brake+0x74>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a0b      	ldr	r2, [pc, #44]	; (800423c <brake+0x74>)
 8004210:	68d2      	ldr	r2, [r2, #12]
 8004212:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <brake+0x74>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a08      	ldr	r2, [pc, #32]	; (800423c <brake+0x74>)
 800421a:	68d2      	ldr	r2, [r2, #12]
 800421c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 800421e:	4b07      	ldr	r3, [pc, #28]	; (800423c <brake+0x74>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a06      	ldr	r2, [pc, #24]	; (800423c <brake+0x74>)
 8004224:	68d2      	ldr	r2, [r2, #12]
 8004226:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <brake+0x74>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a03      	ldr	r2, [pc, #12]	; (800423c <brake+0x74>)
 800422e:	68d2      	ldr	r2, [r2, #12]
 8004230:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	20000470 	.word	0x20000470

08004240 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004240:	f7ff fb8c 	bl	800395c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004244:	480b      	ldr	r0, [pc, #44]	; (8004274 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004246:	490c      	ldr	r1, [pc, #48]	; (8004278 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004248:	4a0c      	ldr	r2, [pc, #48]	; (800427c <LoopFillZerobss+0x16>)
  movs r3, #0
 800424a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800424c:	e002      	b.n	8004254 <LoopCopyDataInit>

0800424e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800424e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004252:	3304      	adds	r3, #4

08004254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004258:	d3f9      	bcc.n	800424e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800425a:	4a09      	ldr	r2, [pc, #36]	; (8004280 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800425c:	4c09      	ldr	r4, [pc, #36]	; (8004284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800425e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004260:	e001      	b.n	8004266 <LoopFillZerobss>

08004262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004264:	3204      	adds	r2, #4

08004266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004268:	d3fb      	bcc.n	8004262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800426a:	f008 f8b9 	bl	800c3e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800426e:	f7fe fdcf 	bl	8002e10 <main>
  bx lr
 8004272:	4770      	bx	lr
  ldr r0, =_sdata
 8004274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004278:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 800427c:	0800c968 	.word	0x0800c968
  ldr r2, =_sbss
 8004280:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8004284:	20001294 	.word	0x20001294

08004288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004288:	e7fe      	b.n	8004288 <ADC1_2_IRQHandler>
	...

0800428c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <HAL_Init+0x28>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a07      	ldr	r2, [pc, #28]	; (80042b4 <HAL_Init+0x28>)
 8004296:	f043 0310 	orr.w	r3, r3, #16
 800429a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800429c:	2003      	movs	r0, #3
 800429e:	f000 f96b 	bl	8004578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042a2:	200f      	movs	r0, #15
 80042a4:	f000 f808 	bl	80042b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042a8:	f7ff f8ee 	bl	8003488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40022000 	.word	0x40022000

080042b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042c0:	4b12      	ldr	r3, [pc, #72]	; (800430c <HAL_InitTick+0x54>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b12      	ldr	r3, [pc, #72]	; (8004310 <HAL_InitTick+0x58>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	4619      	mov	r1, r3
 80042ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80042d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f991 	bl	80045fe <HAL_SYSTICK_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e00e      	b.n	8004304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b0f      	cmp	r3, #15
 80042ea:	d80a      	bhi.n	8004302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042ec:	2200      	movs	r2, #0
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295
 80042f4:	f000 f94b 	bl	800458e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042f8:	4a06      	ldr	r2, [pc, #24]	; (8004314 <HAL_InitTick+0x5c>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	e000      	b.n	8004304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000008 	.word	0x20000008
 8004310:	20000010 	.word	0x20000010
 8004314:	2000000c 	.word	0x2000000c

08004318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_IncTick+0x1c>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <HAL_IncTick+0x20>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4413      	add	r3, r2
 8004328:	4a03      	ldr	r2, [pc, #12]	; (8004338 <HAL_IncTick+0x20>)
 800432a:	6013      	str	r3, [r2, #0]
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	20000010 	.word	0x20000010
 8004338:	20001250 	.word	0x20001250

0800433c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return uwTick;
 8004340:	4b02      	ldr	r3, [pc, #8]	; (800434c <HAL_GetTick+0x10>)
 8004342:	681b      	ldr	r3, [r3, #0]
}
 8004344:	4618      	mov	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	20001250 	.word	0x20001250

08004350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004358:	f7ff fff0 	bl	800433c <HAL_GetTick>
 800435c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004368:	d005      	beq.n	8004376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <HAL_Delay+0x44>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4413      	add	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004376:	bf00      	nop
 8004378:	f7ff ffe0 	bl	800433c <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	429a      	cmp	r2, r3
 8004386:	d8f7      	bhi.n	8004378 <HAL_Delay+0x28>
  {
  }
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000010 	.word	0x20000010

08004398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <__NVIC_SetPriorityGrouping+0x44>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043b4:	4013      	ands	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043ca:	4a04      	ldr	r2, [pc, #16]	; (80043dc <__NVIC_SetPriorityGrouping+0x44>)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	60d3      	str	r3, [r2, #12]
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	e000ed00 	.word	0xe000ed00

080043e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <__NVIC_GetPriorityGrouping+0x18>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	0a1b      	lsrs	r3, r3, #8
 80043ea:	f003 0307 	and.w	r3, r3, #7
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	e000ed00 	.word	0xe000ed00

080043fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440a:	2b00      	cmp	r3, #0
 800440c:	db0b      	blt.n	8004426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800440e:	79fb      	ldrb	r3, [r7, #7]
 8004410:	f003 021f 	and.w	r2, r3, #31
 8004414:	4906      	ldr	r1, [pc, #24]	; (8004430 <__NVIC_EnableIRQ+0x34>)
 8004416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	2001      	movs	r0, #1
 800441e:	fa00 f202 	lsl.w	r2, r0, r2
 8004422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr
 8004430:	e000e100 	.word	0xe000e100

08004434 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800443e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004442:	2b00      	cmp	r3, #0
 8004444:	db12      	blt.n	800446c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	f003 021f 	and.w	r2, r3, #31
 800444c:	490a      	ldr	r1, [pc, #40]	; (8004478 <__NVIC_DisableIRQ+0x44>)
 800444e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	2001      	movs	r0, #1
 8004456:	fa00 f202 	lsl.w	r2, r0, r2
 800445a:	3320      	adds	r3, #32
 800445c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004460:	f3bf 8f4f 	dsb	sy
}
 8004464:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004466:	f3bf 8f6f 	isb	sy
}
 800446a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	e000e100 	.word	0xe000e100

0800447c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	6039      	str	r1, [r7, #0]
 8004486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448c:	2b00      	cmp	r3, #0
 800448e:	db0a      	blt.n	80044a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	b2da      	uxtb	r2, r3
 8004494:	490c      	ldr	r1, [pc, #48]	; (80044c8 <__NVIC_SetPriority+0x4c>)
 8004496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449a:	0112      	lsls	r2, r2, #4
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	440b      	add	r3, r1
 80044a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044a4:	e00a      	b.n	80044bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	4908      	ldr	r1, [pc, #32]	; (80044cc <__NVIC_SetPriority+0x50>)
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	3b04      	subs	r3, #4
 80044b4:	0112      	lsls	r2, r2, #4
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	440b      	add	r3, r1
 80044ba:	761a      	strb	r2, [r3, #24]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	e000e100 	.word	0xe000e100
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b089      	sub	sp, #36	; 0x24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f1c3 0307 	rsb	r3, r3, #7
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	bf28      	it	cs
 80044ee:	2304      	movcs	r3, #4
 80044f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3304      	adds	r3, #4
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d902      	bls.n	8004500 <NVIC_EncodePriority+0x30>
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3b03      	subs	r3, #3
 80044fe:	e000      	b.n	8004502 <NVIC_EncodePriority+0x32>
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004504:	f04f 32ff 	mov.w	r2, #4294967295
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43da      	mvns	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	401a      	ands	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004518:	f04f 31ff 	mov.w	r1, #4294967295
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	fa01 f303 	lsl.w	r3, r1, r3
 8004522:	43d9      	mvns	r1, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004528:	4313      	orrs	r3, r2
         );
}
 800452a:	4618      	mov	r0, r3
 800452c:	3724      	adds	r7, #36	; 0x24
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3b01      	subs	r3, #1
 8004540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004544:	d301      	bcc.n	800454a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004546:	2301      	movs	r3, #1
 8004548:	e00f      	b.n	800456a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800454a:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <SysTick_Config+0x40>)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3b01      	subs	r3, #1
 8004550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004552:	210f      	movs	r1, #15
 8004554:	f04f 30ff 	mov.w	r0, #4294967295
 8004558:	f7ff ff90 	bl	800447c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <SysTick_Config+0x40>)
 800455e:	2200      	movs	r2, #0
 8004560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004562:	4b04      	ldr	r3, [pc, #16]	; (8004574 <SysTick_Config+0x40>)
 8004564:	2207      	movs	r2, #7
 8004566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	e000e010 	.word	0xe000e010

08004578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff ff09 	bl	8004398 <__NVIC_SetPriorityGrouping>
}
 8004586:	bf00      	nop
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800458e:	b580      	push	{r7, lr}
 8004590:	b086      	sub	sp, #24
 8004592:	af00      	add	r7, sp, #0
 8004594:	4603      	mov	r3, r0
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045a0:	f7ff ff1e 	bl	80043e0 <__NVIC_GetPriorityGrouping>
 80045a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	6978      	ldr	r0, [r7, #20]
 80045ac:	f7ff ff90 	bl	80044d0 <NVIC_EncodePriority>
 80045b0:	4602      	mov	r2, r0
 80045b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ff5f 	bl	800447c <__NVIC_SetPriority>
}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	4603      	mov	r3, r0
 80045ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff11 	bl	80043fc <__NVIC_EnableIRQ>
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	4603      	mov	r3, r0
 80045ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80045ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff1f 	bl	8004434 <__NVIC_DisableIRQ>
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff ff94 	bl	8004534 <SysTick_Config>
 800460c:	4603      	mov	r3, r0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004618:	b480      	push	{r7}
 800461a:	b08b      	sub	sp, #44	; 0x2c
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004622:	2300      	movs	r3, #0
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004626:	2300      	movs	r3, #0
 8004628:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800462a:	e169      	b.n	8004900 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800462c:	2201      	movs	r2, #1
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	429a      	cmp	r2, r3
 8004646:	f040 8158 	bne.w	80048fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4a9a      	ldr	r2, [pc, #616]	; (80048b8 <HAL_GPIO_Init+0x2a0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d05e      	beq.n	8004712 <HAL_GPIO_Init+0xfa>
 8004654:	4a98      	ldr	r2, [pc, #608]	; (80048b8 <HAL_GPIO_Init+0x2a0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d875      	bhi.n	8004746 <HAL_GPIO_Init+0x12e>
 800465a:	4a98      	ldr	r2, [pc, #608]	; (80048bc <HAL_GPIO_Init+0x2a4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d058      	beq.n	8004712 <HAL_GPIO_Init+0xfa>
 8004660:	4a96      	ldr	r2, [pc, #600]	; (80048bc <HAL_GPIO_Init+0x2a4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d86f      	bhi.n	8004746 <HAL_GPIO_Init+0x12e>
 8004666:	4a96      	ldr	r2, [pc, #600]	; (80048c0 <HAL_GPIO_Init+0x2a8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d052      	beq.n	8004712 <HAL_GPIO_Init+0xfa>
 800466c:	4a94      	ldr	r2, [pc, #592]	; (80048c0 <HAL_GPIO_Init+0x2a8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d869      	bhi.n	8004746 <HAL_GPIO_Init+0x12e>
 8004672:	4a94      	ldr	r2, [pc, #592]	; (80048c4 <HAL_GPIO_Init+0x2ac>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d04c      	beq.n	8004712 <HAL_GPIO_Init+0xfa>
 8004678:	4a92      	ldr	r2, [pc, #584]	; (80048c4 <HAL_GPIO_Init+0x2ac>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d863      	bhi.n	8004746 <HAL_GPIO_Init+0x12e>
 800467e:	4a92      	ldr	r2, [pc, #584]	; (80048c8 <HAL_GPIO_Init+0x2b0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d046      	beq.n	8004712 <HAL_GPIO_Init+0xfa>
 8004684:	4a90      	ldr	r2, [pc, #576]	; (80048c8 <HAL_GPIO_Init+0x2b0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d85d      	bhi.n	8004746 <HAL_GPIO_Init+0x12e>
 800468a:	2b12      	cmp	r3, #18
 800468c:	d82a      	bhi.n	80046e4 <HAL_GPIO_Init+0xcc>
 800468e:	2b12      	cmp	r3, #18
 8004690:	d859      	bhi.n	8004746 <HAL_GPIO_Init+0x12e>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <HAL_GPIO_Init+0x80>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	08004713 	.word	0x08004713
 800469c:	080046ed 	.word	0x080046ed
 80046a0:	080046ff 	.word	0x080046ff
 80046a4:	08004741 	.word	0x08004741
 80046a8:	08004747 	.word	0x08004747
 80046ac:	08004747 	.word	0x08004747
 80046b0:	08004747 	.word	0x08004747
 80046b4:	08004747 	.word	0x08004747
 80046b8:	08004747 	.word	0x08004747
 80046bc:	08004747 	.word	0x08004747
 80046c0:	08004747 	.word	0x08004747
 80046c4:	08004747 	.word	0x08004747
 80046c8:	08004747 	.word	0x08004747
 80046cc:	08004747 	.word	0x08004747
 80046d0:	08004747 	.word	0x08004747
 80046d4:	08004747 	.word	0x08004747
 80046d8:	08004747 	.word	0x08004747
 80046dc:	080046f5 	.word	0x080046f5
 80046e0:	08004709 	.word	0x08004709
 80046e4:	4a79      	ldr	r2, [pc, #484]	; (80048cc <HAL_GPIO_Init+0x2b4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80046ea:	e02c      	b.n	8004746 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	623b      	str	r3, [r7, #32]
          break;
 80046f2:	e029      	b.n	8004748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	3304      	adds	r3, #4
 80046fa:	623b      	str	r3, [r7, #32]
          break;
 80046fc:	e024      	b.n	8004748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	3308      	adds	r3, #8
 8004704:	623b      	str	r3, [r7, #32]
          break;
 8004706:	e01f      	b.n	8004748 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	330c      	adds	r3, #12
 800470e:	623b      	str	r3, [r7, #32]
          break;
 8004710:	e01a      	b.n	8004748 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800471a:	2304      	movs	r3, #4
 800471c:	623b      	str	r3, [r7, #32]
          break;
 800471e:	e013      	b.n	8004748 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d105      	bne.n	8004734 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004728:	2308      	movs	r3, #8
 800472a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	611a      	str	r2, [r3, #16]
          break;
 8004732:	e009      	b.n	8004748 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004734:	2308      	movs	r3, #8
 8004736:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	615a      	str	r2, [r3, #20]
          break;
 800473e:	e003      	b.n	8004748 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004740:	2300      	movs	r3, #0
 8004742:	623b      	str	r3, [r7, #32]
          break;
 8004744:	e000      	b.n	8004748 <HAL_GPIO_Init+0x130>
          break;
 8004746:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2bff      	cmp	r3, #255	; 0xff
 800474c:	d801      	bhi.n	8004752 <HAL_GPIO_Init+0x13a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	e001      	b.n	8004756 <HAL_GPIO_Init+0x13e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3304      	adds	r3, #4
 8004756:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2bff      	cmp	r3, #255	; 0xff
 800475c:	d802      	bhi.n	8004764 <HAL_GPIO_Init+0x14c>
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	e002      	b.n	800476a <HAL_GPIO_Init+0x152>
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	3b08      	subs	r3, #8
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	210f      	movs	r1, #15
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	fa01 f303 	lsl.w	r3, r1, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	401a      	ands	r2, r3
 800477c:	6a39      	ldr	r1, [r7, #32]
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	fa01 f303 	lsl.w	r3, r1, r3
 8004784:	431a      	orrs	r2, r3
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 80b1 	beq.w	80048fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004798:	4b4d      	ldr	r3, [pc, #308]	; (80048d0 <HAL_GPIO_Init+0x2b8>)
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	4a4c      	ldr	r2, [pc, #304]	; (80048d0 <HAL_GPIO_Init+0x2b8>)
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	6193      	str	r3, [r2, #24]
 80047a4:	4b4a      	ldr	r3, [pc, #296]	; (80048d0 <HAL_GPIO_Init+0x2b8>)
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80047b0:	4a48      	ldr	r2, [pc, #288]	; (80048d4 <HAL_GPIO_Init+0x2bc>)
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	089b      	lsrs	r3, r3, #2
 80047b6:	3302      	adds	r3, #2
 80047b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	220f      	movs	r2, #15
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4013      	ands	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a40      	ldr	r2, [pc, #256]	; (80048d8 <HAL_GPIO_Init+0x2c0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <HAL_GPIO_Init+0x1ec>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a3f      	ldr	r2, [pc, #252]	; (80048dc <HAL_GPIO_Init+0x2c4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00d      	beq.n	8004800 <HAL_GPIO_Init+0x1e8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a3e      	ldr	r2, [pc, #248]	; (80048e0 <HAL_GPIO_Init+0x2c8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d007      	beq.n	80047fc <HAL_GPIO_Init+0x1e4>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a3d      	ldr	r2, [pc, #244]	; (80048e4 <HAL_GPIO_Init+0x2cc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_GPIO_Init+0x1e0>
 80047f4:	2303      	movs	r3, #3
 80047f6:	e006      	b.n	8004806 <HAL_GPIO_Init+0x1ee>
 80047f8:	2304      	movs	r3, #4
 80047fa:	e004      	b.n	8004806 <HAL_GPIO_Init+0x1ee>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e002      	b.n	8004806 <HAL_GPIO_Init+0x1ee>
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <HAL_GPIO_Init+0x1ee>
 8004804:	2300      	movs	r3, #0
 8004806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004808:	f002 0203 	and.w	r2, r2, #3
 800480c:	0092      	lsls	r2, r2, #2
 800480e:	4093      	lsls	r3, r2
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004816:	492f      	ldr	r1, [pc, #188]	; (80048d4 <HAL_GPIO_Init+0x2bc>)
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	089b      	lsrs	r3, r3, #2
 800481c:	3302      	adds	r3, #2
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d006      	beq.n	800483e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004830:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <HAL_GPIO_Init+0x2d0>)
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	492c      	ldr	r1, [pc, #176]	; (80048e8 <HAL_GPIO_Init+0x2d0>)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	4313      	orrs	r3, r2
 800483a:	608b      	str	r3, [r1, #8]
 800483c:	e006      	b.n	800484c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800483e:	4b2a      	ldr	r3, [pc, #168]	; (80048e8 <HAL_GPIO_Init+0x2d0>)
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	43db      	mvns	r3, r3
 8004846:	4928      	ldr	r1, [pc, #160]	; (80048e8 <HAL_GPIO_Init+0x2d0>)
 8004848:	4013      	ands	r3, r2
 800484a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d006      	beq.n	8004866 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004858:	4b23      	ldr	r3, [pc, #140]	; (80048e8 <HAL_GPIO_Init+0x2d0>)
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	4922      	ldr	r1, [pc, #136]	; (80048e8 <HAL_GPIO_Init+0x2d0>)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	4313      	orrs	r3, r2
 8004862:	60cb      	str	r3, [r1, #12]
 8004864:	e006      	b.n	8004874 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004866:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <HAL_GPIO_Init+0x2d0>)
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	43db      	mvns	r3, r3
 800486e:	491e      	ldr	r1, [pc, #120]	; (80048e8 <HAL_GPIO_Init+0x2d0>)
 8004870:	4013      	ands	r3, r2
 8004872:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d006      	beq.n	800488e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004880:	4b19      	ldr	r3, [pc, #100]	; (80048e8 <HAL_GPIO_Init+0x2d0>)
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	4918      	ldr	r1, [pc, #96]	; (80048e8 <HAL_GPIO_Init+0x2d0>)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
 800488c:	e006      	b.n	800489c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800488e:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <HAL_GPIO_Init+0x2d0>)
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	43db      	mvns	r3, r3
 8004896:	4914      	ldr	r1, [pc, #80]	; (80048e8 <HAL_GPIO_Init+0x2d0>)
 8004898:	4013      	ands	r3, r2
 800489a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d021      	beq.n	80048ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80048a8:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <HAL_GPIO_Init+0x2d0>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	490e      	ldr	r1, [pc, #56]	; (80048e8 <HAL_GPIO_Init+0x2d0>)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]
 80048b4:	e021      	b.n	80048fa <HAL_GPIO_Init+0x2e2>
 80048b6:	bf00      	nop
 80048b8:	10320000 	.word	0x10320000
 80048bc:	10310000 	.word	0x10310000
 80048c0:	10220000 	.word	0x10220000
 80048c4:	10210000 	.word	0x10210000
 80048c8:	10120000 	.word	0x10120000
 80048cc:	10110000 	.word	0x10110000
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40010000 	.word	0x40010000
 80048d8:	40010800 	.word	0x40010800
 80048dc:	40010c00 	.word	0x40010c00
 80048e0:	40011000 	.word	0x40011000
 80048e4:	40011400 	.word	0x40011400
 80048e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_GPIO_Init+0x304>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	4909      	ldr	r1, [pc, #36]	; (800491c <HAL_GPIO_Init+0x304>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	3301      	adds	r3, #1
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	fa22 f303 	lsr.w	r3, r2, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	f47f ae8e 	bne.w	800462c <HAL_GPIO_Init+0x14>
  }
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	372c      	adds	r7, #44	; 0x2c
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr
 800491c:	40010400 	.word	0x40010400

08004920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	807b      	strh	r3, [r7, #2]
 800492c:	4613      	mov	r3, r2
 800492e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004930:	787b      	ldrb	r3, [r7, #1]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004936:	887a      	ldrh	r2, [r7, #2]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800493c:	e003      	b.n	8004946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800493e:	887b      	ldrh	r3, [r7, #2]
 8004940:	041a      	lsls	r2, r3, #16
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	611a      	str	r2, [r3, #16]
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr

08004950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800495a:	4b08      	ldr	r3, [pc, #32]	; (800497c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800495c:	695a      	ldr	r2, [r3, #20]
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	4013      	ands	r3, r2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004966:	4a05      	ldr	r2, [pc, #20]	; (800497c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f806 	bl	8004980 <HAL_GPIO_EXTI_Callback>
  }
}
 8004974:	bf00      	nop
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40010400 	.word	0x40010400

08004980 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e12b      	b.n	8004bfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fe fd96 	bl	80034ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2224      	movs	r2, #36	; 0x24
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0201 	bic.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049f8:	f001 fbca 	bl	8006190 <HAL_RCC_GetPCLK1Freq>
 80049fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	4a81      	ldr	r2, [pc, #516]	; (8004c08 <HAL_I2C_Init+0x274>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d807      	bhi.n	8004a18 <HAL_I2C_Init+0x84>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a80      	ldr	r2, [pc, #512]	; (8004c0c <HAL_I2C_Init+0x278>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	bf94      	ite	ls
 8004a10:	2301      	movls	r3, #1
 8004a12:	2300      	movhi	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e006      	b.n	8004a26 <HAL_I2C_Init+0x92>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4a7d      	ldr	r2, [pc, #500]	; (8004c10 <HAL_I2C_Init+0x27c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	bf94      	ite	ls
 8004a20:	2301      	movls	r3, #1
 8004a22:	2300      	movhi	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e0e7      	b.n	8004bfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4a78      	ldr	r2, [pc, #480]	; (8004c14 <HAL_I2C_Init+0x280>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	0c9b      	lsrs	r3, r3, #18
 8004a38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4a6a      	ldr	r2, [pc, #424]	; (8004c08 <HAL_I2C_Init+0x274>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d802      	bhi.n	8004a68 <HAL_I2C_Init+0xd4>
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	3301      	adds	r3, #1
 8004a66:	e009      	b.n	8004a7c <HAL_I2C_Init+0xe8>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	4a69      	ldr	r2, [pc, #420]	; (8004c18 <HAL_I2C_Init+0x284>)
 8004a74:	fba2 2303 	umull	r2, r3, r2, r3
 8004a78:	099b      	lsrs	r3, r3, #6
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	430b      	orrs	r3, r1
 8004a82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	495c      	ldr	r1, [pc, #368]	; (8004c08 <HAL_I2C_Init+0x274>)
 8004a98:	428b      	cmp	r3, r1
 8004a9a:	d819      	bhi.n	8004ad0 <HAL_I2C_Init+0x13c>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	1e59      	subs	r1, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aaa:	1c59      	adds	r1, r3, #1
 8004aac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ab0:	400b      	ands	r3, r1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <HAL_I2C_Init+0x138>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1e59      	subs	r1, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aca:	e051      	b.n	8004b70 <HAL_I2C_Init+0x1dc>
 8004acc:	2304      	movs	r3, #4
 8004ace:	e04f      	b.n	8004b70 <HAL_I2C_Init+0x1dc>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d111      	bne.n	8004afc <HAL_I2C_Init+0x168>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	1e58      	subs	r0, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6859      	ldr	r1, [r3, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	440b      	add	r3, r1
 8004ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aea:	3301      	adds	r3, #1
 8004aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	e012      	b.n	8004b22 <HAL_I2C_Init+0x18e>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1e58      	subs	r0, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6859      	ldr	r1, [r3, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	0099      	lsls	r1, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b12:	3301      	adds	r3, #1
 8004b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Init+0x196>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e022      	b.n	8004b70 <HAL_I2C_Init+0x1dc>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10e      	bne.n	8004b50 <HAL_I2C_Init+0x1bc>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1e58      	subs	r0, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6859      	ldr	r1, [r3, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	440b      	add	r3, r1
 8004b40:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b44:	3301      	adds	r3, #1
 8004b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4e:	e00f      	b.n	8004b70 <HAL_I2C_Init+0x1dc>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1e58      	subs	r0, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6859      	ldr	r1, [r3, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	0099      	lsls	r1, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b66:	3301      	adds	r3, #1
 8004b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	6809      	ldr	r1, [r1, #0]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69da      	ldr	r2, [r3, #28]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6911      	ldr	r1, [r2, #16]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68d2      	ldr	r2, [r2, #12]
 8004baa:	4311      	orrs	r1, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	430b      	orrs	r3, r1
 8004bb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695a      	ldr	r2, [r3, #20]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	000186a0 	.word	0x000186a0
 8004c0c:	001e847f 	.word	0x001e847f
 8004c10:	003d08ff 	.word	0x003d08ff
 8004c14:	431bde83 	.word	0x431bde83
 8004c18:	10624dd3 	.word	0x10624dd3

08004c1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	461a      	mov	r2, r3
 8004c28:	460b      	mov	r3, r1
 8004c2a:	817b      	strh	r3, [r7, #10]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c30:	f7ff fb84 	bl	800433c <HAL_GetTick>
 8004c34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	f040 80e0 	bne.w	8004e04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	2319      	movs	r3, #25
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	4970      	ldr	r1, [pc, #448]	; (8004e10 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 fc9e 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e0d3      	b.n	8004e06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_I2C_Master_Transmit+0x50>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e0cc      	b.n	8004e06 <HAL_I2C_Master_Transmit+0x1ea>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d007      	beq.n	8004c92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2221      	movs	r2, #33	; 0x21
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2210      	movs	r2, #16
 8004cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	893a      	ldrh	r2, [r7, #8]
 8004cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4a50      	ldr	r2, [pc, #320]	; (8004e14 <HAL_I2C_Master_Transmit+0x1f8>)
 8004cd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cd4:	8979      	ldrh	r1, [r7, #10]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	6a3a      	ldr	r2, [r7, #32]
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 fb08 	bl	80052f0 <I2C_MasterRequestWrite>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e08d      	b.n	8004e06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d00:	e066      	b.n	8004dd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	6a39      	ldr	r1, [r7, #32]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fd5c 	bl	80057c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00d      	beq.n	8004d2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d107      	bne.n	8004d2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e06b      	b.n	8004e06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	781a      	ldrb	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d11b      	bne.n	8004da4 <HAL_I2C_Master_Transmit+0x188>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d017      	beq.n	8004da4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	6a39      	ldr	r1, [r7, #32]
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 fd53 	bl	8005854 <I2C_WaitOnBTFFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00d      	beq.n	8004dd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d107      	bne.n	8004dcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e01a      	b.n	8004e06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d194      	bne.n	8004d02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	e000      	b.n	8004e06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e04:	2302      	movs	r3, #2
  }
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	00100002 	.word	0x00100002
 8004e14:	ffff0000 	.word	0xffff0000

08004e18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08c      	sub	sp, #48	; 0x30
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	607a      	str	r2, [r7, #4]
 8004e22:	461a      	mov	r2, r3
 8004e24:	460b      	mov	r3, r1
 8004e26:	817b      	strh	r3, [r7, #10]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e30:	f7ff fa84 	bl	800433c <HAL_GetTick>
 8004e34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	f040 824b 	bne.w	80052da <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	2319      	movs	r3, #25
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	497f      	ldr	r1, [pc, #508]	; (800504c <HAL_I2C_Master_Receive+0x234>)
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 fb9e 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e23e      	b.n	80052dc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_I2C_Master_Receive+0x54>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e237      	b.n	80052dc <HAL_I2C_Master_Receive+0x4c4>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d007      	beq.n	8004e92 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0201 	orr.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ea0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2222      	movs	r2, #34	; 0x22
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2210      	movs	r2, #16
 8004eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	893a      	ldrh	r2, [r7, #8]
 8004ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a5f      	ldr	r2, [pc, #380]	; (8005050 <HAL_I2C_Master_Receive+0x238>)
 8004ed2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ed4:	8979      	ldrh	r1, [r7, #10]
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fa8a 	bl	80053f4 <I2C_MasterRequestRead>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e1f8      	b.n	80052dc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d113      	bne.n	8004f1a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	61fb      	str	r3, [r7, #28]
 8004f06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e1cc      	b.n	80052b4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d11e      	bne.n	8004f60 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f32:	b672      	cpsid	i
}
 8004f34:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f36:	2300      	movs	r3, #0
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f5c:	b662      	cpsie	i
}
 8004f5e:	e035      	b.n	8004fcc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d11e      	bne.n	8004fa6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f78:	b672      	cpsid	i
}
 8004f7a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004fa2:	b662      	cpsie	i
}
 8004fa4:	e012      	b.n	8004fcc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004fcc:	e172      	b.n	80052b4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	f200 811f 	bhi.w	8005216 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d123      	bne.n	8005028 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 fc7d 	bl	80058e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e173      	b.n	80052dc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	3b01      	subs	r3, #1
 8005020:	b29a      	uxth	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005026:	e145      	b.n	80052b4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502c:	2b02      	cmp	r3, #2
 800502e:	d152      	bne.n	80050d6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	2200      	movs	r2, #0
 8005038:	4906      	ldr	r1, [pc, #24]	; (8005054 <HAL_I2C_Master_Receive+0x23c>)
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 faa8 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d008      	beq.n	8005058 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e148      	b.n	80052dc <HAL_I2C_Master_Receive+0x4c4>
 800504a:	bf00      	nop
 800504c:	00100002 	.word	0x00100002
 8005050:	ffff0000 	.word	0xffff0000
 8005054:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005058:	b672      	cpsid	i
}
 800505a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800506a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800509e:	b662      	cpsie	i
}
 80050a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050d4:	e0ee      	b.n	80052b4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	2200      	movs	r2, #0
 80050de:	4981      	ldr	r1, [pc, #516]	; (80052e4 <HAL_I2C_Master_Receive+0x4cc>)
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fa55 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0f5      	b.n	80052dc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005100:	b672      	cpsid	i
}
 8005102:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005136:	4b6c      	ldr	r3, [pc, #432]	; (80052e8 <HAL_I2C_Master_Receive+0x4d0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	08db      	lsrs	r3, r3, #3
 800513c:	4a6b      	ldr	r2, [pc, #428]	; (80052ec <HAL_I2C_Master_Receive+0x4d4>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	0a1a      	lsrs	r2, r3, #8
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	00da      	lsls	r2, r3, #3
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	3b01      	subs	r3, #1
 8005154:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d118      	bne.n	800518e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800517e:	b662      	cpsie	i
}
 8005180:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e0a6      	b.n	80052dc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b04      	cmp	r3, #4
 800519a:	d1d9      	bne.n	8005150 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80051de:	b662      	cpsie	i
}
 80051e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005214:	e04e      	b.n	80052b4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 fb62 	bl	80058e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e058      	b.n	80052dc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b04      	cmp	r3, #4
 8005268:	d124      	bne.n	80052b4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526e:	2b03      	cmp	r3, #3
 8005270:	d107      	bne.n	8005282 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005280:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f47f ae88 	bne.w	8004fce <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e000      	b.n	80052dc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80052da:	2302      	movs	r3, #2
  }
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3728      	adds	r7, #40	; 0x28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	00010004 	.word	0x00010004
 80052e8:	20000008 	.word	0x20000008
 80052ec:	14f8b589 	.word	0x14f8b589

080052f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	460b      	mov	r3, r1
 80052fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b08      	cmp	r3, #8
 800530a:	d006      	beq.n	800531a <I2C_MasterRequestWrite+0x2a>
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d003      	beq.n	800531a <I2C_MasterRequestWrite+0x2a>
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005318:	d108      	bne.n	800532c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	e00b      	b.n	8005344 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	2b12      	cmp	r3, #18
 8005332:	d107      	bne.n	8005344 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005342:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f91d 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00d      	beq.n	8005378 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536a:	d103      	bne.n	8005374 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005372:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e035      	b.n	80053e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005380:	d108      	bne.n	8005394 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005382:	897b      	ldrh	r3, [r7, #10]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005390:	611a      	str	r2, [r3, #16]
 8005392:	e01b      	b.n	80053cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005394:	897b      	ldrh	r3, [r7, #10]
 8005396:	11db      	asrs	r3, r3, #7
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f003 0306 	and.w	r3, r3, #6
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	f063 030f 	orn	r3, r3, #15
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	490e      	ldr	r1, [pc, #56]	; (80053ec <I2C_MasterRequestWrite+0xfc>)
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f966 	bl	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e010      	b.n	80053e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053c2:	897b      	ldrh	r3, [r7, #10]
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	4907      	ldr	r1, [pc, #28]	; (80053f0 <I2C_MasterRequestWrite+0x100>)
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f956 	bl	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	00010008 	.word	0x00010008
 80053f0:	00010002 	.word	0x00010002

080053f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	607a      	str	r2, [r7, #4]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	460b      	mov	r3, r1
 8005402:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005418:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b08      	cmp	r3, #8
 800541e:	d006      	beq.n	800542e <I2C_MasterRequestRead+0x3a>
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d003      	beq.n	800542e <I2C_MasterRequestRead+0x3a>
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800542c:	d108      	bne.n	8005440 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	e00b      	b.n	8005458 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005444:	2b11      	cmp	r3, #17
 8005446:	d107      	bne.n	8005458 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005456:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 f893 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00d      	beq.n	800548c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547e:	d103      	bne.n	8005488 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005486:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e079      	b.n	8005580 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005494:	d108      	bne.n	80054a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005496:	897b      	ldrh	r3, [r7, #10]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	611a      	str	r2, [r3, #16]
 80054a6:	e05f      	b.n	8005568 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054a8:	897b      	ldrh	r3, [r7, #10]
 80054aa:	11db      	asrs	r3, r3, #7
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f003 0306 	and.w	r3, r3, #6
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	f063 030f 	orn	r3, r3, #15
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4930      	ldr	r1, [pc, #192]	; (8005588 <I2C_MasterRequestRead+0x194>)
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 f8dc 	bl	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e054      	b.n	8005580 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054d6:	897b      	ldrh	r3, [r7, #10]
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	4929      	ldr	r1, [pc, #164]	; (800558c <I2C_MasterRequestRead+0x198>)
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f8cc 	bl	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e044      	b.n	8005580 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054f6:	2300      	movs	r3, #0
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800551a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f831 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00d      	beq.n	8005550 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005542:	d103      	bne.n	800554c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800554a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e017      	b.n	8005580 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005550:	897b      	ldrh	r3, [r7, #10]
 8005552:	11db      	asrs	r3, r3, #7
 8005554:	b2db      	uxtb	r3, r3
 8005556:	f003 0306 	and.w	r3, r3, #6
 800555a:	b2db      	uxtb	r3, r3
 800555c:	f063 030e 	orn	r3, r3, #14
 8005560:	b2da      	uxtb	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	4907      	ldr	r1, [pc, #28]	; (800558c <I2C_MasterRequestRead+0x198>)
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f888 	bl	8005684 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	00010008 	.word	0x00010008
 800558c:	00010002 	.word	0x00010002

08005590 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055a0:	e048      	b.n	8005634 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d044      	beq.n	8005634 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055aa:	f7fe fec7 	bl	800433c <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d139      	bne.n	8005634 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	0c1b      	lsrs	r3, r3, #16
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d10d      	bne.n	80055e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	43da      	mvns	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4013      	ands	r3, r2
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	e00c      	b.n	8005600 <I2C_WaitOnFlagUntilTimeout+0x70>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	43da      	mvns	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4013      	ands	r3, r2
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bf0c      	ite	eq
 80055f8:	2301      	moveq	r3, #1
 80055fa:	2300      	movne	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	79fb      	ldrb	r3, [r7, #7]
 8005602:	429a      	cmp	r2, r3
 8005604:	d116      	bne.n	8005634 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	f043 0220 	orr.w	r2, r3, #32
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e023      	b.n	800567c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	0c1b      	lsrs	r3, r3, #16
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b01      	cmp	r3, #1
 800563c:	d10d      	bne.n	800565a <I2C_WaitOnFlagUntilTimeout+0xca>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	43da      	mvns	r2, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	4013      	ands	r3, r2
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	bf0c      	ite	eq
 8005650:	2301      	moveq	r3, #1
 8005652:	2300      	movne	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	e00c      	b.n	8005674 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	43da      	mvns	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4013      	ands	r3, r2
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	bf0c      	ite	eq
 800566c:	2301      	moveq	r3, #1
 800566e:	2300      	movne	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	429a      	cmp	r2, r3
 8005678:	d093      	beq.n	80055a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005692:	e071      	b.n	8005778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800569e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a2:	d123      	bne.n	80056ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	f043 0204 	orr.w	r2, r3, #4
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e067      	b.n	80057bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f2:	d041      	beq.n	8005778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f4:	f7fe fe22 	bl	800433c <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d302      	bcc.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d136      	bne.n	8005778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	0c1b      	lsrs	r3, r3, #16
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	d10c      	bne.n	800572e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	43da      	mvns	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4013      	ands	r3, r2
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf14      	ite	ne
 8005726:	2301      	movne	r3, #1
 8005728:	2300      	moveq	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	e00b      	b.n	8005746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	43da      	mvns	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4013      	ands	r3, r2
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf14      	ite	ne
 8005740:	2301      	movne	r3, #1
 8005742:	2300      	moveq	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d016      	beq.n	8005778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	f043 0220 	orr.w	r2, r3, #32
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e021      	b.n	80057bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	0c1b      	lsrs	r3, r3, #16
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b01      	cmp	r3, #1
 8005780:	d10c      	bne.n	800579c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	43da      	mvns	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4013      	ands	r3, r2
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	bf14      	ite	ne
 8005794:	2301      	movne	r3, #1
 8005796:	2300      	moveq	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	e00b      	b.n	80057b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	43da      	mvns	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4013      	ands	r3, r2
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bf14      	ite	ne
 80057ae:	2301      	movne	r3, #1
 80057b0:	2300      	moveq	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f47f af6d 	bne.w	8005694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057d0:	e034      	b.n	800583c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f8e3 	bl	800599e <I2C_IsAcknowledgeFailed>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e034      	b.n	800584c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d028      	beq.n	800583c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ea:	f7fe fda7 	bl	800433c <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d302      	bcc.n	8005800 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d11d      	bne.n	800583c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580a:	2b80      	cmp	r3, #128	; 0x80
 800580c:	d016      	beq.n	800583c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	f043 0220 	orr.w	r2, r3, #32
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e007      	b.n	800584c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005846:	2b80      	cmp	r3, #128	; 0x80
 8005848:	d1c3      	bne.n	80057d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005860:	e034      	b.n	80058cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f89b 	bl	800599e <I2C_IsAcknowledgeFailed>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e034      	b.n	80058dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005878:	d028      	beq.n	80058cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587a:	f7fe fd5f 	bl	800433c <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	429a      	cmp	r2, r3
 8005888:	d302      	bcc.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d11d      	bne.n	80058cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b04      	cmp	r3, #4
 800589c:	d016      	beq.n	80058cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	f043 0220 	orr.w	r2, r3, #32
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e007      	b.n	80058dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d1c3      	bne.n	8005862 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058f0:	e049      	b.n	8005986 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d119      	bne.n	8005934 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0210 	mvn.w	r2, #16
 8005908:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e030      	b.n	8005996 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005934:	f7fe fd02 	bl	800433c <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	429a      	cmp	r2, r3
 8005942:	d302      	bcc.n	800594a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d11d      	bne.n	8005986 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005954:	2b40      	cmp	r3, #64	; 0x40
 8005956:	d016      	beq.n	8005986 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f043 0220 	orr.w	r2, r3, #32
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e007      	b.n	8005996 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d1ae      	bne.n	80058f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b4:	d11b      	bne.n	80059ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	f043 0204 	orr.w	r2, r3, #4
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr
	...

080059fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e272      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 8087 	beq.w	8005b2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a1c:	4b92      	ldr	r3, [pc, #584]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f003 030c 	and.w	r3, r3, #12
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d00c      	beq.n	8005a42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a28:	4b8f      	ldr	r3, [pc, #572]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f003 030c 	and.w	r3, r3, #12
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d112      	bne.n	8005a5a <HAL_RCC_OscConfig+0x5e>
 8005a34:	4b8c      	ldr	r3, [pc, #560]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a40:	d10b      	bne.n	8005a5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a42:	4b89      	ldr	r3, [pc, #548]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d06c      	beq.n	8005b28 <HAL_RCC_OscConfig+0x12c>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d168      	bne.n	8005b28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e24c      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a62:	d106      	bne.n	8005a72 <HAL_RCC_OscConfig+0x76>
 8005a64:	4b80      	ldr	r3, [pc, #512]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a7f      	ldr	r2, [pc, #508]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	e02e      	b.n	8005ad0 <HAL_RCC_OscConfig+0xd4>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCC_OscConfig+0x98>
 8005a7a:	4b7b      	ldr	r3, [pc, #492]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a7a      	ldr	r2, [pc, #488]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	4b78      	ldr	r3, [pc, #480]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a77      	ldr	r2, [pc, #476]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e01d      	b.n	8005ad0 <HAL_RCC_OscConfig+0xd4>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a9c:	d10c      	bne.n	8005ab8 <HAL_RCC_OscConfig+0xbc>
 8005a9e:	4b72      	ldr	r3, [pc, #456]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a71      	ldr	r2, [pc, #452]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	4b6f      	ldr	r3, [pc, #444]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a6e      	ldr	r2, [pc, #440]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e00b      	b.n	8005ad0 <HAL_RCC_OscConfig+0xd4>
 8005ab8:	4b6b      	ldr	r3, [pc, #428]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a6a      	ldr	r2, [pc, #424]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	4b68      	ldr	r3, [pc, #416]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a67      	ldr	r2, [pc, #412]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ace:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d013      	beq.n	8005b00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad8:	f7fe fc30 	bl	800433c <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae0:	f7fe fc2c 	bl	800433c <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b64      	cmp	r3, #100	; 0x64
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e200      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af2:	4b5d      	ldr	r3, [pc, #372]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0f0      	beq.n	8005ae0 <HAL_RCC_OscConfig+0xe4>
 8005afe:	e014      	b.n	8005b2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b00:	f7fe fc1c 	bl	800433c <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b08:	f7fe fc18 	bl	800433c <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b64      	cmp	r3, #100	; 0x64
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e1ec      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b1a:	4b53      	ldr	r3, [pc, #332]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1f0      	bne.n	8005b08 <HAL_RCC_OscConfig+0x10c>
 8005b26:	e000      	b.n	8005b2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d063      	beq.n	8005bfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b36:	4b4c      	ldr	r3, [pc, #304]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f003 030c 	and.w	r3, r3, #12
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00b      	beq.n	8005b5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b42:	4b49      	ldr	r3, [pc, #292]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f003 030c 	and.w	r3, r3, #12
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d11c      	bne.n	8005b88 <HAL_RCC_OscConfig+0x18c>
 8005b4e:	4b46      	ldr	r3, [pc, #280]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d116      	bne.n	8005b88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b5a:	4b43      	ldr	r3, [pc, #268]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <HAL_RCC_OscConfig+0x176>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d001      	beq.n	8005b72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e1c0      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b72:	4b3d      	ldr	r3, [pc, #244]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4939      	ldr	r1, [pc, #228]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b86:	e03a      	b.n	8005bfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d020      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b90:	4b36      	ldr	r3, [pc, #216]	; (8005c6c <HAL_RCC_OscConfig+0x270>)
 8005b92:	2201      	movs	r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b96:	f7fe fbd1 	bl	800433c <HAL_GetTick>
 8005b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9e:	f7fe fbcd 	bl	800433c <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e1a1      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb0:	4b2d      	ldr	r3, [pc, #180]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0f0      	beq.n	8005b9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bbc:	4b2a      	ldr	r3, [pc, #168]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4927      	ldr	r1, [pc, #156]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	600b      	str	r3, [r1, #0]
 8005bd0:	e015      	b.n	8005bfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bd2:	4b26      	ldr	r3, [pc, #152]	; (8005c6c <HAL_RCC_OscConfig+0x270>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd8:	f7fe fbb0 	bl	800433c <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005be0:	f7fe fbac 	bl	800433c <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e180      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bf2:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1f0      	bne.n	8005be0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d03a      	beq.n	8005c80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d019      	beq.n	8005c46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c12:	4b17      	ldr	r3, [pc, #92]	; (8005c70 <HAL_RCC_OscConfig+0x274>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c18:	f7fe fb90 	bl	800433c <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c20:	f7fe fb8c 	bl	800433c <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e160      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c32:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <HAL_RCC_OscConfig+0x26c>)
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0f0      	beq.n	8005c20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c3e:	2001      	movs	r0, #1
 8005c40:	f000 face 	bl	80061e0 <RCC_Delay>
 8005c44:	e01c      	b.n	8005c80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c46:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <HAL_RCC_OscConfig+0x274>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c4c:	f7fe fb76 	bl	800433c <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c52:	e00f      	b.n	8005c74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c54:	f7fe fb72 	bl	800433c <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d908      	bls.n	8005c74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e146      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
 8005c66:	bf00      	nop
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	42420000 	.word	0x42420000
 8005c70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c74:	4b92      	ldr	r3, [pc, #584]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e9      	bne.n	8005c54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80a6 	beq.w	8005dda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c92:	4b8b      	ldr	r3, [pc, #556]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10d      	bne.n	8005cba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c9e:	4b88      	ldr	r3, [pc, #544]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	4a87      	ldr	r2, [pc, #540]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca8:	61d3      	str	r3, [r2, #28]
 8005caa:	4b85      	ldr	r3, [pc, #532]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb2:	60bb      	str	r3, [r7, #8]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cba:	4b82      	ldr	r3, [pc, #520]	; (8005ec4 <HAL_RCC_OscConfig+0x4c8>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d118      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cc6:	4b7f      	ldr	r3, [pc, #508]	; (8005ec4 <HAL_RCC_OscConfig+0x4c8>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a7e      	ldr	r2, [pc, #504]	; (8005ec4 <HAL_RCC_OscConfig+0x4c8>)
 8005ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cd2:	f7fe fb33 	bl	800433c <HAL_GetTick>
 8005cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd8:	e008      	b.n	8005cec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cda:	f7fe fb2f 	bl	800433c <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b64      	cmp	r3, #100	; 0x64
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e103      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cec:	4b75      	ldr	r3, [pc, #468]	; (8005ec4 <HAL_RCC_OscConfig+0x4c8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0f0      	beq.n	8005cda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d106      	bne.n	8005d0e <HAL_RCC_OscConfig+0x312>
 8005d00:	4b6f      	ldr	r3, [pc, #444]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	4a6e      	ldr	r2, [pc, #440]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d06:	f043 0301 	orr.w	r3, r3, #1
 8005d0a:	6213      	str	r3, [r2, #32]
 8005d0c:	e02d      	b.n	8005d6a <HAL_RCC_OscConfig+0x36e>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10c      	bne.n	8005d30 <HAL_RCC_OscConfig+0x334>
 8005d16:	4b6a      	ldr	r3, [pc, #424]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	4a69      	ldr	r2, [pc, #420]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d1c:	f023 0301 	bic.w	r3, r3, #1
 8005d20:	6213      	str	r3, [r2, #32]
 8005d22:	4b67      	ldr	r3, [pc, #412]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	4a66      	ldr	r2, [pc, #408]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d28:	f023 0304 	bic.w	r3, r3, #4
 8005d2c:	6213      	str	r3, [r2, #32]
 8005d2e:	e01c      	b.n	8005d6a <HAL_RCC_OscConfig+0x36e>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2b05      	cmp	r3, #5
 8005d36:	d10c      	bne.n	8005d52 <HAL_RCC_OscConfig+0x356>
 8005d38:	4b61      	ldr	r3, [pc, #388]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	4a60      	ldr	r2, [pc, #384]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d3e:	f043 0304 	orr.w	r3, r3, #4
 8005d42:	6213      	str	r3, [r2, #32]
 8005d44:	4b5e      	ldr	r3, [pc, #376]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	4a5d      	ldr	r2, [pc, #372]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d4a:	f043 0301 	orr.w	r3, r3, #1
 8005d4e:	6213      	str	r3, [r2, #32]
 8005d50:	e00b      	b.n	8005d6a <HAL_RCC_OscConfig+0x36e>
 8005d52:	4b5b      	ldr	r3, [pc, #364]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	4a5a      	ldr	r2, [pc, #360]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d58:	f023 0301 	bic.w	r3, r3, #1
 8005d5c:	6213      	str	r3, [r2, #32]
 8005d5e:	4b58      	ldr	r3, [pc, #352]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	4a57      	ldr	r2, [pc, #348]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d64:	f023 0304 	bic.w	r3, r3, #4
 8005d68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d015      	beq.n	8005d9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d72:	f7fe fae3 	bl	800433c <HAL_GetTick>
 8005d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d78:	e00a      	b.n	8005d90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d7a:	f7fe fadf 	bl	800433c <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e0b1      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d90:	4b4b      	ldr	r3, [pc, #300]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0ee      	beq.n	8005d7a <HAL_RCC_OscConfig+0x37e>
 8005d9c:	e014      	b.n	8005dc8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d9e:	f7fe facd 	bl	800433c <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da4:	e00a      	b.n	8005dbc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da6:	f7fe fac9 	bl	800433c <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e09b      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dbc:	4b40      	ldr	r3, [pc, #256]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1ee      	bne.n	8005da6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005dc8:	7dfb      	ldrb	r3, [r7, #23]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d105      	bne.n	8005dda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dce:	4b3c      	ldr	r3, [pc, #240]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	4a3b      	ldr	r2, [pc, #236]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dd8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8087 	beq.w	8005ef2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005de4:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f003 030c 	and.w	r3, r3, #12
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d061      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d146      	bne.n	8005e86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005df8:	4b33      	ldr	r3, [pc, #204]	; (8005ec8 <HAL_RCC_OscConfig+0x4cc>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfe:	f7fe fa9d 	bl	800433c <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e04:	e008      	b.n	8005e18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e06:	f7fe fa99 	bl	800433c <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e06d      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e18:	4b29      	ldr	r3, [pc, #164]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1f0      	bne.n	8005e06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2c:	d108      	bne.n	8005e40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e2e:	4b24      	ldr	r3, [pc, #144]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	4921      	ldr	r1, [pc, #132]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e40:	4b1f      	ldr	r3, [pc, #124]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a19      	ldr	r1, [r3, #32]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	430b      	orrs	r3, r1
 8005e52:	491b      	ldr	r1, [pc, #108]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e58:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <HAL_RCC_OscConfig+0x4cc>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5e:	f7fe fa6d 	bl	800433c <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e64:	e008      	b.n	8005e78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e66:	f7fe fa69 	bl	800433c <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d901      	bls.n	8005e78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e03d      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e78:	4b11      	ldr	r3, [pc, #68]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0f0      	beq.n	8005e66 <HAL_RCC_OscConfig+0x46a>
 8005e84:	e035      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e86:	4b10      	ldr	r3, [pc, #64]	; (8005ec8 <HAL_RCC_OscConfig+0x4cc>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8c:	f7fe fa56 	bl	800433c <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e94:	f7fe fa52 	bl	800433c <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e026      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ea6:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <HAL_RCC_OscConfig+0x4c4>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCC_OscConfig+0x498>
 8005eb2:	e01e      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d107      	bne.n	8005ecc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e019      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	40007000 	.word	0x40007000
 8005ec8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <HAL_RCC_OscConfig+0x500>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d106      	bne.n	8005eee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d001      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40021000 	.word	0x40021000

08005f00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e0d0      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f14:	4b6a      	ldr	r3, [pc, #424]	; (80060c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d910      	bls.n	8005f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f22:	4b67      	ldr	r3, [pc, #412]	; (80060c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f023 0207 	bic.w	r2, r3, #7
 8005f2a:	4965      	ldr	r1, [pc, #404]	; (80060c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f32:	4b63      	ldr	r3, [pc, #396]	; (80060c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d001      	beq.n	8005f44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e0b8      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d020      	beq.n	8005f92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d005      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f5c:	4b59      	ldr	r3, [pc, #356]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	4a58      	ldr	r2, [pc, #352]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f74:	4b53      	ldr	r3, [pc, #332]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	4a52      	ldr	r2, [pc, #328]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f80:	4b50      	ldr	r3, [pc, #320]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	494d      	ldr	r1, [pc, #308]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d040      	beq.n	8006020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d107      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fa6:	4b47      	ldr	r3, [pc, #284]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d115      	bne.n	8005fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e07f      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d107      	bne.n	8005fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fbe:	4b41      	ldr	r3, [pc, #260]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e073      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fce:	4b3d      	ldr	r3, [pc, #244]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e06b      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fde:	4b39      	ldr	r3, [pc, #228]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f023 0203 	bic.w	r2, r3, #3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	4936      	ldr	r1, [pc, #216]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ff0:	f7fe f9a4 	bl	800433c <HAL_GetTick>
 8005ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff6:	e00a      	b.n	800600e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff8:	f7fe f9a0 	bl	800433c <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	f241 3288 	movw	r2, #5000	; 0x1388
 8006006:	4293      	cmp	r3, r2
 8006008:	d901      	bls.n	800600e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e053      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800600e:	4b2d      	ldr	r3, [pc, #180]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f003 020c 	and.w	r2, r3, #12
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	429a      	cmp	r2, r3
 800601e:	d1eb      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006020:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d210      	bcs.n	8006050 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800602e:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f023 0207 	bic.w	r2, r3, #7
 8006036:	4922      	ldr	r1, [pc, #136]	; (80060c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	4313      	orrs	r3, r2
 800603c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800603e:	4b20      	ldr	r3, [pc, #128]	; (80060c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	429a      	cmp	r2, r3
 800604a:	d001      	beq.n	8006050 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e032      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d008      	beq.n	800606e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800605c:	4b19      	ldr	r3, [pc, #100]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4916      	ldr	r1, [pc, #88]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 800606a:	4313      	orrs	r3, r2
 800606c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0308 	and.w	r3, r3, #8
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800607a:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	490e      	ldr	r1, [pc, #56]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 800608a:	4313      	orrs	r3, r2
 800608c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800608e:	f000 f821 	bl	80060d4 <HAL_RCC_GetSysClockFreq>
 8006092:	4602      	mov	r2, r0
 8006094:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	091b      	lsrs	r3, r3, #4
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	490a      	ldr	r1, [pc, #40]	; (80060c8 <HAL_RCC_ClockConfig+0x1c8>)
 80060a0:	5ccb      	ldrb	r3, [r1, r3]
 80060a2:	fa22 f303 	lsr.w	r3, r2, r3
 80060a6:	4a09      	ldr	r2, [pc, #36]	; (80060cc <HAL_RCC_ClockConfig+0x1cc>)
 80060a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060aa:	4b09      	ldr	r3, [pc, #36]	; (80060d0 <HAL_RCC_ClockConfig+0x1d0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe f902 	bl	80042b8 <HAL_InitTick>

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	40022000 	.word	0x40022000
 80060c4:	40021000 	.word	0x40021000
 80060c8:	0800c934 	.word	0x0800c934
 80060cc:	20000008 	.word	0x20000008
 80060d0:	2000000c 	.word	0x2000000c

080060d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	2300      	movs	r3, #0
 80060e0:	60bb      	str	r3, [r7, #8]
 80060e2:	2300      	movs	r3, #0
 80060e4:	617b      	str	r3, [r7, #20]
 80060e6:	2300      	movs	r3, #0
 80060e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80060ee:	4b1e      	ldr	r3, [pc, #120]	; (8006168 <HAL_RCC_GetSysClockFreq+0x94>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 030c 	and.w	r3, r3, #12
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d002      	beq.n	8006104 <HAL_RCC_GetSysClockFreq+0x30>
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d003      	beq.n	800610a <HAL_RCC_GetSysClockFreq+0x36>
 8006102:	e027      	b.n	8006154 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006104:	4b19      	ldr	r3, [pc, #100]	; (800616c <HAL_RCC_GetSysClockFreq+0x98>)
 8006106:	613b      	str	r3, [r7, #16]
      break;
 8006108:	e027      	b.n	800615a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	0c9b      	lsrs	r3, r3, #18
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	4a17      	ldr	r2, [pc, #92]	; (8006170 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006114:	5cd3      	ldrb	r3, [r2, r3]
 8006116:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d010      	beq.n	8006144 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006122:	4b11      	ldr	r3, [pc, #68]	; (8006168 <HAL_RCC_GetSysClockFreq+0x94>)
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	0c5b      	lsrs	r3, r3, #17
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	4a11      	ldr	r2, [pc, #68]	; (8006174 <HAL_RCC_GetSysClockFreq+0xa0>)
 800612e:	5cd3      	ldrb	r3, [r2, r3]
 8006130:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a0d      	ldr	r2, [pc, #52]	; (800616c <HAL_RCC_GetSysClockFreq+0x98>)
 8006136:	fb03 f202 	mul.w	r2, r3, r2
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	e004      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a0c      	ldr	r2, [pc, #48]	; (8006178 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006148:	fb02 f303 	mul.w	r3, r2, r3
 800614c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	613b      	str	r3, [r7, #16]
      break;
 8006152:	e002      	b.n	800615a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <HAL_RCC_GetSysClockFreq+0x98>)
 8006156:	613b      	str	r3, [r7, #16]
      break;
 8006158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800615a:	693b      	ldr	r3, [r7, #16]
}
 800615c:	4618      	mov	r0, r3
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40021000 	.word	0x40021000
 800616c:	007a1200 	.word	0x007a1200
 8006170:	0800c94c 	.word	0x0800c94c
 8006174:	0800c95c 	.word	0x0800c95c
 8006178:	003d0900 	.word	0x003d0900

0800617c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006180:	4b02      	ldr	r3, [pc, #8]	; (800618c <HAL_RCC_GetHCLKFreq+0x10>)
 8006182:	681b      	ldr	r3, [r3, #0]
}
 8006184:	4618      	mov	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr
 800618c:	20000008 	.word	0x20000008

08006190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006194:	f7ff fff2 	bl	800617c <HAL_RCC_GetHCLKFreq>
 8006198:	4602      	mov	r2, r0
 800619a:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	0a1b      	lsrs	r3, r3, #8
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	4903      	ldr	r1, [pc, #12]	; (80061b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061a6:	5ccb      	ldrb	r3, [r1, r3]
 80061a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	40021000 	.word	0x40021000
 80061b4:	0800c944 	.word	0x0800c944

080061b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061bc:	f7ff ffde 	bl	800617c <HAL_RCC_GetHCLKFreq>
 80061c0:	4602      	mov	r2, r0
 80061c2:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	0adb      	lsrs	r3, r3, #11
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	4903      	ldr	r1, [pc, #12]	; (80061dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061ce:	5ccb      	ldrb	r3, [r1, r3]
 80061d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	40021000 	.word	0x40021000
 80061dc:	0800c944 	.word	0x0800c944

080061e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80061e8:	4b0a      	ldr	r3, [pc, #40]	; (8006214 <RCC_Delay+0x34>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a0a      	ldr	r2, [pc, #40]	; (8006218 <RCC_Delay+0x38>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	0a5b      	lsrs	r3, r3, #9
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80061fc:	bf00      	nop
  }
  while (Delay --);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1e5a      	subs	r2, r3, #1
 8006202:	60fa      	str	r2, [r7, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f9      	bne.n	80061fc <RCC_Delay+0x1c>
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr
 8006214:	20000008 	.word	0x20000008
 8006218:	10624dd3 	.word	0x10624dd3

0800621c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e041      	b.n	80062b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fd f990 	bl	8003568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f000 fd68 	bl	8006d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d001      	beq.n	80062d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e03a      	b.n	800634a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a18      	ldr	r2, [pc, #96]	; (8006354 <HAL_TIM_Base_Start_IT+0x98>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00e      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x58>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062fe:	d009      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x58>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a14      	ldr	r2, [pc, #80]	; (8006358 <HAL_TIM_Base_Start_IT+0x9c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d004      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0x58>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a13      	ldr	r2, [pc, #76]	; (800635c <HAL_TIM_Base_Start_IT+0xa0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d111      	bne.n	8006338 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2b06      	cmp	r3, #6
 8006324:	d010      	beq.n	8006348 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0201 	orr.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006336:	e007      	b.n	8006348 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr
 8006354:	40012c00 	.word	0x40012c00
 8006358:	40000400 	.word	0x40000400
 800635c:	40000800 	.word	0x40000800

08006360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e041      	b.n	80063f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f839 	bl	80063fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3304      	adds	r3, #4
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f000 fcc6 	bl	8006d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr

08006410 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <HAL_TIM_PWM_Start+0x24>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	bf14      	ite	ne
 800642c:	2301      	movne	r3, #1
 800642e:	2300      	moveq	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	e022      	b.n	800647a <HAL_TIM_PWM_Start+0x6a>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b04      	cmp	r3, #4
 8006438:	d109      	bne.n	800644e <HAL_TIM_PWM_Start+0x3e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b01      	cmp	r3, #1
 8006444:	bf14      	ite	ne
 8006446:	2301      	movne	r3, #1
 8006448:	2300      	moveq	r3, #0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	e015      	b.n	800647a <HAL_TIM_PWM_Start+0x6a>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b08      	cmp	r3, #8
 8006452:	d109      	bne.n	8006468 <HAL_TIM_PWM_Start+0x58>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b01      	cmp	r3, #1
 800645e:	bf14      	ite	ne
 8006460:	2301      	movne	r3, #1
 8006462:	2300      	moveq	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	e008      	b.n	800647a <HAL_TIM_PWM_Start+0x6a>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b01      	cmp	r3, #1
 8006472:	bf14      	ite	ne
 8006474:	2301      	movne	r3, #1
 8006476:	2300      	moveq	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e05e      	b.n	8006540 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <HAL_TIM_PWM_Start+0x82>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006490:	e013      	b.n	80064ba <HAL_TIM_PWM_Start+0xaa>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b04      	cmp	r3, #4
 8006496:	d104      	bne.n	80064a2 <HAL_TIM_PWM_Start+0x92>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064a0:	e00b      	b.n	80064ba <HAL_TIM_PWM_Start+0xaa>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d104      	bne.n	80064b2 <HAL_TIM_PWM_Start+0xa2>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b0:	e003      	b.n	80064ba <HAL_TIM_PWM_Start+0xaa>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2202      	movs	r2, #2
 80064b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2201      	movs	r2, #1
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 feb4 	bl	8007230 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1e      	ldr	r2, [pc, #120]	; (8006548 <HAL_TIM_PWM_Start+0x138>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d107      	bne.n	80064e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a18      	ldr	r2, [pc, #96]	; (8006548 <HAL_TIM_PWM_Start+0x138>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00e      	beq.n	800650a <HAL_TIM_PWM_Start+0xfa>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f4:	d009      	beq.n	800650a <HAL_TIM_PWM_Start+0xfa>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a14      	ldr	r2, [pc, #80]	; (800654c <HAL_TIM_PWM_Start+0x13c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_TIM_PWM_Start+0xfa>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a12      	ldr	r2, [pc, #72]	; (8006550 <HAL_TIM_PWM_Start+0x140>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d111      	bne.n	800652e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b06      	cmp	r3, #6
 800651a:	d010      	beq.n	800653e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0201 	orr.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652c:	e007      	b.n	800653e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0201 	orr.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40000400 	.word	0x40000400
 8006550:	40000800 	.word	0x40000800

08006554 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e093      	b.n	8006690 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d106      	bne.n	8006582 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7fd f811 	bl	80035a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006598:	f023 0307 	bic.w	r3, r3, #7
 800659c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4619      	mov	r1, r3
 80065a8:	4610      	mov	r0, r2
 80065aa:	f000 fbc1 	bl	8006d30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d6:	f023 0303 	bic.w	r3, r3, #3
 80065da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	021b      	lsls	r3, r3, #8
 80065e6:	4313      	orrs	r3, r2
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80065f4:	f023 030c 	bic.w	r3, r3, #12
 80065f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006600:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	4313      	orrs	r3, r2
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	011a      	lsls	r2, r3, #4
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	031b      	lsls	r3, r3, #12
 8006624:	4313      	orrs	r3, r2
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	4313      	orrs	r3, r2
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d110      	bne.n	80066ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d102      	bne.n	80066d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80066ce:	7b7b      	ldrb	r3, [r7, #13]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d001      	beq.n	80066d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e069      	b.n	80067ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066e8:	e031      	b.n	800674e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d110      	bne.n	8006712 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d102      	bne.n	80066fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066f6:	7b3b      	ldrb	r3, [r7, #12]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d001      	beq.n	8006700 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e055      	b.n	80067ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006710:	e01d      	b.n	800674e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d108      	bne.n	800672a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d105      	bne.n	800672a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800671e:	7b7b      	ldrb	r3, [r7, #13]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d102      	bne.n	800672a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006724:	7b3b      	ldrb	r3, [r7, #12]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d001      	beq.n	800672e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e03e      	b.n	80067ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2202      	movs	r2, #2
 8006732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2202      	movs	r2, #2
 800673a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2202      	movs	r2, #2
 800674a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <HAL_TIM_Encoder_Start+0xc4>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2b04      	cmp	r3, #4
 8006758:	d008      	beq.n	800676c <HAL_TIM_Encoder_Start+0xd4>
 800675a:	e00f      	b.n	800677c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2201      	movs	r2, #1
 8006762:	2100      	movs	r1, #0
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fd63 	bl	8007230 <TIM_CCxChannelCmd>
      break;
 800676a:	e016      	b.n	800679a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2201      	movs	r2, #1
 8006772:	2104      	movs	r1, #4
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fd5b 	bl	8007230 <TIM_CCxChannelCmd>
      break;
 800677a:	e00e      	b.n	800679a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2201      	movs	r2, #1
 8006782:	2100      	movs	r1, #0
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fd53 	bl	8007230 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2201      	movs	r2, #1
 8006790:	2104      	movs	r1, #4
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fd4c 	bl	8007230 <TIM_CCxChannelCmd>
      break;
 8006798:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0201 	orr.w	r2, r2, #1
 80067a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d122      	bne.n	8006810 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d11b      	bne.n	8006810 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0202 	mvn.w	r2, #2
 80067e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fa7f 	bl	8006cfa <HAL_TIM_IC_CaptureCallback>
 80067fc:	e005      	b.n	800680a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fa72 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fa81 	bl	8006d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 0304 	and.w	r3, r3, #4
 800681a:	2b04      	cmp	r3, #4
 800681c:	d122      	bne.n	8006864 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b04      	cmp	r3, #4
 800682a:	d11b      	bne.n	8006864 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f06f 0204 	mvn.w	r2, #4
 8006834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2202      	movs	r2, #2
 800683a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fa55 	bl	8006cfa <HAL_TIM_IC_CaptureCallback>
 8006850:	e005      	b.n	800685e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fa48 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fa57 	bl	8006d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b08      	cmp	r3, #8
 8006870:	d122      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b08      	cmp	r3, #8
 800687e:	d11b      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0208 	mvn.w	r2, #8
 8006888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2204      	movs	r2, #4
 800688e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa2b 	bl	8006cfa <HAL_TIM_IC_CaptureCallback>
 80068a4:	e005      	b.n	80068b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa1e 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fa2d 	bl	8006d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0310 	and.w	r3, r3, #16
 80068c2:	2b10      	cmp	r3, #16
 80068c4:	d122      	bne.n	800690c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f003 0310 	and.w	r3, r3, #16
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d11b      	bne.n	800690c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f06f 0210 	mvn.w	r2, #16
 80068dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2208      	movs	r2, #8
 80068e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fa01 	bl	8006cfa <HAL_TIM_IC_CaptureCallback>
 80068f8:	e005      	b.n	8006906 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f9f4 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fa03 	bl	8006d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b01      	cmp	r3, #1
 8006918:	d10e      	bne.n	8006938 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b01      	cmp	r3, #1
 8006926:	d107      	bne.n	8006938 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f06f 0201 	mvn.w	r2, #1
 8006930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f9cf 	bl	8006cd6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006942:	2b80      	cmp	r3, #128	; 0x80
 8006944:	d10e      	bne.n	8006964 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006950:	2b80      	cmp	r3, #128	; 0x80
 8006952:	d107      	bne.n	8006964 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800695c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fd42 	bl	80073e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	d10e      	bne.n	8006990 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b40      	cmp	r3, #64	; 0x40
 800697e:	d107      	bne.n	8006990 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f9c7 	bl	8006d1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b20      	cmp	r3, #32
 800699c:	d10e      	bne.n	80069bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b20      	cmp	r3, #32
 80069aa:	d107      	bne.n	80069bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0220 	mvn.w	r2, #32
 80069b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fd0d 	bl	80073d6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d101      	bne.n	80069e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069de:	2302      	movs	r3, #2
 80069e0:	e0ae      	b.n	8006b40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b0c      	cmp	r3, #12
 80069ee:	f200 809f 	bhi.w	8006b30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069f2:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a2d 	.word	0x08006a2d
 80069fc:	08006b31 	.word	0x08006b31
 8006a00:	08006b31 	.word	0x08006b31
 8006a04:	08006b31 	.word	0x08006b31
 8006a08:	08006a6d 	.word	0x08006a6d
 8006a0c:	08006b31 	.word	0x08006b31
 8006a10:	08006b31 	.word	0x08006b31
 8006a14:	08006b31 	.word	0x08006b31
 8006a18:	08006aaf 	.word	0x08006aaf
 8006a1c:	08006b31 	.word	0x08006b31
 8006a20:	08006b31 	.word	0x08006b31
 8006a24:	08006b31 	.word	0x08006b31
 8006a28:	08006aef 	.word	0x08006aef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68b9      	ldr	r1, [r7, #8]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 f9de 	bl	8006df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0208 	orr.w	r2, r2, #8
 8006a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0204 	bic.w	r2, r2, #4
 8006a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6999      	ldr	r1, [r3, #24]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	691a      	ldr	r2, [r3, #16]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	619a      	str	r2, [r3, #24]
      break;
 8006a6a:	e064      	b.n	8006b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fa24 	bl	8006ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699a      	ldr	r2, [r3, #24]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6999      	ldr	r1, [r3, #24]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	021a      	lsls	r2, r3, #8
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	619a      	str	r2, [r3, #24]
      break;
 8006aac:	e043      	b.n	8006b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 fa6d 	bl	8006f94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0208 	orr.w	r2, r2, #8
 8006ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0204 	bic.w	r2, r2, #4
 8006ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69d9      	ldr	r1, [r3, #28]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	61da      	str	r2, [r3, #28]
      break;
 8006aec:	e023      	b.n	8006b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68b9      	ldr	r1, [r7, #8]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fab7 	bl	8007068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69da      	ldr	r2, [r3, #28]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69da      	ldr	r2, [r3, #28]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69d9      	ldr	r1, [r3, #28]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	021a      	lsls	r2, r3, #8
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	61da      	str	r2, [r3, #28]
      break;
 8006b2e:	e002      	b.n	8006b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	75fb      	strb	r3, [r7, #23]
      break;
 8006b34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_TIM_ConfigClockSource+0x1c>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e0b4      	b.n	8006cce <HAL_TIM_ConfigClockSource+0x186>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b9c:	d03e      	beq.n	8006c1c <HAL_TIM_ConfigClockSource+0xd4>
 8006b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba2:	f200 8087 	bhi.w	8006cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006baa:	f000 8086 	beq.w	8006cba <HAL_TIM_ConfigClockSource+0x172>
 8006bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb2:	d87f      	bhi.n	8006cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb4:	2b70      	cmp	r3, #112	; 0x70
 8006bb6:	d01a      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0xa6>
 8006bb8:	2b70      	cmp	r3, #112	; 0x70
 8006bba:	d87b      	bhi.n	8006cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006bbc:	2b60      	cmp	r3, #96	; 0x60
 8006bbe:	d050      	beq.n	8006c62 <HAL_TIM_ConfigClockSource+0x11a>
 8006bc0:	2b60      	cmp	r3, #96	; 0x60
 8006bc2:	d877      	bhi.n	8006cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc4:	2b50      	cmp	r3, #80	; 0x50
 8006bc6:	d03c      	beq.n	8006c42 <HAL_TIM_ConfigClockSource+0xfa>
 8006bc8:	2b50      	cmp	r3, #80	; 0x50
 8006bca:	d873      	bhi.n	8006cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006bcc:	2b40      	cmp	r3, #64	; 0x40
 8006bce:	d058      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x13a>
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d86f      	bhi.n	8006cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd4:	2b30      	cmp	r3, #48	; 0x30
 8006bd6:	d064      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8006bd8:	2b30      	cmp	r3, #48	; 0x30
 8006bda:	d86b      	bhi.n	8006cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d060      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	d867      	bhi.n	8006cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d05c      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8006be8:	2b10      	cmp	r3, #16
 8006bea:	d05a      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8006bec:	e062      	b.n	8006cb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6818      	ldr	r0, [r3, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6899      	ldr	r1, [r3, #8]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	f000 faf8 	bl	80071f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	609a      	str	r2, [r3, #8]
      break;
 8006c1a:	e04f      	b.n	8006cbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	6899      	ldr	r1, [r3, #8]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f000 fae1 	bl	80071f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c3e:	609a      	str	r2, [r3, #8]
      break;
 8006c40:	e03c      	b.n	8006cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	6859      	ldr	r1, [r3, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f000 fa58 	bl	8007104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2150      	movs	r1, #80	; 0x50
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 faaf 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006c60:	e02c      	b.n	8006cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6818      	ldr	r0, [r3, #0]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6859      	ldr	r1, [r3, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f000 fa76 	bl	8007160 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2160      	movs	r1, #96	; 0x60
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fa9f 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006c80:	e01c      	b.n	8006cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6818      	ldr	r0, [r3, #0]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	6859      	ldr	r1, [r3, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f000 fa38 	bl	8007104 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2140      	movs	r1, #64	; 0x40
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fa8f 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006ca0:	e00c      	b.n	8006cbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4619      	mov	r1, r3
 8006cac:	4610      	mov	r0, r2
 8006cae:	f000 fa86 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006cb2:	e003      	b.n	8006cbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb8:	e000      	b.n	8006cbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bc80      	pop	{r7}
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bc80      	pop	{r7}
 8006cf8:	4770      	bx	lr

08006cfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bc80      	pop	{r7}
 8006d0a:	4770      	bx	lr

08006d0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bc80      	pop	{r7}
 8006d1c:	4770      	bx	lr

08006d1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bc80      	pop	{r7}
 8006d2e:	4770      	bx	lr

08006d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a29      	ldr	r2, [pc, #164]	; (8006de8 <TIM_Base_SetConfig+0xb8>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00b      	beq.n	8006d60 <TIM_Base_SetConfig+0x30>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4e:	d007      	beq.n	8006d60 <TIM_Base_SetConfig+0x30>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a26      	ldr	r2, [pc, #152]	; (8006dec <TIM_Base_SetConfig+0xbc>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d003      	beq.n	8006d60 <TIM_Base_SetConfig+0x30>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a25      	ldr	r2, [pc, #148]	; (8006df0 <TIM_Base_SetConfig+0xc0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d108      	bne.n	8006d72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a1c      	ldr	r2, [pc, #112]	; (8006de8 <TIM_Base_SetConfig+0xb8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d00b      	beq.n	8006d92 <TIM_Base_SetConfig+0x62>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d80:	d007      	beq.n	8006d92 <TIM_Base_SetConfig+0x62>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a19      	ldr	r2, [pc, #100]	; (8006dec <TIM_Base_SetConfig+0xbc>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d003      	beq.n	8006d92 <TIM_Base_SetConfig+0x62>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a18      	ldr	r2, [pc, #96]	; (8006df0 <TIM_Base_SetConfig+0xc0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d108      	bne.n	8006da4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a07      	ldr	r2, [pc, #28]	; (8006de8 <TIM_Base_SetConfig+0xb8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d103      	bne.n	8006dd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	691a      	ldr	r2, [r3, #16]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	615a      	str	r2, [r3, #20]
}
 8006dde:	bf00      	nop
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bc80      	pop	{r7}
 8006de6:	4770      	bx	lr
 8006de8:	40012c00 	.word	0x40012c00
 8006dec:	40000400 	.word	0x40000400
 8006df0:	40000800 	.word	0x40000800

08006df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	f023 0201 	bic.w	r2, r3, #1
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0303 	bic.w	r3, r3, #3
 8006e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f023 0302 	bic.w	r3, r3, #2
 8006e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a1c      	ldr	r2, [pc, #112]	; (8006ebc <TIM_OC1_SetConfig+0xc8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d10c      	bne.n	8006e6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f023 0308 	bic.w	r3, r3, #8
 8006e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f023 0304 	bic.w	r3, r3, #4
 8006e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a13      	ldr	r2, [pc, #76]	; (8006ebc <TIM_OC1_SetConfig+0xc8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d111      	bne.n	8006e96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	621a      	str	r2, [r3, #32]
}
 8006eb0:	bf00      	nop
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40012c00 	.word	0x40012c00

08006ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	f023 0210 	bic.w	r2, r3, #16
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f023 0320 	bic.w	r3, r3, #32
 8006f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	011b      	lsls	r3, r3, #4
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a1d      	ldr	r2, [pc, #116]	; (8006f90 <TIM_OC2_SetConfig+0xd0>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d10d      	bne.n	8006f3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a14      	ldr	r2, [pc, #80]	; (8006f90 <TIM_OC2_SetConfig+0xd0>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d113      	bne.n	8006f6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	621a      	str	r2, [r3, #32]
}
 8006f86:	bf00      	nop
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bc80      	pop	{r7}
 8006f8e:	4770      	bx	lr
 8006f90:	40012c00 	.word	0x40012c00

08006f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0303 	bic.w	r3, r3, #3
 8006fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	021b      	lsls	r3, r3, #8
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a1d      	ldr	r2, [pc, #116]	; (8007064 <TIM_OC3_SetConfig+0xd0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d10d      	bne.n	800700e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	021b      	lsls	r3, r3, #8
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800700c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a14      	ldr	r2, [pc, #80]	; (8007064 <TIM_OC3_SetConfig+0xd0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d113      	bne.n	800703e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800701c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4313      	orrs	r3, r2
 800703c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	621a      	str	r2, [r3, #32]
}
 8007058:	bf00      	nop
 800705a:	371c      	adds	r7, #28
 800705c:	46bd      	mov	sp, r7
 800705e:	bc80      	pop	{r7}
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40012c00 	.word	0x40012c00

08007068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800709e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	031b      	lsls	r3, r3, #12
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	4313      	orrs	r3, r2
 80070be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a0f      	ldr	r2, [pc, #60]	; (8007100 <TIM_OC4_SetConfig+0x98>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d109      	bne.n	80070dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	019b      	lsls	r3, r3, #6
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	4313      	orrs	r3, r2
 80070da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	621a      	str	r2, [r3, #32]
}
 80070f6:	bf00      	nop
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bc80      	pop	{r7}
 80070fe:	4770      	bx	lr
 8007100:	40012c00 	.word	0x40012c00

08007104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	f023 0201 	bic.w	r2, r3, #1
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800712e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	4313      	orrs	r3, r2
 8007138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f023 030a 	bic.w	r3, r3, #10
 8007140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	621a      	str	r2, [r3, #32]
}
 8007156:	bf00      	nop
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	bc80      	pop	{r7}
 800715e:	4770      	bx	lr

08007160 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	f023 0210 	bic.w	r2, r3, #16
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800718a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	031b      	lsls	r3, r3, #12
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	4313      	orrs	r3, r2
 8007194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800719c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	621a      	str	r2, [r3, #32]
}
 80071b4:	bf00      	nop
 80071b6:	371c      	adds	r7, #28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr

080071be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071be:	b480      	push	{r7}
 80071c0:	b085      	sub	sp, #20
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	4313      	orrs	r3, r2
 80071dc:	f043 0307 	orr.w	r3, r3, #7
 80071e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	609a      	str	r2, [r3, #8]
}
 80071e8:	bf00      	nop
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bc80      	pop	{r7}
 80071f0:	4770      	bx	lr

080071f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b087      	sub	sp, #28
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	607a      	str	r2, [r7, #4]
 80071fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800720c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	021a      	lsls	r2, r3, #8
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	431a      	orrs	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	4313      	orrs	r3, r2
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	609a      	str	r2, [r3, #8]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	bc80      	pop	{r7}
 800722e:	4770      	bx	lr

08007230 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f003 031f 	and.w	r3, r3, #31
 8007242:	2201      	movs	r2, #1
 8007244:	fa02 f303 	lsl.w	r3, r2, r3
 8007248:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a1a      	ldr	r2, [r3, #32]
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	43db      	mvns	r3, r3
 8007252:	401a      	ands	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a1a      	ldr	r2, [r3, #32]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f003 031f 	and.w	r3, r3, #31
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	fa01 f303 	lsl.w	r3, r1, r3
 8007268:	431a      	orrs	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	621a      	str	r2, [r3, #32]
}
 800726e:	bf00      	nop
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	bc80      	pop	{r7}
 8007276:	4770      	bx	lr

08007278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007288:	2b01      	cmp	r3, #1
 800728a:	d101      	bne.n	8007290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800728c:	2302      	movs	r3, #2
 800728e:	e046      	b.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a16      	ldr	r2, [pc, #88]	; (8007328 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00e      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072dc:	d009      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a12      	ldr	r2, [pc, #72]	; (800732c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d004      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a10      	ldr	r2, [pc, #64]	; (8007330 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d10c      	bne.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	4313      	orrs	r3, r2
 8007302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr
 8007328:	40012c00 	.word	0x40012c00
 800732c:	40000400 	.word	0x40000400
 8007330:	40000800 	.word	0x40000800

08007334 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007348:	2b01      	cmp	r3, #1
 800734a:	d101      	bne.n	8007350 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800734c:	2302      	movs	r3, #2
 800734e:	e03d      	b.n	80073cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	4313      	orrs	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bc80      	pop	{r7}
 80073d4:	4770      	bx	lr

080073d6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b083      	sub	sp, #12
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bc80      	pop	{r7}
 80073e6:	4770      	bx	lr

080073e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr

080073fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e042      	b.n	8007492 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d106      	bne.n	8007426 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7fc f9ad 	bl	8003780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2224      	movs	r2, #36	; 0x24
 800742a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800743c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f82c 	bl	800749c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691a      	ldr	r2, [r3, #16]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007452:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	695a      	ldr	r2, [r3, #20]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007462:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007472:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2220      	movs	r2, #32
 800747e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80074d6:	f023 030c 	bic.w	r3, r3, #12
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	68b9      	ldr	r1, [r7, #8]
 80074e0:	430b      	orrs	r3, r1
 80074e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a2c      	ldr	r2, [pc, #176]	; (80075b0 <UART_SetConfig+0x114>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d103      	bne.n	800750c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007504:	f7fe fe58 	bl	80061b8 <HAL_RCC_GetPCLK2Freq>
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	e002      	b.n	8007512 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800750c:	f7fe fe40 	bl	8006190 <HAL_RCC_GetPCLK1Freq>
 8007510:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4613      	mov	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	009a      	lsls	r2, r3, #2
 800751c:	441a      	add	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	fbb2 f3f3 	udiv	r3, r2, r3
 8007528:	4a22      	ldr	r2, [pc, #136]	; (80075b4 <UART_SetConfig+0x118>)
 800752a:	fba2 2303 	umull	r2, r3, r2, r3
 800752e:	095b      	lsrs	r3, r3, #5
 8007530:	0119      	lsls	r1, r3, #4
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4613      	mov	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	009a      	lsls	r2, r3, #2
 800753c:	441a      	add	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	fbb2 f2f3 	udiv	r2, r2, r3
 8007548:	4b1a      	ldr	r3, [pc, #104]	; (80075b4 <UART_SetConfig+0x118>)
 800754a:	fba3 0302 	umull	r0, r3, r3, r2
 800754e:	095b      	lsrs	r3, r3, #5
 8007550:	2064      	movs	r0, #100	; 0x64
 8007552:	fb00 f303 	mul.w	r3, r0, r3
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	3332      	adds	r3, #50	; 0x32
 800755c:	4a15      	ldr	r2, [pc, #84]	; (80075b4 <UART_SetConfig+0x118>)
 800755e:	fba2 2303 	umull	r2, r3, r2, r3
 8007562:	095b      	lsrs	r3, r3, #5
 8007564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007568:	4419      	add	r1, r3
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	4613      	mov	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	009a      	lsls	r2, r3, #2
 8007574:	441a      	add	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007580:	4b0c      	ldr	r3, [pc, #48]	; (80075b4 <UART_SetConfig+0x118>)
 8007582:	fba3 0302 	umull	r0, r3, r3, r2
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	2064      	movs	r0, #100	; 0x64
 800758a:	fb00 f303 	mul.w	r3, r0, r3
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	3332      	adds	r3, #50	; 0x32
 8007594:	4a07      	ldr	r2, [pc, #28]	; (80075b4 <UART_SetConfig+0x118>)
 8007596:	fba2 2303 	umull	r2, r3, r2, r3
 800759a:	095b      	lsrs	r3, r3, #5
 800759c:	f003 020f 	and.w	r2, r3, #15
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	440a      	add	r2, r1
 80075a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80075a8:	bf00      	nop
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	40013800 	.word	0x40013800
 80075b4:	51eb851f 	.word	0x51eb851f

080075b8 <VL53L0X_GetVersion>:
#endif

/* Group PAL General Functions */

VL53L0X_Error VL53L0X_GetVersion(VL53L0X_Version_t *pVersion)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075c0:	2300      	movs	r3, #0
 80075c2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	pVersion->major = VL53L0X_IMPLEMENTATION_VER_MAJOR;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	711a      	strb	r2, [r3, #4]
	pVersion->minor = VL53L0X_IMPLEMENTATION_VER_MINOR;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	715a      	strb	r2, [r3, #5]
	pVersion->build = VL53L0X_IMPLEMENTATION_VER_SUB;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	719a      	strb	r2, [r3, #6]

	pVersion->revision = VL53L0X_IMPLEMENTATION_VER_REVISION;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f241 12da 	movw	r2, #4570	; 0x11da
 80075dc:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80075de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr

080075ec <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f004 fb2d 	bl	800bc5c <VL53L0X_get_device_info>
 8007602:	4603      	mov	r3, r0
 8007604:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007606:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800761c:	2300      	movs	r3, #0
 800761e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 fc4d 	bl	8008ec2 <VL53L0X_get_offset_calibration_data_micro_meter>
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800762c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007644:	2300      	movs	r3, #0
 8007646:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8007648:	78fb      	ldrb	r3, [r7, #3]
 800764a:	085b      	lsrs	r3, r3, #1
 800764c:	b2db      	uxtb	r3, r3
 800764e:	461a      	mov	r2, r3
 8007650:	218a      	movs	r1, #138	; 0x8a
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f004 fde6 	bl	800c224 <VL53L0X_WrByte>
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 800765c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8007668:	b5b0      	push	{r4, r5, r7, lr}
 800766a:	b094      	sub	sp, #80	; 0x50
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007670:	2300      	movs	r3, #0
 8007672:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8007676:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800767a:	2b00      	cmp	r3, #0
 800767c:	d107      	bne.n	800768e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800767e:	2200      	movs	r2, #0
 8007680:	2188      	movs	r1, #136	; 0x88
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f004 fdce 	bl	800c224 <VL53L0X_WrByte>
 8007688:	4603      	mov	r3, r0
 800768a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800769c:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80076a6:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a71      	ldr	r2, [pc, #452]	; (8007874 <VL53L0X_DataInit+0x20c>)
 80076ae:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a70      	ldr	r2, [pc, #448]	; (8007878 <VL53L0X_DataInit+0x210>)
 80076b6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80076c0:	f107 0308 	add.w	r3, r7, #8
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fa5a 	bl	8007b80 <VL53L0X_GetDeviceParameters>
 80076cc:	4603      	mov	r3, r0
 80076ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 80076d2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d112      	bne.n	8007700 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80076da:	2300      	movs	r3, #0
 80076dc:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80076de:	2300      	movs	r3, #0
 80076e0:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f103 0410 	add.w	r4, r3, #16
 80076e8:	f107 0508 	add.w	r5, r7, #8
 80076ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80076fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2264      	movs	r2, #100	; 0x64
 8007704:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800770e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007718:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007722:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800772e:	2300      	movs	r3, #0
 8007730:	64bb      	str	r3, [r7, #72]	; 0x48
 8007732:	e014      	b.n	800775e <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 8007734:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007738:	2b00      	cmp	r3, #0
 800773a:	d114      	bne.n	8007766 <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800773c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800773e:	b29b      	uxth	r3, r3
 8007740:	2201      	movs	r2, #1
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fd4b 	bl	80081e0 <VL53L0X_SetLimitCheckEnable>
 800774a:	4603      	mov	r3, r0
 800774c:	461a      	mov	r2, r3
 800774e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007752:	4313      	orrs	r3, r2
 8007754:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800775a:	3301      	adds	r3, #1
 800775c:	64bb      	str	r3, [r7, #72]	; 0x48
 800775e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007760:	2b05      	cmp	r3, #5
 8007762:	dde7      	ble.n	8007734 <VL53L0X_DataInit+0xcc>
 8007764:	e000      	b.n	8007768 <VL53L0X_DataInit+0x100>
		else
			break;
 8007766:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8007768:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800776c:	2b00      	cmp	r3, #0
 800776e:	d107      	bne.n	8007780 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007770:	2200      	movs	r2, #0
 8007772:	2102      	movs	r1, #2
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fd33 	bl	80081e0 <VL53L0X_SetLimitCheckEnable>
 800777a:	4603      	mov	r3, r0
 800777c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007780:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007784:	2b00      	cmp	r3, #0
 8007786:	d107      	bne.n	8007798 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007788:	2200      	movs	r2, #0
 800778a:	2103      	movs	r1, #3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fd27 	bl	80081e0 <VL53L0X_SetLimitCheckEnable>
 8007792:	4603      	mov	r3, r0
 8007794:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007798:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800779c:	2b00      	cmp	r3, #0
 800779e:	d107      	bne.n	80077b0 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80077a0:	2200      	movs	r2, #0
 80077a2:	2104      	movs	r1, #4
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fd1b 	bl	80081e0 <VL53L0X_SetLimitCheckEnable>
 80077aa:	4603      	mov	r3, r0
 80077ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80077b0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d107      	bne.n	80077c8 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80077b8:	2200      	movs	r2, #0
 80077ba:	2105      	movs	r1, #5
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fd0f 	bl	80081e0 <VL53L0X_SetLimitCheckEnable>
 80077c2:	4603      	mov	r3, r0
 80077c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80077c8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d108      	bne.n	80077e2 <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80077d0:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80077d4:	2100      	movs	r1, #0
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fdb0 	bl	800833c <VL53L0X_SetLimitCheckValue>
 80077dc:	4603      	mov	r3, r0
 80077de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80077e2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d108      	bne.n	80077fc <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80077ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80077ee:	2101      	movs	r1, #1
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fda3 	bl	800833c <VL53L0X_SetLimitCheckValue>
 80077f6:	4603      	mov	r3, r0
 80077f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80077fc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007800:	2b00      	cmp	r3, #0
 8007802:	d108      	bne.n	8007816 <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007804:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8007808:	2102      	movs	r1, #2
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fd96 	bl	800833c <VL53L0X_SetLimitCheckValue>
 8007810:	4603      	mov	r3, r0
 8007812:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007816:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800781a:	2b00      	cmp	r3, #0
 800781c:	d107      	bne.n	800782e <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800781e:	2200      	movs	r2, #0
 8007820:	2103      	movs	r1, #3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fd8a 	bl	800833c <VL53L0X_SetLimitCheckValue>
 8007828:	4603      	mov	r3, r0
 800782a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800782e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10f      	bne.n	8007856 <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	22ff      	movs	r2, #255	; 0xff
 800783a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800783e:	22ff      	movs	r2, #255	; 0xff
 8007840:	2101      	movs	r1, #1
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f004 fcee 	bl	800c224 <VL53L0X_WrByte>
 8007848:	4603      	mov	r3, r0
 800784a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007856:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800785a:	2b00      	cmp	r3, #0
 800785c:	d103      	bne.n	8007866 <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8007866:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800786a:	4618      	mov	r0, r3
 800786c:	3750      	adds	r7, #80	; 0x50
 800786e:	46bd      	mov	sp, r7
 8007870:	bdb0      	pop	{r4, r5, r7, pc}
 8007872:	bf00      	nop
 8007874:	00016b85 	.word	0x00016b85
 8007878:	000970a4 	.word	0x000970a4

0800787c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800787c:	b5b0      	push	{r4, r5, r7, lr}
 800787e:	b09e      	sub	sp, #120	; 0x78
 8007880:	af02      	add	r7, sp, #8
 8007882:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007884:	2300      	movs	r3, #0
 8007886:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800788a:	f107 031c 	add.w	r3, r7, #28
 800788e:	2240      	movs	r2, #64	; 0x40
 8007890:	2100      	movs	r1, #0
 8007892:	4618      	mov	r0, r3
 8007894:	f004 fdd6 	bl	800c444 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80078ae:	2300      	movs	r3, #0
 80078b0:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80078b8:	2101      	movs	r1, #1
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f002 fa3e 	bl	8009d3c <VL53L0X_get_info_from_device>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80078cc:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80078d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80078d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d80d      	bhi.n	80078fc <VL53L0X_StaticInit+0x80>
 80078e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d102      	bne.n	80078ee <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80078e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d806      	bhi.n	80078fc <VL53L0X_StaticInit+0x80>
 80078ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10e      	bne.n	8007914 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80078f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078f8:	2b0c      	cmp	r3, #12
 80078fa:	d90b      	bls.n	8007914 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80078fc:	f107 0218 	add.w	r2, r7, #24
 8007900:	f107 0314 	add.w	r3, r7, #20
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f001 fcd5 	bl	80092b6 <VL53L0X_perform_ref_spad_management>
 800790c:	4603      	mov	r3, r0
 800790e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007912:	e009      	b.n	8007928 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8007914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007918:	461a      	mov	r2, r3
 800791a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 fed6 	bl	80096ce <VL53L0X_set_reference_spads>
 8007922:	4603      	mov	r3, r0
 8007924:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8007928:	4b94      	ldr	r3, [pc, #592]	; (8007b7c <VL53L0X_StaticInit+0x300>)
 800792a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800792c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10f      	bne.n	8007954 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800793a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800793e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007942:	2b00      	cmp	r3, #0
 8007944:	d104      	bne.n	8007950 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800794c:	66bb      	str	r3, [r7, #104]	; 0x68
 800794e:	e001      	b.n	8007954 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8007950:	4b8a      	ldr	r3, [pc, #552]	; (8007b7c <VL53L0X_StaticInit+0x300>)
 8007952:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007954:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007958:	2b00      	cmp	r3, #0
 800795a:	d106      	bne.n	800796a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800795c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f003 fb0a 	bl	800af78 <VL53L0X_load_tuning_settings>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800796a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8007972:	2300      	movs	r3, #0
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	2304      	movs	r3, #4
 8007978:	2200      	movs	r2, #0
 800797a:	2100      	movs	r1, #0
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 f8cf 	bl	8008b20 <VL53L0X_SetGpioConfig>
 8007982:	4603      	mov	r3, r0
 8007984:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007988:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800798c:	2b00      	cmp	r3, #0
 800798e:	d121      	bne.n	80079d4 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007990:	2201      	movs	r2, #1
 8007992:	21ff      	movs	r1, #255	; 0xff
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f004 fc45 	bl	800c224 <VL53L0X_WrByte>
 800799a:	4603      	mov	r3, r0
 800799c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80079a0:	f107 031a 	add.w	r3, r7, #26
 80079a4:	461a      	mov	r2, r3
 80079a6:	2184      	movs	r1, #132	; 0x84
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f004 fbc7 	bl	800c13c <VL53L0X_RdWord>
 80079ae:	4603      	mov	r3, r0
 80079b0:	461a      	mov	r2, r3
 80079b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079b6:	4313      	orrs	r3, r2
 80079b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80079bc:	2200      	movs	r2, #0
 80079be:	21ff      	movs	r1, #255	; 0xff
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f004 fc2f 	bl	800c224 <VL53L0X_WrByte>
 80079c6:	4603      	mov	r3, r0
 80079c8:	461a      	mov	r2, r3
 80079ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079ce:	4313      	orrs	r3, r2
 80079d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80079d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d105      	bne.n	80079e8 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80079dc:	8b7b      	ldrh	r3, [r7, #26]
 80079de:	011b      	lsls	r3, r3, #4
 80079e0:	461a      	mov	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80079e8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d108      	bne.n	8007a02 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80079f0:	f107 031c 	add.w	r3, r7, #28
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f8c2 	bl	8007b80 <VL53L0X_GetDeviceParameters>
 80079fc:	4603      	mov	r3, r0
 80079fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8007a02:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d110      	bne.n	8007a2c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8007a0a:	f107 0319 	add.w	r3, r7, #25
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f981 	bl	8007d18 <VL53L0X_GetFractionEnable>
 8007a16:	4603      	mov	r3, r0
 8007a18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007a1c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d103      	bne.n	8007a2c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007a24:	7e7a      	ldrb	r2, [r7, #25]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007a2c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10e      	bne.n	8007a52 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f103 0410 	add.w	r4, r3, #16
 8007a3a:	f107 051c 	add.w	r5, r7, #28
 8007a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007a4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8007a52:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d111      	bne.n	8007a7e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8007a5a:	f107 0319 	add.w	r3, r7, #25
 8007a5e:	461a      	mov	r2, r3
 8007a60:	2101      	movs	r1, #1
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f004 fae4 	bl	800c030 <VL53L0X_RdByte>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8007a6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d103      	bne.n	8007a7e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8007a76:	7e7a      	ldrb	r2, [r7, #25]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8007a7e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d107      	bne.n	8007a96 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007a86:	2200      	movs	r2, #0
 8007a88:	2100      	movs	r1, #0
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f9a0 	bl	8007dd0 <VL53L0X_SetSequenceStepEnable>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007a96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d107      	bne.n	8007aae <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2102      	movs	r1, #2
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f994 	bl	8007dd0 <VL53L0X_SetSequenceStepEnable>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8007aae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d103      	bne.n	8007abe <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2203      	movs	r2, #3
 8007aba:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007abe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d109      	bne.n	8007ada <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007ac6:	f107 0313 	add.w	r3, r7, #19
 8007aca:	461a      	mov	r2, r3
 8007acc:	2100      	movs	r1, #0
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f967 	bl	8007da2 <VL53L0X_GetVcselPulsePeriod>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007ada:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d103      	bne.n	8007aea <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007ae2:	7cfa      	ldrb	r2, [r7, #19]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007aea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d109      	bne.n	8007b06 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007af2:	f107 0313 	add.w	r3, r7, #19
 8007af6:	461a      	mov	r2, r3
 8007af8:	2101      	movs	r1, #1
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f951 	bl	8007da2 <VL53L0X_GetVcselPulsePeriod>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007b06:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d103      	bne.n	8007b16 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007b0e:	7cfa      	ldrb	r2, [r7, #19]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007b16:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d109      	bne.n	8007b32 <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 8007b1e:	f107 030c 	add.w	r3, r7, #12
 8007b22:	461a      	mov	r2, r3
 8007b24:	2103      	movs	r1, #3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fa9e 	bl	8008068 <VL53L0X_GetSequenceStepTimeout>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007b32:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d103      	bne.n	8007b42 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007b42:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d109      	bne.n	8007b5e <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 8007b4a:	f107 030c 	add.w	r3, r7, #12
 8007b4e:	461a      	mov	r2, r3
 8007b50:	2104      	movs	r1, #4
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fa88 	bl	8008068 <VL53L0X_GetSequenceStepTimeout>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007b5e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d103      	bne.n	8007b6e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3770      	adds	r7, #112	; 0x70
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bdb0      	pop	{r4, r5, r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000014 	.word	0x20000014

08007b80 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f8ae 	bl	8007cf4 <VL53L0X_GetDeviceMode>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d107      	bne.n	8007bb4 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fa9c 	bl	80080e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8007bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d102      	bne.n	8007bc2 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8007bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d107      	bne.n	8007bda <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	3310      	adds	r3, #16
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fad1 	bl	8008178 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8007bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d107      	bne.n	8007bf2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	3314      	adds	r3, #20
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7ff fd12 	bl	8007612 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8007bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d134      	bne.n	8007c64 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60bb      	str	r3, [r7, #8]
 8007bfe:	e02a      	b.n	8007c56 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d12a      	bne.n	8007c5e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	b299      	uxth	r1, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	3308      	adds	r3, #8
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	4413      	add	r3, r2
 8007c16:	3304      	adds	r3, #4
 8007c18:	461a      	mov	r2, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fbf0 	bl	8008400 <VL53L0X_GetLimitCheckValue>
 8007c20:	4603      	mov	r3, r0
 8007c22:	461a      	mov	r2, r3
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d117      	bne.n	8007c62 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	b299      	uxth	r1, r3
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	3318      	adds	r3, #24
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fb59 	bl	80082f8 <VL53L0X_GetLimitCheckEnable>
 8007c46:	4603      	mov	r3, r0
 8007c48:	461a      	mov	r2, r3
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	3301      	adds	r3, #1
 8007c54:	60bb      	str	r3, [r7, #8]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2b05      	cmp	r3, #5
 8007c5a:	ddd1      	ble.n	8007c00 <VL53L0X_GetDeviceParameters+0x80>
 8007c5c:	e002      	b.n	8007c64 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8007c5e:	bf00      	nop
 8007c60:	e000      	b.n	8007c64 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8007c62:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d107      	bne.n	8007c7c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	333c      	adds	r3, #60	; 0x3c
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fc52 	bl	800851c <VL53L0X_GetWrapAroundCheckEnable>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8007c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d107      	bne.n	8007c94 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	3304      	adds	r3, #4
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f876 	bl	8007d7c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	2b15      	cmp	r3, #21
 8007cb4:	bf8c      	ite	hi
 8007cb6:	2201      	movhi	r2, #1
 8007cb8:	2200      	movls	r2, #0
 8007cba:	b2d2      	uxtb	r2, r2
 8007cbc:	2a00      	cmp	r2, #0
 8007cbe:	d10e      	bne.n	8007cde <VL53L0X_SetDeviceMode+0x3e>
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	409a      	lsls	r2, r3
 8007cc4:	4b0a      	ldr	r3, [pc, #40]	; (8007cf0 <VL53L0X_SetDeviceMode+0x50>)
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bf14      	ite	ne
 8007ccc:	2301      	movne	r3, #1
 8007cce:	2300      	moveq	r3, #0
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	78fa      	ldrb	r2, [r7, #3]
 8007cda:	741a      	strb	r2, [r3, #16]
		break;
 8007cdc:	e001      	b.n	8007ce2 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007cde:	23f8      	movs	r3, #248	; 0xf8
 8007ce0:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bc80      	pop	{r7}
 8007cee:	4770      	bx	lr
 8007cf0:	0030000b 	.word	0x0030000b

08007cf4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	7c1a      	ldrb	r2, [r3, #16]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bc80      	pop	{r7}
 8007d16:	4770      	bx	lr

08007d18 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	2109      	movs	r1, #9
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f004 f980 	bl	800c030 <VL53L0X_RdByte>
 8007d30:	4603      	mov	r3, r0
 8007d32:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d106      	bne.n	8007d4a <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f002 ff74 	bl	800ac54 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8007d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f003 f841 	bl	800ae14 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007d92:	4603      	mov	r3, r0
 8007d94:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8007d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b086      	sub	sp, #24
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	460b      	mov	r3, r1
 8007dac:	607a      	str	r2, [r7, #4]
 8007dae:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8007db4:	7afb      	ldrb	r3, [r7, #11]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	4619      	mov	r1, r3
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f002 ff13 	bl	800abe6 <VL53L0X_get_vcsel_pulse_period>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007de0:	2300      	movs	r3, #0
 8007de2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007de8:	2300      	movs	r3, #0
 8007dea:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007dec:	f107 030f 	add.w	r3, r7, #15
 8007df0:	461a      	mov	r2, r3
 8007df2:	2101      	movs	r1, #1
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f004 f91b 	bl	800c030 <VL53L0X_RdByte>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8007e02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d15a      	bne.n	8007ec0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8007e0a:	78bb      	ldrb	r3, [r7, #2]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d12b      	bne.n	8007e68 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d825      	bhi.n	8007e62 <VL53L0X_SetSequenceStepEnable+0x92>
 8007e16:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1c:	08007e31 	.word	0x08007e31
 8007e20:	08007e3b 	.word	0x08007e3b
 8007e24:	08007e45 	.word	0x08007e45
 8007e28:	08007e4f 	.word	0x08007e4f
 8007e2c:	08007e59 	.word	0x08007e59
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8007e30:	7dbb      	ldrb	r3, [r7, #22]
 8007e32:	f043 0310 	orr.w	r3, r3, #16
 8007e36:	75bb      	strb	r3, [r7, #22]
				break;
 8007e38:	e043      	b.n	8007ec2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007e3a:	7dbb      	ldrb	r3, [r7, #22]
 8007e3c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007e40:	75bb      	strb	r3, [r7, #22]
				break;
 8007e42:	e03e      	b.n	8007ec2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007e44:	7dbb      	ldrb	r3, [r7, #22]
 8007e46:	f043 0304 	orr.w	r3, r3, #4
 8007e4a:	75bb      	strb	r3, [r7, #22]
				break;
 8007e4c:	e039      	b.n	8007ec2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8007e4e:	7dbb      	ldrb	r3, [r7, #22]
 8007e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e54:	75bb      	strb	r3, [r7, #22]
				break;
 8007e56:	e034      	b.n	8007ec2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007e58:	7dbb      	ldrb	r3, [r7, #22]
 8007e5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e5e:	75bb      	strb	r3, [r7, #22]
				break;
 8007e60:	e02f      	b.n	8007ec2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e62:	23fc      	movs	r3, #252	; 0xfc
 8007e64:	75fb      	strb	r3, [r7, #23]
 8007e66:	e02c      	b.n	8007ec2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	2b04      	cmp	r3, #4
 8007e6c:	d825      	bhi.n	8007eba <VL53L0X_SetSequenceStepEnable+0xea>
 8007e6e:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e74:	08007e89 	.word	0x08007e89
 8007e78:	08007e93 	.word	0x08007e93
 8007e7c:	08007e9d 	.word	0x08007e9d
 8007e80:	08007ea7 	.word	0x08007ea7
 8007e84:	08007eb1 	.word	0x08007eb1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007e88:	7dbb      	ldrb	r3, [r7, #22]
 8007e8a:	f023 0310 	bic.w	r3, r3, #16
 8007e8e:	75bb      	strb	r3, [r7, #22]
				break;
 8007e90:	e017      	b.n	8007ec2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007e92:	7dbb      	ldrb	r3, [r7, #22]
 8007e94:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007e98:	75bb      	strb	r3, [r7, #22]
				break;
 8007e9a:	e012      	b.n	8007ec2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007e9c:	7dbb      	ldrb	r3, [r7, #22]
 8007e9e:	f023 0304 	bic.w	r3, r3, #4
 8007ea2:	75bb      	strb	r3, [r7, #22]
				break;
 8007ea4:	e00d      	b.n	8007ec2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007ea6:	7dbb      	ldrb	r3, [r7, #22]
 8007ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eac:	75bb      	strb	r3, [r7, #22]
				break;
 8007eae:	e008      	b.n	8007ec2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007eb0:	7dbb      	ldrb	r3, [r7, #22]
 8007eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb6:	75bb      	strb	r3, [r7, #22]
				break;
 8007eb8:	e003      	b.n	8007ec2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007eba:	23fc      	movs	r3, #252	; 0xfc
 8007ebc:	75fb      	strb	r3, [r7, #23]
 8007ebe:	e000      	b.n	8007ec2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007ec0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
 8007ec4:	7dba      	ldrb	r2, [r7, #22]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d01e      	beq.n	8007f08 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007eca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d107      	bne.n	8007ee2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8007ed2:	7dbb      	ldrb	r3, [r7, #22]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f004 f9a3 	bl	800c224 <VL53L0X_WrByte>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8007ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d103      	bne.n	8007ef2 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	7dba      	ldrb	r2, [r7, #22]
 8007eee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8007ef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007f00:	6939      	ldr	r1, [r7, #16]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7ff ff27 	bl	8007d56 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	72fb      	strb	r3, [r7, #11]
 8007f22:	4613      	mov	r3, r2
 8007f24:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f26:	2300      	movs	r3, #0
 8007f28:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8007f30:	7afb      	ldrb	r3, [r7, #11]
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	d836      	bhi.n	8007fa4 <sequence_step_enabled+0x90>
 8007f36:	a201      	add	r2, pc, #4	; (adr r2, 8007f3c <sequence_step_enabled+0x28>)
 8007f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3c:	08007f51 	.word	0x08007f51
 8007f40:	08007f63 	.word	0x08007f63
 8007f44:	08007f75 	.word	0x08007f75
 8007f48:	08007f87 	.word	0x08007f87
 8007f4c:	08007f99 	.word	0x08007f99
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007f50:	7abb      	ldrb	r3, [r7, #10]
 8007f52:	111b      	asrs	r3, r3, #4
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	701a      	strb	r2, [r3, #0]
		break;
 8007f60:	e022      	b.n	8007fa8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007f62:	7abb      	ldrb	r3, [r7, #10]
 8007f64:	10db      	asrs	r3, r3, #3
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	701a      	strb	r2, [r3, #0]
		break;
 8007f72:	e019      	b.n	8007fa8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007f74:	7abb      	ldrb	r3, [r7, #10]
 8007f76:	109b      	asrs	r3, r3, #2
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	701a      	strb	r2, [r3, #0]
		break;
 8007f84:	e010      	b.n	8007fa8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8007f86:	7abb      	ldrb	r3, [r7, #10]
 8007f88:	119b      	asrs	r3, r3, #6
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	701a      	strb	r2, [r3, #0]
		break;
 8007f96:	e007      	b.n	8007fa8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8007f98:	7abb      	ldrb	r3, [r7, #10]
 8007f9a:	09db      	lsrs	r3, r3, #7
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	701a      	strb	r2, [r3, #0]
		break;
 8007fa2:	e001      	b.n	8007fa8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007fa4:	23fc      	movs	r3, #252	; 0xfc
 8007fa6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	371c      	adds	r7, #28
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop

08007fb8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007fca:	f107 030e 	add.w	r3, r7, #14
 8007fce:	461a      	mov	r2, r3
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f004 f82c 	bl	800c030 <VL53L0X_RdByte>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d107      	bne.n	8007ff4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007fe4:	7bba      	ldrb	r2, [r7, #14]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2100      	movs	r1, #0
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7ff ff92 	bl	8007f14 <sequence_step_enabled>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d108      	bne.n	800800e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007ffc:	7bba      	ldrb	r2, [r7, #14]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	3302      	adds	r3, #2
 8008002:	2101      	movs	r1, #1
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff ff85 	bl	8007f14 <sequence_step_enabled>
 800800a:	4603      	mov	r3, r0
 800800c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800800e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d108      	bne.n	8008028 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8008016:	7bba      	ldrb	r2, [r7, #14]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	3301      	adds	r3, #1
 800801c:	2102      	movs	r1, #2
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff ff78 	bl	8007f14 <sequence_step_enabled>
 8008024:	4603      	mov	r3, r0
 8008026:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d108      	bne.n	8008042 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8008030:	7bba      	ldrb	r2, [r7, #14]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	3303      	adds	r3, #3
 8008036:	2103      	movs	r1, #3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff ff6b 	bl	8007f14 <sequence_step_enabled>
 800803e:	4603      	mov	r3, r0
 8008040:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d108      	bne.n	800805c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800804a:	7bba      	ldrb	r2, [r7, #14]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	3304      	adds	r3, #4
 8008050:	2104      	movs	r1, #4
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7ff ff5e 	bl	8007f14 <sequence_step_enabled>
 8008058:	4603      	mov	r3, r0
 800805a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800805c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b088      	sub	sp, #32
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	460b      	mov	r3, r1
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008076:	2300      	movs	r3, #0
 8008078:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 800807e:	2300      	movs	r3, #0
 8008080:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8008082:	f107 0210 	add.w	r2, r7, #16
 8008086:	7afb      	ldrb	r3, [r7, #11]
 8008088:	4619      	mov	r1, r3
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f002 fbd6 	bl	800a83c <get_sequence_step_timeout>
 8008090:	4603      	mov	r3, r0
 8008092:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8008094:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d11c      	bne.n	80080d6 <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	4a11      	ldr	r2, [pc, #68]	; (80080e4 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 80080a0:	fba2 2303 	umull	r2, r3, r2, r3
 80080a4:	099b      	lsrs	r3, r3, #6
 80080a6:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80080b0:	fb01 f303 	mul.w	r3, r1, r3
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	4613      	mov	r3, r2
 80080c0:	041b      	lsls	r3, r3, #16
 80080c2:	1a9b      	subs	r3, r3, r2
 80080c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80080c8:	4a06      	ldr	r2, [pc, #24]	; (80080e4 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 80080ca:	fba2 2303 	umull	r2, r3, r2, r3
 80080ce:	099b      	lsrs	r3, r3, #6
 80080d0:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80080d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3720      	adds	r7, #32
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	10624dd3 	.word	0x10624dd3

080080e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080f2:	2300      	movs	r3, #0
 80080f4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80080f6:	f107 030c 	add.w	r3, r7, #12
 80080fa:	461a      	mov	r2, r3
 80080fc:	21f8      	movs	r1, #248	; 0xf8
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f004 f81c 	bl	800c13c <VL53L0X_RdWord>
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8008108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d108      	bne.n	8008122 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8008110:	f107 0308 	add.w	r3, r7, #8
 8008114:	461a      	mov	r2, r3
 8008116:	2104      	movs	r1, #4
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f004 f847 	bl	800c1ac <VL53L0X_RdDWord>
 800811e:	4603      	mov	r3, r0
 8008120:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10c      	bne.n	8008144 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800812a:	89bb      	ldrh	r3, [r7, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d005      	beq.n	800813c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	89ba      	ldrh	r2, [r7, #12]
 8008134:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008144:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800815a:	2300      	movs	r3, #0
 800815c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	7f1b      	ldrb	r3, [r3, #28]
 8008162:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	7bba      	ldrb	r2, [r7, #14]
 8008168:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800816a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	bc80      	pop	{r7}
 8008176:	4770      	bx	lr

08008178 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008182:	2300      	movs	r3, #0
 8008184:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8008186:	f107 030e 	add.w	r3, r7, #14
 800818a:	461a      	mov	r2, r3
 800818c:	2120      	movs	r1, #32
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f003 ffd4 	bl	800c13c <VL53L0X_RdWord>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8008198:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d118      	bne.n	80081d2 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80081a0:	89fb      	ldrh	r3, [r7, #14]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d109      	bne.n	80081ba <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	771a      	strb	r2, [r3, #28]
 80081b8:	e00b      	b.n	80081d2 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80081ba:	89fb      	ldrh	r3, [r7, #14]
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	807b      	strh	r3, [r7, #2]
 80081ec:	4613      	mov	r3, r2
 80081ee:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081f0:	2300      	movs	r3, #0
 80081f2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008200:	887b      	ldrh	r3, [r7, #2]
 8008202:	2b05      	cmp	r3, #5
 8008204:	d902      	bls.n	800820c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008206:	23fc      	movs	r3, #252	; 0xfc
 8008208:	75fb      	strb	r3, [r7, #23]
 800820a:	e05b      	b.n	80082c4 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800820c:	787b      	ldrb	r3, [r7, #1]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d106      	bne.n	8008220 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8008212:	2300      	movs	r3, #0
 8008214:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800821a:	2301      	movs	r3, #1
 800821c:	73bb      	strb	r3, [r7, #14]
 800821e:	e00a      	b.n	8008236 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008220:	887b      	ldrh	r3, [r7, #2]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	330c      	adds	r3, #12
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8008232:	2301      	movs	r3, #1
 8008234:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8008236:	887b      	ldrh	r3, [r7, #2]
 8008238:	2b05      	cmp	r3, #5
 800823a:	d841      	bhi.n	80082c0 <VL53L0X_SetLimitCheckEnable+0xe0>
 800823c:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <VL53L0X_SetLimitCheckEnable+0x64>)
 800823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008242:	bf00      	nop
 8008244:	0800825d 	.word	0x0800825d
 8008248:	08008267 	.word	0x08008267
 800824c:	0800827d 	.word	0x0800827d
 8008250:	08008287 	.word	0x08008287
 8008254:	08008291 	.word	0x08008291
 8008258:	080082a9 	.word	0x080082a9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	7bfa      	ldrb	r2, [r7, #15]
 8008260:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8008264:	e02e      	b.n	80082c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800826a:	b29b      	uxth	r3, r3
 800826c:	461a      	mov	r2, r3
 800826e:	2144      	movs	r1, #68	; 0x44
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f003 fffb 	bl	800c26c <VL53L0X_WrWord>
 8008276:	4603      	mov	r3, r0
 8008278:	75fb      	strb	r3, [r7, #23]

			break;
 800827a:	e023      	b.n	80082c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	7bfa      	ldrb	r2, [r7, #15]
 8008280:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8008284:	e01e      	b.n	80082c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	7bfa      	ldrb	r2, [r7, #15]
 800828a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800828e:	e019      	b.n	80082c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008296:	7b7b      	ldrb	r3, [r7, #13]
 8008298:	22fe      	movs	r2, #254	; 0xfe
 800829a:	2160      	movs	r1, #96	; 0x60
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f004 f80f 	bl	800c2c0 <VL53L0X_UpdateByte>
 80082a2:	4603      	mov	r3, r0
 80082a4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80082a6:	e00d      	b.n	80082c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	011b      	lsls	r3, r3, #4
 80082ac:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80082ae:	7b7b      	ldrb	r3, [r7, #13]
 80082b0:	22ef      	movs	r2, #239	; 0xef
 80082b2:	2160      	movs	r1, #96	; 0x60
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f004 f803 	bl	800c2c0 <VL53L0X_UpdateByte>
 80082ba:	4603      	mov	r3, r0
 80082bc:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80082be:	e001      	b.n	80082c4 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80082c0:	23fc      	movs	r3, #252	; 0xfc
 80082c2:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80082c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10f      	bne.n	80082ec <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80082cc:	787b      	ldrb	r3, [r7, #1]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d106      	bne.n	80082e0 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80082d2:	887b      	ldrh	r3, [r7, #2]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	4413      	add	r3, r2
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80082de:	e005      	b.n	80082ec <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80082e0:	887b      	ldrh	r3, [r7, #2]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	4413      	add	r3, r2
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80082ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	460b      	mov	r3, r1
 8008302:	607a      	str	r2, [r7, #4]
 8008304:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008306:	2300      	movs	r3, #0
 8008308:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800830a:	897b      	ldrh	r3, [r7, #10]
 800830c:	2b05      	cmp	r3, #5
 800830e:	d905      	bls.n	800831c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008310:	23fc      	movs	r3, #252	; 0xfc
 8008312:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	701a      	strb	r2, [r3, #0]
 800831a:	e008      	b.n	800832e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800831c:	897b      	ldrh	r3, [r7, #10]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	4413      	add	r3, r2
 8008322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008326:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	7dba      	ldrb	r2, [r7, #22]
 800832c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800832e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008332:	4618      	mov	r0, r3
 8008334:	371c      	adds	r7, #28
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr

0800833c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	460b      	mov	r3, r1
 8008346:	607a      	str	r2, [r7, #4]
 8008348:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800834a:	2300      	movs	r3, #0
 800834c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800834e:	897b      	ldrh	r3, [r7, #10]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	4413      	add	r3, r2
 8008354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008358:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800835a:	7dbb      	ldrb	r3, [r7, #22]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d107      	bne.n	8008370 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008360:	897b      	ldrh	r3, [r7, #10]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	330c      	adds	r3, #12
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	605a      	str	r2, [r3, #4]
 800836e:	e040      	b.n	80083f2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8008370:	897b      	ldrh	r3, [r7, #10]
 8008372:	2b05      	cmp	r3, #5
 8008374:	d830      	bhi.n	80083d8 <VL53L0X_SetLimitCheckValue+0x9c>
 8008376:	a201      	add	r2, pc, #4	; (adr r2, 800837c <VL53L0X_SetLimitCheckValue+0x40>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	08008395 	.word	0x08008395
 8008380:	0800839d 	.word	0x0800839d
 8008384:	080083b3 	.word	0x080083b3
 8008388:	080083bb 	.word	0x080083bb
 800838c:	080083c3 	.word	0x080083c3
 8008390:	080083c3 	.word	0x080083c3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800839a:	e01f      	b.n	80083dc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	461a      	mov	r2, r3
 80083a4:	2144      	movs	r1, #68	; 0x44
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f003 ff60 	bl	800c26c <VL53L0X_WrWord>
 80083ac:	4603      	mov	r3, r0
 80083ae:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80083b0:	e014      	b.n	80083dc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80083b8:	e010      	b.n	80083dc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80083c0:	e00c      	b.n	80083dc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	461a      	mov	r2, r3
 80083ca:	2164      	movs	r1, #100	; 0x64
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f003 ff4d 	bl	800c26c <VL53L0X_WrWord>
 80083d2:	4603      	mov	r3, r0
 80083d4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80083d6:	e001      	b.n	80083dc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80083d8:	23fc      	movs	r3, #252	; 0xfc
 80083da:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80083dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d106      	bne.n	80083f2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80083e4:	897b      	ldrh	r3, [r7, #10]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	330c      	adds	r3, #12
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop

08008400 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	460b      	mov	r3, r1
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800840e:	2300      	movs	r3, #0
 8008410:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008416:	897b      	ldrh	r3, [r7, #10]
 8008418:	2b05      	cmp	r3, #5
 800841a:	d847      	bhi.n	80084ac <VL53L0X_GetLimitCheckValue+0xac>
 800841c:	a201      	add	r2, pc, #4	; (adr r2, 8008424 <VL53L0X_GetLimitCheckValue+0x24>)
 800841e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008422:	bf00      	nop
 8008424:	0800843d 	.word	0x0800843d
 8008428:	08008449 	.word	0x08008449
 800842c:	0800846f 	.word	0x0800846f
 8008430:	0800847b 	.word	0x0800847b
 8008434:	08008487 	.word	0x08008487
 8008438:	08008487 	.word	0x08008487

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008440:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	77bb      	strb	r3, [r7, #30]
		break;
 8008446:	e033      	b.n	80084b0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008448:	f107 0316 	add.w	r3, r7, #22
 800844c:	461a      	mov	r2, r3
 800844e:	2144      	movs	r1, #68	; 0x44
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f003 fe73 	bl	800c13c <VL53L0X_RdWord>
 8008456:	4603      	mov	r3, r0
 8008458:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800845a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d102      	bne.n	8008468 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008462:	8afb      	ldrh	r3, [r7, #22]
 8008464:	025b      	lsls	r3, r3, #9
 8008466:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8008468:	2301      	movs	r3, #1
 800846a:	77bb      	strb	r3, [r7, #30]
		break;
 800846c:	e020      	b.n	80084b0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008472:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	77bb      	strb	r3, [r7, #30]
		break;
 8008478:	e01a      	b.n	80084b0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	77bb      	strb	r3, [r7, #30]
		break;
 8008484:	e014      	b.n	80084b0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008486:	f107 0316 	add.w	r3, r7, #22
 800848a:	461a      	mov	r2, r3
 800848c:	2164      	movs	r1, #100	; 0x64
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f003 fe54 	bl	800c13c <VL53L0X_RdWord>
 8008494:	4603      	mov	r3, r0
 8008496:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008498:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d102      	bne.n	80084a6 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80084a0:	8afb      	ldrh	r3, [r7, #22]
 80084a2:	025b      	lsls	r3, r3, #9
 80084a4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	77bb      	strb	r3, [r7, #30]
		break;
 80084aa:	e001      	b.n	80084b0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80084ac:	23fc      	movs	r3, #252	; 0xfc
 80084ae:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80084b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d12a      	bne.n	800850e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80084b8:	7fbb      	ldrb	r3, [r7, #30]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d124      	bne.n	8008508 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d110      	bne.n	80084e6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80084c4:	897b      	ldrh	r3, [r7, #10]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	330c      	adds	r3, #12
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	69ba      	ldr	r2, [r7, #24]
 80084d6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80084d8:	897b      	ldrh	r3, [r7, #10]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	4413      	add	r3, r2
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80084e4:	e013      	b.n	800850e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80084ec:	897b      	ldrh	r3, [r7, #10]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	330c      	adds	r3, #12
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	69ba      	ldr	r2, [r7, #24]
 80084f8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80084fa:	897b      	ldrh	r3, [r7, #10]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008506:	e002      	b.n	800850e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	69ba      	ldr	r2, [r7, #24]
 800850c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800850e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008512:	4618      	mov	r0, r3
 8008514:	3720      	adds	r7, #32
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop

0800851c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008526:	2300      	movs	r3, #0
 8008528:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800852a:	f107 030e 	add.w	r3, r7, #14
 800852e:	461a      	mov	r2, r3
 8008530:	2101      	movs	r1, #1
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f003 fd7c 	bl	800c030 <VL53L0X_RdByte>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800853c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10e      	bne.n	8008562 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008544:	7bba      	ldrb	r2, [r7, #14]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	b25b      	sxtb	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	da03      	bge.n	800855c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2201      	movs	r2, #1
 8008558:	701a      	strb	r2, [r3, #0]
 800855a:	e002      	b.n	8008562 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2200      	movs	r2, #0
 8008560:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d104      	bne.n	8008574 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	781a      	ldrb	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008574:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008588:	2300      	movs	r3, #0
 800858a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800858c:	f107 030e 	add.w	r3, r7, #14
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff fbae 	bl	8007cf4 <VL53L0X_GetDeviceMode>
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800859c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d107      	bne.n	80085b4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d104      	bne.n	80085b4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 f898 	bl	80086e0 <VL53L0X_StartMeasurement>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80085b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d104      	bne.n	80085c6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 fb08 	bl	8009bd2 <VL53L0X_measurement_poll_for_completion>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80085c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d106      	bne.n	80085dc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d103      	bne.n	80085dc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2203      	movs	r2, #3
 80085d8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80085dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085f4:	2300      	movs	r3, #0
 80085f6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80085f8:	2301      	movs	r3, #1
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	68b9      	ldr	r1, [r7, #8]
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f001 faaa 	bl	8009b58 <VL53L0X_perform_ref_calibration>
 8008604:	4603      	mov	r3, r0
 8008606:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8008608:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008620:	2300      	movs	r3, #0
 8008622:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800862a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800862c:	7dbb      	ldrb	r3, [r7, #22]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d005      	beq.n	800863e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8008632:	7dbb      	ldrb	r3, [r7, #22]
 8008634:	2b02      	cmp	r3, #2
 8008636:	d002      	beq.n	800863e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8008638:	7dbb      	ldrb	r3, [r7, #22]
 800863a:	2b03      	cmp	r3, #3
 800863c:	d147      	bne.n	80086ce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800863e:	f107 030c 	add.w	r3, r7, #12
 8008642:	f107 0210 	add.w	r2, r7, #16
 8008646:	2101      	movs	r1, #1
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fb8d 	bl	8008d68 <VL53L0X_GetInterruptThresholds>
 800864e:	4603      	mov	r3, r0
 8008650:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008658:	d803      	bhi.n	8008662 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800865a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800865c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008660:	d935      	bls.n	80086ce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8008662:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d131      	bne.n	80086ce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800866a:	78fb      	ldrb	r3, [r7, #3]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d006      	beq.n	800867e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8008670:	491a      	ldr	r1, [pc, #104]	; (80086dc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f002 fc80 	bl	800af78 <VL53L0X_load_tuning_settings>
 8008678:	4603      	mov	r3, r0
 800867a:	75fb      	strb	r3, [r7, #23]
 800867c:	e027      	b.n	80086ce <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800867e:	2204      	movs	r2, #4
 8008680:	21ff      	movs	r1, #255	; 0xff
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f003 fdce 	bl	800c224 <VL53L0X_WrByte>
 8008688:	4603      	mov	r3, r0
 800868a:	461a      	mov	r2, r3
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	4313      	orrs	r3, r2
 8008690:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8008692:	2200      	movs	r2, #0
 8008694:	2170      	movs	r1, #112	; 0x70
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f003 fdc4 	bl	800c224 <VL53L0X_WrByte>
 800869c:	4603      	mov	r3, r0
 800869e:	461a      	mov	r2, r3
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80086a6:	2200      	movs	r2, #0
 80086a8:	21ff      	movs	r1, #255	; 0xff
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f003 fdba 	bl	800c224 <VL53L0X_WrByte>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80086ba:	2200      	movs	r2, #0
 80086bc:	2180      	movs	r1, #128	; 0x80
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f003 fdb0 	bl	800c224 <VL53L0X_WrByte>
 80086c4:	4603      	mov	r3, r0
 80086c6:	461a      	mov	r2, r3
 80086c8:	7dfb      	ldrb	r3, [r7, #23]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80086ce:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	20000108 	.word	0x20000108

080086e0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086e8:	2300      	movs	r3, #0
 80086ea:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80086ec:	2301      	movs	r3, #1
 80086ee:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80086f0:	f107 030e 	add.w	r3, r7, #14
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7ff fafc 	bl	8007cf4 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d052      	beq.n	80087a8 <VL53L0X_StartMeasurement+0xc8>
 8008702:	2b03      	cmp	r3, #3
 8008704:	dc6a      	bgt.n	80087dc <VL53L0X_StartMeasurement+0xfc>
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <VL53L0X_StartMeasurement+0x30>
 800870a:	2b01      	cmp	r3, #1
 800870c:	d032      	beq.n	8008774 <VL53L0X_StartMeasurement+0x94>
 800870e:	e065      	b.n	80087dc <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8008710:	2201      	movs	r2, #1
 8008712:	2100      	movs	r1, #0
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f003 fd85 	bl	800c224 <VL53L0X_WrByte>
 800871a:	4603      	mov	r3, r0
 800871c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8008722:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d15b      	bne.n	80087e2 <VL53L0X_StartMeasurement+0x102>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d008      	beq.n	8008746 <VL53L0X_StartMeasurement+0x66>
					Status = VL53L0X_RdByte(Dev,
 8008734:	f107 030d 	add.w	r3, r7, #13
 8008738:	461a      	mov	r2, r3
 800873a:	2100      	movs	r1, #0
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f003 fc77 	bl	800c030 <VL53L0X_RdByte>
 8008742:	4603      	mov	r3, r0
 8008744:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	3301      	adds	r3, #1
 800874a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800874c:	7b7a      	ldrb	r2, [r7, #13]
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	4013      	ands	r3, r2
 8008752:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008754:	7bfa      	ldrb	r2, [r7, #15]
 8008756:	429a      	cmp	r2, r3
 8008758:	d106      	bne.n	8008768 <VL53L0X_StartMeasurement+0x88>
				&& (Status == VL53L0X_ERROR_NONE)
 800875a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d102      	bne.n	8008768 <VL53L0X_StartMeasurement+0x88>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	2bc7      	cmp	r3, #199	; 0xc7
 8008766:	d9e2      	bls.n	800872e <VL53L0X_StartMeasurement+0x4e>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	2bc7      	cmp	r3, #199	; 0xc7
 800876c:	d939      	bls.n	80087e2 <VL53L0X_StartMeasurement+0x102>
				Status = VL53L0X_ERROR_TIME_OUT;
 800876e:	23f9      	movs	r3, #249	; 0xf9
 8008770:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8008772:	e036      	b.n	80087e2 <VL53L0X_StartMeasurement+0x102>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008774:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d105      	bne.n	8008788 <VL53L0X_StartMeasurement+0xa8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800877c:	2101      	movs	r1, #1
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff ff48 	bl	8008614 <VL53L0X_CheckAndLoadInterruptSettings>
 8008784:	4603      	mov	r3, r0
 8008786:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008788:	2202      	movs	r2, #2
 800878a:	2100      	movs	r1, #0
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f003 fd49 	bl	800c224 <VL53L0X_WrByte>
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8008796:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d123      	bne.n	80087e6 <VL53L0X_StartMeasurement+0x106>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2204      	movs	r2, #4
 80087a2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80087a6:	e01e      	b.n	80087e6 <VL53L0X_StartMeasurement+0x106>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80087a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d105      	bne.n	80087bc <VL53L0X_StartMeasurement+0xdc>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80087b0:	2101      	movs	r1, #1
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff ff2e 	bl	8008614 <VL53L0X_CheckAndLoadInterruptSettings>
 80087b8:	4603      	mov	r3, r0
 80087ba:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80087bc:	2204      	movs	r2, #4
 80087be:	2100      	movs	r1, #0
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f003 fd2f 	bl	800c224 <VL53L0X_WrByte>
 80087c6:	4603      	mov	r3, r0
 80087c8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80087ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10b      	bne.n	80087ea <VL53L0X_StartMeasurement+0x10a>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2204      	movs	r2, #4
 80087d6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80087da:	e006      	b.n	80087ea <VL53L0X_StartMeasurement+0x10a>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80087dc:	23f8      	movs	r3, #248	; 0xf8
 80087de:	75fb      	strb	r3, [r7, #23]
 80087e0:	e004      	b.n	80087ec <VL53L0X_StartMeasurement+0x10c>
		break;
 80087e2:	bf00      	nop
 80087e4:	e002      	b.n	80087ec <VL53L0X_StartMeasurement+0x10c>
		break;
 80087e6:	bf00      	nop
 80087e8:	e000      	b.n	80087ec <VL53L0X_StartMeasurement+0x10c>
		break;
 80087ea:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80087ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800880c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	2b04      	cmp	r3, #4
 8008812:	d112      	bne.n	800883a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8008814:	f107 0308 	add.w	r3, r7, #8
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fb1a 	bl	8008e54 <VL53L0X_GetInterruptMaskStatus>
 8008820:	4603      	mov	r3, r0
 8008822:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b04      	cmp	r3, #4
 8008828:	d103      	bne.n	8008832 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2201      	movs	r2, #1
 800882e:	701a      	strb	r2, [r3, #0]
 8008830:	e01c      	b.n	800886c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2200      	movs	r2, #0
 8008836:	701a      	strb	r2, [r3, #0]
 8008838:	e018      	b.n	800886c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800883a:	f107 030d 	add.w	r3, r7, #13
 800883e:	461a      	mov	r2, r3
 8008840:	2114      	movs	r1, #20
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f003 fbf4 	bl	800c030 <VL53L0X_RdByte>
 8008848:	4603      	mov	r3, r0
 800884a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800884c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10b      	bne.n	800886c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8008854:	7b7b      	ldrb	r3, [r7, #13]
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2201      	movs	r2, #1
 8008862:	701a      	strb	r2, [r3, #0]
 8008864:	e002      	b.n	800886c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	2200      	movs	r2, #0
 800886a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800886c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008878:	b5b0      	push	{r4, r5, r7, lr}
 800887a:	b096      	sub	sp, #88	; 0x58
 800887c:	af02      	add	r7, sp, #8
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008882:	2300      	movs	r3, #0
 8008884:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8008888:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800888c:	230c      	movs	r3, #12
 800888e:	2114      	movs	r1, #20
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f003 fc27 	bl	800c0e4 <VL53L0X_ReadMulti>
 8008896:	4603      	mov	r3, r0
 8008898:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800889c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f040 80d1 	bne.w	8008a48 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	2200      	movs	r2, #0
 80088aa:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80088b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	021b      	lsls	r3, r3, #8
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	4413      	add	r3, r2
 80088c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	2200      	movs	r2, #0
 80088cc:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80088ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	021b      	lsls	r3, r3, #8
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088dc:	b29b      	uxth	r3, r3
 80088de:	4413      	add	r3, r2
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	025b      	lsls	r3, r3, #9
 80088e4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088ea:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80088ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	021b      	lsls	r3, r3, #8
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	4413      	add	r3, r2
 80088fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8008902:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008906:	025b      	lsls	r3, r3, #9
 8008908:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800890e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008912:	b29b      	uxth	r3, r3
 8008914:	021b      	lsls	r3, r3, #8
 8008916:	b29a      	uxth	r2, r3
 8008918:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800891c:	b29b      	uxth	r3, r3
 800891e:	4413      	add	r3, r2
 8008920:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800892a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800892c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008930:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 800893a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008942:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8008946:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800894c:	d046      	beq.n	80089dc <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800894e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008950:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008954:	fb02 f303 	mul.w	r3, r2, r3
 8008958:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800895c:	4a57      	ldr	r2, [pc, #348]	; (8008abc <VL53L0X_GetRangingMeasurementData+0x244>)
 800895e:	fb82 1203 	smull	r1, r2, r2, r3
 8008962:	1192      	asrs	r2, r2, #6
 8008964:	17db      	asrs	r3, r3, #31
 8008966:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8008968:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a1b      	ldr	r3, [r3, #32]
 8008970:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	7f1b      	ldrb	r3, [r3, #28]
 8008976:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800897a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800897e:	2b00      	cmp	r3, #0
 8008980:	d02c      	beq.n	80089dc <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8008982:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008984:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008988:	fb02 f303 	mul.w	r3, r2, r3
 800898c:	121a      	asrs	r2, r3, #8
					<= 0) {
 800898e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8008990:	429a      	cmp	r2, r3
 8008992:	d10d      	bne.n	80089b0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8008994:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008998:	2b00      	cmp	r3, #0
 800899a:	d004      	beq.n	80089a6 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800899c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80089a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80089a4:	e016      	b.n	80089d4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80089a6:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80089aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80089ae:	e011      	b.n	80089d4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80089b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80089b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089b6:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80089ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80089bc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80089c0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80089c4:	121b      	asrs	r3, r3, #8
 80089c6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80089c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ca:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80089cc:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80089d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80089d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80089d8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80089dc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00d      	beq.n	8008a00 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80089e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80089e8:	089b      	lsrs	r3, r3, #2
 80089ea:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80089f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	019b      	lsls	r3, r3, #6
 80089f8:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	75da      	strb	r2, [r3, #23]
 80089fe:	e006      	b.n	8008a0e <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008a06:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8008a0e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008a12:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8008a16:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8008a1a:	9301      	str	r3, [sp, #4]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	4613      	mov	r3, r2
 8008a22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f002 ff09 	bl	800b83c <VL53L0X_get_pal_range_status>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008a32:	4313      	orrs	r3, r2
 8008a34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8008a38:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d103      	bne.n	8008a48 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8008a40:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008a48:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d12f      	bne.n	8008ab0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f107 040c 	add.w	r4, r7, #12
 8008a56:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a62:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8008a6a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8008a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8008a78:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8008a7e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8008a84:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8008a8a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8008a90:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8008a96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8008aa0:	f107 050c 	add.w	r5, r7, #12
 8008aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008aa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008aac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ab0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3750      	adds	r7, #80	; 0x50
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bdb0      	pop	{r4, r5, r7, pc}
 8008abc:	10624dd3 	.word	0x10624dd3

08008ac0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008ace:	2100      	movs	r1, #0
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff f8e5 	bl	8007ca0 <VL53L0X_SetDeviceMode>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d104      	bne.n	8008aec <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7ff fd4c 	bl	8008580 <VL53L0X_PerformSingleMeasurement>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d105      	bne.n	8008b00 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff febe 	bl	8008878 <VL53L0X_GetRangingMeasurementData>
 8008afc:	4603      	mov	r3, r0
 8008afe:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8008b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d105      	bne.n	8008b14 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008b08:	2100      	movs	r1, #0
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f962 	bl	8008dd4 <VL53L0X_ClearInterruptMask>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8008b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	4608      	mov	r0, r1
 8008b2a:	4611      	mov	r1, r2
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	4603      	mov	r3, r0
 8008b30:	70fb      	strb	r3, [r7, #3]
 8008b32:	460b      	mov	r3, r1
 8008b34:	70bb      	strb	r3, [r7, #2]
 8008b36:	4613      	mov	r3, r2
 8008b38:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8008b3e:	78fb      	ldrb	r3, [r7, #3]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8008b44:	23f6      	movs	r3, #246	; 0xf6
 8008b46:	73fb      	strb	r3, [r7, #15]
 8008b48:	e107      	b.n	8008d5a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8008b4a:	78bb      	ldrb	r3, [r7, #2]
 8008b4c:	2b14      	cmp	r3, #20
 8008b4e:	d110      	bne.n	8008b72 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008b50:	7e3b      	ldrb	r3, [r7, #24]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d102      	bne.n	8008b5c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8008b56:	2310      	movs	r3, #16
 8008b58:	73bb      	strb	r3, [r7, #14]
 8008b5a:	e001      	b.n	8008b60 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	461a      	mov	r2, r3
 8008b64:	2184      	movs	r1, #132	; 0x84
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f003 fb5c 	bl	800c224 <VL53L0X_WrByte>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	73fb      	strb	r3, [r7, #15]
 8008b70:	e0f3      	b.n	8008d5a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8008b72:	78bb      	ldrb	r3, [r7, #2]
 8008b74:	2b15      	cmp	r3, #21
 8008b76:	f040 8097 	bne.w	8008ca8 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	21ff      	movs	r1, #255	; 0xff
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f003 fb50 	bl	800c224 <VL53L0X_WrByte>
 8008b84:	4603      	mov	r3, r0
 8008b86:	461a      	mov	r2, r3
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2100      	movs	r1, #0
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f003 fb46 	bl	800c224 <VL53L0X_WrByte>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	21ff      	movs	r1, #255	; 0xff
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f003 fb3c 	bl	800c224 <VL53L0X_WrByte>
 8008bac:	4603      	mov	r3, r0
 8008bae:	461a      	mov	r2, r3
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	2180      	movs	r1, #128	; 0x80
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f003 fb32 	bl	800c224 <VL53L0X_WrByte>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8008bca:	2202      	movs	r2, #2
 8008bcc:	2185      	movs	r1, #133	; 0x85
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f003 fb28 	bl	800c224 <VL53L0X_WrByte>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8008bde:	2204      	movs	r2, #4
 8008be0:	21ff      	movs	r1, #255	; 0xff
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f003 fb1e 	bl	800c224 <VL53L0X_WrByte>
 8008be8:	4603      	mov	r3, r0
 8008bea:	461a      	mov	r2, r3
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	21cd      	movs	r1, #205	; 0xcd
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f003 fb14 	bl	800c224 <VL53L0X_WrByte>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	461a      	mov	r2, r3
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8008c06:	2211      	movs	r2, #17
 8008c08:	21cc      	movs	r1, #204	; 0xcc
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f003 fb0a 	bl	800c224 <VL53L0X_WrByte>
 8008c10:	4603      	mov	r3, r0
 8008c12:	461a      	mov	r2, r3
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8008c1a:	2207      	movs	r2, #7
 8008c1c:	21ff      	movs	r1, #255	; 0xff
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f003 fb00 	bl	800c224 <VL53L0X_WrByte>
 8008c24:	4603      	mov	r3, r0
 8008c26:	461a      	mov	r2, r3
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8008c2e:	2200      	movs	r2, #0
 8008c30:	21be      	movs	r1, #190	; 0xbe
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f003 faf6 	bl	800c224 <VL53L0X_WrByte>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8008c42:	2206      	movs	r2, #6
 8008c44:	21ff      	movs	r1, #255	; 0xff
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f003 faec 	bl	800c224 <VL53L0X_WrByte>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	461a      	mov	r2, r3
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8008c56:	2209      	movs	r2, #9
 8008c58:	21cc      	movs	r1, #204	; 0xcc
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f003 fae2 	bl	800c224 <VL53L0X_WrByte>
 8008c60:	4603      	mov	r3, r0
 8008c62:	461a      	mov	r2, r3
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	21ff      	movs	r1, #255	; 0xff
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f003 fad8 	bl	800c224 <VL53L0X_WrByte>
 8008c74:	4603      	mov	r3, r0
 8008c76:	461a      	mov	r2, r3
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008c7e:	2201      	movs	r2, #1
 8008c80:	21ff      	movs	r1, #255	; 0xff
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f003 face 	bl	800c224 <VL53L0X_WrByte>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008c92:	2200      	movs	r2, #0
 8008c94:	2100      	movs	r1, #0
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f003 fac4 	bl	800c224 <VL53L0X_WrByte>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	73fb      	strb	r3, [r7, #15]
 8008ca6:	e058      	b.n	8008d5a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8008ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d121      	bne.n	8008cf4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8008cb0:	787b      	ldrb	r3, [r7, #1]
 8008cb2:	2b04      	cmp	r3, #4
 8008cb4:	d81b      	bhi.n	8008cee <VL53L0X_SetGpioConfig+0x1ce>
 8008cb6:	a201      	add	r2, pc, #4	; (adr r2, 8008cbc <VL53L0X_SetGpioConfig+0x19c>)
 8008cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbc:	08008cd1 	.word	0x08008cd1
 8008cc0:	08008cd7 	.word	0x08008cd7
 8008cc4:	08008cdd 	.word	0x08008cdd
 8008cc8:	08008ce3 	.word	0x08008ce3
 8008ccc:	08008ce9 	.word	0x08008ce9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73bb      	strb	r3, [r7, #14]
				break;
 8008cd4:	e00f      	b.n	8008cf6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	73bb      	strb	r3, [r7, #14]
				break;
 8008cda:	e00c      	b.n	8008cf6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008cdc:	2302      	movs	r3, #2
 8008cde:	73bb      	strb	r3, [r7, #14]
				break;
 8008ce0:	e009      	b.n	8008cf6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	73bb      	strb	r3, [r7, #14]
				break;
 8008ce6:	e006      	b.n	8008cf6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008ce8:	2304      	movs	r3, #4
 8008cea:	73bb      	strb	r3, [r7, #14]
				break;
 8008cec:	e003      	b.n	8008cf6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8008cee:	23f5      	movs	r3, #245	; 0xf5
 8008cf0:	73fb      	strb	r3, [r7, #15]
 8008cf2:	e000      	b.n	8008cf6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8008cf4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8008cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d107      	bne.n	8008d0e <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
 8008d00:	461a      	mov	r2, r3
 8008d02:	210a      	movs	r1, #10
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f003 fa8d 	bl	800c224 <VL53L0X_WrByte>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8008d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10f      	bne.n	8008d36 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008d16:	7e3b      	ldrb	r3, [r7, #24]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d102      	bne.n	8008d22 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	73bb      	strb	r3, [r7, #14]
 8008d20:	e001      	b.n	8008d26 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8008d22:	2310      	movs	r3, #16
 8008d24:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	22ef      	movs	r2, #239	; 0xef
 8008d2a:	2184      	movs	r1, #132	; 0x84
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f003 fac7 	bl	800c2c0 <VL53L0X_UpdateByte>
 8008d32:	4603      	mov	r3, r0
 8008d34:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d103      	bne.n	8008d46 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	787a      	ldrb	r2, [r7, #1]
 8008d42:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d105      	bne.n	8008d5a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008d4e:	2100      	movs	r1, #0
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f83f 	bl	8008dd4 <VL53L0X_ClearInterruptMask>
 8008d56:	4603      	mov	r3, r0
 8008d58:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop

08008d68 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	607a      	str	r2, [r7, #4]
 8008d72:	603b      	str	r3, [r7, #0]
 8008d74:	460b      	mov	r3, r1
 8008d76:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8008d7c:	f107 0314 	add.w	r3, r7, #20
 8008d80:	461a      	mov	r2, r3
 8008d82:	210e      	movs	r1, #14
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f003 f9d9 	bl	800c13c <VL53L0X_RdWord>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008d8e:	8abb      	ldrh	r3, [r7, #20]
 8008d90:	045b      	lsls	r3, r3, #17
 8008d92:	461a      	mov	r2, r3
 8008d94:	4b0e      	ldr	r3, [pc, #56]	; (8008dd0 <VL53L0X_GetInterruptThresholds+0x68>)
 8008d96:	4013      	ands	r3, r2
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008d9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10f      	bne.n	8008dc4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008da4:	f107 0314 	add.w	r3, r7, #20
 8008da8:	461a      	mov	r2, r3
 8008daa:	210c      	movs	r1, #12
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f003 f9c5 	bl	800c13c <VL53L0X_RdWord>
 8008db2:	4603      	mov	r3, r0
 8008db4:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008db6:	8abb      	ldrh	r3, [r7, #20]
 8008db8:	045b      	lsls	r3, r3, #17
 8008dba:	461a      	mov	r2, r3
 8008dbc:	4b04      	ldr	r3, [pc, #16]	; (8008dd0 <VL53L0X_GetInterruptThresholds+0x68>)
 8008dbe:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	1ffe0000 	.word	0x1ffe0000

08008dd4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8008de6:	2201      	movs	r2, #1
 8008de8:	210b      	movs	r1, #11
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f003 fa1a 	bl	800c224 <VL53L0X_WrByte>
 8008df0:	4603      	mov	r3, r0
 8008df2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008df4:	2200      	movs	r2, #0
 8008df6:	210b      	movs	r1, #11
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f003 fa13 	bl	800c224 <VL53L0X_WrByte>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	461a      	mov	r2, r3
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008e08:	f107 030d 	add.w	r3, r7, #13
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	2113      	movs	r1, #19
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f003 f90d 	bl	800c030 <VL53L0X_RdByte>
 8008e16:	4603      	mov	r3, r0
 8008e18:	461a      	mov	r2, r3
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
 8008e22:	3301      	adds	r3, #1
 8008e24:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8008e26:	7b7b      	ldrb	r3, [r7, #13]
 8008e28:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d006      	beq.n	8008e3e <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d803      	bhi.n	8008e3e <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8008e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0d3      	beq.n	8008de6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d901      	bls.n	8008e48 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008e44:	23f4      	movs	r3, #244	; 0xf4
 8008e46:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8008e62:	f107 030e 	add.w	r3, r7, #14
 8008e66:	461a      	mov	r2, r3
 8008e68:	2113      	movs	r1, #19
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f003 f8e0 	bl	800c030 <VL53L0X_RdByte>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008e74:	7bbb      	ldrb	r3, [r7, #14]
 8008e76:	f003 0207 	and.w	r2, r3, #7
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	f003 0318 	and.w	r3, r3, #24
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008e88:	23fa      	movs	r3, #250	; 0xfa
 8008e8a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	68b9      	ldr	r1, [r7, #8]
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f000 fa02 	bl	80092b6 <VL53L0X_perform_ref_spad_management>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8008eb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008ed0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008ed4:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8008ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eda:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8008edc:	f107 0308 	add.w	r3, r7, #8
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	2128      	movs	r1, #40	; 0x28
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f003 f929 	bl	800c13c <VL53L0X_RdWord>
 8008eea:	4603      	mov	r3, r0
 8008eec:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8008eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d11e      	bne.n	8008f34 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8008ef6:	893b      	ldrh	r3, [r7, #8]
 8008ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008f00:	893b      	ldrh	r3, [r7, #8]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	dd0b      	ble.n	8008f24 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8008f0c:	893a      	ldrh	r2, [r7, #8]
 8008f0e:	897b      	ldrh	r3, [r7, #10]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	b21b      	sxth	r3, r3
 8008f16:	461a      	mov	r2, r3
					* 250;
 8008f18:	23fa      	movs	r3, #250	; 0xfa
 8008f1a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	e007      	b.n	8008f34 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008f24:	893b      	ldrh	r3, [r7, #8]
 8008f26:	b21b      	sxth	r3, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	23fa      	movs	r3, #250	; 0xfa
 8008f2c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b08b      	sub	sp, #44	; 0x2c
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8008f4e:	2308      	movs	r3, #8
 8008f50:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	f04f 32ff 	mov.w	r2, #4294967295
 8008f5c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f66:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f70:	69b9      	ldr	r1, [r7, #24]
 8008f72:	fb01 f202 	mul.w	r2, r1, r2
 8008f76:	1a9b      	subs	r3, r3, r2
 8008f78:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f7e:	e030      	b.n	8008fe2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	4413      	add	r3, r2
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d11e      	bne.n	8008fd4 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8008f96:	7ffa      	ldrb	r2, [r7, #31]
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	fa42 f303 	asr.w	r3, r2, r3
 8008f9e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008fa4:	e016      	b.n	8008fd4 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8008fa6:	7ffb      	ldrb	r3, [r7, #31]
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00b      	beq.n	8008fc8 <get_next_good_spad+0x88>
				success = 1;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	fb03 f202 	mul.w	r2, r3, r2
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	601a      	str	r2, [r3, #0]
				break;
 8008fc6:	e009      	b.n	8008fdc <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8008fc8:	7ffb      	ldrb	r3, [r7, #31]
 8008fca:	085b      	lsrs	r3, r3, #1
 8008fcc:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008fd4:	6a3a      	ldr	r2, [r7, #32]
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d3e4      	bcc.n	8008fa6 <get_next_good_spad+0x66>
				coarseIndex++) {
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	3301      	adds	r3, #1
 8008fe0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d202      	bcs.n	8008ff0 <get_next_good_spad+0xb0>
 8008fea:	7fbb      	ldrb	r3, [r7, #30]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0c7      	beq.n	8008f80 <get_next_good_spad+0x40>
		}
	}
}
 8008ff0:	bf00      	nop
 8008ff2:	372c      	adds	r7, #44	; 0x2c
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bc80      	pop	{r7}
 8008ff8:	4770      	bx	lr
	...

08008ffc <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8009004:	2301      	movs	r3, #1
 8009006:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	099b      	lsrs	r3, r3, #6
 800900c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800900e:	4a07      	ldr	r2, [pc, #28]	; (800902c <is_aperture+0x30>)
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <is_aperture+0x22>
		isAperture = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800901e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	bc80      	pop	{r7}
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	200002c0 	.word	0x200002c0

08009030 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8009030:	b480      	push	{r7}
 8009032:	b089      	sub	sp, #36	; 0x24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800903c:	2300      	movs	r3, #0
 800903e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8009040:	2308      	movs	r3, #8
 8009042:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	fbb2 f3f3 	udiv	r3, r2, r3
 800904c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	fbb3 f2f2 	udiv	r2, r3, r2
 8009056:	69b9      	ldr	r1, [r7, #24]
 8009058:	fb01 f202 	mul.w	r2, r1, r2
 800905c:	1a9b      	subs	r3, r3, r2
 800905e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	429a      	cmp	r2, r3
 8009066:	d302      	bcc.n	800906e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009068:	23ce      	movs	r3, #206	; 0xce
 800906a:	77fb      	strb	r3, [r7, #31]
 800906c:	e010      	b.n	8009090 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	4413      	add	r3, r2
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	b25a      	sxtb	r2, r3
 8009078:	2101      	movs	r1, #1
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	fa01 f303 	lsl.w	r3, r1, r3
 8009080:	b25b      	sxtb	r3, r3
 8009082:	4313      	orrs	r3, r2
 8009084:	b259      	sxtb	r1, r3
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	4413      	add	r3, r2
 800908c:	b2ca      	uxtb	r2, r1
 800908e:	701a      	strb	r2, [r3, #0]

	return status;
 8009090:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3724      	adds	r7, #36	; 0x24
 8009098:	46bd      	mov	sp, r7
 800909a:	bc80      	pop	{r7}
 800909c:	4770      	bx	lr

0800909e <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80090a8:	2306      	movs	r3, #6
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	21b0      	movs	r1, #176	; 0xb0
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f002 ffe8 	bl	800c084 <VL53L0X_WriteMulti>
 80090b4:	4603      	mov	r3, r0
 80090b6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80090b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80090ce:	2306      	movs	r3, #6
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	21b0      	movs	r1, #176	; 0xb0
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f003 f805 	bl	800c0e4 <VL53L0X_ReadMulti>
 80090da:	4603      	mov	r3, r0
 80090dc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80090de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b08c      	sub	sp, #48	; 0x30
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	603b      	str	r3, [r7, #0]
 80090f6:	460b      	mov	r3, r1
 80090f8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80090fa:	2300      	movs	r3, #0
 80090fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8009100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009102:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8009104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009106:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009108:	2300      	movs	r3, #0
 800910a:	62bb      	str	r3, [r7, #40]	; 0x28
 800910c:	e02b      	b.n	8009166 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800910e:	f107 031c 	add.w	r3, r7, #28
 8009112:	6a3a      	ldr	r2, [r7, #32]
 8009114:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7ff ff12 	bl	8008f40 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009122:	d103      	bne.n	800912c <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009124:	23ce      	movs	r3, #206	; 0xce
 8009126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800912a:	e020      	b.n	800916e <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	461a      	mov	r2, r3
 8009130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009132:	4413      	add	r3, r2
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff ff61 	bl	8008ffc <is_aperture>
 800913a:	4603      	mov	r3, r0
 800913c:	461a      	mov	r2, r3
 800913e:	7afb      	ldrb	r3, [r7, #11]
 8009140:	4293      	cmp	r3, r2
 8009142:	d003      	beq.n	800914c <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009144:	23ce      	movs	r3, #206	; 0xce
 8009146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800914a:	e010      	b.n	800916e <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8009150:	6a3a      	ldr	r2, [r7, #32]
 8009152:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009154:	6838      	ldr	r0, [r7, #0]
 8009156:	f7ff ff6b 	bl	8009030 <enable_spad_bit>
		currentSpad++;
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	3301      	adds	r3, #1
 800915e:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	3301      	adds	r3, #1
 8009164:	62bb      	str	r3, [r7, #40]	; 0x28
 8009166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800916a:	429a      	cmp	r2, r3
 800916c:	d3cf      	bcc.n	800910e <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800916e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009170:	6a3a      	ldr	r2, [r7, #32]
 8009172:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8009174:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009178:	2b00      	cmp	r3, #0
 800917a:	d106      	bne.n	800918a <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7ff ff8d 	bl	800909e <set_ref_spad_map>
 8009184:	4603      	mov	r3, r0
 8009186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800918a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800918e:	2b00      	cmp	r3, #0
 8009190:	d121      	bne.n	80091d6 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8009192:	f107 0314 	add.w	r3, r7, #20
 8009196:	4619      	mov	r1, r3
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f7ff ff93 	bl	80090c4 <get_ref_spad_map>
 800919e:	4603      	mov	r3, r0
 80091a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80091a4:	2300      	movs	r3, #0
 80091a6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80091a8:	e011      	b.n	80091ce <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	4413      	add	r3, r2
 80091b0:	781a      	ldrb	r2, [r3, #0]
 80091b2:	f107 0114 	add.w	r1, r7, #20
 80091b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b8:	440b      	add	r3, r1
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d003      	beq.n	80091c8 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80091c0:	23ce      	movs	r3, #206	; 0xce
 80091c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80091c6:	e006      	b.n	80091d6 <enable_ref_spads+0xec>
			}
			i++;
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	3301      	adds	r3, #1
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80091ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d3e9      	bcc.n	80091aa <enable_ref_spads+0xc0>
		}
	}
	return status;
 80091d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3730      	adds	r7, #48	; 0x30
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b08a      	sub	sp, #40	; 0x28
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80091ec:	2300      	movs	r3, #0
 80091ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80091fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8009202:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009206:	2b00      	cmp	r3, #0
 8009208:	d107      	bne.n	800921a <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800920a:	22c0      	movs	r2, #192	; 0xc0
 800920c:	2101      	movs	r1, #1
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f003 f808 	bl	800c224 <VL53L0X_WrByte>
 8009214:	4603      	mov	r3, r0
 8009216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800921a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800921e:	2b00      	cmp	r3, #0
 8009220:	d108      	bne.n	8009234 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8009222:	f107 0308 	add.w	r3, r7, #8
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff fc49 	bl	8008ac0 <VL53L0X_PerformSingleRangingMeasurement>
 800922e:	4603      	mov	r3, r0
 8009230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8009234:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009238:	2b00      	cmp	r3, #0
 800923a:	d107      	bne.n	800924c <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800923c:	2201      	movs	r2, #1
 800923e:	21ff      	movs	r1, #255	; 0xff
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f002 ffef 	bl	800c224 <VL53L0X_WrByte>
 8009246:	4603      	mov	r3, r0
 8009248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800924c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009250:	2b00      	cmp	r3, #0
 8009252:	d107      	bne.n	8009264 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	21b6      	movs	r1, #182	; 0xb6
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f002 ff6f 	bl	800c13c <VL53L0X_RdWord>
 800925e:	4603      	mov	r3, r0
 8009260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8009264:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009268:	2b00      	cmp	r3, #0
 800926a:	d107      	bne.n	800927c <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800926c:	2200      	movs	r2, #0
 800926e:	21ff      	movs	r1, #255	; 0xff
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f002 ffd7 	bl	800c224 <VL53L0X_WrByte>
 8009276:	4603      	mov	r3, r0
 8009278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800927c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009280:	2b00      	cmp	r3, #0
 8009282:	d112      	bne.n	80092aa <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009284:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009288:	461a      	mov	r2, r3
 800928a:	2101      	movs	r1, #1
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f002 ffc9 	bl	800c224 <VL53L0X_WrByte>
 8009292:	4603      	mov	r3, r0
 8009294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8009298:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800929c:	2b00      	cmp	r3, #0
 800929e:	d104      	bne.n	80092aa <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80092a6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80092aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3728      	adds	r7, #40	; 0x28
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80092b6:	b590      	push	{r4, r7, lr}
 80092b8:	b09d      	sub	sp, #116	; 0x74
 80092ba:	af06      	add	r7, sp, #24
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092c2:	2300      	movs	r3, #0
 80092c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80092c8:	23b4      	movs	r3, #180	; 0xb4
 80092ca:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80092ce:	2303      	movs	r3, #3
 80092d0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80092d2:	232c      	movs	r3, #44	; 0x2c
 80092d4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80092da:	2300      	movs	r3, #0
 80092dc:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80092de:	2300      	movs	r3, #0
 80092e0:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80092e2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80092e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80092f0:	2306      	movs	r3, #6
 80092f2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80092f4:	2300      	movs	r3, #0
 80092f6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8009302:	2300      	movs	r3, #0
 8009304:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8009306:	2300      	movs	r3, #0
 8009308:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 800931a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800931c:	2300      	movs	r3, #0
 800931e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009320:	e009      	b.n	8009336 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009326:	4413      	add	r3, r2
 8009328:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800932c:	2200      	movs	r2, #0
 800932e:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009332:	3301      	adds	r3, #1
 8009334:	64bb      	str	r3, [r7, #72]	; 0x48
 8009336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933a:	429a      	cmp	r2, r3
 800933c:	d3f1      	bcc.n	8009322 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800933e:	2201      	movs	r2, #1
 8009340:	21ff      	movs	r1, #255	; 0xff
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f002 ff6e 	bl	800c224 <VL53L0X_WrByte>
 8009348:	4603      	mov	r3, r0
 800934a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800934e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009352:	2b00      	cmp	r3, #0
 8009354:	d107      	bne.n	8009366 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8009356:	2200      	movs	r2, #0
 8009358:	214f      	movs	r1, #79	; 0x4f
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f002 ff62 	bl	800c224 <VL53L0X_WrByte>
 8009360:	4603      	mov	r3, r0
 8009362:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009366:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800936a:	2b00      	cmp	r3, #0
 800936c:	d107      	bne.n	800937e <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800936e:	222c      	movs	r2, #44	; 0x2c
 8009370:	214e      	movs	r1, #78	; 0x4e
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f002 ff56 	bl	800c224 <VL53L0X_WrByte>
 8009378:	4603      	mov	r3, r0
 800937a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800937e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009382:	2b00      	cmp	r3, #0
 8009384:	d107      	bne.n	8009396 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009386:	2200      	movs	r2, #0
 8009388:	21ff      	movs	r1, #255	; 0xff
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f002 ff4a 	bl	800c224 <VL53L0X_WrByte>
 8009390:	4603      	mov	r3, r0
 8009392:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009396:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800939a:	2b00      	cmp	r3, #0
 800939c:	d109      	bne.n	80093b2 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800939e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80093a2:	461a      	mov	r2, r3
 80093a4:	21b6      	movs	r1, #182	; 0xb6
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f002 ff3c 	bl	800c224 <VL53L0X_WrByte>
 80093ac:	4603      	mov	r3, r0
 80093ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80093b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d107      	bne.n	80093ca <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80093ba:	2200      	movs	r2, #0
 80093bc:	2180      	movs	r1, #128	; 0x80
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f002 ff30 	bl	800c224 <VL53L0X_WrByte>
 80093c4:	4603      	mov	r3, r0
 80093c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80093ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10a      	bne.n	80093e8 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80093d2:	f107 0210 	add.w	r2, r7, #16
 80093d6:	f107 0111 	add.w	r1, r7, #17
 80093da:	2300      	movs	r3, #0
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f000 fbbb 	bl	8009b58 <VL53L0X_perform_ref_calibration>
 80093e2:	4603      	mov	r3, r0
 80093e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80093e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d121      	bne.n	8009434 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80093f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093f6:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80093f8:	2300      	movs	r3, #0
 80093fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80093fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093fe:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800940c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009410:	f107 0218 	add.w	r2, r7, #24
 8009414:	9204      	str	r2, [sp, #16]
 8009416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009418:	9203      	str	r2, [sp, #12]
 800941a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800941c:	9202      	str	r2, [sp, #8]
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	4623      	mov	r3, r4
 8009426:	4602      	mov	r2, r0
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f7ff fe5e 	bl	80090ea <enable_ref_spads>
 800942e:	4603      	mov	r3, r0
 8009430:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009434:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009438:	2b00      	cmp	r3, #0
 800943a:	d174      	bne.n	8009526 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8009440:	f107 0312 	add.w	r3, r7, #18
 8009444:	4619      	mov	r1, r3
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f7ff fecb 	bl	80091e2 <perform_ref_signal_measurement>
 800944c:	4603      	mov	r3, r0
 800944e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009452:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009456:	2b00      	cmp	r3, #0
 8009458:	d161      	bne.n	800951e <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800945a:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800945c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800945e:	429a      	cmp	r2, r3
 8009460:	d25d      	bcs.n	800951e <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8009462:	2300      	movs	r3, #0
 8009464:	64bb      	str	r3, [r7, #72]	; 0x48
 8009466:	e009      	b.n	800947c <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800946c:	4413      	add	r3, r2
 800946e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009472:	2200      	movs	r2, #0
 8009474:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8009476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009478:	3301      	adds	r3, #1
 800947a:	64bb      	str	r3, [r7, #72]	; 0x48
 800947c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800947e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009480:	429a      	cmp	r2, r3
 8009482:	d3f1      	bcc.n	8009468 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8009484:	e002      	b.n	800948c <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8009486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009488:	3301      	adds	r3, #1
 800948a:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800948c:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8009490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009492:	4413      	add	r3, r2
 8009494:	4618      	mov	r0, r3
 8009496:	f7ff fdb1 	bl	8008ffc <is_aperture>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d103      	bne.n	80094a8 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80094a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d3ee      	bcc.n	8009486 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80094a8:	2301      	movs	r3, #1
 80094aa:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80094ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ae:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80094bc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80094c0:	f107 0218 	add.w	r2, r7, #24
 80094c4:	9204      	str	r2, [sp, #16]
 80094c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094c8:	9203      	str	r2, [sp, #12]
 80094ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094cc:	9202      	str	r2, [sp, #8]
 80094ce:	9301      	str	r3, [sp, #4]
 80094d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	4623      	mov	r3, r4
 80094d6:	4602      	mov	r2, r0
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f7ff fe06 	bl	80090ea <enable_ref_spads>
 80094de:	4603      	mov	r3, r0
 80094e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80094e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d11b      	bne.n	8009524 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80094f0:	f107 0312 	add.w	r3, r7, #18
 80094f4:	4619      	mov	r1, r3
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f7ff fe73 	bl	80091e2 <perform_ref_signal_measurement>
 80094fc:	4603      	mov	r3, r0
 80094fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009502:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10c      	bne.n	8009524 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800950a:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800950c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800950e:	429a      	cmp	r2, r3
 8009510:	d208      	bcs.n	8009524 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009512:	2301      	movs	r3, #1
 8009514:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800951c:	e002      	b.n	8009524 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009522:	e000      	b.n	8009526 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009524:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009526:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800952a:	2b00      	cmp	r3, #0
 800952c:	f040 80af 	bne.w	800968e <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8009530:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009532:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009534:	429a      	cmp	r2, r3
 8009536:	f240 80aa 	bls.w	800968e <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800953a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800953c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8009540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009542:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800954a:	f107 031c 	add.w	r3, r7, #28
 800954e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009550:	4618      	mov	r0, r3
 8009552:	f002 ff69 	bl	800c428 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8009556:	8a7b      	ldrh	r3, [r7, #18]
 8009558:	461a      	mov	r2, r3
 800955a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	2b00      	cmp	r3, #0
 8009560:	bfb8      	it	lt
 8009562:	425b      	neglt	r3, r3
 8009564:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800956c:	e086      	b.n	800967c <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8009574:	f107 0314 	add.w	r3, r7, #20
 8009578:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800957a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800957c:	f7ff fce0 	bl	8008f40 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009586:	d103      	bne.n	8009590 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009588:	23ce      	movs	r3, #206	; 0xce
 800958a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800958e:	e07e      	b.n	800968e <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8009590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009592:	3301      	adds	r3, #1
 8009594:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8009596:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	4413      	add	r3, r2
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff fd2c 	bl	8008ffc <is_aperture>
 80095a4:	4603      	mov	r3, r0
 80095a6:	461a      	mov	r2, r3
 80095a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d003      	beq.n	80095b6 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80095ae:	23ce      	movs	r3, #206	; 0xce
 80095b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80095b4:	e06b      	b.n	800968e <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80095c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff fd33 	bl	8009030 <enable_spad_bit>
 80095ca:	4603      	mov	r3, r0
 80095cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80095d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10c      	bne.n	80095f2 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80095d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095da:	3301      	adds	r3, #1
 80095dc:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80095e4:	4619      	mov	r1, r3
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f7ff fd59 	bl	800909e <set_ref_spad_map>
 80095ec:	4603      	mov	r3, r0
 80095ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80095f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d146      	bne.n	8009688 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80095fa:	f107 0312 	add.w	r3, r7, #18
 80095fe:	4619      	mov	r1, r3
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f7ff fdee 	bl	80091e2 <perform_ref_signal_measurement>
 8009606:	4603      	mov	r3, r0
 8009608:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800960c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009610:	2b00      	cmp	r3, #0
 8009612:	d13b      	bne.n	800968c <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8009614:	8a7b      	ldrh	r3, [r7, #18]
 8009616:	461a      	mov	r2, r3
 8009618:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	2b00      	cmp	r3, #0
 800961e:	bfb8      	it	lt
 8009620:	425b      	neglt	r3, r3
 8009622:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8009624:	8a7b      	ldrh	r3, [r7, #18]
 8009626:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009628:	429a      	cmp	r2, r3
 800962a:	d21c      	bcs.n	8009666 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800962c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800962e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009630:	429a      	cmp	r2, r3
 8009632:	d914      	bls.n	800965e <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8009634:	f107 031c 	add.w	r3, r7, #28
 8009638:	4619      	mov	r1, r3
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f7ff fd2f 	bl	800909e <set_ref_spad_map>
 8009640:	4603      	mov	r3, r0
 8009642:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800964c:	f107 011c 	add.w	r1, r7, #28
 8009650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009652:	4618      	mov	r0, r3
 8009654:	f002 fee8 	bl	800c428 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8009658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800965a:	3b01      	subs	r3, #1
 800965c:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800965e:	2301      	movs	r3, #1
 8009660:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009664:	e00a      	b.n	800967c <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8009666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009668:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8009670:	f107 031c 	add.w	r3, r7, #28
 8009674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009676:	4618      	mov	r0, r3
 8009678:	f002 fed6 	bl	800c428 <memcpy>
		while (!complete) {
 800967c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009680:	2b00      	cmp	r3, #0
 8009682:	f43f af74 	beq.w	800956e <VL53L0X_perform_ref_spad_management+0x2b8>
 8009686:	e002      	b.n	800968e <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009688:	bf00      	nop
 800968a:	e000      	b.n	800968e <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800968c:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800968e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009692:	2b00      	cmp	r3, #0
 8009694:	d115      	bne.n	80096c2 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800969a:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80096a2:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	781a      	ldrb	r2, [r3, #0]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80096c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	375c      	adds	r7, #92	; 0x5c
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd90      	pop	{r4, r7, pc}

080096ce <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80096ce:	b590      	push	{r4, r7, lr}
 80096d0:	b093      	sub	sp, #76	; 0x4c
 80096d2:	af06      	add	r7, sp, #24
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	60b9      	str	r1, [r7, #8]
 80096d8:	4613      	mov	r3, r2
 80096da:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096dc:	2300      	movs	r3, #0
 80096de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80096e6:	23b4      	movs	r3, #180	; 0xb4
 80096e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80096ec:	2306      	movs	r3, #6
 80096ee:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80096f0:	232c      	movs	r3, #44	; 0x2c
 80096f2:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80096f4:	2201      	movs	r2, #1
 80096f6:	21ff      	movs	r1, #255	; 0xff
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f002 fd93 	bl	800c224 <VL53L0X_WrByte>
 80096fe:	4603      	mov	r3, r0
 8009700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009704:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009708:	2b00      	cmp	r3, #0
 800970a:	d107      	bne.n	800971c <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800970c:	2200      	movs	r2, #0
 800970e:	214f      	movs	r1, #79	; 0x4f
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f002 fd87 	bl	800c224 <VL53L0X_WrByte>
 8009716:	4603      	mov	r3, r0
 8009718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800971c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009720:	2b00      	cmp	r3, #0
 8009722:	d107      	bne.n	8009734 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8009724:	222c      	movs	r2, #44	; 0x2c
 8009726:	214e      	movs	r1, #78	; 0x4e
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f002 fd7b 	bl	800c224 <VL53L0X_WrByte>
 800972e:	4603      	mov	r3, r0
 8009730:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009734:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009738:	2b00      	cmp	r3, #0
 800973a:	d107      	bne.n	800974c <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800973c:	2200      	movs	r2, #0
 800973e:	21ff      	movs	r1, #255	; 0xff
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f002 fd6f 	bl	800c224 <VL53L0X_WrByte>
 8009746:	4603      	mov	r3, r0
 8009748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800974c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009750:	2b00      	cmp	r3, #0
 8009752:	d109      	bne.n	8009768 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8009754:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009758:	461a      	mov	r2, r3
 800975a:	21b6      	movs	r1, #182	; 0xb6
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f002 fd61 	bl	800c224 <VL53L0X_WrByte>
 8009762:	4603      	mov	r3, r0
 8009764:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8009768:	2300      	movs	r3, #0
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
 800976c:	e009      	b.n	8009782 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	4413      	add	r3, r2
 8009774:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009778:	2200      	movs	r2, #0
 800977a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800977c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977e:	3301      	adds	r3, #1
 8009780:	627b      	str	r3, [r7, #36]	; 0x24
 8009782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	429a      	cmp	r2, r3
 8009788:	d3f1      	bcc.n	800976e <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d011      	beq.n	80097b4 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009790:	e002      	b.n	8009798 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8009792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009794:	3301      	adds	r3, #1
 8009796:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009798:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	4413      	add	r3, r2
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff fc2b 	bl	8008ffc <is_aperture>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d103      	bne.n	80097b4 <VL53L0X_set_reference_spads+0xe6>
 80097ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d3ee      	bcc.n	8009792 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80097c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097c4:	79f9      	ldrb	r1, [r7, #7]
 80097c6:	f107 0214 	add.w	r2, r7, #20
 80097ca:	9204      	str	r2, [sp, #16]
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	9203      	str	r2, [sp, #12]
 80097d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097d2:	9202      	str	r2, [sp, #8]
 80097d4:	9301      	str	r3, [sp, #4]
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	4623      	mov	r3, r4
 80097dc:	4602      	mov	r2, r0
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f7ff fc83 	bl	80090ea <enable_ref_spads>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80097ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10c      	bne.n	800980c <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	79fa      	ldrb	r2, [r7, #7]
 8009808:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800980c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009810:	4618      	mov	r0, r3
 8009812:	3734      	adds	r7, #52	; 0x34
 8009814:	46bd      	mov	sp, r7
 8009816:	bd90      	pop	{r4, r7, pc}

08009818 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009824:	2300      	movs	r3, #0
 8009826:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10a      	bne.n	8009846 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	f043 0301 	orr.w	r3, r3, #1
 8009836:	b2db      	uxtb	r3, r3
 8009838:	461a      	mov	r2, r3
 800983a:	2100      	movs	r1, #0
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f002 fcf1 	bl	800c224 <VL53L0X_WrByte>
 8009842:	4603      	mov	r3, r0
 8009844:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8009846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d104      	bne.n	8009858 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f9bf 	bl	8009bd2 <VL53L0X_measurement_poll_for_completion>
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d105      	bne.n	800986c <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009860:	2100      	movs	r1, #0
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7ff fab6 	bl	8008dd4 <VL53L0X_ClearInterruptMask>
 8009868:	4603      	mov	r3, r0
 800986a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800986c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d106      	bne.n	8009882 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8009874:	2200      	movs	r2, #0
 8009876:	2100      	movs	r1, #0
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f002 fcd3 	bl	800c224 <VL53L0X_WrByte>
 800987e:	4603      	mov	r3, r0
 8009880:	73fb      	strb	r3, [r7, #15]

	return Status;
 8009882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	4608      	mov	r0, r1
 8009898:	4611      	mov	r1, r2
 800989a:	461a      	mov	r2, r3
 800989c:	4603      	mov	r3, r0
 800989e:	70fb      	strb	r3, [r7, #3]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70bb      	strb	r3, [r7, #2]
 80098a4:	4613      	mov	r3, r2
 80098a6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098a8:	2300      	movs	r3, #0
 80098aa:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80098b0:	2201      	movs	r2, #1
 80098b2:	21ff      	movs	r1, #255	; 0xff
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f002 fcb5 	bl	800c224 <VL53L0X_WrByte>
 80098ba:	4603      	mov	r3, r0
 80098bc:	461a      	mov	r2, r3
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80098c4:	2200      	movs	r2, #0
 80098c6:	2100      	movs	r1, #0
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f002 fcab 	bl	800c224 <VL53L0X_WrByte>
 80098ce:	4603      	mov	r3, r0
 80098d0:	461a      	mov	r2, r3
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80098d8:	2200      	movs	r2, #0
 80098da:	21ff      	movs	r1, #255	; 0xff
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f002 fca1 	bl	800c224 <VL53L0X_WrByte>
 80098e2:	4603      	mov	r3, r0
 80098e4:	461a      	mov	r2, r3
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80098ec:	78fb      	ldrb	r3, [r7, #3]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d01e      	beq.n	8009930 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80098f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80098fa:	69ba      	ldr	r2, [r7, #24]
 80098fc:	21cb      	movs	r1, #203	; 0xcb
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f002 fb96 	bl	800c030 <VL53L0X_RdByte>
 8009904:	4603      	mov	r3, r0
 8009906:	461a      	mov	r2, r3
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	4313      	orrs	r3, r2
 800990c:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800990e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009912:	2b00      	cmp	r3, #0
 8009914:	d02a      	beq.n	800996c <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009916:	f107 030e 	add.w	r3, r7, #14
 800991a:	461a      	mov	r2, r3
 800991c:	21ee      	movs	r1, #238	; 0xee
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f002 fb86 	bl	800c030 <VL53L0X_RdByte>
 8009924:	4603      	mov	r3, r0
 8009926:	461a      	mov	r2, r3
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	4313      	orrs	r3, r2
 800992c:	73fb      	strb	r3, [r7, #15]
 800992e:	e01d      	b.n	800996c <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8009930:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00a      	beq.n	800994e <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8009938:	78bb      	ldrb	r3, [r7, #2]
 800993a:	461a      	mov	r2, r3
 800993c:	21cb      	movs	r1, #203	; 0xcb
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f002 fc70 	bl	800c224 <VL53L0X_WrByte>
 8009944:	4603      	mov	r3, r0
 8009946:	461a      	mov	r2, r3
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	4313      	orrs	r3, r2
 800994c:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800994e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00a      	beq.n	800996c <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8009956:	787b      	ldrb	r3, [r7, #1]
 8009958:	2280      	movs	r2, #128	; 0x80
 800995a:	21ee      	movs	r1, #238	; 0xee
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f002 fcaf 	bl	800c2c0 <VL53L0X_UpdateByte>
 8009962:	4603      	mov	r3, r0
 8009964:	461a      	mov	r2, r3
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	4313      	orrs	r3, r2
 800996a:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800996c:	2201      	movs	r2, #1
 800996e:	21ff      	movs	r1, #255	; 0xff
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f002 fc57 	bl	800c224 <VL53L0X_WrByte>
 8009976:	4603      	mov	r3, r0
 8009978:	461a      	mov	r2, r3
 800997a:	7bfb      	ldrb	r3, [r7, #15]
 800997c:	4313      	orrs	r3, r2
 800997e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009980:	2201      	movs	r2, #1
 8009982:	2100      	movs	r1, #0
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f002 fc4d 	bl	800c224 <VL53L0X_WrByte>
 800998a:	4603      	mov	r3, r0
 800998c:	461a      	mov	r2, r3
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	4313      	orrs	r3, r2
 8009992:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009994:	2200      	movs	r2, #0
 8009996:	21ff      	movs	r1, #255	; 0xff
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f002 fc43 	bl	800c224 <VL53L0X_WrByte>
 800999e:	4603      	mov	r3, r0
 80099a0:	461a      	mov	r2, r3
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80099a8:	7bbb      	ldrb	r3, [r7, #14]
 80099aa:	f023 0310 	bic.w	r3, r3, #16
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	701a      	strb	r2, [r3, #0]

	return Status;
 80099b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08a      	sub	sp, #40	; 0x28
 80099c4:	af04      	add	r7, sp, #16
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	4611      	mov	r1, r2
 80099cc:	461a      	mov	r2, r3
 80099ce:	460b      	mov	r3, r1
 80099d0:	71fb      	strb	r3, [r7, #7]
 80099d2:	4613      	mov	r3, r2
 80099d4:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099d6:	2300      	movs	r3, #0
 80099d8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80099da:	2300      	movs	r3, #0
 80099dc:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80099de:	2300      	movs	r3, #0
 80099e0:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80099e2:	2300      	movs	r3, #0
 80099e4:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80099e6:	2300      	movs	r3, #0
 80099e8:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80099ea:	79bb      	ldrb	r3, [r7, #6]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d003      	beq.n	80099f8 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80099f6:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80099f8:	2201      	movs	r2, #1
 80099fa:	2101      	movs	r1, #1
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f002 fc11 	bl	800c224 <VL53L0X_WrByte>
 8009a02:	4603      	mov	r3, r0
 8009a04:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009a06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d105      	bne.n	8009a1a <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009a0e:	2140      	movs	r1, #64	; 0x40
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f7ff ff01 	bl	8009818 <VL53L0X_perform_single_ref_calibration>
 8009a16:	4603      	mov	r3, r0
 8009a18:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d115      	bne.n	8009a4e <VL53L0X_perform_vhv_calibration+0x8e>
 8009a22:	79fb      	ldrb	r3, [r7, #7]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d112      	bne.n	8009a4e <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009a28:	7d39      	ldrb	r1, [r7, #20]
 8009a2a:	7d7a      	ldrb	r2, [r7, #21]
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	9303      	str	r3, [sp, #12]
 8009a30:	2301      	movs	r3, #1
 8009a32:	9302      	str	r3, [sp, #8]
 8009a34:	f107 0313 	add.w	r3, r7, #19
 8009a38:	9301      	str	r3, [sp, #4]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	460b      	mov	r3, r1
 8009a40:	2101      	movs	r1, #1
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f7ff ff23 	bl	800988e <VL53L0X_ref_calibration_io>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	75fb      	strb	r3, [r7, #23]
 8009a4c:	e002      	b.n	8009a54 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2200      	movs	r2, #0
 8009a52:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009a54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d112      	bne.n	8009a82 <VL53L0X_perform_vhv_calibration+0xc2>
 8009a5c:	79bb      	ldrb	r3, [r7, #6]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00f      	beq.n	8009a82 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009a62:	7dbb      	ldrb	r3, [r7, #22]
 8009a64:	461a      	mov	r2, r3
 8009a66:	2101      	movs	r1, #1
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f002 fbdb 	bl	800c224 <VL53L0X_WrByte>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009a72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d103      	bne.n	8009a82 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	7dba      	ldrb	r2, [r7, #22]
 8009a7e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b08a      	sub	sp, #40	; 0x28
 8009a92:	af04      	add	r7, sp, #16
 8009a94:	60f8      	str	r0, [r7, #12]
 8009a96:	60b9      	str	r1, [r7, #8]
 8009a98:	4611      	mov	r1, r2
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	71fb      	strb	r3, [r7, #7]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009ab4:	79bb      	ldrb	r3, [r7, #6]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009ac0:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f002 fbac 	bl	800c224 <VL53L0X_WrByte>
 8009acc:	4603      	mov	r3, r0
 8009ace:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009ad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d105      	bne.n	8009ae4 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8009ad8:	2100      	movs	r1, #0
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f7ff fe9c 	bl	8009818 <VL53L0X_perform_single_ref_calibration>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009ae4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d115      	bne.n	8009b18 <VL53L0X_perform_phase_calibration+0x8a>
 8009aec:	79fb      	ldrb	r3, [r7, #7]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d112      	bne.n	8009b18 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009af2:	7d39      	ldrb	r1, [r7, #20]
 8009af4:	7d7a      	ldrb	r2, [r7, #21]
 8009af6:	2301      	movs	r3, #1
 8009af8:	9303      	str	r3, [sp, #12]
 8009afa:	2300      	movs	r3, #0
 8009afc:	9302      	str	r3, [sp, #8]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	9301      	str	r3, [sp, #4]
 8009b02:	f107 0313 	add.w	r3, r7, #19
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f7ff febe 	bl	800988e <VL53L0X_ref_calibration_io>
 8009b12:	4603      	mov	r3, r0
 8009b14:	75fb      	strb	r3, [r7, #23]
 8009b16:	e002      	b.n	8009b1e <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d112      	bne.n	8009b4c <VL53L0X_perform_phase_calibration+0xbe>
 8009b26:	79bb      	ldrb	r3, [r7, #6]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00f      	beq.n	8009b4c <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009b2c:	7dbb      	ldrb	r3, [r7, #22]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	2101      	movs	r1, #1
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f002 fb76 	bl	800c224 <VL53L0X_WrByte>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009b3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d103      	bne.n	8009b4c <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	7dba      	ldrb	r2, [r7, #22]
 8009b48:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b66:	2300      	movs	r3, #0
 8009b68:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009b74:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8009b76:	78fa      	ldrb	r2, [r7, #3]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	68b9      	ldr	r1, [r7, #8]
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f7ff ff1f 	bl	80099c0 <VL53L0X_perform_vhv_calibration>
 8009b82:	4603      	mov	r3, r0
 8009b84:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009b86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d107      	bne.n	8009b9e <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8009b8e:	78fa      	ldrb	r2, [r7, #3]
 8009b90:	2300      	movs	r3, #0
 8009b92:	6879      	ldr	r1, [r7, #4]
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7ff ff7a 	bl	8009a8e <VL53L0X_perform_phase_calibration>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8009b9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10f      	bne.n	8009bc6 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009ba6:	7dbb      	ldrb	r3, [r7, #22]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	2101      	movs	r1, #1
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f002 fb39 	bl	800c224 <VL53L0X_WrByte>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d103      	bne.n	8009bc6 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	7dba      	ldrb	r2, [r7, #22]
 8009bc2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3718      	adds	r7, #24
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b086      	sub	sp, #24
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009be6:	f107 030f 	add.w	r3, r7, #15
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7fe fe03 	bl	80087f8 <VL53L0X_GetMeasurementDataReady>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8009bf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10f      	bne.n	8009c1e <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009bfe:	7bfb      	ldrb	r3, [r7, #15]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d00e      	beq.n	8009c22 <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	3301      	adds	r3, #1
 8009c08:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	2bc7      	cmp	r3, #199	; 0xc7
 8009c0e:	d902      	bls.n	8009c16 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009c10:	23f9      	movs	r3, #249	; 0xf9
 8009c12:	75fb      	strb	r3, [r7, #23]
			break;
 8009c14:	e006      	b.n	8009c24 <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f002 fb86 	bl	800c328 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009c1c:	e7e3      	b.n	8009be6 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8009c1e:	bf00      	nop
 8009c20:	e000      	b.n	8009c24 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 8009c22:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8009c24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3718      	adds	r7, #24
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	3301      	adds	r3, #1
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8009c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bc80      	pop	{r7}
 8009c52:	4770      	bx	lr

08009c54 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c64:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8009c66:	e002      	b.n	8009c6e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	089b      	lsrs	r3, r3, #2
 8009c6c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d8f8      	bhi.n	8009c68 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8009c76:	e017      	b.n	8009ca8 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d30b      	bcc.n	8009c9c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	4413      	add	r3, r2
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	085b      	lsrs	r3, r3, #1
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	4413      	add	r3, r2
 8009c98:	60fb      	str	r3, [r7, #12]
 8009c9a:	e002      	b.n	8009ca2 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	085b      	lsrs	r3, r3, #1
 8009ca0:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	089b      	lsrs	r3, r3, #2
 8009ca6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e4      	bne.n	8009c78 <VL53L0X_isqrt+0x24>
	}

	return res;
 8009cae:	68fb      	ldr	r3, [r7, #12]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bc80      	pop	{r7}
 8009cb8:	4770      	bx	lr

08009cba <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b086      	sub	sp, #24
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	2183      	movs	r1, #131	; 0x83
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f002 faaa 	bl	800c224 <VL53L0X_WrByte>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8009cda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d11c      	bne.n	8009d1c <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009ce6:	f107 030f 	add.w	r3, r7, #15
 8009cea:	461a      	mov	r2, r3
 8009cec:	2183      	movs	r1, #131	; 0x83
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f002 f99e 	bl	800c030 <VL53L0X_RdByte>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d109      	bne.n	8009d12 <VL53L0X_device_read_strobe+0x58>
 8009cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d105      	bne.n	8009d12 <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	2bc7      	cmp	r3, #199	; 0xc7
 8009d10:	d9e9      	bls.n	8009ce6 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	2bc7      	cmp	r3, #199	; 0xc7
 8009d16:	d901      	bls.n	8009d1c <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009d18:	23f9      	movs	r3, #249	; 0xf9
 8009d1a:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	2183      	movs	r1, #131	; 0x83
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f002 fa7f 	bl	800c224 <VL53L0X_WrByte>
 8009d26:	4603      	mov	r3, r0
 8009d28:	461a      	mov	r2, r3
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8009d30:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b098      	sub	sp, #96	; 0x60
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	460b      	mov	r3, r1
 8009d46:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8009d66:	2300      	movs	r3, #0
 8009d68:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009d6c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8009d70:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8009d72:	2300      	movs	r3, #0
 8009d74:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009d76:	2300      	movs	r3, #0
 8009d78:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8009d84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8009d88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d8c:	2b07      	cmp	r3, #7
 8009d8e:	f000 8408 	beq.w	800a5a2 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009d92:	2201      	movs	r2, #1
 8009d94:	2180      	movs	r1, #128	; 0x80
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f002 fa44 	bl	800c224 <VL53L0X_WrByte>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	461a      	mov	r2, r3
 8009da0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009da4:	4313      	orrs	r3, r2
 8009da6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009daa:	2201      	movs	r2, #1
 8009dac:	21ff      	movs	r1, #255	; 0xff
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f002 fa38 	bl	800c224 <VL53L0X_WrByte>
 8009db4:	4603      	mov	r3, r0
 8009db6:	461a      	mov	r2, r3
 8009db8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f002 fa2c 	bl	800c224 <VL53L0X_WrByte>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009dda:	2206      	movs	r2, #6
 8009ddc:	21ff      	movs	r1, #255	; 0xff
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f002 fa20 	bl	800c224 <VL53L0X_WrByte>
 8009de4:	4603      	mov	r3, r0
 8009de6:	461a      	mov	r2, r3
 8009de8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dec:	4313      	orrs	r3, r2
 8009dee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009df2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009df6:	461a      	mov	r2, r3
 8009df8:	2183      	movs	r1, #131	; 0x83
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f002 f918 	bl	800c030 <VL53L0X_RdByte>
 8009e00:	4603      	mov	r3, r0
 8009e02:	461a      	mov	r2, r3
 8009e04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8009e0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e12:	f043 0304 	orr.w	r3, r3, #4
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	461a      	mov	r2, r3
 8009e1a:	2183      	movs	r1, #131	; 0x83
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f002 fa01 	bl	800c224 <VL53L0X_WrByte>
 8009e22:	4603      	mov	r3, r0
 8009e24:	461a      	mov	r2, r3
 8009e26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8009e30:	2207      	movs	r2, #7
 8009e32:	21ff      	movs	r1, #255	; 0xff
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f002 f9f5 	bl	800c224 <VL53L0X_WrByte>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e42:	4313      	orrs	r3, r2
 8009e44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009e48:	2201      	movs	r2, #1
 8009e4a:	2181      	movs	r1, #129	; 0x81
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f002 f9e9 	bl	800c224 <VL53L0X_WrByte>
 8009e52:	4603      	mov	r3, r0
 8009e54:	461a      	mov	r2, r3
 8009e56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f002 fa61 	bl	800c328 <VL53L0X_PollingDelay>
 8009e66:	4603      	mov	r3, r0
 8009e68:	461a      	mov	r2, r3
 8009e6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009e74:	2201      	movs	r2, #1
 8009e76:	2180      	movs	r1, #128	; 0x80
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f002 f9d3 	bl	800c224 <VL53L0X_WrByte>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	461a      	mov	r2, r3
 8009e82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e86:	4313      	orrs	r3, r2
 8009e88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8009e8c:	78fb      	ldrb	r3, [r7, #3]
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f000 8098 	beq.w	8009fc8 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009e98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e9c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f040 8091 	bne.w	8009fc8 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009ea6:	226b      	movs	r2, #107	; 0x6b
 8009ea8:	2194      	movs	r1, #148	; 0x94
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f002 f9ba 	bl	800c224 <VL53L0X_WrByte>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7ff fefb 	bl	8009cba <VL53L0X_device_read_strobe>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009ed2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	2190      	movs	r1, #144	; 0x90
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f002 f966 	bl	800c1ac <VL53L0X_RdDWord>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef0:	0a1b      	lsrs	r3, r3, #8
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ef8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	0bdb      	lsrs	r3, r3, #15
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	f003 0301 	and.w	r3, r3, #1
 8009f06:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009f0a:	2224      	movs	r2, #36	; 0x24
 8009f0c:	2194      	movs	r1, #148	; 0x94
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f002 f988 	bl	800c224 <VL53L0X_WrByte>
 8009f14:	4603      	mov	r3, r0
 8009f16:	461a      	mov	r2, r3
 8009f18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7ff fec9 	bl	8009cba <VL53L0X_device_read_strobe>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f30:	4313      	orrs	r3, r2
 8009f32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009f36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	2190      	movs	r1, #144	; 0x90
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f002 f934 	bl	800c1ac <VL53L0X_RdDWord>
 8009f44:	4603      	mov	r3, r0
 8009f46:	461a      	mov	r2, r3
 8009f48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	0e1b      	lsrs	r3, r3, #24
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	0c1b      	lsrs	r3, r3, #16
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	0a1b      	lsrs	r3, r3, #8
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8009f70:	2225      	movs	r2, #37	; 0x25
 8009f72:	2194      	movs	r1, #148	; 0x94
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f002 f955 	bl	800c224 <VL53L0X_WrByte>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f82:	4313      	orrs	r3, r2
 8009f84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7ff fe96 	bl	8009cba <VL53L0X_device_read_strobe>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	461a      	mov	r2, r3
 8009f92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f96:	4313      	orrs	r3, r2
 8009f98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	2190      	movs	r1, #144	; 0x90
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f002 f901 	bl	800c1ac <VL53L0X_RdDWord>
 8009faa:	4603      	mov	r3, r0
 8009fac:	461a      	mov	r2, r3
 8009fae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fba:	0e1b      	lsrs	r3, r3, #24
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc2:	0c1b      	lsrs	r3, r3, #16
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8009fc8:	78fb      	ldrb	r3, [r7, #3]
 8009fca:	f003 0302 	and.w	r3, r3, #2
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 8189 	beq.w	800a2e6 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009fd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009fd8:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f040 8182 	bne.w	800a2e6 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	2194      	movs	r1, #148	; 0x94
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f002 f91c 	bl	800c224 <VL53L0X_WrByte>
 8009fec:	4603      	mov	r3, r0
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff fe5d 	bl	8009cba <VL53L0X_device_read_strobe>
 800a000:	4603      	mov	r3, r0
 800a002:	461a      	mov	r2, r3
 800a004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a008:	4313      	orrs	r3, r2
 800a00a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800a00e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800a012:	461a      	mov	r2, r3
 800a014:	2190      	movs	r1, #144	; 0x90
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f002 f80a 	bl	800c030 <VL53L0X_RdByte>
 800a01c:	4603      	mov	r3, r0
 800a01e:	461a      	mov	r2, r3
 800a020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a024:	4313      	orrs	r3, r2
 800a026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a02a:	227b      	movs	r2, #123	; 0x7b
 800a02c:	2194      	movs	r1, #148	; 0x94
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f002 f8f8 	bl	800c224 <VL53L0X_WrByte>
 800a034:	4603      	mov	r3, r0
 800a036:	461a      	mov	r2, r3
 800a038:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a03c:	4313      	orrs	r3, r2
 800a03e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7ff fe39 	bl	8009cba <VL53L0X_device_read_strobe>
 800a048:	4603      	mov	r3, r0
 800a04a:	461a      	mov	r2, r3
 800a04c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a050:	4313      	orrs	r3, r2
 800a052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800a056:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800a05a:	461a      	mov	r2, r3
 800a05c:	2190      	movs	r1, #144	; 0x90
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f001 ffe6 	bl	800c030 <VL53L0X_RdByte>
 800a064:	4603      	mov	r3, r0
 800a066:	461a      	mov	r2, r3
 800a068:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a06c:	4313      	orrs	r3, r2
 800a06e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800a072:	2277      	movs	r2, #119	; 0x77
 800a074:	2194      	movs	r1, #148	; 0x94
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f002 f8d4 	bl	800c224 <VL53L0X_WrByte>
 800a07c:	4603      	mov	r3, r0
 800a07e:	461a      	mov	r2, r3
 800a080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a084:	4313      	orrs	r3, r2
 800a086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7ff fe15 	bl	8009cba <VL53L0X_device_read_strobe>
 800a090:	4603      	mov	r3, r0
 800a092:	461a      	mov	r2, r3
 800a094:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a098:	4313      	orrs	r3, r2
 800a09a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a09e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	2190      	movs	r1, #144	; 0x90
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f002 f880 	bl	800c1ac <VL53L0X_RdDWord>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	0e5b      	lsrs	r3, r3, #25
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ca:	0c9b      	lsrs	r3, r3, #18
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	0adb      	lsrs	r3, r3, #11
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e6:	091b      	lsrs	r3, r3, #4
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	00db      	lsls	r3, r3, #3
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800a104:	2278      	movs	r2, #120	; 0x78
 800a106:	2194      	movs	r1, #148	; 0x94
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f002 f88b 	bl	800c224 <VL53L0X_WrByte>
 800a10e:	4603      	mov	r3, r0
 800a110:	461a      	mov	r2, r3
 800a112:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a116:	4313      	orrs	r3, r2
 800a118:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7ff fdcc 	bl	8009cba <VL53L0X_device_read_strobe>
 800a122:	4603      	mov	r3, r0
 800a124:	461a      	mov	r2, r3
 800a126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a12a:	4313      	orrs	r3, r2
 800a12c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a130:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a134:	461a      	mov	r2, r3
 800a136:	2190      	movs	r1, #144	; 0x90
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f002 f837 	bl	800c1ac <VL53L0X_RdDWord>
 800a13e:	4603      	mov	r3, r0
 800a140:	461a      	mov	r2, r3
 800a142:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a146:	4313      	orrs	r3, r2
 800a148:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14e:	0f5b      	lsrs	r3, r3, #29
 800a150:	b2db      	uxtb	r3, r3
 800a152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a156:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800a158:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a15c:	4413      	add	r3, r2
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	0d9b      	lsrs	r3, r3, #22
 800a166:	b2db      	uxtb	r3, r3
 800a168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	0bdb      	lsrs	r3, r3, #15
 800a174:	b2db      	uxtb	r3, r3
 800a176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a180:	0a1b      	lsrs	r3, r3, #8
 800a182:	b2db      	uxtb	r3, r3
 800a184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800a18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18e:	085b      	lsrs	r3, r3, #1
 800a190:	b2db      	uxtb	r3, r3
 800a192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a196:	b2db      	uxtb	r3, r3
 800a198:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800a19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	019b      	lsls	r3, r3, #6
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800a1ac:	2279      	movs	r2, #121	; 0x79
 800a1ae:	2194      	movs	r1, #148	; 0x94
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f002 f837 	bl	800c224 <VL53L0X_WrByte>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff fd78 	bl	8009cba <VL53L0X_device_read_strobe>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a1d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a1dc:	461a      	mov	r2, r3
 800a1de:	2190      	movs	r1, #144	; 0x90
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f001 ffe3 	bl	800c1ac <VL53L0X_RdDWord>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	0e9b      	lsrs	r3, r3, #26
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1fe:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800a200:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a204:	4413      	add	r3, r2
 800a206:	b2db      	uxtb	r3, r3
 800a208:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800a20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20c:	0cdb      	lsrs	r3, r3, #19
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a214:	b2db      	uxtb	r3, r3
 800a216:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800a218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21a:	0b1b      	lsrs	r3, r3, #12
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a222:	b2db      	uxtb	r3, r3
 800a224:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800a226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a228:	095b      	lsrs	r3, r3, #5
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a230:	b2db      	uxtb	r3, r3
 800a232:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800a234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a236:	b2db      	uxtb	r3, r3
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800a240:	b2db      	uxtb	r3, r3
 800a242:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800a246:	227a      	movs	r2, #122	; 0x7a
 800a248:	2194      	movs	r1, #148	; 0x94
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f001 ffea 	bl	800c224 <VL53L0X_WrByte>
 800a250:	4603      	mov	r3, r0
 800a252:	461a      	mov	r2, r3
 800a254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a258:	4313      	orrs	r3, r2
 800a25a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7ff fd2b 	bl	8009cba <VL53L0X_device_read_strobe>
 800a264:	4603      	mov	r3, r0
 800a266:	461a      	mov	r2, r3
 800a268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a26c:	4313      	orrs	r3, r2
 800a26e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a272:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a276:	461a      	mov	r2, r3
 800a278:	2190      	movs	r1, #144	; 0x90
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f001 ff96 	bl	800c1ac <VL53L0X_RdDWord>
 800a280:	4603      	mov	r3, r0
 800a282:	461a      	mov	r2, r3
 800a284:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a288:	4313      	orrs	r3, r2
 800a28a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a290:	0f9b      	lsrs	r3, r3, #30
 800a292:	b2db      	uxtb	r3, r3
 800a294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a298:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800a29a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a29e:	4413      	add	r3, r2
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a6:	0ddb      	lsrs	r3, r3, #23
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b4:	0c1b      	lsrs	r3, r3, #16
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	0a5b      	lsrs	r3, r3, #9
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	089b      	lsrs	r3, r3, #2
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800a2e6:	78fb      	ldrb	r3, [r7, #3]
 800a2e8:	f003 0304 	and.w	r3, r3, #4
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 80f1 	beq.w	800a4d4 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a2f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a2f6:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f040 80ea 	bne.w	800a4d4 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a300:	227b      	movs	r2, #123	; 0x7b
 800a302:	2194      	movs	r1, #148	; 0x94
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f001 ff8d 	bl	800c224 <VL53L0X_WrByte>
 800a30a:	4603      	mov	r3, r0
 800a30c:	461a      	mov	r2, r3
 800a30e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a312:	4313      	orrs	r3, r2
 800a314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f7ff fcce 	bl	8009cba <VL53L0X_device_read_strobe>
 800a31e:	4603      	mov	r3, r0
 800a320:	461a      	mov	r2, r3
 800a322:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a326:	4313      	orrs	r3, r2
 800a328:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800a32c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a330:	461a      	mov	r2, r3
 800a332:	2190      	movs	r1, #144	; 0x90
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f001 ff39 	bl	800c1ac <VL53L0X_RdDWord>
 800a33a:	4603      	mov	r3, r0
 800a33c:	461a      	mov	r2, r3
 800a33e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a342:	4313      	orrs	r3, r2
 800a344:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800a348:	227c      	movs	r2, #124	; 0x7c
 800a34a:	2194      	movs	r1, #148	; 0x94
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f001 ff69 	bl	800c224 <VL53L0X_WrByte>
 800a352:	4603      	mov	r3, r0
 800a354:	461a      	mov	r2, r3
 800a356:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a35a:	4313      	orrs	r3, r2
 800a35c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7ff fcaa 	bl	8009cba <VL53L0X_device_read_strobe>
 800a366:	4603      	mov	r3, r0
 800a368:	461a      	mov	r2, r3
 800a36a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a36e:	4313      	orrs	r3, r2
 800a370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800a374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a378:	461a      	mov	r2, r3
 800a37a:	2190      	movs	r1, #144	; 0x90
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f001 ff15 	bl	800c1ac <VL53L0X_RdDWord>
 800a382:	4603      	mov	r3, r0
 800a384:	461a      	mov	r2, r3
 800a386:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a38a:	4313      	orrs	r3, r2
 800a38c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800a390:	2273      	movs	r2, #115	; 0x73
 800a392:	2194      	movs	r1, #148	; 0x94
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f001 ff45 	bl	800c224 <VL53L0X_WrByte>
 800a39a:	4603      	mov	r3, r0
 800a39c:	461a      	mov	r2, r3
 800a39e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7ff fc86 	bl	8009cba <VL53L0X_device_read_strobe>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a3bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	2190      	movs	r1, #144	; 0x90
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f001 fef1 	bl	800c1ac <VL53L0X_RdDWord>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800a3e0:	2274      	movs	r2, #116	; 0x74
 800a3e2:	2194      	movs	r1, #148	; 0x94
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f001 ff1d 	bl	800c224 <VL53L0X_WrByte>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7ff fc5e 	bl	8009cba <VL53L0X_device_read_strobe>
 800a3fe:	4603      	mov	r3, r0
 800a400:	461a      	mov	r2, r3
 800a402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a406:	4313      	orrs	r3, r2
 800a408:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a40c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a410:	461a      	mov	r2, r3
 800a412:	2190      	movs	r1, #144	; 0x90
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f001 fec9 	bl	800c1ac <VL53L0X_RdDWord>
 800a41a:	4603      	mov	r3, r0
 800a41c:	461a      	mov	r2, r3
 800a41e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a422:	4313      	orrs	r3, r2
 800a424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800a428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42a:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800a42c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a42e:	4313      	orrs	r3, r2
 800a430:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800a432:	2275      	movs	r2, #117	; 0x75
 800a434:	2194      	movs	r1, #148	; 0x94
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f001 fef4 	bl	800c224 <VL53L0X_WrByte>
 800a43c:	4603      	mov	r3, r0
 800a43e:	461a      	mov	r2, r3
 800a440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a444:	4313      	orrs	r3, r2
 800a446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff fc35 	bl	8009cba <VL53L0X_device_read_strobe>
 800a450:	4603      	mov	r3, r0
 800a452:	461a      	mov	r2, r3
 800a454:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a458:	4313      	orrs	r3, r2
 800a45a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a45e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a462:	461a      	mov	r2, r3
 800a464:	2190      	movs	r1, #144	; 0x90
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f001 fea0 	bl	800c1ac <VL53L0X_RdDWord>
 800a46c:	4603      	mov	r3, r0
 800a46e:	461a      	mov	r2, r3
 800a470:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a474:	4313      	orrs	r3, r2
 800a476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 800a47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47c:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 800a47e:	b29b      	uxth	r3, r3
 800a480:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800a482:	2276      	movs	r2, #118	; 0x76
 800a484:	2194      	movs	r1, #148	; 0x94
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f001 fecc 	bl	800c224 <VL53L0X_WrByte>
 800a48c:	4603      	mov	r3, r0
 800a48e:	461a      	mov	r2, r3
 800a490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a494:	4313      	orrs	r3, r2
 800a496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7ff fc0d 	bl	8009cba <VL53L0X_device_read_strobe>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a4ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	2190      	movs	r1, #144	; 0x90
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f001 fe78 	bl	800c1ac <VL53L0X_RdDWord>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	461a      	mov	r2, r3
 800a4c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800a4ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	2181      	movs	r1, #129	; 0x81
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f001 fea3 	bl	800c224 <VL53L0X_WrByte>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a4ec:	2206      	movs	r2, #6
 800a4ee:	21ff      	movs	r1, #255	; 0xff
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f001 fe97 	bl	800c224 <VL53L0X_WrByte>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4fe:	4313      	orrs	r3, r2
 800a500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a504:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a508:	461a      	mov	r2, r3
 800a50a:	2183      	movs	r1, #131	; 0x83
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f001 fd8f 	bl	800c030 <VL53L0X_RdByte>
 800a512:	4603      	mov	r3, r0
 800a514:	461a      	mov	r2, r3
 800a516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a51a:	4313      	orrs	r3, r2
 800a51c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800a520:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a524:	f023 0304 	bic.w	r3, r3, #4
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	461a      	mov	r2, r3
 800a52c:	2183      	movs	r1, #131	; 0x83
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f001 fe78 	bl	800c224 <VL53L0X_WrByte>
 800a534:	4603      	mov	r3, r0
 800a536:	461a      	mov	r2, r3
 800a538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a53c:	4313      	orrs	r3, r2
 800a53e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a542:	2201      	movs	r2, #1
 800a544:	21ff      	movs	r1, #255	; 0xff
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f001 fe6c 	bl	800c224 <VL53L0X_WrByte>
 800a54c:	4603      	mov	r3, r0
 800a54e:	461a      	mov	r2, r3
 800a550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a554:	4313      	orrs	r3, r2
 800a556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a55a:	2201      	movs	r2, #1
 800a55c:	2100      	movs	r1, #0
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 fe60 	bl	800c224 <VL53L0X_WrByte>
 800a564:	4603      	mov	r3, r0
 800a566:	461a      	mov	r2, r3
 800a568:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a56c:	4313      	orrs	r3, r2
 800a56e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a572:	2200      	movs	r2, #0
 800a574:	21ff      	movs	r1, #255	; 0xff
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f001 fe54 	bl	800c224 <VL53L0X_WrByte>
 800a57c:	4603      	mov	r3, r0
 800a57e:	461a      	mov	r2, r3
 800a580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a584:	4313      	orrs	r3, r2
 800a586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a58a:	2200      	movs	r2, #0
 800a58c:	2180      	movs	r1, #128	; 0x80
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f001 fe48 	bl	800c224 <VL53L0X_WrByte>
 800a594:	4603      	mov	r3, r0
 800a596:	461a      	mov	r2, r3
 800a598:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a59c:	4313      	orrs	r3, r2
 800a59e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a5a2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f040 808f 	bne.w	800a6ca <VL53L0X_get_info_from_device+0x98e>
 800a5ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a5b0:	2b07      	cmp	r3, #7
 800a5b2:	f000 808a 	beq.w	800a6ca <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800a5b6:	78fb      	ldrb	r3, [r7, #3]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d024      	beq.n	800a60a <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a5c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a5c4:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d11e      	bne.n	800a60a <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800a5d2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800a5dc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5e4:	e00e      	b.n	800a604 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800a5e6:	f107 0208 	add.w	r2, r7, #8
 800a5ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ec:	4413      	add	r3, r2
 800a5ee:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a5fa:	460a      	mov	r2, r1
 800a5fc:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a5fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a600:	3301      	adds	r3, #1
 800a602:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a606:	2b05      	cmp	r3, #5
 800a608:	dded      	ble.n	800a5e6 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800a60a:	78fb      	ldrb	r3, [r7, #3]
 800a60c:	f003 0302 	and.w	r3, r3, #2
 800a610:	2b00      	cmp	r3, #0
 800a612:	d018      	beq.n	800a646 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a614:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a618:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d112      	bne.n	800a646 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a620:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a62a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	33f3      	adds	r3, #243	; 0xf3
 800a638:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800a63a:	f107 0310 	add.w	r3, r7, #16
 800a63e:	4619      	mov	r1, r3
 800a640:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a642:	f001 ff07 	bl	800c454 <strcpy>

		}

		if (((option & 4) == 4) &&
 800a646:	78fb      	ldrb	r3, [r7, #3]
 800a648:	f003 0304 	and.w	r3, r3, #4
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d030      	beq.n	800a6b2 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a650:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a654:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d12a      	bne.n	800a6b2 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a65c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800a66c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a66e:	025b      	lsls	r3, r3, #9
 800a670:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a676:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800a680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a682:	2b00      	cmp	r3, #0
 800a684:	d011      	beq.n	800a6aa <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800a686:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800a68e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a690:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a694:	fb02 f303 	mul.w	r3, r2, r3
 800a698:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800a69a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800a69e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a6a2:	425b      	negs	r3, r3
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800a6aa:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800a6b2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a6b6:	78fb      	ldrb	r3, [r7, #3]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800a6c0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a6ca:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3760      	adds	r7, #96	; 0x60
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b087      	sub	sp, #28
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800a6e2:	f240 6277 	movw	r2, #1655	; 0x677
 800a6e6:	f04f 0300 	mov.w	r3, #0
 800a6ea:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800a6ee:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800a6f2:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800a6fc:	693a      	ldr	r2, [r7, #16]
 800a6fe:	fb02 f303 	mul.w	r3, r2, r3
 800a702:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800a704:	68bb      	ldr	r3, [r7, #8]
}
 800a706:	4618      	mov	r0, r3
 800a708:	371c      	adds	r7, #28
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bc80      	pop	{r7}
 800a70e:	4770      	bx	lr

0800a710 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800a710:	b480      	push	{r7}
 800a712:	b087      	sub	sp, #28
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800a718:	2300      	movs	r3, #0
 800a71a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800a71c:	2300      	movs	r3, #0
 800a71e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800a720:	2300      	movs	r3, #0
 800a722:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d017      	beq.n	800a75a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a730:	e005      	b.n	800a73e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	085b      	lsrs	r3, r3, #1
 800a736:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a738:	89fb      	ldrh	r3, [r7, #14]
 800a73a:	3301      	adds	r3, #1
 800a73c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1f4      	bne.n	800a732 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a748:	89fb      	ldrh	r3, [r7, #14]
 800a74a:	021b      	lsls	r3, r3, #8
 800a74c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	b29b      	uxth	r3, r3
 800a752:	b2db      	uxtb	r3, r3
 800a754:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a756:	4413      	add	r3, r2
 800a758:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a75a:	8afb      	ldrh	r3, [r7, #22]

}
 800a75c:	4618      	mov	r0, r3
 800a75e:	371c      	adds	r7, #28
 800a760:	46bd      	mov	sp, r7
 800a762:	bc80      	pop	{r7}
 800a764:	4770      	bx	lr

0800a766 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a766:	b480      	push	{r7}
 800a768:	b085      	sub	sp, #20
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	4603      	mov	r3, r0
 800a76e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a770:	2300      	movs	r3, #0
 800a772:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a774:	88fb      	ldrh	r3, [r7, #6]
 800a776:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a778:	88fa      	ldrh	r2, [r7, #6]
 800a77a:	0a12      	lsrs	r2, r2, #8
 800a77c:	b292      	uxth	r2, r2
 800a77e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a780:	3301      	adds	r3, #1
 800a782:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a784:	68fb      	ldr	r3, [r7, #12]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bc80      	pop	{r7}
 800a78e:	4770      	bx	lr

0800a790 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	4613      	mov	r3, r2
 800a79c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a7a2:	79fb      	ldrb	r3, [r7, #7]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f7ff ff95 	bl	800a6d6 <VL53L0X_calc_macro_period_ps>
 800a7ac:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a7b4:	4a0a      	ldr	r2, [pc, #40]	; (800a7e0 <VL53L0X_calc_timeout_mclks+0x50>)
 800a7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ba:	099b      	lsrs	r3, r3, #6
 800a7bc:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7c4:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	085b      	lsrs	r3, r3, #1
 800a7cc:	441a      	add	r2, r3
	timeout_period_mclks =
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7d4:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800a7d6:	69fb      	ldr	r3, [r7, #28]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3720      	adds	r7, #32
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	10624dd3 	.word	0x10624dd3

0800a7e4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	807b      	strh	r3, [r7, #2]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a7f8:	787b      	ldrb	r3, [r7, #1]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7ff ff6a 	bl	800a6d6 <VL53L0X_calc_macro_period_ps>
 800a802:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a80a:	4a0b      	ldr	r2, [pc, #44]	; (800a838 <VL53L0X_calc_timeout_us+0x54>)
 800a80c:	fba2 2303 	umull	r2, r3, r2, r3
 800a810:	099b      	lsrs	r3, r3, #6
 800a812:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 800a814:	887b      	ldrh	r3, [r7, #2]
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / 1000;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	085b      	lsrs	r3, r3, #1
 800a820:	4413      	add	r3, r2
	actual_timeout_period_us =
 800a822:	4a05      	ldr	r2, [pc, #20]	; (800a838 <VL53L0X_calc_timeout_us+0x54>)
 800a824:	fba2 2303 	umull	r2, r3, r2, r3
 800a828:	099b      	lsrs	r3, r3, #6
 800a82a:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a82c:	697b      	ldr	r3, [r7, #20]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	10624dd3 	.word	0x10624dd3

0800a83c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08c      	sub	sp, #48	; 0x30
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	460b      	mov	r3, r1
 800a846:	607a      	str	r2, [r7, #4]
 800a848:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a84a:	2300      	movs	r3, #0
 800a84c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a862:	7afb      	ldrb	r3, [r7, #11]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d005      	beq.n	800a874 <get_sequence_step_timeout+0x38>
 800a868:	7afb      	ldrb	r3, [r7, #11]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d002      	beq.n	800a874 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a86e:	7afb      	ldrb	r3, [r7, #11]
 800a870:	2b02      	cmp	r3, #2
 800a872:	d128      	bne.n	800a8c6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a874:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a878:	461a      	mov	r2, r3
 800a87a:	2100      	movs	r1, #0
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f7fd fa90 	bl	8007da2 <VL53L0X_GetVcselPulsePeriod>
 800a882:	4603      	mov	r3, r0
 800a884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a888:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d109      	bne.n	800a8a4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a890:	f107 0320 	add.w	r3, r7, #32
 800a894:	461a      	mov	r2, r3
 800a896:	2146      	movs	r1, #70	; 0x46
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f001 fbc9 	bl	800c030 <VL53L0X_RdByte>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a8a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff ff5b 	bl	800a766 <VL53L0X_decode_timeout>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a8b4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a8b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f7ff ff91 	bl	800a7e4 <VL53L0X_calc_timeout_us>
 800a8c2:	62b8      	str	r0, [r7, #40]	; 0x28
 800a8c4:	e092      	b.n	800a9ec <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a8c6:	7afb      	ldrb	r3, [r7, #11]
 800a8c8:	2b03      	cmp	r3, #3
 800a8ca:	d135      	bne.n	800a938 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a8cc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f7fd fa64 	bl	8007da2 <VL53L0X_GetVcselPulsePeriod>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a8e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f040 8081 	bne.w	800a9ec <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a8ea:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f7fd fa55 	bl	8007da2 <VL53L0X_GetVcselPulsePeriod>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800a8fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a902:	2b00      	cmp	r3, #0
 800a904:	d109      	bne.n	800a91a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800a906:	f107 031e 	add.w	r3, r7, #30
 800a90a:	461a      	mov	r2, r3
 800a90c:	2151      	movs	r1, #81	; 0x51
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f001 fc14 	bl	800c13c <VL53L0X_RdWord>
 800a914:	4603      	mov	r3, r0
 800a916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a91a:	8bfb      	ldrh	r3, [r7, #30]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7ff ff22 	bl	800a766 <VL53L0X_decode_timeout>
 800a922:	4603      	mov	r3, r0
 800a924:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a926:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a92a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a92c:	4619      	mov	r1, r3
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f7ff ff58 	bl	800a7e4 <VL53L0X_calc_timeout_us>
 800a934:	62b8      	str	r0, [r7, #40]	; 0x28
 800a936:	e059      	b.n	800a9ec <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a938:	7afb      	ldrb	r3, [r7, #11]
 800a93a:	2b04      	cmp	r3, #4
 800a93c:	d156      	bne.n	800a9ec <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a93e:	f107 0314 	add.w	r3, r7, #20
 800a942:	4619      	mov	r1, r3
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f7fd fb37 	bl	8007fb8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a94a:	2300      	movs	r3, #0
 800a94c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a94e:	7dfb      	ldrb	r3, [r7, #23]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d01d      	beq.n	800a990 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a954:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a958:	461a      	mov	r2, r3
 800a95a:	2100      	movs	r1, #0
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f7fd fa20 	bl	8007da2 <VL53L0X_GetVcselPulsePeriod>
 800a962:	4603      	mov	r3, r0
 800a964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800a968:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10f      	bne.n	800a990 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800a970:	f107 031e 	add.w	r3, r7, #30
 800a974:	461a      	mov	r2, r3
 800a976:	2151      	movs	r1, #81	; 0x51
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f001 fbdf 	bl	800c13c <VL53L0X_RdWord>
 800a97e:	4603      	mov	r3, r0
 800a980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a984:	8bfb      	ldrh	r3, [r7, #30]
 800a986:	4618      	mov	r0, r3
 800a988:	f7ff feed 	bl	800a766 <VL53L0X_decode_timeout>
 800a98c:	4603      	mov	r3, r0
 800a98e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a990:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a994:	2b00      	cmp	r3, #0
 800a996:	d109      	bne.n	800a9ac <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a998:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a99c:	461a      	mov	r2, r3
 800a99e:	2101      	movs	r1, #1
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f7fd f9fe 	bl	8007da2 <VL53L0X_GetVcselPulsePeriod>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a9ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10f      	bne.n	800a9d4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800a9b4:	f107 031c 	add.w	r3, r7, #28
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	2171      	movs	r1, #113	; 0x71
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f001 fbbd 	bl	800c13c <VL53L0X_RdWord>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a9c8:	8bbb      	ldrh	r3, [r7, #28]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7ff fecb 	bl	800a766 <VL53L0X_decode_timeout>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a9d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a9d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a9dc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a9e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f7ff fefd 	bl	800a7e4 <VL53L0X_calc_timeout_us>
 800a9ea:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9f0:	601a      	str	r2, [r3, #0]

	return Status;
 800a9f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3730      	adds	r7, #48	; 0x30
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b08a      	sub	sp, #40	; 0x28
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	60f8      	str	r0, [r7, #12]
 800aa06:	460b      	mov	r3, r1
 800aa08:	607a      	str	r2, [r7, #4]
 800aa0a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800aa12:	7afb      	ldrb	r3, [r7, #11]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d005      	beq.n	800aa24 <set_sequence_step_timeout+0x26>
 800aa18:	7afb      	ldrb	r3, [r7, #11]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d002      	beq.n	800aa24 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800aa1e:	7afb      	ldrb	r3, [r7, #11]
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d138      	bne.n	800aa96 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aa24:	f107 031d 	add.w	r3, r7, #29
 800aa28:	461a      	mov	r2, r3
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f7fd f9b8 	bl	8007da2 <VL53L0X_GetVcselPulsePeriod>
 800aa32:	4603      	mov	r3, r0
 800aa34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800aa38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d11a      	bne.n	800aa76 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800aa40:	7f7b      	ldrb	r3, [r7, #29]
 800aa42:	461a      	mov	r2, r3
 800aa44:	6879      	ldr	r1, [r7, #4]
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f7ff fea2 	bl	800a790 <VL53L0X_calc_timeout_mclks>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800aa50:	8bfb      	ldrh	r3, [r7, #30]
 800aa52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa56:	d903      	bls.n	800aa60 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800aa58:	23ff      	movs	r3, #255	; 0xff
 800aa5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aa5e:	e004      	b.n	800aa6a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800aa60:	8bfb      	ldrh	r3, [r7, #30]
 800aa62:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800aa64:	3b01      	subs	r3, #1
 800aa66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aa6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800aa76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f040 80ad 	bne.w	800abda <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 800aa80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa84:	461a      	mov	r2, r3
 800aa86:	2146      	movs	r1, #70	; 0x46
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f001 fbcb 	bl	800c224 <VL53L0X_WrByte>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800aa94:	e0a1      	b.n	800abda <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800aa96:	7afb      	ldrb	r3, [r7, #11]
 800aa98:	2b03      	cmp	r3, #3
 800aa9a:	d135      	bne.n	800ab08 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800aa9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d11b      	bne.n	800aadc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aaa4:	f107 031d 	add.w	r3, r7, #29
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	2100      	movs	r1, #0
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f7fd f978 	bl	8007da2 <VL53L0X_GetVcselPulsePeriod>
 800aab2:	4603      	mov	r3, r0
 800aab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800aab8:	7f7b      	ldrb	r3, [r7, #29]
 800aaba:	461a      	mov	r2, r3
 800aabc:	6879      	ldr	r1, [r7, #4]
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f7ff fe66 	bl	800a790 <VL53L0X_calc_timeout_mclks>
 800aac4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800aac6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800aac8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7ff fe20 	bl	800a710 <VL53L0X_encode_timeout>
 800aad0:	4603      	mov	r3, r0
 800aad2:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aad4:	8b7a      	ldrh	r2, [r7, #26]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800aadc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d108      	bne.n	800aaf6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800aae4:	8b7b      	ldrh	r3, [r7, #26]
 800aae6:	461a      	mov	r2, r3
 800aae8:	2151      	movs	r1, #81	; 0x51
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f001 fbbe 	bl	800c26c <VL53L0X_WrWord>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800aaf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d16d      	bne.n	800abda <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800ab06:	e068      	b.n	800abda <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800ab08:	7afb      	ldrb	r3, [r7, #11]
 800ab0a:	2b04      	cmp	r3, #4
 800ab0c:	d162      	bne.n	800abd4 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800ab0e:	f107 0314 	add.w	r3, r7, #20
 800ab12:	4619      	mov	r1, r3
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f7fd fa4f 	bl	8007fb8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800ab1e:	7dfb      	ldrb	r3, [r7, #23]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d01d      	beq.n	800ab60 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ab24:	f107 031d 	add.w	r3, r7, #29
 800ab28:	461a      	mov	r2, r3
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f7fd f938 	bl	8007da2 <VL53L0X_GetVcselPulsePeriod>
 800ab32:	4603      	mov	r3, r0
 800ab34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800ab38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10f      	bne.n	800ab60 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800ab40:	f107 031a 	add.w	r3, r7, #26
 800ab44:	461a      	mov	r2, r3
 800ab46:	2151      	movs	r1, #81	; 0x51
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f001 faf7 	bl	800c13c <VL53L0X_RdWord>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800ab54:	8b7b      	ldrh	r3, [r7, #26]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7ff fe05 	bl	800a766 <VL53L0X_decode_timeout>
 800ab5c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800ab5e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800ab60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d109      	bne.n	800ab7c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ab68:	f107 031d 	add.w	r3, r7, #29
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	2101      	movs	r1, #1
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f7fd f916 	bl	8007da2 <VL53L0X_GetVcselPulsePeriod>
 800ab76:	4603      	mov	r3, r0
 800ab78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800ab7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d12a      	bne.n	800abda <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800ab84:	7f7b      	ldrb	r3, [r7, #29]
 800ab86:	461a      	mov	r2, r3
 800ab88:	6879      	ldr	r1, [r7, #4]
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f7ff fe00 	bl	800a790 <VL53L0X_calc_timeout_mclks>
 800ab90:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 800ab92:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800ab94:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ab96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab98:	4413      	add	r3, r2
 800ab9a:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800ab9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7ff fdb6 	bl	800a710 <VL53L0X_encode_timeout>
 800aba4:	4603      	mov	r3, r0
 800aba6:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 800aba8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abac:	2b00      	cmp	r3, #0
 800abae:	d108      	bne.n	800abc2 <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800abb0:	8c3b      	ldrh	r3, [r7, #32]
 800abb2:	461a      	mov	r2, r3
 800abb4:	2171      	movs	r1, #113	; 0x71
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f001 fb58 	bl	800c26c <VL53L0X_WrWord>
 800abbc:	4603      	mov	r3, r0
 800abbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800abc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d107      	bne.n	800abda <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800abd2:	e002      	b.n	800abda <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800abd4:	23fc      	movs	r3, #252	; 0xfc
 800abd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800abda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3728      	adds	r7, #40	; 0x28
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b086      	sub	sp, #24
 800abea:	af00      	add	r7, sp, #0
 800abec:	60f8      	str	r0, [r7, #12]
 800abee:	460b      	mov	r3, r1
 800abf0:	607a      	str	r2, [r7, #4]
 800abf2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abf4:	2300      	movs	r3, #0
 800abf6:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800abf8:	7afb      	ldrb	r3, [r7, #11]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d002      	beq.n	800ac04 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d00a      	beq.n	800ac18 <VL53L0X_get_vcsel_pulse_period+0x32>
 800ac02:	e013      	b.n	800ac2c <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ac04:	f107 0316 	add.w	r3, r7, #22
 800ac08:	461a      	mov	r2, r3
 800ac0a:	2150      	movs	r1, #80	; 0x50
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f001 fa0f 	bl	800c030 <VL53L0X_RdByte>
 800ac12:	4603      	mov	r3, r0
 800ac14:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ac16:	e00b      	b.n	800ac30 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ac18:	f107 0316 	add.w	r3, r7, #22
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	2170      	movs	r1, #112	; 0x70
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f001 fa05 	bl	800c030 <VL53L0X_RdByte>
 800ac26:	4603      	mov	r3, r0
 800ac28:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ac2a:	e001      	b.n	800ac30 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ac2c:	23fc      	movs	r3, #252	; 0xfc
 800ac2e:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ac30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d107      	bne.n	800ac48 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ac38:	7dbb      	ldrb	r3, [r7, #22]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe fff8 	bl	8009c30 <VL53L0X_decode_vcsel_period>
 800ac40:	4603      	mov	r3, r0
 800ac42:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	701a      	strb	r2, [r3, #0]

	return Status;
 800ac48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3718      	adds	r7, #24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b092      	sub	sp, #72	; 0x48
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ac64:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ac68:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 800ac6a:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800ac6e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800ac70:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ac74:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ac76:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ac7a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800ac7c:	f240 234e 	movw	r3, #590	; 0x24e
 800ac80:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800ac82:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ac86:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ac88:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ac8c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ac8e:	f240 2326 	movw	r3, #550	; 0x226
 800ac92:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800ac98:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ac9c:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	6a3b      	ldr	r3, [r7, #32]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d205      	bcs.n	800acb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800acaa:	23fc      	movs	r3, #252	; 0xfc
 800acac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800acb0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800acb4:	e0aa      	b.n	800ae0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800acb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800acb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acba:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800acbc:	683a      	ldr	r2, [r7, #0]
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800acc2:	f107 0314 	add.w	r3, r7, #20
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7fd f975 	bl	8007fb8 <VL53L0X_GetSequenceStepEnables>
 800acce:	4603      	mov	r3, r0
 800acd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800acd4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d15b      	bne.n	800ad94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800acdc:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d105      	bne.n	800acee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800ace2:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d102      	bne.n	800acee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800ace8:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800acea:	2b00      	cmp	r3, #0
 800acec:	d052      	beq.n	800ad94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800acee:	f107 0310 	add.w	r3, r7, #16
 800acf2:	461a      	mov	r2, r3
 800acf4:	2102      	movs	r1, #2
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f7ff fda0 	bl	800a83c <get_sequence_step_timeout>
 800acfc:	4603      	mov	r3, r0
 800acfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800ad02:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d002      	beq.n	800ad10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800ad0a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ad0e:	e07d      	b.n	800ae0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800ad10:	7d3b      	ldrb	r3, [r7, #20]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00f      	beq.n	800ad36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800ad16:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800ad18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad1a:	4413      	add	r3, r2
 800ad1c:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ad1e:	69fa      	ldr	r2, [r7, #28]
 800ad20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d204      	bcs.n	800ad30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800ad26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	643b      	str	r3, [r7, #64]	; 0x40
 800ad2e:	e002      	b.n	800ad36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad30:	23fc      	movs	r3, #252	; 0xfc
 800ad32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ad36:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d002      	beq.n	800ad44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ad3e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ad42:	e063      	b.n	800ae0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800ad44:	7dbb      	ldrb	r3, [r7, #22]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d011      	beq.n	800ad6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4e:	4413      	add	r3, r2
 800ad50:	005b      	lsls	r3, r3, #1
 800ad52:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ad54:	69fa      	ldr	r2, [r7, #28]
 800ad56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d204      	bcs.n	800ad66 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ad5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	643b      	str	r3, [r7, #64]	; 0x40
 800ad64:	e016      	b.n	800ad94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad66:	23fc      	movs	r3, #252	; 0xfc
 800ad68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ad6c:	e012      	b.n	800ad94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ad6e:	7d7b      	ldrb	r3, [r7, #21]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00f      	beq.n	800ad94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad78:	4413      	add	r3, r2
 800ad7a:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ad7c:	69fa      	ldr	r2, [r7, #28]
 800ad7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d204      	bcs.n	800ad8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ad84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	643b      	str	r3, [r7, #64]	; 0x40
 800ad8c:	e002      	b.n	800ad94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad8e:	23fc      	movs	r3, #252	; 0xfc
 800ad90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ad94:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d002      	beq.n	800ada2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ad9c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ada0:	e034      	b.n	800ae0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ada2:	7dfb      	ldrb	r3, [r7, #23]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d019      	beq.n	800addc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800ada8:	f107 030c 	add.w	r3, r7, #12
 800adac:	461a      	mov	r2, r3
 800adae:	2103      	movs	r1, #3
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f7ff fd43 	bl	800a83c <get_sequence_step_timeout>
 800adb6:	4603      	mov	r3, r0
 800adb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adc0:	4413      	add	r3, r2
 800adc2:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800adc4:	69fa      	ldr	r2, [r7, #28]
 800adc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adc8:	429a      	cmp	r2, r3
 800adca:	d204      	bcs.n	800add6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800adcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	643b      	str	r3, [r7, #64]	; 0x40
 800add4:	e002      	b.n	800addc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800add6:	23fc      	movs	r3, #252	; 0xfc
 800add8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800addc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d111      	bne.n	800ae08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800ade4:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00e      	beq.n	800ae08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800adea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 800adf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adf4:	2104      	movs	r1, #4
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7ff fe01 	bl	800a9fe <set_sequence_step_timeout>
 800adfc:	4603      	mov	r3, r0
 800adfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800ae08:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3748      	adds	r7, #72	; 0x48
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b090      	sub	sp, #64	; 0x40
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ae24:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ae28:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ae2a:	f240 7376 	movw	r3, #1910	; 0x776
 800ae2e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800ae30:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ae34:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ae36:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ae3a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800ae3c:	f240 234e 	movw	r3, #590	; 0x24e
 800ae40:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800ae42:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ae46:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ae48:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ae4c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ae4e:	f240 2326 	movw	r3, #550	; 0x226
 800ae52:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ae58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5c:	441a      	add	r2, r3
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ae62:	f107 0318 	add.w	r3, r7, #24
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7fd f8a5 	bl	8007fb8 <VL53L0X_GetSequenceStepEnables>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800ae74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d002      	beq.n	800ae82 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ae7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ae80:	e075      	b.n	800af6e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800ae82:	7e3b      	ldrb	r3, [r7, #24]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d105      	bne.n	800ae94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800ae88:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d102      	bne.n	800ae94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800ae8e:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d030      	beq.n	800aef6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800ae94:	f107 0310 	add.w	r3, r7, #16
 800ae98:	461a      	mov	r2, r3
 800ae9a:	2102      	movs	r1, #2
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7ff fccd 	bl	800a83c <get_sequence_step_timeout>
 800aea2:	4603      	mov	r3, r0
 800aea4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800aea8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d122      	bne.n	800aef6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800aeb0:	7e3b      	ldrb	r3, [r7, #24]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d007      	beq.n	800aec6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800aeba:	6939      	ldr	r1, [r7, #16]
 800aebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aebe:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800aec0:	441a      	add	r2, r3
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800aec6:	7ebb      	ldrb	r3, [r7, #26]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d009      	beq.n	800aee0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800aed0:	6939      	ldr	r1, [r7, #16]
 800aed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed4:	440b      	add	r3, r1
 800aed6:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800aed8:	441a      	add	r2, r3
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	601a      	str	r2, [r3, #0]
 800aede:	e00a      	b.n	800aef6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800aee0:	7e7b      	ldrb	r3, [r7, #25]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d007      	beq.n	800aef6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800aeea:	6939      	ldr	r1, [r7, #16]
 800aeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeee:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800aef0:	441a      	add	r2, r3
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aef6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d114      	bne.n	800af28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800aefe:	7efb      	ldrb	r3, [r7, #27]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d011      	beq.n	800af28 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800af04:	f107 030c 	add.w	r3, r7, #12
 800af08:	461a      	mov	r2, r3
 800af0a:	2103      	movs	r1, #3
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff fc95 	bl	800a83c <get_sequence_step_timeout>
 800af12:	4603      	mov	r3, r0
 800af14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800af1c:	68f9      	ldr	r1, [r7, #12]
 800af1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af20:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800af22:	441a      	add	r2, r3
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800af28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d114      	bne.n	800af5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800af30:	7f3b      	ldrb	r3, [r7, #28]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d011      	beq.n	800af5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800af36:	f107 0314 	add.w	r3, r7, #20
 800af3a:	461a      	mov	r2, r3
 800af3c:	2104      	movs	r1, #4
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7ff fc7c 	bl	800a83c <get_sequence_step_timeout>
 800af44:	4603      	mov	r3, r0
 800af46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800af4e:	6979      	ldr	r1, [r7, #20]
 800af50:	6a3b      	ldr	r3, [r7, #32]
 800af52:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800af54:	441a      	add	r2, r3
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800af5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d103      	bne.n	800af6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3740      	adds	r7, #64	; 0x40
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b088      	sub	sp, #32
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af82:	2300      	movs	r3, #0
 800af84:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800af86:	2300      	movs	r3, #0
 800af88:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800af8a:	e0c6      	b.n	800b11a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	4413      	add	r3, r2
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	74fb      	strb	r3, [r7, #19]
		Index++;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	3301      	adds	r3, #1
 800af9a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800af9c:	7cfb      	ldrb	r3, [r7, #19]
 800af9e:	2bff      	cmp	r3, #255	; 0xff
 800afa0:	f040 808d 	bne.w	800b0be <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	683a      	ldr	r2, [r7, #0]
 800afa8:	4413      	add	r3, r2
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	747b      	strb	r3, [r7, #17]
			Index++;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	3301      	adds	r3, #1
 800afb2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800afb4:	7c7b      	ldrb	r3, [r7, #17]
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	d87e      	bhi.n	800b0b8 <VL53L0X_load_tuning_settings+0x140>
 800afba:	a201      	add	r2, pc, #4	; (adr r2, 800afc0 <VL53L0X_load_tuning_settings+0x48>)
 800afbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc0:	0800afd1 	.word	0x0800afd1
 800afc4:	0800b00b 	.word	0x0800b00b
 800afc8:	0800b045 	.word	0x0800b045
 800afcc:	0800b07f 	.word	0x0800b07f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	4413      	add	r3, r2
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	743b      	strb	r3, [r7, #16]
				Index++;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	3301      	adds	r3, #1
 800afde:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	683a      	ldr	r2, [r7, #0]
 800afe4:	4413      	add	r3, r2
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	3301      	adds	r3, #1
 800afee:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800aff0:	7c3b      	ldrb	r3, [r7, #16]
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	021b      	lsls	r3, r3, #8
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
 800affa:	b29b      	uxth	r3, r3
 800affc:	4413      	add	r3, r2
 800affe:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	89ba      	ldrh	r2, [r7, #12]
 800b004:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800b008:	e087      	b.n	800b11a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	4413      	add	r3, r2
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	743b      	strb	r3, [r7, #16]
				Index++;
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	3301      	adds	r3, #1
 800b018:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	4413      	add	r3, r2
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	3301      	adds	r3, #1
 800b028:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b02a:	7c3b      	ldrb	r3, [r7, #16]
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	021b      	lsls	r3, r3, #8
 800b030:	b29a      	uxth	r2, r3
 800b032:	7bfb      	ldrb	r3, [r7, #15]
 800b034:	b29b      	uxth	r3, r3
 800b036:	4413      	add	r3, r2
 800b038:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	89ba      	ldrh	r2, [r7, #12]
 800b03e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800b042:	e06a      	b.n	800b11a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	4413      	add	r3, r2
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	743b      	strb	r3, [r7, #16]
				Index++;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	3301      	adds	r3, #1
 800b052:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	4413      	add	r3, r2
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	3301      	adds	r3, #1
 800b062:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b064:	7c3b      	ldrb	r3, [r7, #16]
 800b066:	b29b      	uxth	r3, r3
 800b068:	021b      	lsls	r3, r3, #8
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
 800b06e:	b29b      	uxth	r3, r3
 800b070:	4413      	add	r3, r2
 800b072:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	89ba      	ldrh	r2, [r7, #12]
 800b078:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800b07c:	e04d      	b.n	800b11a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	4413      	add	r3, r2
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	743b      	strb	r3, [r7, #16]
				Index++;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	3301      	adds	r3, #1
 800b08c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	683a      	ldr	r2, [r7, #0]
 800b092:	4413      	add	r3, r2
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	3301      	adds	r3, #1
 800b09c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b09e:	7c3b      	ldrb	r3, [r7, #16]
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	021b      	lsls	r3, r3, #8
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	7bfb      	ldrb	r3, [r7, #15]
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	4413      	add	r3, r2
 800b0ac:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	89ba      	ldrh	r2, [r7, #12]
 800b0b2:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 800b0b6:	e030      	b.n	800b11a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b0b8:	23fc      	movs	r3, #252	; 0xfc
 800b0ba:	77fb      	strb	r3, [r7, #31]
 800b0bc:	e02d      	b.n	800b11a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800b0be:	7cfb      	ldrb	r3, [r7, #19]
 800b0c0:	2b04      	cmp	r3, #4
 800b0c2:	d828      	bhi.n	800b116 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	683a      	ldr	r2, [r7, #0]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	74bb      	strb	r3, [r7, #18]
			Index++;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	61bb      	str	r3, [r7, #24]
 800b0d8:	e00f      	b.n	800b0fa <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	4413      	add	r3, r2
 800b0e0:	7819      	ldrb	r1, [r3, #0]
 800b0e2:	f107 0208 	add.w	r2, r7, #8
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	460a      	mov	r2, r1
 800b0ec:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	61bb      	str	r3, [r7, #24]
 800b0fa:	7cfb      	ldrb	r3, [r7, #19]
 800b0fc:	69ba      	ldr	r2, [r7, #24]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	dbeb      	blt.n	800b0da <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800b102:	7cfb      	ldrb	r3, [r7, #19]
 800b104:	f107 0208 	add.w	r2, r7, #8
 800b108:	7cb9      	ldrb	r1, [r7, #18]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 ffba 	bl	800c084 <VL53L0X_WriteMulti>
 800b110:	4603      	mov	r3, r0
 800b112:	77fb      	strb	r3, [r7, #31]
 800b114:	e001      	b.n	800b11a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b116:	23fc      	movs	r3, #252	; 0xfc
 800b118:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	683a      	ldr	r2, [r7, #0]
 800b11e:	4413      	add	r3, r2
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d004      	beq.n	800b130 <VL53L0X_load_tuning_settings+0x1b8>
 800b126:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f43f af2e 	beq.w	800af8c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b130:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3720      	adds	r7, #32
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b088      	sub	sp, #32
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b148:	2300      	movs	r3, #0
 800b14a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800b152:	f107 0313 	add.w	r3, r7, #19
 800b156:	4619      	mov	r1, r3
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f7fc fff9 	bl	8008150 <VL53L0X_GetXTalkCompensationEnable>
 800b15e:	4603      	mov	r3, r0
 800b160:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800b162:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d111      	bne.n	800b18e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800b16a:	7cfb      	ldrb	r3, [r7, #19]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00e      	beq.n	800b18e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6a1b      	ldr	r3, [r3, #32]
 800b174:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	8a9b      	ldrh	r3, [r3, #20]
 800b17a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	fb02 f303 	mul.w	r3, r2, r3
 800b182:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	3380      	adds	r3, #128	; 0x80
 800b188:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800b18e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3720      	adds	r7, #32
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b086      	sub	sp, #24
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	60f8      	str	r0, [r7, #12]
 800b1a2:	60b9      	str	r1, [r7, #8]
 800b1a4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800b1b2:	f107 0310 	add.w	r3, r7, #16
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	68b9      	ldr	r1, [r7, #8]
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f7ff ffbe 	bl	800b13c <VL53L0X_get_total_xtalk_rate>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800b1c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d105      	bne.n	800b1d8 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	441a      	add	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	601a      	str	r2, [r3, #0]

	return Status;
 800b1d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3718      	adds	r7, #24
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b09a      	sub	sp, #104	; 0x68
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800b1f2:	2312      	movs	r3, #18
 800b1f4:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800b1f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b1fa:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800b1fc:	2342      	movs	r3, #66	; 0x42
 800b1fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800b200:	2306      	movs	r3, #6
 800b202:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800b204:	2307      	movs	r3, #7
 800b206:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b208:	2300      	movs	r3, #0
 800b20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 800b214:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b21c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800b21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b222:	fb02 f303 	mul.w	r3, r2, r3
 800b226:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800b228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b22a:	3380      	adds	r3, #128	; 0x80
 800b22c:	0a1b      	lsrs	r3, r3, #8
 800b22e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800b230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b232:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b234:	fb02 f303 	mul.w	r3, r2, r3
 800b238:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d01a      	beq.n	800b27a <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	029b      	lsls	r3, r3, #10
 800b248:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800b24e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b250:	4413      	add	r3, r2
 800b252:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800b254:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	fbb2 f3f3 	udiv	r3, r2, r3
 800b25c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800b25e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b260:	4613      	mov	r3, r2
 800b262:	005b      	lsls	r3, r3, #1
 800b264:	4413      	add	r3, r2
 800b266:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800b268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b26a:	fb03 f303 	mul.w	r3, r3, r3
 800b26e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800b270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b272:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b276:	0c1b      	lsrs	r3, r3, #16
 800b278:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b27e:	fb02 f303 	mul.w	r3, r2, r3
 800b282:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800b284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b286:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b28a:	0c1b      	lsrs	r3, r3, #16
 800b28c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800b28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b290:	fb03 f303 	mul.w	r3, r3, r3
 800b294:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800b296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b298:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b29c:	0c1b      	lsrs	r3, r3, #16
 800b29e:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800b2a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2a2:	085a      	lsrs	r2, r3, #1
 800b2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a6:	441a      	add	r2, r3
 800b2a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ae:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800b2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2b4:	fb02 f303 	mul.w	r3, r2, r3
 800b2b8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800b2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2c0:	d302      	bcc.n	800b2c8 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800b2c2:	4b54      	ldr	r3, [pc, #336]	; (800b414 <VL53L0X_calc_dmax+0x230>)
 800b2c4:	663b      	str	r3, [r7, #96]	; 0x60
 800b2c6:	e015      	b.n	800b2f4 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800b2c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2ca:	085a      	lsrs	r2, r3, #1
 800b2cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2ce:	441a      	add	r2, r3
 800b2d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2d6:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800b2d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2dc:	fb02 f303 	mul.w	r3, r2, r3
 800b2e0:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800b2e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b2e8:	0c1b      	lsrs	r3, r3, #16
 800b2ea:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800b2ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2ee:	fb03 f303 	mul.w	r3, r3, r3
 800b2f2:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800b2f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2f6:	039b      	lsls	r3, r3, #14
 800b2f8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b2fc:	4a46      	ldr	r2, [pc, #280]	; (800b418 <VL53L0X_calc_dmax+0x234>)
 800b2fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b302:	099b      	lsrs	r3, r3, #6
 800b304:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800b306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b308:	fb03 f303 	mul.w	r3, r3, r3
 800b30c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800b30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b310:	fb03 f303 	mul.w	r3, r3, r3
 800b314:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800b316:	6a3b      	ldr	r3, [r7, #32]
 800b318:	3308      	adds	r3, #8
 800b31a:	091b      	lsrs	r3, r3, #4
 800b31c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800b31e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b320:	6a3b      	ldr	r3, [r7, #32]
 800b322:	1ad3      	subs	r3, r2, r3
 800b324:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800b326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b328:	4613      	mov	r3, r2
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	4413      	add	r3, r2
 800b32e:	011b      	lsls	r3, r3, #4
 800b330:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b338:	0b9b      	lsrs	r3, r3, #14
 800b33a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800b33c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b33e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b340:	4413      	add	r3, r2
 800b342:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800b344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b346:	085b      	lsrs	r3, r3, #1
 800b348:	69ba      	ldr	r2, [r7, #24]
 800b34a:	4413      	add	r3, r2
 800b34c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800b34e:	69ba      	ldr	r2, [r7, #24]
 800b350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b352:	fbb2 f3f3 	udiv	r3, r2, r3
 800b356:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	039b      	lsls	r3, r3, #14
 800b35c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	085b      	lsrs	r3, r3, #1
 800b362:	69ba      	ldr	r2, [r7, #24]
 800b364:	4413      	add	r3, r2
 800b366:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800b368:	69ba      	ldr	r2, [r7, #24]
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b370:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b376:	fb02 f303 	mul.w	r3, r2, r3
 800b37a:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b382:	4a25      	ldr	r2, [pc, #148]	; (800b418 <VL53L0X_calc_dmax+0x234>)
 800b384:	fba2 2303 	umull	r2, r3, r2, r3
 800b388:	099b      	lsrs	r3, r3, #6
 800b38a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	011b      	lsls	r3, r3, #4
 800b390:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b398:	4a1f      	ldr	r2, [pc, #124]	; (800b418 <VL53L0X_calc_dmax+0x234>)
 800b39a:	fba2 2303 	umull	r2, r3, r2, r3
 800b39e:	099b      	lsrs	r3, r3, #6
 800b3a0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800b3a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3a4:	3380      	adds	r3, #128	; 0x80
 800b3a6:	0a1b      	lsrs	r3, r3, #8
 800b3a8:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d008      	beq.n	800b3c2 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	085a      	lsrs	r2, r3, #1
 800b3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b6:	441a      	add	r2, r3
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3be:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3c0:	e001      	b.n	800b3c6 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800b3c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b3c8:	f7fe fc44 	bl	8009c54 <VL53L0X_isqrt>
 800b3cc:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d008      	beq.n	800b3e6 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	085a      	lsrs	r2, r3, #1
 800b3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3da:	441a      	add	r2, r3
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3e4:	e001      	b.n	800b3ea <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800b3ea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b3ec:	f7fe fc32 	bl	8009c54 <VL53L0X_isqrt>
 800b3f0:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800b3f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b3f4:	693a      	ldr	r2, [r7, #16]
 800b3f6:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800b3f8:	693a      	ldr	r2, [r7, #16]
 800b3fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d902      	bls.n	800b406 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800b400:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b402:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b404:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b406:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3768      	adds	r7, #104	; 0x68
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	fff00000 	.word	0xfff00000
 800b418:	10624dd3 	.word	0x10624dd3

0800b41c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b0b2      	sub	sp, #200	; 0xc8
 800b420:	af04      	add	r7, sp, #16
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
 800b428:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b42a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b42e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b432:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800b43a:	2342      	movs	r3, #66	; 0x42
 800b43c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b440:	f241 235c 	movw	r3, #4700	; 0x125c
 800b444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b448:	4b6b      	ldr	r3, [pc, #428]	; (800b5f8 <VL53L0X_calc_sigma_estimate+0x1dc>)
 800b44a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b44e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b452:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b456:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b45a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b45e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b462:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b464:	4b65      	ldr	r3, [pc, #404]	; (800b5fc <VL53L0X_calc_sigma_estimate+0x1e0>)
 800b466:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b46c:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b46e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b472:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 800b474:	f240 6377 	movw	r3, #1655	; 0x677
 800b478:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b47a:	2300      	movs	r3, #0
 800b47c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6a1b      	ldr	r3, [r3, #32]
 800b484:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b48e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b492:	0c1b      	lsrs	r3, r3, #16
 800b494:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b49c:	f107 0310 	add.w	r3, r7, #16
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	68b9      	ldr	r1, [r7, #8]
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f7ff fe78 	bl	800b19a <VL53L0X_get_total_signal_rate>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b4b0:	f107 0314 	add.w	r3, r7, #20
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	68b9      	ldr	r1, [r7, #8]
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f7ff fe3f 	bl	800b13c <VL53L0X_get_total_xtalk_rate>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b4ca:	fb02 f303 	mul.w	r3, r2, r3
 800b4ce:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b4d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b4d6:	0c1b      	lsrs	r3, r3, #16
 800b4d8:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b4e0:	fb02 f303 	mul.w	r3, r2, r3
 800b4e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b4e8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b4ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d902      	bls.n	800b4f8 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b4f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 800b4f8:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d164      	bne.n	800b5ca <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b506:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b50e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b512:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b516:	461a      	mov	r2, r3
 800b518:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f7ff f938 	bl	800a790 <VL53L0X_calc_timeout_mclks>
 800b520:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b528:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b530:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b534:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b538:	461a      	mov	r2, r3
 800b53a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f7ff f927 	bl	800a790 <VL53L0X_calc_timeout_mclks>
 800b542:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b544:	2303      	movs	r3, #3
 800b546:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800b54a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b54e:	2b08      	cmp	r3, #8
 800b550:	d102      	bne.n	800b558 <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 800b552:	2302      	movs	r3, #2
 800b554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b55a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b55c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b55e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b562:	fb02 f303 	mul.w	r3, r2, r3
 800b566:	02db      	lsls	r3, r3, #11
 800b568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b56c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b570:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b574:	4a22      	ldr	r2, [pc, #136]	; (800b600 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800b576:	fba2 2303 	umull	r2, r3, r2, r3
 800b57a:	099b      	lsrs	r3, r3, #6
 800b57c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 800b580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b584:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b586:	fb02 f303 	mul.w	r3, r2, r3
 800b58a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b58e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b592:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b596:	4a1a      	ldr	r2, [pc, #104]	; (800b600 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800b598:	fba2 2303 	umull	r2, r3, r2, r3
 800b59c:	099b      	lsrs	r3, r3, #6
 800b59e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	3380      	adds	r3, #128	; 0x80
 800b5a6:	0a1b      	lsrs	r3, r3, #8
 800b5a8:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5b0:	fb02 f303 	mul.w	r3, r2, r3
 800b5b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b5b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b5bc:	3380      	adds	r3, #128	; 0x80
 800b5be:	0a1b      	lsrs	r3, r3, #8
 800b5c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	021b      	lsls	r3, r3, #8
 800b5c8:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b5ca:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d002      	beq.n	800b5d8 <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 800b5d2:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800b5d6:	e127      	b.n	800b828 <VL53L0X_calc_sigma_estimate+0x40c>
	}

	if (peakSignalRate_kcps == 0) {
 800b5d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d112      	bne.n	800b604 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b5e4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b5ec:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	e115      	b.n	800b824 <VL53L0X_calc_sigma_estimate+0x408>
 800b5f8:	028f87ae 	.word	0x028f87ae
 800b5fc:	0006999a 	.word	0x0006999a
 800b600:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 800b604:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d102      	bne.n	800b612 <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 800b60c:	2301      	movs	r3, #1
 800b60e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b612:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b616:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b61a:	041a      	lsls	r2, r3, #16
 800b61c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b61e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b626:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b62a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d902      	bls.n	800b636 <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b630:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b636:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b63a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b63e:	fb02 f303 	mul.w	r3, r2, r3
 800b642:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b64a:	4613      	mov	r3, r2
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	4413      	add	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4618      	mov	r0, r3
 800b654:	f7fe fafe 	bl	8009c54 <VL53L0X_isqrt>
 800b658:	4603      	mov	r3, r0
 800b65a:	005b      	lsls	r3, r3, #1
 800b65c:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	891b      	ldrh	r3, [r3, #8]
 800b662:	461a      	mov	r2, r3
 800b664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b666:	fb02 f303 	mul.w	r3, r2, r3
 800b66a:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b66c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b66e:	041a      	lsls	r2, r3, #16
 800b670:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b674:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 800b676:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b67a:	4a6d      	ldr	r2, [pc, #436]	; (800b830 <VL53L0X_calc_sigma_estimate+0x414>)
 800b67c:	fba2 2303 	umull	r2, r3, r2, r3
 800b680:	099b      	lsrs	r3, r3, #6
 800b682:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800b684:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b686:	041a      	lsls	r2, r3, #16
 800b688:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b68c:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 800b68e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800b692:	4a67      	ldr	r2, [pc, #412]	; (800b830 <VL53L0X_calc_sigma_estimate+0x414>)
 800b694:	fba2 2303 	umull	r2, r3, r2, r3
 800b698:	099b      	lsrs	r3, r3, #6
 800b69a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69e:	021b      	lsls	r3, r3, #8
 800b6a0:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b6a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	bfb8      	it	lt
 800b6ae:	425b      	neglt	r3, r3
 800b6b0:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b4:	021b      	lsls	r3, r3, #8
 800b6b6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b6b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c6:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6cc:	fb02 f303 	mul.w	r3, r2, r3
 800b6d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b6d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6d6:	4413      	add	r3, r2
 800b6d8:	0c1b      	lsrs	r3, r3, #16
 800b6da:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 800b6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 800b6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e6:	085b      	lsrs	r3, r3, #1
 800b6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 800b6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ec:	fb03 f303 	mul.w	r3, r3, r3
 800b6f0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 800b6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f4:	0b9b      	lsrs	r3, r3, #14
 800b6f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6fc:	fb02 f303 	mul.w	r3, r2, r3
 800b700:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b704:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b708:	0c1b      	lsrs	r3, r3, #16
 800b70a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70e:	fb03 f303 	mul.w	r3, r3, r3
 800b712:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 800b714:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b718:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b720:	0c1b      	lsrs	r3, r3, #16
 800b722:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	fb03 f303 	mul.w	r3, r3, r3
 800b72a:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b730:	4413      	add	r3, r2
 800b732:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b734:	6a38      	ldr	r0, [r7, #32]
 800b736:	f7fe fa8d 	bl	8009c54 <VL53L0X_isqrt>
 800b73a:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	041b      	lsls	r3, r3, #16
 800b740:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	3332      	adds	r3, #50	; 0x32
 800b746:	4a3b      	ldr	r2, [pc, #236]	; (800b834 <VL53L0X_calc_sigma_estimate+0x418>)
 800b748:	fba2 2303 	umull	r2, r3, r2, r3
 800b74c:	095a      	lsrs	r2, r3, #5
 800b74e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b750:	fbb2 f3f3 	udiv	r3, r2, r3
 800b754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b758:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b75c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b760:	fb02 f303 	mul.w	r3, r2, r3
 800b764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b76c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b770:	3308      	adds	r3, #8
 800b772:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 800b776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b77a:	4a2f      	ldr	r2, [pc, #188]	; (800b838 <VL53L0X_calc_sigma_estimate+0x41c>)
 800b77c:	fba2 2303 	umull	r2, r3, r2, r3
 800b780:	0b5b      	lsrs	r3, r3, #13
 800b782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b786:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b78a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b78e:	429a      	cmp	r2, r3
 800b790:	d903      	bls.n	800b79a <VL53L0X_calc_sigma_estimate+0x37e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b792:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b79a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b79e:	fb03 f303 	mul.w	r3, r3, r3
 800b7a2:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 800b7a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7a8:	fb03 f303 	mul.w	r3, r3, r3
 800b7ac:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b7ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	4413      	add	r3, r2
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7fe fa4d 	bl	8009c54 <VL53L0X_isqrt>
 800b7ba:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7c2:	fb02 f303 	mul.w	r3, r2, r3
 800b7c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b7ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d009      	beq.n	800b7e4 <VL53L0X_calc_sigma_estimate+0x3c8>
 800b7d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d005      	beq.n	800b7e4 <VL53L0X_calc_sigma_estimate+0x3c8>
 800b7d8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b7dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d903      	bls.n	800b7ec <VL53L0X_calc_sigma_estimate+0x3d0>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b7e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b7f2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 800b7fe:	6939      	ldr	r1, [r7, #16]
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	9303      	str	r3, [sp, #12]
 800b804:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b808:	9302      	str	r3, [sp, #8]
 800b80a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b816:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f7ff fce3 	bl	800b1e4 <VL53L0X_calc_dmax>
 800b81e:	4603      	mov	r3, r0
 800b820:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b824:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 800b828:	4618      	mov	r0, r3
 800b82a:	37b8      	adds	r7, #184	; 0xb8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	10624dd3 	.word	0x10624dd3
 800b834:	51eb851f 	.word	0x51eb851f
 800b838:	d1b71759 	.word	0xd1b71759

0800b83c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b090      	sub	sp, #64	; 0x40
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	607a      	str	r2, [r7, #4]
 800b846:	461a      	mov	r2, r3
 800b848:	460b      	mov	r3, r1
 800b84a:	72fb      	strb	r3, [r7, #11]
 800b84c:	4613      	mov	r3, r2
 800b84e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b850:	2300      	movs	r3, #0
 800b852:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b85c:	2300      	movs	r3, #0
 800b85e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b862:	2300      	movs	r3, #0
 800b864:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b868:	2300      	movs	r3, #0
 800b86a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b86e:	2300      	movs	r3, #0
 800b870:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b874:	2300      	movs	r3, #0
 800b876:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b87a:	2300      	movs	r3, #0
 800b87c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b880:	2300      	movs	r3, #0
 800b882:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b886:	2300      	movs	r3, #0
 800b888:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b88a:	2300      	movs	r3, #0
 800b88c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b88e:	7afb      	ldrb	r3, [r7, #11]
 800b890:	10db      	asrs	r3, r3, #3
 800b892:	b2db      	uxtb	r3, r3
 800b894:	f003 030f 	and.w	r3, r3, #15
 800b898:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b89c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d017      	beq.n	800b8d4 <VL53L0X_get_pal_range_status+0x98>
 800b8a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8a8:	2b05      	cmp	r3, #5
 800b8aa:	d013      	beq.n	800b8d4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b8ac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8b0:	2b07      	cmp	r3, #7
 800b8b2:	d00f      	beq.n	800b8d4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b8b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8b8:	2b0c      	cmp	r3, #12
 800b8ba:	d00b      	beq.n	800b8d4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b8bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8c0:	2b0d      	cmp	r3, #13
 800b8c2:	d007      	beq.n	800b8d4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b8c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8c8:	2b0e      	cmp	r3, #14
 800b8ca:	d003      	beq.n	800b8d4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b8cc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b8d0:	2b0f      	cmp	r3, #15
 800b8d2:	d103      	bne.n	800b8dc <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b8da:	e002      	b.n	800b8e2 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 800b8e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d107      	bne.n	800b8fa <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	21ff      	movs	r1, #255	; 0xff
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f000 fc98 	bl	800c224 <VL53L0X_WrByte>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 800b8fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d109      	bne.n	800b916 <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 800b902:	f107 0316 	add.w	r3, r7, #22
 800b906:	461a      	mov	r2, r3
 800b908:	21b6      	movs	r1, #182	; 0xb6
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	f000 fc16 	bl	800c13c <VL53L0X_RdWord>
 800b910:	4603      	mov	r3, r0
 800b912:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b916:	8afb      	ldrh	r3, [r7, #22]
 800b918:	025b      	lsls	r3, r3, #9
 800b91a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 800b91c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b920:	2b00      	cmp	r3, #0
 800b922:	d107      	bne.n	800b934 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b924:	2200      	movs	r2, #0
 800b926:	21ff      	movs	r1, #255	; 0xff
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f000 fc7b 	bl	800c224 <VL53L0X_WrByte>
 800b92e:	4603      	mov	r3, r0
 800b930:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b938:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b93c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b940:	2b00      	cmp	r3, #0
 800b942:	d109      	bne.n	800b958 <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b944:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b948:	461a      	mov	r2, r3
 800b94a:	2100      	movs	r1, #0
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f7fc fcd3 	bl	80082f8 <VL53L0X_GetLimitCheckEnable>
 800b952:	4603      	mov	r3, r0
 800b954:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b958:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d02e      	beq.n	800b9be <VL53L0X_get_pal_range_status+0x182>
 800b960:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b964:	2b00      	cmp	r3, #0
 800b966:	d12a      	bne.n	800b9be <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800b968:	f107 0310 	add.w	r3, r7, #16
 800b96c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b970:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f7ff fd52 	bl	800b41c <VL53L0X_calc_sigma_estimate>
 800b978:	4603      	mov	r3, r0
 800b97a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800b97e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b982:	2b00      	cmp	r3, #0
 800b984:	d103      	bne.n	800b98e <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	b29a      	uxth	r2, r3
 800b98a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b98c:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800b98e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b992:	2b00      	cmp	r3, #0
 800b994:	d113      	bne.n	800b9be <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800b996:	f107 0320 	add.w	r3, r7, #32
 800b99a:	461a      	mov	r2, r3
 800b99c:	2100      	movs	r1, #0
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f7fc fd2e 	bl	8008400 <VL53L0X_GetLimitCheckValue>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b9aa:	6a3b      	ldr	r3, [r7, #32]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d006      	beq.n	800b9be <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 800b9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b2:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d902      	bls.n	800b9be <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b9be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d109      	bne.n	800b9da <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b9c6:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	2102      	movs	r1, #2
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f7fc fc92 	bl	80082f8 <VL53L0X_GetLimitCheckEnable>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b9da:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d017      	beq.n	800ba12 <VL53L0X_get_pal_range_status+0x1d6>
 800b9e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d113      	bne.n	800ba12 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b9ea:	f107 031c 	add.w	r3, r7, #28
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	2102      	movs	r1, #2
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f7fc fd04 	bl	8008400 <VL53L0X_GetLimitCheckValue>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d006      	beq.n	800ba12 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800ba04:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800ba06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d902      	bls.n	800ba12 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ba12:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d109      	bne.n	800ba2e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ba1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba1e:	461a      	mov	r2, r3
 800ba20:	2103      	movs	r1, #3
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f7fc fc68 	bl	80082f8 <VL53L0X_GetLimitCheckEnable>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800ba2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d023      	beq.n	800ba7e <VL53L0X_get_pal_range_status+0x242>
 800ba36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d11f      	bne.n	800ba7e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800ba3e:	893b      	ldrh	r3, [r7, #8]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d102      	bne.n	800ba4a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800ba44:	2300      	movs	r3, #0
 800ba46:	637b      	str	r3, [r7, #52]	; 0x34
 800ba48:	e005      	b.n	800ba56 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	021a      	lsls	r2, r3, #8
 800ba4e:	893b      	ldrh	r3, [r7, #8]
 800ba50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba54:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ba56:	f107 0318 	add.w	r3, r7, #24
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	2103      	movs	r1, #3
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f7fc fcce 	bl	8008400 <VL53L0X_GetLimitCheckValue>
 800ba64:	4603      	mov	r3, r0
 800ba66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d006      	beq.n	800ba7e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800ba70:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800ba72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d202      	bcs.n	800ba7e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ba7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d14a      	bne.n	800bb1c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800ba86:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d103      	bne.n	800ba96 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800ba8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba90:	22ff      	movs	r2, #255	; 0xff
 800ba92:	701a      	strb	r2, [r3, #0]
 800ba94:	e042      	b.n	800bb1c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800ba96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d007      	beq.n	800baae <VL53L0X_get_pal_range_status+0x272>
 800ba9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800baa2:	2b02      	cmp	r3, #2
 800baa4:	d003      	beq.n	800baae <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800baa6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800baaa:	2b03      	cmp	r3, #3
 800baac:	d103      	bne.n	800bab6 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800baae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bab0:	2205      	movs	r2, #5
 800bab2:	701a      	strb	r2, [r3, #0]
 800bab4:	e032      	b.n	800bb1c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800bab6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800baba:	2b06      	cmp	r3, #6
 800babc:	d003      	beq.n	800bac6 <VL53L0X_get_pal_range_status+0x28a>
 800babe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bac2:	2b09      	cmp	r3, #9
 800bac4:	d103      	bne.n	800bace <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800bac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac8:	2204      	movs	r2, #4
 800baca:	701a      	strb	r2, [r3, #0]
 800bacc:	e026      	b.n	800bb1c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800bace:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bad2:	2b08      	cmp	r3, #8
 800bad4:	d007      	beq.n	800bae6 <VL53L0X_get_pal_range_status+0x2aa>
 800bad6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bada:	2b0a      	cmp	r3, #10
 800badc:	d003      	beq.n	800bae6 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800bade:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d103      	bne.n	800baee <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800bae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bae8:	2203      	movs	r2, #3
 800baea:	701a      	strb	r2, [r3, #0]
 800baec:	e016      	b.n	800bb1c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800baee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800baf2:	2b04      	cmp	r3, #4
 800baf4:	d003      	beq.n	800bafe <VL53L0X_get_pal_range_status+0x2c2>
 800baf6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d103      	bne.n	800bb06 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800bafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb00:	2202      	movs	r2, #2
 800bb02:	701a      	strb	r2, [r3, #0]
 800bb04:	e00a      	b.n	800bb1c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800bb06:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d103      	bne.n	800bb16 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800bb0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb10:	2201      	movs	r2, #1
 800bb12:	701a      	strb	r2, [r3, #0]
 800bb14:	e002      	b.n	800bb1c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800bb16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb18:	2200      	movs	r2, #0
 800bb1a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800bb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d102      	bne.n	800bb2a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800bb24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb26:	2200      	movs	r2, #0
 800bb28:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bb2a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800bb2e:	461a      	mov	r2, r3
 800bb30:	2101      	movs	r1, #1
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f7fc fbe0 	bl	80082f8 <VL53L0X_GetLimitCheckEnable>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800bb3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d14f      	bne.n	800bbe6 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800bb46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d003      	beq.n	800bb56 <VL53L0X_get_pal_range_status+0x31a>
 800bb4e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d103      	bne.n	800bb5e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800bb56:	2301      	movs	r3, #1
 800bb58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb5c:	e002      	b.n	800bb64 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bb6a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800bb6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bb72:	2b04      	cmp	r3, #4
 800bb74:	d003      	beq.n	800bb7e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800bb76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d103      	bne.n	800bb86 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb84:	e002      	b.n	800bb8c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bb92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800bb96:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d003      	beq.n	800bba6 <VL53L0X_get_pal_range_status+0x36a>
 800bb9e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d103      	bne.n	800bbae <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800bba6:	2301      	movs	r3, #1
 800bba8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbac:	e002      	b.n	800bbb4 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bbba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800bbbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d003      	beq.n	800bbce <VL53L0X_get_pal_range_status+0x392>
 800bbc6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d103      	bne.n	800bbd6 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbd4:	e002      	b.n	800bbdc <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bbe2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bbe6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3740      	adds	r7, #64	; 0x40
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b086      	sub	sp, #24
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	60f8      	str	r0, [r7, #12]
 800bbfa:	60b9      	str	r1, [r7, #8]
 800bbfc:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800bc02:	2102      	movs	r1, #2
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	f7fe f899 	bl	8009d3c <VL53L0X_get_info_from_device>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800bc0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d11c      	bne.n	800bc50 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800bc1c:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 800bc1e:	7dbb      	ldrb	r3, [r7, #22]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d107      	bne.n	800bc34 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	2200      	movs	r2, #0
 800bc28:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	3340      	adds	r3, #64	; 0x40
 800bc2e:	2200      	movs	r2, #0
 800bc30:	701a      	strb	r2, [r3, #0]
 800bc32:	e00d      	b.n	800bc50 <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	33f3      	adds	r3, #243	; 0xf3
 800bc42:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	3340      	adds	r3, #64	; 0x40
 800bc48:	6939      	ldr	r1, [r7, #16]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 fc02 	bl	800c454 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bc50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3718      	adds	r7, #24
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800bc5c:	b5b0      	push	{r4, r5, r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc66:	2300      	movs	r3, #0
 800bc68:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800bc6a:	f107 030d 	add.w	r3, r7, #13
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7ff ffbd 	bl	800bbf2 <VL53L0X_check_part_used>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800bc7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d13b      	bne.n	800bcfc <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 800bc84:	7b7b      	ldrb	r3, [r7, #13]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d108      	bne.n	800bc9c <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	4a30      	ldr	r2, [pc, #192]	; (800bd50 <VL53L0X_get_device_info+0xf4>)
 800bc8e:	461c      	mov	r4, r3
 800bc90:	4613      	mov	r3, r2
 800bc92:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc94:	6020      	str	r0, [r4, #0]
 800bc96:	6061      	str	r1, [r4, #4]
 800bc98:	60a2      	str	r2, [r4, #8]
 800bc9a:	e027      	b.n	800bcec <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 800bc9c:	7b7b      	ldrb	r3, [r7, #13]
 800bc9e:	2b22      	cmp	r3, #34	; 0x22
 800bca0:	d80b      	bhi.n	800bcba <VL53L0X_get_device_info+0x5e>
 800bca2:	7b7b      	ldrb	r3, [r7, #13]
 800bca4:	2b20      	cmp	r3, #32
 800bca6:	d008      	beq.n	800bcba <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	4a2a      	ldr	r2, [pc, #168]	; (800bd54 <VL53L0X_get_device_info+0xf8>)
 800bcac:	461c      	mov	r4, r3
 800bcae:	4613      	mov	r3, r2
 800bcb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bcb2:	6020      	str	r0, [r4, #0]
 800bcb4:	6061      	str	r1, [r4, #4]
 800bcb6:	60a2      	str	r2, [r4, #8]
 800bcb8:	e018      	b.n	800bcec <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800bcba:	7b7b      	ldrb	r3, [r7, #13]
 800bcbc:	2b26      	cmp	r3, #38	; 0x26
 800bcbe:	d808      	bhi.n	800bcd2 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	4a25      	ldr	r2, [pc, #148]	; (800bd58 <VL53L0X_get_device_info+0xfc>)
 800bcc4:	461c      	mov	r4, r3
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bcca:	6020      	str	r0, [r4, #0]
 800bccc:	6061      	str	r1, [r4, #4]
 800bcce:	60a2      	str	r2, [r4, #8]
 800bcd0:	e00c      	b.n	800bcec <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	4a21      	ldr	r2, [pc, #132]	; (800bd5c <VL53L0X_get_device_info+0x100>)
 800bcd6:	461d      	mov	r5, r3
 800bcd8:	4614      	mov	r4, r2
 800bcda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bcdc:	6028      	str	r0, [r5, #0]
 800bcde:	6069      	str	r1, [r5, #4]
 800bce0:	60aa      	str	r2, [r5, #8]
 800bce2:	60eb      	str	r3, [r5, #12]
 800bce4:	6820      	ldr	r0, [r4, #0]
 800bce6:	6128      	str	r0, [r5, #16]
 800bce8:	7923      	ldrb	r3, [r4, #4]
 800bcea:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	3320      	adds	r3, #32
 800bcf0:	491b      	ldr	r1, [pc, #108]	; (800bd60 <VL53L0X_get_device_info+0x104>)
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	cb03      	ldmia	r3!, {r0, r1}
 800bcf8:	6010      	str	r0, [r2, #0]
 800bcfa:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bcfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d108      	bne.n	800bd16 <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	3360      	adds	r3, #96	; 0x60
 800bd08:	461a      	mov	r2, r3
 800bd0a:	21c0      	movs	r1, #192	; 0xc0
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 f98f 	bl	800c030 <VL53L0X_RdByte>
 800bd12:	4603      	mov	r3, r0
 800bd14:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bd16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d112      	bne.n	800bd44 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800bd1e:	f107 030e 	add.w	r3, r7, #14
 800bd22:	461a      	mov	r2, r3
 800bd24:	21c2      	movs	r1, #194	; 0xc2
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 f982 	bl	800c030 <VL53L0X_RdByte>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	2201      	movs	r2, #1
 800bd34:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800bd38:	7bbb      	ldrb	r3, [r7, #14]
 800bd3a:	091b      	lsrs	r3, r3, #4
 800bd3c:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 800bd44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bdb0      	pop	{r4, r5, r7, pc}
 800bd50:	0800c47c 	.word	0x0800c47c
 800bd54:	0800c488 	.word	0x0800c488
 800bd58:	0800c494 	.word	0x0800c494
 800bd5c:	0800c4a0 	.word	0x0800c4a0
 800bd60:	0800c4b8 	.word	0x0800c4b8

0800bd64 <vl53l0x_init>:
#include "vl53l0x_init.h"

//ContinuousRanging
VL53L0X_Error vl53l0x_init(VL53L0X_DEV pMyDevice, VL53L0X_Version_t *pVersion, VL53L0X_DeviceInfo_t *pDeviceInfo, uint8_t address){
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b088      	sub	sp, #32
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
 800bd70:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd72:	2300      	movs	r3, #0
 800bd74:	77fb      	strb	r3, [r7, #31]
    
	int32_t status_int;

    status_int = VL53L0X_GetVersion(pVersion);
 800bd76:	68b8      	ldr	r0, [r7, #8]
 800bd78:	f7fb fc1e 	bl	80075b8 <VL53L0X_GetVersion>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	61bb      	str	r3, [r7, #24]
    if (status_int != 0){
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d001      	beq.n	800bd8a <vl53l0x_init+0x26>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bd86:	23ec      	movs	r3, #236	; 0xec
 800bd88:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800bd8a:	200a      	movs	r0, #10
 800bd8c:	f7f8 fae0 	bl	8004350 <HAL_Delay>


    if(Status == VL53L0X_ERROR_NONE){
 800bd90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d104      	bne.n	800bda2 <vl53l0x_init+0x3e>
    	Status = VL53L0X_DataInit(pMyDevice); // Data initialization
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f7fb fc65 	bl	8007668 <VL53L0X_DataInit>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800bda2:	200a      	movs	r0, #10
 800bda4:	f7f8 fad4 	bl	8004350 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800bda8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10d      	bne.n	800bdcc <vl53l0x_init+0x68>
    	HAL_Delay(10);
 800bdb0:	200a      	movs	r0, #10
 800bdb2:	f7f8 facd 	bl	8004350 <HAL_Delay>
    	Status = VL53L0X_SetDeviceAddress(pMyDevice, address);
 800bdb6:	78fb      	ldrb	r3, [r7, #3]
 800bdb8:	4619      	mov	r1, r3
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f7fb fc3c 	bl	8007638 <VL53L0X_SetDeviceAddress>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	77fb      	strb	r3, [r7, #31]
    	pMyDevice->I2cDevAddr = address;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	78fa      	ldrb	r2, [r7, #3]
 800bdc8:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    }
    HAL_Delay(10);
 800bdcc:	200a      	movs	r0, #10
 800bdce:	f7f8 fabf 	bl	8004350 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800bdd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d105      	bne.n	800bde6 <vl53l0x_init+0x82>
    	Status = VL53L0X_GetDeviceInfo(pMyDevice, pDeviceInfo);
 800bdda:	6879      	ldr	r1, [r7, #4]
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f7fb fc05 	bl	80075ec <VL53L0X_GetDeviceInfo>
 800bde2:	4603      	mov	r3, r0
 800bde4:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800bde6:	200a      	movs	r0, #10
 800bde8:	f7f8 fab2 	bl	8004350 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800bdec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d104      	bne.n	800bdfe <vl53l0x_init+0x9a>
        Status = VL53L0X_StaticInit(pMyDevice); // Device Initialization
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f7fb fd41 	bl	800787c <VL53L0X_StaticInit>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800bdfe:	200a      	movs	r0, #10
 800be00:	f7f8 faa6 	bl	8004350 <HAL_Delay>
    uint32_t refSpadCount;
    uint8_t isApertureSpads;
    uint8_t VhvSettings;
    uint8_t PhaseCal;

    if(Status == VL53L0X_ERROR_NONE){
 800be04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d109      	bne.n	800be20 <vl53l0x_init+0xbc>
    	Status = VL53L0X_PerformRefCalibration(pMyDevice, &VhvSettings, &PhaseCal); // Device Initialization
 800be0c:	f107 0211 	add.w	r2, r7, #17
 800be10:	f107 0312 	add.w	r3, r7, #18
 800be14:	4619      	mov	r1, r3
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f7fc fbe6 	bl	80085e8 <VL53L0X_PerformRefCalibration>
 800be1c:	4603      	mov	r3, r0
 800be1e:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800be20:	200a      	movs	r0, #10
 800be22:	f7f8 fa95 	bl	8004350 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800be26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d109      	bne.n	800be42 <vl53l0x_init+0xde>
    	Status = VL53L0X_PerformRefSpadManagement(pMyDevice, &refSpadCount, &isApertureSpads); // Device Initialization
 800be2e:	f107 0213 	add.w	r2, r7, #19
 800be32:	f107 0314 	add.w	r3, r7, #20
 800be36:	4619      	mov	r1, r3
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f7fd f82d 	bl	8008e98 <VL53L0X_PerformRefSpadManagement>
 800be3e:	4603      	mov	r3, r0
 800be40:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800be42:	200a      	movs	r0, #10
 800be44:	f7f8 fa84 	bl	8004350 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800be48:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d105      	bne.n	800be5c <vl53l0x_init+0xf8>
        Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING); // Setup in single ranging mode
 800be50:	2101      	movs	r1, #1
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f7fb ff24 	bl	8007ca0 <VL53L0X_SetDeviceMode>
 800be58:	4603      	mov	r3, r0
 800be5a:	77fb      	strb	r3, [r7, #31]
    }
    if (Status == VL53L0X_ERROR_NONE) {
 800be5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d106      	bne.n	800be72 <vl53l0x_init+0x10e>
            Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 800be64:	2201      	movs	r2, #1
 800be66:	2100      	movs	r1, #0
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f7fc f9b9 	bl	80081e0 <VL53L0X_SetLimitCheckEnable>
 800be6e:	4603      	mov	r3, r0
 800be70:	77fb      	strb	r3, [r7, #31]
            		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
    }
    if (Status == VL53L0X_ERROR_NONE) {
 800be72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d106      	bne.n	800be88 <vl53l0x_init+0x124>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 800be7a:	2201      	movs	r2, #1
 800be7c:	2101      	movs	r1, #1
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f7fc f9ae 	bl	80081e0 <VL53L0X_SetLimitCheckEnable>
 800be84:	4603      	mov	r3, r0
 800be86:	77fb      	strb	r3, [r7, #31]
        		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
    }
    if (Status == VL53L0X_ERROR_NONE) {
 800be88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d107      	bne.n	800bea0 <vl53l0x_init+0x13c>
        Status = VL53L0X_SetLimitCheckValue(pMyDevice,
 800be90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800be94:	2101      	movs	r1, #1
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	f7fc fa50 	bl	800833c <VL53L0X_SetLimitCheckValue>
 800be9c:	4603      	mov	r3, r0
 800be9e:	77fb      	strb	r3, [r7, #31]
        		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
        		(FixPoint1616_t)(0.25*65536));
    }
    if (Status == VL53L0X_ERROR_NONE) {
 800bea0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d107      	bne.n	800beb8 <vl53l0x_init+0x154>
        Status = VL53L0X_SetLimitCheckValue(pMyDevice,
 800bea8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800beac:	2100      	movs	r1, #0
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f7fc fa44 	bl	800833c <VL53L0X_SetLimitCheckValue>
 800beb4:	4603      	mov	r3, r0
 800beb6:	77fb      	strb	r3, [r7, #31]
        		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
        		(FixPoint1616_t)(32*65536));
    }
    if(Status == VL53L0X_ERROR_NONE){
 800beb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d106      	bne.n	800bece <vl53l0x_init+0x16a>
    	Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pMyDevice, 30000);
 800bec0:	f247 5130 	movw	r1, #30000	; 0x7530
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f7fb ff46 	bl	8007d56 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800beca:	4603      	mov	r3, r0
 800becc:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800bece:	200a      	movs	r0, #10
 800bed0:	f7f8 fa3e 	bl	8004350 <HAL_Delay>
    if(Status == VL53L0X_ERROR_NONE){
 800bed4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d104      	bne.n	800bee6 <vl53l0x_init+0x182>
    	Status = VL53L0X_StartMeasurement(pMyDevice);
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f7fc fbff 	bl	80086e0 <VL53L0X_StartMeasurement>
 800bee2:	4603      	mov	r3, r0
 800bee4:	77fb      	strb	r3, [r7, #31]
    }
    return Status;
 800bee6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3720      	adds	r7, #32
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <vl53l0x_GetRanging_now>:

VL53L0X_Error vl53l0x_GetRanging_now(VL53L0X_DEV pMyDevice, uint16_t *result) {
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b08c      	sub	sp, #48	; 0x30
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
 800befa:	6039      	str	r1, [r7, #0]
	VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData = &RangingMeasurementData;
 800befc:	f107 030c 	add.w	r3, r7, #12
 800bf00:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf02:	2300      	movs	r3, #0
 800bf04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Status = WaitMeasurementDataReady(pMyDevice);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 f81f 	bl	800bf4c <WaitMeasurementDataReady>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(Status == VL53L0X_ERROR_NONE){
 800bf14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d111      	bne.n	800bf40 <vl53l0x_GetRanging_now+0x4e>
		Status = VL53L0X_GetRangingMeasurementData(pMyDevice, pRangingMeasurementData);
 800bf1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f7fc fcaa 	bl	8008878 <VL53L0X_GetRangingMeasurementData>
 800bf24:	4603      	mov	r3, r0
 800bf26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    *result = pRangingMeasurementData->RangeMilliMeter;
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	891a      	ldrh	r2, [r3, #8]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	801a      	strh	r2, [r3, #0]
		VL53L0X_ClearInterruptMask(pMyDevice, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 800bf32:	2104      	movs	r1, #4
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7fc ff4d 	bl	8008dd4 <VL53L0X_ClearInterruptMask>
	    VL53L0X_PollingDelay(pMyDevice);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 f9f4 	bl	800c328 <VL53L0X_PollingDelay>
	}
	return Status;
 800bf40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3730      	adds	r7, #48	; 0x30
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <WaitMeasurementDataReady>:
    }

    return Status;
}

VL53L0X_Error WaitMeasurementDataReady(VL53L0X_DEV Dev) {
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b086      	sub	sp, #24
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf54:	2300      	movs	r3, #0
 800bf56:	75fb      	strb	r3, [r7, #23]
    uint8_t NewDatReady=0;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	73fb      	strb	r3, [r7, #15]
    uint32_t LoopNb;

    // Wait until it finished
    // use timeout to avoid deadlock
    if (Status == VL53L0X_ERROR_NONE) {
 800bf5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d11e      	bne.n	800bfa2 <WaitMeasurementDataReady+0x56>
        LoopNb = 0;
 800bf64:	2300      	movs	r3, #0
 800bf66:	613b      	str	r3, [r7, #16]
        do {
            Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDatReady);
 800bf68:	f107 030f 	add.w	r3, r7, #15
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7fc fc42 	bl	80087f8 <VL53L0X_GetMeasurementDataReady>
 800bf74:	4603      	mov	r3, r0
 800bf76:	75fb      	strb	r3, [r7, #23]
            if ((NewDatReady == 0x01) || Status != VL53L0X_ERROR_NONE) {
 800bf78:	7bfb      	ldrb	r3, [r7, #15]
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d00c      	beq.n	800bf98 <WaitMeasurementDataReady+0x4c>
 800bf7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d108      	bne.n	800bf98 <WaitMeasurementDataReady+0x4c>
                break;
            }
            LoopNb = LoopNb + 1;
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	613b      	str	r3, [r7, #16]
            VL53L0X_PollingDelay(Dev);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 f9cb 	bl	800c328 <VL53L0X_PollingDelay>
        } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	2bc7      	cmp	r3, #199	; 0xc7
 800bf96:	d9e7      	bls.n	800bf68 <WaitMeasurementDataReady+0x1c>

        if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	2bc7      	cmp	r3, #199	; 0xc7
 800bf9c:	d901      	bls.n	800bfa2 <WaitMeasurementDataReady+0x56>
            Status = VL53L0X_ERROR_TIME_OUT;
 800bf9e:	23f9      	movs	r3, #249	; 0xf9
 800bfa0:	75fb      	strb	r3, [r7, #23]
        }
    }

    return Status;
 800bfa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b088      	sub	sp, #32
 800bfb2:	af02      	add	r7, sp, #8
 800bfb4:	60f8      	str	r0, [r7, #12]
 800bfb6:	60b9      	str	r1, [r7, #8]
 800bfb8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	330a      	adds	r3, #10
 800bfbe:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800bfcc:	b299      	uxth	r1, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	f7f8 fe1f 	bl	8004c1c <HAL_I2C_Master_Transmit>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	613b      	str	r3, [r7, #16]
    
    return status;
 800bfe2:	693b      	ldr	r3, [r7, #16]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b088      	sub	sp, #32
 800bff0:	af02      	add	r7, sp, #8
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	330a      	adds	r3, #10
 800bffc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800c00a:	f043 0301 	orr.w	r3, r3, #1
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	b299      	uxth	r1, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	b29a      	uxth	r2, r3
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	4613      	mov	r3, r2
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	f7f8 fefb 	bl	8004e18 <HAL_I2C_Master_Receive>
 800c022:	4603      	mov	r3, r0
 800c024:	613b      	str	r3, [r7, #16]
    
    return status;
 800c026:	693b      	ldr	r3, [r7, #16]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3718      	adds	r7, #24
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800c030:	b580      	push	{r7, lr}
 800c032:	b086      	sub	sp, #24
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	460b      	mov	r3, r1
 800c03a:	607a      	str	r2, [r7, #4]
 800c03c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c03e:	2300      	movs	r3, #0
 800c040:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800c042:	f107 030b 	add.w	r3, r7, #11
 800c046:	2201      	movs	r2, #1
 800c048:	4619      	mov	r1, r3
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f7ff ffaf 	bl	800bfae <_I2CWrite>
 800c050:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d002      	beq.n	800c05e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c058:	23ec      	movs	r3, #236	; 0xec
 800c05a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c05c:	e00c      	b.n	800c078 <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 800c05e:	2201      	movs	r2, #1
 800c060:	6879      	ldr	r1, [r7, #4]
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f7ff ffc2 	bl	800bfec <_I2CRead>
 800c068:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d002      	beq.n	800c076 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c070:	23ec      	movs	r3, #236	; 0xec
 800c072:	75fb      	strb	r3, [r7, #23]
 800c074:	e000      	b.n	800c078 <VL53L0X_RdByte+0x48>
    }
done:
 800c076:	bf00      	nop
    return Status;
 800c078:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3718      	adds	r7, #24
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	607a      	str	r2, [r7, #4]
 800c08e:	603b      	str	r3, [r7, #0]
 800c090:	460b      	mov	r3, r1
 800c092:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c094:	2300      	movs	r3, #0
 800c096:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	2b3f      	cmp	r3, #63	; 0x3f
 800c09c:	d902      	bls.n	800c0a4 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800c09e:	f06f 0303 	mvn.w	r3, #3
 800c0a2:	e016      	b.n	800c0d2 <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 800c0a4:	4a0d      	ldr	r2, [pc, #52]	; (800c0dc <VL53L0X_WriteMulti+0x58>)
 800c0a6:	7afb      	ldrb	r3, [r7, #11]
 800c0a8:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	6879      	ldr	r1, [r7, #4]
 800c0ae:	480c      	ldr	r0, [pc, #48]	; (800c0e0 <VL53L0X_WriteMulti+0x5c>)
 800c0b0:	f000 f9ba 	bl	800c428 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	4908      	ldr	r1, [pc, #32]	; (800c0dc <VL53L0X_WriteMulti+0x58>)
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f7ff ff76 	bl	800bfae <_I2CWrite>
 800c0c2:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d001      	beq.n	800c0ce <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c0ca:	23ec      	movs	r3, #236	; 0xec
 800c0cc:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 800c0ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	20001254 	.word	0x20001254
 800c0e0:	20001255 	.word	0x20001255

0800c0e4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b086      	sub	sp, #24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	607a      	str	r2, [r7, #4]
 800c0ee:	603b      	str	r3, [r7, #0]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 800c0f8:	f107 030b 	add.w	r3, r7, #11
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	4619      	mov	r1, r3
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f7ff ff54 	bl	800bfae <_I2CWrite>
 800c106:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d002      	beq.n	800c114 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c10e:	23ec      	movs	r3, #236	; 0xec
 800c110:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c112:	e00c      	b.n	800c12e <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 800c114:	683a      	ldr	r2, [r7, #0]
 800c116:	6879      	ldr	r1, [r7, #4]
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f7ff ff67 	bl	800bfec <_I2CRead>
 800c11e:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d002      	beq.n	800c12c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c126:	23ec      	movs	r3, #236	; 0xec
 800c128:	75fb      	strb	r3, [r7, #23]
 800c12a:	e000      	b.n	800c12e <VL53L0X_ReadMulti+0x4a>
    }
done:
 800c12c:	bf00      	nop
    return Status;
 800c12e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3718      	adds	r7, #24
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
	...

0800c13c <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	460b      	mov	r3, r1
 800c146:	607a      	str	r2, [r7, #4]
 800c148:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c14a:	2300      	movs	r3, #0
 800c14c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800c14e:	f107 030b 	add.w	r3, r7, #11
 800c152:	2201      	movs	r2, #1
 800c154:	4619      	mov	r1, r3
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	f7ff ff29 	bl	800bfae <_I2CWrite>
 800c15c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d002      	beq.n	800c16a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c164:	23ec      	movs	r3, #236	; 0xec
 800c166:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c168:	e017      	b.n	800c19a <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800c16a:	2202      	movs	r2, #2
 800c16c:	490e      	ldr	r1, [pc, #56]	; (800c1a8 <VL53L0X_RdWord+0x6c>)
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	f7ff ff3c 	bl	800bfec <_I2CRead>
 800c174:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d002      	beq.n	800c182 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c17c:	23ec      	movs	r3, #236	; 0xec
 800c17e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c180:	e00b      	b.n	800c19a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800c182:	4b09      	ldr	r3, [pc, #36]	; (800c1a8 <VL53L0X_RdWord+0x6c>)
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	b29b      	uxth	r3, r3
 800c188:	021b      	lsls	r3, r3, #8
 800c18a:	b29a      	uxth	r2, r3
 800c18c:	4b06      	ldr	r3, [pc, #24]	; (800c1a8 <VL53L0X_RdWord+0x6c>)
 800c18e:	785b      	ldrb	r3, [r3, #1]
 800c190:	b29b      	uxth	r3, r3
 800c192:	4413      	add	r3, r2
 800c194:	b29a      	uxth	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 800c19a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3718      	adds	r7, #24
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	20001254 	.word	0x20001254

0800c1ac <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b086      	sub	sp, #24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	607a      	str	r2, [r7, #4]
 800c1b8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800c1be:	f107 030b 	add.w	r3, r7, #11
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	f7ff fef1 	bl	800bfae <_I2CWrite>
 800c1cc:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d002      	beq.n	800c1da <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c1d4:	23ec      	movs	r3, #236	; 0xec
 800c1d6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c1d8:	e01b      	b.n	800c212 <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800c1da:	2204      	movs	r2, #4
 800c1dc:	4910      	ldr	r1, [pc, #64]	; (800c220 <VL53L0X_RdDWord+0x74>)
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f7ff ff04 	bl	800bfec <_I2CRead>
 800c1e4:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d002      	beq.n	800c1f2 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c1ec:	23ec      	movs	r3, #236	; 0xec
 800c1ee:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c1f0:	e00f      	b.n	800c212 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800c1f2:	4b0b      	ldr	r3, [pc, #44]	; (800c220 <VL53L0X_RdDWord+0x74>)
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	061a      	lsls	r2, r3, #24
 800c1f8:	4b09      	ldr	r3, [pc, #36]	; (800c220 <VL53L0X_RdDWord+0x74>)
 800c1fa:	785b      	ldrb	r3, [r3, #1]
 800c1fc:	041b      	lsls	r3, r3, #16
 800c1fe:	441a      	add	r2, r3
 800c200:	4b07      	ldr	r3, [pc, #28]	; (800c220 <VL53L0X_RdDWord+0x74>)
 800c202:	789b      	ldrb	r3, [r3, #2]
 800c204:	021b      	lsls	r3, r3, #8
 800c206:	4413      	add	r3, r2
 800c208:	4a05      	ldr	r2, [pc, #20]	; (800c220 <VL53L0X_RdDWord+0x74>)
 800c20a:	78d2      	ldrb	r2, [r2, #3]
 800c20c:	441a      	add	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	601a      	str	r2, [r3, #0]

done:
    return Status;
 800c212:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c216:	4618      	mov	r0, r3
 800c218:	3718      	adds	r7, #24
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	20001254 	.word	0x20001254

0800c224 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	460b      	mov	r3, r1
 800c22e:	70fb      	strb	r3, [r7, #3]
 800c230:	4613      	mov	r3, r2
 800c232:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c234:	2300      	movs	r3, #0
 800c236:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800c238:	4a0b      	ldr	r2, [pc, #44]	; (800c268 <VL53L0X_WrByte+0x44>)
 800c23a:	78fb      	ldrb	r3, [r7, #3]
 800c23c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800c23e:	4a0a      	ldr	r2, [pc, #40]	; (800c268 <VL53L0X_WrByte+0x44>)
 800c240:	78bb      	ldrb	r3, [r7, #2]
 800c242:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800c244:	2202      	movs	r2, #2
 800c246:	4908      	ldr	r1, [pc, #32]	; (800c268 <VL53L0X_WrByte+0x44>)
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f7ff feb0 	bl	800bfae <_I2CWrite>
 800c24e:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d001      	beq.n	800c25a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c256:	23ec      	movs	r3, #236	; 0xec
 800c258:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800c25a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	20001254 	.word	0x20001254

0800c26c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	460b      	mov	r3, r1
 800c276:	70fb      	strb	r3, [r7, #3]
 800c278:	4613      	mov	r3, r2
 800c27a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c27c:	2300      	movs	r3, #0
 800c27e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800c280:	4a0e      	ldr	r2, [pc, #56]	; (800c2bc <VL53L0X_WrWord+0x50>)
 800c282:	78fb      	ldrb	r3, [r7, #3]
 800c284:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800c286:	883b      	ldrh	r3, [r7, #0]
 800c288:	0a1b      	lsrs	r3, r3, #8
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	b2da      	uxtb	r2, r3
 800c28e:	4b0b      	ldr	r3, [pc, #44]	; (800c2bc <VL53L0X_WrWord+0x50>)
 800c290:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800c292:	883b      	ldrh	r3, [r7, #0]
 800c294:	b2da      	uxtb	r2, r3
 800c296:	4b09      	ldr	r3, [pc, #36]	; (800c2bc <VL53L0X_WrWord+0x50>)
 800c298:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800c29a:	2203      	movs	r2, #3
 800c29c:	4907      	ldr	r1, [pc, #28]	; (800c2bc <VL53L0X_WrWord+0x50>)
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f7ff fe85 	bl	800bfae <_I2CWrite>
 800c2a4:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d001      	beq.n	800c2b0 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c2ac:	23ec      	movs	r3, #236	; 0xec
 800c2ae:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800c2b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3710      	adds	r7, #16
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	20001254 	.word	0x20001254

0800c2c0 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	4608      	mov	r0, r1
 800c2ca:	4611      	mov	r1, r2
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	70fb      	strb	r3, [r7, #3]
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	70bb      	strb	r3, [r7, #2]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800c2de:	f107 020e 	add.w	r2, r7, #14
 800c2e2:	78fb      	ldrb	r3, [r7, #3]
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7ff fea2 	bl	800c030 <VL53L0X_RdByte>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 800c2f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d110      	bne.n	800c31a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 800c2f8:	7bba      	ldrb	r2, [r7, #14]
 800c2fa:	78bb      	ldrb	r3, [r7, #2]
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	787b      	ldrb	r3, [r7, #1]
 800c302:	4313      	orrs	r3, r2
 800c304:	b2db      	uxtb	r3, r3
 800c306:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800c308:	7bba      	ldrb	r2, [r7, #14]
 800c30a:	78fb      	ldrb	r3, [r7, #3]
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7ff ff88 	bl	800c224 <VL53L0X_WrByte>
 800c314:	4603      	mov	r3, r0
 800c316:	73fb      	strb	r3, [r7, #15]
 800c318:	e000      	b.n	800c31c <VL53L0X_UpdateByte+0x5c>
        goto done;
 800c31a:	bf00      	nop
done:
    return Status;
 800c31c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3710      	adds	r7, #16
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c330:	2300      	movs	r3, #0
 800c332:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800c334:	2002      	movs	r0, #2
 800c336:	f7f8 f80b 	bl	8004350 <HAL_Delay>
    return status;
 800c33a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
	...

0800c348 <round>:
 800c348:	b538      	push	{r3, r4, r5, lr}
 800c34a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c34e:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800c352:	2a13      	cmp	r2, #19
 800c354:	460b      	mov	r3, r1
 800c356:	4684      	mov	ip, r0
 800c358:	468e      	mov	lr, r1
 800c35a:	4604      	mov	r4, r0
 800c35c:	dc20      	bgt.n	800c3a0 <round+0x58>
 800c35e:	2a00      	cmp	r2, #0
 800c360:	db0e      	blt.n	800c380 <round+0x38>
 800c362:	491e      	ldr	r1, [pc, #120]	; (800c3dc <round+0x94>)
 800c364:	4111      	asrs	r1, r2
 800c366:	ea03 0001 	and.w	r0, r3, r1
 800c36a:	4320      	orrs	r0, r4
 800c36c:	d015      	beq.n	800c39a <round+0x52>
 800c36e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c372:	fa43 f202 	asr.w	r2, r3, r2
 800c376:	4496      	add	lr, r2
 800c378:	2400      	movs	r4, #0
 800c37a:	ea2e 0e01 	bic.w	lr, lr, r1
 800c37e:	e00a      	b.n	800c396 <round+0x4e>
 800c380:	3201      	adds	r2, #1
 800c382:	bf14      	ite	ne
 800c384:	2400      	movne	r4, #0
 800c386:	2400      	moveq	r4, #0
 800c388:	f001 4e00 	and.w	lr, r1, #2147483648	; 0x80000000
 800c38c:	bf04      	itt	eq
 800c38e:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
 800c392:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
 800c396:	4673      	mov	r3, lr
 800c398:	46a4      	mov	ip, r4
 800c39a:	4660      	mov	r0, ip
 800c39c:	4619      	mov	r1, r3
 800c39e:	bd38      	pop	{r3, r4, r5, pc}
 800c3a0:	2a33      	cmp	r2, #51	; 0x33
 800c3a2:	dd08      	ble.n	800c3b6 <round+0x6e>
 800c3a4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c3a8:	d1f7      	bne.n	800c39a <round+0x52>
 800c3aa:	4602      	mov	r2, r0
 800c3ac:	f7f4 f8b4 	bl	8000518 <__adddf3>
 800c3b0:	4684      	mov	ip, r0
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	e7f1      	b.n	800c39a <round+0x52>
 800c3b6:	f04f 31ff 	mov.w	r1, #4294967295
 800c3ba:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800c3be:	fa21 f505 	lsr.w	r5, r1, r5
 800c3c2:	4228      	tst	r0, r5
 800c3c4:	d0e9      	beq.n	800c39a <round+0x52>
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800c3cc:	fa03 f202 	lsl.w	r2, r3, r2
 800c3d0:	1884      	adds	r4, r0, r2
 800c3d2:	bf28      	it	cs
 800c3d4:	449e      	addcs	lr, r3
 800c3d6:	ea24 0405 	bic.w	r4, r4, r5
 800c3da:	e7dc      	b.n	800c396 <round+0x4e>
 800c3dc:	000fffff 	.word	0x000fffff

0800c3e0 <__libc_init_array>:
 800c3e0:	b570      	push	{r4, r5, r6, lr}
 800c3e2:	2600      	movs	r6, #0
 800c3e4:	4d0c      	ldr	r5, [pc, #48]	; (800c418 <__libc_init_array+0x38>)
 800c3e6:	4c0d      	ldr	r4, [pc, #52]	; (800c41c <__libc_init_array+0x3c>)
 800c3e8:	1b64      	subs	r4, r4, r5
 800c3ea:	10a4      	asrs	r4, r4, #2
 800c3ec:	42a6      	cmp	r6, r4
 800c3ee:	d109      	bne.n	800c404 <__libc_init_array+0x24>
 800c3f0:	f000 f838 	bl	800c464 <_init>
 800c3f4:	2600      	movs	r6, #0
 800c3f6:	4d0a      	ldr	r5, [pc, #40]	; (800c420 <__libc_init_array+0x40>)
 800c3f8:	4c0a      	ldr	r4, [pc, #40]	; (800c424 <__libc_init_array+0x44>)
 800c3fa:	1b64      	subs	r4, r4, r5
 800c3fc:	10a4      	asrs	r4, r4, #2
 800c3fe:	42a6      	cmp	r6, r4
 800c400:	d105      	bne.n	800c40e <__libc_init_array+0x2e>
 800c402:	bd70      	pop	{r4, r5, r6, pc}
 800c404:	f855 3b04 	ldr.w	r3, [r5], #4
 800c408:	4798      	blx	r3
 800c40a:	3601      	adds	r6, #1
 800c40c:	e7ee      	b.n	800c3ec <__libc_init_array+0xc>
 800c40e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c412:	4798      	blx	r3
 800c414:	3601      	adds	r6, #1
 800c416:	e7f2      	b.n	800c3fe <__libc_init_array+0x1e>
 800c418:	0800c960 	.word	0x0800c960
 800c41c:	0800c960 	.word	0x0800c960
 800c420:	0800c960 	.word	0x0800c960
 800c424:	0800c964 	.word	0x0800c964

0800c428 <memcpy>:
 800c428:	440a      	add	r2, r1
 800c42a:	4291      	cmp	r1, r2
 800c42c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c430:	d100      	bne.n	800c434 <memcpy+0xc>
 800c432:	4770      	bx	lr
 800c434:	b510      	push	{r4, lr}
 800c436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c43a:	4291      	cmp	r1, r2
 800c43c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c440:	d1f9      	bne.n	800c436 <memcpy+0xe>
 800c442:	bd10      	pop	{r4, pc}

0800c444 <memset>:
 800c444:	4603      	mov	r3, r0
 800c446:	4402      	add	r2, r0
 800c448:	4293      	cmp	r3, r2
 800c44a:	d100      	bne.n	800c44e <memset+0xa>
 800c44c:	4770      	bx	lr
 800c44e:	f803 1b01 	strb.w	r1, [r3], #1
 800c452:	e7f9      	b.n	800c448 <memset+0x4>

0800c454 <strcpy>:
 800c454:	4603      	mov	r3, r0
 800c456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c45a:	f803 2b01 	strb.w	r2, [r3], #1
 800c45e:	2a00      	cmp	r2, #0
 800c460:	d1f9      	bne.n	800c456 <strcpy+0x2>
 800c462:	4770      	bx	lr

0800c464 <_init>:
 800c464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c466:	bf00      	nop
 800c468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c46a:	bc08      	pop	{r3}
 800c46c:	469e      	mov	lr, r3
 800c46e:	4770      	bx	lr

0800c470 <_fini>:
 800c470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c472:	bf00      	nop
 800c474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c476:	bc08      	pop	{r3}
 800c478:	469e      	mov	lr, r3
 800c47a:	4770      	bx	lr
