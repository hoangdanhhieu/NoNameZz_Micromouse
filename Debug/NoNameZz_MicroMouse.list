
NoNameZz_MicroMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aeb4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  0800afc4  0800afc4  0001afc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5a4  0800b5a4  0002033c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b5a4  0800b5a4  0002033c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b5a4  0800b5a4  0002033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5a4  0800b5a4  0001b5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5a8  0800b5a8  0001b5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0800b5ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e20  2000033c  0800b8e8  0002033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000115c  0800b8e8  0002115c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afc1  00000000  00000000  00020365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b26  00000000  00000000  0003b326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0003de50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  0003f318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bea  00000000  00000000  000406f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168f9  00000000  00000000  000442e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095d8b  00000000  00000000  0005abdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  000f0966  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000600c  00000000  00000000  000f09b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000033c 	.word	0x2000033c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800afac 	.word	0x0800afac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000340 	.word	0x20000340
 800014c:	0800afac 	.word	0x0800afac

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2uiz>:
 800093c:	004a      	lsls	r2, r1, #1
 800093e:	d211      	bcs.n	8000964 <__aeabi_d2uiz+0x28>
 8000940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000944:	d211      	bcs.n	800096a <__aeabi_d2uiz+0x2e>
 8000946:	d50d      	bpl.n	8000964 <__aeabi_d2uiz+0x28>
 8000948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800094c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000950:	d40e      	bmi.n	8000970 <__aeabi_d2uiz+0x34>
 8000952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800095a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800095e:	fa23 f002 	lsr.w	r0, r3, r2
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800096e:	d102      	bne.n	8000976 <__aeabi_d2uiz+0x3a>
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	4770      	bx	lr
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	4770      	bx	lr

0800097c <sensor_init>:
VL53L0X_Version_t *pVersion[n_vl53l0x];
VL53L0X_DeviceInfo_t DeviceInfo[n_vl53l0x];



void sensor_init(){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 8000982:	2200      	movs	r2, #0
 8000984:	217e      	movs	r1, #126	; 0x7e
 8000986:	4840      	ldr	r0, [pc, #256]	; (8000a88 <sensor_init+0x10c>)
 8000988:	f001 ffa6 	bl	80028d8 <HAL_GPIO_WritePin>
            |xSHUT_4_Pin|xSHUT_5_Pin, GPIO_PIN_RESET);
	HAL_Delay(100);
 800098c:	2064      	movs	r0, #100	; 0x64
 800098e:	f001 fcbb 	bl	8002308 <HAL_Delay>
	uint8_t addr = 0x54;
 8000992:	2354      	movs	r3, #84	; 0x54
 8000994:	71fb      	strb	r3, [r7, #7]
	for(int i = 0 ; i < n_vl53l0x; i++){
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	e06c      	b.n	8000a76 <sensor_init+0xfa>
		pMyDevice[i] = &MyDevice[i];
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80009a2:	fb02 f303 	mul.w	r3, r2, r3
 80009a6:	4a39      	ldr	r2, [pc, #228]	; (8000a8c <sensor_init+0x110>)
 80009a8:	441a      	add	r2, r3
 80009aa:	4939      	ldr	r1, [pc, #228]	; (8000a90 <sensor_init+0x114>)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		pMyDevice[i]->I2cDevAddr      = 0x52;
 80009b2:	4a37      	ldr	r2, [pc, #220]	; (8000a90 <sensor_init+0x114>)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	2252      	movs	r2, #82	; 0x52
 80009bc:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		pMyDevice[i]->comms_type      =  1;
 80009c0:	4a33      	ldr	r2, [pc, #204]	; (8000a90 <sensor_init+0x114>)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c8:	2201      	movs	r2, #1
 80009ca:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		pMyDevice[i]->comms_speed_khz =  100;
 80009ce:	4a30      	ldr	r2, [pc, #192]	; (8000a90 <sensor_init+0x114>)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d6:	2264      	movs	r2, #100	; 0x64
 80009d8:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
		pMyDevice[i]->I2cHandle = &hi2c1;
 80009dc:	4a2c      	ldr	r2, [pc, #176]	; (8000a90 <sensor_init+0x114>)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e4:	4a2b      	ldr	r2, [pc, #172]	; (8000a94 <sensor_init+0x118>)
 80009e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		pVersion[i] = &Version[i];
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	4a2a      	ldr	r2, [pc, #168]	; (8000a98 <sensor_init+0x11c>)
 80009f0:	441a      	add	r2, r3
 80009f2:	492a      	ldr	r1, [pc, #168]	; (8000a9c <sensor_init+0x120>)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_GPIO_WritePin(GPIOA, ((uint16_t)0x0002) << i, GPIO_PIN_SET);
 80009fa:	2202      	movs	r2, #2
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	2201      	movs	r2, #1
 8000a06:	4619      	mov	r1, r3
 8000a08:	481f      	ldr	r0, [pc, #124]	; (8000a88 <sensor_init+0x10c>)
 8000a0a:	f001 ff65 	bl	80028d8 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000a0e:	200a      	movs	r0, #10
 8000a10:	f001 fc7a 	bl	8002308 <HAL_Delay>
		status_debug = vl53l0x_init(pMyDevice[i], pVersion[i], &DeviceInfo[i], addr);
 8000a14:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <sensor_init+0x114>)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a1c:	4a1f      	ldr	r2, [pc, #124]	; (8000a9c <sensor_init+0x120>)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	4613      	mov	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	4413      	add	r3, r2
 8000a2c:	015a      	lsls	r2, r3, #5
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <sensor_init+0x124>)
 8000a32:	441a      	add	r2, r3
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f009 fabd 	bl	8009fb4 <vl53l0x_init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <sensor_init+0x128>)
 8000a40:	701a      	strb	r2, [r3, #0]
		VL53L0X_SetOffsetCalibrationDataMicroMeter(pMyDevice[i], offset_sensor[i]);
 8000a42:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <sensor_init+0x114>)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a4a:	4917      	ldr	r1, [pc, #92]	; (8000aa8 <sensor_init+0x12c>)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a52:	4619      	mov	r1, r3
 8000a54:	4610      	mov	r0, r2
 8000a56:	f004 fea8 	bl	80057aa <VL53L0X_SetOffsetCalibrationDataMicroMeter>
		HAL_Delay(10);
 8000a5a:	200a      	movs	r0, #10
 8000a5c:	f001 fc54 	bl	8002308 <HAL_Delay>
		addr+=2;
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	3302      	adds	r3, #2
 8000a64:	71fb      	strb	r3, [r7, #7]
		if(status_debug != VL53L0X_ERROR_NONE)
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <sensor_init+0x128>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d106      	bne.n	8000a7e <sensor_init+0x102>
	for(int i = 0 ; i < n_vl53l0x; i++){
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	2b05      	cmp	r3, #5
 8000a7a:	dd8f      	ble.n	800099c <sensor_init+0x20>
			break;
	}
}
 8000a7c:	e000      	b.n	8000a80 <sensor_init+0x104>
			break;
 8000a7e:	bf00      	nop
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40010800 	.word	0x40010800
 8000a8c:	20000520 	.word	0x20000520
 8000a90:	20000e50 	.word	0x20000e50
 8000a94:	20000358 	.word	0x20000358
 8000a98:	20000e68 	.word	0x20000e68
 8000a9c:	20000e98 	.word	0x20000e98
 8000aa0:	20000eb0 	.word	0x20000eb0
 8000aa4:	2000051e 	.word	0x2000051e
 8000aa8:	0800b4cc 	.word	0x0800b4cc
 8000aac:	00000000 	.word	0x00000000

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab6:	f001 fbc5 	bl	8002244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aba:	f000 f933 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abe:	f000 fb3d 	bl	800113c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ac2:	f000 f9a3 	bl	8000e0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ac6:	f000 fa67 	bl	8000f98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000aca:	f000 fab9 	bl	8001040 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000ace:	f000 f96f 	bl	8000db0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000ad2:	f000 fb09 	bl	80010e8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4879      	ldr	r0, [pc, #484]	; (8000cc0 <main+0x210>)
 8000ada:	f003 fc75 	bl	80043c8 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ade:	2104      	movs	r1, #4
 8000ae0:	4877      	ldr	r0, [pc, #476]	; (8000cc0 <main+0x210>)
 8000ae2:	f003 fc71 	bl	80043c8 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	4875      	ldr	r0, [pc, #468]	; (8000cc0 <main+0x210>)
 8000aea:	f003 fc6d 	bl	80043c8 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000aee:	210c      	movs	r1, #12
 8000af0:	4873      	ldr	r0, [pc, #460]	; (8000cc0 <main+0x210>)
 8000af2:	f003 fc69 	bl	80043c8 <HAL_TIM_PWM_Start>
  	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000af6:	213c      	movs	r1, #60	; 0x3c
 8000af8:	4872      	ldr	r0, [pc, #456]	; (8000cc4 <main+0x214>)
 8000afa:	f003 fda9 	bl	8004650 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Base_Start_IT(&htim2);
 8000afe:	4871      	ldr	r0, [pc, #452]	; (8000cc4 <main+0x214>)
 8000b00:	f003 fbb8 	bl	8004274 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000b04:	213c      	movs	r1, #60	; 0x3c
 8000b06:	4870      	ldr	r0, [pc, #448]	; (8000cc8 <main+0x218>)
 8000b08:	f003 fda2 	bl	8004650 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Base_Start_IT(&htim3);
 8000b0c:	486e      	ldr	r0, [pc, #440]	; (8000cc8 <main+0x218>)
 8000b0e:	f003 fbb1 	bl	8004274 <HAL_TIM_Base_Start_IT>
	HAL_Delay(2000);
 8000b12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b16:	f001 fbf7 	bl	8002308 <HAL_Delay>

	Rmode = 0;
 8000b1a:	4b6c      	ldr	r3, [pc, #432]	; (8000ccc <main+0x21c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
	status = 0;
 8000b20:	4b6b      	ldr	r3, [pc, #428]	; (8000cd0 <main+0x220>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 8000b26:	4b66      	ldr	r3, [pc, #408]	; (8000cc0 <main+0x210>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a65      	ldr	r2, [pc, #404]	; (8000cc0 <main+0x210>)
 8000b2c:	68d2      	ldr	r2, [r2, #12]
 8000b2e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 8000b30:	4b63      	ldr	r3, [pc, #396]	; (8000cc0 <main+0x210>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a62      	ldr	r2, [pc, #392]	; (8000cc0 <main+0x210>)
 8000b36:	68d2      	ldr	r2, [r2, #12]
 8000b38:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 8000b3a:	4b61      	ldr	r3, [pc, #388]	; (8000cc0 <main+0x210>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a60      	ldr	r2, [pc, #384]	; (8000cc0 <main+0x210>)
 8000b40:	68d2      	ldr	r2, [r2, #12]
 8000b42:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 8000b44:	4b5e      	ldr	r3, [pc, #376]	; (8000cc0 <main+0x210>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a5d      	ldr	r2, [pc, #372]	; (8000cc0 <main+0x210>)
 8000b4a:	68d2      	ldr	r2, [r2, #12]
 8000b4c:	641a      	str	r2, [r3, #64]	; 0x40
	#if debug == 1
		sprintf((char*)uart_buffer, "uart send data\n");
 8000b4e:	4961      	ldr	r1, [pc, #388]	; (8000cd4 <main+0x224>)
 8000b50:	4861      	ldr	r0, [pc, #388]	; (8000cd8 <main+0x228>)
 8000b52:	f009 fdb7 	bl	800a6c4 <siprintf>
		HAL_UART_Transmit(&huart3, uart_buffer, sizeof (uart_buffer), 10);
 8000b56:	230a      	movs	r3, #10
 8000b58:	2232      	movs	r2, #50	; 0x32
 8000b5a:	495f      	ldr	r1, [pc, #380]	; (8000cd8 <main+0x228>)
 8000b5c:	485f      	ldr	r0, [pc, #380]	; (8000cdc <main+0x22c>)
 8000b5e:	f004 fc78 	bl	8005452 <HAL_UART_Transmit>
	#endif
	HAL_Delay(2000);
 8000b62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b66:	f001 fbcf 	bl	8002308 <HAL_Delay>
	sensor_init();
 8000b6a:	f7ff ff07 	bl	800097c <sensor_init>
	if(status_debug == VL53L0X_ERROR_NONE){
 8000b6e:	4b5c      	ldr	r3, [pc, #368]	; (8000ce0 <main+0x230>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b25b      	sxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d105      	bne.n	8000b84 <main+0xd4>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7e:	4859      	ldr	r0, [pc, #356]	; (8000ce4 <main+0x234>)
 8000b80:	f001 feaa 	bl	80028d8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		#if debug == 1
			c = HAL_GetTick();
 8000b84:	f001 fbb6 	bl	80022f4 <HAL_GetTick>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b56      	ldr	r3, [pc, #344]	; (8000ce8 <main+0x238>)
 8000b8e:	601a      	str	r2, [r3, #0]
			vl53l0x_GetRanging_now(pMyDevice[0], &ts1);
 8000b90:	4b56      	ldr	r3, [pc, #344]	; (8000cec <main+0x23c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4956      	ldr	r1, [pc, #344]	; (8000cf0 <main+0x240>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f009 fad3 	bl	800a142 <vl53l0x_GetRanging_now>
			vl53l0x_GetRanging_now(pMyDevice[1], &ts2);
 8000b9c:	4b53      	ldr	r3, [pc, #332]	; (8000cec <main+0x23c>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	4954      	ldr	r1, [pc, #336]	; (8000cf4 <main+0x244>)
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f009 facd 	bl	800a142 <vl53l0x_GetRanging_now>
			vl53l0x_GetRanging_now(pMyDevice[2], &ts3);
 8000ba8:	4b50      	ldr	r3, [pc, #320]	; (8000cec <main+0x23c>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	4952      	ldr	r1, [pc, #328]	; (8000cf8 <main+0x248>)
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f009 fac7 	bl	800a142 <vl53l0x_GetRanging_now>
			vl53l0x_GetRanging_now(pMyDevice[3], &ts4);
 8000bb4:	4b4d      	ldr	r3, [pc, #308]	; (8000cec <main+0x23c>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	4950      	ldr	r1, [pc, #320]	; (8000cfc <main+0x24c>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f009 fac1 	bl	800a142 <vl53l0x_GetRanging_now>
			vl53l0x_GetRanging_now(pMyDevice[4], &ts5);
 8000bc0:	4b4a      	ldr	r3, [pc, #296]	; (8000cec <main+0x23c>)
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	494e      	ldr	r1, [pc, #312]	; (8000d00 <main+0x250>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f009 fabb 	bl	800a142 <vl53l0x_GetRanging_now>
			vl53l0x_GetRanging_now(pMyDevice[5], &ts6);
 8000bcc:	4b47      	ldr	r3, [pc, #284]	; (8000cec <main+0x23c>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	494c      	ldr	r1, [pc, #304]	; (8000d04 <main+0x254>)
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f009 fab5 	bl	800a142 <vl53l0x_GetRanging_now>
			d = HAL_GetTick();
 8000bd8:	f001 fb8c 	bl	80022f4 <HAL_GetTick>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b49      	ldr	r3, [pc, #292]	; (8000d08 <main+0x258>)
 8000be2:	601a      	str	r2, [r3, #0]
			sprintf((char*)uart_buffer, "%d\n", d - c);
 8000be4:	4b48      	ldr	r3, [pc, #288]	; (8000d08 <main+0x258>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b3f      	ldr	r3, [pc, #252]	; (8000ce8 <main+0x238>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4946      	ldr	r1, [pc, #280]	; (8000d0c <main+0x25c>)
 8000bf2:	4839      	ldr	r0, [pc, #228]	; (8000cd8 <main+0x228>)
 8000bf4:	f009 fd66 	bl	800a6c4 <siprintf>
			HAL_UART_Transmit(&huart3, uart_buffer, sizeof (uart_buffer), 10);
 8000bf8:	230a      	movs	r3, #10
 8000bfa:	2232      	movs	r2, #50	; 0x32
 8000bfc:	4936      	ldr	r1, [pc, #216]	; (8000cd8 <main+0x228>)
 8000bfe:	4837      	ldr	r0, [pc, #220]	; (8000cdc <main+0x22c>)
 8000c00:	f004 fc27 	bl	8005452 <HAL_UART_Transmit>
			a = TIM2->CNT;
 8000c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <main+0x260>)
 8000c0e:	601a      	str	r2, [r3, #0]
			b = TIM3->CNT;
 8000c10:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <main+0x264>)
 8000c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <main+0x268>)
 8000c18:	601a      	str	r2, [r3, #0]
		//	VL53L0X_GetLimitCheckValue(pMyDevice[0], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, &aaaa);
		#endif
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Rmode == 1) {
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <main+0x21c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d12c      	bne.n	8000c7e <main+0x1ce>
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000c24:	2006      	movs	r0, #6
 8000c26:	f001 fcb8 	bl	800259a <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000c2a:	2007      	movs	r0, #7
 8000c2c:	f001 fcb5 	bl	800259a <HAL_NVIC_DisableIRQ>
			HAL_Delay(2000);
 8000c30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c34:	f001 fb68 	bl	8002308 <HAL_Delay>
			///go_straight(300, 0, -1);
			//turnRightHere;
			//turnLeftHere;
			//turn_left90(NULL);
			uint8_t direction;
			go_straight(300, 0, -1);
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	a11e      	add	r1, pc, #120	; (adr r1, 8000cb8 <main+0x208>)
 8000c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c44:	f000 fee0 	bl	8001a08 <go_straight>
			turnRightHere;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4932      	ldr	r1, [pc, #200]	; (8000d1c <main+0x26c>)
 8000c52:	f000 fed9 	bl	8001a08 <go_straight>
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fd85 	bl	8001768 <turn_right90>
 8000c5e:	2303      	movs	r3, #3
 8000c60:	2201      	movs	r2, #1
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	492e      	ldr	r1, [pc, #184]	; (8000d20 <main+0x270>)
 8000c68:	f000 fece 	bl	8001a08 <go_straight>

			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c6c:	2006      	movs	r0, #6
 8000c6e:	f001 fc86 	bl	800257e <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c72:	2007      	movs	r0, #7
 8000c74:	f001 fc83 	bl	800257e <HAL_NVIC_EnableIRQ>
			Rmode = 0;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <main+0x21c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
		}
		if (Rmode == 2) {
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <main+0x21c>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	f47f af7d 	bne.w	8000b84 <main+0xd4>
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000c8a:	2006      	movs	r0, #6
 8000c8c:	f001 fc85 	bl	800259a <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000c90:	2007      	movs	r0, #7
 8000c92:	f001 fc82 	bl	800259a <HAL_NVIC_DisableIRQ>

			HAL_Delay(500);
 8000c96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c9a:	f001 fb35 	bl	8002308 <HAL_Delay>
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c9e:	2006      	movs	r0, #6
 8000ca0:	f001 fc6d 	bl	800257e <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ca4:	2007      	movs	r0, #7
 8000ca6:	f001 fc6a 	bl	800257e <HAL_NVIC_EnableIRQ>
			Rmode = 0;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <main+0x21c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
			c = HAL_GetTick();
 8000cb0:	e768      	b.n	8000b84 <main+0xd4>
 8000cb2:	bf00      	nop
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	00000000 	.word	0x00000000
 8000cbc:	4072c000 	.word	0x4072c000
 8000cc0:	200003ac 	.word	0x200003ac
 8000cc4:	200003f4 	.word	0x200003f4
 8000cc8:	2000043c 	.word	0x2000043c
 8000ccc:	200004cc 	.word	0x200004cc
 8000cd0:	200004cd 	.word	0x200004cd
 8000cd4:	0800afc4 	.word	0x0800afc4
 8000cd8:	200004ec 	.word	0x200004ec
 8000cdc:	20000484 	.word	0x20000484
 8000ce0:	2000051e 	.word	0x2000051e
 8000ce4:	40011000 	.word	0x40011000
 8000ce8:	200004d8 	.word	0x200004d8
 8000cec:	20000e50 	.word	0x20000e50
 8000cf0:	200004e0 	.word	0x200004e0
 8000cf4:	200004e2 	.word	0x200004e2
 8000cf8:	200004e4 	.word	0x200004e4
 8000cfc:	200004e6 	.word	0x200004e6
 8000d00:	200004e8 	.word	0x200004e8
 8000d04:	200004ea 	.word	0x200004ea
 8000d08:	200004dc 	.word	0x200004dc
 8000d0c:	0800afd4 	.word	0x0800afd4
 8000d10:	200004d0 	.word	0x200004d0
 8000d14:	40000400 	.word	0x40000400
 8000d18:	200004d4 	.word	0x200004d4
 8000d1c:	40640000 	.word	0x40640000
 8000d20:	40618000 	.word	0x40618000

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b090      	sub	sp, #64	; 0x40
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	2228      	movs	r2, #40	; 0x28
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f009 fcbe 	bl	800a6b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d54:	2301      	movs	r3, #1
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d62:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d68:	f107 0318 	add.w	r3, r7, #24
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 fe21 	bl	80039b4 <HAL_RCC_OscConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d78:	f000 fa6c 	bl	8001254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d80:	2302      	movs	r3, #2
 8000d82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2102      	movs	r1, #2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 f88e 	bl	8003eb8 <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000da2:	f000 fa57 	bl	8001254 <Error_Handler>
  }
}
 8000da6:	bf00      	nop
 8000da8:	3740      	adds	r7, #64	; 0x40
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_I2C1_Init+0x50>)
 8000db6:	4a13      	ldr	r2, [pc, #76]	; (8000e04 <MX_I2C1_Init+0x54>)
 8000db8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_I2C1_Init+0x50>)
 8000dbc:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <MX_I2C1_Init+0x58>)
 8000dbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_I2C1_Init+0x50>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_I2C1_Init+0x50>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_I2C1_Init+0x50>)
 8000dce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <MX_I2C1_Init+0x50>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_I2C1_Init+0x50>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <MX_I2C1_Init+0x50>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_I2C1_Init+0x50>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_I2C1_Init+0x50>)
 8000dee:	f001 fdad 	bl	800294c <HAL_I2C_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000df8:	f000 fa2c 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000358 	.word	0x20000358
 8000e04:	40005400 	.word	0x40005400
 8000e08:	000186a0 	.word	0x000186a0

08000e0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b096      	sub	sp, #88	; 0x58
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]
 8000e3a:	615a      	str	r2, [r3, #20]
 8000e3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2220      	movs	r2, #32
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f009 fc35 	bl	800a6b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e4a:	4b51      	ldr	r3, [pc, #324]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000e4c:	4a51      	ldr	r2, [pc, #324]	; (8000f94 <MX_TIM1_Init+0x188>)
 8000e4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 399;
 8000e50:	4b4f      	ldr	r3, [pc, #316]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000e52:	f240 128f 	movw	r2, #399	; 0x18f
 8000e56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e58:	4b4d      	ldr	r3, [pc, #308]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000e60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e66:	4b4a      	ldr	r3, [pc, #296]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e6c:	4b48      	ldr	r3, [pc, #288]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e72:	4b47      	ldr	r3, [pc, #284]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e78:	4845      	ldr	r0, [pc, #276]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000e7a:	f003 f9ab 	bl	80041d4 <HAL_TIM_Base_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e84:	f000 f9e6 	bl	8001254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e92:	4619      	mov	r1, r3
 8000e94:	483e      	ldr	r0, [pc, #248]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000e96:	f003 fe33 	bl	8004b00 <HAL_TIM_ConfigClockSource>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ea0:	f000 f9d8 	bl	8001254 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ea4:	483a      	ldr	r0, [pc, #232]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000ea6:	f003 fa37 	bl	8004318 <HAL_TIM_PWM_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000eb0:	f000 f9d0 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4833      	ldr	r0, [pc, #204]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000ec4:	f004 f9b4 	bl	8005230 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000ece:	f000 f9c1 	bl	8001254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed2:	2360      	movs	r3, #96	; 0x60
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4826      	ldr	r0, [pc, #152]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000ef8:	f003 fd40 	bl	800497c <HAL_TIM_PWM_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000f02:	f000 f9a7 	bl	8001254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4820      	ldr	r0, [pc, #128]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000f10:	f003 fd34 	bl	800497c <HAL_TIM_PWM_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000f1a:	f000 f99b 	bl	8001254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	2208      	movs	r2, #8
 8000f24:	4619      	mov	r1, r3
 8000f26:	481a      	ldr	r0, [pc, #104]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000f28:	f003 fd28 	bl	800497c <HAL_TIM_PWM_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000f32:	f000 f98f 	bl	8001254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4814      	ldr	r0, [pc, #80]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000f40:	f003 fd1c 	bl	800497c <HAL_TIM_PWM_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000f4a:	f000 f983 	bl	8001254 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f66:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4807      	ldr	r0, [pc, #28]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000f72:	f004 f9bb 	bl	80052ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000f7c:	f000 f96a 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <MX_TIM1_Init+0x184>)
 8000f82:	f000 fab5 	bl	80014f0 <HAL_TIM_MspPostInit>

}
 8000f86:	bf00      	nop
 8000f88:	3758      	adds	r7, #88	; 0x58
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200003ac 	.word	0x200003ac
 8000f94:	40012c00 	.word	0x40012c00

08000f98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2224      	movs	r2, #36	; 0x24
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f009 fb84 	bl	800a6b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_TIM2_Init+0xa4>)
 8000fb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <MX_TIM2_Init+0xa4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_TIM2_Init+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_TIM2_Init+0xa4>)
 8000fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_TIM2_Init+0xa4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_TIM2_Init+0xa4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_TIM2_Init+0xa4>)
 8001008:	f003 fa80 	bl	800450c <HAL_TIM_Encoder_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001012:	f000 f91f 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_TIM2_Init+0xa4>)
 8001024:	f004 f904 	bl	8005230 <HAL_TIMEx_MasterConfigSynchronization>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800102e:	f000 f911 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3730      	adds	r7, #48	; 0x30
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200003f4 	.word	0x200003f4

08001040 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	; 0x30
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2224      	movs	r2, #36	; 0x24
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f009 fb30 	bl	800a6b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MX_TIM3_Init+0xa0>)
 800105e:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <MX_TIM3_Init+0xa4>)
 8001060:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_TIM3_Init+0xa0>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_TIM3_Init+0xa0>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_TIM3_Init+0xa0>)
 8001070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001074:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_TIM3_Init+0xa0>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_TIM3_Init+0xa0>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001082:	2301      	movs	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800108a:	2301      	movs	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800109a:	2301      	movs	r3, #1
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	4619      	mov	r1, r3
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <MX_TIM3_Init+0xa0>)
 80010ae:	f003 fa2d 	bl	800450c <HAL_TIM_Encoder_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80010b8:	f000 f8cc 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_TIM3_Init+0xa0>)
 80010ca:	f004 f8b1 	bl	8005230 <HAL_TIMEx_MasterConfigSynchronization>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80010d4:	f000 f8be 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3730      	adds	r7, #48	; 0x30
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000043c 	.word	0x2000043c
 80010e4:	40000400 	.word	0x40000400

080010e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_USART3_UART_Init+0x4c>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <MX_USART3_UART_Init+0x50>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_USART3_UART_Init+0x4c>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_USART3_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_USART3_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_USART3_UART_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_USART3_UART_Init+0x4c>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_USART3_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_USART3_UART_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_USART3_UART_Init+0x4c>)
 8001120:	f004 f947 	bl	80053b2 <HAL_UART_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800112a:	f000 f893 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000484 	.word	0x20000484
 8001138:	40004800 	.word	0x40004800

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001150:	4b3b      	ldr	r3, [pc, #236]	; (8001240 <MX_GPIO_Init+0x104>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a3a      	ldr	r2, [pc, #232]	; (8001240 <MX_GPIO_Init+0x104>)
 8001156:	f043 0310 	orr.w	r3, r3, #16
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b38      	ldr	r3, [pc, #224]	; (8001240 <MX_GPIO_Init+0x104>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001168:	4b35      	ldr	r3, [pc, #212]	; (8001240 <MX_GPIO_Init+0x104>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a34      	ldr	r2, [pc, #208]	; (8001240 <MX_GPIO_Init+0x104>)
 800116e:	f043 0320 	orr.w	r3, r3, #32
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <MX_GPIO_Init+0x104>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0320 	and.w	r3, r3, #32
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <MX_GPIO_Init+0x104>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a2e      	ldr	r2, [pc, #184]	; (8001240 <MX_GPIO_Init+0x104>)
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <MX_GPIO_Init+0x104>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <MX_GPIO_Init+0x104>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a28      	ldr	r2, [pc, #160]	; (8001240 <MX_GPIO_Init+0x104>)
 800119e:	f043 0308 	orr.w	r3, r3, #8
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MX_GPIO_Init+0x104>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b6:	4823      	ldr	r0, [pc, #140]	; (8001244 <MX_GPIO_Init+0x108>)
 80011b8:	f001 fb8e 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 80011bc:	2200      	movs	r2, #0
 80011be:	217e      	movs	r1, #126	; 0x7e
 80011c0:	4821      	ldr	r0, [pc, #132]	; (8001248 <MX_GPIO_Init+0x10c>)
 80011c2:	f001 fb89 	bl	80028d8 <HAL_GPIO_WritePin>
                          |xSHUT_4_Pin|xSHUT_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4619      	mov	r1, r3
 80011de:	4819      	ldr	r0, [pc, #100]	; (8001244 <MX_GPIO_Init+0x108>)
 80011e0:	f001 f9f6 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : xSHUT_0_Pin xSHUT_1_Pin xSHUT_2_Pin xSHUT_3_Pin
                           xSHUT_4_Pin xSHUT_5_Pin */
  GPIO_InitStruct.Pin = xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 80011e4:	237e      	movs	r3, #126	; 0x7e
 80011e6:	613b      	str	r3, [r7, #16]
                          |xSHUT_4_Pin|xSHUT_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	4813      	ldr	r0, [pc, #76]	; (8001248 <MX_GPIO_Init+0x10c>)
 80011fc:	f001 f9e8 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001200:	2303      	movs	r3, #3
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_GPIO_Init+0x110>)
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001208:	2301      	movs	r3, #1
 800120a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4619      	mov	r1, r3
 8001212:	480f      	ldr	r0, [pc, #60]	; (8001250 <MX_GPIO_Init+0x114>)
 8001214:	f001 f9dc 	bl	80025d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	2100      	movs	r1, #0
 800121c:	2006      	movs	r0, #6
 800121e:	f001 f992 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001222:	2006      	movs	r0, #6
 8001224:	f001 f9ab 	bl	800257e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2007      	movs	r0, #7
 800122e:	f001 f98a 	bl	8002546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001232:	2007      	movs	r0, #7
 8001234:	f001 f9a3 	bl	800257e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000
 8001244:	40011000 	.word	0x40011000
 8001248:	40010800 	.word	0x40010800
 800124c:	10210000 	.word	0x10210000
 8001250:	40010c00 	.word	0x40010c00

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
}
 800125a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800125c:	e7fe      	b.n	800125c <Error_Handler+0x8>
	...

08001260 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_MspInit+0x5c>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	4a14      	ldr	r2, [pc, #80]	; (80012bc <HAL_MspInit+0x5c>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6193      	str	r3, [r2, #24]
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_MspInit+0x5c>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_MspInit+0x5c>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <HAL_MspInit+0x5c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <HAL_MspInit+0x5c>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_MspInit+0x60>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_MspInit+0x60>)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010000 	.word	0x40010000

080012c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a15      	ldr	r2, [pc, #84]	; (8001334 <HAL_I2C_MspInit+0x70>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d123      	bne.n	800132c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_I2C_MspInit+0x74>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a13      	ldr	r2, [pc, #76]	; (8001338 <HAL_I2C_MspInit+0x74>)
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_I2C_MspInit+0x74>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012fc:	23c0      	movs	r3, #192	; 0xc0
 80012fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001300:	2312      	movs	r3, #18
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4619      	mov	r1, r3
 800130e:	480b      	ldr	r0, [pc, #44]	; (800133c <HAL_I2C_MspInit+0x78>)
 8001310:	f001 f95e 	bl	80025d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_I2C_MspInit+0x74>)
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_I2C_MspInit+0x74>)
 800131a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800131e:	61d3      	str	r3, [r2, #28]
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_I2C_MspInit+0x74>)
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40005400 	.word	0x40005400
 8001338:	40021000 	.word	0x40021000
 800133c:	40010c00 	.word	0x40010c00

08001340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a09      	ldr	r2, [pc, #36]	; (8001374 <HAL_TIM_Base_MspInit+0x34>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d10b      	bne.n	800136a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_TIM_Base_MspInit+0x38>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_TIM_Base_MspInit+0x38>)
 8001358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800135c:	6193      	str	r3, [r2, #24]
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_TIM_Base_MspInit+0x38>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40012c00 	.word	0x40012c00
 8001378:	40021000 	.word	0x40021000

0800137c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0320 	add.w	r3, r7, #32
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800139a:	d157      	bne.n	800144c <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800139c:	4b4f      	ldr	r3, [pc, #316]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	4a4e      	ldr	r2, [pc, #312]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	61d3      	str	r3, [r2, #28]
 80013a8:	4b4c      	ldr	r3, [pc, #304]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b49      	ldr	r3, [pc, #292]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a48      	ldr	r2, [pc, #288]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b46      	ldr	r3, [pc, #280]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013cc:	4b43      	ldr	r3, [pc, #268]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a42      	ldr	r2, [pc, #264]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 80013d2:	f043 0308 	orr.w	r3, r3, #8
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b40      	ldr	r3, [pc, #256]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	4619      	mov	r1, r3
 80013f8:	4839      	ldr	r0, [pc, #228]	; (80014e0 <HAL_TIM_Encoder_MspInit+0x164>)
 80013fa:	f001 f8e9 	bl	80025d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013fe:	2308      	movs	r3, #8
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 0320 	add.w	r3, r7, #32
 800140e:	4619      	mov	r1, r3
 8001410:	4834      	ldr	r0, [pc, #208]	; (80014e4 <HAL_TIM_Encoder_MspInit+0x168>)
 8001412:	f001 f8dd 	bl	80025d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001416:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
 800141c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
 8001424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001426:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
 800142c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
 8001434:	4a2c      	ldr	r2, [pc, #176]	; (80014e8 <HAL_TIM_Encoder_MspInit+0x16c>)
 8001436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001438:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	201c      	movs	r0, #28
 8001440:	f001 f881 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001444:	201c      	movs	r0, #28
 8001446:	f001 f89a 	bl	800257e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800144a:	e042      	b.n	80014d2 <HAL_TIM_Encoder_MspInit+0x156>
  else if(htim_encoder->Instance==TIM3)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a26      	ldr	r2, [pc, #152]	; (80014ec <HAL_TIM_Encoder_MspInit+0x170>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d13d      	bne.n	80014d2 <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a20      	ldr	r2, [pc, #128]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	4a1a      	ldr	r2, [pc, #104]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	6193      	str	r3, [r2, #24]
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_TIM_Encoder_MspInit+0x160>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001486:	2330      	movs	r3, #48	; 0x30
 8001488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	4619      	mov	r1, r3
 8001498:	4812      	ldr	r0, [pc, #72]	; (80014e4 <HAL_TIM_Encoder_MspInit+0x168>)
 800149a:	f001 f899 	bl	80025d0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_TIM_Encoder_MspInit+0x16c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
 80014a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
 80014ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
 80014b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ba:	637b      	str	r3, [r7, #52]	; 0x34
 80014bc:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <HAL_TIM_Encoder_MspInit+0x16c>)
 80014be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c0:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	201d      	movs	r0, #29
 80014c8:	f001 f83d 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014cc:	201d      	movs	r0, #29
 80014ce:	f001 f856 	bl	800257e <HAL_NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3738      	adds	r7, #56	; 0x38
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40010c00 	.word	0x40010c00
 80014e8:	40010000 	.word	0x40010000
 80014ec:	40000400 	.word	0x40000400

080014f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <HAL_TIM_MspPostInit+0x5c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d118      	bne.n	8001542 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_TIM_MspPostInit+0x60>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <HAL_TIM_MspPostInit+0x60>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_TIM_MspPostInit+0x60>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001528:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800152c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2302      	movs	r3, #2
 8001534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0310 	add.w	r3, r7, #16
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_TIM_MspPostInit+0x64>)
 800153e:	f001 f847 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3720      	adds	r7, #32
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40012c00 	.word	0x40012c00
 8001550:	40021000 	.word	0x40021000
 8001554:	40010800 	.word	0x40010800

08001558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <HAL_UART_MspInit+0x8c>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d131      	bne.n	80015dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_UART_MspInit+0x90>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	4a1a      	ldr	r2, [pc, #104]	; (80015e8 <HAL_UART_MspInit+0x90>)
 800157e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001582:	61d3      	str	r3, [r2, #28]
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_UART_MspInit+0x90>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_UART_MspInit+0x90>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HAL_UART_MspInit+0x90>)
 8001596:	f043 0308 	orr.w	r3, r3, #8
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_UART_MspInit+0x90>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	4619      	mov	r1, r3
 80015bc:	480b      	ldr	r0, [pc, #44]	; (80015ec <HAL_UART_MspInit+0x94>)
 80015be:	f001 f807 	bl	80025d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	4619      	mov	r1, r3
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <HAL_UART_MspInit+0x94>)
 80015d8:	f000 fffa 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015dc:	bf00      	nop
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40004800 	.word	0x40004800
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010c00 	.word	0x40010c00

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80015f4:	e7fe      	b.n	80015f4 <NMI_Handler+0x4>

080015f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <MemManage_Handler+0x4>

08001602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler+0x4>

08001608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <UsageFault_Handler+0x4>

0800160e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr

0800161a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001636:	f000 fe4b 	bl	80022d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001644:	2001      	movs	r0, #1
 8001646:	f001 f95f 	bl	8002908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	Rmode = 2;
 800164a:	4b02      	ldr	r3, [pc, #8]	; (8001654 <EXTI0_IRQHandler+0x14>)
 800164c:	2202      	movs	r2, #2
 800164e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200004cc 	.word	0x200004cc

08001658 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800165c:	2002      	movs	r0, #2
 800165e:	f001 f953 	bl	8002908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	Rmode = 1;
 8001662:	4b02      	ldr	r3, [pc, #8]	; (800166c <EXTI1_IRQHandler+0x14>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200004cc 	.word	0x200004cc

08001670 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <TIM2_IRQHandler+0x38>)
 8001676:	f003 f879 	bl	800476c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if(status == turn_right_90 || status == turn_right_45 || status == u_turn){
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <TIM2_IRQHandler+0x3c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b25b      	sxtb	r3, r3
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d00b      	beq.n	800169e <TIM2_IRQHandler+0x2e>
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <TIM2_IRQHandler+0x3c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b25b      	sxtb	r3, r3
 800168c:	f113 0f02 	cmn.w	r3, #2
 8001690:	d005      	beq.n	800169e <TIM2_IRQHandler+0x2e>
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <TIM2_IRQHandler+0x3c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b25b      	sxtb	r3, r3
 8001698:	f113 0f05 	cmn.w	r3, #5
 800169c:	d102      	bne.n	80016a4 <TIM2_IRQHandler+0x34>
	  status = 0;
 800169e:	4b03      	ldr	r3, [pc, #12]	; (80016ac <TIM2_IRQHandler+0x3c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200003f4 	.word	0x200003f4
 80016ac:	200004cd 	.word	0x200004cd

080016b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <TIM3_IRQHandler+0x38>)
 80016b6:	f003 f859 	bl	800476c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(status == turn_left_90 || status == turn_left_45 || status == straight){
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <TIM3_IRQHandler+0x3c>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	f113 0f04 	cmn.w	r3, #4
 80016c4:	d00b      	beq.n	80016de <TIM3_IRQHandler+0x2e>
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <TIM3_IRQHandler+0x3c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	f113 0f03 	cmn.w	r3, #3
 80016d0:	d005      	beq.n	80016de <TIM3_IRQHandler+0x2e>
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <TIM3_IRQHandler+0x3c>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	f113 0f06 	cmn.w	r3, #6
 80016dc:	d102      	bne.n	80016e4 <TIM3_IRQHandler+0x34>
	  status = 0;
 80016de:	4b03      	ldr	r3, [pc, #12]	; (80016ec <TIM3_IRQHandler+0x3c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000043c 	.word	0x2000043c
 80016ec:	200004cd 	.word	0x200004cd

080016f0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <_sbrk+0x5c>)
	        - (uint32_t) &_Min_Stack_Size;
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
		errno = ENOMEM;
 8001720:	f008 ff90 	bl	800a644 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20005000 	.word	0x20005000
 8001750:	00000400 	.word	0x00000400
 8001754:	20001104 	.word	0x20001104
 8001758:	20001160 	.word	0x20001160

0800175c <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <turn_right90>:
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);

}

void turn_right90(uint8_t *direction) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d81b      	bhi.n	80017b0 <turn_right90+0x48>
 8001778:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <turn_right90+0x18>)
 800177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177e:	bf00      	nop
 8001780:	08001791 	.word	0x08001791
 8001784:	08001799 	.word	0x08001799
 8001788:	080017a1 	.word	0x080017a1
 800178c:	080017a9 	.word	0x080017a9
		case west:  *direction = north; break;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2202      	movs	r2, #2
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e00b      	b.n	80017b0 <turn_right90+0x48>
		case east:  *direction = south; break;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2203      	movs	r2, #3
 800179c:	701a      	strb	r2, [r3, #0]
 800179e:	e007      	b.n	80017b0 <turn_right90+0x48>
		case north: *direction = east;  break;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
 80017a6:	e003      	b.n	80017b0 <turn_right90+0x48>
		case south: *direction = west;  break;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	bf00      	nop
	}

	#if debug == 1
	sprintf((char*)uart_buffer, "turn_right90\n");
 80017b0:	4989      	ldr	r1, [pc, #548]	; (80019d8 <turn_right90+0x270>)
 80017b2:	488a      	ldr	r0, [pc, #552]	; (80019dc <turn_right90+0x274>)
 80017b4:	f008 ff86 	bl	800a6c4 <siprintf>
	HAL_UART_Transmit(&huart3, uart_buffer, sizeof(uart_buffer), 10);
 80017b8:	230a      	movs	r3, #10
 80017ba:	2232      	movs	r2, #50	; 0x32
 80017bc:	4987      	ldr	r1, [pc, #540]	; (80019dc <turn_right90+0x274>)
 80017be:	4888      	ldr	r0, [pc, #544]	; (80019e0 <turn_right90+0x278>)
 80017c0:	f003 fe47 	bl	8005452 <HAL_UART_Transmit>
	#endif

	if(__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) != htim1.Init.Period ||
 80017c4:	4b87      	ldr	r3, [pc, #540]	; (80019e4 <turn_right90+0x27c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ca:	4b86      	ldr	r3, [pc, #536]	; (80019e4 <turn_right90+0x27c>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d106      	bne.n	80017e0 <turn_right90+0x78>
		__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2) != htim1.Init.Period){
 80017d2:	4b84      	ldr	r3, [pc, #528]	; (80019e4 <turn_right90+0x27c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017d8:	4b82      	ldr	r3, [pc, #520]	; (80019e4 <turn_right90+0x27c>)
 80017da:	68db      	ldr	r3, [r3, #12]
	if(__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) != htim1.Init.Period ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d017      	beq.n	8001810 <turn_right90+0xa8>
		running_right_motor(1, 650);
 80017e0:	4b80      	ldr	r3, [pc, #512]	; (80019e4 <turn_right90+0x27c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2200      	movs	r2, #0
 80017e6:	635a      	str	r2, [r3, #52]	; 0x34
 80017e8:	4b7e      	ldr	r3, [pc, #504]	; (80019e4 <turn_right90+0x27c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f240 228a 	movw	r2, #650	; 0x28a
 80017f0:	639a      	str	r2, [r3, #56]	; 0x38
		running_left_motor(1, 650);
 80017f2:	4b7c      	ldr	r3, [pc, #496]	; (80019e4 <turn_right90+0x27c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f240 228a 	movw	r2, #650	; 0x28a
 80017fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80017fc:	4b79      	ldr	r3, [pc, #484]	; (80019e4 <turn_right90+0x27c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2200      	movs	r2, #0
 8001802:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(50);
 8001804:	2032      	movs	r0, #50	; 0x32
 8001806:	f000 fd7f 	bl	8002308 <HAL_Delay>
		brake(2);
 800180a:	2002      	movs	r0, #2
 800180c:	f000 fcb8 	bl	8002180 <brake>
	}
	uint16_t last = 10;
 8001810:	230a      	movs	r3, #10
 8001812:	82fb      	strh	r3, [r7, #22]
	while(last != TIM2->CNT){
 8001814:	e006      	b.n	8001824 <turn_right90+0xbc>
		last = TIM2->CNT;
 8001816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	82fb      	strh	r3, [r7, #22]
		HAL_Delay(20);
 800181e:	2014      	movs	r0, #20
 8001820:	f000 fd72 	bl	8002308 <HAL_Delay>
	while(last != TIM2->CNT){
 8001824:	8afa      	ldrh	r2, [r7, #22]
 8001826:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	429a      	cmp	r2, r3
 800182e:	d1f2      	bne.n	8001816 <turn_right90+0xae>
	}
	uint16_t en = round(turn90_arc_en)/2 + 450;
 8001830:	a365      	add	r3, pc, #404	; (adr r3, 80019c8 <turn_right90+0x260>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f008 feb7 	bl	800a5ac <round>
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001846:	f7fe ff69 	bl	800071c <__aeabi_ddiv>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	a35f      	add	r3, pc, #380	; (adr r3, 80019d0 <turn_right90+0x268>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	f7fe fc80 	bl	800015c <__adddf3>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f7ff f86a 	bl	800093c <__aeabi_d2uiz>
 8001868:	4603      	mov	r3, r0
 800186a:	82bb      	strh	r3, [r7, #20]
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 800186c:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <turn_right90+0x280>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
 8001876:	4b5c      	ldr	r3, [pc, #368]	; (80019e8 <turn_right90+0x280>)
 8001878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 800187e:	4b5b      	ldr	r3, [pc, #364]	; (80019ec <turn_right90+0x284>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
 8001888:	4b58      	ldr	r3, [pc, #352]	; (80019ec <turn_right90+0x284>)
 800188a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800188e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim2, 500);
 8001890:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <turn_right90+0x280>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 10000);
 800189a:	4b54      	ldr	r3, [pc, #336]	; (80019ec <turn_right90+0x284>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f242 7210 	movw	r2, #10000	; 0x2710
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, en);
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <turn_right90+0x280>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	8aba      	ldrh	r2, [r7, #20]
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ac:	8abb      	ldrh	r3, [r7, #20]
 80018ae:	4a4e      	ldr	r2, [pc, #312]	; (80019e8 <turn_right90+0x280>)
 80018b0:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 80018b2:	4b4e      	ldr	r3, [pc, #312]	; (80019ec <turn_right90+0x284>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80018bc:	4b4b      	ldr	r3, [pc, #300]	; (80019ec <turn_right90+0x284>)
 80018be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c2:	60da      	str	r2, [r3, #12]
	status = turn_right_90;
 80018c4:	4b4a      	ldr	r3, [pc, #296]	; (80019f0 <turn_right90+0x288>)
 80018c6:	22ff      	movs	r2, #255	; 0xff
 80018c8:	701a      	strb	r2, [r3, #0]
	uint16_t speed = 400;
 80018ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80018ce:	827b      	strh	r3, [r7, #18]
	int32_t P;

	TIM1->CCR3 = 0;
 80018d0:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <turn_right90+0x28c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 150;
 80018d6:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <turn_right90+0x28c>)
 80018d8:	2296      	movs	r2, #150	; 0x96
 80018da:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->CCR1 = 0;
 80018dc:	4b45      	ldr	r3, [pc, #276]	; (80019f4 <turn_right90+0x28c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 150;
 80018e2:	4b44      	ldr	r3, [pc, #272]	; (80019f4 <turn_right90+0x28c>)
 80018e4:	2296      	movs	r2, #150	; 0x96
 80018e6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(100);
 80018e8:	2064      	movs	r0, #100	; 0x64
 80018ea:	f000 fd0d 	bl	8002308 <HAL_Delay>

	while(status != 0){
 80018ee:	e02e      	b.n	800194e <turn_right90+0x1e6>
		P = ((int32_t)(10000 - TIM3->CNT) - ((int32_t)TIM2->CNT - 500)) * 5;
 80018f0:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <turn_right90+0x290>)
 80018f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	441a      	add	r2, r3
 80018fc:	4613      	mov	r3, r2
 80018fe:	079b      	lsls	r3, r3, #30
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800190a:	3314      	adds	r3, #20
 800190c:	60fb      	str	r3, [r7, #12]
		TIM1->CCR3 = 0;
 800190e:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <turn_right90+0x28c>)
 8001910:	2200      	movs	r2, #0
 8001912:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = speed + P;
 8001914:	8a7a      	ldrh	r2, [r7, #18]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	441a      	add	r2, r3
 800191a:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <turn_right90+0x28c>)
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR1 = 0;
 800191e:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <turn_right90+0x28c>)
 8001920:	2200      	movs	r2, #0
 8001922:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = speed - P;
 8001924:	8a7a      	ldrh	r2, [r7, #18]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad2      	subs	r2, r2, r3
 800192a:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <turn_right90+0x28c>)
 800192c:	639a      	str	r2, [r3, #56]	; 0x38
		#if debug == 1
		a = (TIM2->CNT - 500);
 800192e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001938:	461a      	mov	r2, r3
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <turn_right90+0x294>)
 800193c:	601a      	str	r2, [r3, #0]
		b = (10000 - TIM3->CNT);
 800193e:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <turn_right90+0x290>)
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001946:	3310      	adds	r3, #16
 8001948:	461a      	mov	r2, r3
 800194a:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <turn_right90+0x298>)
 800194c:	601a      	str	r2, [r3, #0]
	while(status != 0){
 800194e:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <turn_right90+0x288>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	b25b      	sxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1cb      	bne.n	80018f0 <turn_right90+0x188>
		#endif
	}
	running_left_motor(1, 500);
 8001958:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <turn_right90+0x27c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001960:	63da      	str	r2, [r3, #60]	; 0x3c
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <turn_right90+0x27c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2200      	movs	r2, #0
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
	running_right_motor(0, 500);
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <turn_right90+0x27c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001972:	635a      	str	r2, [r3, #52]	; 0x34
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <turn_right90+0x27c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2200      	movs	r2, #0
 800197a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(50);
 800197c:	2032      	movs	r0, #50	; 0x32
 800197e:	f000 fcc3 	bl	8002308 <HAL_Delay>
	brake(2);
 8001982:	2002      	movs	r0, #2
 8001984:	f000 fbfc 	bl	8002180 <brake>
	__HAL_TIM_SET_COUNTER(&htim2, 100);
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <turn_right90+0x280>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2264      	movs	r2, #100	; 0x64
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 100);
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <turn_right90+0x284>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2264      	movs	r2, #100	; 0x64
 8001996:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <turn_right90+0x280>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <turn_right90+0x280>)
 80019a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <turn_right90+0x284>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <turn_right90+0x284>)
 80019b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ba:	60da      	str	r2, [r3, #12]

}
 80019bc:	bf00      	nop
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	f3af 8000 	nop.w
 80019c8:	bbbbbbbc 	.word	0xbbbbbbbc
 80019cc:	40929bbb 	.word	0x40929bbb
 80019d0:	00000000 	.word	0x00000000
 80019d4:	407c2000 	.word	0x407c2000
 80019d8:	0800b000 	.word	0x0800b000
 80019dc:	200004ec 	.word	0x200004ec
 80019e0:	20000484 	.word	0x20000484
 80019e4:	200003ac 	.word	0x200003ac
 80019e8:	200003f4 	.word	0x200003f4
 80019ec:	2000043c 	.word	0x2000043c
 80019f0:	200004cd 	.word	0x200004cd
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	40000400 	.word	0x40000400
 80019fc:	200004d0 	.word	0x200004d0
 8001a00:	200004d4 	.word	0x200004d4
 8001a04:	00000000 	.word	0x00000000

08001a08 <go_straight>:

void go_straight(double distance, bool brakee, int8_t next) { //millimeter
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b09a      	sub	sp, #104	; 0x68
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a12:	4611      	mov	r1, r2
 8001a14:	461a      	mov	r2, r3
 8001a16:	460b      	mov	r3, r1
 8001a18:	71fb      	strb	r3, [r7, #7]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	71bb      	strb	r3, [r7, #6]
	uint16_t en = round(distance * counts_per_1mm);
 8001a1e:	a16a      	add	r1, pc, #424	; (adr r1, 8001bc8 <go_straight+0x1c0>)
 8001a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a28:	f7fe fd4e 	bl	80004c8 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f008 fdba 	bl	800a5ac <round>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7fe ff7c 	bl	800093c <__aeabi_d2uiz>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	bool isRunning = true;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if(__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) == __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2)){
 8001a50:	4b5f      	ldr	r3, [pc, #380]	; (8001bd0 <go_straight+0x1c8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a56:	4b5e      	ldr	r3, [pc, #376]	; (8001bd0 <go_straight+0x1c8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d11d      	bne.n	8001a9c <go_straight+0x94>
		uint16_t last = 10;
 8001a60:	230a      	movs	r3, #10
 8001a62:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		while(last != TIM2->CNT){
 8001a66:	e007      	b.n	8001a78 <go_straight+0x70>
			last = TIM2->CNT;
 8001a68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			HAL_Delay(20);
 8001a72:	2014      	movs	r0, #20
 8001a74:	f000 fc48 	bl	8002308 <HAL_Delay>
		while(last != TIM2->CNT){
 8001a78:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d1f0      	bne.n	8001a68 <go_straight+0x60>
		}
		set_counterTIM2_3(0, 0);
 8001a86:	4b53      	ldr	r3, [pc, #332]	; (8001bd4 <go_straight+0x1cc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
 8001a8e:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <go_straight+0x1d0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
		isRunning = false;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	__HAL_TIM_SET_AUTORELOAD(&htim2, en + 100);
 8001a9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001aa0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001aa4:	4b4b      	ldr	r3, [pc, #300]	; (8001bd4 <go_straight+0x1cc>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aaa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001aae:	3364      	adds	r3, #100	; 0x64
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b48      	ldr	r3, [pc, #288]	; (8001bd4 <go_straight+0x1cc>)
 8001ab4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, en + 100);
 8001ab6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001aba:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001abe:	4b46      	ldr	r3, [pc, #280]	; (8001bd8 <go_straight+0x1d0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ac4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ac8:	3364      	adds	r3, #100	; 0x64
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b42      	ldr	r3, [pc, #264]	; (8001bd8 <go_straight+0x1d0>)
 8001ace:	60da      	str	r2, [r3, #12]
	set_counterTIM2_3(TIM2->CNT + 100, TIM3->CNT + 100);
 8001ad0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <go_straight+0x1cc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3264      	adds	r2, #100	; 0x64
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24
 8001ade:	4b3f      	ldr	r3, [pc, #252]	; (8001bdc <go_straight+0x1d4>)
 8001ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <go_straight+0x1d0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	3264      	adds	r2, #100	; 0x64
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24

	status = straight;
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <go_straight+0x1d8>)
 8001aec:	22fa      	movs	r2, #250	; 0xfa
 8001aee:	701a      	strb	r2, [r3, #0]
	int32_t Err, P, D, old_Error = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	667b      	str	r3, [r7, #100]	; 0x64
	int32_t temp_1, temp_2, temp_3;
	bool useIRSensor = true;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	uint16_t oe2 = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	int32_t ofs;
	uint16_t temp;
	bool stopAtEdge = false;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint16_t left_sensor45, right_sensor45, left_sensor90,
		right_sensor90, left_sensor0 = 8000, right_sensor0 = 8000;
 8001b06:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001b0a:	82fb      	strh	r3, [r7, #22]
 8001b0c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001b10:	82bb      	strh	r3, [r7, #20]
	vl53l0x_GetRanging_now(leftSensor90,  &left_sensor90);
 8001b12:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <go_straight+0x1dc>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f107 021a 	add.w	r2, r7, #26
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f008 fb10 	bl	800a142 <vl53l0x_GetRanging_now>
	vl53l0x_GetRanging_now(rightSensor90, &right_sensor90);
 8001b22:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <go_straight+0x1dc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f107 0218 	add.w	r2, r7, #24
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f008 fb08 	bl	800a142 <vl53l0x_GetRanging_now>
	bool hasleftWalllast = left_sensor90 < HasleftWallValue_90;
 8001b32:	8b7b      	ldrh	r3, [r7, #26]
 8001b34:	2b81      	cmp	r3, #129	; 0x81
 8001b36:	bf94      	ite	ls
 8001b38:	2301      	movls	r3, #1
 8001b3a:	2300      	movhi	r3, #0
 8001b3c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	bool hasrightWalllast = right_sensor90 < HasrightWallValue_90;
 8001b40:	8b3b      	ldrh	r3, [r7, #24]
 8001b42:	2b81      	cmp	r3, #129	; 0x81
 8001b44:	bf94      	ite	ls
 8001b46:	2301      	movls	r3, #1
 8001b48:	2300      	movhi	r3, #0
 8001b4a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint16_t speed0 = (next == -1) ? speed_levels[Rmode][0] : 350;
 8001b4e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b56:	d108      	bne.n	8001b6a <go_straight+0x162>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <go_straight+0x1e0>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <go_straight+0x1e4>)
 8001b62:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	e001      	b.n	8001b6e <go_straight+0x166>
 8001b6a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001b6e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t speed1 = (next == -1) ? speed_levels[Rmode][1] : 350;
 8001b72:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7a:	d108      	bne.n	8001b8e <go_straight+0x186>
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <go_straight+0x1e0>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <go_straight+0x1e4>)
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4413      	add	r3, r2
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	e001      	b.n	8001b92 <go_straight+0x18a>
 8001b8e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001b92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	if(!isRunning){
 8001b96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b9a:	f083 0301 	eor.w	r3, r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 8234 	beq.w	800200e <go_straight+0x606>
		TIM1->CCR3 = 0;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <go_straight+0x1e8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = 150;
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <go_straight+0x1e8>)
 8001bae:	2296      	movs	r2, #150	; 0x96
 8001bb0:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR1 = 150;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <go_straight+0x1e8>)
 8001bb4:	2296      	movs	r2, #150	; 0x96
 8001bb6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <go_straight+0x1e8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(100);
 8001bbe:	2064      	movs	r0, #100	; 0x64
 8001bc0:	f000 fba2 	bl	8002308 <HAL_Delay>
	}

	while(status != 0 && (right_sensor0 > oe2 || left_sensor0 > oe2)){
 8001bc4:	e223      	b.n	800200e <go_straight+0x606>
 8001bc6:	bf00      	nop
 8001bc8:	7bd40597 	.word	0x7bd40597
 8001bcc:	401a24d3 	.word	0x401a24d3
 8001bd0:	200003ac 	.word	0x200003ac
 8001bd4:	200003f4 	.word	0x200003f4
 8001bd8:	2000043c 	.word	0x2000043c
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	200004cd 	.word	0x200004cd
 8001be4:	20000e50 	.word	0x20000e50
 8001be8:	200004cc 	.word	0x200004cc
 8001bec:	0800b4b4 	.word	0x0800b4b4
 8001bf0:	40012c00 	.word	0x40012c00
		temp_3 = (int32_t)TIM3->CNT - TIM2->CNT;
 8001bf4:	4ba6      	ldr	r3, [pc, #664]	; (8001e90 <go_straight+0x488>)
 8001bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	643b      	str	r3, [r7, #64]	; 0x40
		vl53l0x_GetRanging_now(leftSensor45,  &left_sensor45);
 8001c02:	4ba4      	ldr	r3, [pc, #656]	; (8001e94 <go_straight+0x48c>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f107 021e 	add.w	r2, r7, #30
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f008 fa98 	bl	800a142 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor45, &right_sensor45);
 8001c12:	4ba0      	ldr	r3, [pc, #640]	; (8001e94 <go_straight+0x48c>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f107 021c 	add.w	r2, r7, #28
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f008 fa90 	bl	800a142 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(leftSensor0,   &left_sensor0);
 8001c22:	4b9c      	ldr	r3, [pc, #624]	; (8001e94 <go_straight+0x48c>)
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f107 0216 	add.w	r2, r7, #22
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f008 fa88 	bl	800a142 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor0,  &right_sensor0);
 8001c32:	4b98      	ldr	r3, [pc, #608]	; (8001e94 <go_straight+0x48c>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f107 0214 	add.w	r2, r7, #20
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f008 fa80 	bl	800a142 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(leftSensor90,  &left_sensor90);
 8001c42:	4b94      	ldr	r3, [pc, #592]	; (8001e94 <go_straight+0x48c>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f107 021a 	add.w	r2, r7, #26
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f008 fa78 	bl	800a142 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor90,  &right_sensor90);
 8001c52:	4b90      	ldr	r3, [pc, #576]	; (8001e94 <go_straight+0x48c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f107 0218 	add.w	r2, r7, #24
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f008 fa70 	bl	800a142 <vl53l0x_GetRanging_now>
		if(next == -1 && ((left_sensor90 < HasleftWallValue_90 && !hasleftWalllast) ||
 8001c62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6a:	f040 80d1 	bne.w	8001e10 <go_straight+0x408>
 8001c6e:	8b7b      	ldrh	r3, [r7, #26]
 8001c70:	2b81      	cmp	r3, #129	; 0x81
 8001c72:	d806      	bhi.n	8001c82 <go_straight+0x27a>
 8001c74:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001c78:	f083 0301 	eor.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d119      	bne.n	8001cb6 <go_straight+0x2ae>
						(right_sensor90 < HasrightWallValue_90 && !hasrightWalllast) ||
 8001c82:	8b3b      	ldrh	r3, [r7, #24]
		if(next == -1 && ((left_sensor90 < HasleftWallValue_90 && !hasleftWalllast) ||
 8001c84:	2b81      	cmp	r3, #129	; 0x81
 8001c86:	d806      	bhi.n	8001c96 <go_straight+0x28e>
						(right_sensor90 < HasrightWallValue_90 && !hasrightWalllast) ||
 8001c88:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c8c:	f083 0301 	eor.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10f      	bne.n	8001cb6 <go_straight+0x2ae>
						(left_sensor90 > HasleftWallValue_90 && hasleftWalllast) ||
 8001c96:	8b7b      	ldrh	r3, [r7, #26]
						(right_sensor90 < HasrightWallValue_90 && !hasrightWalllast) ||
 8001c98:	2b82      	cmp	r3, #130	; 0x82
 8001c9a:	d903      	bls.n	8001ca4 <go_straight+0x29c>
						(left_sensor90 > HasleftWallValue_90 && hasleftWalllast) ||
 8001c9c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d108      	bne.n	8001cb6 <go_straight+0x2ae>
						(right_sensor90 > HasrightWallValue_90 && hasrightWalllast))){
 8001ca4:	8b3b      	ldrh	r3, [r7, #24]
						(left_sensor90 > HasleftWallValue_90 && hasleftWalllast) ||
 8001ca6:	2b82      	cmp	r3, #130	; 0x82
 8001ca8:	f240 80b2 	bls.w	8001e10 <go_straight+0x408>
						(right_sensor90 > HasrightWallValue_90 && hasrightWalllast))){
 8001cac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80ad 	beq.w	8001e10 <go_straight+0x408>
			temp = round((double)round((double)(TIM3->CNT)/counts_per_300mm) * counts_per_300mm);
 8001cb6:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <go_straight+0x488>)
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fb8a 	bl	80003d4 <__aeabi_ui2d>
 8001cc0:	a36f      	add	r3, pc, #444	; (adr r3, 8001e80 <go_straight+0x478>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fd29 	bl	800071c <__aeabi_ddiv>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f008 fc6b 	bl	800a5ac <round>
 8001cd6:	a36a      	add	r3, pc, #424	; (adr r3, 8001e80 <go_straight+0x478>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fbf4 	bl	80004c8 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f008 fc60 	bl	800a5ac <round>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe fe22 	bl	800093c <__aeabi_d2uiz>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	87fb      	strh	r3, [r7, #62]	; 0x3e
			if((left_sensor90 < HasleftWallValue_90 && !hasleftWalllast) ||
 8001cfc:	8b7b      	ldrh	r3, [r7, #26]
 8001cfe:	2b81      	cmp	r3, #129	; 0x81
 8001d00:	d806      	bhi.n	8001d10 <go_straight+0x308>
 8001d02:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d06:	f083 0301 	eor.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d109      	bne.n	8001d24 <go_straight+0x31c>
					(right_sensor90 < HasrightWallValue_90 && !hasrightWalllast)){
 8001d10:	8b3b      	ldrh	r3, [r7, #24]
			if((left_sensor90 < HasleftWallValue_90 && !hasleftWalllast) ||
 8001d12:	2b81      	cmp	r3, #129	; 0x81
 8001d14:	d821      	bhi.n	8001d5a <go_straight+0x352>
					(right_sensor90 < HasrightWallValue_90 && !hasrightWalllast)){
 8001d16:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d1a:	f083 0301 	eor.w	r3, r3, #1
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01a      	beq.n	8001d5a <go_straight+0x352>
				if(abs((int32_t)temp - en) < 50){
 8001d24:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001d26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001d30:	db06      	blt.n	8001d40 <go_straight+0x338>
 8001d32:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001d34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b31      	cmp	r3, #49	; 0x31
 8001d3c:	f340 8179 	ble.w	8002032 <go_straight+0x62a>
						break;
				}
				set_counterTIM2_3(temp + 100, temp + 100);
 8001d40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001d42:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001d46:	4b54      	ldr	r3, [pc, #336]	; (8001e98 <go_straight+0x490>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001d4e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001d52:	4b52      	ldr	r3, [pc, #328]	; (8001e9c <go_straight+0x494>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24
 8001d58:	e04c      	b.n	8001df4 <go_straight+0x3ec>
			} else if((left_sensor90 > HasleftWallValue_90 && hasleftWalllast) ||
 8001d5a:	8b7b      	ldrh	r3, [r7, #26]
 8001d5c:	2b82      	cmp	r3, #130	; 0x82
 8001d5e:	d903      	bls.n	8001d68 <go_straight+0x360>
 8001d60:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d106      	bne.n	8001d76 <go_straight+0x36e>
					(right_sensor90 > HasrightWallValue_90 && hasrightWalllast)){
 8001d68:	8b3b      	ldrh	r3, [r7, #24]
			} else if((left_sensor90 > HasleftWallValue_90 && hasleftWalllast) ||
 8001d6a:	2b82      	cmp	r3, #130	; 0x82
 8001d6c:	d942      	bls.n	8001df4 <go_straight+0x3ec>
					(right_sensor90 > HasrightWallValue_90 && hasrightWalllast)){
 8001d6e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d03e      	beq.n	8001df4 <go_straight+0x3ec>
				if(abs((int32_t)temp - en) < 50){
 8001d76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001d78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001d82:	db09      	blt.n	8001d98 <go_straight+0x390>
 8001d84:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001d86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b31      	cmp	r3, #49	; 0x31
 8001d8e:	dc03      	bgt.n	8001d98 <go_straight+0x390>
					stopAtEdge = true;
 8001d90:	2301      	movs	r3, #1
 8001d92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					break;
 8001d96:	e14d      	b.n	8002034 <go_straight+0x62c>
				}
				temp += round(40 * counts_per_1mm);
 8001d98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fb2a 	bl	80003f4 <__aeabi_i2d>
 8001da0:	4604      	mov	r4, r0
 8001da2:	460d      	mov	r5, r1
 8001da4:	a138      	add	r1, pc, #224	; (adr r1, 8001e88 <go_straight+0x480>)
 8001da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	4b3c      	ldr	r3, [pc, #240]	; (8001ea0 <go_straight+0x498>)
 8001db0:	f7fe fb8a 	bl	80004c8 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f008 fbf6 	bl	800a5ac <round>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	f7fe f9c8 	bl	800015c <__adddf3>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7fe fdb2 	bl	800093c <__aeabi_d2uiz>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	87fb      	strh	r3, [r7, #62]	; 0x3e
				set_counterTIM2_3(temp + 100, temp + 100);
 8001ddc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001dde:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001de2:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <go_straight+0x490>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	625a      	str	r2, [r3, #36]	; 0x24
 8001de8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001dea:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001dee:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <go_straight+0x494>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24

			}
			hasleftWalllast = left_sensor90 < HasleftWallValue_90;
 8001df4:	8b7b      	ldrh	r3, [r7, #26]
 8001df6:	2b81      	cmp	r3, #129	; 0x81
 8001df8:	bf94      	ite	ls
 8001dfa:	2301      	movls	r3, #1
 8001dfc:	2300      	movhi	r3, #0
 8001dfe:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			hasrightWalllast = right_sensor90 < HasrightWallValue_90;
 8001e02:	8b3b      	ldrh	r3, [r7, #24]
 8001e04:	2b81      	cmp	r3, #129	; 0x81
 8001e06:	bf94      	ite	ls
 8001e08:	2301      	movls	r3, #1
 8001e0a:	2300      	movhi	r3, #0
 8001e0c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		}
		if(left_sensor0 > 150 && left_sensor45 < HasleftWallValue_45 && left_sensor90 < HasleftWallValue_90
 8001e10:	8afb      	ldrh	r3, [r7, #22]
 8001e12:	2b96      	cmp	r3, #150	; 0x96
 8001e14:	d919      	bls.n	8001e4a <go_straight+0x442>
 8001e16:	8bfb      	ldrh	r3, [r7, #30]
 8001e18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e1c:	d215      	bcs.n	8001e4a <go_straight+0x442>
 8001e1e:	8b7b      	ldrh	r3, [r7, #26]
 8001e20:	2b81      	cmp	r3, #129	; 0x81
 8001e22:	d812      	bhi.n	8001e4a <go_straight+0x442>
				&& right_sensor45 < HasrightWallValue_45 && right_sensor90 < HasrightWallValue_90){
 8001e24:	8bbb      	ldrh	r3, [r7, #28]
 8001e26:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e2a:	d20e      	bcs.n	8001e4a <go_straight+0x442>
 8001e2c:	8b3b      	ldrh	r3, [r7, #24]
 8001e2e:	2b81      	cmp	r3, #129	; 0x81
 8001e30:	d80b      	bhi.n	8001e4a <go_straight+0x442>
			Err = (int32_t)right_sensor45 - left_sensor45;
 8001e32:	8bbb      	ldrh	r3, [r7, #28]
 8001e34:	461a      	mov	r2, r3
 8001e36:	8bfb      	ldrh	r3, [r7, #30]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
			D = Err - old_Error;
 8001e3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	63bb      	str	r3, [r7, #56]	; 0x38
			old_Error = Err;
 8001e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e46:	667b      	str	r3, [r7, #100]	; 0x64
 8001e48:	e06f      	b.n	8001f2a <go_straight+0x522>
		} else if(left_sensor0 > 150 && left_sensor45 < HasleftWallValue_45 && (left_sensor90 < HasleftWallValue_90 ||
 8001e4a:	8afb      	ldrh	r3, [r7, #22]
 8001e4c:	2b96      	cmp	r3, #150	; 0x96
 8001e4e:	d929      	bls.n	8001ea4 <go_straight+0x49c>
 8001e50:	8bfb      	ldrh	r3, [r7, #30]
 8001e52:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e56:	d225      	bcs.n	8001ea4 <go_straight+0x49c>
 8001e58:	8b7b      	ldrh	r3, [r7, #26]
 8001e5a:	2b81      	cmp	r3, #129	; 0x81
 8001e5c:	d902      	bls.n	8001e64 <go_straight+0x45c>
				left_sensor45 < 230)){
 8001e5e:	8bfb      	ldrh	r3, [r7, #30]
		} else if(left_sensor0 > 150 && left_sensor45 < HasleftWallValue_45 && (left_sensor90 < HasleftWallValue_90 ||
 8001e60:	2be5      	cmp	r3, #229	; 0xe5
 8001e62:	d81f      	bhi.n	8001ea4 <go_straight+0x49c>
			Err = (int32_t)leftWallValue - left_sensor45;
 8001e64:	8bfb      	ldrh	r3, [r7, #30]
 8001e66:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
			D = Err - old_Error;
 8001e6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	63bb      	str	r3, [r7, #56]	; 0x38
			old_Error = Err;
 8001e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e76:	667b      	str	r3, [r7, #100]	; 0x64
			useIRSensor = true;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8001e7e:	e054      	b.n	8001f2a <go_straight+0x522>
 8001e80:	d51c768d 	.word	0xd51c768d
 8001e84:	409ea327 	.word	0x409ea327
 8001e88:	7bd40597 	.word	0x7bd40597
 8001e8c:	401a24d3 	.word	0x401a24d3
 8001e90:	40000400 	.word	0x40000400
 8001e94:	20000e50 	.word	0x20000e50
 8001e98:	200003f4 	.word	0x200003f4
 8001e9c:	2000043c 	.word	0x2000043c
 8001ea0:	40440000 	.word	0x40440000
		} else if(left_sensor0 > 150 && right_sensor45 < HasrightWallValue_45 && (right_sensor90 < HasrightWallValue_90 ||
 8001ea4:	8afb      	ldrh	r3, [r7, #22]
 8001ea6:	2b96      	cmp	r3, #150	; 0x96
 8001ea8:	d916      	bls.n	8001ed8 <go_straight+0x4d0>
 8001eaa:	8bbb      	ldrh	r3, [r7, #28]
 8001eac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001eb0:	d212      	bcs.n	8001ed8 <go_straight+0x4d0>
 8001eb2:	8b3b      	ldrh	r3, [r7, #24]
 8001eb4:	2b81      	cmp	r3, #129	; 0x81
 8001eb6:	d902      	bls.n	8001ebe <go_straight+0x4b6>
				right_sensor45 < 230)){
 8001eb8:	8bbb      	ldrh	r3, [r7, #28]
		} else if(left_sensor0 > 150 && right_sensor45 < HasrightWallValue_45 && (right_sensor90 < HasrightWallValue_90 ||
 8001eba:	2be5      	cmp	r3, #229	; 0xe5
 8001ebc:	d80c      	bhi.n	8001ed8 <go_straight+0x4d0>
			Err = (int32_t)right_sensor45 - rightWallValue;
 8001ebe:	8bbb      	ldrh	r3, [r7, #28]
 8001ec0:	3bc8      	subs	r3, #200	; 0xc8
 8001ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
			D = Err - old_Error;
 8001ec4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	63bb      	str	r3, [r7, #56]	; 0x38
			old_Error = Err;
 8001ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ece:	667b      	str	r3, [r7, #100]	; 0x64
			useIRSensor = true;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8001ed6:	e028      	b.n	8001f2a <go_straight+0x522>
		} else {
			if(useIRSensor){
 8001ed8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <go_straight+0x4e0>
				ofs = temp_3;
 8001ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee2:	653b      	str	r3, [r7, #80]	; 0x50
				old_Error = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	667b      	str	r3, [r7, #100]	; 0x64
			}
			temp_1 = TIM2->CNT;
 8001ee8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	637b      	str	r3, [r7, #52]	; 0x34
			temp_2 = TIM3->CNT;
 8001ef0:	4b99      	ldr	r3, [pc, #612]	; (8002158 <go_straight+0x750>)
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	633b      	str	r3, [r7, #48]	; 0x30
			Err = temp_2 - (temp_1 + ofs);
 8001ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001efa:	4413      	add	r3, r2
 8001efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	65fb      	str	r3, [r7, #92]	; 0x5c
			D = Err - old_Error;
 8001f02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	63bb      	str	r3, [r7, #56]	; 0x38
			old_Error = Err;
 8001f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f0c:	667b      	str	r3, [r7, #100]	; 0x64
			useIRSensor = false;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			#if debug == 1
			a = TIM2->CNT;
 8001f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b8f      	ldr	r3, [pc, #572]	; (800215c <go_straight+0x754>)
 8001f1e:	601a      	str	r2, [r3, #0]
			b = TIM3->CNT;
 8001f20:	4b8d      	ldr	r3, [pc, #564]	; (8002158 <go_straight+0x750>)
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b8e      	ldr	r3, [pc, #568]	; (8002160 <go_straight+0x758>)
 8001f28:	601a      	str	r2, [r3, #0]
			#endif
		}
		if(useIRSensor){
 8001f2a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d024      	beq.n	8001f7c <go_straight+0x574>
			P = round(P_params[0] * Err + D * 0);
 8001f32:	4b8c      	ldr	r3, [pc, #560]	; (8002164 <go_straight+0x75c>)
 8001f34:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f38:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f3a:	f7fe fa5b 	bl	80003f4 <__aeabi_i2d>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4620      	mov	r0, r4
 8001f44:	4629      	mov	r1, r5
 8001f46:	f7fe fabf 	bl	80004c8 <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	f7fe f8ff 	bl	800015c <__adddf3>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f008 fb21 	bl	800a5ac <round>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f7fe fcbb 	bl	80008ec <__aeabi_d2iz>
 8001f76:	4603      	mov	r3, r0
 8001f78:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f7a:	e023      	b.n	8001fc4 <go_straight+0x5bc>
		} else {
			P = round(P_params[1] * Err + D * 0);
 8001f7c:	4b79      	ldr	r3, [pc, #484]	; (8002164 <go_straight+0x75c>)
 8001f7e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001f82:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f84:	f7fe fa36 	bl	80003f4 <__aeabi_i2d>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	4629      	mov	r1, r5
 8001f90:	f7fe fa9a 	bl	80004c8 <__aeabi_dmul>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	f7fe f8da 	bl	800015c <__adddf3>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f008 fafc 	bl	800a5ac <round>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe fc96 	bl	80008ec <__aeabi_d2iz>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	65bb      	str	r3, [r7, #88]	; 0x58
		}
		P = max(-50, min(P, 50));
 8001fc4:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fce:	2332      	movs	r3, #50	; 0x32
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	bfa8      	it	ge
 8001fda:	4613      	movge	r3, r2
 8001fdc:	623b      	str	r3, [r7, #32]
 8001fde:	6a3a      	ldr	r2, [r7, #32]
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	bfb8      	it	lt
 8001fe6:	4613      	movlt	r3, r2
 8001fe8:	65bb      	str	r3, [r7, #88]	; 0x58
		TIM1->CCR3 = 0;
 8001fea:	4b5f      	ldr	r3, [pc, #380]	; (8002168 <go_straight+0x760>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = (uint16_t)speed0 + P;
 8001ff0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001ff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ff6:	441a      	add	r2, r3
 8001ff8:	4b5b      	ldr	r3, [pc, #364]	; (8002168 <go_straight+0x760>)
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR1 = (uint16_t)speed1 - P;
 8001ffc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8002000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002002:	1ad2      	subs	r2, r2, r3
 8002004:	4b58      	ldr	r3, [pc, #352]	; (8002168 <go_straight+0x760>)
 8002006:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8002008:	4b57      	ldr	r3, [pc, #348]	; (8002168 <go_straight+0x760>)
 800200a:	2200      	movs	r2, #0
 800200c:	639a      	str	r2, [r3, #56]	; 0x38
	while(status != 0 && (right_sensor0 > oe2 || left_sensor0 > oe2)){
 800200e:	4b57      	ldr	r3, [pc, #348]	; (800216c <go_straight+0x764>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b25b      	sxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <go_straight+0x62c>
 8002018:	8abb      	ldrh	r3, [r7, #20]
 800201a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800201e:	429a      	cmp	r2, r3
 8002020:	f4ff ade8 	bcc.w	8001bf4 <go_straight+0x1ec>
 8002024:	8afb      	ldrh	r3, [r7, #22]
 8002026:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800202a:	429a      	cmp	r2, r3
 800202c:	f4ff ade2 	bcc.w	8001bf4 <go_straight+0x1ec>
 8002030:	e000      	b.n	8002034 <go_straight+0x62c>
						break;
 8002032:	bf00      	nop
	}
	if(brakee){
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d035      	beq.n	80020a6 <go_straight+0x69e>
		if(next == -1){
 800203a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800203e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002042:	d118      	bne.n	8002076 <go_straight+0x66e>
			running_right_motor(1, 800);
 8002044:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <go_straight+0x768>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	635a      	str	r2, [r3, #52]	; 0x34
 800204c:	4b48      	ldr	r3, [pc, #288]	; (8002170 <go_straight+0x768>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002054:	639a      	str	r2, [r3, #56]	; 0x38
			running_left_motor(1, 800);
 8002056:	4b46      	ldr	r3, [pc, #280]	; (8002170 <go_straight+0x768>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800205e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002060:	4b43      	ldr	r3, [pc, #268]	; (8002170 <go_straight+0x768>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(70);
 8002068:	2046      	movs	r0, #70	; 0x46
 800206a:	f000 f94d 	bl	8002308 <HAL_Delay>
			brake(2);
 800206e:	2002      	movs	r0, #2
 8002070:	f000 f886 	bl	8002180 <brake>
 8002074:	e017      	b.n	80020a6 <go_straight+0x69e>
		} else {
			running_right_motor(1, 600);
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <go_straight+0x768>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2200      	movs	r2, #0
 800207c:	635a      	str	r2, [r3, #52]	; 0x34
 800207e:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <go_straight+0x768>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002086:	639a      	str	r2, [r3, #56]	; 0x38
			running_left_motor(1, 600);
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <go_straight+0x768>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002090:	63da      	str	r2, [r3, #60]	; 0x3c
 8002092:	4b37      	ldr	r3, [pc, #220]	; (8002170 <go_straight+0x768>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2200      	movs	r2, #0
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_Delay(50);
 800209a:	2032      	movs	r0, #50	; 0x32
 800209c:	f000 f934 	bl	8002308 <HAL_Delay>
			brake(2);
 80020a0:	2002      	movs	r0, #2
 80020a2:	f000 f86d 	bl	8002180 <brake>
		}
	}
	if(stopAtEdge){
 80020a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d042      	beq.n	8002134 <go_straight+0x72c>
		__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 80020ae:	4b31      	ldr	r3, [pc, #196]	; (8002174 <go_straight+0x76c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80020b8:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <go_straight+0x76c>)
 80020ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020be:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <go_straight+0x770>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80020ca:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <go_straight+0x770>)
 80020cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d0:	60da      	str	r2, [r3, #12]
		set_counterTIM2_3(round(counts_per_1mm * 50), round(counts_per_1mm * 50));
 80020d2:	a11f      	add	r1, pc, #124	; (adr r1, 8002150 <go_straight+0x748>)
 80020d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <go_straight+0x774>)
 80020de:	f7fe f9f3 	bl	80004c8 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f008 fa5f 	bl	800a5ac <round>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4920      	ldr	r1, [pc, #128]	; (8002174 <go_straight+0x76c>)
 80020f4:	680c      	ldr	r4, [r1, #0]
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe fc1f 	bl	800093c <__aeabi_d2uiz>
 80020fe:	4603      	mov	r3, r0
 8002100:	6263      	str	r3, [r4, #36]	; 0x24
 8002102:	a113      	add	r1, pc, #76	; (adr r1, 8002150 <go_straight+0x748>)
 8002104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <go_straight+0x774>)
 800210e:	f7fe f9db 	bl	80004c8 <__aeabi_dmul>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f008 fa47 	bl	800a5ac <round>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4915      	ldr	r1, [pc, #84]	; (8002178 <go_straight+0x770>)
 8002124:	680c      	ldr	r4, [r1, #0]
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	f7fe fc07 	bl	800093c <__aeabi_d2uiz>
 800212e:	4603      	mov	r3, r0
 8002130:	6263      	str	r3, [r4, #36]	; 0x24
	} else {
		set_counterTIM2_3(0, 0);
	}
}
 8002132:	e007      	b.n	8002144 <go_straight+0x73c>
		set_counterTIM2_3(0, 0);
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <go_straight+0x76c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2200      	movs	r2, #0
 800213a:	625a      	str	r2, [r3, #36]	; 0x24
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <go_straight+0x770>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2200      	movs	r2, #0
 8002142:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002144:	bf00      	nop
 8002146:	3768      	adds	r7, #104	; 0x68
 8002148:	46bd      	mov	sp, r7
 800214a:	bdb0      	pop	{r4, r5, r7, pc}
 800214c:	f3af 8000 	nop.w
 8002150:	7bd40597 	.word	0x7bd40597
 8002154:	401a24d3 	.word	0x401a24d3
 8002158:	40000400 	.word	0x40000400
 800215c:	200004d0 	.word	0x200004d0
 8002160:	200004d4 	.word	0x200004d4
 8002164:	20000000 	.word	0x20000000
 8002168:	40012c00 	.word	0x40012c00
 800216c:	200004cd 	.word	0x200004cd
 8002170:	200003ac 	.word	0x200003ac
 8002174:	200003f4 	.word	0x200003f4
 8002178:	2000043c 	.word	0x2000043c
 800217c:	40490000 	.word	0x40490000

08002180 <brake>:

void brake(uint8_t mode){
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
	if(mode == 0){
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10a      	bne.n	80021a6 <brake+0x26>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <brake+0x74>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <brake+0x74>)
 8002196:	68d2      	ldr	r2, [r2, #12]
 8002198:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <brake+0x74>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <brake+0x74>)
 80021a0:	68d2      	ldr	r2, [r2, #12]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
	}

}
 80021a4:	e021      	b.n	80021ea <brake+0x6a>
	} else if(mode == 1){
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d10a      	bne.n	80021c2 <brake+0x42>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <brake+0x74>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <brake+0x74>)
 80021b2:	68d2      	ldr	r2, [r2, #12]
 80021b4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <brake+0x74>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <brake+0x74>)
 80021bc:	68d2      	ldr	r2, [r2, #12]
 80021be:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021c0:	e013      	b.n	80021ea <brake+0x6a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <brake+0x74>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <brake+0x74>)
 80021c8:	68d2      	ldr	r2, [r2, #12]
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <brake+0x74>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <brake+0x74>)
 80021d2:	68d2      	ldr	r2, [r2, #12]
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <brake+0x74>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <brake+0x74>)
 80021dc:	68d2      	ldr	r2, [r2, #12]
 80021de:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <brake+0x74>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a03      	ldr	r2, [pc, #12]	; (80021f4 <brake+0x74>)
 80021e6:	68d2      	ldr	r2, [r2, #12]
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	200003ac 	.word	0x200003ac

080021f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021f8:	f7ff fab0 	bl	800175c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021fc:	480b      	ldr	r0, [pc, #44]	; (800222c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021fe:	490c      	ldr	r1, [pc, #48]	; (8002230 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002200:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002204:	e002      	b.n	800220c <LoopCopyDataInit>

08002206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220a:	3304      	adds	r3, #4

0800220c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800220c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002210:	d3f9      	bcc.n	8002206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002212:	4a09      	ldr	r2, [pc, #36]	; (8002238 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002214:	4c09      	ldr	r4, [pc, #36]	; (800223c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002218:	e001      	b.n	800221e <LoopFillZerobss>

0800221a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800221c:	3204      	adds	r2, #4

0800221e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002220:	d3fb      	bcc.n	800221a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002222:	f008 fa15 	bl	800a650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002226:	f7fe fc43 	bl	8000ab0 <main>
  bx lr
 800222a:	4770      	bx	lr
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002230:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8002234:	0800b5ac 	.word	0x0800b5ac
  ldr r2, =_sbss
 8002238:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 800223c:	2000115c 	.word	0x2000115c

08002240 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC1_2_IRQHandler>
	...

08002244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <HAL_Init+0x28>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a07      	ldr	r2, [pc, #28]	; (800226c <HAL_Init+0x28>)
 800224e:	f043 0310 	orr.w	r3, r3, #16
 8002252:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002254:	2003      	movs	r0, #3
 8002256:	f000 f96b 	bl	8002530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225a:	200f      	movs	r0, #15
 800225c:	f000 f808 	bl	8002270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002260:	f7fe fffe 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40022000 	.word	0x40022000

08002270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_InitTick+0x54>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_InitTick+0x58>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002286:	fbb3 f3f1 	udiv	r3, r3, r1
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f991 	bl	80025b6 <HAL_SYSTICK_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e00e      	b.n	80022bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b0f      	cmp	r3, #15
 80022a2:	d80a      	bhi.n	80022ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a4:	2200      	movs	r2, #0
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f000 f94b 	bl	8002546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b0:	4a06      	ldr	r2, [pc, #24]	; (80022cc <HAL_InitTick+0x5c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000010 	.word	0x20000010
 80022c8:	20000018 	.word	0x20000018
 80022cc:	20000014 	.word	0x20000014

080022d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_IncTick+0x1c>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_IncTick+0x20>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <HAL_IncTick+0x20>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	20000018 	.word	0x20000018
 80022f0:	20001108 	.word	0x20001108

080022f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return uwTick;
 80022f8:	4b02      	ldr	r3, [pc, #8]	; (8002304 <HAL_GetTick+0x10>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	20001108 	.word	0x20001108

08002308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002310:	f7ff fff0 	bl	80022f4 <HAL_GetTick>
 8002314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d005      	beq.n	800232e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_Delay+0x44>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800232e:	bf00      	nop
 8002330:	f7ff ffe0 	bl	80022f4 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	429a      	cmp	r2, r3
 800233e:	d8f7      	bhi.n	8002330 <HAL_Delay+0x28>
  {
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000018 	.word	0x20000018

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002382:	4a04      	ldr	r2, [pc, #16]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60d3      	str	r3, [r2, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4906      	ldr	r1, [pc, #24]	; (80023e8 <__NVIC_EnableIRQ+0x34>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100

080023ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	db12      	blt.n	8002424 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	490a      	ldr	r1, [pc, #40]	; (8002430 <__NVIC_DisableIRQ+0x44>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	2001      	movs	r0, #1
 800240e:	fa00 f202 	lsl.w	r2, r0, r2
 8002412:	3320      	adds	r3, #32
 8002414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002418:	f3bf 8f4f 	dsb	sy
}
 800241c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800241e:	f3bf 8f6f 	isb	sy
}
 8002422:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000e100 	.word	0xe000e100

08002434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	db0a      	blt.n	800245e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	490c      	ldr	r1, [pc, #48]	; (8002480 <__NVIC_SetPriority+0x4c>)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	440b      	add	r3, r1
 8002458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800245c:	e00a      	b.n	8002474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4908      	ldr	r1, [pc, #32]	; (8002484 <__NVIC_SetPriority+0x50>)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3b04      	subs	r3, #4
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	440b      	add	r3, r1
 8002472:	761a      	strb	r2, [r3, #24]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000e100 	.word	0xe000e100
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f1c3 0307 	rsb	r3, r3, #7
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	bf28      	it	cs
 80024a6:	2304      	movcs	r3, #4
 80024a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d902      	bls.n	80024b8 <NVIC_EncodePriority+0x30>
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3b03      	subs	r3, #3
 80024b6:	e000      	b.n	80024ba <NVIC_EncodePriority+0x32>
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	401a      	ands	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43d9      	mvns	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	4313      	orrs	r3, r2
         );
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024fc:	d301      	bcc.n	8002502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fe:	2301      	movs	r3, #1
 8002500:	e00f      	b.n	8002522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <SysTick_Config+0x40>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250a:	210f      	movs	r1, #15
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f7ff ff90 	bl	8002434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <SysTick_Config+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <SysTick_Config+0x40>)
 800251c:	2207      	movs	r2, #7
 800251e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff09 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002558:	f7ff ff1e 	bl	8002398 <__NVIC_GetPriorityGrouping>
 800255c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f7ff ff90 	bl	8002488 <NVIC_EncodePriority>
 8002568:	4602      	mov	r2, r0
 800256a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff5f 	bl	8002434 <__NVIC_SetPriority>
}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff11 	bl	80023b4 <__NVIC_EnableIRQ>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff1f 	bl	80023ec <__NVIC_DisableIRQ>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ff94 	bl	80024ec <SysTick_Config>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b08b      	sub	sp, #44	; 0x2c
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e2:	e169      	b.n	80028b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025e4:	2201      	movs	r2, #1
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	f040 8158 	bne.w	80028b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4a9a      	ldr	r2, [pc, #616]	; (8002870 <HAL_GPIO_Init+0x2a0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d05e      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 800260c:	4a98      	ldr	r2, [pc, #608]	; (8002870 <HAL_GPIO_Init+0x2a0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d875      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 8002612:	4a98      	ldr	r2, [pc, #608]	; (8002874 <HAL_GPIO_Init+0x2a4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d058      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 8002618:	4a96      	ldr	r2, [pc, #600]	; (8002874 <HAL_GPIO_Init+0x2a4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d86f      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 800261e:	4a96      	ldr	r2, [pc, #600]	; (8002878 <HAL_GPIO_Init+0x2a8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d052      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 8002624:	4a94      	ldr	r2, [pc, #592]	; (8002878 <HAL_GPIO_Init+0x2a8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d869      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 800262a:	4a94      	ldr	r2, [pc, #592]	; (800287c <HAL_GPIO_Init+0x2ac>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d04c      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 8002630:	4a92      	ldr	r2, [pc, #584]	; (800287c <HAL_GPIO_Init+0x2ac>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d863      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 8002636:	4a92      	ldr	r2, [pc, #584]	; (8002880 <HAL_GPIO_Init+0x2b0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d046      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
 800263c:	4a90      	ldr	r2, [pc, #576]	; (8002880 <HAL_GPIO_Init+0x2b0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d85d      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 8002642:	2b12      	cmp	r3, #18
 8002644:	d82a      	bhi.n	800269c <HAL_GPIO_Init+0xcc>
 8002646:	2b12      	cmp	r3, #18
 8002648:	d859      	bhi.n	80026fe <HAL_GPIO_Init+0x12e>
 800264a:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <HAL_GPIO_Init+0x80>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	080026cb 	.word	0x080026cb
 8002654:	080026a5 	.word	0x080026a5
 8002658:	080026b7 	.word	0x080026b7
 800265c:	080026f9 	.word	0x080026f9
 8002660:	080026ff 	.word	0x080026ff
 8002664:	080026ff 	.word	0x080026ff
 8002668:	080026ff 	.word	0x080026ff
 800266c:	080026ff 	.word	0x080026ff
 8002670:	080026ff 	.word	0x080026ff
 8002674:	080026ff 	.word	0x080026ff
 8002678:	080026ff 	.word	0x080026ff
 800267c:	080026ff 	.word	0x080026ff
 8002680:	080026ff 	.word	0x080026ff
 8002684:	080026ff 	.word	0x080026ff
 8002688:	080026ff 	.word	0x080026ff
 800268c:	080026ff 	.word	0x080026ff
 8002690:	080026ff 	.word	0x080026ff
 8002694:	080026ad 	.word	0x080026ad
 8002698:	080026c1 	.word	0x080026c1
 800269c:	4a79      	ldr	r2, [pc, #484]	; (8002884 <HAL_GPIO_Init+0x2b4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026a2:	e02c      	b.n	80026fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	623b      	str	r3, [r7, #32]
          break;
 80026aa:	e029      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	3304      	adds	r3, #4
 80026b2:	623b      	str	r3, [r7, #32]
          break;
 80026b4:	e024      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	3308      	adds	r3, #8
 80026bc:	623b      	str	r3, [r7, #32]
          break;
 80026be:	e01f      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	330c      	adds	r3, #12
 80026c6:	623b      	str	r3, [r7, #32]
          break;
 80026c8:	e01a      	b.n	8002700 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026d2:	2304      	movs	r3, #4
 80026d4:	623b      	str	r3, [r7, #32]
          break;
 80026d6:	e013      	b.n	8002700 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026e0:	2308      	movs	r3, #8
 80026e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	611a      	str	r2, [r3, #16]
          break;
 80026ea:	e009      	b.n	8002700 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026ec:	2308      	movs	r3, #8
 80026ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	615a      	str	r2, [r3, #20]
          break;
 80026f6:	e003      	b.n	8002700 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026f8:	2300      	movs	r3, #0
 80026fa:	623b      	str	r3, [r7, #32]
          break;
 80026fc:	e000      	b.n	8002700 <HAL_GPIO_Init+0x130>
          break;
 80026fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2bff      	cmp	r3, #255	; 0xff
 8002704:	d801      	bhi.n	800270a <HAL_GPIO_Init+0x13a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	e001      	b.n	800270e <HAL_GPIO_Init+0x13e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3304      	adds	r3, #4
 800270e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2bff      	cmp	r3, #255	; 0xff
 8002714:	d802      	bhi.n	800271c <HAL_GPIO_Init+0x14c>
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	e002      	b.n	8002722 <HAL_GPIO_Init+0x152>
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	3b08      	subs	r3, #8
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	210f      	movs	r1, #15
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	6a39      	ldr	r1, [r7, #32]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	431a      	orrs	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80b1 	beq.w	80028b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002750:	4b4d      	ldr	r3, [pc, #308]	; (8002888 <HAL_GPIO_Init+0x2b8>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	4a4c      	ldr	r2, [pc, #304]	; (8002888 <HAL_GPIO_Init+0x2b8>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6193      	str	r3, [r2, #24]
 800275c:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <HAL_GPIO_Init+0x2b8>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002768:	4a48      	ldr	r2, [pc, #288]	; (800288c <HAL_GPIO_Init+0x2bc>)
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	3302      	adds	r3, #2
 8002770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002774:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4013      	ands	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a40      	ldr	r2, [pc, #256]	; (8002890 <HAL_GPIO_Init+0x2c0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <HAL_GPIO_Init+0x1ec>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a3f      	ldr	r2, [pc, #252]	; (8002894 <HAL_GPIO_Init+0x2c4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00d      	beq.n	80027b8 <HAL_GPIO_Init+0x1e8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a3e      	ldr	r2, [pc, #248]	; (8002898 <HAL_GPIO_Init+0x2c8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <HAL_GPIO_Init+0x1e4>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a3d      	ldr	r2, [pc, #244]	; (800289c <HAL_GPIO_Init+0x2cc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_GPIO_Init+0x1e0>
 80027ac:	2303      	movs	r3, #3
 80027ae:	e006      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027b0:	2304      	movs	r3, #4
 80027b2:	e004      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e002      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <HAL_GPIO_Init+0x1ee>
 80027bc:	2300      	movs	r3, #0
 80027be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c0:	f002 0203 	and.w	r2, r2, #3
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	4093      	lsls	r3, r2
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027ce:	492f      	ldr	r1, [pc, #188]	; (800288c <HAL_GPIO_Init+0x2bc>)
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027e8:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	492c      	ldr	r1, [pc, #176]	; (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027f6:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <HAL_GPIO_Init+0x2d0>)
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	4928      	ldr	r1, [pc, #160]	; (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002800:	4013      	ands	r3, r2
 8002802:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002810:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	4922      	ldr	r1, [pc, #136]	; (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	60cb      	str	r3, [r1, #12]
 800281c:	e006      	b.n	800282c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800281e:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	43db      	mvns	r3, r3
 8002826:	491e      	ldr	r1, [pc, #120]	; (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002828:	4013      	ands	r3, r2
 800282a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_GPIO_Init+0x2d0>)
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4918      	ldr	r1, [pc, #96]	; (80028a0 <HAL_GPIO_Init+0x2d0>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002846:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	43db      	mvns	r3, r3
 800284e:	4914      	ldr	r1, [pc, #80]	; (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002850:	4013      	ands	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d021      	beq.n	80028a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	490e      	ldr	r1, [pc, #56]	; (80028a0 <HAL_GPIO_Init+0x2d0>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	600b      	str	r3, [r1, #0]
 800286c:	e021      	b.n	80028b2 <HAL_GPIO_Init+0x2e2>
 800286e:	bf00      	nop
 8002870:	10320000 	.word	0x10320000
 8002874:	10310000 	.word	0x10310000
 8002878:	10220000 	.word	0x10220000
 800287c:	10210000 	.word	0x10210000
 8002880:	10120000 	.word	0x10120000
 8002884:	10110000 	.word	0x10110000
 8002888:	40021000 	.word	0x40021000
 800288c:	40010000 	.word	0x40010000
 8002890:	40010800 	.word	0x40010800
 8002894:	40010c00 	.word	0x40010c00
 8002898:	40011000 	.word	0x40011000
 800289c:	40011400 	.word	0x40011400
 80028a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_GPIO_Init+0x304>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	4909      	ldr	r1, [pc, #36]	; (80028d4 <HAL_GPIO_Init+0x304>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	fa22 f303 	lsr.w	r3, r2, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f47f ae8e 	bne.w	80025e4 <HAL_GPIO_Init+0x14>
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	372c      	adds	r7, #44	; 0x2c
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	40010400 	.word	0x40010400

080028d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
 80028e4:	4613      	mov	r3, r2
 80028e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028f4:	e003      	b.n	80028fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028f6:	887b      	ldrh	r3, [r7, #2]
 80028f8:	041a      	lsls	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	611a      	str	r2, [r3, #16]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d006      	beq.n	800292c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800291e:	4a05      	ldr	r2, [pc, #20]	; (8002934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f806 	bl	8002938 <HAL_GPIO_EXTI_Callback>
  }
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40010400 	.word	0x40010400

08002938 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e12b      	b.n	8002bb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe fca6 	bl	80012c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2224      	movs	r2, #36	; 0x24
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800299e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029b0:	f001 fbca 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 80029b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4a81      	ldr	r2, [pc, #516]	; (8002bc0 <HAL_I2C_Init+0x274>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d807      	bhi.n	80029d0 <HAL_I2C_Init+0x84>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a80      	ldr	r2, [pc, #512]	; (8002bc4 <HAL_I2C_Init+0x278>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	bf94      	ite	ls
 80029c8:	2301      	movls	r3, #1
 80029ca:	2300      	movhi	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e006      	b.n	80029de <HAL_I2C_Init+0x92>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a7d      	ldr	r2, [pc, #500]	; (8002bc8 <HAL_I2C_Init+0x27c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	bf94      	ite	ls
 80029d8:	2301      	movls	r3, #1
 80029da:	2300      	movhi	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e0e7      	b.n	8002bb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4a78      	ldr	r2, [pc, #480]	; (8002bcc <HAL_I2C_Init+0x280>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	0c9b      	lsrs	r3, r3, #18
 80029f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4a6a      	ldr	r2, [pc, #424]	; (8002bc0 <HAL_I2C_Init+0x274>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d802      	bhi.n	8002a20 <HAL_I2C_Init+0xd4>
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	e009      	b.n	8002a34 <HAL_I2C_Init+0xe8>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a26:	fb02 f303 	mul.w	r3, r2, r3
 8002a2a:	4a69      	ldr	r2, [pc, #420]	; (8002bd0 <HAL_I2C_Init+0x284>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	3301      	adds	r3, #1
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	495c      	ldr	r1, [pc, #368]	; (8002bc0 <HAL_I2C_Init+0x274>)
 8002a50:	428b      	cmp	r3, r1
 8002a52:	d819      	bhi.n	8002a88 <HAL_I2C_Init+0x13c>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1e59      	subs	r1, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a62:	1c59      	adds	r1, r3, #1
 8002a64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a68:	400b      	ands	r3, r1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_I2C_Init+0x138>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1e59      	subs	r1, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a82:	e051      	b.n	8002b28 <HAL_I2C_Init+0x1dc>
 8002a84:	2304      	movs	r3, #4
 8002a86:	e04f      	b.n	8002b28 <HAL_I2C_Init+0x1dc>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d111      	bne.n	8002ab4 <HAL_I2C_Init+0x168>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e58      	subs	r0, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	440b      	add	r3, r1
 8002a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e012      	b.n	8002ada <HAL_I2C_Init+0x18e>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1e58      	subs	r0, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6859      	ldr	r1, [r3, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	0099      	lsls	r1, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aca:	3301      	adds	r3, #1
 8002acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf0c      	ite	eq
 8002ad4:	2301      	moveq	r3, #1
 8002ad6:	2300      	movne	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_I2C_Init+0x196>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e022      	b.n	8002b28 <HAL_I2C_Init+0x1dc>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10e      	bne.n	8002b08 <HAL_I2C_Init+0x1bc>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1e58      	subs	r0, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6859      	ldr	r1, [r3, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	440b      	add	r3, r1
 8002af8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b06:	e00f      	b.n	8002b28 <HAL_I2C_Init+0x1dc>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1e58      	subs	r0, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	0099      	lsls	r1, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	6809      	ldr	r1, [r1, #0]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6911      	ldr	r1, [r2, #16]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68d2      	ldr	r2, [r2, #12]
 8002b62:	4311      	orrs	r1, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	000186a0 	.word	0x000186a0
 8002bc4:	001e847f 	.word	0x001e847f
 8002bc8:	003d08ff 	.word	0x003d08ff
 8002bcc:	431bde83 	.word	0x431bde83
 8002bd0:	10624dd3 	.word	0x10624dd3

08002bd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	461a      	mov	r2, r3
 8002be0:	460b      	mov	r3, r1
 8002be2:	817b      	strh	r3, [r7, #10]
 8002be4:	4613      	mov	r3, r2
 8002be6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002be8:	f7ff fb84 	bl	80022f4 <HAL_GetTick>
 8002bec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	f040 80e0 	bne.w	8002dbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2319      	movs	r3, #25
 8002c02:	2201      	movs	r2, #1
 8002c04:	4970      	ldr	r1, [pc, #448]	; (8002dc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fc9e 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c12:	2302      	movs	r3, #2
 8002c14:	e0d3      	b.n	8002dbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_I2C_Master_Transmit+0x50>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e0cc      	b.n	8002dbe <HAL_I2C_Master_Transmit+0x1ea>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d007      	beq.n	8002c4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0201 	orr.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2221      	movs	r2, #33	; 0x21
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2210      	movs	r2, #16
 8002c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	893a      	ldrh	r2, [r7, #8]
 8002c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4a50      	ldr	r2, [pc, #320]	; (8002dcc <HAL_I2C_Master_Transmit+0x1f8>)
 8002c8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c8c:	8979      	ldrh	r1, [r7, #10]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	6a3a      	ldr	r2, [r7, #32]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fb08 	bl	80032a8 <I2C_MasterRequestWrite>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e08d      	b.n	8002dbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cb8:	e066      	b.n	8002d88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	6a39      	ldr	r1, [r7, #32]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fd5c 	bl	800377c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00d      	beq.n	8002ce6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d107      	bne.n	8002ce2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e06b      	b.n	8002dbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	781a      	ldrb	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d11b      	bne.n	8002d5c <HAL_I2C_Master_Transmit+0x188>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d017      	beq.n	8002d5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	781a      	ldrb	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	6a39      	ldr	r1, [r7, #32]
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fd53 	bl	800380c <I2C_WaitOnBTFFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00d      	beq.n	8002d88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d107      	bne.n	8002d84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e01a      	b.n	8002dbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d194      	bne.n	8002cba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	00100002 	.word	0x00100002
 8002dcc:	ffff0000 	.word	0xffff0000

08002dd0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08c      	sub	sp, #48	; 0x30
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	460b      	mov	r3, r1
 8002dde:	817b      	strh	r3, [r7, #10]
 8002de0:	4613      	mov	r3, r2
 8002de2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7ff fa84 	bl	80022f4 <HAL_GetTick>
 8002dec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	f040 824b 	bne.w	8003292 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	2319      	movs	r3, #25
 8002e02:	2201      	movs	r2, #1
 8002e04:	497f      	ldr	r1, [pc, #508]	; (8003004 <HAL_I2C_Master_Receive+0x234>)
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fb9e 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
 8002e14:	e23e      	b.n	8003294 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_I2C_Master_Receive+0x54>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e237      	b.n	8003294 <HAL_I2C_Master_Receive+0x4c4>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d007      	beq.n	8002e4a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0201 	orr.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2222      	movs	r2, #34	; 0x22
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2210      	movs	r2, #16
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	893a      	ldrh	r2, [r7, #8]
 8002e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4a5f      	ldr	r2, [pc, #380]	; (8003008 <HAL_I2C_Master_Receive+0x238>)
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e8c:	8979      	ldrh	r1, [r7, #10]
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fa8a 	bl	80033ac <I2C_MasterRequestRead>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e1f8      	b.n	8003294 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d113      	bne.n	8002ed2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e1cc      	b.n	800326c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d11e      	bne.n	8002f18 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eea:	b672      	cpsid	i
}
 8002eec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f14:	b662      	cpsie	i
}
 8002f16:	e035      	b.n	8002f84 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d11e      	bne.n	8002f5e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f30:	b672      	cpsid	i
}
 8002f32:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f5a:	b662      	cpsie	i
}
 8002f5c:	e012      	b.n	8002f84 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f84:	e172      	b.n	800326c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	f200 811f 	bhi.w	80031ce <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d123      	bne.n	8002fe0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fc7d 	bl	800389c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e173      	b.n	8003294 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fde:	e145      	b.n	800326c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d152      	bne.n	800308e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	2200      	movs	r2, #0
 8002ff0:	4906      	ldr	r1, [pc, #24]	; (800300c <HAL_I2C_Master_Receive+0x23c>)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 faa8 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e148      	b.n	8003294 <HAL_I2C_Master_Receive+0x4c4>
 8003002:	bf00      	nop
 8003004:	00100002 	.word	0x00100002
 8003008:	ffff0000 	.word	0xffff0000
 800300c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003010:	b672      	cpsid	i
}
 8003012:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003056:	b662      	cpsie	i
}
 8003058:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800308c:	e0ee      	b.n	800326c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	2200      	movs	r2, #0
 8003096:	4981      	ldr	r1, [pc, #516]	; (800329c <HAL_I2C_Master_Receive+0x4cc>)
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fa55 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0f5      	b.n	8003294 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030b8:	b672      	cpsid	i
}
 80030ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80030ee:	4b6c      	ldr	r3, [pc, #432]	; (80032a0 <HAL_I2C_Master_Receive+0x4d0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	08db      	lsrs	r3, r3, #3
 80030f4:	4a6b      	ldr	r2, [pc, #428]	; (80032a4 <HAL_I2C_Master_Receive+0x4d4>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	0a1a      	lsrs	r2, r3, #8
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00da      	lsls	r2, r3, #3
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	3b01      	subs	r3, #1
 800310c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d118      	bne.n	8003146 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f043 0220 	orr.w	r2, r3, #32
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003136:	b662      	cpsie	i
}
 8003138:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e0a6      	b.n	8003294 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b04      	cmp	r3, #4
 8003152:	d1d9      	bne.n	8003108 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003196:	b662      	cpsie	i
}
 8003198:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031cc:	e04e      	b.n	800326c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fb62 	bl	800389c <I2C_WaitOnRXNEFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e058      	b.n	8003294 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b04      	cmp	r3, #4
 8003220:	d124      	bne.n	800326c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003226:	2b03      	cmp	r3, #3
 8003228:	d107      	bne.n	800323a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003238:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	f47f ae88 	bne.w	8002f86 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003292:	2302      	movs	r3, #2
  }
}
 8003294:	4618      	mov	r0, r3
 8003296:	3728      	adds	r7, #40	; 0x28
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	00010004 	.word	0x00010004
 80032a0:	20000010 	.word	0x20000010
 80032a4:	14f8b589 	.word	0x14f8b589

080032a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	460b      	mov	r3, r1
 80032b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d006      	beq.n	80032d2 <I2C_MasterRequestWrite+0x2a>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d003      	beq.n	80032d2 <I2C_MasterRequestWrite+0x2a>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032d0:	d108      	bne.n	80032e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e00b      	b.n	80032fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	2b12      	cmp	r3, #18
 80032ea:	d107      	bne.n	80032fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f91d 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00d      	beq.n	8003330 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003322:	d103      	bne.n	800332c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800332a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e035      	b.n	800339c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003338:	d108      	bne.n	800334c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800333a:	897b      	ldrh	r3, [r7, #10]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003348:	611a      	str	r2, [r3, #16]
 800334a:	e01b      	b.n	8003384 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800334c:	897b      	ldrh	r3, [r7, #10]
 800334e:	11db      	asrs	r3, r3, #7
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f003 0306 	and.w	r3, r3, #6
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f063 030f 	orn	r3, r3, #15
 800335c:	b2da      	uxtb	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	490e      	ldr	r1, [pc, #56]	; (80033a4 <I2C_MasterRequestWrite+0xfc>)
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f966 	bl	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e010      	b.n	800339c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800337a:	897b      	ldrh	r3, [r7, #10]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4907      	ldr	r1, [pc, #28]	; (80033a8 <I2C_MasterRequestWrite+0x100>)
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f956 	bl	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	00010008 	.word	0x00010008
 80033a8:	00010002 	.word	0x00010002

080033ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	460b      	mov	r3, r1
 80033ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d006      	beq.n	80033e6 <I2C_MasterRequestRead+0x3a>
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d003      	beq.n	80033e6 <I2C_MasterRequestRead+0x3a>
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033e4:	d108      	bne.n	80033f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e00b      	b.n	8003410 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	2b11      	cmp	r3, #17
 80033fe:	d107      	bne.n	8003410 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800340e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f893 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00d      	beq.n	8003444 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003436:	d103      	bne.n	8003440 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800343e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e079      	b.n	8003538 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800344c:	d108      	bne.n	8003460 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	b2da      	uxtb	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	611a      	str	r2, [r3, #16]
 800345e:	e05f      	b.n	8003520 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003460:	897b      	ldrh	r3, [r7, #10]
 8003462:	11db      	asrs	r3, r3, #7
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f003 0306 	and.w	r3, r3, #6
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f063 030f 	orn	r3, r3, #15
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4930      	ldr	r1, [pc, #192]	; (8003540 <I2C_MasterRequestRead+0x194>)
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f8dc 	bl	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e054      	b.n	8003538 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800348e:	897b      	ldrh	r3, [r7, #10]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4929      	ldr	r1, [pc, #164]	; (8003544 <I2C_MasterRequestRead+0x198>)
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f8cc 	bl	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e044      	b.n	8003538 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f831 	bl	8003548 <I2C_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00d      	beq.n	8003508 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034fa:	d103      	bne.n	8003504 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e017      	b.n	8003538 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003508:	897b      	ldrh	r3, [r7, #10]
 800350a:	11db      	asrs	r3, r3, #7
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f003 0306 	and.w	r3, r3, #6
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f063 030e 	orn	r3, r3, #14
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4907      	ldr	r1, [pc, #28]	; (8003544 <I2C_MasterRequestRead+0x198>)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f888 	bl	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	00010008 	.word	0x00010008
 8003544:	00010002 	.word	0x00010002

08003548 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003558:	e048      	b.n	80035ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d044      	beq.n	80035ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7fe fec7 	bl	80022f4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d139      	bne.n	80035ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	0c1b      	lsrs	r3, r3, #16
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b01      	cmp	r3, #1
 8003580:	d10d      	bne.n	800359e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	43da      	mvns	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4013      	ands	r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	e00c      	b.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	43da      	mvns	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	4013      	ands	r3, r2
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	461a      	mov	r2, r3
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d116      	bne.n	80035ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f043 0220 	orr.w	r2, r3, #32
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e023      	b.n	8003634 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	0c1b      	lsrs	r3, r3, #16
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d10d      	bne.n	8003612 <I2C_WaitOnFlagUntilTimeout+0xca>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	43da      	mvns	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4013      	ands	r3, r2
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf0c      	ite	eq
 8003608:	2301      	moveq	r3, #1
 800360a:	2300      	movne	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	461a      	mov	r2, r3
 8003610:	e00c      	b.n	800362c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	43da      	mvns	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4013      	ands	r3, r2
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf0c      	ite	eq
 8003624:	2301      	moveq	r3, #1
 8003626:	2300      	movne	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	429a      	cmp	r2, r3
 8003630:	d093      	beq.n	800355a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800364a:	e071      	b.n	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365a:	d123      	bne.n	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003674:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f043 0204 	orr.w	r2, r3, #4
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e067      	b.n	8003774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036aa:	d041      	beq.n	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ac:	f7fe fe22 	bl	80022f4 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d302      	bcc.n	80036c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d136      	bne.n	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d10c      	bne.n	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	43da      	mvns	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4013      	ands	r3, r2
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	e00b      	b.n	80036fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	43da      	mvns	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4013      	ands	r3, r2
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e021      	b.n	8003774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	0c1b      	lsrs	r3, r3, #16
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b01      	cmp	r3, #1
 8003738:	d10c      	bne.n	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	43da      	mvns	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4013      	ands	r3, r2
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	bf14      	ite	ne
 800374c:	2301      	movne	r3, #1
 800374e:	2300      	moveq	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	e00b      	b.n	800376c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	43da      	mvns	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4013      	ands	r3, r2
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	bf14      	ite	ne
 8003766:	2301      	movne	r3, #1
 8003768:	2300      	moveq	r3, #0
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	f47f af6d 	bne.w	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003788:	e034      	b.n	80037f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f8e3 	bl	8003956 <I2C_IsAcknowledgeFailed>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e034      	b.n	8003804 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d028      	beq.n	80037f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a2:	f7fe fda7 	bl	80022f4 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d302      	bcc.n	80037b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d11d      	bne.n	80037f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b80      	cmp	r3, #128	; 0x80
 80037c4:	d016      	beq.n	80037f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	f043 0220 	orr.w	r2, r3, #32
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e007      	b.n	8003804 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fe:	2b80      	cmp	r3, #128	; 0x80
 8003800:	d1c3      	bne.n	800378a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003818:	e034      	b.n	8003884 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f89b 	bl	8003956 <I2C_IsAcknowledgeFailed>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e034      	b.n	8003894 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d028      	beq.n	8003884 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003832:	f7fe fd5f 	bl	80022f4 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d11d      	bne.n	8003884 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b04      	cmp	r3, #4
 8003854:	d016      	beq.n	8003884 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	f043 0220 	orr.w	r2, r3, #32
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e007      	b.n	8003894 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b04      	cmp	r3, #4
 8003890:	d1c3      	bne.n	800381a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038a8:	e049      	b.n	800393e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d119      	bne.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0210 	mvn.w	r2, #16
 80038c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e030      	b.n	800394e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ec:	f7fe fd02 	bl	80022f4 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d302      	bcc.n	8003902 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d11d      	bne.n	800393e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b40      	cmp	r3, #64	; 0x40
 800390e:	d016      	beq.n	800393e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e007      	b.n	800394e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d1ae      	bne.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396c:	d11b      	bne.n	80039a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003976:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f043 0204 	orr.w	r2, r3, #4
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e272      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8087 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039d4:	4b92      	ldr	r3, [pc, #584]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d00c      	beq.n	80039fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039e0:	4b8f      	ldr	r3, [pc, #572]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d112      	bne.n	8003a12 <HAL_RCC_OscConfig+0x5e>
 80039ec:	4b8c      	ldr	r3, [pc, #560]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d10b      	bne.n	8003a12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fa:	4b89      	ldr	r3, [pc, #548]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d06c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x12c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d168      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e24c      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCC_OscConfig+0x76>
 8003a1c:	4b80      	ldr	r3, [pc, #512]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a7f      	ldr	r2, [pc, #508]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	e02e      	b.n	8003a88 <HAL_RCC_OscConfig+0xd4>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x98>
 8003a32:	4b7b      	ldr	r3, [pc, #492]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a7a      	ldr	r2, [pc, #488]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b78      	ldr	r3, [pc, #480]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a77      	ldr	r2, [pc, #476]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e01d      	b.n	8003a88 <HAL_RCC_OscConfig+0xd4>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0xbc>
 8003a56:	4b72      	ldr	r3, [pc, #456]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a71      	ldr	r2, [pc, #452]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b6f      	ldr	r3, [pc, #444]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a6e      	ldr	r2, [pc, #440]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0xd4>
 8003a70:	4b6b      	ldr	r3, [pc, #428]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a6a      	ldr	r2, [pc, #424]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b68      	ldr	r3, [pc, #416]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a67      	ldr	r2, [pc, #412]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fe fc30 	bl	80022f4 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fe fc2c 	bl	80022f4 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e200      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	4b5d      	ldr	r3, [pc, #372]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0xe4>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fc1c 	bl	80022f4 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fe fc18 	bl	80022f4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e1ec      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x10c>
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d063      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aee:	4b4c      	ldr	r3, [pc, #304]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003afa:	4b49      	ldr	r3, [pc, #292]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d11c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x18c>
 8003b06:	4b46      	ldr	r3, [pc, #280]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d116      	bne.n	8003b40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b12:	4b43      	ldr	r3, [pc, #268]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x176>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e1c0      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2a:	4b3d      	ldr	r3, [pc, #244]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4939      	ldr	r1, [pc, #228]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	e03a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b48:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4e:	f7fe fbd1 	bl	80022f4 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b56:	f7fe fbcd 	bl	80022f4 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e1a1      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	4b2d      	ldr	r3, [pc, #180]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b74:	4b2a      	ldr	r3, [pc, #168]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4927      	ldr	r1, [pc, #156]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]
 8003b88:	e015      	b.n	8003bb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b8a:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe fbb0 	bl	80022f4 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b98:	f7fe fbac 	bl	80022f4 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e180      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d03a      	beq.n	8003c38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d019      	beq.n	8003bfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bca:	4b17      	ldr	r3, [pc, #92]	; (8003c28 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd0:	f7fe fb90 	bl	80022f4 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd8:	f7fe fb8c 	bl	80022f4 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e160      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	f000 face 	bl	8004198 <RCC_Delay>
 8003bfc:	e01c      	b.n	8003c38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <HAL_RCC_OscConfig+0x274>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c04:	f7fe fb76 	bl	80022f4 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c0a:	e00f      	b.n	8003c2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0c:	f7fe fb72 	bl	80022f4 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d908      	bls.n	8003c2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e146      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	42420000 	.word	0x42420000
 8003c28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c2c:	4b92      	ldr	r3, [pc, #584]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e9      	bne.n	8003c0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a6 	beq.w	8003d92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4a:	4b8b      	ldr	r3, [pc, #556]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10d      	bne.n	8003c72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	4b88      	ldr	r3, [pc, #544]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	4a87      	ldr	r2, [pc, #540]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	61d3      	str	r3, [r2, #28]
 8003c62:	4b85      	ldr	r3, [pc, #532]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c72:	4b82      	ldr	r3, [pc, #520]	; (8003e7c <HAL_RCC_OscConfig+0x4c8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d118      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7e:	4b7f      	ldr	r3, [pc, #508]	; (8003e7c <HAL_RCC_OscConfig+0x4c8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a7e      	ldr	r2, [pc, #504]	; (8003e7c <HAL_RCC_OscConfig+0x4c8>)
 8003c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8a:	f7fe fb33 	bl	80022f4 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c92:	f7fe fb2f 	bl	80022f4 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b64      	cmp	r3, #100	; 0x64
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e103      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca4:	4b75      	ldr	r3, [pc, #468]	; (8003e7c <HAL_RCC_OscConfig+0x4c8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d106      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x312>
 8003cb8:	4b6f      	ldr	r3, [pc, #444]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	4a6e      	ldr	r2, [pc, #440]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6213      	str	r3, [r2, #32]
 8003cc4:	e02d      	b.n	8003d22 <HAL_RCC_OscConfig+0x36e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x334>
 8003cce:	4b6a      	ldr	r3, [pc, #424]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	4a69      	ldr	r2, [pc, #420]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	6213      	str	r3, [r2, #32]
 8003cda:	4b67      	ldr	r3, [pc, #412]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	4a66      	ldr	r2, [pc, #408]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	f023 0304 	bic.w	r3, r3, #4
 8003ce4:	6213      	str	r3, [r2, #32]
 8003ce6:	e01c      	b.n	8003d22 <HAL_RCC_OscConfig+0x36e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	d10c      	bne.n	8003d0a <HAL_RCC_OscConfig+0x356>
 8003cf0:	4b61      	ldr	r3, [pc, #388]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	4a60      	ldr	r2, [pc, #384]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cf6:	f043 0304 	orr.w	r3, r3, #4
 8003cfa:	6213      	str	r3, [r2, #32]
 8003cfc:	4b5e      	ldr	r3, [pc, #376]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	4a5d      	ldr	r2, [pc, #372]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6213      	str	r3, [r2, #32]
 8003d08:	e00b      	b.n	8003d22 <HAL_RCC_OscConfig+0x36e>
 8003d0a:	4b5b      	ldr	r3, [pc, #364]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	4a5a      	ldr	r2, [pc, #360]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	6213      	str	r3, [r2, #32]
 8003d16:	4b58      	ldr	r3, [pc, #352]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	4a57      	ldr	r2, [pc, #348]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d015      	beq.n	8003d56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2a:	f7fe fae3 	bl	80022f4 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d32:	f7fe fadf 	bl	80022f4 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0b1      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	4b4b      	ldr	r3, [pc, #300]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0ee      	beq.n	8003d32 <HAL_RCC_OscConfig+0x37e>
 8003d54:	e014      	b.n	8003d80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d56:	f7fe facd 	bl	80022f4 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5c:	e00a      	b.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5e:	f7fe fac9 	bl	80022f4 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e09b      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d74:	4b40      	ldr	r3, [pc, #256]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ee      	bne.n	8003d5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d105      	bne.n	8003d92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d86:	4b3c      	ldr	r3, [pc, #240]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4a3b      	ldr	r2, [pc, #236]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8087 	beq.w	8003eaa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d9c:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d061      	beq.n	8003e6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d146      	bne.n	8003e3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db0:	4b33      	ldr	r3, [pc, #204]	; (8003e80 <HAL_RCC_OscConfig+0x4cc>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fe fa9d 	bl	80022f4 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fe fa99 	bl	80022f4 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e06d      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd0:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de4:	d108      	bne.n	8003df8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003de6:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	4921      	ldr	r1, [pc, #132]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df8:	4b1f      	ldr	r3, [pc, #124]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a19      	ldr	r1, [r3, #32]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	491b      	ldr	r1, [pc, #108]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e10:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x4cc>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e16:	f7fe fa6d 	bl	80022f4 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1e:	f7fe fa69 	bl	80022f4 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e03d      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x46a>
 8003e3c:	e035      	b.n	8003eaa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3e:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <HAL_RCC_OscConfig+0x4cc>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fe fa56 	bl	80022f4 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fe fa52 	bl	80022f4 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e026      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x498>
 8003e6a:	e01e      	b.n	8003eaa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e019      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_RCC_OscConfig+0x500>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d106      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d001      	beq.n	8003eaa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000

08003eb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0d0      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b6a      	ldr	r3, [pc, #424]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d910      	bls.n	8003efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b67      	ldr	r3, [pc, #412]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 0207 	bic.w	r2, r3, #7
 8003ee2:	4965      	ldr	r1, [pc, #404]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b63      	ldr	r3, [pc, #396]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0b8      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d020      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f14:	4b59      	ldr	r3, [pc, #356]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4a58      	ldr	r2, [pc, #352]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f2c:	4b53      	ldr	r3, [pc, #332]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	4a52      	ldr	r2, [pc, #328]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f38:	4b50      	ldr	r3, [pc, #320]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	494d      	ldr	r1, [pc, #308]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d040      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5e:	4b47      	ldr	r3, [pc, #284]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d115      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e07f      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f76:	4b41      	ldr	r3, [pc, #260]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e073      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f86:	4b3d      	ldr	r3, [pc, #244]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e06b      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f96:	4b39      	ldr	r3, [pc, #228]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f023 0203 	bic.w	r2, r3, #3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4936      	ldr	r1, [pc, #216]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fa8:	f7fe f9a4 	bl	80022f4 <HAL_GetTick>
 8003fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb0:	f7fe f9a0 	bl	80022f4 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e053      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc6:	4b2d      	ldr	r3, [pc, #180]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 020c 	and.w	r2, r3, #12
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d1eb      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd8:	4b27      	ldr	r3, [pc, #156]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d210      	bcs.n	8004008 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe6:	4b24      	ldr	r3, [pc, #144]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 0207 	bic.w	r2, r3, #7
 8003fee:	4922      	ldr	r1, [pc, #136]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e032      	b.n	800406e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004014:	4b19      	ldr	r3, [pc, #100]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4916      	ldr	r1, [pc, #88]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8004022:	4313      	orrs	r3, r2
 8004024:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004032:	4b12      	ldr	r3, [pc, #72]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	490e      	ldr	r1, [pc, #56]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004046:	f000 f821 	bl	800408c <HAL_RCC_GetSysClockFreq>
 800404a:	4602      	mov	r2, r0
 800404c:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	490a      	ldr	r1, [pc, #40]	; (8004080 <HAL_RCC_ClockConfig+0x1c8>)
 8004058:	5ccb      	ldrb	r3, [r1, r3]
 800405a:	fa22 f303 	lsr.w	r3, r2, r3
 800405e:	4a09      	ldr	r2, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1cc>)
 8004060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004062:	4b09      	ldr	r3, [pc, #36]	; (8004088 <HAL_RCC_ClockConfig+0x1d0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe f902 	bl	8002270 <HAL_InitTick>

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40022000 	.word	0x40022000
 800407c:	40021000 	.word	0x40021000
 8004080:	0800b4e4 	.word	0x0800b4e4
 8004084:	20000010 	.word	0x20000010
 8004088:	20000014 	.word	0x20000014

0800408c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	2300      	movs	r3, #0
 80040a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040a6:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <HAL_RCC_GetSysClockFreq+0x94>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d002      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x30>
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d003      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x36>
 80040ba:	e027      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <HAL_RCC_GetSysClockFreq+0x98>)
 80040be:	613b      	str	r3, [r7, #16]
      break;
 80040c0:	e027      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	0c9b      	lsrs	r3, r3, #18
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	4a17      	ldr	r2, [pc, #92]	; (8004128 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040cc:	5cd3      	ldrb	r3, [r2, r3]
 80040ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d010      	beq.n	80040fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040da:	4b11      	ldr	r3, [pc, #68]	; (8004120 <HAL_RCC_GetSysClockFreq+0x94>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	0c5b      	lsrs	r3, r3, #17
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	4a11      	ldr	r2, [pc, #68]	; (800412c <HAL_RCC_GetSysClockFreq+0xa0>)
 80040e6:	5cd3      	ldrb	r3, [r2, r3]
 80040e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a0d      	ldr	r2, [pc, #52]	; (8004124 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ee:	fb03 f202 	mul.w	r2, r3, r2
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	e004      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a0c      	ldr	r2, [pc, #48]	; (8004130 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004100:	fb02 f303 	mul.w	r3, r2, r3
 8004104:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	613b      	str	r3, [r7, #16]
      break;
 800410a:	e002      	b.n	8004112 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_RCC_GetSysClockFreq+0x98>)
 800410e:	613b      	str	r3, [r7, #16]
      break;
 8004110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004112:	693b      	ldr	r3, [r7, #16]
}
 8004114:	4618      	mov	r0, r3
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000
 8004124:	007a1200 	.word	0x007a1200
 8004128:	0800b4fc 	.word	0x0800b4fc
 800412c:	0800b50c 	.word	0x0800b50c
 8004130:	003d0900 	.word	0x003d0900

08004134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004138:	4b02      	ldr	r3, [pc, #8]	; (8004144 <HAL_RCC_GetHCLKFreq+0x10>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	20000010 	.word	0x20000010

08004148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800414c:	f7ff fff2 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4903      	ldr	r1, [pc, #12]	; (800416c <HAL_RCC_GetPCLK1Freq+0x24>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	0800b4f4 	.word	0x0800b4f4

08004170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004174:	f7ff ffde 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	0adb      	lsrs	r3, r3, #11
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4903      	ldr	r1, [pc, #12]	; (8004194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40021000 	.word	0x40021000
 8004194:	0800b4f4 	.word	0x0800b4f4

08004198 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041a0:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <RCC_Delay+0x34>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <RCC_Delay+0x38>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	0a5b      	lsrs	r3, r3, #9
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041b4:	bf00      	nop
  }
  while (Delay --);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1e5a      	subs	r2, r3, #1
 80041ba:	60fa      	str	r2, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f9      	bne.n	80041b4 <RCC_Delay+0x1c>
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr
 80041cc:	20000010 	.word	0x20000010
 80041d0:	10624dd3 	.word	0x10624dd3

080041d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e041      	b.n	800426a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd f8a0 	bl	8001340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f000 fd68 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	d001      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e03a      	b.n	8004302 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a18      	ldr	r2, [pc, #96]	; (800430c <HAL_TIM_Base_Start_IT+0x98>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00e      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x58>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b6:	d009      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x58>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a14      	ldr	r2, [pc, #80]	; (8004310 <HAL_TIM_Base_Start_IT+0x9c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x58>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a13      	ldr	r2, [pc, #76]	; (8004314 <HAL_TIM_Base_Start_IT+0xa0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d111      	bne.n	80042f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b06      	cmp	r3, #6
 80042dc:	d010      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ee:	e007      	b.n	8004300 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800

08004318 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e041      	b.n	80043ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f839 	bl	80043b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f000 fcc6 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d109      	bne.n	80043ec <HAL_TIM_PWM_Start+0x24>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e022      	b.n	8004432 <HAL_TIM_PWM_Start+0x6a>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d109      	bne.n	8004406 <HAL_TIM_PWM_Start+0x3e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	bf14      	ite	ne
 80043fe:	2301      	movne	r3, #1
 8004400:	2300      	moveq	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	e015      	b.n	8004432 <HAL_TIM_PWM_Start+0x6a>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d109      	bne.n	8004420 <HAL_TIM_PWM_Start+0x58>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e008      	b.n	8004432 <HAL_TIM_PWM_Start+0x6a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	bf14      	ite	ne
 800442c:	2301      	movne	r3, #1
 800442e:	2300      	moveq	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e05e      	b.n	80044f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d104      	bne.n	800444a <HAL_TIM_PWM_Start+0x82>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004448:	e013      	b.n	8004472 <HAL_TIM_PWM_Start+0xaa>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b04      	cmp	r3, #4
 800444e:	d104      	bne.n	800445a <HAL_TIM_PWM_Start+0x92>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004458:	e00b      	b.n	8004472 <HAL_TIM_PWM_Start+0xaa>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d104      	bne.n	800446a <HAL_TIM_PWM_Start+0xa2>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004468:	e003      	b.n	8004472 <HAL_TIM_PWM_Start+0xaa>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2201      	movs	r2, #1
 8004478:	6839      	ldr	r1, [r7, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f000 feb4 	bl	80051e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <HAL_TIM_PWM_Start+0x138>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d107      	bne.n	800449a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a18      	ldr	r2, [pc, #96]	; (8004500 <HAL_TIM_PWM_Start+0x138>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00e      	beq.n	80044c2 <HAL_TIM_PWM_Start+0xfa>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ac:	d009      	beq.n	80044c2 <HAL_TIM_PWM_Start+0xfa>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a14      	ldr	r2, [pc, #80]	; (8004504 <HAL_TIM_PWM_Start+0x13c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <HAL_TIM_PWM_Start+0xfa>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a12      	ldr	r2, [pc, #72]	; (8004508 <HAL_TIM_PWM_Start+0x140>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d111      	bne.n	80044e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b06      	cmp	r3, #6
 80044d2:	d010      	beq.n	80044f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e4:	e007      	b.n	80044f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0201 	orr.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800

0800450c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e093      	b.n	8004648 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d106      	bne.n	800453a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7fc ff21 	bl	800137c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004550:	f023 0307 	bic.w	r3, r3, #7
 8004554:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3304      	adds	r3, #4
 800455e:	4619      	mov	r1, r3
 8004560:	4610      	mov	r0, r2
 8004562:	f000 fbc1 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	021b      	lsls	r3, r3, #8
 800459e:	4313      	orrs	r3, r2
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045ac:	f023 030c 	bic.w	r3, r3, #12
 80045b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	4313      	orrs	r3, r2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	011a      	lsls	r2, r3, #4
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	031b      	lsls	r3, r3, #12
 80045dc:	4313      	orrs	r3, r2
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	4313      	orrs	r3, r2
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004660:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004668:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004670:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004678:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d110      	bne.n	80046a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d102      	bne.n	800468c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004686:	7b7b      	ldrb	r3, [r7, #13]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d001      	beq.n	8004690 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e069      	b.n	8004764 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a0:	e031      	b.n	8004706 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d110      	bne.n	80046ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046a8:	7bbb      	ldrb	r3, [r7, #14]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d102      	bne.n	80046b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046ae:	7b3b      	ldrb	r3, [r7, #12]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d001      	beq.n	80046b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e055      	b.n	8004764 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046c8:	e01d      	b.n	8004706 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d108      	bne.n	80046e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046d0:	7bbb      	ldrb	r3, [r7, #14]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d105      	bne.n	80046e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046d6:	7b7b      	ldrb	r3, [r7, #13]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d102      	bne.n	80046e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046dc:	7b3b      	ldrb	r3, [r7, #12]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d001      	beq.n	80046e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e03e      	b.n	8004764 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_TIM_Encoder_Start+0xc4>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b04      	cmp	r3, #4
 8004710:	d008      	beq.n	8004724 <HAL_TIM_Encoder_Start+0xd4>
 8004712:	e00f      	b.n	8004734 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2201      	movs	r2, #1
 800471a:	2100      	movs	r1, #0
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fd63 	bl	80051e8 <TIM_CCxChannelCmd>
      break;
 8004722:	e016      	b.n	8004752 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2201      	movs	r2, #1
 800472a:	2104      	movs	r1, #4
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fd5b 	bl	80051e8 <TIM_CCxChannelCmd>
      break;
 8004732:	e00e      	b.n	8004752 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2201      	movs	r2, #1
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fd53 	bl	80051e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2201      	movs	r2, #1
 8004748:	2104      	movs	r1, #4
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fd4c 	bl	80051e8 <TIM_CCxChannelCmd>
      break;
 8004750:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b02      	cmp	r3, #2
 8004780:	d122      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b02      	cmp	r3, #2
 800478e:	d11b      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0202 	mvn.w	r2, #2
 8004798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fa7f 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 80047b4:	e005      	b.n	80047c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fa72 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fa81 	bl	8004cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d122      	bne.n	800481c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d11b      	bne.n	800481c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0204 	mvn.w	r2, #4
 80047ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fa55 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fa48 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fa57 	bl	8004cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b08      	cmp	r3, #8
 8004828:	d122      	bne.n	8004870 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b08      	cmp	r3, #8
 8004836:	d11b      	bne.n	8004870 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0208 	mvn.w	r2, #8
 8004840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2204      	movs	r2, #4
 8004846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fa2b 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 800485c:	e005      	b.n	800486a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fa1e 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fa2d 	bl	8004cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0310 	and.w	r3, r3, #16
 800487a:	2b10      	cmp	r3, #16
 800487c:	d122      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	2b10      	cmp	r3, #16
 800488a:	d11b      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0210 	mvn.w	r2, #16
 8004894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2208      	movs	r2, #8
 800489a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa01 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 80048b0:	e005      	b.n	80048be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f9f4 	bl	8004ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fa03 	bl	8004cc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d10e      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d107      	bne.n	80048f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0201 	mvn.w	r2, #1
 80048e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f9cf 	bl	8004c8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fa:	2b80      	cmp	r3, #128	; 0x80
 80048fc:	d10e      	bne.n	800491c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004908:	2b80      	cmp	r3, #128	; 0x80
 800490a:	d107      	bne.n	800491c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fd42 	bl	80053a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d10e      	bne.n	8004948 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004934:	2b40      	cmp	r3, #64	; 0x40
 8004936:	d107      	bne.n	8004948 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f9c7 	bl	8004cd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b20      	cmp	r3, #32
 8004954:	d10e      	bne.n	8004974 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b20      	cmp	r3, #32
 8004962:	d107      	bne.n	8004974 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0220 	mvn.w	r2, #32
 800496c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fd0d 	bl	800538e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004974:	bf00      	nop
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004996:	2302      	movs	r3, #2
 8004998:	e0ae      	b.n	8004af8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b0c      	cmp	r3, #12
 80049a6:	f200 809f 	bhi.w	8004ae8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049aa:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b0:	080049e5 	.word	0x080049e5
 80049b4:	08004ae9 	.word	0x08004ae9
 80049b8:	08004ae9 	.word	0x08004ae9
 80049bc:	08004ae9 	.word	0x08004ae9
 80049c0:	08004a25 	.word	0x08004a25
 80049c4:	08004ae9 	.word	0x08004ae9
 80049c8:	08004ae9 	.word	0x08004ae9
 80049cc:	08004ae9 	.word	0x08004ae9
 80049d0:	08004a67 	.word	0x08004a67
 80049d4:	08004ae9 	.word	0x08004ae9
 80049d8:	08004ae9 	.word	0x08004ae9
 80049dc:	08004ae9 	.word	0x08004ae9
 80049e0:	08004aa7 	.word	0x08004aa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 f9de 	bl	8004dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0208 	orr.w	r2, r2, #8
 80049fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0204 	bic.w	r2, r2, #4
 8004a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6999      	ldr	r1, [r3, #24]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	619a      	str	r2, [r3, #24]
      break;
 8004a22:	e064      	b.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fa24 	bl	8004e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6999      	ldr	r1, [r3, #24]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	021a      	lsls	r2, r3, #8
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	619a      	str	r2, [r3, #24]
      break;
 8004a64:	e043      	b.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fa6d 	bl	8004f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0208 	orr.w	r2, r2, #8
 8004a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69da      	ldr	r2, [r3, #28]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0204 	bic.w	r2, r2, #4
 8004a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69d9      	ldr	r1, [r3, #28]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	61da      	str	r2, [r3, #28]
      break;
 8004aa4:	e023      	b.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fab7 	bl	8005020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69da      	ldr	r2, [r3, #28]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69d9      	ldr	r1, [r3, #28]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	021a      	lsls	r2, r3, #8
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	61da      	str	r2, [r3, #28]
      break;
 8004ae6:	e002      	b.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	75fb      	strb	r3, [r7, #23]
      break;
 8004aec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_TIM_ConfigClockSource+0x1c>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e0b4      	b.n	8004c86 <HAL_TIM_ConfigClockSource+0x186>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b54:	d03e      	beq.n	8004bd4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5a:	f200 8087 	bhi.w	8004c6c <HAL_TIM_ConfigClockSource+0x16c>
 8004b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b62:	f000 8086 	beq.w	8004c72 <HAL_TIM_ConfigClockSource+0x172>
 8004b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6a:	d87f      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x16c>
 8004b6c:	2b70      	cmp	r3, #112	; 0x70
 8004b6e:	d01a      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0xa6>
 8004b70:	2b70      	cmp	r3, #112	; 0x70
 8004b72:	d87b      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x16c>
 8004b74:	2b60      	cmp	r3, #96	; 0x60
 8004b76:	d050      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x11a>
 8004b78:	2b60      	cmp	r3, #96	; 0x60
 8004b7a:	d877      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x16c>
 8004b7c:	2b50      	cmp	r3, #80	; 0x50
 8004b7e:	d03c      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0xfa>
 8004b80:	2b50      	cmp	r3, #80	; 0x50
 8004b82:	d873      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x16c>
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d058      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0x13a>
 8004b88:	2b40      	cmp	r3, #64	; 0x40
 8004b8a:	d86f      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x16c>
 8004b8c:	2b30      	cmp	r3, #48	; 0x30
 8004b8e:	d064      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0x15a>
 8004b90:	2b30      	cmp	r3, #48	; 0x30
 8004b92:	d86b      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x16c>
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d060      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0x15a>
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d867      	bhi.n	8004c6c <HAL_TIM_ConfigClockSource+0x16c>
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d05c      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba0:	2b10      	cmp	r3, #16
 8004ba2:	d05a      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba4:	e062      	b.n	8004c6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6899      	ldr	r1, [r3, #8]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f000 faf8 	bl	80051aa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	609a      	str	r2, [r3, #8]
      break;
 8004bd2:	e04f      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	6899      	ldr	r1, [r3, #8]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f000 fae1 	bl	80051aa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bf6:	609a      	str	r2, [r3, #8]
      break;
 8004bf8:	e03c      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6859      	ldr	r1, [r3, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	461a      	mov	r2, r3
 8004c08:	f000 fa58 	bl	80050bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2150      	movs	r1, #80	; 0x50
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 faaf 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 8004c18:	e02c      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6859      	ldr	r1, [r3, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f000 fa76 	bl	8005118 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2160      	movs	r1, #96	; 0x60
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fa9f 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 8004c38:	e01c      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6859      	ldr	r1, [r3, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f000 fa38 	bl	80050bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2140      	movs	r1, #64	; 0x40
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fa8f 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 8004c58:	e00c      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f000 fa86 	bl	8005176 <TIM_ITRx_SetConfig>
      break;
 8004c6a:	e003      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c70:	e000      	b.n	8004c74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a29      	ldr	r2, [pc, #164]	; (8004da0 <TIM_Base_SetConfig+0xb8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00b      	beq.n	8004d18 <TIM_Base_SetConfig+0x30>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d06:	d007      	beq.n	8004d18 <TIM_Base_SetConfig+0x30>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a26      	ldr	r2, [pc, #152]	; (8004da4 <TIM_Base_SetConfig+0xbc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <TIM_Base_SetConfig+0x30>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a25      	ldr	r2, [pc, #148]	; (8004da8 <TIM_Base_SetConfig+0xc0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d108      	bne.n	8004d2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a1c      	ldr	r2, [pc, #112]	; (8004da0 <TIM_Base_SetConfig+0xb8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00b      	beq.n	8004d4a <TIM_Base_SetConfig+0x62>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d38:	d007      	beq.n	8004d4a <TIM_Base_SetConfig+0x62>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a19      	ldr	r2, [pc, #100]	; (8004da4 <TIM_Base_SetConfig+0xbc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d003      	beq.n	8004d4a <TIM_Base_SetConfig+0x62>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <TIM_Base_SetConfig+0xc0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d108      	bne.n	8004d5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a07      	ldr	r2, [pc, #28]	; (8004da0 <TIM_Base_SetConfig+0xb8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d103      	bne.n	8004d90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	615a      	str	r2, [r3, #20]
}
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	40000400 	.word	0x40000400
 8004da8:	40000800 	.word	0x40000800

08004dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	f023 0201 	bic.w	r2, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f023 0302 	bic.w	r3, r3, #2
 8004df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <TIM_OC1_SetConfig+0xc8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d10c      	bne.n	8004e22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 0308 	bic.w	r3, r3, #8
 8004e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f023 0304 	bic.w	r3, r3, #4
 8004e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <TIM_OC1_SetConfig+0xc8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d111      	bne.n	8004e4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	621a      	str	r2, [r3, #32]
}
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40012c00 	.word	0x40012c00

08004e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f023 0210 	bic.w	r2, r3, #16
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	021b      	lsls	r3, r3, #8
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0320 	bic.w	r3, r3, #32
 8004ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a1d      	ldr	r2, [pc, #116]	; (8004f48 <TIM_OC2_SetConfig+0xd0>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d10d      	bne.n	8004ef4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a14      	ldr	r2, [pc, #80]	; (8004f48 <TIM_OC2_SetConfig+0xd0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d113      	bne.n	8004f24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr
 8004f48:	40012c00 	.word	0x40012c00

08004f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0303 	bic.w	r3, r3, #3
 8004f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a1d      	ldr	r2, [pc, #116]	; (800501c <TIM_OC3_SetConfig+0xd0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d10d      	bne.n	8004fc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a14      	ldr	r2, [pc, #80]	; (800501c <TIM_OC3_SetConfig+0xd0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d113      	bne.n	8004ff6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	621a      	str	r2, [r3, #32]
}
 8005010:	bf00      	nop
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40012c00 	.word	0x40012c00

08005020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	021b      	lsls	r3, r3, #8
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800506a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	031b      	lsls	r3, r3, #12
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a0f      	ldr	r2, [pc, #60]	; (80050b8 <TIM_OC4_SetConfig+0x98>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d109      	bne.n	8005094 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	019b      	lsls	r3, r3, #6
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	621a      	str	r2, [r3, #32]
}
 80050ae:	bf00      	nop
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr
 80050b8:	40012c00 	.word	0x40012c00

080050bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f023 0201 	bic.w	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f023 030a 	bic.w	r3, r3, #10
 80050f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4313      	orrs	r3, r2
 8005100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	621a      	str	r2, [r3, #32]
}
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0210 	bic.w	r2, r3, #16
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	031b      	lsls	r3, r3, #12
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005154:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	621a      	str	r2, [r3, #32]
}
 800516c:	bf00      	nop
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr

08005176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	f043 0307 	orr.w	r3, r3, #7
 8005198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	609a      	str	r2, [r3, #8]
}
 80051a0:	bf00      	nop
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b087      	sub	sp, #28
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	607a      	str	r2, [r7, #4]
 80051b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	021a      	lsls	r2, r3, #8
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	609a      	str	r2, [r3, #8]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 031f 	and.w	r3, r3, #31
 80051fa:	2201      	movs	r2, #1
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1a      	ldr	r2, [r3, #32]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	43db      	mvns	r3, r3
 800520a:	401a      	ands	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a1a      	ldr	r2, [r3, #32]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	fa01 f303 	lsl.w	r3, r1, r3
 8005220:	431a      	orrs	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	621a      	str	r2, [r3, #32]
}
 8005226:	bf00      	nop
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005244:	2302      	movs	r3, #2
 8005246:	e046      	b.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a16      	ldr	r2, [pc, #88]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00e      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005294:	d009      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a12      	ldr	r2, [pc, #72]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d10c      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800

080052ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005304:	2302      	movs	r3, #2
 8005306:	e03d      	b.n	8005384 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr

0800538e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr

080053b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e042      	b.n	800544a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d106      	bne.n	80053de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fc f8bd 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2224      	movs	r2, #36	; 0x24
 80053e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f91c 	bl	8005634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691a      	ldr	r2, [r3, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800540a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800541a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800542a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b08a      	sub	sp, #40	; 0x28
 8005456:	af02      	add	r7, sp, #8
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	603b      	str	r3, [r7, #0]
 800545e:	4613      	mov	r3, r2
 8005460:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b20      	cmp	r3, #32
 8005470:	d16d      	bne.n	800554e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_UART_Transmit+0x2c>
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e066      	b.n	8005550 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2221      	movs	r2, #33	; 0x21
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005490:	f7fc ff30 	bl	80022f4 <HAL_GetTick>
 8005494:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	88fa      	ldrh	r2, [r7, #6]
 800549a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	88fa      	ldrh	r2, [r7, #6]
 80054a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054aa:	d108      	bne.n	80054be <HAL_UART_Transmit+0x6c>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d104      	bne.n	80054be <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	e003      	b.n	80054c6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054c6:	e02a      	b.n	800551e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2200      	movs	r2, #0
 80054d0:	2180      	movs	r1, #128	; 0x80
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f840 	bl	8005558 <UART_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e036      	b.n	8005550 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10b      	bne.n	8005500 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	3302      	adds	r3, #2
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	e007      	b.n	8005510 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	781a      	ldrb	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3301      	adds	r3, #1
 800550e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1cf      	bne.n	80054c8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2200      	movs	r2, #0
 8005530:	2140      	movs	r1, #64	; 0x40
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f810 	bl	8005558 <UART_WaitOnFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e006      	b.n	8005550 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	e000      	b.n	8005550 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800554e:	2302      	movs	r3, #2
  }
}
 8005550:	4618      	mov	r0, r3
 8005552:	3720      	adds	r7, #32
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b090      	sub	sp, #64	; 0x40
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005568:	e050      	b.n	800560c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800556c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005570:	d04c      	beq.n	800560c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <UART_WaitOnFlagUntilTimeout+0x30>
 8005578:	f7fc febc 	bl	80022f4 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005584:	429a      	cmp	r2, r3
 8005586:	d241      	bcs.n	800560c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	330c      	adds	r3, #12
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	330c      	adds	r3, #12
 80055a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055a8:	637a      	str	r2, [r7, #52]	; 0x34
 80055aa:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e5      	bne.n	8005588 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3314      	adds	r3, #20
 80055c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	613b      	str	r3, [r7, #16]
   return(result);
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055dc:	623a      	str	r2, [r7, #32]
 80055de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	69f9      	ldr	r1, [r7, #28]
 80055e2:	6a3a      	ldr	r2, [r7, #32]
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e5      	bne.n	80055bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e00f      	b.n	800562c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4013      	ands	r3, r2
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	429a      	cmp	r2, r3
 800561a:	bf0c      	ite	eq
 800561c:	2301      	moveq	r3, #1
 800561e:	2300      	movne	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	461a      	mov	r2, r3
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	429a      	cmp	r2, r3
 8005628:	d09f      	beq.n	800556a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3740      	adds	r7, #64	; 0x40
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800566e:	f023 030c 	bic.w	r3, r3, #12
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6812      	ldr	r2, [r2, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	430b      	orrs	r3, r1
 800567a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a2c      	ldr	r2, [pc, #176]	; (8005748 <UART_SetConfig+0x114>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d103      	bne.n	80056a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800569c:	f7fe fd68 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	e002      	b.n	80056aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80056a4:	f7fe fd50 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 80056a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009a      	lsls	r2, r3, #2
 80056b4:	441a      	add	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c0:	4a22      	ldr	r2, [pc, #136]	; (800574c <UART_SetConfig+0x118>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	0119      	lsls	r1, r3, #4
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	009a      	lsls	r2, r3, #2
 80056d4:	441a      	add	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80056e0:	4b1a      	ldr	r3, [pc, #104]	; (800574c <UART_SetConfig+0x118>)
 80056e2:	fba3 0302 	umull	r0, r3, r3, r2
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	2064      	movs	r0, #100	; 0x64
 80056ea:	fb00 f303 	mul.w	r3, r0, r3
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	3332      	adds	r3, #50	; 0x32
 80056f4:	4a15      	ldr	r2, [pc, #84]	; (800574c <UART_SetConfig+0x118>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005700:	4419      	add	r1, r3
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	009a      	lsls	r2, r3, #2
 800570c:	441a      	add	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	fbb2 f2f3 	udiv	r2, r2, r3
 8005718:	4b0c      	ldr	r3, [pc, #48]	; (800574c <UART_SetConfig+0x118>)
 800571a:	fba3 0302 	umull	r0, r3, r3, r2
 800571e:	095b      	lsrs	r3, r3, #5
 8005720:	2064      	movs	r0, #100	; 0x64
 8005722:	fb00 f303 	mul.w	r3, r0, r3
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	3332      	adds	r3, #50	; 0x32
 800572c:	4a07      	ldr	r2, [pc, #28]	; (800574c <UART_SetConfig+0x118>)
 800572e:	fba2 2303 	umull	r2, r3, r2, r3
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	f003 020f 	and.w	r2, r3, #15
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	440a      	add	r2, r1
 800573e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005740:	bf00      	nop
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40013800 	.word	0x40013800
 800574c:	51eb851f 	.word	0x51eb851f

08005750 <VL53L0X_GetVersion>:
#endif

/* Group PAL General Functions */

VL53L0X_Error VL53L0X_GetVersion(VL53L0X_Version_t *pVersion)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	pVersion->major = VL53L0X_IMPLEMENTATION_VER_MAJOR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	711a      	strb	r2, [r3, #4]
	pVersion->minor = VL53L0X_IMPLEMENTATION_VER_MINOR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	715a      	strb	r2, [r3, #5]
	pVersion->build = VL53L0X_IMPLEMENTATION_VER_SUB;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	719a      	strb	r2, [r3, #6]

	pVersion->revision = VL53L0X_IMPLEMENTATION_VER_REVISION;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f241 12da 	movw	r2, #4570	; 0x11da
 8005774:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005776:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f004 fb89 	bl	8009eac <VL53L0X_get_device_info>
 800579a:	4603      	mov	r3, r0
 800579c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800579e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <VL53L0X_SetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_SetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t OffsetCalibrationDataMicroMeter)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057b4:	2300      	movs	r3, #0
 80057b6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_offset_calibration_data_micro_meter(Dev,
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f001 fc62 	bl	8007084 <VL53L0X_set_offset_calibration_data_micro_meter>
 80057c0:	4603      	mov	r3, r0
 80057c2:	73fb      	strb	r3, [r7, #15]
		OffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80057c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f001 fc97 	bl	8007114 <VL53L0X_get_offset_calibration_data_micro_meter>
 80057e6:	4603      	mov	r3, r0
 80057e8:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80057ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	460b      	mov	r3, r1
 8005800:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8005806:	78fb      	ldrb	r3, [r7, #3]
 8005808:	085b      	lsrs	r3, r3, #1
 800580a:	b2db      	uxtb	r3, r3
 800580c:	461a      	mov	r2, r3
 800580e:	218a      	movs	r1, #138	; 0x8a
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f004 fe39 	bl	800a488 <VL53L0X_WrByte>
 8005816:	4603      	mov	r3, r0
 8005818:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 800581a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005828:	b5b0      	push	{r4, r5, r7, lr}
 800582a:	b094      	sub	sp, #80	; 0x50
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005830:	2300      	movs	r3, #0
 8005832:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8005836:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800583a:	2b00      	cmp	r3, #0
 800583c:	d107      	bne.n	800584e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800583e:	2200      	movs	r2, #0
 8005840:	2188      	movs	r1, #136	; 0x88
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f004 fe20 	bl	800a488 <VL53L0X_WrByte>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800585c:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005866:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a71      	ldr	r2, [pc, #452]	; (8005a34 <VL53L0X_DataInit+0x20c>)
 800586e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a70      	ldr	r2, [pc, #448]	; (8005a38 <VL53L0X_DataInit+0x210>)
 8005876:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005880:	f107 0308 	add.w	r3, r7, #8
 8005884:	4619      	mov	r1, r3
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa5a 	bl	8005d40 <VL53L0X_GetDeviceParameters>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 8005892:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005896:	2b00      	cmp	r3, #0
 8005898:	d112      	bne.n	80058c0 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800589a:	2300      	movs	r3, #0
 800589c:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800589e:	2300      	movs	r3, #0
 80058a0:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f103 0410 	add.w	r4, r3, #16
 80058a8:	f107 0508 	add.w	r5, r7, #8
 80058ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80058bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2264      	movs	r2, #100	; 0x64
 80058c4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f44f 7261 	mov.w	r2, #900	; 0x384
 80058ce:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80058d8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80058e2:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80058ee:	2300      	movs	r3, #0
 80058f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80058f2:	e014      	b.n	800591e <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 80058f4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d114      	bne.n	8005926 <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80058fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2201      	movs	r2, #1
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fd4b 	bl	80063a0 <VL53L0X_SetLimitCheckEnable>
 800590a:	4603      	mov	r3, r0
 800590c:	461a      	mov	r2, r3
 800590e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005912:	4313      	orrs	r3, r2
 8005914:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800591a:	3301      	adds	r3, #1
 800591c:	64bb      	str	r3, [r7, #72]	; 0x48
 800591e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005920:	2b05      	cmp	r3, #5
 8005922:	dde7      	ble.n	80058f4 <VL53L0X_DataInit+0xcc>
 8005924:	e000      	b.n	8005928 <VL53L0X_DataInit+0x100>
		else
			break;
 8005926:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005928:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800592c:	2b00      	cmp	r3, #0
 800592e:	d107      	bne.n	8005940 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005930:	2200      	movs	r2, #0
 8005932:	2102      	movs	r1, #2
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fd33 	bl	80063a0 <VL53L0X_SetLimitCheckEnable>
 800593a:	4603      	mov	r3, r0
 800593c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005940:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005944:	2b00      	cmp	r3, #0
 8005946:	d107      	bne.n	8005958 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005948:	2200      	movs	r2, #0
 800594a:	2103      	movs	r1, #3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fd27 	bl	80063a0 <VL53L0X_SetLimitCheckEnable>
 8005952:	4603      	mov	r3, r0
 8005954:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005958:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800595c:	2b00      	cmp	r3, #0
 800595e:	d107      	bne.n	8005970 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005960:	2200      	movs	r2, #0
 8005962:	2104      	movs	r1, #4
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fd1b 	bl	80063a0 <VL53L0X_SetLimitCheckEnable>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005970:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005974:	2b00      	cmp	r3, #0
 8005976:	d107      	bne.n	8005988 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005978:	2200      	movs	r2, #0
 800597a:	2105      	movs	r1, #5
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fd0f 	bl	80063a0 <VL53L0X_SetLimitCheckEnable>
 8005982:	4603      	mov	r3, r0
 8005984:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005988:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800598c:	2b00      	cmp	r3, #0
 800598e:	d108      	bne.n	80059a2 <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005990:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005994:	2100      	movs	r1, #0
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fdb0 	bl	80064fc <VL53L0X_SetLimitCheckValue>
 800599c:	4603      	mov	r3, r0
 800599e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80059a2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d108      	bne.n	80059bc <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80059aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059ae:	2101      	movs	r1, #1
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fda3 	bl	80064fc <VL53L0X_SetLimitCheckValue>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80059bc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d108      	bne.n	80059d6 <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80059c4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80059c8:	2102      	movs	r1, #2
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fd96 	bl	80064fc <VL53L0X_SetLimitCheckValue>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80059d6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d107      	bne.n	80059ee <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80059de:	2200      	movs	r2, #0
 80059e0:	2103      	movs	r1, #3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fd8a 	bl	80064fc <VL53L0X_SetLimitCheckValue>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80059ee:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10f      	bne.n	8005a16 <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	22ff      	movs	r2, #255	; 0xff
 80059fa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80059fe:	22ff      	movs	r2, #255	; 0xff
 8005a00:	2101      	movs	r1, #1
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f004 fd40 	bl	800a488 <VL53L0X_WrByte>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005a16:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d103      	bne.n	8005a26 <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8005a26:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3750      	adds	r7, #80	; 0x50
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bdb0      	pop	{r4, r5, r7, pc}
 8005a32:	bf00      	nop
 8005a34:	00016b85 	.word	0x00016b85
 8005a38:	000970a4 	.word	0x000970a4

08005a3c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8005a3c:	b5b0      	push	{r4, r5, r7, lr}
 8005a3e:	b09e      	sub	sp, #120	; 0x78
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a44:	2300      	movs	r3, #0
 8005a46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8005a4a:	f107 031c 	add.w	r3, r7, #28
 8005a4e:	2240      	movs	r2, #64	; 0x40
 8005a50:	2100      	movs	r1, #0
 8005a52:	4618      	mov	r0, r3
 8005a54:	f004 fe2e 	bl	800a6b4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8005a78:	2101      	movs	r1, #1
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f002 fa86 	bl	8007f8c <VL53L0X_get_info_from_device>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8005a8c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005a94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8005a98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d80d      	bhi.n	8005abc <VL53L0X_StaticInit+0x80>
 8005aa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d102      	bne.n	8005aae <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8005aa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d806      	bhi.n	8005abc <VL53L0X_StaticInit+0x80>
 8005aae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10e      	bne.n	8005ad4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8005ab6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ab8:	2b0c      	cmp	r3, #12
 8005aba:	d90b      	bls.n	8005ad4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8005abc:	f107 0218 	add.w	r2, r7, #24
 8005ac0:	f107 0314 	add.w	r3, r7, #20
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f001 fd1d 	bl	8007506 <VL53L0X_perform_ref_spad_management>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8005ad2:	e009      	b.n	8005ae8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005ad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f001 ff1e 	bl	800791e <VL53L0X_set_reference_spads>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8005ae8:	4b94      	ldr	r3, [pc, #592]	; (8005d3c <VL53L0X_StaticInit+0x300>)
 8005aea:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8005aec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10f      	bne.n	8005b14 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8005afa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8005afe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d104      	bne.n	8005b10 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b0e:	e001      	b.n	8005b14 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8005b10:	4b8a      	ldr	r3, [pc, #552]	; (8005d3c <VL53L0X_StaticInit+0x300>)
 8005b12:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005b14:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d106      	bne.n	8005b2a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8005b1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f003 fb52 	bl	80091c8 <VL53L0X_load_tuning_settings>
 8005b24:	4603      	mov	r3, r0
 8005b26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8005b2a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8005b32:	2300      	movs	r3, #0
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	2304      	movs	r3, #4
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f001 f8cf 	bl	8006ce0 <VL53L0X_SetGpioConfig>
 8005b42:	4603      	mov	r3, r0
 8005b44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b48:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d121      	bne.n	8005b94 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005b50:	2201      	movs	r2, #1
 8005b52:	21ff      	movs	r1, #255	; 0xff
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f004 fc97 	bl	800a488 <VL53L0X_WrByte>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8005b60:	f107 031a 	add.w	r3, r7, #26
 8005b64:	461a      	mov	r2, r3
 8005b66:	2184      	movs	r1, #132	; 0x84
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f004 fc19 	bl	800a3a0 <VL53L0X_RdWord>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	461a      	mov	r2, r3
 8005b72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	21ff      	movs	r1, #255	; 0xff
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f004 fc81 	bl	800a488 <VL53L0X_WrByte>
 8005b86:	4603      	mov	r3, r0
 8005b88:	461a      	mov	r2, r3
 8005b8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b94:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d105      	bne.n	8005ba8 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8005b9c:	8b7b      	ldrh	r3, [r7, #26]
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8005ba8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d108      	bne.n	8005bc2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005bb0:	f107 031c 	add.w	r3, r7, #28
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f8c2 	bl	8005d40 <VL53L0X_GetDeviceParameters>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8005bc2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d110      	bne.n	8005bec <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8005bca:	f107 0319 	add.w	r3, r7, #25
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f981 	bl	8005ed8 <VL53L0X_GetFractionEnable>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8005bdc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d103      	bne.n	8005bec <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8005be4:	7e7a      	ldrb	r2, [r7, #25]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005bec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10e      	bne.n	8005c12 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f103 0410 	add.w	r4, r3, #16
 8005bfa:	f107 051c 	add.w	r5, r7, #28
 8005bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8005c12:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d111      	bne.n	8005c3e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8005c1a:	f107 0319 	add.w	r3, r7, #25
 8005c1e:	461a      	mov	r2, r3
 8005c20:	2101      	movs	r1, #1
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f004 fb35 	bl	800a292 <VL53L0X_RdByte>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8005c2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d103      	bne.n	8005c3e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8005c36:	7e7a      	ldrb	r2, [r7, #25]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8005c3e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d107      	bne.n	8005c56 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005c46:	2200      	movs	r2, #0
 8005c48:	2100      	movs	r1, #0
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f9a0 	bl	8005f90 <VL53L0X_SetSequenceStepEnable>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005c56:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d107      	bne.n	8005c6e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2102      	movs	r1, #2
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f994 	bl	8005f90 <VL53L0X_SetSequenceStepEnable>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8005c6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d103      	bne.n	8005c7e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2203      	movs	r2, #3
 8005c7a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005c7e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d109      	bne.n	8005c9a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005c86:	f107 0313 	add.w	r3, r7, #19
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f967 	bl	8005f62 <VL53L0X_GetVcselPulsePeriod>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005c9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d103      	bne.n	8005caa <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005ca2:	7cfa      	ldrb	r2, [r7, #19]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005caa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005cb2:	f107 0313 	add.w	r3, r7, #19
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2101      	movs	r1, #1
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f951 	bl	8005f62 <VL53L0X_GetVcselPulsePeriod>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005cc6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d103      	bne.n	8005cd6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005cce:	7cfa      	ldrb	r2, [r7, #19]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005cd6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d109      	bne.n	8005cf2 <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 8005cde:	f107 030c 	add.w	r3, r7, #12
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	2103      	movs	r1, #3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fa9e 	bl	8006228 <VL53L0X_GetSequenceStepTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005cf2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005d02:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d109      	bne.n	8005d1e <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 8005d0a:	f107 030c 	add.w	r3, r7, #12
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2104      	movs	r1, #4
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fa88 	bl	8006228 <VL53L0X_GetSequenceStepTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d103      	bne.n	8005d2e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3770      	adds	r7, #112	; 0x70
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bdb0      	pop	{r4, r5, r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	2000001c 	.word	0x2000001c

08005d40 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f8ae 	bl	8005eb4 <VL53L0X_GetDeviceMode>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d107      	bne.n	8005d74 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	3308      	adds	r3, #8
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fa9c 	bl	80062a8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005d70:	4603      	mov	r3, r0
 8005d72:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8005d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d102      	bne.n	8005d82 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8005d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d107      	bne.n	8005d9a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	3310      	adds	r3, #16
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fad1 	bl	8006338 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8005d96:	4603      	mov	r3, r0
 8005d98:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8005d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d107      	bne.n	8005db2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	3314      	adds	r3, #20
 8005da6:	4619      	mov	r1, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff fd11 	bl	80057d0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005dae:	4603      	mov	r3, r0
 8005db0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8005db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d134      	bne.n	8005e24 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	e02a      	b.n	8005e16 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d12a      	bne.n	8005e1e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	b299      	uxth	r1, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	3308      	adds	r3, #8
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fbf0 	bl	80065c0 <VL53L0X_GetLimitCheckValue>
 8005de0:	4603      	mov	r3, r0
 8005de2:	461a      	mov	r2, r3
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d117      	bne.n	8005e22 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	b299      	uxth	r1, r3
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	3318      	adds	r3, #24
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	461a      	mov	r2, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fb59 	bl	80064b8 <VL53L0X_GetLimitCheckEnable>
 8005e06:	4603      	mov	r3, r0
 8005e08:	461a      	mov	r2, r3
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	3301      	adds	r3, #1
 8005e14:	60bb      	str	r3, [r7, #8]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b05      	cmp	r3, #5
 8005e1a:	ddd1      	ble.n	8005dc0 <VL53L0X_GetDeviceParameters+0x80>
 8005e1c:	e002      	b.n	8005e24 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005e1e:	bf00      	nop
 8005e20:	e000      	b.n	8005e24 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8005e22:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d107      	bne.n	8005e3c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	333c      	adds	r3, #60	; 0x3c
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fc52 	bl	80066dc <VL53L0X_GetWrapAroundCheckEnable>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8005e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d107      	bne.n	8005e54 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	3304      	adds	r3, #4
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f876 	bl	8005f3c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005e50:	4603      	mov	r3, r0
 8005e52:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	2b15      	cmp	r3, #21
 8005e74:	bf8c      	ite	hi
 8005e76:	2201      	movhi	r2, #1
 8005e78:	2200      	movls	r2, #0
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	2a00      	cmp	r2, #0
 8005e7e:	d10e      	bne.n	8005e9e <VL53L0X_SetDeviceMode+0x3e>
 8005e80:	2201      	movs	r2, #1
 8005e82:	409a      	lsls	r2, r3
 8005e84:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <VL53L0X_SetDeviceMode+0x50>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bf14      	ite	ne
 8005e8c:	2301      	movne	r3, #1
 8005e8e:	2300      	moveq	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	78fa      	ldrb	r2, [r7, #3]
 8005e9a:	741a      	strb	r2, [r3, #16]
		break;
 8005e9c:	e001      	b.n	8005ea2 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005e9e:	23f8      	movs	r3, #248	; 0xf8
 8005ea0:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr
 8005eb0:	0030000b 	.word	0x0030000b

08005eb4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	7c1a      	ldrb	r2, [r3, #16]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	2109      	movs	r1, #9
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f004 f9d1 	bl	800a292 <VL53L0X_RdByte>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d106      	bne.n	8005f0a <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b084      	sub	sp, #16
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f20:	2300      	movs	r3, #0
 8005f22:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f002 ffbc 	bl	8008ea4 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8005f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f003 f889 	bl	8009064 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8005f52:	4603      	mov	r3, r0
 8005f54:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8005f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b086      	sub	sp, #24
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	607a      	str	r2, [r7, #4]
 8005f6e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f70:	2300      	movs	r3, #0
 8005f72:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005f74:	7afb      	ldrb	r3, [r7, #11]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f002 ff5b 	bl	8008e36 <VL53L0X_get_vcsel_pulse_period>
 8005f80:	4603      	mov	r3, r0
 8005f82:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005f84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005fac:	f107 030f 	add.w	r3, r7, #15
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f004 f96c 	bl	800a292 <VL53L0X_RdByte>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8005fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d15a      	bne.n	8006080 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8005fca:	78bb      	ldrb	r3, [r7, #2]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d12b      	bne.n	8006028 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d825      	bhi.n	8006022 <VL53L0X_SetSequenceStepEnable+0x92>
 8005fd6:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	08005ff1 	.word	0x08005ff1
 8005fe0:	08005ffb 	.word	0x08005ffb
 8005fe4:	08006005 	.word	0x08006005
 8005fe8:	0800600f 	.word	0x0800600f
 8005fec:	08006019 	.word	0x08006019
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005ff0:	7dbb      	ldrb	r3, [r7, #22]
 8005ff2:	f043 0310 	orr.w	r3, r3, #16
 8005ff6:	75bb      	strb	r3, [r7, #22]
				break;
 8005ff8:	e043      	b.n	8006082 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8005ffa:	7dbb      	ldrb	r3, [r7, #22]
 8005ffc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006000:	75bb      	strb	r3, [r7, #22]
				break;
 8006002:	e03e      	b.n	8006082 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006004:	7dbb      	ldrb	r3, [r7, #22]
 8006006:	f043 0304 	orr.w	r3, r3, #4
 800600a:	75bb      	strb	r3, [r7, #22]
				break;
 800600c:	e039      	b.n	8006082 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800600e:	7dbb      	ldrb	r3, [r7, #22]
 8006010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006014:	75bb      	strb	r3, [r7, #22]
				break;
 8006016:	e034      	b.n	8006082 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006018:	7dbb      	ldrb	r3, [r7, #22]
 800601a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800601e:	75bb      	strb	r3, [r7, #22]
				break;
 8006020:	e02f      	b.n	8006082 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006022:	23fc      	movs	r3, #252	; 0xfc
 8006024:	75fb      	strb	r3, [r7, #23]
 8006026:	e02c      	b.n	8006082 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	2b04      	cmp	r3, #4
 800602c:	d825      	bhi.n	800607a <VL53L0X_SetSequenceStepEnable+0xea>
 800602e:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	08006049 	.word	0x08006049
 8006038:	08006053 	.word	0x08006053
 800603c:	0800605d 	.word	0x0800605d
 8006040:	08006067 	.word	0x08006067
 8006044:	08006071 	.word	0x08006071
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006048:	7dbb      	ldrb	r3, [r7, #22]
 800604a:	f023 0310 	bic.w	r3, r3, #16
 800604e:	75bb      	strb	r3, [r7, #22]
				break;
 8006050:	e017      	b.n	8006082 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8006052:	7dbb      	ldrb	r3, [r7, #22]
 8006054:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006058:	75bb      	strb	r3, [r7, #22]
				break;
 800605a:	e012      	b.n	8006082 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800605c:	7dbb      	ldrb	r3, [r7, #22]
 800605e:	f023 0304 	bic.w	r3, r3, #4
 8006062:	75bb      	strb	r3, [r7, #22]
				break;
 8006064:	e00d      	b.n	8006082 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8006066:	7dbb      	ldrb	r3, [r7, #22]
 8006068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800606c:	75bb      	strb	r3, [r7, #22]
				break;
 800606e:	e008      	b.n	8006082 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006070:	7dbb      	ldrb	r3, [r7, #22]
 8006072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006076:	75bb      	strb	r3, [r7, #22]
				break;
 8006078:	e003      	b.n	8006082 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800607a:	23fc      	movs	r3, #252	; 0xfc
 800607c:	75fb      	strb	r3, [r7, #23]
 800607e:	e000      	b.n	8006082 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8006080:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	7dba      	ldrb	r2, [r7, #22]
 8006086:	429a      	cmp	r2, r3
 8006088:	d01e      	beq.n	80060c8 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800608a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d107      	bne.n	80060a2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8006092:	7dbb      	ldrb	r3, [r7, #22]
 8006094:	461a      	mov	r2, r3
 8006096:	2101      	movs	r1, #1
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f004 f9f5 	bl	800a488 <VL53L0X_WrByte>
 800609e:	4603      	mov	r3, r0
 80060a0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80060a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d103      	bne.n	80060b2 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	7dba      	ldrb	r2, [r7, #22]
 80060ae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80060b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80060c0:	6939      	ldr	r1, [r7, #16]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff ff27 	bl	8005f16 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80060c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	607b      	str	r3, [r7, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	72fb      	strb	r3, [r7, #11]
 80060e2:	4613      	mov	r3, r2
 80060e4:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80060f0:	7afb      	ldrb	r3, [r7, #11]
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d836      	bhi.n	8006164 <sequence_step_enabled+0x90>
 80060f6:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <sequence_step_enabled+0x28>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	08006111 	.word	0x08006111
 8006100:	08006123 	.word	0x08006123
 8006104:	08006135 	.word	0x08006135
 8006108:	08006147 	.word	0x08006147
 800610c:	08006159 	.word	0x08006159
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006110:	7abb      	ldrb	r3, [r7, #10]
 8006112:	111b      	asrs	r3, r3, #4
 8006114:	b2db      	uxtb	r3, r3
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	b2da      	uxtb	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	701a      	strb	r2, [r3, #0]
		break;
 8006120:	e022      	b.n	8006168 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006122:	7abb      	ldrb	r3, [r7, #10]
 8006124:	10db      	asrs	r3, r3, #3
 8006126:	b2db      	uxtb	r3, r3
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	b2da      	uxtb	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	701a      	strb	r2, [r3, #0]
		break;
 8006132:	e019      	b.n	8006168 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006134:	7abb      	ldrb	r3, [r7, #10]
 8006136:	109b      	asrs	r3, r3, #2
 8006138:	b2db      	uxtb	r3, r3
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	b2da      	uxtb	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	701a      	strb	r2, [r3, #0]
		break;
 8006144:	e010      	b.n	8006168 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006146:	7abb      	ldrb	r3, [r7, #10]
 8006148:	119b      	asrs	r3, r3, #6
 800614a:	b2db      	uxtb	r3, r3
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	b2da      	uxtb	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	701a      	strb	r2, [r3, #0]
		break;
 8006156:	e007      	b.n	8006168 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006158:	7abb      	ldrb	r3, [r7, #10]
 800615a:	09db      	lsrs	r3, r3, #7
 800615c:	b2da      	uxtb	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	701a      	strb	r2, [r3, #0]
		break;
 8006162:	e001      	b.n	8006168 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006164:	23fc      	movs	r3, #252	; 0xfc
 8006166:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006168:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800616c:	4618      	mov	r0, r3
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	bc80      	pop	{r7}
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop

08006178 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8006186:	2300      	movs	r3, #0
 8006188:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800618a:	f107 030e 	add.w	r3, r7, #14
 800618e:	461a      	mov	r2, r3
 8006190:	2101      	movs	r1, #1
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f004 f87d 	bl	800a292 <VL53L0X_RdByte>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800619c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d107      	bne.n	80061b4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80061a4:	7bba      	ldrb	r2, [r7, #14]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2100      	movs	r1, #0
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff ff92 	bl	80060d4 <sequence_step_enabled>
 80061b0:	4603      	mov	r3, r0
 80061b2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80061b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d108      	bne.n	80061ce <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80061bc:	7bba      	ldrb	r2, [r7, #14]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	3302      	adds	r3, #2
 80061c2:	2101      	movs	r1, #1
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff ff85 	bl	80060d4 <sequence_step_enabled>
 80061ca:	4603      	mov	r3, r0
 80061cc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80061ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d108      	bne.n	80061e8 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80061d6:	7bba      	ldrb	r2, [r7, #14]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	3301      	adds	r3, #1
 80061dc:	2102      	movs	r1, #2
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff ff78 	bl	80060d4 <sequence_step_enabled>
 80061e4:	4603      	mov	r3, r0
 80061e6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80061e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d108      	bne.n	8006202 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80061f0:	7bba      	ldrb	r2, [r7, #14]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	3303      	adds	r3, #3
 80061f6:	2103      	movs	r1, #3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff ff6b 	bl	80060d4 <sequence_step_enabled>
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d108      	bne.n	800621c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800620a:	7bba      	ldrb	r2, [r7, #14]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	3304      	adds	r3, #4
 8006210:	2104      	movs	r1, #4
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff ff5e 	bl	80060d4 <sequence_step_enabled>
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800621c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	460b      	mov	r3, r1
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006236:	2300      	movs	r3, #0
 8006238:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8006242:	f107 0210 	add.w	r2, r7, #16
 8006246:	7afb      	ldrb	r3, [r7, #11]
 8006248:	4619      	mov	r1, r3
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f002 fc1e 	bl	8008a8c <get_sequence_step_timeout>
 8006250:	4603      	mov	r3, r0
 8006252:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8006254:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d11c      	bne.n	8006296 <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	4a11      	ldr	r2, [pc, #68]	; (80062a4 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8006260:	fba2 2303 	umull	r2, r3, r2, r3
 8006264:	099b      	lsrs	r3, r3, #6
 8006266:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4613      	mov	r3, r2
 8006280:	041b      	lsls	r3, r3, #16
 8006282:	1a9b      	subs	r3, r3, r2
 8006284:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006288:	4a06      	ldr	r2, [pc, #24]	; (80062a4 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 800628a:	fba2 2303 	umull	r2, r3, r2, r3
 800628e:	099b      	lsrs	r3, r3, #6
 8006290:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006296:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3720      	adds	r7, #32
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	10624dd3 	.word	0x10624dd3

080062a8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80062b6:	f107 030c 	add.w	r3, r7, #12
 80062ba:	461a      	mov	r2, r3
 80062bc:	21f8      	movs	r1, #248	; 0xf8
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f004 f86e 	bl	800a3a0 <VL53L0X_RdWord>
 80062c4:	4603      	mov	r3, r0
 80062c6:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80062c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d108      	bne.n	80062e2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80062d0:	f107 0308 	add.w	r3, r7, #8
 80062d4:	461a      	mov	r2, r3
 80062d6:	2104      	movs	r1, #4
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f004 f899 	bl	800a410 <VL53L0X_RdDWord>
 80062de:	4603      	mov	r3, r0
 80062e0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80062e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10c      	bne.n	8006304 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80062ea:	89bb      	ldrh	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	89ba      	ldrh	r2, [r7, #12]
 80062f4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006304:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800631a:	2300      	movs	r3, #0
 800631c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	7f1b      	ldrb	r3, [r3, #28]
 8006322:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	7bba      	ldrb	r2, [r7, #14]
 8006328:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800632a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr

08006338 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006342:	2300      	movs	r3, #0
 8006344:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8006346:	f107 030e 	add.w	r3, r7, #14
 800634a:	461a      	mov	r2, r3
 800634c:	2120      	movs	r1, #32
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f004 f826 	bl	800a3a0 <VL53L0X_RdWord>
 8006354:	4603      	mov	r3, r0
 8006356:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8006358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d118      	bne.n	8006392 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006360:	89fb      	ldrh	r3, [r7, #14]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d109      	bne.n	800637a <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	771a      	strb	r2, [r3, #28]
 8006378:	e00b      	b.n	8006392 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800637a:	89fb      	ldrh	r3, [r7, #14]
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	807b      	strh	r3, [r7, #2]
 80063ac:	4613      	mov	r3, r2
 80063ae:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80063c0:	887b      	ldrh	r3, [r7, #2]
 80063c2:	2b05      	cmp	r3, #5
 80063c4:	d902      	bls.n	80063cc <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80063c6:	23fc      	movs	r3, #252	; 0xfc
 80063c8:	75fb      	strb	r3, [r7, #23]
 80063ca:	e05b      	b.n	8006484 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80063cc:	787b      	ldrb	r3, [r7, #1]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d106      	bne.n	80063e0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80063da:	2301      	movs	r3, #1
 80063dc:	73bb      	strb	r3, [r7, #14]
 80063de:	e00a      	b.n	80063f6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80063e0:	887b      	ldrh	r3, [r7, #2]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	330c      	adds	r3, #12
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80063f2:	2301      	movs	r3, #1
 80063f4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80063f6:	887b      	ldrh	r3, [r7, #2]
 80063f8:	2b05      	cmp	r3, #5
 80063fa:	d841      	bhi.n	8006480 <VL53L0X_SetLimitCheckEnable+0xe0>
 80063fc:	a201      	add	r2, pc, #4	; (adr r2, 8006404 <VL53L0X_SetLimitCheckEnable+0x64>)
 80063fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006402:	bf00      	nop
 8006404:	0800641d 	.word	0x0800641d
 8006408:	08006427 	.word	0x08006427
 800640c:	0800643d 	.word	0x0800643d
 8006410:	08006447 	.word	0x08006447
 8006414:	08006451 	.word	0x08006451
 8006418:	08006469 	.word	0x08006469

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	7bfa      	ldrb	r2, [r7, #15]
 8006420:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006424:	e02e      	b.n	8006484 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800642a:	b29b      	uxth	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	2144      	movs	r1, #68	; 0x44
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f004 f84d 	bl	800a4d0 <VL53L0X_WrWord>
 8006436:	4603      	mov	r3, r0
 8006438:	75fb      	strb	r3, [r7, #23]

			break;
 800643a:	e023      	b.n	8006484 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	7bfa      	ldrb	r2, [r7, #15]
 8006440:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006444:	e01e      	b.n	8006484 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	7bfa      	ldrb	r2, [r7, #15]
 800644a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800644e:	e019      	b.n	8006484 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006456:	7b7b      	ldrb	r3, [r7, #13]
 8006458:	22fe      	movs	r2, #254	; 0xfe
 800645a:	2160      	movs	r1, #96	; 0x60
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f004 f861 	bl	800a524 <VL53L0X_UpdateByte>
 8006462:	4603      	mov	r3, r0
 8006464:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8006466:	e00d      	b.n	8006484 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8006468:	7bbb      	ldrb	r3, [r7, #14]
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800646e:	7b7b      	ldrb	r3, [r7, #13]
 8006470:	22ef      	movs	r2, #239	; 0xef
 8006472:	2160      	movs	r1, #96	; 0x60
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f004 f855 	bl	800a524 <VL53L0X_UpdateByte>
 800647a:	4603      	mov	r3, r0
 800647c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800647e:	e001      	b.n	8006484 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006480:	23fc      	movs	r3, #252	; 0xfc
 8006482:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006484:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10f      	bne.n	80064ac <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800648c:	787b      	ldrb	r3, [r7, #1]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006492:	887b      	ldrh	r3, [r7, #2]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	4413      	add	r3, r2
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800649e:	e005      	b.n	80064ac <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80064a0:	887b      	ldrh	r3, [r7, #2]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	4413      	add	r3, r2
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80064ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	460b      	mov	r3, r1
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064c6:	2300      	movs	r3, #0
 80064c8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80064ca:	897b      	ldrh	r3, [r7, #10]
 80064cc:	2b05      	cmp	r3, #5
 80064ce:	d905      	bls.n	80064dc <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80064d0:	23fc      	movs	r3, #252	; 0xfc
 80064d2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	e008      	b.n	80064ee <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80064dc:	897b      	ldrh	r3, [r7, #10]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064e6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	7dba      	ldrb	r2, [r7, #22]
 80064ec:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80064ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bc80      	pop	{r7}
 80064fa:	4770      	bx	lr

080064fc <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	460b      	mov	r3, r1
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800650a:	2300      	movs	r3, #0
 800650c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800650e:	897b      	ldrh	r3, [r7, #10]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006518:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800651a:	7dbb      	ldrb	r3, [r7, #22]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d107      	bne.n	8006530 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006520:	897b      	ldrh	r3, [r7, #10]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	330c      	adds	r3, #12
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	605a      	str	r2, [r3, #4]
 800652e:	e040      	b.n	80065b2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006530:	897b      	ldrh	r3, [r7, #10]
 8006532:	2b05      	cmp	r3, #5
 8006534:	d830      	bhi.n	8006598 <VL53L0X_SetLimitCheckValue+0x9c>
 8006536:	a201      	add	r2, pc, #4	; (adr r2, 800653c <VL53L0X_SetLimitCheckValue+0x40>)
 8006538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653c:	08006555 	.word	0x08006555
 8006540:	0800655d 	.word	0x0800655d
 8006544:	08006573 	.word	0x08006573
 8006548:	0800657b 	.word	0x0800657b
 800654c:	08006583 	.word	0x08006583
 8006550:	08006583 	.word	0x08006583

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800655a:	e01f      	b.n	800659c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006560:	b29b      	uxth	r3, r3
 8006562:	461a      	mov	r2, r3
 8006564:	2144      	movs	r1, #68	; 0x44
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f003 ffb2 	bl	800a4d0 <VL53L0X_WrWord>
 800656c:	4603      	mov	r3, r0
 800656e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006570:	e014      	b.n	800659c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8006578:	e010      	b.n	800659c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006580:	e00c      	b.n	800659c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006586:	b29b      	uxth	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	2164      	movs	r1, #100	; 0x64
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f003 ff9f 	bl	800a4d0 <VL53L0X_WrWord>
 8006592:	4603      	mov	r3, r0
 8006594:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006596:	e001      	b.n	800659c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006598:	23fc      	movs	r3, #252	; 0xfc
 800659a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800659c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d106      	bne.n	80065b2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80065a4:	897b      	ldrh	r3, [r7, #10]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	330c      	adds	r3, #12
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80065b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop

080065c0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	460b      	mov	r3, r1
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80065d6:	897b      	ldrh	r3, [r7, #10]
 80065d8:	2b05      	cmp	r3, #5
 80065da:	d847      	bhi.n	800666c <VL53L0X_GetLimitCheckValue+0xac>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <VL53L0X_GetLimitCheckValue+0x24>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	080065fd 	.word	0x080065fd
 80065e8:	08006609 	.word	0x08006609
 80065ec:	0800662f 	.word	0x0800662f
 80065f0:	0800663b 	.word	0x0800663b
 80065f4:	08006647 	.word	0x08006647
 80065f8:	08006647 	.word	0x08006647

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006600:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8006602:	2300      	movs	r3, #0
 8006604:	77bb      	strb	r3, [r7, #30]
		break;
 8006606:	e033      	b.n	8006670 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006608:	f107 0316 	add.w	r3, r7, #22
 800660c:	461a      	mov	r2, r3
 800660e:	2144      	movs	r1, #68	; 0x44
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f003 fec5 	bl	800a3a0 <VL53L0X_RdWord>
 8006616:	4603      	mov	r3, r0
 8006618:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800661a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d102      	bne.n	8006628 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006622:	8afb      	ldrh	r3, [r7, #22]
 8006624:	025b      	lsls	r3, r3, #9
 8006626:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8006628:	2301      	movs	r3, #1
 800662a:	77bb      	strb	r3, [r7, #30]
		break;
 800662c:	e020      	b.n	8006670 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006632:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	77bb      	strb	r3, [r7, #30]
		break;
 8006638:	e01a      	b.n	8006670 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8006640:	2300      	movs	r3, #0
 8006642:	77bb      	strb	r3, [r7, #30]
		break;
 8006644:	e014      	b.n	8006670 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006646:	f107 0316 	add.w	r3, r7, #22
 800664a:	461a      	mov	r2, r3
 800664c:	2164      	movs	r1, #100	; 0x64
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f003 fea6 	bl	800a3a0 <VL53L0X_RdWord>
 8006654:	4603      	mov	r3, r0
 8006656:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006658:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d102      	bne.n	8006666 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006660:	8afb      	ldrh	r3, [r7, #22]
 8006662:	025b      	lsls	r3, r3, #9
 8006664:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	77bb      	strb	r3, [r7, #30]
		break;
 800666a:	e001      	b.n	8006670 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800666c:	23fc      	movs	r3, #252	; 0xfc
 800666e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006670:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d12a      	bne.n	80066ce <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8006678:	7fbb      	ldrb	r3, [r7, #30]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d124      	bne.n	80066c8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d110      	bne.n	80066a6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8006684:	897b      	ldrh	r3, [r7, #10]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	330c      	adds	r3, #12
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006698:	897b      	ldrh	r3, [r7, #10]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4413      	add	r3, r2
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80066a4:	e013      	b.n	80066ce <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80066ac:	897b      	ldrh	r3, [r7, #10]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	330c      	adds	r3, #12
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80066ba:	897b      	ldrh	r3, [r7, #10]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80066c6:	e002      	b.n	80066ce <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80066ce:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop

080066dc <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066e6:	2300      	movs	r3, #0
 80066e8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80066ea:	f107 030e 	add.w	r3, r7, #14
 80066ee:	461a      	mov	r2, r3
 80066f0:	2101      	movs	r1, #1
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f003 fdcd 	bl	800a292 <VL53L0X_RdByte>
 80066f8:	4603      	mov	r3, r0
 80066fa:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80066fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10e      	bne.n	8006722 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006704:	7bba      	ldrb	r2, [r7, #14]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	b25b      	sxtb	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	da03      	bge.n	800671c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2201      	movs	r2, #1
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	e002      	b.n	8006722 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2200      	movs	r2, #0
 8006720:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781a      	ldrb	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006734:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006748:	2300      	movs	r3, #0
 800674a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800674c:	f107 030e 	add.w	r3, r7, #14
 8006750:	4619      	mov	r1, r3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff fbae 	bl	8005eb4 <VL53L0X_GetDeviceMode>
 8006758:	4603      	mov	r3, r0
 800675a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800675c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d107      	bne.n	8006774 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d104      	bne.n	8006774 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f898 	bl	80068a0 <VL53L0X_StartMeasurement>
 8006770:	4603      	mov	r3, r0
 8006772:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 fb50 	bl	8007e22 <VL53L0X_measurement_poll_for_completion>
 8006782:	4603      	mov	r3, r0
 8006784:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800678e:	7bbb      	ldrb	r3, [r7, #14]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d103      	bne.n	800679c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2203      	movs	r2, #3
 8006798:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800679c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067b4:	2300      	movs	r3, #0
 80067b6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80067b8:	2301      	movs	r3, #1
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f001 faf2 	bl	8007da8 <VL53L0X_perform_ref_calibration>
 80067c4:	4603      	mov	r3, r0
 80067c6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80067c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067e0:	2300      	movs	r3, #0
 80067e2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80067ea:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80067ec:	7dbb      	ldrb	r3, [r7, #22]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d005      	beq.n	80067fe <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80067f2:	7dbb      	ldrb	r3, [r7, #22]
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d002      	beq.n	80067fe <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80067f8:	7dbb      	ldrb	r3, [r7, #22]
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d147      	bne.n	800688e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80067fe:	f107 030c 	add.w	r3, r7, #12
 8006802:	f107 0210 	add.w	r2, r7, #16
 8006806:	2101      	movs	r1, #1
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fb8d 	bl	8006f28 <VL53L0X_GetInterruptThresholds>
 800680e:	4603      	mov	r3, r0
 8006810:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006818:	d803      	bhi.n	8006822 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800681a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800681c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006820:	d935      	bls.n	800688e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8006822:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d131      	bne.n	800688e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800682a:	78fb      	ldrb	r3, [r7, #3]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d006      	beq.n	800683e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006830:	491a      	ldr	r1, [pc, #104]	; (800689c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f002 fcc8 	bl	80091c8 <VL53L0X_load_tuning_settings>
 8006838:	4603      	mov	r3, r0
 800683a:	75fb      	strb	r3, [r7, #23]
 800683c:	e027      	b.n	800688e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800683e:	2204      	movs	r2, #4
 8006840:	21ff      	movs	r1, #255	; 0xff
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f003 fe20 	bl	800a488 <VL53L0X_WrByte>
 8006848:	4603      	mov	r3, r0
 800684a:	461a      	mov	r2, r3
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	4313      	orrs	r3, r2
 8006850:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006852:	2200      	movs	r2, #0
 8006854:	2170      	movs	r1, #112	; 0x70
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f003 fe16 	bl	800a488 <VL53L0X_WrByte>
 800685c:	4603      	mov	r3, r0
 800685e:	461a      	mov	r2, r3
 8006860:	7dfb      	ldrb	r3, [r7, #23]
 8006862:	4313      	orrs	r3, r2
 8006864:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006866:	2200      	movs	r2, #0
 8006868:	21ff      	movs	r1, #255	; 0xff
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f003 fe0c 	bl	800a488 <VL53L0X_WrByte>
 8006870:	4603      	mov	r3, r0
 8006872:	461a      	mov	r2, r3
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	4313      	orrs	r3, r2
 8006878:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800687a:	2200      	movs	r2, #0
 800687c:	2180      	movs	r1, #128	; 0x80
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f003 fe02 	bl	800a488 <VL53L0X_WrByte>
 8006884:	4603      	mov	r3, r0
 8006886:	461a      	mov	r2, r3
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	4313      	orrs	r3, r2
 800688c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800688e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000110 	.word	0x20000110

080068a0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80068ac:	2301      	movs	r3, #1
 80068ae:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80068b0:	f107 030e 	add.w	r3, r7, #14
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff fafc 	bl	8005eb4 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d052      	beq.n	8006968 <VL53L0X_StartMeasurement+0xc8>
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	dc6a      	bgt.n	800699c <VL53L0X_StartMeasurement+0xfc>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <VL53L0X_StartMeasurement+0x30>
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d032      	beq.n	8006934 <VL53L0X_StartMeasurement+0x94>
 80068ce:	e065      	b.n	800699c <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80068d0:	2201      	movs	r2, #1
 80068d2:	2100      	movs	r1, #0
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f003 fdd7 	bl	800a488 <VL53L0X_WrByte>
 80068da:	4603      	mov	r3, r0
 80068dc:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80068e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d15b      	bne.n	80069a2 <VL53L0X_StartMeasurement+0x102>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d008      	beq.n	8006906 <VL53L0X_StartMeasurement+0x66>
					Status = VL53L0X_RdByte(Dev,
 80068f4:	f107 030d 	add.w	r3, r7, #13
 80068f8:	461a      	mov	r2, r3
 80068fa:	2100      	movs	r1, #0
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f003 fcc8 	bl	800a292 <VL53L0X_RdByte>
 8006902:	4603      	mov	r3, r0
 8006904:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	3301      	adds	r3, #1
 800690a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800690c:	7b7a      	ldrb	r2, [r7, #13]
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	4013      	ands	r3, r2
 8006912:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006914:	7bfa      	ldrb	r2, [r7, #15]
 8006916:	429a      	cmp	r2, r3
 8006918:	d106      	bne.n	8006928 <VL53L0X_StartMeasurement+0x88>
				&& (Status == VL53L0X_ERROR_NONE)
 800691a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d102      	bne.n	8006928 <VL53L0X_StartMeasurement+0x88>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	2bc7      	cmp	r3, #199	; 0xc7
 8006926:	d9e2      	bls.n	80068ee <VL53L0X_StartMeasurement+0x4e>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	2bc7      	cmp	r3, #199	; 0xc7
 800692c:	d939      	bls.n	80069a2 <VL53L0X_StartMeasurement+0x102>
				Status = VL53L0X_ERROR_TIME_OUT;
 800692e:	23f9      	movs	r3, #249	; 0xf9
 8006930:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006932:	e036      	b.n	80069a2 <VL53L0X_StartMeasurement+0x102>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006934:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d105      	bne.n	8006948 <VL53L0X_StartMeasurement+0xa8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800693c:	2101      	movs	r1, #1
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff ff48 	bl	80067d4 <VL53L0X_CheckAndLoadInterruptSettings>
 8006944:	4603      	mov	r3, r0
 8006946:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006948:	2202      	movs	r2, #2
 800694a:	2100      	movs	r1, #0
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f003 fd9b 	bl	800a488 <VL53L0X_WrByte>
 8006952:	4603      	mov	r3, r0
 8006954:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006956:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d123      	bne.n	80069a6 <VL53L0X_StartMeasurement+0x106>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2204      	movs	r2, #4
 8006962:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006966:	e01e      	b.n	80069a6 <VL53L0X_StartMeasurement+0x106>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d105      	bne.n	800697c <VL53L0X_StartMeasurement+0xdc>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006970:	2101      	movs	r1, #1
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff ff2e 	bl	80067d4 <VL53L0X_CheckAndLoadInterruptSettings>
 8006978:	4603      	mov	r3, r0
 800697a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800697c:	2204      	movs	r2, #4
 800697e:	2100      	movs	r1, #0
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f003 fd81 	bl	800a488 <VL53L0X_WrByte>
 8006986:	4603      	mov	r3, r0
 8006988:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800698a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10b      	bne.n	80069aa <VL53L0X_StartMeasurement+0x10a>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2204      	movs	r2, #4
 8006996:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800699a:	e006      	b.n	80069aa <VL53L0X_StartMeasurement+0x10a>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800699c:	23f8      	movs	r3, #248	; 0xf8
 800699e:	75fb      	strb	r3, [r7, #23]
 80069a0:	e004      	b.n	80069ac <VL53L0X_StartMeasurement+0x10c>
		break;
 80069a2:	bf00      	nop
 80069a4:	e002      	b.n	80069ac <VL53L0X_StartMeasurement+0x10c>
		break;
 80069a6:	bf00      	nop
 80069a8:	e000      	b.n	80069ac <VL53L0X_StartMeasurement+0x10c>
		break;
 80069aa:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80069ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80069cc:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80069ce:	7bbb      	ldrb	r3, [r7, #14]
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d112      	bne.n	80069fa <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80069d4:	f107 0308 	add.w	r3, r7, #8
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fb1a 	bl	8007014 <VL53L0X_GetInterruptMaskStatus>
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d103      	bne.n	80069f2 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2201      	movs	r2, #1
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	e01c      	b.n	8006a2c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2200      	movs	r2, #0
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	e018      	b.n	8006a2c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80069fa:	f107 030d 	add.w	r3, r7, #13
 80069fe:	461a      	mov	r2, r3
 8006a00:	2114      	movs	r1, #20
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f003 fc45 	bl	800a292 <VL53L0X_RdByte>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8006a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10b      	bne.n	8006a2c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8006a14:	7b7b      	ldrb	r3, [r7, #13]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2201      	movs	r2, #1
 8006a22:	701a      	strb	r2, [r3, #0]
 8006a24:	e002      	b.n	8006a2c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006a38:	b5b0      	push	{r4, r5, r7, lr}
 8006a3a:	b096      	sub	sp, #88	; 0x58
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8006a48:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a4c:	230c      	movs	r3, #12
 8006a4e:	2114      	movs	r1, #20
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f003 fc79 	bl	800a348 <VL53L0X_ReadMulti>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006a5c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f040 80d1 	bne.w	8006c08 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8006a72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	021b      	lsls	r3, r3, #8
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	4413      	add	r3, r2
 8006a84:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8006a8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	021b      	lsls	r3, r3, #8
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	4413      	add	r3, r2
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	025b      	lsls	r3, r3, #9
 8006aa4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aaa:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8006aac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	021b      	lsls	r3, r3, #8
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	4413      	add	r3, r2
 8006abe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8006ac2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ac6:	025b      	lsls	r3, r3, #9
 8006ac8:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8006ace:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	021b      	lsls	r3, r3, #8
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	4413      	add	r3, r2
 8006ae0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006aea:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8006aec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006af0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8006afa:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8006b06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b0c:	d046      	beq.n	8006b9c <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8006b0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006b10:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006b14:	fb02 f303 	mul.w	r3, r2, r3
 8006b18:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006b1c:	4a57      	ldr	r2, [pc, #348]	; (8006c7c <VL53L0X_GetRangingMeasurementData+0x244>)
 8006b1e:	fb82 1203 	smull	r1, r2, r2, r3
 8006b22:	1192      	asrs	r2, r2, #6
 8006b24:	17db      	asrs	r3, r3, #31
 8006b26:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8006b28:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	7f1b      	ldrb	r3, [r3, #28]
 8006b36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8006b3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d02c      	beq.n	8006b9c <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8006b42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b44:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006b48:	fb02 f303 	mul.w	r3, r2, r3
 8006b4c:	121a      	asrs	r2, r3, #8
					<= 0) {
 8006b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d10d      	bne.n	8006b70 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8006b54:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d004      	beq.n	8006b66 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8006b5c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8006b60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006b64:	e016      	b.n	8006b94 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8006b66:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8006b6a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006b6e:	e011      	b.n	8006b94 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8006b70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b76:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8006b7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b7c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006b80:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8006b84:	121b      	asrs	r3, r3, #8
 8006b86:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8006b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b8a:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8006b8c:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8006b90:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8006b94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b98:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8006b9c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00d      	beq.n	8006bc0 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8006ba4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006ba8:	089b      	lsrs	r3, r3, #2
 8006baa:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8006bb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	019b      	lsls	r3, r3, #6
 8006bb8:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	75da      	strb	r2, [r3, #23]
 8006bbe:	e006      	b.n	8006bce <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006bc6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8006bce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006bd2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8006bd6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	4613      	mov	r3, r2
 8006be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f002 ff51 	bl	8009a8c <VL53L0X_get_pal_range_status>
 8006bea:	4603      	mov	r3, r0
 8006bec:	461a      	mov	r2, r3
 8006bee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8006bf8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d103      	bne.n	8006c08 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8006c00:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006c08:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d12f      	bne.n	8006c70 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f107 040c 	add.w	r4, r7, #12
 8006c16:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8006c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8006c2a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8006c30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8006c38:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8006c3e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8006c44:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8006c4a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8006c50:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8006c56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8006c60:	f107 050c 	add.w	r5, r7, #12
 8006c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006c6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c70:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3750      	adds	r7, #80	; 0x50
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8006c7c:	10624dd3 	.word	0x10624dd3

08006c80 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8006c8e:	2100      	movs	r1, #0
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff f8e5 	bl	8005e60 <VL53L0X_SetDeviceMode>
 8006c96:	4603      	mov	r3, r0
 8006c98:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d104      	bne.n	8006cac <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff fd4c 	bl	8006740 <VL53L0X_PerformSingleMeasurement>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d105      	bne.n	8006cc0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff febe 	bl	8006a38 <VL53L0X_GetRangingMeasurementData>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d105      	bne.n	8006cd4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006cc8:	2100      	movs	r1, #0
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f962 	bl	8006f94 <VL53L0X_ClearInterruptMask>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8006cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	4608      	mov	r0, r1
 8006cea:	4611      	mov	r1, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	70fb      	strb	r3, [r7, #3]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70bb      	strb	r3, [r7, #2]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006d04:	23f6      	movs	r3, #246	; 0xf6
 8006d06:	73fb      	strb	r3, [r7, #15]
 8006d08:	e107      	b.n	8006f1a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8006d0a:	78bb      	ldrb	r3, [r7, #2]
 8006d0c:	2b14      	cmp	r3, #20
 8006d0e:	d110      	bne.n	8006d32 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006d10:	7e3b      	ldrb	r3, [r7, #24]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d102      	bne.n	8006d1c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8006d16:	2310      	movs	r3, #16
 8006d18:	73bb      	strb	r3, [r7, #14]
 8006d1a:	e001      	b.n	8006d20 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	461a      	mov	r2, r3
 8006d24:	2184      	movs	r1, #132	; 0x84
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f003 fbae 	bl	800a488 <VL53L0X_WrByte>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	73fb      	strb	r3, [r7, #15]
 8006d30:	e0f3      	b.n	8006f1a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006d32:	78bb      	ldrb	r3, [r7, #2]
 8006d34:	2b15      	cmp	r3, #21
 8006d36:	f040 8097 	bne.w	8006e68 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	21ff      	movs	r1, #255	; 0xff
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f003 fba2 	bl	800a488 <VL53L0X_WrByte>
 8006d44:	4603      	mov	r3, r0
 8006d46:	461a      	mov	r2, r3
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2100      	movs	r1, #0
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f003 fb98 	bl	800a488 <VL53L0X_WrByte>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006d62:	2200      	movs	r2, #0
 8006d64:	21ff      	movs	r1, #255	; 0xff
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f003 fb8e 	bl	800a488 <VL53L0X_WrByte>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	461a      	mov	r2, r3
 8006d70:	7bfb      	ldrb	r3, [r7, #15]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006d76:	2201      	movs	r2, #1
 8006d78:	2180      	movs	r1, #128	; 0x80
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f003 fb84 	bl	800a488 <VL53L0X_WrByte>
 8006d80:	4603      	mov	r3, r0
 8006d82:	461a      	mov	r2, r3
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	2185      	movs	r1, #133	; 0x85
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f003 fb7a 	bl	800a488 <VL53L0X_WrByte>
 8006d94:	4603      	mov	r3, r0
 8006d96:	461a      	mov	r2, r3
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006d9e:	2204      	movs	r2, #4
 8006da0:	21ff      	movs	r1, #255	; 0xff
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f003 fb70 	bl	800a488 <VL53L0X_WrByte>
 8006da8:	4603      	mov	r3, r0
 8006daa:	461a      	mov	r2, r3
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8006db2:	2200      	movs	r2, #0
 8006db4:	21cd      	movs	r1, #205	; 0xcd
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f003 fb66 	bl	800a488 <VL53L0X_WrByte>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8006dc6:	2211      	movs	r2, #17
 8006dc8:	21cc      	movs	r1, #204	; 0xcc
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f003 fb5c 	bl	800a488 <VL53L0X_WrByte>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8006dda:	2207      	movs	r2, #7
 8006ddc:	21ff      	movs	r1, #255	; 0xff
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f003 fb52 	bl	800a488 <VL53L0X_WrByte>
 8006de4:	4603      	mov	r3, r0
 8006de6:	461a      	mov	r2, r3
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8006dee:	2200      	movs	r2, #0
 8006df0:	21be      	movs	r1, #190	; 0xbe
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f003 fb48 	bl	800a488 <VL53L0X_WrByte>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8006e02:	2206      	movs	r2, #6
 8006e04:	21ff      	movs	r1, #255	; 0xff
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f003 fb3e 	bl	800a488 <VL53L0X_WrByte>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	461a      	mov	r2, r3
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8006e16:	2209      	movs	r2, #9
 8006e18:	21cc      	movs	r1, #204	; 0xcc
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f003 fb34 	bl	800a488 <VL53L0X_WrByte>
 8006e20:	4603      	mov	r3, r0
 8006e22:	461a      	mov	r2, r3
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	21ff      	movs	r1, #255	; 0xff
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f003 fb2a 	bl	800a488 <VL53L0X_WrByte>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006e3e:	2201      	movs	r2, #1
 8006e40:	21ff      	movs	r1, #255	; 0xff
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f003 fb20 	bl	800a488 <VL53L0X_WrByte>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006e52:	2200      	movs	r2, #0
 8006e54:	2100      	movs	r1, #0
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f003 fb16 	bl	800a488 <VL53L0X_WrByte>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	461a      	mov	r2, r3
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	73fb      	strb	r3, [r7, #15]
 8006e66:	e058      	b.n	8006f1a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8006e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d121      	bne.n	8006eb4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8006e70:	787b      	ldrb	r3, [r7, #1]
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d81b      	bhi.n	8006eae <VL53L0X_SetGpioConfig+0x1ce>
 8006e76:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <VL53L0X_SetGpioConfig+0x19c>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006e91 	.word	0x08006e91
 8006e80:	08006e97 	.word	0x08006e97
 8006e84:	08006e9d 	.word	0x08006e9d
 8006e88:	08006ea3 	.word	0x08006ea3
 8006e8c:	08006ea9 	.word	0x08006ea9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8006e90:	2300      	movs	r3, #0
 8006e92:	73bb      	strb	r3, [r7, #14]
				break;
 8006e94:	e00f      	b.n	8006eb6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8006e96:	2301      	movs	r3, #1
 8006e98:	73bb      	strb	r3, [r7, #14]
				break;
 8006e9a:	e00c      	b.n	8006eb6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	73bb      	strb	r3, [r7, #14]
				break;
 8006ea0:	e009      	b.n	8006eb6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	73bb      	strb	r3, [r7, #14]
				break;
 8006ea6:	e006      	b.n	8006eb6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	73bb      	strb	r3, [r7, #14]
				break;
 8006eac:	e003      	b.n	8006eb6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8006eae:	23f5      	movs	r3, #245	; 0xf5
 8006eb0:	73fb      	strb	r3, [r7, #15]
 8006eb2:	e000      	b.n	8006eb6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8006eb4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8006eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d107      	bne.n	8006ece <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	210a      	movs	r1, #10
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f003 fadf 	bl	800a488 <VL53L0X_WrByte>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8006ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10f      	bne.n	8006ef6 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006ed6:	7e3b      	ldrb	r3, [r7, #24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d102      	bne.n	8006ee2 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	73bb      	strb	r3, [r7, #14]
 8006ee0:	e001      	b.n	8006ee6 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8006ee2:	2310      	movs	r3, #16
 8006ee4:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	22ef      	movs	r2, #239	; 0xef
 8006eea:	2184      	movs	r1, #132	; 0x84
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f003 fb19 	bl	800a524 <VL53L0X_UpdateByte>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8006ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d103      	bne.n	8006f06 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	787a      	ldrb	r2, [r7, #1]
 8006f02:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8006f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d105      	bne.n	8006f1a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006f0e:	2100      	movs	r1, #0
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f83f 	bl	8006f94 <VL53L0X_ClearInterruptMask>
 8006f16:	4603      	mov	r3, r0
 8006f18:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop

08006f28 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	607a      	str	r2, [r7, #4]
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	460b      	mov	r3, r1
 8006f36:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8006f3c:	f107 0314 	add.w	r3, r7, #20
 8006f40:	461a      	mov	r2, r3
 8006f42:	210e      	movs	r1, #14
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f003 fa2b 	bl	800a3a0 <VL53L0X_RdWord>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006f4e:	8abb      	ldrh	r3, [r7, #20]
 8006f50:	045b      	lsls	r3, r3, #17
 8006f52:	461a      	mov	r2, r3
 8006f54:	4b0e      	ldr	r3, [pc, #56]	; (8006f90 <VL53L0X_GetInterruptThresholds+0x68>)
 8006f56:	4013      	ands	r3, r2
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8006f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10f      	bne.n	8006f84 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8006f64:	f107 0314 	add.w	r3, r7, #20
 8006f68:	461a      	mov	r2, r3
 8006f6a:	210c      	movs	r1, #12
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f003 fa17 	bl	800a3a0 <VL53L0X_RdWord>
 8006f72:	4603      	mov	r3, r0
 8006f74:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006f76:	8abb      	ldrh	r3, [r7, #20]
 8006f78:	045b      	lsls	r3, r3, #17
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <VL53L0X_GetInterruptThresholds+0x68>)
 8006f7e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	1ffe0000 	.word	0x1ffe0000

08006f94 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	210b      	movs	r1, #11
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f003 fa6c 	bl	800a488 <VL53L0X_WrByte>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	210b      	movs	r1, #11
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f003 fa65 	bl	800a488 <VL53L0X_WrByte>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006fc8:	f107 030d 	add.w	r3, r7, #13
 8006fcc:	461a      	mov	r2, r3
 8006fce:	2113      	movs	r1, #19
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f003 f95e 	bl	800a292 <VL53L0X_RdByte>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	461a      	mov	r2, r3
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006fe0:	7bbb      	ldrb	r3, [r7, #14]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8006fe6:	7b7b      	ldrb	r3, [r7, #13]
 8006fe8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d006      	beq.n	8006ffe <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d803      	bhi.n	8006ffe <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8006ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0d3      	beq.n	8006fa6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	2b02      	cmp	r3, #2
 8007002:	d901      	bls.n	8007008 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007004:	23f4      	movs	r3, #244	; 0xf4
 8007006:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007008:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800701e:	2300      	movs	r3, #0
 8007020:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007022:	f107 030e 	add.w	r3, r7, #14
 8007026:	461a      	mov	r2, r3
 8007028:	2113      	movs	r1, #19
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f003 f931 	bl	800a292 <VL53L0X_RdByte>
 8007030:	4603      	mov	r3, r0
 8007032:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007034:	7bbb      	ldrb	r3, [r7, #14]
 8007036:	f003 0207 	and.w	r2, r3, #7
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	f003 0318 	and.w	r3, r3, #24
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007048:	23fa      	movs	r3, #250	; 0xfa
 800704a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800704c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007064:	2300      	movs	r3, #0
 8007066:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	68b9      	ldr	r1, [r7, #8]
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 fa4a 	bl	8007506 <VL53L0X_perform_ref_spad_management>
 8007072:	4603      	mov	r3, r0
 8007074:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8007076:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <VL53L0X_set_offset_calibration_data_micro_meter>:
}


VL53L0X_Error VL53L0X_set_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t OffsetCalibrationDataMicroMeter)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800708e:	2300      	movs	r3, #0
 8007090:	76fb      	strb	r3, [r7, #27]
	int32_t cMaxOffsetMicroMeter = 511000;
 8007092:	4b1d      	ldr	r3, [pc, #116]	; (8007108 <VL53L0X_set_offset_calibration_data_micro_meter+0x84>)
 8007094:	617b      	str	r3, [r7, #20]
	int32_t cMinOffsetMicroMeter = -512000;
 8007096:	4b1d      	ldr	r3, [pc, #116]	; (800710c <VL53L0X_set_offset_calibration_data_micro_meter+0x88>)
 8007098:	613b      	str	r3, [r7, #16]
	int16_t cOffsetRange = 4096;
 800709a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800709e:	81fb      	strh	r3, [r7, #14]
	uint32_t encodedOffsetVal;

	LOG_FUNCTION_START("");

	if (OffsetCalibrationDataMicroMeter > cMaxOffsetMicroMeter)
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	dd02      	ble.n	80070ae <VL53L0X_set_offset_calibration_data_micro_meter+0x2a>
		OffsetCalibrationDataMicroMeter = cMaxOffsetMicroMeter;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	e005      	b.n	80070ba <VL53L0X_set_offset_calibration_data_micro_meter+0x36>
	else if (OffsetCalibrationDataMicroMeter < cMinOffsetMicroMeter)
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	da01      	bge.n	80070ba <VL53L0X_set_offset_calibration_data_micro_meter+0x36>
		OffsetCalibrationDataMicroMeter = cMinOffsetMicroMeter;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	603b      	str	r3, [r7, #0]

	/* The offset register is 10.2 format and units are mm
	 * therefore conversion is applied by a division of
	 * 250.
	 */
	if (OffsetCalibrationDataMicroMeter >= 0) {
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	db08      	blt.n	80070d2 <VL53L0X_set_offset_calibration_data_micro_meter+0x4e>
		encodedOffsetVal =
			OffsetCalibrationDataMicroMeter/250;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	4a13      	ldr	r2, [pc, #76]	; (8007110 <VL53L0X_set_offset_calibration_data_micro_meter+0x8c>)
 80070c4:	fb82 1203 	smull	r1, r2, r2, r3
 80070c8:	1112      	asrs	r2, r2, #4
 80070ca:	17db      	asrs	r3, r3, #31
 80070cc:	1ad3      	subs	r3, r2, r3
		encodedOffsetVal =
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	e00a      	b.n	80070e8 <VL53L0X_set_offset_calibration_data_micro_meter+0x64>
	} else {
		encodedOffsetVal =
			cOffsetRange +
 80070d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
			OffsetCalibrationDataMicroMeter/250;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	490d      	ldr	r1, [pc, #52]	; (8007110 <VL53L0X_set_offset_calibration_data_micro_meter+0x8c>)
 80070da:	fb81 0103 	smull	r0, r1, r1, r3
 80070de:	1109      	asrs	r1, r1, #4
 80070e0:	17db      	asrs	r3, r3, #31
 80070e2:	1acb      	subs	r3, r1, r3
			cOffsetRange +
 80070e4:	4413      	add	r3, r2
		encodedOffsetVal =
 80070e6:	61fb      	str	r3, [r7, #28]
	}

	Status = VL53L0X_WrWord(Dev,
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	2128      	movs	r1, #40	; 0x28
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f003 f9ed 	bl	800a4d0 <VL53L0X_WrWord>
 80070f6:	4603      	mov	r3, r0
 80070f8:	76fb      	strb	r3, [r7, #27]
		VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
		encodedOffsetVal);

	LOG_FUNCTION_END(Status);
	return Status;
 80070fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3720      	adds	r7, #32
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	0007cc18 	.word	0x0007cc18
 800710c:	fff83000 	.word	0xfff83000
 8007110:	10624dd3 	.word	0x10624dd3

08007114 <VL53L0X_get_offset_calibration_data_micro_meter>:

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007122:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007126:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8007128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800712c:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800712e:	f107 0308 	add.w	r3, r7, #8
 8007132:	461a      	mov	r2, r3
 8007134:	2128      	movs	r1, #40	; 0x28
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f003 f932 	bl	800a3a0 <VL53L0X_RdWord>
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d11e      	bne.n	8007186 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8007148:	893b      	ldrh	r3, [r7, #8]
 800714a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800714e:	b29b      	uxth	r3, r3
 8007150:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007152:	893b      	ldrh	r3, [r7, #8]
 8007154:	461a      	mov	r2, r3
 8007156:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800715a:	429a      	cmp	r2, r3
 800715c:	dd0b      	ble.n	8007176 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800715e:	893a      	ldrh	r2, [r7, #8]
 8007160:	897b      	ldrh	r3, [r7, #10]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	b29b      	uxth	r3, r3
 8007166:	b21b      	sxth	r3, r3
 8007168:	461a      	mov	r2, r3
					* 250;
 800716a:	23fa      	movs	r3, #250	; 0xfa
 800716c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e007      	b.n	8007186 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007176:	893b      	ldrh	r3, [r7, #8]
 8007178:	b21b      	sxth	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	23fa      	movs	r3, #250	; 0xfa
 800717e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007186:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007192:	b480      	push	{r7}
 8007194:	b08b      	sub	sp, #44	; 0x2c
 8007196:	af00      	add	r7, sp, #0
 8007198:	60f8      	str	r0, [r7, #12]
 800719a:	60b9      	str	r1, [r7, #8]
 800719c:	607a      	str	r2, [r7, #4]
 800719e:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80071a0:	2308      	movs	r3, #8
 80071a2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	f04f 32ff 	mov.w	r2, #4294967295
 80071ae:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b8:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	fbb3 f2f2 	udiv	r2, r3, r2
 80071c2:	69b9      	ldr	r1, [r7, #24]
 80071c4:	fb01 f202 	mul.w	r2, r1, r2
 80071c8:	1a9b      	subs	r3, r3, r2
 80071ca:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
 80071d0:	e030      	b.n	8007234 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	4413      	add	r3, r2
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80071e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d11e      	bne.n	8007226 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80071e8:	7ffa      	ldrb	r2, [r7, #31]
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	fa42 f303 	asr.w	r3, r2, r3
 80071f0:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80071f6:	e016      	b.n	8007226 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80071f8:	7ffb      	ldrb	r3, [r7, #31]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00b      	beq.n	800721a <get_next_good_spad+0x88>
				success = 1;
 8007202:	2301      	movs	r3, #1
 8007204:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	fb03 f202 	mul.w	r2, r3, r2
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	4413      	add	r3, r2
 8007212:	461a      	mov	r2, r3
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	601a      	str	r2, [r3, #0]
				break;
 8007218:	e009      	b.n	800722e <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800721a:	7ffb      	ldrb	r3, [r7, #31]
 800721c:	085b      	lsrs	r3, r3, #1
 800721e:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	3301      	adds	r3, #1
 8007224:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007226:	6a3a      	ldr	r2, [r7, #32]
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	429a      	cmp	r2, r3
 800722c:	d3e4      	bcc.n	80071f8 <get_next_good_spad+0x66>
				coarseIndex++) {
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	3301      	adds	r3, #1
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	429a      	cmp	r2, r3
 800723a:	d202      	bcs.n	8007242 <get_next_good_spad+0xb0>
 800723c:	7fbb      	ldrb	r3, [r7, #30]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0c7      	beq.n	80071d2 <get_next_good_spad+0x40>
		}
	}
}
 8007242:	bf00      	nop
 8007244:	372c      	adds	r7, #44	; 0x2c
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr

0800724c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007254:	2301      	movs	r3, #1
 8007256:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	099b      	lsrs	r3, r3, #6
 800725c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800725e:	4a07      	ldr	r2, [pc, #28]	; (800727c <is_aperture+0x30>)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <is_aperture+0x22>
		isAperture = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800726e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	bc80      	pop	{r7}
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	200002c8 	.word	0x200002c8

08007280 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007280:	b480      	push	{r7}
 8007282:	b089      	sub	sp, #36	; 0x24
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800728c:	2300      	movs	r3, #0
 800728e:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007290:	2308      	movs	r3, #8
 8007292:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	fbb2 f3f3 	udiv	r3, r2, r3
 800729c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80072a6:	69b9      	ldr	r1, [r7, #24]
 80072a8:	fb01 f202 	mul.w	r2, r1, r2
 80072ac:	1a9b      	subs	r3, r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d302      	bcc.n	80072be <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80072b8:	23ce      	movs	r3, #206	; 0xce
 80072ba:	77fb      	strb	r3, [r7, #31]
 80072bc:	e010      	b.n	80072e0 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	4413      	add	r3, r2
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	b25a      	sxtb	r2, r3
 80072c8:	2101      	movs	r1, #1
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	fa01 f303 	lsl.w	r3, r1, r3
 80072d0:	b25b      	sxtb	r3, r3
 80072d2:	4313      	orrs	r3, r2
 80072d4:	b259      	sxtb	r1, r3
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	4413      	add	r3, r2
 80072dc:	b2ca      	uxtb	r2, r1
 80072de:	701a      	strb	r2, [r3, #0]

	return status;
 80072e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3724      	adds	r7, #36	; 0x24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bc80      	pop	{r7}
 80072ec:	4770      	bx	lr

080072ee <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80072f8:	2306      	movs	r3, #6
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	21b0      	movs	r1, #176	; 0xb0
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f002 fff2 	bl	800a2e8 <VL53L0X_WriteMulti>
 8007304:	4603      	mov	r3, r0
 8007306:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8007308:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800731e:	2306      	movs	r3, #6
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	21b0      	movs	r1, #176	; 0xb0
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f003 f80f 	bl	800a348 <VL53L0X_ReadMulti>
 800732a:	4603      	mov	r3, r0
 800732c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800732e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b08c      	sub	sp, #48	; 0x30
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
 8007346:	460b      	mov	r3, r1
 8007348:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800734a:	2300      	movs	r3, #0
 800734c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8007350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007352:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8007354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007356:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007358:	2300      	movs	r3, #0
 800735a:	62bb      	str	r3, [r7, #40]	; 0x28
 800735c:	e02b      	b.n	80073b6 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800735e:	f107 031c 	add.w	r3, r7, #28
 8007362:	6a3a      	ldr	r2, [r7, #32]
 8007364:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff ff13 	bl	8007192 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007372:	d103      	bne.n	800737c <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007374:	23ce      	movs	r3, #206	; 0xce
 8007376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800737a:	e020      	b.n	80073be <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	461a      	mov	r2, r3
 8007380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007382:	4413      	add	r3, r2
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff ff61 	bl	800724c <is_aperture>
 800738a:	4603      	mov	r3, r0
 800738c:	461a      	mov	r2, r3
 800738e:	7afb      	ldrb	r3, [r7, #11]
 8007390:	4293      	cmp	r3, r2
 8007392:	d003      	beq.n	800739c <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007394:	23ce      	movs	r3, #206	; 0xce
 8007396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800739a:	e010      	b.n	80073be <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80073a0:	6a3a      	ldr	r2, [r7, #32]
 80073a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073a4:	6838      	ldr	r0, [r7, #0]
 80073a6:	f7ff ff6b 	bl	8007280 <enable_spad_bit>
		currentSpad++;
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	3301      	adds	r3, #1
 80073ae:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	3301      	adds	r3, #1
 80073b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d3cf      	bcc.n	800735e <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80073be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073c0:	6a3a      	ldr	r2, [r7, #32]
 80073c2:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80073c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d106      	bne.n	80073da <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7ff ff8d 	bl	80072ee <set_ref_spad_map>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80073da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d121      	bne.n	8007426 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80073e2:	f107 0314 	add.w	r3, r7, #20
 80073e6:	4619      	mov	r1, r3
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f7ff ff93 	bl	8007314 <get_ref_spad_map>
 80073ee:	4603      	mov	r3, r0
 80073f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80073f8:	e011      	b.n	800741e <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	4413      	add	r3, r2
 8007400:	781a      	ldrb	r2, [r3, #0]
 8007402:	f107 0114 	add.w	r1, r7, #20
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	440b      	add	r3, r1
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d003      	beq.n	8007418 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007410:	23ce      	movs	r3, #206	; 0xce
 8007412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007416:	e006      	b.n	8007426 <enable_ref_spads+0xec>
			}
			i++;
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	3301      	adds	r3, #1
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800741e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007422:	429a      	cmp	r2, r3
 8007424:	d3e9      	bcc.n	80073fa <enable_ref_spads+0xc0>
		}
	}
	return status;
 8007426:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800742a:	4618      	mov	r0, r3
 800742c:	3730      	adds	r7, #48	; 0x30
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b08a      	sub	sp, #40	; 0x28
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800743c:	2300      	movs	r3, #0
 800743e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8007442:	2300      	movs	r3, #0
 8007444:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800744e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007452:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007456:	2b00      	cmp	r3, #0
 8007458:	d107      	bne.n	800746a <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800745a:	22c0      	movs	r2, #192	; 0xc0
 800745c:	2101      	movs	r1, #1
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f003 f812 	bl	800a488 <VL53L0X_WrByte>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800746a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800746e:	2b00      	cmp	r3, #0
 8007470:	d108      	bne.n	8007484 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007472:	f107 0308 	add.w	r3, r7, #8
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff fc01 	bl	8006c80 <VL53L0X_PerformSingleRangingMeasurement>
 800747e:	4603      	mov	r3, r0
 8007480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8007484:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007488:	2b00      	cmp	r3, #0
 800748a:	d107      	bne.n	800749c <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800748c:	2201      	movs	r2, #1
 800748e:	21ff      	movs	r1, #255	; 0xff
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f002 fff9 	bl	800a488 <VL53L0X_WrByte>
 8007496:	4603      	mov	r3, r0
 8007498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800749c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d107      	bne.n	80074b4 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	21b6      	movs	r1, #182	; 0xb6
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f002 ff79 	bl	800a3a0 <VL53L0X_RdWord>
 80074ae:	4603      	mov	r3, r0
 80074b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80074b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d107      	bne.n	80074cc <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80074bc:	2200      	movs	r2, #0
 80074be:	21ff      	movs	r1, #255	; 0xff
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f002 ffe1 	bl	800a488 <VL53L0X_WrByte>
 80074c6:	4603      	mov	r3, r0
 80074c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80074cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d112      	bne.n	80074fa <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80074d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074d8:	461a      	mov	r2, r3
 80074da:	2101      	movs	r1, #1
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f002 ffd3 	bl	800a488 <VL53L0X_WrByte>
 80074e2:	4603      	mov	r3, r0
 80074e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80074e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d104      	bne.n	80074fa <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80074f6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80074fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3728      	adds	r7, #40	; 0x28
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8007506:	b590      	push	{r4, r7, lr}
 8007508:	b09d      	sub	sp, #116	; 0x74
 800750a:	af06      	add	r7, sp, #24
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007512:	2300      	movs	r3, #0
 8007514:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8007518:	23b4      	movs	r3, #180	; 0xb4
 800751a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800751e:	2303      	movs	r3, #3
 8007520:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8007522:	232c      	movs	r3, #44	; 0x2c
 8007524:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8007532:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007536:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800753c:	2300      	movs	r3, #0
 800753e:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8007540:	2306      	movs	r3, #6
 8007542:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8007544:	2300      	movs	r3, #0
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8007548:	2300      	movs	r3, #0
 800754a:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800754c:	2300      	movs	r3, #0
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 800756a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800756c:	2300      	movs	r3, #0
 800756e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007570:	e009      	b.n	8007586 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007576:	4413      	add	r3, r2
 8007578:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800757c:	2200      	movs	r2, #0
 800757e:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007582:	3301      	adds	r3, #1
 8007584:	64bb      	str	r3, [r7, #72]	; 0x48
 8007586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	429a      	cmp	r2, r3
 800758c:	d3f1      	bcc.n	8007572 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800758e:	2201      	movs	r2, #1
 8007590:	21ff      	movs	r1, #255	; 0xff
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f002 ff78 	bl	800a488 <VL53L0X_WrByte>
 8007598:	4603      	mov	r3, r0
 800759a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800759e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d107      	bne.n	80075b6 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80075a6:	2200      	movs	r2, #0
 80075a8:	214f      	movs	r1, #79	; 0x4f
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f002 ff6c 	bl	800a488 <VL53L0X_WrByte>
 80075b0:	4603      	mov	r3, r0
 80075b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80075b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d107      	bne.n	80075ce <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80075be:	222c      	movs	r2, #44	; 0x2c
 80075c0:	214e      	movs	r1, #78	; 0x4e
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f002 ff60 	bl	800a488 <VL53L0X_WrByte>
 80075c8:	4603      	mov	r3, r0
 80075ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80075ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d107      	bne.n	80075e6 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80075d6:	2200      	movs	r2, #0
 80075d8:	21ff      	movs	r1, #255	; 0xff
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f002 ff54 	bl	800a488 <VL53L0X_WrByte>
 80075e0:	4603      	mov	r3, r0
 80075e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80075e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d109      	bne.n	8007602 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80075ee:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80075f2:	461a      	mov	r2, r3
 80075f4:	21b6      	movs	r1, #182	; 0xb6
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f002 ff46 	bl	800a488 <VL53L0X_WrByte>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8007602:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007606:	2b00      	cmp	r3, #0
 8007608:	d107      	bne.n	800761a <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800760a:	2200      	movs	r2, #0
 800760c:	2180      	movs	r1, #128	; 0x80
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f002 ff3a 	bl	800a488 <VL53L0X_WrByte>
 8007614:	4603      	mov	r3, r0
 8007616:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800761a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10a      	bne.n	8007638 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8007622:	f107 0210 	add.w	r2, r7, #16
 8007626:	f107 0111 	add.w	r1, r7, #17
 800762a:	2300      	movs	r3, #0
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 fbbb 	bl	8007da8 <VL53L0X_perform_ref_calibration>
 8007632:	4603      	mov	r3, r0
 8007634:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8007638:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800763c:	2b00      	cmp	r3, #0
 800763e:	d121      	bne.n	8007684 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8007644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007646:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8007648:	2300      	movs	r3, #0
 800764a:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800764c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800764e:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800765c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007660:	f107 0218 	add.w	r2, r7, #24
 8007664:	9204      	str	r2, [sp, #16]
 8007666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007668:	9203      	str	r2, [sp, #12]
 800766a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800766c:	9202      	str	r2, [sp, #8]
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	4623      	mov	r3, r4
 8007676:	4602      	mov	r2, r0
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f7ff fe5e 	bl	800733a <enable_ref_spads>
 800767e:	4603      	mov	r3, r0
 8007680:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007684:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007688:	2b00      	cmp	r3, #0
 800768a:	d174      	bne.n	8007776 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007690:	f107 0312 	add.w	r3, r7, #18
 8007694:	4619      	mov	r1, r3
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7ff fecb 	bl	8007432 <perform_ref_signal_measurement>
 800769c:	4603      	mov	r3, r0
 800769e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80076a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d161      	bne.n	800776e <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80076aa:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80076ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d25d      	bcs.n	800776e <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80076b2:	2300      	movs	r3, #0
 80076b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80076b6:	e009      	b.n	80076cc <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076bc:	4413      	add	r3, r2
 80076be:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80076c2:	2200      	movs	r2, #0
 80076c4:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80076c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c8:	3301      	adds	r3, #1
 80076ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80076cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d3f1      	bcc.n	80076b8 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80076d4:	e002      	b.n	80076dc <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80076d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d8:	3301      	adds	r3, #1
 80076da:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80076dc:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80076e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e2:	4413      	add	r3, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff fdb1 	bl	800724c <is_aperture>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d103      	bne.n	80076f8 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80076f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d3ee      	bcc.n	80076d6 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80076f8:	2301      	movs	r3, #1
 80076fa:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80076fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076fe:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800770c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007710:	f107 0218 	add.w	r2, r7, #24
 8007714:	9204      	str	r2, [sp, #16]
 8007716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007718:	9203      	str	r2, [sp, #12]
 800771a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800771c:	9202      	str	r2, [sp, #8]
 800771e:	9301      	str	r3, [sp, #4]
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	4623      	mov	r3, r4
 8007726:	4602      	mov	r2, r0
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f7ff fe06 	bl	800733a <enable_ref_spads>
 800772e:	4603      	mov	r3, r0
 8007730:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007734:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007738:	2b00      	cmp	r3, #0
 800773a:	d11b      	bne.n	8007774 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8007740:	f107 0312 	add.w	r3, r7, #18
 8007744:	4619      	mov	r1, r3
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f7ff fe73 	bl	8007432 <perform_ref_signal_measurement>
 800774c:	4603      	mov	r3, r0
 800774e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007752:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10c      	bne.n	8007774 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800775a:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800775c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800775e:	429a      	cmp	r2, r3
 8007760:	d208      	bcs.n	8007774 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007762:	2301      	movs	r3, #1
 8007764:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8007768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776a:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800776c:	e002      	b.n	8007774 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007772:	e000      	b.n	8007776 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8007774:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007776:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800777a:	2b00      	cmp	r3, #0
 800777c:	f040 80af 	bne.w	80078de <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007780:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007782:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007784:	429a      	cmp	r2, r3
 8007786:	f240 80aa 	bls.w	80078de <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800778a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800778c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007792:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800779a:	f107 031c 	add.w	r3, r7, #28
 800779e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077a0:	4618      	mov	r0, r3
 80077a2:	f002 ff79 	bl	800a698 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80077a6:	8a7b      	ldrh	r3, [r7, #18]
 80077a8:	461a      	mov	r2, r3
 80077aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bfb8      	it	lt
 80077b2:	425b      	neglt	r3, r3
 80077b4:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80077bc:	e086      	b.n	80078cc <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 80077c4:	f107 0314 	add.w	r3, r7, #20
 80077c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077cc:	f7ff fce1 	bl	8007192 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d6:	d103      	bne.n	80077e0 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80077d8:	23ce      	movs	r3, #206	; 0xce
 80077da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80077de:	e07e      	b.n	80078de <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80077e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e2:	3301      	adds	r3, #1
 80077e4:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80077e6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	4413      	add	r3, r2
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff fd2c 	bl	800724c <is_aperture>
 80077f4:	4603      	mov	r3, r0
 80077f6:	461a      	mov	r2, r3
 80077f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d003      	beq.n	8007806 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80077fe:	23ce      	movs	r3, #206	; 0xce
 8007800:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007804:	e06b      	b.n	80078de <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8007810:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007812:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff fd33 	bl	8007280 <enable_spad_bit>
 800781a:	4603      	mov	r3, r0
 800781c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007820:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10c      	bne.n	8007842 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8007828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800782a:	3301      	adds	r3, #1
 800782c:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8007834:	4619      	mov	r1, r3
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7ff fd59 	bl	80072ee <set_ref_spad_map>
 800783c:	4603      	mov	r3, r0
 800783e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8007842:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007846:	2b00      	cmp	r3, #0
 8007848:	d146      	bne.n	80078d8 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800784a:	f107 0312 	add.w	r3, r7, #18
 800784e:	4619      	mov	r1, r3
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7ff fdee 	bl	8007432 <perform_ref_signal_measurement>
 8007856:	4603      	mov	r3, r0
 8007858:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800785c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007860:	2b00      	cmp	r3, #0
 8007862:	d13b      	bne.n	80078dc <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8007864:	8a7b      	ldrh	r3, [r7, #18]
 8007866:	461a      	mov	r2, r3
 8007868:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	bfb8      	it	lt
 8007870:	425b      	neglt	r3, r3
 8007872:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8007874:	8a7b      	ldrh	r3, [r7, #18]
 8007876:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007878:	429a      	cmp	r2, r3
 800787a:	d21c      	bcs.n	80078b6 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800787c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007880:	429a      	cmp	r2, r3
 8007882:	d914      	bls.n	80078ae <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8007884:	f107 031c 	add.w	r3, r7, #28
 8007888:	4619      	mov	r1, r3
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f7ff fd2f 	bl	80072ee <set_ref_spad_map>
 8007890:	4603      	mov	r3, r0
 8007892:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800789c:	f107 011c 	add.w	r1, r7, #28
 80078a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078a2:	4618      	mov	r0, r3
 80078a4:	f002 fef8 	bl	800a698 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80078a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078aa:	3b01      	subs	r3, #1
 80078ac:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80078ae:	2301      	movs	r3, #1
 80078b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078b4:	e00a      	b.n	80078cc <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80078c0:	f107 031c 	add.w	r3, r7, #28
 80078c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078c6:	4618      	mov	r0, r3
 80078c8:	f002 fee6 	bl	800a698 <memcpy>
		while (!complete) {
 80078cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f43f af74 	beq.w	80077be <VL53L0X_perform_ref_spad_management+0x2b8>
 80078d6:	e002      	b.n	80078de <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80078d8:	bf00      	nop
 80078da:	e000      	b.n	80078de <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80078dc:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80078de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d115      	bne.n	8007912 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078ea:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80078f2:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	b2da      	uxtb	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	781a      	ldrb	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007912:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007916:	4618      	mov	r0, r3
 8007918:	375c      	adds	r7, #92	; 0x5c
 800791a:	46bd      	mov	sp, r7
 800791c:	bd90      	pop	{r4, r7, pc}

0800791e <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800791e:	b590      	push	{r4, r7, lr}
 8007920:	b093      	sub	sp, #76	; 0x4c
 8007922:	af06      	add	r7, sp, #24
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	4613      	mov	r3, r2
 800792a:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800792c:	2300      	movs	r3, #0
 800792e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8007936:	23b4      	movs	r3, #180	; 0xb4
 8007938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800793c:	2306      	movs	r3, #6
 800793e:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8007940:	232c      	movs	r3, #44	; 0x2c
 8007942:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007944:	2201      	movs	r2, #1
 8007946:	21ff      	movs	r1, #255	; 0xff
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f002 fd9d 	bl	800a488 <VL53L0X_WrByte>
 800794e:	4603      	mov	r3, r0
 8007950:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007954:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007958:	2b00      	cmp	r3, #0
 800795a:	d107      	bne.n	800796c <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800795c:	2200      	movs	r2, #0
 800795e:	214f      	movs	r1, #79	; 0x4f
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f002 fd91 	bl	800a488 <VL53L0X_WrByte>
 8007966:	4603      	mov	r3, r0
 8007968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800796c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007970:	2b00      	cmp	r3, #0
 8007972:	d107      	bne.n	8007984 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007974:	222c      	movs	r2, #44	; 0x2c
 8007976:	214e      	movs	r1, #78	; 0x4e
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f002 fd85 	bl	800a488 <VL53L0X_WrByte>
 800797e:	4603      	mov	r3, r0
 8007980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007984:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007988:	2b00      	cmp	r3, #0
 800798a:	d107      	bne.n	800799c <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800798c:	2200      	movs	r2, #0
 800798e:	21ff      	movs	r1, #255	; 0xff
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f002 fd79 	bl	800a488 <VL53L0X_WrByte>
 8007996:	4603      	mov	r3, r0
 8007998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800799c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d109      	bne.n	80079b8 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80079a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079a8:	461a      	mov	r2, r3
 80079aa:	21b6      	movs	r1, #182	; 0xb6
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f002 fd6b 	bl	800a488 <VL53L0X_WrByte>
 80079b2:	4603      	mov	r3, r0
 80079b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80079b8:	2300      	movs	r3, #0
 80079ba:	627b      	str	r3, [r7, #36]	; 0x24
 80079bc:	e009      	b.n	80079d2 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80079c8:	2200      	movs	r2, #0
 80079ca:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	3301      	adds	r3, #1
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
 80079d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d3f1      	bcc.n	80079be <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d011      	beq.n	8007a04 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80079e0:	e002      	b.n	80079e8 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	3301      	adds	r3, #1
 80079e6:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80079e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	4413      	add	r3, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff fc2b 	bl	800724c <is_aperture>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d103      	bne.n	8007a04 <VL53L0X_set_reference_spads+0xe6>
 80079fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d3ee      	bcc.n	80079e2 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8007a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a14:	79f9      	ldrb	r1, [r7, #7]
 8007a16:	f107 0214 	add.w	r2, r7, #20
 8007a1a:	9204      	str	r2, [sp, #16]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	9203      	str	r2, [sp, #12]
 8007a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a22:	9202      	str	r2, [sp, #8]
 8007a24:	9301      	str	r3, [sp, #4]
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	4623      	mov	r3, r4
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7ff fc83 	bl	800733a <enable_ref_spads>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8007a3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10c      	bne.n	8007a5c <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	79fa      	ldrb	r2, [r7, #7]
 8007a58:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8007a5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3734      	adds	r7, #52	; 0x34
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd90      	pop	{r4, r7, pc}

08007a68 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a74:	2300      	movs	r3, #0
 8007a76:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	f043 0301 	orr.w	r3, r3, #1
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	461a      	mov	r2, r3
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f002 fcfb 	bl	800a488 <VL53L0X_WrByte>
 8007a92:	4603      	mov	r3, r0
 8007a94:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8007a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d104      	bne.n	8007aa8 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f9bf 	bl	8007e22 <VL53L0X_measurement_poll_for_completion>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d105      	bne.n	8007abc <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff fa6e 	bl	8006f94 <VL53L0X_ClearInterruptMask>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d106      	bne.n	8007ad2 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f002 fcdd 	bl	800a488 <VL53L0X_WrByte>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	73fb      	strb	r3, [r7, #15]

	return Status;
 8007ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b084      	sub	sp, #16
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	4608      	mov	r0, r1
 8007ae8:	4611      	mov	r1, r2
 8007aea:	461a      	mov	r2, r3
 8007aec:	4603      	mov	r3, r0
 8007aee:	70fb      	strb	r3, [r7, #3]
 8007af0:	460b      	mov	r3, r1
 8007af2:	70bb      	strb	r3, [r7, #2]
 8007af4:	4613      	mov	r3, r2
 8007af6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007b00:	2201      	movs	r2, #1
 8007b02:	21ff      	movs	r1, #255	; 0xff
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f002 fcbf 	bl	800a488 <VL53L0X_WrByte>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007b14:	2200      	movs	r2, #0
 8007b16:	2100      	movs	r1, #0
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f002 fcb5 	bl	800a488 <VL53L0X_WrByte>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	461a      	mov	r2, r3
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007b28:	2200      	movs	r2, #0
 8007b2a:	21ff      	movs	r1, #255	; 0xff
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f002 fcab 	bl	800a488 <VL53L0X_WrByte>
 8007b32:	4603      	mov	r3, r0
 8007b34:	461a      	mov	r2, r3
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8007b3c:	78fb      	ldrb	r3, [r7, #3]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d01e      	beq.n	8007b80 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8007b42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d009      	beq.n	8007b5e <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	21cb      	movs	r1, #203	; 0xcb
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f002 fb9f 	bl	800a292 <VL53L0X_RdByte>
 8007b54:	4603      	mov	r3, r0
 8007b56:	461a      	mov	r2, r3
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007b5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d02a      	beq.n	8007bbc <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8007b66:	f107 030e 	add.w	r3, r7, #14
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	21ee      	movs	r1, #238	; 0xee
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f002 fb8f 	bl	800a292 <VL53L0X_RdByte>
 8007b74:	4603      	mov	r3, r0
 8007b76:	461a      	mov	r2, r3
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	73fb      	strb	r3, [r7, #15]
 8007b7e:	e01d      	b.n	8007bbc <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8007b80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8007b88:	78bb      	ldrb	r3, [r7, #2]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	21cb      	movs	r1, #203	; 0xcb
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f002 fc7a 	bl	800a488 <VL53L0X_WrByte>
 8007b94:	4603      	mov	r3, r0
 8007b96:	461a      	mov	r2, r3
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007b9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00a      	beq.n	8007bbc <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8007ba6:	787b      	ldrb	r3, [r7, #1]
 8007ba8:	2280      	movs	r2, #128	; 0x80
 8007baa:	21ee      	movs	r1, #238	; 0xee
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f002 fcb9 	bl	800a524 <VL53L0X_UpdateByte>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	21ff      	movs	r1, #255	; 0xff
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f002 fc61 	bl	800a488 <VL53L0X_WrByte>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	461a      	mov	r2, r3
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f002 fc57 	bl	800a488 <VL53L0X_WrByte>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	461a      	mov	r2, r3
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007be4:	2200      	movs	r2, #0
 8007be6:	21ff      	movs	r1, #255	; 0xff
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f002 fc4d 	bl	800a488 <VL53L0X_WrByte>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	f023 0310 	bic.w	r3, r3, #16
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	701a      	strb	r2, [r3, #0]

	return Status;
 8007c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08a      	sub	sp, #40	; 0x28
 8007c14:	af04      	add	r7, sp, #16
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	460b      	mov	r3, r1
 8007c20:	71fb      	strb	r3, [r7, #7]
 8007c22:	4613      	mov	r3, r2
 8007c24:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c26:	2300      	movs	r3, #0
 8007c28:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007c3a:	79bb      	ldrb	r3, [r7, #6]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007c46:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8007c48:	2201      	movs	r2, #1
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f002 fc1b 	bl	800a488 <VL53L0X_WrByte>
 8007c52:	4603      	mov	r3, r0
 8007c54:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d105      	bne.n	8007c6a <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8007c5e:	2140      	movs	r1, #64	; 0x40
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f7ff ff01 	bl	8007a68 <VL53L0X_perform_single_ref_calibration>
 8007c66:	4603      	mov	r3, r0
 8007c68:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d115      	bne.n	8007c9e <VL53L0X_perform_vhv_calibration+0x8e>
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d112      	bne.n	8007c9e <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007c78:	7d39      	ldrb	r1, [r7, #20]
 8007c7a:	7d7a      	ldrb	r2, [r7, #21]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9303      	str	r3, [sp, #12]
 8007c80:	2301      	movs	r3, #1
 8007c82:	9302      	str	r3, [sp, #8]
 8007c84:	f107 0313 	add.w	r3, r7, #19
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	2101      	movs	r1, #1
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff ff23 	bl	8007ade <VL53L0X_ref_calibration_io>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	75fb      	strb	r3, [r7, #23]
 8007c9c:	e002      	b.n	8007ca4 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007ca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d112      	bne.n	8007cd2 <VL53L0X_perform_vhv_calibration+0xc2>
 8007cac:	79bb      	ldrb	r3, [r7, #6]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00f      	beq.n	8007cd2 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007cb2:	7dbb      	ldrb	r3, [r7, #22]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f002 fbe5 	bl	800a488 <VL53L0X_WrByte>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d103      	bne.n	8007cd2 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	7dba      	ldrb	r2, [r7, #22]
 8007cce:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007cd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b08a      	sub	sp, #40	; 0x28
 8007ce2:	af04      	add	r7, sp, #16
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	4611      	mov	r1, r2
 8007cea:	461a      	mov	r2, r3
 8007cec:	460b      	mov	r3, r1
 8007cee:	71fb      	strb	r3, [r7, #7]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007d04:	79bb      	ldrb	r3, [r7, #6]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007d10:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8007d12:	2202      	movs	r2, #2
 8007d14:	2101      	movs	r1, #1
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f002 fbb6 	bl	800a488 <VL53L0X_WrByte>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007d20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d105      	bne.n	8007d34 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8007d28:	2100      	movs	r1, #0
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f7ff fe9c 	bl	8007a68 <VL53L0X_perform_single_ref_calibration>
 8007d30:	4603      	mov	r3, r0
 8007d32:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d115      	bne.n	8007d68 <VL53L0X_perform_phase_calibration+0x8a>
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d112      	bne.n	8007d68 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007d42:	7d39      	ldrb	r1, [r7, #20]
 8007d44:	7d7a      	ldrb	r2, [r7, #21]
 8007d46:	2301      	movs	r3, #1
 8007d48:	9303      	str	r3, [sp, #12]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	9302      	str	r3, [sp, #8]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	9301      	str	r3, [sp, #4]
 8007d52:	f107 0313 	add.w	r3, r7, #19
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7ff febe 	bl	8007ade <VL53L0X_ref_calibration_io>
 8007d62:	4603      	mov	r3, r0
 8007d64:	75fb      	strb	r3, [r7, #23]
 8007d66:	e002      	b.n	8007d6e <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007d6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d112      	bne.n	8007d9c <VL53L0X_perform_phase_calibration+0xbe>
 8007d76:	79bb      	ldrb	r3, [r7, #6]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00f      	beq.n	8007d9c <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007d7c:	7dbb      	ldrb	r3, [r7, #22]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	2101      	movs	r1, #1
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f002 fb80 	bl	800a488 <VL53L0X_WrByte>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007d8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d103      	bne.n	8007d9c <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	7dba      	ldrb	r2, [r7, #22]
 8007d98:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007d9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007db6:	2300      	movs	r3, #0
 8007db8:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007dc4:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007dc6:	78fa      	ldrb	r2, [r7, #3]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	68b9      	ldr	r1, [r7, #8]
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f7ff ff1f 	bl	8007c10 <VL53L0X_perform_vhv_calibration>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d107      	bne.n	8007dee <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007dde:	78fa      	ldrb	r2, [r7, #3]
 8007de0:	2300      	movs	r3, #0
 8007de2:	6879      	ldr	r1, [r7, #4]
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f7ff ff7a 	bl	8007cde <VL53L0X_perform_phase_calibration>
 8007dea:	4603      	mov	r3, r0
 8007dec:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8007dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10f      	bne.n	8007e16 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007df6:	7dbb      	ldrb	r3, [r7, #22]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f002 fb43 	bl	800a488 <VL53L0X_WrByte>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007e06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d103      	bne.n	8007e16 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	7dba      	ldrb	r2, [r7, #22]
 8007e12:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b086      	sub	sp, #24
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007e36:	f107 030f 	add.w	r3, r7, #15
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7fe fdbb 	bl	80069b8 <VL53L0X_GetMeasurementDataReady>
 8007e42:	4603      	mov	r3, r0
 8007e44:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8007e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10f      	bne.n	8007e6e <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d00e      	beq.n	8007e72 <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	3301      	adds	r3, #1
 8007e58:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	2bc7      	cmp	r3, #199	; 0xc7
 8007e5e:	d902      	bls.n	8007e66 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007e60:	23f9      	movs	r3, #249	; 0xf9
 8007e62:	75fb      	strb	r3, [r7, #23]
			break;
 8007e64:	e006      	b.n	8007e74 <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f002 fb90 	bl	800a58c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007e6c:	e7e3      	b.n	8007e36 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8007e6e:	bf00      	nop
 8007e70:	e000      	b.n	8007e74 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 8007e72:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007e74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	3301      	adds	r3, #1
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bc80      	pop	{r7}
 8007ea2:	4770      	bx	lr

08007ea4 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8007eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007eb4:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8007eb6:	e002      	b.n	8007ebe <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	089b      	lsrs	r3, r3, #2
 8007ebc:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d8f8      	bhi.n	8007eb8 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8007ec6:	e017      	b.n	8007ef8 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	4413      	add	r3, r2
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d30b      	bcc.n	8007eec <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	4413      	add	r3, r2
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	085b      	lsrs	r3, r3, #1
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]
 8007eea:	e002      	b.n	8007ef2 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	085b      	lsrs	r3, r3, #1
 8007ef0:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	089b      	lsrs	r3, r3, #2
 8007ef6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e4      	bne.n	8007ec8 <VL53L0X_isqrt+0x24>
	}

	return res;
 8007efe:	68fb      	ldr	r3, [r7, #12]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc80      	pop	{r7}
 8007f08:	4770      	bx	lr

08007f0a <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b086      	sub	sp, #24
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f12:	2300      	movs	r3, #0
 8007f14:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8007f16:	2200      	movs	r2, #0
 8007f18:	2183      	movs	r1, #131	; 0x83
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f002 fab4 	bl	800a488 <VL53L0X_WrByte>
 8007f20:	4603      	mov	r3, r0
 8007f22:	461a      	mov	r2, r3
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8007f2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d11c      	bne.n	8007f6c <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8007f36:	f107 030f 	add.w	r3, r7, #15
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	2183      	movs	r1, #131	; 0x83
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f002 f9a7 	bl	800a292 <VL53L0X_RdByte>
 8007f44:	4603      	mov	r3, r0
 8007f46:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d109      	bne.n	8007f62 <VL53L0X_device_read_strobe+0x58>
 8007f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d105      	bne.n	8007f62 <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	2bc7      	cmp	r3, #199	; 0xc7
 8007f60:	d9e9      	bls.n	8007f36 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	2bc7      	cmp	r3, #199	; 0xc7
 8007f66:	d901      	bls.n	8007f6c <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007f68:	23f9      	movs	r3, #249	; 0xf9
 8007f6a:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	2183      	movs	r1, #131	; 0x83
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f002 fa89 	bl	800a488 <VL53L0X_WrByte>
 8007f76:	4603      	mov	r3, r0
 8007f78:	461a      	mov	r2, r3
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8007f80:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3718      	adds	r7, #24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b098      	sub	sp, #96	; 0x60
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8007fbc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007fc0:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8007fd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8007fd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007fdc:	2b07      	cmp	r3, #7
 8007fde:	f000 8408 	beq.w	80087f2 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	2180      	movs	r1, #128	; 0x80
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f002 fa4e 	bl	800a488 <VL53L0X_WrByte>
 8007fec:	4603      	mov	r3, r0
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	21ff      	movs	r1, #255	; 0xff
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f002 fa42 	bl	800a488 <VL53L0X_WrByte>
 8008004:	4603      	mov	r3, r0
 8008006:	461a      	mov	r2, r3
 8008008:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800800c:	4313      	orrs	r3, r2
 800800e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008012:	2200      	movs	r2, #0
 8008014:	2100      	movs	r1, #0
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f002 fa36 	bl	800a488 <VL53L0X_WrByte>
 800801c:	4603      	mov	r3, r0
 800801e:	461a      	mov	r2, r3
 8008020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008024:	4313      	orrs	r3, r2
 8008026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800802a:	2206      	movs	r2, #6
 800802c:	21ff      	movs	r1, #255	; 0xff
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f002 fa2a 	bl	800a488 <VL53L0X_WrByte>
 8008034:	4603      	mov	r3, r0
 8008036:	461a      	mov	r2, r3
 8008038:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800803c:	4313      	orrs	r3, r2
 800803e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008042:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008046:	461a      	mov	r2, r3
 8008048:	2183      	movs	r1, #131	; 0x83
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f002 f921 	bl	800a292 <VL53L0X_RdByte>
 8008050:	4603      	mov	r3, r0
 8008052:	461a      	mov	r2, r3
 8008054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008058:	4313      	orrs	r3, r2
 800805a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800805e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008062:	f043 0304 	orr.w	r3, r3, #4
 8008066:	b2db      	uxtb	r3, r3
 8008068:	461a      	mov	r2, r3
 800806a:	2183      	movs	r1, #131	; 0x83
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f002 fa0b 	bl	800a488 <VL53L0X_WrByte>
 8008072:	4603      	mov	r3, r0
 8008074:	461a      	mov	r2, r3
 8008076:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800807a:	4313      	orrs	r3, r2
 800807c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008080:	2207      	movs	r2, #7
 8008082:	21ff      	movs	r1, #255	; 0xff
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f002 f9ff 	bl	800a488 <VL53L0X_WrByte>
 800808a:	4603      	mov	r3, r0
 800808c:	461a      	mov	r2, r3
 800808e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008092:	4313      	orrs	r3, r2
 8008094:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008098:	2201      	movs	r2, #1
 800809a:	2181      	movs	r1, #129	; 0x81
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f002 f9f3 	bl	800a488 <VL53L0X_WrByte>
 80080a2:	4603      	mov	r3, r0
 80080a4:	461a      	mov	r2, r3
 80080a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f002 fa6b 	bl	800a58c <VL53L0X_PollingDelay>
 80080b6:	4603      	mov	r3, r0
 80080b8:	461a      	mov	r2, r3
 80080ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080be:	4313      	orrs	r3, r2
 80080c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80080c4:	2201      	movs	r2, #1
 80080c6:	2180      	movs	r1, #128	; 0x80
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f002 f9dd 	bl	800a488 <VL53L0X_WrByte>
 80080ce:	4603      	mov	r3, r0
 80080d0:	461a      	mov	r2, r3
 80080d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080d6:	4313      	orrs	r3, r2
 80080d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 8098 	beq.w	8008218 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80080e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80080ec:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f040 8091 	bne.w	8008218 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80080f6:	226b      	movs	r2, #107	; 0x6b
 80080f8:	2194      	movs	r1, #148	; 0x94
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f002 f9c4 	bl	800a488 <VL53L0X_WrByte>
 8008100:	4603      	mov	r3, r0
 8008102:	461a      	mov	r2, r3
 8008104:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008108:	4313      	orrs	r3, r2
 800810a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7ff fefb 	bl	8007f0a <VL53L0X_device_read_strobe>
 8008114:	4603      	mov	r3, r0
 8008116:	461a      	mov	r2, r3
 8008118:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800811c:	4313      	orrs	r3, r2
 800811e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008126:	461a      	mov	r2, r3
 8008128:	2190      	movs	r1, #144	; 0x90
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f002 f970 	bl	800a410 <VL53L0X_RdDWord>
 8008130:	4603      	mov	r3, r0
 8008132:	461a      	mov	r2, r3
 8008134:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008138:	4313      	orrs	r3, r2
 800813a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	0a1b      	lsrs	r3, r3, #8
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008148:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	0bdb      	lsrs	r3, r3, #15
 8008150:	b2db      	uxtb	r3, r3
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800815a:	2224      	movs	r2, #36	; 0x24
 800815c:	2194      	movs	r1, #148	; 0x94
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f002 f992 	bl	800a488 <VL53L0X_WrByte>
 8008164:	4603      	mov	r3, r0
 8008166:	461a      	mov	r2, r3
 8008168:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800816c:	4313      	orrs	r3, r2
 800816e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7ff fec9 	bl	8007f0a <VL53L0X_device_read_strobe>
 8008178:	4603      	mov	r3, r0
 800817a:	461a      	mov	r2, r3
 800817c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008180:	4313      	orrs	r3, r2
 8008182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800818a:	461a      	mov	r2, r3
 800818c:	2190      	movs	r1, #144	; 0x90
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f002 f93e 	bl	800a410 <VL53L0X_RdDWord>
 8008194:	4603      	mov	r3, r0
 8008196:	461a      	mov	r2, r3
 8008198:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800819c:	4313      	orrs	r3, r2
 800819e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	0e1b      	lsrs	r3, r3, #24
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	0c1b      	lsrs	r3, r3, #16
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	0a1b      	lsrs	r3, r3, #8
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80081c0:	2225      	movs	r2, #37	; 0x25
 80081c2:	2194      	movs	r1, #148	; 0x94
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f002 f95f 	bl	800a488 <VL53L0X_WrByte>
 80081ca:	4603      	mov	r3, r0
 80081cc:	461a      	mov	r2, r3
 80081ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081d2:	4313      	orrs	r3, r2
 80081d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7ff fe96 	bl	8007f0a <VL53L0X_device_read_strobe>
 80081de:	4603      	mov	r3, r0
 80081e0:	461a      	mov	r2, r3
 80081e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081e6:	4313      	orrs	r3, r2
 80081e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80081ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80081f0:	461a      	mov	r2, r3
 80081f2:	2190      	movs	r1, #144	; 0x90
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f002 f90b 	bl	800a410 <VL53L0X_RdDWord>
 80081fa:	4603      	mov	r3, r0
 80081fc:	461a      	mov	r2, r3
 80081fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008202:	4313      	orrs	r3, r2
 8008204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	0e1b      	lsrs	r3, r3, #24
 800820c:	b2db      	uxtb	r3, r3
 800820e:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8008210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008212:	0c1b      	lsrs	r3, r3, #16
 8008214:	b2db      	uxtb	r3, r3
 8008216:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8008218:	78fb      	ldrb	r3, [r7, #3]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 8189 	beq.w	8008536 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008224:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008228:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800822c:	2b00      	cmp	r3, #0
 800822e:	f040 8182 	bne.w	8008536 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8008232:	2202      	movs	r2, #2
 8008234:	2194      	movs	r1, #148	; 0x94
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f002 f926 	bl	800a488 <VL53L0X_WrByte>
 800823c:	4603      	mov	r3, r0
 800823e:	461a      	mov	r2, r3
 8008240:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008244:	4313      	orrs	r3, r2
 8008246:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff fe5d 	bl	8007f0a <VL53L0X_device_read_strobe>
 8008250:	4603      	mov	r3, r0
 8008252:	461a      	mov	r2, r3
 8008254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008258:	4313      	orrs	r3, r2
 800825a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800825e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008262:	461a      	mov	r2, r3
 8008264:	2190      	movs	r1, #144	; 0x90
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f002 f813 	bl	800a292 <VL53L0X_RdByte>
 800826c:	4603      	mov	r3, r0
 800826e:	461a      	mov	r2, r3
 8008270:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008274:	4313      	orrs	r3, r2
 8008276:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800827a:	227b      	movs	r2, #123	; 0x7b
 800827c:	2194      	movs	r1, #148	; 0x94
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f002 f902 	bl	800a488 <VL53L0X_WrByte>
 8008284:	4603      	mov	r3, r0
 8008286:	461a      	mov	r2, r3
 8008288:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800828c:	4313      	orrs	r3, r2
 800828e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7ff fe39 	bl	8007f0a <VL53L0X_device_read_strobe>
 8008298:	4603      	mov	r3, r0
 800829a:	461a      	mov	r2, r3
 800829c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082a0:	4313      	orrs	r3, r2
 80082a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80082a6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80082aa:	461a      	mov	r2, r3
 80082ac:	2190      	movs	r1, #144	; 0x90
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 ffef 	bl	800a292 <VL53L0X_RdByte>
 80082b4:	4603      	mov	r3, r0
 80082b6:	461a      	mov	r2, r3
 80082b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082bc:	4313      	orrs	r3, r2
 80082be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80082c2:	2277      	movs	r2, #119	; 0x77
 80082c4:	2194      	movs	r1, #148	; 0x94
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f002 f8de 	bl	800a488 <VL53L0X_WrByte>
 80082cc:	4603      	mov	r3, r0
 80082ce:	461a      	mov	r2, r3
 80082d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082d4:	4313      	orrs	r3, r2
 80082d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7ff fe15 	bl	8007f0a <VL53L0X_device_read_strobe>
 80082e0:	4603      	mov	r3, r0
 80082e2:	461a      	mov	r2, r3
 80082e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082e8:	4313      	orrs	r3, r2
 80082ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80082ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082f2:	461a      	mov	r2, r3
 80082f4:	2190      	movs	r1, #144	; 0x90
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f002 f88a 	bl	800a410 <VL53L0X_RdDWord>
 80082fc:	4603      	mov	r3, r0
 80082fe:	461a      	mov	r2, r3
 8008300:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008304:	4313      	orrs	r3, r2
 8008306:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	0e5b      	lsrs	r3, r3, #25
 800830e:	b2db      	uxtb	r3, r3
 8008310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008314:	b2db      	uxtb	r3, r3
 8008316:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8008318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831a:	0c9b      	lsrs	r3, r3, #18
 800831c:	b2db      	uxtb	r3, r3
 800831e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008322:	b2db      	uxtb	r3, r3
 8008324:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	0adb      	lsrs	r3, r3, #11
 800832a:	b2db      	uxtb	r3, r3
 800832c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008330:	b2db      	uxtb	r3, r3
 8008332:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8008334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008336:	091b      	lsrs	r3, r3, #4
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800833e:	b2db      	uxtb	r3, r3
 8008340:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	b2db      	uxtb	r3, r3
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	b2db      	uxtb	r3, r3
 800834a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800834e:	b2db      	uxtb	r3, r3
 8008350:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8008354:	2278      	movs	r2, #120	; 0x78
 8008356:	2194      	movs	r1, #148	; 0x94
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f002 f895 	bl	800a488 <VL53L0X_WrByte>
 800835e:	4603      	mov	r3, r0
 8008360:	461a      	mov	r2, r3
 8008362:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008366:	4313      	orrs	r3, r2
 8008368:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7ff fdcc 	bl	8007f0a <VL53L0X_device_read_strobe>
 8008372:	4603      	mov	r3, r0
 8008374:	461a      	mov	r2, r3
 8008376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800837a:	4313      	orrs	r3, r2
 800837c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008384:	461a      	mov	r2, r3
 8008386:	2190      	movs	r1, #144	; 0x90
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f002 f841 	bl	800a410 <VL53L0X_RdDWord>
 800838e:	4603      	mov	r3, r0
 8008390:	461a      	mov	r2, r3
 8008392:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008396:	4313      	orrs	r3, r2
 8008398:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	0f5b      	lsrs	r3, r3, #29
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083a6:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80083a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083ac:	4413      	add	r3, r2
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80083b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b4:	0d9b      	lsrs	r3, r3, #22
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	0bdb      	lsrs	r3, r3, #15
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80083ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d0:	0a1b      	lsrs	r3, r3, #8
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	085b      	lsrs	r3, r3, #1
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	019b      	lsls	r3, r3, #6
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80083fc:	2279      	movs	r2, #121	; 0x79
 80083fe:	2194      	movs	r1, #148	; 0x94
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f002 f841 	bl	800a488 <VL53L0X_WrByte>
 8008406:	4603      	mov	r3, r0
 8008408:	461a      	mov	r2, r3
 800840a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800840e:	4313      	orrs	r3, r2
 8008410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff fd78 	bl	8007f0a <VL53L0X_device_read_strobe>
 800841a:	4603      	mov	r3, r0
 800841c:	461a      	mov	r2, r3
 800841e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008422:	4313      	orrs	r3, r2
 8008424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008428:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800842c:	461a      	mov	r2, r3
 800842e:	2190      	movs	r1, #144	; 0x90
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f001 ffed 	bl	800a410 <VL53L0X_RdDWord>
 8008436:	4603      	mov	r3, r0
 8008438:	461a      	mov	r2, r3
 800843a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800843e:	4313      	orrs	r3, r2
 8008440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8008444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008446:	0e9b      	lsrs	r3, r3, #26
 8008448:	b2db      	uxtb	r3, r3
 800844a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800844e:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008450:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008454:	4413      	add	r3, r2
 8008456:	b2db      	uxtb	r3, r3
 8008458:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	0cdb      	lsrs	r3, r3, #19
 800845e:	b2db      	uxtb	r3, r3
 8008460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008464:	b2db      	uxtb	r3, r3
 8008466:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	0b1b      	lsrs	r3, r3, #12
 800846c:	b2db      	uxtb	r3, r3
 800846e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008472:	b2db      	uxtb	r3, r3
 8008474:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	095b      	lsrs	r3, r3, #5
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008480:	b2db      	uxtb	r3, r3
 8008482:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	b2db      	uxtb	r3, r3
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	b2db      	uxtb	r3, r3
 800848c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008490:	b2db      	uxtb	r3, r3
 8008492:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008496:	227a      	movs	r2, #122	; 0x7a
 8008498:	2194      	movs	r1, #148	; 0x94
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f001 fff4 	bl	800a488 <VL53L0X_WrByte>
 80084a0:	4603      	mov	r3, r0
 80084a2:	461a      	mov	r2, r3
 80084a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084a8:	4313      	orrs	r3, r2
 80084aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff fd2b 	bl	8007f0a <VL53L0X_device_read_strobe>
 80084b4:	4603      	mov	r3, r0
 80084b6:	461a      	mov	r2, r3
 80084b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084bc:	4313      	orrs	r3, r2
 80084be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80084c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80084c6:	461a      	mov	r2, r3
 80084c8:	2190      	movs	r1, #144	; 0x90
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 ffa0 	bl	800a410 <VL53L0X_RdDWord>
 80084d0:	4603      	mov	r3, r0
 80084d2:	461a      	mov	r2, r3
 80084d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084d8:	4313      	orrs	r3, r2
 80084da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	0f9b      	lsrs	r3, r3, #30
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e8:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80084ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084ee:	4413      	add	r3, r2
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	0ddb      	lsrs	r3, r3, #23
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	0c1b      	lsrs	r3, r3, #16
 8008506:	b2db      	uxtb	r3, r3
 8008508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800850c:	b2db      	uxtb	r3, r3
 800850e:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8008510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008512:	0a5b      	lsrs	r3, r3, #9
 8008514:	b2db      	uxtb	r3, r3
 8008516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800851a:	b2db      	uxtb	r3, r3
 800851c:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8008520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008522:	089b      	lsrs	r3, r3, #2
 8008524:	b2db      	uxtb	r3, r3
 8008526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800852a:	b2db      	uxtb	r3, r3
 800852c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008530:	2300      	movs	r3, #0
 8008532:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8008536:	78fb      	ldrb	r3, [r7, #3]
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 80f1 	beq.w	8008724 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008542:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008546:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800854a:	2b00      	cmp	r3, #0
 800854c:	f040 80ea 	bne.w	8008724 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008550:	227b      	movs	r2, #123	; 0x7b
 8008552:	2194      	movs	r1, #148	; 0x94
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f001 ff97 	bl	800a488 <VL53L0X_WrByte>
 800855a:	4603      	mov	r3, r0
 800855c:	461a      	mov	r2, r3
 800855e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008562:	4313      	orrs	r3, r2
 8008564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff fcce 	bl	8007f0a <VL53L0X_device_read_strobe>
 800856e:	4603      	mov	r3, r0
 8008570:	461a      	mov	r2, r3
 8008572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008576:	4313      	orrs	r3, r2
 8008578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800857c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008580:	461a      	mov	r2, r3
 8008582:	2190      	movs	r1, #144	; 0x90
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 ff43 	bl	800a410 <VL53L0X_RdDWord>
 800858a:	4603      	mov	r3, r0
 800858c:	461a      	mov	r2, r3
 800858e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008592:	4313      	orrs	r3, r2
 8008594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8008598:	227c      	movs	r2, #124	; 0x7c
 800859a:	2194      	movs	r1, #148	; 0x94
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f001 ff73 	bl	800a488 <VL53L0X_WrByte>
 80085a2:	4603      	mov	r3, r0
 80085a4:	461a      	mov	r2, r3
 80085a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085aa:	4313      	orrs	r3, r2
 80085ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7ff fcaa 	bl	8007f0a <VL53L0X_device_read_strobe>
 80085b6:	4603      	mov	r3, r0
 80085b8:	461a      	mov	r2, r3
 80085ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085be:	4313      	orrs	r3, r2
 80085c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80085c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085c8:	461a      	mov	r2, r3
 80085ca:	2190      	movs	r1, #144	; 0x90
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 ff1f 	bl	800a410 <VL53L0X_RdDWord>
 80085d2:	4603      	mov	r3, r0
 80085d4:	461a      	mov	r2, r3
 80085d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085da:	4313      	orrs	r3, r2
 80085dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80085e0:	2273      	movs	r2, #115	; 0x73
 80085e2:	2194      	movs	r1, #148	; 0x94
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 ff4f 	bl	800a488 <VL53L0X_WrByte>
 80085ea:	4603      	mov	r3, r0
 80085ec:	461a      	mov	r2, r3
 80085ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085f2:	4313      	orrs	r3, r2
 80085f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff fc86 	bl	8007f0a <VL53L0X_device_read_strobe>
 80085fe:	4603      	mov	r3, r0
 8008600:	461a      	mov	r2, r3
 8008602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008606:	4313      	orrs	r3, r2
 8008608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800860c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008610:	461a      	mov	r2, r3
 8008612:	2190      	movs	r1, #144	; 0x90
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 fefb 	bl	800a410 <VL53L0X_RdDWord>
 800861a:	4603      	mov	r3, r0
 800861c:	461a      	mov	r2, r3
 800861e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008622:	4313      	orrs	r3, r2
 8008624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 8008628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862a:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800862c:	b29b      	uxth	r3, r3
 800862e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008630:	2274      	movs	r2, #116	; 0x74
 8008632:	2194      	movs	r1, #148	; 0x94
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f001 ff27 	bl	800a488 <VL53L0X_WrByte>
 800863a:	4603      	mov	r3, r0
 800863c:	461a      	mov	r2, r3
 800863e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008642:	4313      	orrs	r3, r2
 8008644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7ff fc5e 	bl	8007f0a <VL53L0X_device_read_strobe>
 800864e:	4603      	mov	r3, r0
 8008650:	461a      	mov	r2, r3
 8008652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008656:	4313      	orrs	r3, r2
 8008658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800865c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008660:	461a      	mov	r2, r3
 8008662:	2190      	movs	r1, #144	; 0x90
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f001 fed3 	bl	800a410 <VL53L0X_RdDWord>
 800866a:	4603      	mov	r3, r0
 800866c:	461a      	mov	r2, r3
 800866e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008672:	4313      	orrs	r3, r2
 8008674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800867c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800867e:	4313      	orrs	r3, r2
 8008680:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008682:	2275      	movs	r2, #117	; 0x75
 8008684:	2194      	movs	r1, #148	; 0x94
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 fefe 	bl	800a488 <VL53L0X_WrByte>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008694:	4313      	orrs	r3, r2
 8008696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff fc35 	bl	8007f0a <VL53L0X_device_read_strobe>
 80086a0:	4603      	mov	r3, r0
 80086a2:	461a      	mov	r2, r3
 80086a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086a8:	4313      	orrs	r3, r2
 80086aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80086ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086b2:	461a      	mov	r2, r3
 80086b4:	2190      	movs	r1, #144	; 0x90
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 feaa 	bl	800a410 <VL53L0X_RdDWord>
 80086bc:	4603      	mov	r3, r0
 80086be:	461a      	mov	r2, r3
 80086c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086c4:	4313      	orrs	r3, r2
 80086c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80086d2:	2276      	movs	r2, #118	; 0x76
 80086d4:	2194      	movs	r1, #148	; 0x94
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f001 fed6 	bl	800a488 <VL53L0X_WrByte>
 80086dc:	4603      	mov	r3, r0
 80086de:	461a      	mov	r2, r3
 80086e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086e4:	4313      	orrs	r3, r2
 80086e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff fc0d 	bl	8007f0a <VL53L0X_device_read_strobe>
 80086f0:	4603      	mov	r3, r0
 80086f2:	461a      	mov	r2, r3
 80086f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086f8:	4313      	orrs	r3, r2
 80086fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80086fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008702:	461a      	mov	r2, r3
 8008704:	2190      	movs	r1, #144	; 0x90
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 fe82 	bl	800a410 <VL53L0X_RdDWord>
 800870c:	4603      	mov	r3, r0
 800870e:	461a      	mov	r2, r3
 8008710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008714:	4313      	orrs	r3, r2
 8008716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800871e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008720:	4313      	orrs	r3, r2
 8008722:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008724:	2200      	movs	r2, #0
 8008726:	2181      	movs	r1, #129	; 0x81
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 fead 	bl	800a488 <VL53L0X_WrByte>
 800872e:	4603      	mov	r3, r0
 8008730:	461a      	mov	r2, r3
 8008732:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008736:	4313      	orrs	r3, r2
 8008738:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800873c:	2206      	movs	r2, #6
 800873e:	21ff      	movs	r1, #255	; 0xff
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 fea1 	bl	800a488 <VL53L0X_WrByte>
 8008746:	4603      	mov	r3, r0
 8008748:	461a      	mov	r2, r3
 800874a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800874e:	4313      	orrs	r3, r2
 8008750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008754:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008758:	461a      	mov	r2, r3
 800875a:	2183      	movs	r1, #131	; 0x83
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f001 fd98 	bl	800a292 <VL53L0X_RdByte>
 8008762:	4603      	mov	r3, r0
 8008764:	461a      	mov	r2, r3
 8008766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800876a:	4313      	orrs	r3, r2
 800876c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008770:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008774:	f023 0304 	bic.w	r3, r3, #4
 8008778:	b2db      	uxtb	r3, r3
 800877a:	461a      	mov	r2, r3
 800877c:	2183      	movs	r1, #131	; 0x83
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f001 fe82 	bl	800a488 <VL53L0X_WrByte>
 8008784:	4603      	mov	r3, r0
 8008786:	461a      	mov	r2, r3
 8008788:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800878c:	4313      	orrs	r3, r2
 800878e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008792:	2201      	movs	r2, #1
 8008794:	21ff      	movs	r1, #255	; 0xff
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f001 fe76 	bl	800a488 <VL53L0X_WrByte>
 800879c:	4603      	mov	r3, r0
 800879e:	461a      	mov	r2, r3
 80087a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087a4:	4313      	orrs	r3, r2
 80087a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80087aa:	2201      	movs	r2, #1
 80087ac:	2100      	movs	r1, #0
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f001 fe6a 	bl	800a488 <VL53L0X_WrByte>
 80087b4:	4603      	mov	r3, r0
 80087b6:	461a      	mov	r2, r3
 80087b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087bc:	4313      	orrs	r3, r2
 80087be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80087c2:	2200      	movs	r2, #0
 80087c4:	21ff      	movs	r1, #255	; 0xff
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 fe5e 	bl	800a488 <VL53L0X_WrByte>
 80087cc:	4603      	mov	r3, r0
 80087ce:	461a      	mov	r2, r3
 80087d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087d4:	4313      	orrs	r3, r2
 80087d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80087da:	2200      	movs	r2, #0
 80087dc:	2180      	movs	r1, #128	; 0x80
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f001 fe52 	bl	800a488 <VL53L0X_WrByte>
 80087e4:	4603      	mov	r3, r0
 80087e6:	461a      	mov	r2, r3
 80087e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087ec:	4313      	orrs	r3, r2
 80087ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80087f2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f040 808f 	bne.w	800891a <VL53L0X_get_info_from_device+0x98e>
 80087fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008800:	2b07      	cmp	r3, #7
 8008802:	f000 808a 	beq.w	800891a <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8008806:	78fb      	ldrb	r3, [r7, #3]
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	d024      	beq.n	800885a <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008810:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008814:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008818:	2b00      	cmp	r3, #0
 800881a:	d11e      	bne.n	800885a <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008822:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800882c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008830:	2300      	movs	r3, #0
 8008832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008834:	e00e      	b.n	8008854 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8008836:	f107 0208 	add.w	r2, r7, #8
 800883a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800883c:	4413      	add	r3, r2
 800883e:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008844:	4413      	add	r3, r2
 8008846:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800884a:	460a      	mov	r2, r1
 800884c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800884e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008850:	3301      	adds	r3, #1
 8008852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008856:	2b05      	cmp	r3, #5
 8008858:	dded      	ble.n	8008836 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800885a:	78fb      	ldrb	r3, [r7, #3]
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d018      	beq.n	8008896 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008864:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008868:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800886c:	2b00      	cmp	r3, #0
 800886e:	d112      	bne.n	8008896 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008870:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800887a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	33f3      	adds	r3, #243	; 0xf3
 8008888:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800888a:	f107 0310 	add.w	r3, r7, #16
 800888e:	4619      	mov	r1, r3
 8008890:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008892:	f001 ff37 	bl	800a704 <strcpy>

		}

		if (((option & 4) == 4) &&
 8008896:	78fb      	ldrb	r3, [r7, #3]
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b00      	cmp	r3, #0
 800889e:	d030      	beq.n	8008902 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80088a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088a4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d12a      	bne.n	8008902 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80088ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80088b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80088bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088be:	025b      	lsls	r3, r3, #9
 80088c0:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088c6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80088d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d011      	beq.n	80088fa <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80088d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80088de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088e4:	fb02 f303 	mul.w	r3, r2, r3
 80088e8:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80088ea:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80088ee:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80088f2:	425b      	negs	r3, r3
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80088fa:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8008902:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008906:	78fb      	ldrb	r3, [r7, #3]
 8008908:	4313      	orrs	r3, r2
 800890a:	b2db      	uxtb	r3, r3
 800890c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8008910:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800891a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800891e:	4618      	mov	r0, r3
 8008920:	3760      	adds	r7, #96	; 0x60
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8008926:	b480      	push	{r7}
 8008928:	b087      	sub	sp, #28
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	460b      	mov	r3, r1
 8008930:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008932:	f240 6277 	movw	r2, #1655	; 0x677
 8008936:	f04f 0300 	mov.w	r3, #0
 800893a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800893e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008942:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	fb02 f303 	mul.w	r3, r2, r3
 8008952:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008954:	68bb      	ldr	r3, [r7, #8]
}
 8008956:	4618      	mov	r0, r3
 8008958:	371c      	adds	r7, #28
 800895a:	46bd      	mov	sp, r7
 800895c:	bc80      	pop	{r7}
 800895e:	4770      	bx	lr

08008960 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008960:	b480      	push	{r7}
 8008962:	b087      	sub	sp, #28
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008968:	2300      	movs	r3, #0
 800896a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008970:	2300      	movs	r3, #0
 8008972:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d017      	beq.n	80089aa <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	3b01      	subs	r3, #1
 800897e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008980:	e005      	b.n	800898e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	085b      	lsrs	r3, r3, #1
 8008986:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008988:	89fb      	ldrh	r3, [r7, #14]
 800898a:	3301      	adds	r3, #1
 800898c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1f4      	bne.n	8008982 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008998:	89fb      	ldrh	r3, [r7, #14]
 800899a:	021b      	lsls	r3, r3, #8
 800899c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80089a6:	4413      	add	r3, r2
 80089a8:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80089aa:	8afb      	ldrh	r3, [r7, #22]

}
 80089ac:	4618      	mov	r0, r3
 80089ae:	371c      	adds	r7, #28
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bc80      	pop	{r7}
 80089b4:	4770      	bx	lr

080089b6 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b085      	sub	sp, #20
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	4603      	mov	r3, r0
 80089be:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80089c4:	88fb      	ldrh	r3, [r7, #6]
 80089c6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80089c8:	88fa      	ldrh	r2, [r7, #6]
 80089ca:	0a12      	lsrs	r2, r2, #8
 80089cc:	b292      	uxth	r2, r2
 80089ce:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80089d0:	3301      	adds	r3, #1
 80089d2:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80089d4:	68fb      	ldr	r3, [r7, #12]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	bc80      	pop	{r7}
 80089de:	4770      	bx	lr

080089e0 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b088      	sub	sp, #32
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	4613      	mov	r3, r2
 80089ec:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	4619      	mov	r1, r3
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f7ff ff95 	bl	8008926 <VL53L0X_calc_macro_period_ps>
 80089fc:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008a04:	4a0a      	ldr	r2, [pc, #40]	; (8008a30 <VL53L0X_calc_timeout_mclks+0x50>)
 8008a06:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0a:	099b      	lsrs	r3, r3, #6
 8008a0c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a14:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	085b      	lsrs	r3, r3, #1
 8008a1c:	441a      	add	r2, r3
	timeout_period_mclks =
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a24:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8008a26:	69fb      	ldr	r3, [r7, #28]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3720      	adds	r7, #32
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	10624dd3 	.word	0x10624dd3

08008a34 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	807b      	strh	r3, [r7, #2]
 8008a40:	4613      	mov	r3, r2
 8008a42:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008a48:	787b      	ldrb	r3, [r7, #1]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff ff6a 	bl	8008926 <VL53L0X_calc_macro_period_ps>
 8008a52:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008a5a:	4a0b      	ldr	r2, [pc, #44]	; (8008a88 <VL53L0X_calc_timeout_us+0x54>)
 8008a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a60:	099b      	lsrs	r3, r3, #6
 8008a62:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 8008a64:	887b      	ldrh	r3, [r7, #2]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / 1000;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	085b      	lsrs	r3, r3, #1
 8008a70:	4413      	add	r3, r2
	actual_timeout_period_us =
 8008a72:	4a05      	ldr	r2, [pc, #20]	; (8008a88 <VL53L0X_calc_timeout_us+0x54>)
 8008a74:	fba2 2303 	umull	r2, r3, r2, r3
 8008a78:	099b      	lsrs	r3, r3, #6
 8008a7a:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8008a7c:	697b      	ldr	r3, [r7, #20]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	10624dd3 	.word	0x10624dd3

08008a8c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08c      	sub	sp, #48	; 0x30
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	460b      	mov	r3, r1
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008ab2:	7afb      	ldrb	r3, [r7, #11]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d005      	beq.n	8008ac4 <get_sequence_step_timeout+0x38>
 8008ab8:	7afb      	ldrb	r3, [r7, #11]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d002      	beq.n	8008ac4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008abe:	7afb      	ldrb	r3, [r7, #11]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d128      	bne.n	8008b16 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008ac4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008ac8:	461a      	mov	r2, r3
 8008aca:	2100      	movs	r1, #0
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f7fd fa48 	bl	8005f62 <VL53L0X_GetVcselPulsePeriod>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8008ad8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d109      	bne.n	8008af4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8008ae0:	f107 0320 	add.w	r3, r7, #32
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	2146      	movs	r1, #70	; 0x46
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f001 fbd2 	bl	800a292 <VL53L0X_RdByte>
 8008aee:	4603      	mov	r3, r0
 8008af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8008af4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff ff5b 	bl	80089b6 <VL53L0X_decode_timeout>
 8008b00:	4603      	mov	r3, r0
 8008b02:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008b04:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008b08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f7ff ff91 	bl	8008a34 <VL53L0X_calc_timeout_us>
 8008b12:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b14:	e092      	b.n	8008c3c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008b16:	7afb      	ldrb	r3, [r7, #11]
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	d135      	bne.n	8008b88 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008b1c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008b20:	461a      	mov	r2, r3
 8008b22:	2100      	movs	r1, #0
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7fd fa1c 	bl	8005f62 <VL53L0X_GetVcselPulsePeriod>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008b30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f040 8081 	bne.w	8008c3c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008b3a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008b3e:	461a      	mov	r2, r3
 8008b40:	2100      	movs	r1, #0
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f7fd fa0d 	bl	8005f62 <VL53L0X_GetVcselPulsePeriod>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8008b4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d109      	bne.n	8008b6a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8008b56:	f107 031e 	add.w	r3, r7, #30
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	2151      	movs	r1, #81	; 0x51
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f001 fc1e 	bl	800a3a0 <VL53L0X_RdWord>
 8008b64:	4603      	mov	r3, r0
 8008b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008b6a:	8bfb      	ldrh	r3, [r7, #30]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7ff ff22 	bl	80089b6 <VL53L0X_decode_timeout>
 8008b72:	4603      	mov	r3, r0
 8008b74:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008b76:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008b7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f7ff ff58 	bl	8008a34 <VL53L0X_calc_timeout_us>
 8008b84:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b86:	e059      	b.n	8008c3c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008b88:	7afb      	ldrb	r3, [r7, #11]
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	d156      	bne.n	8008c3c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008b8e:	f107 0314 	add.w	r3, r7, #20
 8008b92:	4619      	mov	r1, r3
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f7fd faef 	bl	8006178 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d01d      	beq.n	8008be0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008ba4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008ba8:	461a      	mov	r2, r3
 8008baa:	2100      	movs	r1, #0
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f7fd f9d8 	bl	8005f62 <VL53L0X_GetVcselPulsePeriod>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8008bb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10f      	bne.n	8008be0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8008bc0:	f107 031e 	add.w	r3, r7, #30
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	2151      	movs	r1, #81	; 0x51
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f001 fbe9 	bl	800a3a0 <VL53L0X_RdWord>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008bd4:	8bfb      	ldrh	r3, [r7, #30]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7ff feed 	bl	80089b6 <VL53L0X_decode_timeout>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008be0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d109      	bne.n	8008bfc <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008be8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008bec:	461a      	mov	r2, r3
 8008bee:	2101      	movs	r1, #1
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f7fd f9b6 	bl	8005f62 <VL53L0X_GetVcselPulsePeriod>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008bfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10f      	bne.n	8008c24 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8008c04:	f107 031c 	add.w	r3, r7, #28
 8008c08:	461a      	mov	r2, r3
 8008c0a:	2171      	movs	r1, #113	; 0x71
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f001 fbc7 	bl	800a3a0 <VL53L0X_RdWord>
 8008c12:	4603      	mov	r3, r0
 8008c14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008c18:	8bbb      	ldrh	r3, [r7, #28]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff fecb 	bl	80089b6 <VL53L0X_decode_timeout>
 8008c20:	4603      	mov	r3, r0
 8008c22:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8008c24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008c26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008c2c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c32:	4619      	mov	r1, r3
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f7ff fefd 	bl	8008a34 <VL53L0X_calc_timeout_us>
 8008c3a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c40:	601a      	str	r2, [r3, #0]

	return Status;
 8008c42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3730      	adds	r7, #48	; 0x30
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b08a      	sub	sp, #40	; 0x28
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	60f8      	str	r0, [r7, #12]
 8008c56:	460b      	mov	r3, r1
 8008c58:	607a      	str	r2, [r7, #4]
 8008c5a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008c62:	7afb      	ldrb	r3, [r7, #11]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <set_sequence_step_timeout+0x26>
 8008c68:	7afb      	ldrb	r3, [r7, #11]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d002      	beq.n	8008c74 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008c6e:	7afb      	ldrb	r3, [r7, #11]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d138      	bne.n	8008ce6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008c74:	f107 031d 	add.w	r3, r7, #29
 8008c78:	461a      	mov	r2, r3
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f7fd f970 	bl	8005f62 <VL53L0X_GetVcselPulsePeriod>
 8008c82:	4603      	mov	r3, r0
 8008c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8008c88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d11a      	bne.n	8008cc6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8008c90:	7f7b      	ldrb	r3, [r7, #29]
 8008c92:	461a      	mov	r2, r3
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f7ff fea2 	bl	80089e0 <VL53L0X_calc_timeout_mclks>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8008ca0:	8bfb      	ldrh	r3, [r7, #30]
 8008ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ca6:	d903      	bls.n	8008cb0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8008ca8:	23ff      	movs	r3, #255	; 0xff
 8008caa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008cae:	e004      	b.n	8008cba <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8008cb0:	8bfb      	ldrh	r3, [r7, #30]
 8008cb2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008cba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008cc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f040 80ad 	bne.w	8008e2a <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 8008cd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	2146      	movs	r1, #70	; 0x46
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f001 fbd5 	bl	800a488 <VL53L0X_WrByte>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8008ce4:	e0a1      	b.n	8008e2a <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008ce6:	7afb      	ldrb	r3, [r7, #11]
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d135      	bne.n	8008d58 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8008cec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d11b      	bne.n	8008d2c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008cf4:	f107 031d 	add.w	r3, r7, #29
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f7fd f930 	bl	8005f62 <VL53L0X_GetVcselPulsePeriod>
 8008d02:	4603      	mov	r3, r0
 8008d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008d08:	7f7b      	ldrb	r3, [r7, #29]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f7ff fe66 	bl	80089e0 <VL53L0X_calc_timeout_mclks>
 8008d14:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8008d16:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8008d18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7ff fe20 	bl	8008960 <VL53L0X_encode_timeout>
 8008d20:	4603      	mov	r3, r0
 8008d22:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008d24:	8b7a      	ldrh	r2, [r7, #26]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008d2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d108      	bne.n	8008d46 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8008d34:	8b7b      	ldrh	r3, [r7, #26]
 8008d36:	461a      	mov	r2, r3
 8008d38:	2151      	movs	r1, #81	; 0x51
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f001 fbc8 	bl	800a4d0 <VL53L0X_WrWord>
 8008d40:	4603      	mov	r3, r0
 8008d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008d46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d16d      	bne.n	8008e2a <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8008d56:	e068      	b.n	8008e2a <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008d58:	7afb      	ldrb	r3, [r7, #11]
 8008d5a:	2b04      	cmp	r3, #4
 8008d5c:	d162      	bne.n	8008e24 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8008d5e:	f107 0314 	add.w	r3, r7, #20
 8008d62:	4619      	mov	r1, r3
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f7fd fa07 	bl	8006178 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d01d      	beq.n	8008db0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008d74:	f107 031d 	add.w	r3, r7, #29
 8008d78:	461a      	mov	r2, r3
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f7fd f8f0 	bl	8005f62 <VL53L0X_GetVcselPulsePeriod>
 8008d82:	4603      	mov	r3, r0
 8008d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8008d88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10f      	bne.n	8008db0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008d90:	f107 031a 	add.w	r3, r7, #26
 8008d94:	461a      	mov	r2, r3
 8008d96:	2151      	movs	r1, #81	; 0x51
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f001 fb01 	bl	800a3a0 <VL53L0X_RdWord>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008da4:	8b7b      	ldrh	r3, [r7, #26]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7ff fe05 	bl	80089b6 <VL53L0X_decode_timeout>
 8008dac:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8008dae:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008db0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d109      	bne.n	8008dcc <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008db8:	f107 031d 	add.w	r3, r7, #29
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f7fd f8ce 	bl	8005f62 <VL53L0X_GetVcselPulsePeriod>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008dcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d12a      	bne.n	8008e2a <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008dd4:	7f7b      	ldrb	r3, [r7, #29]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	6879      	ldr	r1, [r7, #4]
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f7ff fe00 	bl	80089e0 <VL53L0X_calc_timeout_mclks>
 8008de0:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 8008de2:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8008de4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008de6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008de8:	4413      	add	r3, r2
 8008dea:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8008dec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7ff fdb6 	bl	8008960 <VL53L0X_encode_timeout>
 8008df4:	4603      	mov	r3, r0
 8008df6:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 8008df8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d108      	bne.n	8008e12 <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8008e00:	8c3b      	ldrh	r3, [r7, #32]
 8008e02:	461a      	mov	r2, r3
 8008e04:	2171      	movs	r1, #113	; 0x71
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f001 fb62 	bl	800a4d0 <VL53L0X_WrWord>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8008e12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d107      	bne.n	8008e2a <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8008e22:	e002      	b.n	8008e2a <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008e24:	23fc      	movs	r3, #252	; 0xfc
 8008e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8008e2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3728      	adds	r7, #40	; 0x28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b086      	sub	sp, #24
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	60f8      	str	r0, [r7, #12]
 8008e3e:	460b      	mov	r3, r1
 8008e40:	607a      	str	r2, [r7, #4]
 8008e42:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e44:	2300      	movs	r3, #0
 8008e46:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8008e48:	7afb      	ldrb	r3, [r7, #11]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d00a      	beq.n	8008e68 <VL53L0X_get_vcsel_pulse_period+0x32>
 8008e52:	e013      	b.n	8008e7c <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008e54:	f107 0316 	add.w	r3, r7, #22
 8008e58:	461a      	mov	r2, r3
 8008e5a:	2150      	movs	r1, #80	; 0x50
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f001 fa18 	bl	800a292 <VL53L0X_RdByte>
 8008e62:	4603      	mov	r3, r0
 8008e64:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008e66:	e00b      	b.n	8008e80 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008e68:	f107 0316 	add.w	r3, r7, #22
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	2170      	movs	r1, #112	; 0x70
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f001 fa0e 	bl	800a292 <VL53L0X_RdByte>
 8008e76:	4603      	mov	r3, r0
 8008e78:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008e7a:	e001      	b.n	8008e80 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008e7c:	23fc      	movs	r3, #252	; 0xfc
 8008e7e:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d107      	bne.n	8008e98 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008e88:	7dbb      	ldrb	r3, [r7, #22]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe fff8 	bl	8007e80 <VL53L0X_decode_vcsel_period>
 8008e90:	4603      	mov	r3, r0
 8008e92:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	701a      	strb	r2, [r3, #0]

	return Status;
 8008e98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b092      	sub	sp, #72	; 0x48
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008eb4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008eb8:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 8008eba:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8008ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8008ec0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008ec4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008ec6:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008eca:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8008ecc:	f240 234e 	movw	r3, #590	; 0x24e
 8008ed0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8008ed2:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008ed8:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008edc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008ede:	f240 2326 	movw	r3, #550	; 0x226
 8008ee2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8008ee8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008eec:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	6a3b      	ldr	r3, [r7, #32]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d205      	bcs.n	8008f06 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008efa:	23fc      	movs	r3, #252	; 0xfc
 8008efc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8008f00:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008f04:	e0aa      	b.n	800905c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8008f06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0a:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008f12:	f107 0314 	add.w	r3, r7, #20
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f7fd f92d 	bl	8006178 <VL53L0X_GetSequenceStepEnables>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8008f24:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d15b      	bne.n	8008fe4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8008f2c:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d105      	bne.n	8008f3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8008f32:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d102      	bne.n	8008f3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8008f38:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d052      	beq.n	8008fe4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8008f3e:	f107 0310 	add.w	r3, r7, #16
 8008f42:	461a      	mov	r2, r3
 8008f44:	2102      	movs	r1, #2
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7ff fda0 	bl	8008a8c <get_sequence_step_timeout>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8008f52:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d002      	beq.n	8008f60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8008f5a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008f5e:	e07d      	b.n	800905c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8008f60:	7d3b      	ldrb	r3, [r7, #20]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00f      	beq.n	8008f86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008f66:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f6a:	4413      	add	r3, r2
 8008f6c:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8008f6e:	69fa      	ldr	r2, [r7, #28]
 8008f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d204      	bcs.n	8008f80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008f76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	1ad3      	subs	r3, r2, r3
 8008f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8008f7e:	e002      	b.n	8008f86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008f80:	23fc      	movs	r3, #252	; 0xfc
 8008f82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008f86:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8008f8e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008f92:	e063      	b.n	800905c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008f94:	7dbb      	ldrb	r3, [r7, #22]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d011      	beq.n	8008fbe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9e:	4413      	add	r3, r2
 8008fa0:	005b      	lsls	r3, r3, #1
 8008fa2:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008fa4:	69fa      	ldr	r2, [r7, #28]
 8008fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d204      	bcs.n	8008fb6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008fac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8008fb4:	e016      	b.n	8008fe4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008fb6:	23fc      	movs	r3, #252	; 0xfc
 8008fb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008fbc:	e012      	b.n	8008fe4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8008fbe:	7d7b      	ldrb	r3, [r7, #21]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00f      	beq.n	8008fe4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc8:	4413      	add	r3, r2
 8008fca:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008fcc:	69fa      	ldr	r2, [r7, #28]
 8008fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d204      	bcs.n	8008fde <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	643b      	str	r3, [r7, #64]	; 0x40
 8008fdc:	e002      	b.n	8008fe4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008fde:	23fc      	movs	r3, #252	; 0xfc
 8008fe0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008fe4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008fec:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008ff0:	e034      	b.n	800905c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8008ff2:	7dfb      	ldrb	r3, [r7, #23]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d019      	beq.n	800902c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008ff8:	f107 030c 	add.w	r3, r7, #12
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	2103      	movs	r1, #3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7ff fd43 	bl	8008a8c <get_sequence_step_timeout>
 8009006:	4603      	mov	r3, r0
 8009008:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009010:	4413      	add	r3, r2
 8009012:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009014:	69fa      	ldr	r2, [r7, #28]
 8009016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009018:	429a      	cmp	r2, r3
 800901a:	d204      	bcs.n	8009026 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800901c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	643b      	str	r3, [r7, #64]	; 0x40
 8009024:	e002      	b.n	800902c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009026:	23fc      	movs	r3, #252	; 0xfc
 8009028:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800902c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009030:	2b00      	cmp	r3, #0
 8009032:	d111      	bne.n	8009058 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8009034:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00e      	beq.n	8009058 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800903a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 8009042:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009044:	2104      	movs	r1, #4
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7ff fe01 	bl	8008c4e <set_sequence_step_timeout>
 800904c:	4603      	mov	r3, r0
 800904e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009058:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800905c:	4618      	mov	r0, r3
 800905e:	3748      	adds	r7, #72	; 0x48
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b090      	sub	sp, #64	; 0x40
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800906e:	2300      	movs	r3, #0
 8009070:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009074:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009078:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800907a:	f240 7376 	movw	r3, #1910	; 0x776
 800907e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009080:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009084:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009086:	f44f 7325 	mov.w	r3, #660	; 0x294
 800908a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800908c:	f240 234e 	movw	r3, #590	; 0x24e
 8009090:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009092:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009096:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009098:	f44f 7325 	mov.w	r3, #660	; 0x294
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800909e:	f240 2326 	movw	r3, #550	; 0x226
 80090a2:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80090a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ac:	441a      	add	r2, r3
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80090b2:	f107 0318 	add.w	r3, r7, #24
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7fd f85d 	bl	8006178 <VL53L0X_GetSequenceStepEnables>
 80090be:	4603      	mov	r3, r0
 80090c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80090c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80090cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090d0:	e075      	b.n	80091be <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80090d2:	7e3b      	ldrb	r3, [r7, #24]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d105      	bne.n	80090e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80090d8:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d102      	bne.n	80090e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80090de:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d030      	beq.n	8009146 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80090e4:	f107 0310 	add.w	r3, r7, #16
 80090e8:	461a      	mov	r2, r3
 80090ea:	2102      	movs	r1, #2
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7ff fccd 	bl	8008a8c <get_sequence_step_timeout>
 80090f2:	4603      	mov	r3, r0
 80090f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80090f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d122      	bne.n	8009146 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8009100:	7e3b      	ldrb	r3, [r7, #24]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d007      	beq.n	8009116 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800910a:	6939      	ldr	r1, [r7, #16]
 800910c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910e:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009110:	441a      	add	r2, r3
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8009116:	7ebb      	ldrb	r3, [r7, #26]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d009      	beq.n	8009130 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009120:	6939      	ldr	r1, [r7, #16]
 8009122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009124:	440b      	add	r3, r1
 8009126:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009128:	441a      	add	r2, r3
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	e00a      	b.n	8009146 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009130:	7e7b      	ldrb	r3, [r7, #25]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d007      	beq.n	8009146 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800913a:	6939      	ldr	r1, [r7, #16]
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009140:	441a      	add	r2, r3
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009146:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800914a:	2b00      	cmp	r3, #0
 800914c:	d114      	bne.n	8009178 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800914e:	7efb      	ldrb	r3, [r7, #27]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d011      	beq.n	8009178 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8009154:	f107 030c 	add.w	r3, r7, #12
 8009158:	461a      	mov	r2, r3
 800915a:	2103      	movs	r1, #3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff fc95 	bl	8008a8c <get_sequence_step_timeout>
 8009162:	4603      	mov	r3, r0
 8009164:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800916c:	68f9      	ldr	r1, [r7, #12]
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009172:	441a      	add	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009178:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800917c:	2b00      	cmp	r3, #0
 800917e:	d114      	bne.n	80091aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8009180:	7f3b      	ldrb	r3, [r7, #28]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d011      	beq.n	80091aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8009186:	f107 0314 	add.w	r3, r7, #20
 800918a:	461a      	mov	r2, r3
 800918c:	2104      	movs	r1, #4
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7ff fc7c 	bl	8008a8c <get_sequence_step_timeout>
 8009194:	4603      	mov	r3, r0
 8009196:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800919e:	6979      	ldr	r1, [r7, #20]
 80091a0:	6a3b      	ldr	r3, [r7, #32]
 80091a2:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80091a4:	441a      	add	r2, r3
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80091aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d103      	bne.n	80091ba <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80091ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3740      	adds	r7, #64	; 0x40
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
	...

080091c8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80091d2:	2300      	movs	r3, #0
 80091d4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80091da:	e0c6      	b.n	800936a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	4413      	add	r3, r2
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	74fb      	strb	r3, [r7, #19]
		Index++;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	3301      	adds	r3, #1
 80091ea:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80091ec:	7cfb      	ldrb	r3, [r7, #19]
 80091ee:	2bff      	cmp	r3, #255	; 0xff
 80091f0:	f040 808d 	bne.w	800930e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	4413      	add	r3, r2
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	747b      	strb	r3, [r7, #17]
			Index++;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	3301      	adds	r3, #1
 8009202:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8009204:	7c7b      	ldrb	r3, [r7, #17]
 8009206:	2b03      	cmp	r3, #3
 8009208:	d87e      	bhi.n	8009308 <VL53L0X_load_tuning_settings+0x140>
 800920a:	a201      	add	r2, pc, #4	; (adr r2, 8009210 <VL53L0X_load_tuning_settings+0x48>)
 800920c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009210:	08009221 	.word	0x08009221
 8009214:	0800925b 	.word	0x0800925b
 8009218:	08009295 	.word	0x08009295
 800921c:	080092cf 	.word	0x080092cf
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	4413      	add	r3, r2
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	743b      	strb	r3, [r7, #16]
				Index++;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	3301      	adds	r3, #1
 800922e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	4413      	add	r3, r2
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	73fb      	strb	r3, [r7, #15]
				Index++;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	3301      	adds	r3, #1
 800923e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009240:	7c3b      	ldrb	r3, [r7, #16]
 8009242:	b29b      	uxth	r3, r3
 8009244:	021b      	lsls	r3, r3, #8
 8009246:	b29a      	uxth	r2, r3
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	b29b      	uxth	r3, r3
 800924c:	4413      	add	r3, r2
 800924e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	89ba      	ldrh	r2, [r7, #12]
 8009254:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8009258:	e087      	b.n	800936a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	4413      	add	r3, r2
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	743b      	strb	r3, [r7, #16]
				Index++;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	3301      	adds	r3, #1
 8009268:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	4413      	add	r3, r2
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	3301      	adds	r3, #1
 8009278:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800927a:	7c3b      	ldrb	r3, [r7, #16]
 800927c:	b29b      	uxth	r3, r3
 800927e:	021b      	lsls	r3, r3, #8
 8009280:	b29a      	uxth	r2, r3
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	b29b      	uxth	r3, r3
 8009286:	4413      	add	r3, r2
 8009288:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	89ba      	ldrh	r2, [r7, #12]
 800928e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8009292:	e06a      	b.n	800936a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	4413      	add	r3, r2
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	743b      	strb	r3, [r7, #16]
				Index++;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	3301      	adds	r3, #1
 80092a2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	4413      	add	r3, r2
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	73fb      	strb	r3, [r7, #15]
				Index++;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	3301      	adds	r3, #1
 80092b2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80092b4:	7c3b      	ldrb	r3, [r7, #16]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	021b      	lsls	r3, r3, #8
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	b29b      	uxth	r3, r3
 80092c0:	4413      	add	r3, r2
 80092c2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	89ba      	ldrh	r2, [r7, #12]
 80092c8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80092cc:	e04d      	b.n	800936a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	4413      	add	r3, r2
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	743b      	strb	r3, [r7, #16]
				Index++;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	3301      	adds	r3, #1
 80092dc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	4413      	add	r3, r2
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	73fb      	strb	r3, [r7, #15]
				Index++;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	3301      	adds	r3, #1
 80092ec:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80092ee:	7c3b      	ldrb	r3, [r7, #16]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	021b      	lsls	r3, r3, #8
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	4413      	add	r3, r2
 80092fc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	89ba      	ldrh	r2, [r7, #12]
 8009302:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 8009306:	e030      	b.n	800936a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009308:	23fc      	movs	r3, #252	; 0xfc
 800930a:	77fb      	strb	r3, [r7, #31]
 800930c:	e02d      	b.n	800936a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800930e:	7cfb      	ldrb	r3, [r7, #19]
 8009310:	2b04      	cmp	r3, #4
 8009312:	d828      	bhi.n	8009366 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	4413      	add	r3, r2
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	74bb      	strb	r3, [r7, #18]
			Index++;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	3301      	adds	r3, #1
 8009322:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009324:	2300      	movs	r3, #0
 8009326:	61bb      	str	r3, [r7, #24]
 8009328:	e00f      	b.n	800934a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	4413      	add	r3, r2
 8009330:	7819      	ldrb	r1, [r3, #0]
 8009332:	f107 0208 	add.w	r2, r7, #8
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	4413      	add	r3, r2
 800933a:	460a      	mov	r2, r1
 800933c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	3301      	adds	r3, #1
 8009342:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	3301      	adds	r3, #1
 8009348:	61bb      	str	r3, [r7, #24]
 800934a:	7cfb      	ldrb	r3, [r7, #19]
 800934c:	69ba      	ldr	r2, [r7, #24]
 800934e:	429a      	cmp	r2, r3
 8009350:	dbeb      	blt.n	800932a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009352:	7cfb      	ldrb	r3, [r7, #19]
 8009354:	f107 0208 	add.w	r2, r7, #8
 8009358:	7cb9      	ldrb	r1, [r7, #18]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 ffc4 	bl	800a2e8 <VL53L0X_WriteMulti>
 8009360:	4603      	mov	r3, r0
 8009362:	77fb      	strb	r3, [r7, #31]
 8009364:	e001      	b.n	800936a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009366:	23fc      	movs	r3, #252	; 0xfc
 8009368:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	4413      	add	r3, r2
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d004      	beq.n	8009380 <VL53L0X_load_tuning_settings+0x1b8>
 8009376:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800937a:	2b00      	cmp	r3, #0
 800937c:	f43f af2e 	beq.w	80091dc <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009380:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3720      	adds	r7, #32
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009398:	2300      	movs	r3, #0
 800939a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80093a2:	f107 0313 	add.w	r3, r7, #19
 80093a6:	4619      	mov	r1, r3
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f7fc ffb1 	bl	8006310 <VL53L0X_GetXTalkCompensationEnable>
 80093ae:	4603      	mov	r3, r0
 80093b0:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80093b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d111      	bne.n	80093de <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80093ba:	7cfb      	ldrb	r3, [r7, #19]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00e      	beq.n	80093de <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	8a9b      	ldrh	r3, [r3, #20]
 80093ca:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	fb02 f303 	mul.w	r3, r2, r3
 80093d2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	3380      	adds	r3, #128	; 0x80
 80093d8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80093de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3720      	adds	r7, #32
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b086      	sub	sp, #24
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	60b9      	str	r1, [r7, #8]
 80093f4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093f6:	2300      	movs	r3, #0
 80093f8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8009402:	f107 0310 	add.w	r3, r7, #16
 8009406:	461a      	mov	r2, r3
 8009408:	68b9      	ldr	r1, [r7, #8]
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f7ff ffbe 	bl	800938c <VL53L0X_get_total_xtalk_rate>
 8009410:	4603      	mov	r3, r0
 8009412:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8009414:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d105      	bne.n	8009428 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	441a      	add	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	601a      	str	r2, [r3, #0]

	return Status;
 8009428:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b09a      	sub	sp, #104	; 0x68
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8009442:	2312      	movs	r3, #18
 8009444:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8009446:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800944a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800944c:	2342      	movs	r3, #66	; 0x42
 800944e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009450:	2306      	movs	r3, #6
 8009452:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8009454:	2307      	movs	r3, #7
 8009456:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009458:	2300      	movs	r3, #0
 800945a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 8009464:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800946c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800946e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009472:	fb02 f303 	mul.w	r3, r2, r3
 8009476:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8009478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800947a:	3380      	adds	r3, #128	; 0x80
 800947c:	0a1b      	lsrs	r3, r3, #8
 800947e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8009480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009484:	fb02 f303 	mul.w	r3, r2, r3
 8009488:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d01a      	beq.n	80094ca <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	029b      	lsls	r3, r3, #10
 8009498:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800949e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094a0:	4413      	add	r3, r2
 80094a2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80094a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ac:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80094ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80094b0:	4613      	mov	r3, r2
 80094b2:	005b      	lsls	r3, r3, #1
 80094b4:	4413      	add	r3, r2
 80094b6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80094b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094ba:	fb03 f303 	mul.w	r3, r3, r3
 80094be:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80094c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80094c6:	0c1b      	lsrs	r3, r3, #16
 80094c8:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80094ce:	fb02 f303 	mul.w	r3, r2, r3
 80094d2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80094d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80094da:	0c1b      	lsrs	r3, r3, #16
 80094dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	fb03 f303 	mul.w	r3, r3, r3
 80094e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80094e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80094ec:	0c1b      	lsrs	r3, r3, #16
 80094ee:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80094f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094f2:	085a      	lsrs	r2, r3, #1
 80094f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f6:	441a      	add	r2, r3
 80094f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80094fe:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009504:	fb02 f303 	mul.w	r3, r2, r3
 8009508:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009510:	d302      	bcc.n	8009518 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8009512:	4b54      	ldr	r3, [pc, #336]	; (8009664 <VL53L0X_calc_dmax+0x230>)
 8009514:	663b      	str	r3, [r7, #96]	; 0x60
 8009516:	e015      	b.n	8009544 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8009518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800951a:	085a      	lsrs	r2, r3, #1
 800951c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800951e:	441a      	add	r2, r3
 8009520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009522:	fbb2 f3f3 	udiv	r3, r2, r3
 8009526:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8009528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800952a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800952c:	fb02 f303 	mul.w	r3, r2, r3
 8009530:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8009532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009534:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009538:	0c1b      	lsrs	r3, r3, #16
 800953a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800953c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800953e:	fb03 f303 	mul.w	r3, r3, r3
 8009542:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8009544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009546:	039b      	lsls	r3, r3, #14
 8009548:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800954c:	4a46      	ldr	r2, [pc, #280]	; (8009668 <VL53L0X_calc_dmax+0x234>)
 800954e:	fba2 2303 	umull	r2, r3, r2, r3
 8009552:	099b      	lsrs	r3, r3, #6
 8009554:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009558:	fb03 f303 	mul.w	r3, r3, r3
 800955c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800955e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009560:	fb03 f303 	mul.w	r3, r3, r3
 8009564:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	3308      	adds	r3, #8
 800956a:	091b      	lsrs	r3, r3, #4
 800956c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800956e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8009576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009578:	4613      	mov	r3, r2
 800957a:	005b      	lsls	r3, r3, #1
 800957c:	4413      	add	r3, r2
 800957e:	011b      	lsls	r3, r3, #4
 8009580:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8009588:	0b9b      	lsrs	r3, r3, #14
 800958a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800958c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800958e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009590:	4413      	add	r3, r2
 8009592:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8009594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009596:	085b      	lsrs	r3, r3, #1
 8009598:	69ba      	ldr	r2, [r7, #24]
 800959a:	4413      	add	r3, r2
 800959c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80095a6:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	039b      	lsls	r3, r3, #14
 80095ac:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	085b      	lsrs	r3, r3, #1
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	4413      	add	r3, r2
 80095b6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80095b8:	69ba      	ldr	r2, [r7, #24]
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80095c0:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80095c6:	fb02 f303 	mul.w	r3, r2, r3
 80095ca:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80095d2:	4a25      	ldr	r2, [pc, #148]	; (8009668 <VL53L0X_calc_dmax+0x234>)
 80095d4:	fba2 2303 	umull	r2, r3, r2, r3
 80095d8:	099b      	lsrs	r3, r3, #6
 80095da:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	011b      	lsls	r3, r3, #4
 80095e0:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80095e8:	4a1f      	ldr	r2, [pc, #124]	; (8009668 <VL53L0X_calc_dmax+0x234>)
 80095ea:	fba2 2303 	umull	r2, r3, r2, r3
 80095ee:	099b      	lsrs	r3, r3, #6
 80095f0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80095f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095f4:	3380      	adds	r3, #128	; 0x80
 80095f6:	0a1b      	lsrs	r3, r3, #8
 80095f8:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d008      	beq.n	8009612 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	085a      	lsrs	r2, r3, #1
 8009604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009606:	441a      	add	r2, r3
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	fbb2 f3f3 	udiv	r3, r2, r3
 800960e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009610:	e001      	b.n	8009616 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8009612:	2300      	movs	r3, #0
 8009614:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8009616:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009618:	f7fe fc44 	bl	8007ea4 <VL53L0X_isqrt>
 800961c:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d008      	beq.n	8009636 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	085a      	lsrs	r2, r3, #1
 8009628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962a:	441a      	add	r2, r3
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009632:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009634:	e001      	b.n	800963a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8009636:	2300      	movs	r3, #0
 8009638:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800963a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800963c:	f7fe fc32 	bl	8007ea4 <VL53L0X_isqrt>
 8009640:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8009642:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800964c:	429a      	cmp	r2, r3
 800964e:	d902      	bls.n	8009656 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8009650:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009652:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009654:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8009656:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800965a:	4618      	mov	r0, r3
 800965c:	3768      	adds	r7, #104	; 0x68
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	fff00000 	.word	0xfff00000
 8009668:	10624dd3 	.word	0x10624dd3

0800966c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b0b2      	sub	sp, #200	; 0xc8
 8009670:	af04      	add	r7, sp, #16
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800967a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800967e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8009682:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800968a:	2342      	movs	r3, #66	; 0x42
 800968c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8009690:	f241 235c 	movw	r3, #4700	; 0x125c
 8009694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8009698:	4b6b      	ldr	r3, [pc, #428]	; (8009848 <VL53L0X_calc_sigma_estimate+0x1dc>)
 800969a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800969e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80096a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80096a6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80096aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b2:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80096b4:	4b65      	ldr	r3, [pc, #404]	; (800984c <VL53L0X_calc_sigma_estimate+0x1e0>)
 80096b6:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80096b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096bc:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80096be:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80096c2:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 80096c4:	f240 6377 	movw	r3, #1655	; 0x677
 80096c8:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096ca:	2300      	movs	r3, #0
 80096cc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096de:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80096e2:	0c1b      	lsrs	r3, r3, #16
 80096e4:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80096ec:	f107 0310 	add.w	r3, r7, #16
 80096f0:	461a      	mov	r2, r3
 80096f2:	68b9      	ldr	r1, [r7, #8]
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f7ff fe78 	bl	80093ea <VL53L0X_get_total_signal_rate>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8009700:	f107 0314 	add.w	r3, r7, #20
 8009704:	461a      	mov	r2, r3
 8009706:	68b9      	ldr	r1, [r7, #8]
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f7ff fe3f 	bl	800938c <VL53L0X_get_total_xtalk_rate>
 800970e:	4603      	mov	r3, r0
 8009710:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800971a:	fb02 f303 	mul.w	r3, r2, r3
 800971e:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8009720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009722:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009726:	0c1b      	lsrs	r3, r3, #16
 8009728:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009730:	fb02 f303 	mul.w	r3, r2, r3
 8009734:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8009738:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800973c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800973e:	429a      	cmp	r2, r3
 8009740:	d902      	bls.n	8009748 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8009742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009744:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 8009748:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800974c:	2b00      	cmp	r3, #0
 800974e:	d164      	bne.n	800981a <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009756:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800975e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009762:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009766:	461a      	mov	r2, r3
 8009768:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f7ff f938 	bl	80089e0 <VL53L0X_calc_timeout_mclks>
 8009770:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009778:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8009780:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009784:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009788:	461a      	mov	r2, r3
 800978a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f7ff f927 	bl	80089e0 <VL53L0X_calc_timeout_mclks>
 8009792:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8009794:	2303      	movs	r3, #3
 8009796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800979a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800979e:	2b08      	cmp	r3, #8
 80097a0:	d102      	bne.n	80097a8 <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 80097a2:	2302      	movs	r3, #2
 80097a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80097a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ac:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80097ae:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80097b2:	fb02 f303 	mul.w	r3, r2, r3
 80097b6:	02db      	lsls	r3, r3, #11
 80097b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80097bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80097c4:	4a22      	ldr	r2, [pc, #136]	; (8009850 <VL53L0X_calc_sigma_estimate+0x1e4>)
 80097c6:	fba2 2303 	umull	r2, r3, r2, r3
 80097ca:	099b      	lsrs	r3, r3, #6
 80097cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 80097d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097d6:	fb02 f303 	mul.w	r3, r2, r3
 80097da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80097de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80097e6:	4a1a      	ldr	r2, [pc, #104]	; (8009850 <VL53L0X_calc_sigma_estimate+0x1e4>)
 80097e8:	fba2 2303 	umull	r2, r3, r2, r3
 80097ec:	099b      	lsrs	r3, r3, #6
 80097ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	3380      	adds	r3, #128	; 0x80
 80097f6:	0a1b      	lsrs	r3, r3, #8
 80097f8:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009800:	fb02 f303 	mul.w	r3, r2, r3
 8009804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009808:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800980c:	3380      	adds	r3, #128	; 0x80
 800980e:	0a1b      	lsrs	r3, r3, #8
 8009810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	021b      	lsls	r3, r3, #8
 8009818:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800981a:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d002      	beq.n	8009828 <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 8009822:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8009826:	e127      	b.n	8009a78 <VL53L0X_calc_sigma_estimate+0x40c>
	}

	if (peakSignalRate_kcps == 0) {
 8009828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800982a:	2b00      	cmp	r3, #0
 800982c:	d112      	bne.n	8009854 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009834:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800983c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	e115      	b.n	8009a74 <VL53L0X_calc_sigma_estimate+0x408>
 8009848:	028f87ae 	.word	0x028f87ae
 800984c:	0006999a 	.word	0x0006999a
 8009850:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 8009854:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009858:	2b00      	cmp	r3, #0
 800985a:	d102      	bne.n	8009862 <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 800985c:	2301      	movs	r3, #1
 800985e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8009862:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009866:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800986a:	041a      	lsls	r2, r3, #16
 800986c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800986e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800987a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800987c:	429a      	cmp	r2, r3
 800987e:	d902      	bls.n	8009886 <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8009880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009886:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800988a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800988e:	fb02 f303 	mul.w	r3, r2, r3
 8009892:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8009896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800989a:	4613      	mov	r3, r2
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe fafe 	bl	8007ea4 <VL53L0X_isqrt>
 80098a8:	4603      	mov	r3, r0
 80098aa:	005b      	lsls	r3, r3, #1
 80098ac:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	891b      	ldrh	r3, [r3, #8]
 80098b2:	461a      	mov	r2, r3
 80098b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098b6:	fb02 f303 	mul.w	r3, r2, r3
 80098ba:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80098bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098be:	041a      	lsls	r2, r3, #16
 80098c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098c4:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 80098c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80098ca:	4a6d      	ldr	r2, [pc, #436]	; (8009a80 <VL53L0X_calc_sigma_estimate+0x414>)
 80098cc:	fba2 2303 	umull	r2, r3, r2, r3
 80098d0:	099b      	lsrs	r3, r3, #6
 80098d2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 80098d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098d6:	041a      	lsls	r2, r3, #16
 80098d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098dc:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 80098de:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 80098e2:	4a67      	ldr	r2, [pc, #412]	; (8009a80 <VL53L0X_calc_sigma_estimate+0x414>)
 80098e4:	fba2 2303 	umull	r2, r3, r2, r3
 80098e8:	099b      	lsrs	r3, r3, #6
 80098ea:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80098ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ee:	021b      	lsls	r3, r3, #8
 80098f0:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80098f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	bfb8      	it	lt
 80098fe:	425b      	neglt	r3, r3
 8009900:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	021b      	lsls	r3, r3, #8
 8009906:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8009908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800990a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800990e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009912:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 8009914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009916:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800991a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991c:	fb02 f303 	mul.w	r3, r2, r3
 8009920:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8009922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009926:	4413      	add	r3, r2
 8009928:	0c1b      	lsrs	r3, r3, #16
 800992a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 800992c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009932:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 8009934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009936:	085b      	lsrs	r3, r3, #1
 8009938:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 800993a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993c:	fb03 f303 	mul.w	r3, r3, r3
 8009940:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 8009942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009944:	0b9b      	lsrs	r3, r3, #14
 8009946:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8009948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800994c:	fb02 f303 	mul.w	r3, r2, r3
 8009950:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8009952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009954:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009958:	0c1b      	lsrs	r3, r3, #16
 800995a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995e:	fb03 f303 	mul.w	r3, r3, r3
 8009962:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 8009964:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009968:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009970:	0c1b      	lsrs	r3, r3, #16
 8009972:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	fb03 f303 	mul.w	r3, r3, r3
 800997a:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800997c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	4413      	add	r3, r2
 8009982:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8009984:	6a38      	ldr	r0, [r7, #32]
 8009986:	f7fe fa8d 	bl	8007ea4 <VL53L0X_isqrt>
 800998a:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	041b      	lsls	r3, r3, #16
 8009990:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	3332      	adds	r3, #50	; 0x32
 8009996:	4a3b      	ldr	r2, [pc, #236]	; (8009a84 <VL53L0X_calc_sigma_estimate+0x418>)
 8009998:	fba2 2303 	umull	r2, r3, r2, r3
 800999c:	095a      	lsrs	r2, r3, #5
 800999e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80099a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099ac:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80099b0:	fb02 f303 	mul.w	r3, r2, r3
 80099b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80099b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099bc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80099c0:	3308      	adds	r3, #8
 80099c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 80099c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099ca:	4a2f      	ldr	r2, [pc, #188]	; (8009a88 <VL53L0X_calc_sigma_estimate+0x41c>)
 80099cc:	fba2 2303 	umull	r2, r3, r2, r3
 80099d0:	0b5b      	lsrs	r3, r3, #13
 80099d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80099d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80099da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099de:	429a      	cmp	r2, r3
 80099e0:	d903      	bls.n	80099ea <VL53L0X_calc_sigma_estimate+0x37e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80099e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 80099ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099ee:	fb03 f303 	mul.w	r3, r3, r3
 80099f2:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 80099f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099f8:	fb03 f303 	mul.w	r3, r3, r3
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80099fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	4413      	add	r3, r2
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fe fa4d 	bl	8007ea4 <VL53L0X_isqrt>
 8009a0a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a12:	fb02 f303 	mul.w	r3, r2, r3
 8009a16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8009a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d009      	beq.n	8009a34 <VL53L0X_calc_sigma_estimate+0x3c8>
 8009a20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <VL53L0X_calc_sigma_estimate+0x3c8>
 8009a28:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d903      	bls.n	8009a3c <VL53L0X_calc_sigma_estimate+0x3d0>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8009a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009a42:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 8009a4e:	6939      	ldr	r1, [r7, #16]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	9303      	str	r3, [sp, #12]
 8009a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a58:	9302      	str	r3, [sp, #8]
 8009a5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009a5e:	9301      	str	r3, [sp, #4]
 8009a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f7ff fce3 	bl	8009434 <VL53L0X_calc_dmax>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a74:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	37b8      	adds	r7, #184	; 0xb8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	10624dd3 	.word	0x10624dd3
 8009a84:	51eb851f 	.word	0x51eb851f
 8009a88:	d1b71759 	.word	0xd1b71759

08009a8c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b090      	sub	sp, #64	; 0x40
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	607a      	str	r2, [r7, #4]
 8009a96:	461a      	mov	r2, r3
 8009a98:	460b      	mov	r3, r1
 8009a9a:	72fb      	strb	r3, [r7, #11]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8009ada:	2300      	movs	r3, #0
 8009adc:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8009ade:	7afb      	ldrb	r3, [r7, #11]
 8009ae0:	10db      	asrs	r3, r3, #3
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	f003 030f 	and.w	r3, r3, #15
 8009ae8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009aec:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d017      	beq.n	8009b24 <VL53L0X_get_pal_range_status+0x98>
 8009af4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009af8:	2b05      	cmp	r3, #5
 8009afa:	d013      	beq.n	8009b24 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009afc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b00:	2b07      	cmp	r3, #7
 8009b02:	d00f      	beq.n	8009b24 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8009b04:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b08:	2b0c      	cmp	r3, #12
 8009b0a:	d00b      	beq.n	8009b24 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8009b0c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b10:	2b0d      	cmp	r3, #13
 8009b12:	d007      	beq.n	8009b24 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8009b14:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b18:	2b0e      	cmp	r3, #14
 8009b1a:	d003      	beq.n	8009b24 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8009b1c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b20:	2b0f      	cmp	r3, #15
 8009b22:	d103      	bne.n	8009b2c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8009b24:	2301      	movs	r3, #1
 8009b26:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009b2a:	e002      	b.n	8009b32 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 8009b32:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d107      	bne.n	8009b4a <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	21ff      	movs	r1, #255	; 0xff
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f000 fca2 	bl	800a488 <VL53L0X_WrByte>
 8009b44:	4603      	mov	r3, r0
 8009b46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 8009b4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d109      	bne.n	8009b66 <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 8009b52:	f107 0316 	add.w	r3, r7, #22
 8009b56:	461a      	mov	r2, r3
 8009b58:	21b6      	movs	r1, #182	; 0xb6
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f000 fc20 	bl	800a3a0 <VL53L0X_RdWord>
 8009b60:	4603      	mov	r3, r0
 8009b62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8009b66:	8afb      	ldrh	r3, [r7, #22]
 8009b68:	025b      	lsls	r3, r3, #9
 8009b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 8009b6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d107      	bne.n	8009b84 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009b74:	2200      	movs	r2, #0
 8009b76:	21ff      	movs	r1, #255	; 0xff
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 fc85 	bl	800a488 <VL53L0X_WrByte>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b88:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009b8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d109      	bne.n	8009ba8 <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009b94:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009b98:	461a      	mov	r2, r3
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7fc fc8b 	bl	80064b8 <VL53L0X_GetLimitCheckEnable>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8009ba8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d02e      	beq.n	8009c0e <VL53L0X_get_pal_range_status+0x182>
 8009bb0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d12a      	bne.n	8009c0e <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8009bb8:	f107 0310 	add.w	r3, r7, #16
 8009bbc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009bc0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f7ff fd52 	bl	800966c <VL53L0X_calc_sigma_estimate>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8009bce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d103      	bne.n	8009bde <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bdc:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8009bde:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d113      	bne.n	8009c0e <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8009be6:	f107 0320 	add.w	r3, r7, #32
 8009bea:	461a      	mov	r2, r3
 8009bec:	2100      	movs	r1, #0
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f7fc fce6 	bl	80065c0 <VL53L0X_GetLimitCheckValue>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d006      	beq.n	8009c0e <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 8009c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c02:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d902      	bls.n	8009c0e <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009c0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d109      	bne.n	8009c2a <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009c16:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	2102      	movs	r1, #2
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7fc fc4a 	bl	80064b8 <VL53L0X_GetLimitCheckEnable>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8009c2a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d017      	beq.n	8009c62 <VL53L0X_get_pal_range_status+0x1d6>
 8009c32:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d113      	bne.n	8009c62 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009c3a:	f107 031c 	add.w	r3, r7, #28
 8009c3e:	461a      	mov	r2, r3
 8009c40:	2102      	movs	r1, #2
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f7fc fcbc 	bl	80065c0 <VL53L0X_GetLimitCheckValue>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d006      	beq.n	8009c62 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8009c54:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8009c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d902      	bls.n	8009c62 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009c62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d109      	bne.n	8009c7e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c6e:	461a      	mov	r2, r3
 8009c70:	2103      	movs	r1, #3
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f7fc fc20 	bl	80064b8 <VL53L0X_GetLimitCheckEnable>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8009c7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d023      	beq.n	8009cce <VL53L0X_get_pal_range_status+0x242>
 8009c86:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d11f      	bne.n	8009cce <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8009c8e:	893b      	ldrh	r3, [r7, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d102      	bne.n	8009c9a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8009c94:	2300      	movs	r3, #0
 8009c96:	637b      	str	r3, [r7, #52]	; 0x34
 8009c98:	e005      	b.n	8009ca6 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	021a      	lsls	r2, r3, #8
 8009c9e:	893b      	ldrh	r3, [r7, #8]
 8009ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ca4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009ca6:	f107 0318 	add.w	r3, r7, #24
 8009caa:	461a      	mov	r2, r3
 8009cac:	2103      	movs	r1, #3
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f7fc fc86 	bl	80065c0 <VL53L0X_GetLimitCheckValue>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d006      	beq.n	8009cce <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8009cc0:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8009cc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d202      	bcs.n	8009cce <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009cce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d14a      	bne.n	8009d6c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8009cd6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d103      	bne.n	8009ce6 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8009cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ce0:	22ff      	movs	r2, #255	; 0xff
 8009ce2:	701a      	strb	r2, [r3, #0]
 8009ce4:	e042      	b.n	8009d6c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8009ce6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d007      	beq.n	8009cfe <VL53L0X_get_pal_range_status+0x272>
 8009cee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d003      	beq.n	8009cfe <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8009cf6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009cfa:	2b03      	cmp	r3, #3
 8009cfc:	d103      	bne.n	8009d06 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8009cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d00:	2205      	movs	r2, #5
 8009d02:	701a      	strb	r2, [r3, #0]
 8009d04:	e032      	b.n	8009d6c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8009d06:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d0a:	2b06      	cmp	r3, #6
 8009d0c:	d003      	beq.n	8009d16 <VL53L0X_get_pal_range_status+0x28a>
 8009d0e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d12:	2b09      	cmp	r3, #9
 8009d14:	d103      	bne.n	8009d1e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8009d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d18:	2204      	movs	r2, #4
 8009d1a:	701a      	strb	r2, [r3, #0]
 8009d1c:	e026      	b.n	8009d6c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8009d1e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d22:	2b08      	cmp	r3, #8
 8009d24:	d007      	beq.n	8009d36 <VL53L0X_get_pal_range_status+0x2aa>
 8009d26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d2a:	2b0a      	cmp	r3, #10
 8009d2c:	d003      	beq.n	8009d36 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8009d2e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d103      	bne.n	8009d3e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8009d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d38:	2203      	movs	r2, #3
 8009d3a:	701a      	strb	r2, [r3, #0]
 8009d3c:	e016      	b.n	8009d6c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8009d3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d42:	2b04      	cmp	r3, #4
 8009d44:	d003      	beq.n	8009d4e <VL53L0X_get_pal_range_status+0x2c2>
 8009d46:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d103      	bne.n	8009d56 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8009d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d50:	2202      	movs	r2, #2
 8009d52:	701a      	strb	r2, [r3, #0]
 8009d54:	e00a      	b.n	8009d6c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8009d56:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d103      	bne.n	8009d66 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8009d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d60:	2201      	movs	r2, #1
 8009d62:	701a      	strb	r2, [r3, #0]
 8009d64:	e002      	b.n	8009d6c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8009d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d68:	2200      	movs	r2, #0
 8009d6a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d102      	bne.n	8009d7a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8009d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d76:	2200      	movs	r2, #0
 8009d78:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009d7a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8009d7e:	461a      	mov	r2, r3
 8009d80:	2101      	movs	r1, #1
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7fc fb98 	bl	80064b8 <VL53L0X_GetLimitCheckEnable>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8009d8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d14f      	bne.n	8009e36 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8009d96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <VL53L0X_get_pal_range_status+0x31a>
 8009d9e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d103      	bne.n	8009dae <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8009da6:	2301      	movs	r3, #1
 8009da8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dac:	e002      	b.n	8009db4 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009dba:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8009dbe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009dc2:	2b04      	cmp	r3, #4
 8009dc4:	d003      	beq.n	8009dce <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8009dc6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d103      	bne.n	8009dd6 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dd4:	e002      	b.n	8009ddc <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009de2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8009de6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <VL53L0X_get_pal_range_status+0x36a>
 8009dee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d103      	bne.n	8009dfe <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8009df6:	2301      	movs	r3, #1
 8009df8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dfc:	e002      	b.n	8009e04 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009e0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8009e0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d003      	beq.n	8009e1e <VL53L0X_get_pal_range_status+0x392>
 8009e16:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d103      	bne.n	8009e26 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e24:	e002      	b.n	8009e2c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009e32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009e36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3740      	adds	r7, #64	; 0x40
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b086      	sub	sp, #24
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	60f8      	str	r0, [r7, #12]
 8009e4a:	60b9      	str	r1, [r7, #8]
 8009e4c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 8009e52:	2102      	movs	r1, #2
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f7fe f899 	bl	8007f8c <VL53L0X_get_info_from_device>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 8009e5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d11c      	bne.n	8009ea0 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8009e6c:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 8009e6e:	7dbb      	ldrb	r3, [r7, #22]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d107      	bne.n	8009e84 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	2200      	movs	r2, #0
 8009e78:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	3340      	adds	r3, #64	; 0x40
 8009e7e:	2200      	movs	r2, #0
 8009e80:	701a      	strb	r2, [r3, #0]
 8009e82:	e00d      	b.n	8009ea0 <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	33f3      	adds	r3, #243	; 0xf3
 8009e92:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	3340      	adds	r3, #64	; 0x40
 8009e98:	6939      	ldr	r1, [r7, #16]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 fc32 	bl	800a704 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3718      	adds	r7, #24
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8009eac:	b5b0      	push	{r4, r5, r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8009eba:	f107 030d 	add.w	r3, r7, #13
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7ff ffbd 	bl	8009e42 <VL53L0X_check_part_used>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 8009ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d13b      	bne.n	8009f4c <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 8009ed4:	7b7b      	ldrb	r3, [r7, #13]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d108      	bne.n	8009eec <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	4a30      	ldr	r2, [pc, #192]	; (8009fa0 <VL53L0X_get_device_info+0xf4>)
 8009ede:	461c      	mov	r4, r3
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009ee4:	6020      	str	r0, [r4, #0]
 8009ee6:	6061      	str	r1, [r4, #4]
 8009ee8:	60a2      	str	r2, [r4, #8]
 8009eea:	e027      	b.n	8009f3c <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 8009eec:	7b7b      	ldrb	r3, [r7, #13]
 8009eee:	2b22      	cmp	r3, #34	; 0x22
 8009ef0:	d80b      	bhi.n	8009f0a <VL53L0X_get_device_info+0x5e>
 8009ef2:	7b7b      	ldrb	r3, [r7, #13]
 8009ef4:	2b20      	cmp	r3, #32
 8009ef6:	d008      	beq.n	8009f0a <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	4a2a      	ldr	r2, [pc, #168]	; (8009fa4 <VL53L0X_get_device_info+0xf8>)
 8009efc:	461c      	mov	r4, r3
 8009efe:	4613      	mov	r3, r2
 8009f00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009f02:	6020      	str	r0, [r4, #0]
 8009f04:	6061      	str	r1, [r4, #4]
 8009f06:	60a2      	str	r2, [r4, #8]
 8009f08:	e018      	b.n	8009f3c <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 8009f0a:	7b7b      	ldrb	r3, [r7, #13]
 8009f0c:	2b26      	cmp	r3, #38	; 0x26
 8009f0e:	d808      	bhi.n	8009f22 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	4a25      	ldr	r2, [pc, #148]	; (8009fa8 <VL53L0X_get_device_info+0xfc>)
 8009f14:	461c      	mov	r4, r3
 8009f16:	4613      	mov	r3, r2
 8009f18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009f1a:	6020      	str	r0, [r4, #0]
 8009f1c:	6061      	str	r1, [r4, #4]
 8009f1e:	60a2      	str	r2, [r4, #8]
 8009f20:	e00c      	b.n	8009f3c <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	4a21      	ldr	r2, [pc, #132]	; (8009fac <VL53L0X_get_device_info+0x100>)
 8009f26:	461d      	mov	r5, r3
 8009f28:	4614      	mov	r4, r2
 8009f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f2c:	6028      	str	r0, [r5, #0]
 8009f2e:	6069      	str	r1, [r5, #4]
 8009f30:	60aa      	str	r2, [r5, #8]
 8009f32:	60eb      	str	r3, [r5, #12]
 8009f34:	6820      	ldr	r0, [r4, #0]
 8009f36:	6128      	str	r0, [r5, #16]
 8009f38:	7923      	ldrb	r3, [r4, #4]
 8009f3a:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	3320      	adds	r3, #32
 8009f40:	491b      	ldr	r1, [pc, #108]	; (8009fb0 <VL53L0X_get_device_info+0x104>)
 8009f42:	461a      	mov	r2, r3
 8009f44:	460b      	mov	r3, r1
 8009f46:	cb03      	ldmia	r3!, {r0, r1}
 8009f48:	6010      	str	r0, [r2, #0]
 8009f4a:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d108      	bne.n	8009f66 <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	3360      	adds	r3, #96	; 0x60
 8009f58:	461a      	mov	r2, r3
 8009f5a:	21c0      	movs	r1, #192	; 0xc0
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f998 	bl	800a292 <VL53L0X_RdByte>
 8009f62:	4603      	mov	r3, r0
 8009f64:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d112      	bne.n	8009f94 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 8009f6e:	f107 030e 	add.w	r3, r7, #14
 8009f72:	461a      	mov	r2, r3
 8009f74:	21c2      	movs	r1, #194	; 0xc2
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 f98b 	bl	800a292 <VL53L0X_RdByte>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 8009f88:	7bbb      	ldrb	r3, [r7, #14]
 8009f8a:	091b      	lsrs	r3, r3, #4
 8009f8c:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 8009f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8009fa0:	0800b010 	.word	0x0800b010
 8009fa4:	0800b01c 	.word	0x0800b01c
 8009fa8:	0800b028 	.word	0x0800b028
 8009fac:	0800b034 	.word	0x0800b034
 8009fb0:	0800b04c 	.word	0x0800b04c

08009fb4 <vl53l0x_init>:
#include "vl53l0x_init.h"

//ContinuousRanging
VL53L0X_Error vl53l0x_init(VL53L0X_DEV pMyDevice, VL53L0X_Version_t *pVersion, VL53L0X_DeviceInfo_t *pDeviceInfo, uint8_t address){
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	77fb      	strb	r3, [r7, #31]
    
	int32_t status_int;

    status_int = VL53L0X_GetVersion(pVersion);
 8009fc6:	68b8      	ldr	r0, [r7, #8]
 8009fc8:	f7fb fbc2 	bl	8005750 <VL53L0X_GetVersion>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	61bb      	str	r3, [r7, #24]
    if (status_int != 0){
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <vl53l0x_init+0x26>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009fd6:	23ec      	movs	r3, #236	; 0xec
 8009fd8:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 8009fda:	200a      	movs	r0, #10
 8009fdc:	f7f8 f994 	bl	8002308 <HAL_Delay>


    if(Status == VL53L0X_ERROR_NONE){
 8009fe0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d104      	bne.n	8009ff2 <vl53l0x_init+0x3e>
    	Status = VL53L0X_DataInit(pMyDevice); // Data initialization
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f7fb fc1d 	bl	8005828 <VL53L0X_DataInit>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 8009ff2:	200a      	movs	r0, #10
 8009ff4:	f7f8 f988 	bl	8002308 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 8009ff8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10d      	bne.n	800a01c <vl53l0x_init+0x68>
    	HAL_Delay(10);
 800a000:	200a      	movs	r0, #10
 800a002:	f7f8 f981 	bl	8002308 <HAL_Delay>
    	Status = VL53L0X_SetDeviceAddress(pMyDevice, address);
 800a006:	78fb      	ldrb	r3, [r7, #3]
 800a008:	4619      	mov	r1, r3
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f7fb fbf3 	bl	80057f6 <VL53L0X_SetDeviceAddress>
 800a010:	4603      	mov	r3, r0
 800a012:	77fb      	strb	r3, [r7, #31]
    	pMyDevice->I2cDevAddr = address;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	78fa      	ldrb	r2, [r7, #3]
 800a018:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    }
    HAL_Delay(10);
 800a01c:	200a      	movs	r0, #10
 800a01e:	f7f8 f973 	bl	8002308 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800a022:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d105      	bne.n	800a036 <vl53l0x_init+0x82>
    	Status = VL53L0X_GetDeviceInfo(pMyDevice, pDeviceInfo);
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f7fb fba9 	bl	8005784 <VL53L0X_GetDeviceInfo>
 800a032:	4603      	mov	r3, r0
 800a034:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800a036:	200a      	movs	r0, #10
 800a038:	f7f8 f966 	bl	8002308 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800a03c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d104      	bne.n	800a04e <vl53l0x_init+0x9a>
        Status = VL53L0X_StaticInit(pMyDevice); // Device Initialization
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f7fb fcf9 	bl	8005a3c <VL53L0X_StaticInit>
 800a04a:	4603      	mov	r3, r0
 800a04c:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800a04e:	200a      	movs	r0, #10
 800a050:	f7f8 f95a 	bl	8002308 <HAL_Delay>
    uint32_t refSpadCount;
    uint8_t isApertureSpads;
    uint8_t VhvSettings;
    uint8_t PhaseCal;

    if(Status == VL53L0X_ERROR_NONE){
 800a054:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d109      	bne.n	800a070 <vl53l0x_init+0xbc>
    	Status = VL53L0X_PerformRefCalibration(pMyDevice, &VhvSettings, &PhaseCal); // Device Initialization
 800a05c:	f107 0211 	add.w	r2, r7, #17
 800a060:	f107 0312 	add.w	r3, r7, #18
 800a064:	4619      	mov	r1, r3
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f7fc fb9e 	bl	80067a8 <VL53L0X_PerformRefCalibration>
 800a06c:	4603      	mov	r3, r0
 800a06e:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800a070:	200a      	movs	r0, #10
 800a072:	f7f8 f949 	bl	8002308 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800a076:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d109      	bne.n	800a092 <vl53l0x_init+0xde>
    	Status = VL53L0X_PerformRefSpadManagement(pMyDevice, &refSpadCount, &isApertureSpads); // Device Initialization
 800a07e:	f107 0213 	add.w	r2, r7, #19
 800a082:	f107 0314 	add.w	r3, r7, #20
 800a086:	4619      	mov	r1, r3
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f7fc ffe5 	bl	8007058 <VL53L0X_PerformRefSpadManagement>
 800a08e:	4603      	mov	r3, r0
 800a090:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800a092:	200a      	movs	r0, #10
 800a094:	f7f8 f938 	bl	8002308 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800a098:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d105      	bne.n	800a0ac <vl53l0x_init+0xf8>
        Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING); // Setup in single ranging mode
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f7fb fedc 	bl	8005e60 <VL53L0X_SetDeviceMode>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	77fb      	strb	r3, [r7, #31]
    }
    if (Status == VL53L0X_ERROR_NONE) {
 800a0ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d106      	bne.n	800a0c2 <vl53l0x_init+0x10e>
    	Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pMyDevice, 33000);
 800a0b4:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f7fb ff2c 	bl	8005f16 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	77fb      	strb	r3, [r7, #31]
    }
    if (Status == VL53L0X_ERROR_NONE) {
 800a0c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d106      	bne.n	800a0d8 <vl53l0x_init+0x124>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f7fc f966 	bl	80063a0 <VL53L0X_SetLimitCheckEnable>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	77fb      	strb	r3, [r7, #31]
        		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
    }
    if (Status == VL53L0X_ERROR_NONE) {
 800a0d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d106      	bne.n	800a0ee <vl53l0x_init+0x13a>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f7fc f95b 	bl	80063a0 <VL53L0X_SetLimitCheckEnable>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	77fb      	strb	r3, [r7, #31]
        		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800a0ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d107      	bne.n	800a106 <vl53l0x_init+0x152>
        Status = VL53L0X_SetLimitCheckValue(pMyDevice,
 800a0f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f7fc f9fd 	bl	80064fc <VL53L0X_SetLimitCheckValue>
 800a102:	4603      	mov	r3, r0
 800a104:	77fb      	strb	r3, [r7, #31]
        		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
        		(FixPoint1616_t)(0.25*65536));
	}
    if (Status == VL53L0X_ERROR_NONE) {
 800a106:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d107      	bne.n	800a11e <vl53l0x_init+0x16a>
        Status = VL53L0X_SetLimitCheckValue(pMyDevice,
 800a10e:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800a112:	2100      	movs	r1, #0
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f7fc f9f1 	bl	80064fc <VL53L0X_SetLimitCheckValue>
 800a11a:	4603      	mov	r3, r0
 800a11c:	77fb      	strb	r3, [r7, #31]
        }
    if (Status == VL53L0X_ERROR_NONE) {
        //  Status = VL53L0X_SetLimitCheckValue(pMyDevice,
        		 // VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 25000); // default 16384
        }
    HAL_Delay(10);
 800a11e:	200a      	movs	r0, #10
 800a120:	f7f8 f8f2 	bl	8002308 <HAL_Delay>
    if(Status == VL53L0X_ERROR_NONE){
 800a124:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d104      	bne.n	800a136 <vl53l0x_init+0x182>
    	Status = VL53L0X_StartMeasurement(pMyDevice);
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f7fc fbb7 	bl	80068a0 <VL53L0X_StartMeasurement>
 800a132:	4603      	mov	r3, r0
 800a134:	77fb      	strb	r3, [r7, #31]
    }
    return Status;
 800a136:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3720      	adds	r7, #32
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <vl53l0x_GetRanging_now>:

VL53L0X_Error vl53l0x_GetRanging_now(VL53L0X_DEV pMyDevice, uint16_t *result) {
 800a142:	b580      	push	{r7, lr}
 800a144:	b08c      	sub	sp, #48	; 0x30
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	6039      	str	r1, [r7, #0]
	VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData = &RangingMeasurementData;
 800a14c:	f107 030c 	add.w	r3, r7, #12
 800a150:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a152:	2300      	movs	r3, #0
 800a154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Status = WaitMeasurementDataReady(pMyDevice);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f828 	bl	800a1ae <WaitMeasurementDataReady>
 800a15e:	4603      	mov	r3, r0
 800a160:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(Status == VL53L0X_ERROR_NONE){
 800a164:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d11a      	bne.n	800a1a2 <vl53l0x_GetRanging_now+0x60>
		Status = VL53L0X_GetRangingMeasurementData(pMyDevice, pRangingMeasurementData);
 800a16c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7fc fc62 	bl	8006a38 <VL53L0X_GetRangingMeasurementData>
 800a174:	4603      	mov	r3, r0
 800a176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		VL53L0X_ClearInterruptMask(pMyDevice, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 800a17a:	2104      	movs	r1, #4
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7fc ff09 	bl	8006f94 <VL53L0X_ClearInterruptMask>
		VL53L0X_PollingDelay(pMyDevice);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 fa02 	bl	800a58c <VL53L0X_PollingDelay>
		if(pRangingMeasurementData->RangeStatus == 0){
 800a188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18a:	7e1b      	ldrb	r3, [r3, #24]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d104      	bne.n	800a19a <vl53l0x_GetRanging_now+0x58>
			*result = pRangingMeasurementData->RangeMilliMeter;
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	891a      	ldrh	r2, [r3, #8]
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	801a      	strh	r2, [r3, #0]
 800a198:	e003      	b.n	800a1a2 <vl53l0x_GetRanging_now+0x60>
		} else {
			*result = 8000;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800a1a0:	801a      	strh	r2, [r3, #0]
		}
	}
	return Status;
 800a1a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3730      	adds	r7, #48	; 0x30
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <WaitMeasurementDataReady>:
    }

    return Status;
}

VL53L0X_Error WaitMeasurementDataReady(VL53L0X_DEV Dev) {
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b086      	sub	sp, #24
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	75fb      	strb	r3, [r7, #23]
    uint8_t NewDatReady=0;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	73fb      	strb	r3, [r7, #15]
    uint32_t LoopNb;

    // Wait until it finished
    // use timeout to avoid deadlock
    if (Status == VL53L0X_ERROR_NONE) {
 800a1be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d11e      	bne.n	800a204 <WaitMeasurementDataReady+0x56>
        LoopNb = 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	613b      	str	r3, [r7, #16]
        do {
            Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDatReady);
 800a1ca:	f107 030f 	add.w	r3, r7, #15
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f7fc fbf1 	bl	80069b8 <VL53L0X_GetMeasurementDataReady>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	75fb      	strb	r3, [r7, #23]
            if ((NewDatReady == 0x01) || Status != VL53L0X_ERROR_NONE) {
 800a1da:	7bfb      	ldrb	r3, [r7, #15]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d00c      	beq.n	800a1fa <WaitMeasurementDataReady+0x4c>
 800a1e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d108      	bne.n	800a1fa <WaitMeasurementDataReady+0x4c>
                break;
            }
            LoopNb = LoopNb + 1;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	613b      	str	r3, [r7, #16]
            VL53L0X_PollingDelay(Dev);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f9cc 	bl	800a58c <VL53L0X_PollingDelay>
        } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	2bc7      	cmp	r3, #199	; 0xc7
 800a1f8:	d9e7      	bls.n	800a1ca <WaitMeasurementDataReady+0x1c>

        if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	2bc7      	cmp	r3, #199	; 0xc7
 800a1fe:	d901      	bls.n	800a204 <WaitMeasurementDataReady+0x56>
            Status = VL53L0X_ERROR_TIME_OUT;
 800a200:	23f9      	movs	r3, #249	; 0xf9
 800a202:	75fb      	strb	r3, [r7, #23]
        }
    }

    return Status;
 800a204:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800a210:	b580      	push	{r7, lr}
 800a212:	b088      	sub	sp, #32
 800a214:	af02      	add	r7, sp, #8
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	330a      	adds	r3, #10
 800a220:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800a22e:	b299      	uxth	r1, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	b29a      	uxth	r2, r3
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	4613      	mov	r3, r2
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	f7f8 fcca 	bl	8002bd4 <HAL_I2C_Master_Transmit>
 800a240:	4603      	mov	r3, r0
 800a242:	613b      	str	r3, [r7, #16]
    
    return status;
 800a244:	693b      	ldr	r3, [r7, #16]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800a24e:	b580      	push	{r7, lr}
 800a250:	b088      	sub	sp, #32
 800a252:	af02      	add	r7, sp, #8
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	60b9      	str	r1, [r7, #8]
 800a258:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	330a      	adds	r3, #10
 800a25e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800a26c:	f043 0301 	orr.w	r3, r3, #1
 800a270:	b2db      	uxtb	r3, r3
 800a272:	b299      	uxth	r1, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	b29a      	uxth	r2, r3
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	4613      	mov	r3, r2
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	f7f8 fda6 	bl	8002dd0 <HAL_I2C_Master_Receive>
 800a284:	4603      	mov	r3, r0
 800a286:	613b      	str	r3, [r7, #16]
    
    return status;
 800a288:	693b      	ldr	r3, [r7, #16]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800a292:	b580      	push	{r7, lr}
 800a294:	b086      	sub	sp, #24
 800a296:	af00      	add	r7, sp, #0
 800a298:	60f8      	str	r0, [r7, #12]
 800a29a:	460b      	mov	r3, r1
 800a29c:	607a      	str	r2, [r7, #4]
 800a29e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800a2a4:	f107 030b 	add.w	r3, r7, #11
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f7ff ffaf 	bl	800a210 <_I2CWrite>
 800a2b2:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d002      	beq.n	800a2c0 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a2ba:	23ec      	movs	r3, #236	; 0xec
 800a2bc:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a2be:	e00c      	b.n	800a2da <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f7ff ffc2 	bl	800a24e <_I2CRead>
 800a2ca:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a2d2:	23ec      	movs	r3, #236	; 0xec
 800a2d4:	75fb      	strb	r3, [r7, #23]
 800a2d6:	e000      	b.n	800a2da <VL53L0X_RdByte+0x48>
    }
done:
 800a2d8:	bf00      	nop
    return Status;
 800a2da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
	...

0800a2e8 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	607a      	str	r2, [r7, #4]
 800a2f2:	603b      	str	r3, [r7, #0]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	2b3f      	cmp	r3, #63	; 0x3f
 800a300:	d902      	bls.n	800a308 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800a302:	f06f 0303 	mvn.w	r3, #3
 800a306:	e016      	b.n	800a336 <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 800a308:	4a0d      	ldr	r2, [pc, #52]	; (800a340 <VL53L0X_WriteMulti+0x58>)
 800a30a:	7afb      	ldrb	r3, [r7, #11]
 800a30c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	6879      	ldr	r1, [r7, #4]
 800a312:	480c      	ldr	r0, [pc, #48]	; (800a344 <VL53L0X_WriteMulti+0x5c>)
 800a314:	f000 f9c0 	bl	800a698 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	3301      	adds	r3, #1
 800a31c:	461a      	mov	r2, r3
 800a31e:	4908      	ldr	r1, [pc, #32]	; (800a340 <VL53L0X_WriteMulti+0x58>)
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f7ff ff75 	bl	800a210 <_I2CWrite>
 800a326:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d001      	beq.n	800a332 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a32e:	23ec      	movs	r3, #236	; 0xec
 800a330:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 800a332:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	2000110c 	.word	0x2000110c
 800a344:	2000110d 	.word	0x2000110d

0800a348 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	607a      	str	r2, [r7, #4]
 800a352:	603b      	str	r3, [r7, #0]
 800a354:	460b      	mov	r3, r1
 800a356:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a358:	2300      	movs	r3, #0
 800a35a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 800a35c:	f107 030b 	add.w	r3, r7, #11
 800a360:	2201      	movs	r2, #1
 800a362:	4619      	mov	r1, r3
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7ff ff53 	bl	800a210 <_I2CWrite>
 800a36a:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d002      	beq.n	800a378 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a372:	23ec      	movs	r3, #236	; 0xec
 800a374:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a376:	e00c      	b.n	800a392 <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	6879      	ldr	r1, [r7, #4]
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f7ff ff66 	bl	800a24e <_I2CRead>
 800a382:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a38a:	23ec      	movs	r3, #236	; 0xec
 800a38c:	75fb      	strb	r3, [r7, #23]
 800a38e:	e000      	b.n	800a392 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800a390:	bf00      	nop
    return Status;
 800a392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3718      	adds	r7, #24
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	607a      	str	r2, [r7, #4]
 800a3ac:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800a3b2:	f107 030b 	add.w	r3, r7, #11
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f7ff ff28 	bl	800a210 <_I2CWrite>
 800a3c0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d002      	beq.n	800a3ce <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a3c8:	23ec      	movs	r3, #236	; 0xec
 800a3ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a3cc:	e017      	b.n	800a3fe <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	490e      	ldr	r1, [pc, #56]	; (800a40c <VL53L0X_RdWord+0x6c>)
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f7ff ff3b 	bl	800a24e <_I2CRead>
 800a3d8:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a3e0:	23ec      	movs	r3, #236	; 0xec
 800a3e2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a3e4:	e00b      	b.n	800a3fe <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800a3e6:	4b09      	ldr	r3, [pc, #36]	; (800a40c <VL53L0X_RdWord+0x6c>)
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	021b      	lsls	r3, r3, #8
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	4b06      	ldr	r3, [pc, #24]	; (800a40c <VL53L0X_RdWord+0x6c>)
 800a3f2:	785b      	ldrb	r3, [r3, #1]
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	4413      	add	r3, r2
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 800a3fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3718      	adds	r7, #24
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	2000110c 	.word	0x2000110c

0800a410 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	460b      	mov	r3, r1
 800a41a:	607a      	str	r2, [r7, #4]
 800a41c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a41e:	2300      	movs	r3, #0
 800a420:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800a422:	f107 030b 	add.w	r3, r7, #11
 800a426:	2201      	movs	r2, #1
 800a428:	4619      	mov	r1, r3
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7ff fef0 	bl	800a210 <_I2CWrite>
 800a430:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a438:	23ec      	movs	r3, #236	; 0xec
 800a43a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a43c:	e01b      	b.n	800a476 <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800a43e:	2204      	movs	r2, #4
 800a440:	4910      	ldr	r1, [pc, #64]	; (800a484 <VL53L0X_RdDWord+0x74>)
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f7ff ff03 	bl	800a24e <_I2CRead>
 800a448:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a450:	23ec      	movs	r3, #236	; 0xec
 800a452:	75fb      	strb	r3, [r7, #23]
        goto done;
 800a454:	e00f      	b.n	800a476 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800a456:	4b0b      	ldr	r3, [pc, #44]	; (800a484 <VL53L0X_RdDWord+0x74>)
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	061a      	lsls	r2, r3, #24
 800a45c:	4b09      	ldr	r3, [pc, #36]	; (800a484 <VL53L0X_RdDWord+0x74>)
 800a45e:	785b      	ldrb	r3, [r3, #1]
 800a460:	041b      	lsls	r3, r3, #16
 800a462:	441a      	add	r2, r3
 800a464:	4b07      	ldr	r3, [pc, #28]	; (800a484 <VL53L0X_RdDWord+0x74>)
 800a466:	789b      	ldrb	r3, [r3, #2]
 800a468:	021b      	lsls	r3, r3, #8
 800a46a:	4413      	add	r3, r2
 800a46c:	4a05      	ldr	r2, [pc, #20]	; (800a484 <VL53L0X_RdDWord+0x74>)
 800a46e:	78d2      	ldrb	r2, [r2, #3]
 800a470:	441a      	add	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	601a      	str	r2, [r3, #0]

done:
    return Status;
 800a476:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3718      	adds	r7, #24
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	2000110c 	.word	0x2000110c

0800a488 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	70fb      	strb	r3, [r7, #3]
 800a494:	4613      	mov	r3, r2
 800a496:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a498:	2300      	movs	r3, #0
 800a49a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800a49c:	4a0b      	ldr	r2, [pc, #44]	; (800a4cc <VL53L0X_WrByte+0x44>)
 800a49e:	78fb      	ldrb	r3, [r7, #3]
 800a4a0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800a4a2:	4a0a      	ldr	r2, [pc, #40]	; (800a4cc <VL53L0X_WrByte+0x44>)
 800a4a4:	78bb      	ldrb	r3, [r7, #2]
 800a4a6:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800a4a8:	2202      	movs	r2, #2
 800a4aa:	4908      	ldr	r1, [pc, #32]	; (800a4cc <VL53L0X_WrByte+0x44>)
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff feaf 	bl	800a210 <_I2CWrite>
 800a4b2:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a4ba:	23ec      	movs	r3, #236	; 0xec
 800a4bc:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800a4be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	2000110c 	.word	0x2000110c

0800a4d0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	70fb      	strb	r3, [r7, #3]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800a4e4:	4a0e      	ldr	r2, [pc, #56]	; (800a520 <VL53L0X_WrWord+0x50>)
 800a4e6:	78fb      	ldrb	r3, [r7, #3]
 800a4e8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800a4ea:	883b      	ldrh	r3, [r7, #0]
 800a4ec:	0a1b      	lsrs	r3, r3, #8
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	b2da      	uxtb	r2, r3
 800a4f2:	4b0b      	ldr	r3, [pc, #44]	; (800a520 <VL53L0X_WrWord+0x50>)
 800a4f4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800a4f6:	883b      	ldrh	r3, [r7, #0]
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	4b09      	ldr	r3, [pc, #36]	; (800a520 <VL53L0X_WrWord+0x50>)
 800a4fc:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800a4fe:	2203      	movs	r2, #3
 800a500:	4907      	ldr	r1, [pc, #28]	; (800a520 <VL53L0X_WrWord+0x50>)
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7ff fe84 	bl	800a210 <_I2CWrite>
 800a508:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800a510:	23ec      	movs	r3, #236	; 0xec
 800a512:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800a514:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	2000110c 	.word	0x2000110c

0800a524 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	4608      	mov	r0, r1
 800a52e:	4611      	mov	r1, r2
 800a530:	461a      	mov	r2, r3
 800a532:	4603      	mov	r3, r0
 800a534:	70fb      	strb	r3, [r7, #3]
 800a536:	460b      	mov	r3, r1
 800a538:	70bb      	strb	r3, [r7, #2]
 800a53a:	4613      	mov	r3, r2
 800a53c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a53e:	2300      	movs	r3, #0
 800a540:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800a542:	f107 020e 	add.w	r2, r7, #14
 800a546:	78fb      	ldrb	r3, [r7, #3]
 800a548:	4619      	mov	r1, r3
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f7ff fea1 	bl	800a292 <VL53L0X_RdByte>
 800a550:	4603      	mov	r3, r0
 800a552:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 800a554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d110      	bne.n	800a57e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 800a55c:	7bba      	ldrb	r2, [r7, #14]
 800a55e:	78bb      	ldrb	r3, [r7, #2]
 800a560:	4013      	ands	r3, r2
 800a562:	b2da      	uxtb	r2, r3
 800a564:	787b      	ldrb	r3, [r7, #1]
 800a566:	4313      	orrs	r3, r2
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800a56c:	7bba      	ldrb	r2, [r7, #14]
 800a56e:	78fb      	ldrb	r3, [r7, #3]
 800a570:	4619      	mov	r1, r3
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7ff ff88 	bl	800a488 <VL53L0X_WrByte>
 800a578:	4603      	mov	r3, r0
 800a57a:	73fb      	strb	r3, [r7, #15]
 800a57c:	e000      	b.n	800a580 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800a57e:	bf00      	nop
done:
    return Status;
 800a580:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a594:	2300      	movs	r3, #0
 800a596:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800a598:	2002      	movs	r0, #2
 800a59a:	f7f7 feb5 	bl	8002308 <HAL_Delay>
    return status;
 800a59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
	...

0800a5ac <round>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800a5b2:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800a5b6:	2a13      	cmp	r2, #19
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4684      	mov	ip, r0
 800a5bc:	468e      	mov	lr, r1
 800a5be:	4604      	mov	r4, r0
 800a5c0:	dc20      	bgt.n	800a604 <round+0x58>
 800a5c2:	2a00      	cmp	r2, #0
 800a5c4:	db0e      	blt.n	800a5e4 <round+0x38>
 800a5c6:	491e      	ldr	r1, [pc, #120]	; (800a640 <round+0x94>)
 800a5c8:	4111      	asrs	r1, r2
 800a5ca:	ea03 0001 	and.w	r0, r3, r1
 800a5ce:	4320      	orrs	r0, r4
 800a5d0:	d015      	beq.n	800a5fe <round+0x52>
 800a5d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a5d6:	fa43 f202 	asr.w	r2, r3, r2
 800a5da:	4496      	add	lr, r2
 800a5dc:	2400      	movs	r4, #0
 800a5de:	ea2e 0e01 	bic.w	lr, lr, r1
 800a5e2:	e00a      	b.n	800a5fa <round+0x4e>
 800a5e4:	3201      	adds	r2, #1
 800a5e6:	bf14      	ite	ne
 800a5e8:	2400      	movne	r4, #0
 800a5ea:	2400      	moveq	r4, #0
 800a5ec:	f001 4e00 	and.w	lr, r1, #2147483648	; 0x80000000
 800a5f0:	bf04      	itt	eq
 800a5f2:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
 800a5f6:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
 800a5fa:	4673      	mov	r3, lr
 800a5fc:	46a4      	mov	ip, r4
 800a5fe:	4660      	mov	r0, ip
 800a600:	4619      	mov	r1, r3
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	2a33      	cmp	r2, #51	; 0x33
 800a606:	dd08      	ble.n	800a61a <round+0x6e>
 800a608:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a60c:	d1f7      	bne.n	800a5fe <round+0x52>
 800a60e:	4602      	mov	r2, r0
 800a610:	f7f5 fda4 	bl	800015c <__adddf3>
 800a614:	4684      	mov	ip, r0
 800a616:	460b      	mov	r3, r1
 800a618:	e7f1      	b.n	800a5fe <round+0x52>
 800a61a:	f04f 31ff 	mov.w	r1, #4294967295
 800a61e:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800a622:	fa21 f505 	lsr.w	r5, r1, r5
 800a626:	4228      	tst	r0, r5
 800a628:	d0e9      	beq.n	800a5fe <round+0x52>
 800a62a:	2301      	movs	r3, #1
 800a62c:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800a630:	fa03 f202 	lsl.w	r2, r3, r2
 800a634:	1884      	adds	r4, r0, r2
 800a636:	bf28      	it	cs
 800a638:	449e      	addcs	lr, r3
 800a63a:	ea24 0405 	bic.w	r4, r4, r5
 800a63e:	e7dc      	b.n	800a5fa <round+0x4e>
 800a640:	000fffff 	.word	0x000fffff

0800a644 <__errno>:
 800a644:	4b01      	ldr	r3, [pc, #4]	; (800a64c <__errno+0x8>)
 800a646:	6818      	ldr	r0, [r3, #0]
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	200002d8 	.word	0x200002d8

0800a650 <__libc_init_array>:
 800a650:	b570      	push	{r4, r5, r6, lr}
 800a652:	2600      	movs	r6, #0
 800a654:	4d0c      	ldr	r5, [pc, #48]	; (800a688 <__libc_init_array+0x38>)
 800a656:	4c0d      	ldr	r4, [pc, #52]	; (800a68c <__libc_init_array+0x3c>)
 800a658:	1b64      	subs	r4, r4, r5
 800a65a:	10a4      	asrs	r4, r4, #2
 800a65c:	42a6      	cmp	r6, r4
 800a65e:	d109      	bne.n	800a674 <__libc_init_array+0x24>
 800a660:	f000 fca4 	bl	800afac <_init>
 800a664:	2600      	movs	r6, #0
 800a666:	4d0a      	ldr	r5, [pc, #40]	; (800a690 <__libc_init_array+0x40>)
 800a668:	4c0a      	ldr	r4, [pc, #40]	; (800a694 <__libc_init_array+0x44>)
 800a66a:	1b64      	subs	r4, r4, r5
 800a66c:	10a4      	asrs	r4, r4, #2
 800a66e:	42a6      	cmp	r6, r4
 800a670:	d105      	bne.n	800a67e <__libc_init_array+0x2e>
 800a672:	bd70      	pop	{r4, r5, r6, pc}
 800a674:	f855 3b04 	ldr.w	r3, [r5], #4
 800a678:	4798      	blx	r3
 800a67a:	3601      	adds	r6, #1
 800a67c:	e7ee      	b.n	800a65c <__libc_init_array+0xc>
 800a67e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a682:	4798      	blx	r3
 800a684:	3601      	adds	r6, #1
 800a686:	e7f2      	b.n	800a66e <__libc_init_array+0x1e>
 800a688:	0800b5a4 	.word	0x0800b5a4
 800a68c:	0800b5a4 	.word	0x0800b5a4
 800a690:	0800b5a4 	.word	0x0800b5a4
 800a694:	0800b5a8 	.word	0x0800b5a8

0800a698 <memcpy>:
 800a698:	440a      	add	r2, r1
 800a69a:	4291      	cmp	r1, r2
 800a69c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6a0:	d100      	bne.n	800a6a4 <memcpy+0xc>
 800a6a2:	4770      	bx	lr
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6aa:	4291      	cmp	r1, r2
 800a6ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6b0:	d1f9      	bne.n	800a6a6 <memcpy+0xe>
 800a6b2:	bd10      	pop	{r4, pc}

0800a6b4 <memset>:
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	4402      	add	r2, r0
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d100      	bne.n	800a6be <memset+0xa>
 800a6bc:	4770      	bx	lr
 800a6be:	f803 1b01 	strb.w	r1, [r3], #1
 800a6c2:	e7f9      	b.n	800a6b8 <memset+0x4>

0800a6c4 <siprintf>:
 800a6c4:	b40e      	push	{r1, r2, r3}
 800a6c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6ca:	b500      	push	{lr}
 800a6cc:	b09c      	sub	sp, #112	; 0x70
 800a6ce:	ab1d      	add	r3, sp, #116	; 0x74
 800a6d0:	9002      	str	r0, [sp, #8]
 800a6d2:	9006      	str	r0, [sp, #24]
 800a6d4:	9107      	str	r1, [sp, #28]
 800a6d6:	9104      	str	r1, [sp, #16]
 800a6d8:	4808      	ldr	r0, [pc, #32]	; (800a6fc <siprintf+0x38>)
 800a6da:	4909      	ldr	r1, [pc, #36]	; (800a700 <siprintf+0x3c>)
 800a6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e0:	9105      	str	r1, [sp, #20]
 800a6e2:	6800      	ldr	r0, [r0, #0]
 800a6e4:	a902      	add	r1, sp, #8
 800a6e6:	9301      	str	r3, [sp, #4]
 800a6e8:	f000 f94e 	bl	800a988 <_svfiprintf_r>
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	9b02      	ldr	r3, [sp, #8]
 800a6f0:	701a      	strb	r2, [r3, #0]
 800a6f2:	b01c      	add	sp, #112	; 0x70
 800a6f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6f8:	b003      	add	sp, #12
 800a6fa:	4770      	bx	lr
 800a6fc:	200002d8 	.word	0x200002d8
 800a700:	ffff0208 	.word	0xffff0208

0800a704 <strcpy>:
 800a704:	4603      	mov	r3, r0
 800a706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a70a:	f803 2b01 	strb.w	r2, [r3], #1
 800a70e:	2a00      	cmp	r2, #0
 800a710:	d1f9      	bne.n	800a706 <strcpy+0x2>
 800a712:	4770      	bx	lr

0800a714 <__retarget_lock_acquire_recursive>:
 800a714:	4770      	bx	lr

0800a716 <__retarget_lock_release_recursive>:
 800a716:	4770      	bx	lr

0800a718 <_free_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	4605      	mov	r5, r0
 800a71c:	2900      	cmp	r1, #0
 800a71e:	d040      	beq.n	800a7a2 <_free_r+0x8a>
 800a720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a724:	1f0c      	subs	r4, r1, #4
 800a726:	2b00      	cmp	r3, #0
 800a728:	bfb8      	it	lt
 800a72a:	18e4      	addlt	r4, r4, r3
 800a72c:	f000 fbfa 	bl	800af24 <__malloc_lock>
 800a730:	4a1c      	ldr	r2, [pc, #112]	; (800a7a4 <_free_r+0x8c>)
 800a732:	6813      	ldr	r3, [r2, #0]
 800a734:	b933      	cbnz	r3, 800a744 <_free_r+0x2c>
 800a736:	6063      	str	r3, [r4, #4]
 800a738:	6014      	str	r4, [r2, #0]
 800a73a:	4628      	mov	r0, r5
 800a73c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a740:	f000 bbf6 	b.w	800af30 <__malloc_unlock>
 800a744:	42a3      	cmp	r3, r4
 800a746:	d908      	bls.n	800a75a <_free_r+0x42>
 800a748:	6820      	ldr	r0, [r4, #0]
 800a74a:	1821      	adds	r1, r4, r0
 800a74c:	428b      	cmp	r3, r1
 800a74e:	bf01      	itttt	eq
 800a750:	6819      	ldreq	r1, [r3, #0]
 800a752:	685b      	ldreq	r3, [r3, #4]
 800a754:	1809      	addeq	r1, r1, r0
 800a756:	6021      	streq	r1, [r4, #0]
 800a758:	e7ed      	b.n	800a736 <_free_r+0x1e>
 800a75a:	461a      	mov	r2, r3
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	b10b      	cbz	r3, 800a764 <_free_r+0x4c>
 800a760:	42a3      	cmp	r3, r4
 800a762:	d9fa      	bls.n	800a75a <_free_r+0x42>
 800a764:	6811      	ldr	r1, [r2, #0]
 800a766:	1850      	adds	r0, r2, r1
 800a768:	42a0      	cmp	r0, r4
 800a76a:	d10b      	bne.n	800a784 <_free_r+0x6c>
 800a76c:	6820      	ldr	r0, [r4, #0]
 800a76e:	4401      	add	r1, r0
 800a770:	1850      	adds	r0, r2, r1
 800a772:	4283      	cmp	r3, r0
 800a774:	6011      	str	r1, [r2, #0]
 800a776:	d1e0      	bne.n	800a73a <_free_r+0x22>
 800a778:	6818      	ldr	r0, [r3, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	4401      	add	r1, r0
 800a77e:	6011      	str	r1, [r2, #0]
 800a780:	6053      	str	r3, [r2, #4]
 800a782:	e7da      	b.n	800a73a <_free_r+0x22>
 800a784:	d902      	bls.n	800a78c <_free_r+0x74>
 800a786:	230c      	movs	r3, #12
 800a788:	602b      	str	r3, [r5, #0]
 800a78a:	e7d6      	b.n	800a73a <_free_r+0x22>
 800a78c:	6820      	ldr	r0, [r4, #0]
 800a78e:	1821      	adds	r1, r4, r0
 800a790:	428b      	cmp	r3, r1
 800a792:	bf01      	itttt	eq
 800a794:	6819      	ldreq	r1, [r3, #0]
 800a796:	685b      	ldreq	r3, [r3, #4]
 800a798:	1809      	addeq	r1, r1, r0
 800a79a:	6021      	streq	r1, [r4, #0]
 800a79c:	6063      	str	r3, [r4, #4]
 800a79e:	6054      	str	r4, [r2, #4]
 800a7a0:	e7cb      	b.n	800a73a <_free_r+0x22>
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	20001150 	.word	0x20001150

0800a7a8 <sbrk_aligned>:
 800a7a8:	b570      	push	{r4, r5, r6, lr}
 800a7aa:	4e0e      	ldr	r6, [pc, #56]	; (800a7e4 <sbrk_aligned+0x3c>)
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	6831      	ldr	r1, [r6, #0]
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	b911      	cbnz	r1, 800a7ba <sbrk_aligned+0x12>
 800a7b4:	f000 fb7e 	bl	800aeb4 <_sbrk_r>
 800a7b8:	6030      	str	r0, [r6, #0]
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f000 fb79 	bl	800aeb4 <_sbrk_r>
 800a7c2:	1c43      	adds	r3, r0, #1
 800a7c4:	d00a      	beq.n	800a7dc <sbrk_aligned+0x34>
 800a7c6:	1cc4      	adds	r4, r0, #3
 800a7c8:	f024 0403 	bic.w	r4, r4, #3
 800a7cc:	42a0      	cmp	r0, r4
 800a7ce:	d007      	beq.n	800a7e0 <sbrk_aligned+0x38>
 800a7d0:	1a21      	subs	r1, r4, r0
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f000 fb6e 	bl	800aeb4 <_sbrk_r>
 800a7d8:	3001      	adds	r0, #1
 800a7da:	d101      	bne.n	800a7e0 <sbrk_aligned+0x38>
 800a7dc:	f04f 34ff 	mov.w	r4, #4294967295
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	bd70      	pop	{r4, r5, r6, pc}
 800a7e4:	20001154 	.word	0x20001154

0800a7e8 <_malloc_r>:
 800a7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ec:	1ccd      	adds	r5, r1, #3
 800a7ee:	f025 0503 	bic.w	r5, r5, #3
 800a7f2:	3508      	adds	r5, #8
 800a7f4:	2d0c      	cmp	r5, #12
 800a7f6:	bf38      	it	cc
 800a7f8:	250c      	movcc	r5, #12
 800a7fa:	2d00      	cmp	r5, #0
 800a7fc:	4607      	mov	r7, r0
 800a7fe:	db01      	blt.n	800a804 <_malloc_r+0x1c>
 800a800:	42a9      	cmp	r1, r5
 800a802:	d905      	bls.n	800a810 <_malloc_r+0x28>
 800a804:	230c      	movs	r3, #12
 800a806:	2600      	movs	r6, #0
 800a808:	603b      	str	r3, [r7, #0]
 800a80a:	4630      	mov	r0, r6
 800a80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a810:	4e2e      	ldr	r6, [pc, #184]	; (800a8cc <_malloc_r+0xe4>)
 800a812:	f000 fb87 	bl	800af24 <__malloc_lock>
 800a816:	6833      	ldr	r3, [r6, #0]
 800a818:	461c      	mov	r4, r3
 800a81a:	bb34      	cbnz	r4, 800a86a <_malloc_r+0x82>
 800a81c:	4629      	mov	r1, r5
 800a81e:	4638      	mov	r0, r7
 800a820:	f7ff ffc2 	bl	800a7a8 <sbrk_aligned>
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	4604      	mov	r4, r0
 800a828:	d14d      	bne.n	800a8c6 <_malloc_r+0xde>
 800a82a:	6834      	ldr	r4, [r6, #0]
 800a82c:	4626      	mov	r6, r4
 800a82e:	2e00      	cmp	r6, #0
 800a830:	d140      	bne.n	800a8b4 <_malloc_r+0xcc>
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	4631      	mov	r1, r6
 800a836:	4638      	mov	r0, r7
 800a838:	eb04 0803 	add.w	r8, r4, r3
 800a83c:	f000 fb3a 	bl	800aeb4 <_sbrk_r>
 800a840:	4580      	cmp	r8, r0
 800a842:	d13a      	bne.n	800a8ba <_malloc_r+0xd2>
 800a844:	6821      	ldr	r1, [r4, #0]
 800a846:	3503      	adds	r5, #3
 800a848:	1a6d      	subs	r5, r5, r1
 800a84a:	f025 0503 	bic.w	r5, r5, #3
 800a84e:	3508      	adds	r5, #8
 800a850:	2d0c      	cmp	r5, #12
 800a852:	bf38      	it	cc
 800a854:	250c      	movcc	r5, #12
 800a856:	4638      	mov	r0, r7
 800a858:	4629      	mov	r1, r5
 800a85a:	f7ff ffa5 	bl	800a7a8 <sbrk_aligned>
 800a85e:	3001      	adds	r0, #1
 800a860:	d02b      	beq.n	800a8ba <_malloc_r+0xd2>
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	442b      	add	r3, r5
 800a866:	6023      	str	r3, [r4, #0]
 800a868:	e00e      	b.n	800a888 <_malloc_r+0xa0>
 800a86a:	6822      	ldr	r2, [r4, #0]
 800a86c:	1b52      	subs	r2, r2, r5
 800a86e:	d41e      	bmi.n	800a8ae <_malloc_r+0xc6>
 800a870:	2a0b      	cmp	r2, #11
 800a872:	d916      	bls.n	800a8a2 <_malloc_r+0xba>
 800a874:	1961      	adds	r1, r4, r5
 800a876:	42a3      	cmp	r3, r4
 800a878:	6025      	str	r5, [r4, #0]
 800a87a:	bf18      	it	ne
 800a87c:	6059      	strne	r1, [r3, #4]
 800a87e:	6863      	ldr	r3, [r4, #4]
 800a880:	bf08      	it	eq
 800a882:	6031      	streq	r1, [r6, #0]
 800a884:	5162      	str	r2, [r4, r5]
 800a886:	604b      	str	r3, [r1, #4]
 800a888:	4638      	mov	r0, r7
 800a88a:	f104 060b 	add.w	r6, r4, #11
 800a88e:	f000 fb4f 	bl	800af30 <__malloc_unlock>
 800a892:	f026 0607 	bic.w	r6, r6, #7
 800a896:	1d23      	adds	r3, r4, #4
 800a898:	1af2      	subs	r2, r6, r3
 800a89a:	d0b6      	beq.n	800a80a <_malloc_r+0x22>
 800a89c:	1b9b      	subs	r3, r3, r6
 800a89e:	50a3      	str	r3, [r4, r2]
 800a8a0:	e7b3      	b.n	800a80a <_malloc_r+0x22>
 800a8a2:	6862      	ldr	r2, [r4, #4]
 800a8a4:	42a3      	cmp	r3, r4
 800a8a6:	bf0c      	ite	eq
 800a8a8:	6032      	streq	r2, [r6, #0]
 800a8aa:	605a      	strne	r2, [r3, #4]
 800a8ac:	e7ec      	b.n	800a888 <_malloc_r+0xa0>
 800a8ae:	4623      	mov	r3, r4
 800a8b0:	6864      	ldr	r4, [r4, #4]
 800a8b2:	e7b2      	b.n	800a81a <_malloc_r+0x32>
 800a8b4:	4634      	mov	r4, r6
 800a8b6:	6876      	ldr	r6, [r6, #4]
 800a8b8:	e7b9      	b.n	800a82e <_malloc_r+0x46>
 800a8ba:	230c      	movs	r3, #12
 800a8bc:	4638      	mov	r0, r7
 800a8be:	603b      	str	r3, [r7, #0]
 800a8c0:	f000 fb36 	bl	800af30 <__malloc_unlock>
 800a8c4:	e7a1      	b.n	800a80a <_malloc_r+0x22>
 800a8c6:	6025      	str	r5, [r4, #0]
 800a8c8:	e7de      	b.n	800a888 <_malloc_r+0xa0>
 800a8ca:	bf00      	nop
 800a8cc:	20001150 	.word	0x20001150

0800a8d0 <__ssputs_r>:
 800a8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d4:	688e      	ldr	r6, [r1, #8]
 800a8d6:	4682      	mov	sl, r0
 800a8d8:	429e      	cmp	r6, r3
 800a8da:	460c      	mov	r4, r1
 800a8dc:	4690      	mov	r8, r2
 800a8de:	461f      	mov	r7, r3
 800a8e0:	d838      	bhi.n	800a954 <__ssputs_r+0x84>
 800a8e2:	898a      	ldrh	r2, [r1, #12]
 800a8e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8e8:	d032      	beq.n	800a950 <__ssputs_r+0x80>
 800a8ea:	6825      	ldr	r5, [r4, #0]
 800a8ec:	6909      	ldr	r1, [r1, #16]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	eba5 0901 	sub.w	r9, r5, r1
 800a8f4:	6965      	ldr	r5, [r4, #20]
 800a8f6:	444b      	add	r3, r9
 800a8f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a900:	106d      	asrs	r5, r5, #1
 800a902:	429d      	cmp	r5, r3
 800a904:	bf38      	it	cc
 800a906:	461d      	movcc	r5, r3
 800a908:	0553      	lsls	r3, r2, #21
 800a90a:	d531      	bpl.n	800a970 <__ssputs_r+0xa0>
 800a90c:	4629      	mov	r1, r5
 800a90e:	f7ff ff6b 	bl	800a7e8 <_malloc_r>
 800a912:	4606      	mov	r6, r0
 800a914:	b950      	cbnz	r0, 800a92c <__ssputs_r+0x5c>
 800a916:	230c      	movs	r3, #12
 800a918:	f04f 30ff 	mov.w	r0, #4294967295
 800a91c:	f8ca 3000 	str.w	r3, [sl]
 800a920:	89a3      	ldrh	r3, [r4, #12]
 800a922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a926:	81a3      	strh	r3, [r4, #12]
 800a928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a92c:	464a      	mov	r2, r9
 800a92e:	6921      	ldr	r1, [r4, #16]
 800a930:	f7ff feb2 	bl	800a698 <memcpy>
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a93a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a93e:	81a3      	strh	r3, [r4, #12]
 800a940:	6126      	str	r6, [r4, #16]
 800a942:	444e      	add	r6, r9
 800a944:	6026      	str	r6, [r4, #0]
 800a946:	463e      	mov	r6, r7
 800a948:	6165      	str	r5, [r4, #20]
 800a94a:	eba5 0509 	sub.w	r5, r5, r9
 800a94e:	60a5      	str	r5, [r4, #8]
 800a950:	42be      	cmp	r6, r7
 800a952:	d900      	bls.n	800a956 <__ssputs_r+0x86>
 800a954:	463e      	mov	r6, r7
 800a956:	4632      	mov	r2, r6
 800a958:	4641      	mov	r1, r8
 800a95a:	6820      	ldr	r0, [r4, #0]
 800a95c:	f000 fac8 	bl	800aef0 <memmove>
 800a960:	68a3      	ldr	r3, [r4, #8]
 800a962:	2000      	movs	r0, #0
 800a964:	1b9b      	subs	r3, r3, r6
 800a966:	60a3      	str	r3, [r4, #8]
 800a968:	6823      	ldr	r3, [r4, #0]
 800a96a:	4433      	add	r3, r6
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	e7db      	b.n	800a928 <__ssputs_r+0x58>
 800a970:	462a      	mov	r2, r5
 800a972:	f000 fae3 	bl	800af3c <_realloc_r>
 800a976:	4606      	mov	r6, r0
 800a978:	2800      	cmp	r0, #0
 800a97a:	d1e1      	bne.n	800a940 <__ssputs_r+0x70>
 800a97c:	4650      	mov	r0, sl
 800a97e:	6921      	ldr	r1, [r4, #16]
 800a980:	f7ff feca 	bl	800a718 <_free_r>
 800a984:	e7c7      	b.n	800a916 <__ssputs_r+0x46>
	...

0800a988 <_svfiprintf_r>:
 800a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	4698      	mov	r8, r3
 800a98e:	898b      	ldrh	r3, [r1, #12]
 800a990:	4607      	mov	r7, r0
 800a992:	061b      	lsls	r3, r3, #24
 800a994:	460d      	mov	r5, r1
 800a996:	4614      	mov	r4, r2
 800a998:	b09d      	sub	sp, #116	; 0x74
 800a99a:	d50e      	bpl.n	800a9ba <_svfiprintf_r+0x32>
 800a99c:	690b      	ldr	r3, [r1, #16]
 800a99e:	b963      	cbnz	r3, 800a9ba <_svfiprintf_r+0x32>
 800a9a0:	2140      	movs	r1, #64	; 0x40
 800a9a2:	f7ff ff21 	bl	800a7e8 <_malloc_r>
 800a9a6:	6028      	str	r0, [r5, #0]
 800a9a8:	6128      	str	r0, [r5, #16]
 800a9aa:	b920      	cbnz	r0, 800a9b6 <_svfiprintf_r+0x2e>
 800a9ac:	230c      	movs	r3, #12
 800a9ae:	603b      	str	r3, [r7, #0]
 800a9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b4:	e0d1      	b.n	800ab5a <_svfiprintf_r+0x1d2>
 800a9b6:	2340      	movs	r3, #64	; 0x40
 800a9b8:	616b      	str	r3, [r5, #20]
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a9be:	2320      	movs	r3, #32
 800a9c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9c4:	2330      	movs	r3, #48	; 0x30
 800a9c6:	f04f 0901 	mov.w	r9, #1
 800a9ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ab74 <_svfiprintf_r+0x1ec>
 800a9d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9d6:	4623      	mov	r3, r4
 800a9d8:	469a      	mov	sl, r3
 800a9da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9de:	b10a      	cbz	r2, 800a9e4 <_svfiprintf_r+0x5c>
 800a9e0:	2a25      	cmp	r2, #37	; 0x25
 800a9e2:	d1f9      	bne.n	800a9d8 <_svfiprintf_r+0x50>
 800a9e4:	ebba 0b04 	subs.w	fp, sl, r4
 800a9e8:	d00b      	beq.n	800aa02 <_svfiprintf_r+0x7a>
 800a9ea:	465b      	mov	r3, fp
 800a9ec:	4622      	mov	r2, r4
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	4638      	mov	r0, r7
 800a9f2:	f7ff ff6d 	bl	800a8d0 <__ssputs_r>
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	f000 80aa 	beq.w	800ab50 <_svfiprintf_r+0x1c8>
 800a9fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9fe:	445a      	add	r2, fp
 800aa00:	9209      	str	r2, [sp, #36]	; 0x24
 800aa02:	f89a 3000 	ldrb.w	r3, [sl]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f000 80a2 	beq.w	800ab50 <_svfiprintf_r+0x1c8>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa16:	f10a 0a01 	add.w	sl, sl, #1
 800aa1a:	9304      	str	r3, [sp, #16]
 800aa1c:	9307      	str	r3, [sp, #28]
 800aa1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa22:	931a      	str	r3, [sp, #104]	; 0x68
 800aa24:	4654      	mov	r4, sl
 800aa26:	2205      	movs	r2, #5
 800aa28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2c:	4851      	ldr	r0, [pc, #324]	; (800ab74 <_svfiprintf_r+0x1ec>)
 800aa2e:	f000 fa51 	bl	800aed4 <memchr>
 800aa32:	9a04      	ldr	r2, [sp, #16]
 800aa34:	b9d8      	cbnz	r0, 800aa6e <_svfiprintf_r+0xe6>
 800aa36:	06d0      	lsls	r0, r2, #27
 800aa38:	bf44      	itt	mi
 800aa3a:	2320      	movmi	r3, #32
 800aa3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa40:	0711      	lsls	r1, r2, #28
 800aa42:	bf44      	itt	mi
 800aa44:	232b      	movmi	r3, #43	; 0x2b
 800aa46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa4a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa4e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa50:	d015      	beq.n	800aa7e <_svfiprintf_r+0xf6>
 800aa52:	4654      	mov	r4, sl
 800aa54:	2000      	movs	r0, #0
 800aa56:	f04f 0c0a 	mov.w	ip, #10
 800aa5a:	9a07      	ldr	r2, [sp, #28]
 800aa5c:	4621      	mov	r1, r4
 800aa5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa62:	3b30      	subs	r3, #48	; 0x30
 800aa64:	2b09      	cmp	r3, #9
 800aa66:	d94e      	bls.n	800ab06 <_svfiprintf_r+0x17e>
 800aa68:	b1b0      	cbz	r0, 800aa98 <_svfiprintf_r+0x110>
 800aa6a:	9207      	str	r2, [sp, #28]
 800aa6c:	e014      	b.n	800aa98 <_svfiprintf_r+0x110>
 800aa6e:	eba0 0308 	sub.w	r3, r0, r8
 800aa72:	fa09 f303 	lsl.w	r3, r9, r3
 800aa76:	4313      	orrs	r3, r2
 800aa78:	46a2      	mov	sl, r4
 800aa7a:	9304      	str	r3, [sp, #16]
 800aa7c:	e7d2      	b.n	800aa24 <_svfiprintf_r+0x9c>
 800aa7e:	9b03      	ldr	r3, [sp, #12]
 800aa80:	1d19      	adds	r1, r3, #4
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	9103      	str	r1, [sp, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	bfbb      	ittet	lt
 800aa8a:	425b      	neglt	r3, r3
 800aa8c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa90:	9307      	strge	r3, [sp, #28]
 800aa92:	9307      	strlt	r3, [sp, #28]
 800aa94:	bfb8      	it	lt
 800aa96:	9204      	strlt	r2, [sp, #16]
 800aa98:	7823      	ldrb	r3, [r4, #0]
 800aa9a:	2b2e      	cmp	r3, #46	; 0x2e
 800aa9c:	d10c      	bne.n	800aab8 <_svfiprintf_r+0x130>
 800aa9e:	7863      	ldrb	r3, [r4, #1]
 800aaa0:	2b2a      	cmp	r3, #42	; 0x2a
 800aaa2:	d135      	bne.n	800ab10 <_svfiprintf_r+0x188>
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	3402      	adds	r4, #2
 800aaa8:	1d1a      	adds	r2, r3, #4
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	9203      	str	r2, [sp, #12]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	bfb8      	it	lt
 800aab2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aab6:	9305      	str	r3, [sp, #20]
 800aab8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ab78 <_svfiprintf_r+0x1f0>
 800aabc:	2203      	movs	r2, #3
 800aabe:	4650      	mov	r0, sl
 800aac0:	7821      	ldrb	r1, [r4, #0]
 800aac2:	f000 fa07 	bl	800aed4 <memchr>
 800aac6:	b140      	cbz	r0, 800aada <_svfiprintf_r+0x152>
 800aac8:	2340      	movs	r3, #64	; 0x40
 800aaca:	eba0 000a 	sub.w	r0, r0, sl
 800aace:	fa03 f000 	lsl.w	r0, r3, r0
 800aad2:	9b04      	ldr	r3, [sp, #16]
 800aad4:	3401      	adds	r4, #1
 800aad6:	4303      	orrs	r3, r0
 800aad8:	9304      	str	r3, [sp, #16]
 800aada:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aade:	2206      	movs	r2, #6
 800aae0:	4826      	ldr	r0, [pc, #152]	; (800ab7c <_svfiprintf_r+0x1f4>)
 800aae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aae6:	f000 f9f5 	bl	800aed4 <memchr>
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d038      	beq.n	800ab60 <_svfiprintf_r+0x1d8>
 800aaee:	4b24      	ldr	r3, [pc, #144]	; (800ab80 <_svfiprintf_r+0x1f8>)
 800aaf0:	bb1b      	cbnz	r3, 800ab3a <_svfiprintf_r+0x1b2>
 800aaf2:	9b03      	ldr	r3, [sp, #12]
 800aaf4:	3307      	adds	r3, #7
 800aaf6:	f023 0307 	bic.w	r3, r3, #7
 800aafa:	3308      	adds	r3, #8
 800aafc:	9303      	str	r3, [sp, #12]
 800aafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab00:	4433      	add	r3, r6
 800ab02:	9309      	str	r3, [sp, #36]	; 0x24
 800ab04:	e767      	b.n	800a9d6 <_svfiprintf_r+0x4e>
 800ab06:	460c      	mov	r4, r1
 800ab08:	2001      	movs	r0, #1
 800ab0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab0e:	e7a5      	b.n	800aa5c <_svfiprintf_r+0xd4>
 800ab10:	2300      	movs	r3, #0
 800ab12:	f04f 0c0a 	mov.w	ip, #10
 800ab16:	4619      	mov	r1, r3
 800ab18:	3401      	adds	r4, #1
 800ab1a:	9305      	str	r3, [sp, #20]
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab22:	3a30      	subs	r2, #48	; 0x30
 800ab24:	2a09      	cmp	r2, #9
 800ab26:	d903      	bls.n	800ab30 <_svfiprintf_r+0x1a8>
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d0c5      	beq.n	800aab8 <_svfiprintf_r+0x130>
 800ab2c:	9105      	str	r1, [sp, #20]
 800ab2e:	e7c3      	b.n	800aab8 <_svfiprintf_r+0x130>
 800ab30:	4604      	mov	r4, r0
 800ab32:	2301      	movs	r3, #1
 800ab34:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab38:	e7f0      	b.n	800ab1c <_svfiprintf_r+0x194>
 800ab3a:	ab03      	add	r3, sp, #12
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	462a      	mov	r2, r5
 800ab40:	4638      	mov	r0, r7
 800ab42:	4b10      	ldr	r3, [pc, #64]	; (800ab84 <_svfiprintf_r+0x1fc>)
 800ab44:	a904      	add	r1, sp, #16
 800ab46:	f3af 8000 	nop.w
 800ab4a:	1c42      	adds	r2, r0, #1
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	d1d6      	bne.n	800aafe <_svfiprintf_r+0x176>
 800ab50:	89ab      	ldrh	r3, [r5, #12]
 800ab52:	065b      	lsls	r3, r3, #25
 800ab54:	f53f af2c 	bmi.w	800a9b0 <_svfiprintf_r+0x28>
 800ab58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab5a:	b01d      	add	sp, #116	; 0x74
 800ab5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab60:	ab03      	add	r3, sp, #12
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	462a      	mov	r2, r5
 800ab66:	4638      	mov	r0, r7
 800ab68:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <_svfiprintf_r+0x1fc>)
 800ab6a:	a904      	add	r1, sp, #16
 800ab6c:	f000 f87c 	bl	800ac68 <_printf_i>
 800ab70:	e7eb      	b.n	800ab4a <_svfiprintf_r+0x1c2>
 800ab72:	bf00      	nop
 800ab74:	0800b570 	.word	0x0800b570
 800ab78:	0800b576 	.word	0x0800b576
 800ab7c:	0800b57a 	.word	0x0800b57a
 800ab80:	00000000 	.word	0x00000000
 800ab84:	0800a8d1 	.word	0x0800a8d1

0800ab88 <_printf_common>:
 800ab88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab8c:	4616      	mov	r6, r2
 800ab8e:	4699      	mov	r9, r3
 800ab90:	688a      	ldr	r2, [r1, #8]
 800ab92:	690b      	ldr	r3, [r1, #16]
 800ab94:	4607      	mov	r7, r0
 800ab96:	4293      	cmp	r3, r2
 800ab98:	bfb8      	it	lt
 800ab9a:	4613      	movlt	r3, r2
 800ab9c:	6033      	str	r3, [r6, #0]
 800ab9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aba2:	460c      	mov	r4, r1
 800aba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aba8:	b10a      	cbz	r2, 800abae <_printf_common+0x26>
 800abaa:	3301      	adds	r3, #1
 800abac:	6033      	str	r3, [r6, #0]
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	0699      	lsls	r1, r3, #26
 800abb2:	bf42      	ittt	mi
 800abb4:	6833      	ldrmi	r3, [r6, #0]
 800abb6:	3302      	addmi	r3, #2
 800abb8:	6033      	strmi	r3, [r6, #0]
 800abba:	6825      	ldr	r5, [r4, #0]
 800abbc:	f015 0506 	ands.w	r5, r5, #6
 800abc0:	d106      	bne.n	800abd0 <_printf_common+0x48>
 800abc2:	f104 0a19 	add.w	sl, r4, #25
 800abc6:	68e3      	ldr	r3, [r4, #12]
 800abc8:	6832      	ldr	r2, [r6, #0]
 800abca:	1a9b      	subs	r3, r3, r2
 800abcc:	42ab      	cmp	r3, r5
 800abce:	dc28      	bgt.n	800ac22 <_printf_common+0x9a>
 800abd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abd4:	1e13      	subs	r3, r2, #0
 800abd6:	6822      	ldr	r2, [r4, #0]
 800abd8:	bf18      	it	ne
 800abda:	2301      	movne	r3, #1
 800abdc:	0692      	lsls	r2, r2, #26
 800abde:	d42d      	bmi.n	800ac3c <_printf_common+0xb4>
 800abe0:	4649      	mov	r1, r9
 800abe2:	4638      	mov	r0, r7
 800abe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abe8:	47c0      	blx	r8
 800abea:	3001      	adds	r0, #1
 800abec:	d020      	beq.n	800ac30 <_printf_common+0xa8>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	68e5      	ldr	r5, [r4, #12]
 800abf2:	f003 0306 	and.w	r3, r3, #6
 800abf6:	2b04      	cmp	r3, #4
 800abf8:	bf18      	it	ne
 800abfa:	2500      	movne	r5, #0
 800abfc:	6832      	ldr	r2, [r6, #0]
 800abfe:	f04f 0600 	mov.w	r6, #0
 800ac02:	68a3      	ldr	r3, [r4, #8]
 800ac04:	bf08      	it	eq
 800ac06:	1aad      	subeq	r5, r5, r2
 800ac08:	6922      	ldr	r2, [r4, #16]
 800ac0a:	bf08      	it	eq
 800ac0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac10:	4293      	cmp	r3, r2
 800ac12:	bfc4      	itt	gt
 800ac14:	1a9b      	subgt	r3, r3, r2
 800ac16:	18ed      	addgt	r5, r5, r3
 800ac18:	341a      	adds	r4, #26
 800ac1a:	42b5      	cmp	r5, r6
 800ac1c:	d11a      	bne.n	800ac54 <_printf_common+0xcc>
 800ac1e:	2000      	movs	r0, #0
 800ac20:	e008      	b.n	800ac34 <_printf_common+0xac>
 800ac22:	2301      	movs	r3, #1
 800ac24:	4652      	mov	r2, sl
 800ac26:	4649      	mov	r1, r9
 800ac28:	4638      	mov	r0, r7
 800ac2a:	47c0      	blx	r8
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	d103      	bne.n	800ac38 <_printf_common+0xb0>
 800ac30:	f04f 30ff 	mov.w	r0, #4294967295
 800ac34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac38:	3501      	adds	r5, #1
 800ac3a:	e7c4      	b.n	800abc6 <_printf_common+0x3e>
 800ac3c:	2030      	movs	r0, #48	; 0x30
 800ac3e:	18e1      	adds	r1, r4, r3
 800ac40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac4a:	4422      	add	r2, r4
 800ac4c:	3302      	adds	r3, #2
 800ac4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac52:	e7c5      	b.n	800abe0 <_printf_common+0x58>
 800ac54:	2301      	movs	r3, #1
 800ac56:	4622      	mov	r2, r4
 800ac58:	4649      	mov	r1, r9
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	47c0      	blx	r8
 800ac5e:	3001      	adds	r0, #1
 800ac60:	d0e6      	beq.n	800ac30 <_printf_common+0xa8>
 800ac62:	3601      	adds	r6, #1
 800ac64:	e7d9      	b.n	800ac1a <_printf_common+0x92>
	...

0800ac68 <_printf_i>:
 800ac68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac6c:	7e0f      	ldrb	r7, [r1, #24]
 800ac6e:	4691      	mov	r9, r2
 800ac70:	2f78      	cmp	r7, #120	; 0x78
 800ac72:	4680      	mov	r8, r0
 800ac74:	460c      	mov	r4, r1
 800ac76:	469a      	mov	sl, r3
 800ac78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac7e:	d807      	bhi.n	800ac90 <_printf_i+0x28>
 800ac80:	2f62      	cmp	r7, #98	; 0x62
 800ac82:	d80a      	bhi.n	800ac9a <_printf_i+0x32>
 800ac84:	2f00      	cmp	r7, #0
 800ac86:	f000 80d9 	beq.w	800ae3c <_printf_i+0x1d4>
 800ac8a:	2f58      	cmp	r7, #88	; 0x58
 800ac8c:	f000 80a4 	beq.w	800add8 <_printf_i+0x170>
 800ac90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac98:	e03a      	b.n	800ad10 <_printf_i+0xa8>
 800ac9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac9e:	2b15      	cmp	r3, #21
 800aca0:	d8f6      	bhi.n	800ac90 <_printf_i+0x28>
 800aca2:	a101      	add	r1, pc, #4	; (adr r1, 800aca8 <_printf_i+0x40>)
 800aca4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aca8:	0800ad01 	.word	0x0800ad01
 800acac:	0800ad15 	.word	0x0800ad15
 800acb0:	0800ac91 	.word	0x0800ac91
 800acb4:	0800ac91 	.word	0x0800ac91
 800acb8:	0800ac91 	.word	0x0800ac91
 800acbc:	0800ac91 	.word	0x0800ac91
 800acc0:	0800ad15 	.word	0x0800ad15
 800acc4:	0800ac91 	.word	0x0800ac91
 800acc8:	0800ac91 	.word	0x0800ac91
 800accc:	0800ac91 	.word	0x0800ac91
 800acd0:	0800ac91 	.word	0x0800ac91
 800acd4:	0800ae23 	.word	0x0800ae23
 800acd8:	0800ad45 	.word	0x0800ad45
 800acdc:	0800ae05 	.word	0x0800ae05
 800ace0:	0800ac91 	.word	0x0800ac91
 800ace4:	0800ac91 	.word	0x0800ac91
 800ace8:	0800ae45 	.word	0x0800ae45
 800acec:	0800ac91 	.word	0x0800ac91
 800acf0:	0800ad45 	.word	0x0800ad45
 800acf4:	0800ac91 	.word	0x0800ac91
 800acf8:	0800ac91 	.word	0x0800ac91
 800acfc:	0800ae0d 	.word	0x0800ae0d
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	1d1a      	adds	r2, r3, #4
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	602a      	str	r2, [r5, #0]
 800ad08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad10:	2301      	movs	r3, #1
 800ad12:	e0a4      	b.n	800ae5e <_printf_i+0x1f6>
 800ad14:	6820      	ldr	r0, [r4, #0]
 800ad16:	6829      	ldr	r1, [r5, #0]
 800ad18:	0606      	lsls	r6, r0, #24
 800ad1a:	f101 0304 	add.w	r3, r1, #4
 800ad1e:	d50a      	bpl.n	800ad36 <_printf_i+0xce>
 800ad20:	680e      	ldr	r6, [r1, #0]
 800ad22:	602b      	str	r3, [r5, #0]
 800ad24:	2e00      	cmp	r6, #0
 800ad26:	da03      	bge.n	800ad30 <_printf_i+0xc8>
 800ad28:	232d      	movs	r3, #45	; 0x2d
 800ad2a:	4276      	negs	r6, r6
 800ad2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad30:	230a      	movs	r3, #10
 800ad32:	485e      	ldr	r0, [pc, #376]	; (800aeac <_printf_i+0x244>)
 800ad34:	e019      	b.n	800ad6a <_printf_i+0x102>
 800ad36:	680e      	ldr	r6, [r1, #0]
 800ad38:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad3c:	602b      	str	r3, [r5, #0]
 800ad3e:	bf18      	it	ne
 800ad40:	b236      	sxthne	r6, r6
 800ad42:	e7ef      	b.n	800ad24 <_printf_i+0xbc>
 800ad44:	682b      	ldr	r3, [r5, #0]
 800ad46:	6820      	ldr	r0, [r4, #0]
 800ad48:	1d19      	adds	r1, r3, #4
 800ad4a:	6029      	str	r1, [r5, #0]
 800ad4c:	0601      	lsls	r1, r0, #24
 800ad4e:	d501      	bpl.n	800ad54 <_printf_i+0xec>
 800ad50:	681e      	ldr	r6, [r3, #0]
 800ad52:	e002      	b.n	800ad5a <_printf_i+0xf2>
 800ad54:	0646      	lsls	r6, r0, #25
 800ad56:	d5fb      	bpl.n	800ad50 <_printf_i+0xe8>
 800ad58:	881e      	ldrh	r6, [r3, #0]
 800ad5a:	2f6f      	cmp	r7, #111	; 0x6f
 800ad5c:	bf0c      	ite	eq
 800ad5e:	2308      	moveq	r3, #8
 800ad60:	230a      	movne	r3, #10
 800ad62:	4852      	ldr	r0, [pc, #328]	; (800aeac <_printf_i+0x244>)
 800ad64:	2100      	movs	r1, #0
 800ad66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad6a:	6865      	ldr	r5, [r4, #4]
 800ad6c:	2d00      	cmp	r5, #0
 800ad6e:	bfa8      	it	ge
 800ad70:	6821      	ldrge	r1, [r4, #0]
 800ad72:	60a5      	str	r5, [r4, #8]
 800ad74:	bfa4      	itt	ge
 800ad76:	f021 0104 	bicge.w	r1, r1, #4
 800ad7a:	6021      	strge	r1, [r4, #0]
 800ad7c:	b90e      	cbnz	r6, 800ad82 <_printf_i+0x11a>
 800ad7e:	2d00      	cmp	r5, #0
 800ad80:	d04d      	beq.n	800ae1e <_printf_i+0x1b6>
 800ad82:	4615      	mov	r5, r2
 800ad84:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad88:	fb03 6711 	mls	r7, r3, r1, r6
 800ad8c:	5dc7      	ldrb	r7, [r0, r7]
 800ad8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad92:	4637      	mov	r7, r6
 800ad94:	42bb      	cmp	r3, r7
 800ad96:	460e      	mov	r6, r1
 800ad98:	d9f4      	bls.n	800ad84 <_printf_i+0x11c>
 800ad9a:	2b08      	cmp	r3, #8
 800ad9c:	d10b      	bne.n	800adb6 <_printf_i+0x14e>
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	07de      	lsls	r6, r3, #31
 800ada2:	d508      	bpl.n	800adb6 <_printf_i+0x14e>
 800ada4:	6923      	ldr	r3, [r4, #16]
 800ada6:	6861      	ldr	r1, [r4, #4]
 800ada8:	4299      	cmp	r1, r3
 800adaa:	bfde      	ittt	le
 800adac:	2330      	movle	r3, #48	; 0x30
 800adae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800adb2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800adb6:	1b52      	subs	r2, r2, r5
 800adb8:	6122      	str	r2, [r4, #16]
 800adba:	464b      	mov	r3, r9
 800adbc:	4621      	mov	r1, r4
 800adbe:	4640      	mov	r0, r8
 800adc0:	f8cd a000 	str.w	sl, [sp]
 800adc4:	aa03      	add	r2, sp, #12
 800adc6:	f7ff fedf 	bl	800ab88 <_printf_common>
 800adca:	3001      	adds	r0, #1
 800adcc:	d14c      	bne.n	800ae68 <_printf_i+0x200>
 800adce:	f04f 30ff 	mov.w	r0, #4294967295
 800add2:	b004      	add	sp, #16
 800add4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add8:	4834      	ldr	r0, [pc, #208]	; (800aeac <_printf_i+0x244>)
 800adda:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800adde:	6829      	ldr	r1, [r5, #0]
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	f851 6b04 	ldr.w	r6, [r1], #4
 800ade6:	6029      	str	r1, [r5, #0]
 800ade8:	061d      	lsls	r5, r3, #24
 800adea:	d514      	bpl.n	800ae16 <_printf_i+0x1ae>
 800adec:	07df      	lsls	r7, r3, #31
 800adee:	bf44      	itt	mi
 800adf0:	f043 0320 	orrmi.w	r3, r3, #32
 800adf4:	6023      	strmi	r3, [r4, #0]
 800adf6:	b91e      	cbnz	r6, 800ae00 <_printf_i+0x198>
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	f023 0320 	bic.w	r3, r3, #32
 800adfe:	6023      	str	r3, [r4, #0]
 800ae00:	2310      	movs	r3, #16
 800ae02:	e7af      	b.n	800ad64 <_printf_i+0xfc>
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	f043 0320 	orr.w	r3, r3, #32
 800ae0a:	6023      	str	r3, [r4, #0]
 800ae0c:	2378      	movs	r3, #120	; 0x78
 800ae0e:	4828      	ldr	r0, [pc, #160]	; (800aeb0 <_printf_i+0x248>)
 800ae10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae14:	e7e3      	b.n	800adde <_printf_i+0x176>
 800ae16:	0659      	lsls	r1, r3, #25
 800ae18:	bf48      	it	mi
 800ae1a:	b2b6      	uxthmi	r6, r6
 800ae1c:	e7e6      	b.n	800adec <_printf_i+0x184>
 800ae1e:	4615      	mov	r5, r2
 800ae20:	e7bb      	b.n	800ad9a <_printf_i+0x132>
 800ae22:	682b      	ldr	r3, [r5, #0]
 800ae24:	6826      	ldr	r6, [r4, #0]
 800ae26:	1d18      	adds	r0, r3, #4
 800ae28:	6961      	ldr	r1, [r4, #20]
 800ae2a:	6028      	str	r0, [r5, #0]
 800ae2c:	0635      	lsls	r5, r6, #24
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	d501      	bpl.n	800ae36 <_printf_i+0x1ce>
 800ae32:	6019      	str	r1, [r3, #0]
 800ae34:	e002      	b.n	800ae3c <_printf_i+0x1d4>
 800ae36:	0670      	lsls	r0, r6, #25
 800ae38:	d5fb      	bpl.n	800ae32 <_printf_i+0x1ca>
 800ae3a:	8019      	strh	r1, [r3, #0]
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4615      	mov	r5, r2
 800ae40:	6123      	str	r3, [r4, #16]
 800ae42:	e7ba      	b.n	800adba <_printf_i+0x152>
 800ae44:	682b      	ldr	r3, [r5, #0]
 800ae46:	2100      	movs	r1, #0
 800ae48:	1d1a      	adds	r2, r3, #4
 800ae4a:	602a      	str	r2, [r5, #0]
 800ae4c:	681d      	ldr	r5, [r3, #0]
 800ae4e:	6862      	ldr	r2, [r4, #4]
 800ae50:	4628      	mov	r0, r5
 800ae52:	f000 f83f 	bl	800aed4 <memchr>
 800ae56:	b108      	cbz	r0, 800ae5c <_printf_i+0x1f4>
 800ae58:	1b40      	subs	r0, r0, r5
 800ae5a:	6060      	str	r0, [r4, #4]
 800ae5c:	6863      	ldr	r3, [r4, #4]
 800ae5e:	6123      	str	r3, [r4, #16]
 800ae60:	2300      	movs	r3, #0
 800ae62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae66:	e7a8      	b.n	800adba <_printf_i+0x152>
 800ae68:	462a      	mov	r2, r5
 800ae6a:	4649      	mov	r1, r9
 800ae6c:	4640      	mov	r0, r8
 800ae6e:	6923      	ldr	r3, [r4, #16]
 800ae70:	47d0      	blx	sl
 800ae72:	3001      	adds	r0, #1
 800ae74:	d0ab      	beq.n	800adce <_printf_i+0x166>
 800ae76:	6823      	ldr	r3, [r4, #0]
 800ae78:	079b      	lsls	r3, r3, #30
 800ae7a:	d413      	bmi.n	800aea4 <_printf_i+0x23c>
 800ae7c:	68e0      	ldr	r0, [r4, #12]
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	4298      	cmp	r0, r3
 800ae82:	bfb8      	it	lt
 800ae84:	4618      	movlt	r0, r3
 800ae86:	e7a4      	b.n	800add2 <_printf_i+0x16a>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	4632      	mov	r2, r6
 800ae8c:	4649      	mov	r1, r9
 800ae8e:	4640      	mov	r0, r8
 800ae90:	47d0      	blx	sl
 800ae92:	3001      	adds	r0, #1
 800ae94:	d09b      	beq.n	800adce <_printf_i+0x166>
 800ae96:	3501      	adds	r5, #1
 800ae98:	68e3      	ldr	r3, [r4, #12]
 800ae9a:	9903      	ldr	r1, [sp, #12]
 800ae9c:	1a5b      	subs	r3, r3, r1
 800ae9e:	42ab      	cmp	r3, r5
 800aea0:	dcf2      	bgt.n	800ae88 <_printf_i+0x220>
 800aea2:	e7eb      	b.n	800ae7c <_printf_i+0x214>
 800aea4:	2500      	movs	r5, #0
 800aea6:	f104 0619 	add.w	r6, r4, #25
 800aeaa:	e7f5      	b.n	800ae98 <_printf_i+0x230>
 800aeac:	0800b581 	.word	0x0800b581
 800aeb0:	0800b592 	.word	0x0800b592

0800aeb4 <_sbrk_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	4d05      	ldr	r5, [pc, #20]	; (800aed0 <_sbrk_r+0x1c>)
 800aeba:	4604      	mov	r4, r0
 800aebc:	4608      	mov	r0, r1
 800aebe:	602b      	str	r3, [r5, #0]
 800aec0:	f7f6 fc16 	bl	80016f0 <_sbrk>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d102      	bne.n	800aece <_sbrk_r+0x1a>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	b103      	cbz	r3, 800aece <_sbrk_r+0x1a>
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	bd38      	pop	{r3, r4, r5, pc}
 800aed0:	20001158 	.word	0x20001158

0800aed4 <memchr>:
 800aed4:	4603      	mov	r3, r0
 800aed6:	b510      	push	{r4, lr}
 800aed8:	b2c9      	uxtb	r1, r1
 800aeda:	4402      	add	r2, r0
 800aedc:	4293      	cmp	r3, r2
 800aede:	4618      	mov	r0, r3
 800aee0:	d101      	bne.n	800aee6 <memchr+0x12>
 800aee2:	2000      	movs	r0, #0
 800aee4:	e003      	b.n	800aeee <memchr+0x1a>
 800aee6:	7804      	ldrb	r4, [r0, #0]
 800aee8:	3301      	adds	r3, #1
 800aeea:	428c      	cmp	r4, r1
 800aeec:	d1f6      	bne.n	800aedc <memchr+0x8>
 800aeee:	bd10      	pop	{r4, pc}

0800aef0 <memmove>:
 800aef0:	4288      	cmp	r0, r1
 800aef2:	b510      	push	{r4, lr}
 800aef4:	eb01 0402 	add.w	r4, r1, r2
 800aef8:	d902      	bls.n	800af00 <memmove+0x10>
 800aefa:	4284      	cmp	r4, r0
 800aefc:	4623      	mov	r3, r4
 800aefe:	d807      	bhi.n	800af10 <memmove+0x20>
 800af00:	1e43      	subs	r3, r0, #1
 800af02:	42a1      	cmp	r1, r4
 800af04:	d008      	beq.n	800af18 <memmove+0x28>
 800af06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af0e:	e7f8      	b.n	800af02 <memmove+0x12>
 800af10:	4601      	mov	r1, r0
 800af12:	4402      	add	r2, r0
 800af14:	428a      	cmp	r2, r1
 800af16:	d100      	bne.n	800af1a <memmove+0x2a>
 800af18:	bd10      	pop	{r4, pc}
 800af1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af22:	e7f7      	b.n	800af14 <memmove+0x24>

0800af24 <__malloc_lock>:
 800af24:	4801      	ldr	r0, [pc, #4]	; (800af2c <__malloc_lock+0x8>)
 800af26:	f7ff bbf5 	b.w	800a714 <__retarget_lock_acquire_recursive>
 800af2a:	bf00      	nop
 800af2c:	2000114c 	.word	0x2000114c

0800af30 <__malloc_unlock>:
 800af30:	4801      	ldr	r0, [pc, #4]	; (800af38 <__malloc_unlock+0x8>)
 800af32:	f7ff bbf0 	b.w	800a716 <__retarget_lock_release_recursive>
 800af36:	bf00      	nop
 800af38:	2000114c 	.word	0x2000114c

0800af3c <_realloc_r>:
 800af3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af40:	4680      	mov	r8, r0
 800af42:	4614      	mov	r4, r2
 800af44:	460e      	mov	r6, r1
 800af46:	b921      	cbnz	r1, 800af52 <_realloc_r+0x16>
 800af48:	4611      	mov	r1, r2
 800af4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af4e:	f7ff bc4b 	b.w	800a7e8 <_malloc_r>
 800af52:	b92a      	cbnz	r2, 800af60 <_realloc_r+0x24>
 800af54:	f7ff fbe0 	bl	800a718 <_free_r>
 800af58:	4625      	mov	r5, r4
 800af5a:	4628      	mov	r0, r5
 800af5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af60:	f000 f81b 	bl	800af9a <_malloc_usable_size_r>
 800af64:	4284      	cmp	r4, r0
 800af66:	4607      	mov	r7, r0
 800af68:	d802      	bhi.n	800af70 <_realloc_r+0x34>
 800af6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af6e:	d812      	bhi.n	800af96 <_realloc_r+0x5a>
 800af70:	4621      	mov	r1, r4
 800af72:	4640      	mov	r0, r8
 800af74:	f7ff fc38 	bl	800a7e8 <_malloc_r>
 800af78:	4605      	mov	r5, r0
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d0ed      	beq.n	800af5a <_realloc_r+0x1e>
 800af7e:	42bc      	cmp	r4, r7
 800af80:	4622      	mov	r2, r4
 800af82:	4631      	mov	r1, r6
 800af84:	bf28      	it	cs
 800af86:	463a      	movcs	r2, r7
 800af88:	f7ff fb86 	bl	800a698 <memcpy>
 800af8c:	4631      	mov	r1, r6
 800af8e:	4640      	mov	r0, r8
 800af90:	f7ff fbc2 	bl	800a718 <_free_r>
 800af94:	e7e1      	b.n	800af5a <_realloc_r+0x1e>
 800af96:	4635      	mov	r5, r6
 800af98:	e7df      	b.n	800af5a <_realloc_r+0x1e>

0800af9a <_malloc_usable_size_r>:
 800af9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af9e:	1f18      	subs	r0, r3, #4
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	bfbc      	itt	lt
 800afa4:	580b      	ldrlt	r3, [r1, r0]
 800afa6:	18c0      	addlt	r0, r0, r3
 800afa8:	4770      	bx	lr
	...

0800afac <_init>:
 800afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afae:	bf00      	nop
 800afb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afb2:	bc08      	pop	{r3}
 800afb4:	469e      	mov	lr, r3
 800afb6:	4770      	bx	lr

0800afb8 <_fini>:
 800afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afba:	bf00      	nop
 800afbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afbe:	bc08      	pop	{r3}
 800afc0:	469e      	mov	lr, r3
 800afc2:	4770      	bx	lr
