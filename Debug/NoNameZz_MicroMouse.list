
NoNameZz_MicroMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007be8  08007be8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007be8  08007be8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007be8  08007be8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007be8  08007be8  00017be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bec  08007bec  00017bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c54  2000000c  08007bfc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c60  08007bfc  00020c60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c04b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219f  00000000  00000000  0002c080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002e220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  0002edf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018688  00000000  00000000  0002f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea48  00000000  00000000  00047f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd3e  00000000  00000000  000569b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e36ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a4  00000000  00000000  000e3740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007b90 	.word	0x08007b90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08007b90 	.word	0x08007b90

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_frsub>:
 8000a90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	e002      	b.n	8000a9c <__addsf3>
 8000a96:	bf00      	nop

08000a98 <__aeabi_fsub>:
 8000a98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a9c <__addsf3>:
 8000a9c:	0042      	lsls	r2, r0, #1
 8000a9e:	bf1f      	itttt	ne
 8000aa0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa4:	ea92 0f03 	teqne	r2, r3
 8000aa8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab0:	d06a      	beq.n	8000b88 <__addsf3+0xec>
 8000ab2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ab6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aba:	bfc1      	itttt	gt
 8000abc:	18d2      	addgt	r2, r2, r3
 8000abe:	4041      	eorgt	r1, r0
 8000ac0:	4048      	eorgt	r0, r1
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	bfb8      	it	lt
 8000ac6:	425b      	neglt	r3, r3
 8000ac8:	2b19      	cmp	r3, #25
 8000aca:	bf88      	it	hi
 8000acc:	4770      	bxhi	lr
 8000ace:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ae6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aea:	bf18      	it	ne
 8000aec:	4249      	negne	r1, r1
 8000aee:	ea92 0f03 	teq	r2, r3
 8000af2:	d03f      	beq.n	8000b74 <__addsf3+0xd8>
 8000af4:	f1a2 0201 	sub.w	r2, r2, #1
 8000af8:	fa41 fc03 	asr.w	ip, r1, r3
 8000afc:	eb10 000c 	adds.w	r0, r0, ip
 8000b00:	f1c3 0320 	rsb	r3, r3, #32
 8000b04:	fa01 f103 	lsl.w	r1, r1, r3
 8000b08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0c:	d502      	bpl.n	8000b14 <__addsf3+0x78>
 8000b0e:	4249      	negs	r1, r1
 8000b10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b18:	d313      	bcc.n	8000b42 <__addsf3+0xa6>
 8000b1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b1e:	d306      	bcc.n	8000b2e <__addsf3+0x92>
 8000b20:	0840      	lsrs	r0, r0, #1
 8000b22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b26:	f102 0201 	add.w	r2, r2, #1
 8000b2a:	2afe      	cmp	r2, #254	; 0xfe
 8000b2c:	d251      	bcs.n	8000bd2 <__addsf3+0x136>
 8000b2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b36:	bf08      	it	eq
 8000b38:	f020 0001 	biceq.w	r0, r0, #1
 8000b3c:	ea40 0003 	orr.w	r0, r0, r3
 8000b40:	4770      	bx	lr
 8000b42:	0049      	lsls	r1, r1, #1
 8000b44:	eb40 0000 	adc.w	r0, r0, r0
 8000b48:	3a01      	subs	r2, #1
 8000b4a:	bf28      	it	cs
 8000b4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b50:	d2ed      	bcs.n	8000b2e <__addsf3+0x92>
 8000b52:	fab0 fc80 	clz	ip, r0
 8000b56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b62:	bfaa      	itet	ge
 8000b64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b68:	4252      	neglt	r2, r2
 8000b6a:	4318      	orrge	r0, r3
 8000b6c:	bfbc      	itt	lt
 8000b6e:	40d0      	lsrlt	r0, r2
 8000b70:	4318      	orrlt	r0, r3
 8000b72:	4770      	bx	lr
 8000b74:	f092 0f00 	teq	r2, #0
 8000b78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b7c:	bf06      	itte	eq
 8000b7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b82:	3201      	addeq	r2, #1
 8000b84:	3b01      	subne	r3, #1
 8000b86:	e7b5      	b.n	8000af4 <__addsf3+0x58>
 8000b88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b90:	bf18      	it	ne
 8000b92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b96:	d021      	beq.n	8000bdc <__addsf3+0x140>
 8000b98:	ea92 0f03 	teq	r2, r3
 8000b9c:	d004      	beq.n	8000ba8 <__addsf3+0x10c>
 8000b9e:	f092 0f00 	teq	r2, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	4608      	moveq	r0, r1
 8000ba6:	4770      	bx	lr
 8000ba8:	ea90 0f01 	teq	r0, r1
 8000bac:	bf1c      	itt	ne
 8000bae:	2000      	movne	r0, #0
 8000bb0:	4770      	bxne	lr
 8000bb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bb6:	d104      	bne.n	8000bc2 <__addsf3+0x126>
 8000bb8:	0040      	lsls	r0, r0, #1
 8000bba:	bf28      	it	cs
 8000bbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc0:	4770      	bx	lr
 8000bc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bc6:	bf3c      	itt	cc
 8000bc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bxcc	lr
 8000bce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bda:	4770      	bx	lr
 8000bdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be0:	bf16      	itet	ne
 8000be2:	4608      	movne	r0, r1
 8000be4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be8:	4601      	movne	r1, r0
 8000bea:	0242      	lsls	r2, r0, #9
 8000bec:	bf06      	itte	eq
 8000bee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf2:	ea90 0f01 	teqeq	r0, r1
 8000bf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_ui2f>:
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e004      	b.n	8000c0c <__aeabi_i2f+0x8>
 8000c02:	bf00      	nop

08000c04 <__aeabi_i2f>:
 8000c04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c08:	bf48      	it	mi
 8000c0a:	4240      	negmi	r0, r0
 8000c0c:	ea5f 0c00 	movs.w	ip, r0
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c18:	4601      	mov	r1, r0
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	e01c      	b.n	8000c5a <__aeabi_l2f+0x2a>

08000c20 <__aeabi_ul2f>:
 8000c20:	ea50 0201 	orrs.w	r2, r0, r1
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e00a      	b.n	8000c44 <__aeabi_l2f+0x14>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_l2f>:
 8000c30:	ea50 0201 	orrs.w	r2, r0, r1
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c3c:	d502      	bpl.n	8000c44 <__aeabi_l2f+0x14>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	ea5f 0c01 	movs.w	ip, r1
 8000c48:	bf02      	ittt	eq
 8000c4a:	4684      	moveq	ip, r0
 8000c4c:	4601      	moveq	r1, r0
 8000c4e:	2000      	moveq	r0, #0
 8000c50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c54:	bf08      	it	eq
 8000c56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c5e:	fabc f28c 	clz	r2, ip
 8000c62:	3a08      	subs	r2, #8
 8000c64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c68:	db10      	blt.n	8000c8c <__aeabi_l2f+0x5c>
 8000c6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6e:	4463      	add	r3, ip
 8000c70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c74:	f1c2 0220 	rsb	r2, r2, #32
 8000c78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c80:	eb43 0002 	adc.w	r0, r3, r2
 8000c84:	bf08      	it	eq
 8000c86:	f020 0001 	biceq.w	r0, r0, #1
 8000c8a:	4770      	bx	lr
 8000c8c:	f102 0220 	add.w	r2, r2, #32
 8000c90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c94:	f1c2 0220 	rsb	r2, r2, #32
 8000c98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca0:	eb43 0002 	adc.w	r0, r3, r2
 8000ca4:	bf08      	it	eq
 8000ca6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000caa:	4770      	bx	lr

08000cac <__gesf2>:
 8000cac:	f04f 3cff 	mov.w	ip, #4294967295
 8000cb0:	e006      	b.n	8000cc0 <__cmpsf2+0x4>
 8000cb2:	bf00      	nop

08000cb4 <__lesf2>:
 8000cb4:	f04f 0c01 	mov.w	ip, #1
 8000cb8:	e002      	b.n	8000cc0 <__cmpsf2+0x4>
 8000cba:	bf00      	nop

08000cbc <__cmpsf2>:
 8000cbc:	f04f 0c01 	mov.w	ip, #1
 8000cc0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cc4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d011      	beq.n	8000cfc <__cmpsf2+0x40>
 8000cd8:	b001      	add	sp, #4
 8000cda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cde:	bf18      	it	ne
 8000ce0:	ea90 0f01 	teqne	r0, r1
 8000ce4:	bf58      	it	pl
 8000ce6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cea:	bf88      	it	hi
 8000cec:	17c8      	asrhi	r0, r1, #31
 8000cee:	bf38      	it	cc
 8000cf0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cf4:	bf18      	it	ne
 8000cf6:	f040 0001 	orrne.w	r0, r0, #1
 8000cfa:	4770      	bx	lr
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	d102      	bne.n	8000d08 <__cmpsf2+0x4c>
 8000d02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d06:	d105      	bne.n	8000d14 <__cmpsf2+0x58>
 8000d08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d0c:	d1e4      	bne.n	8000cd8 <__cmpsf2+0x1c>
 8000d0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d12:	d0e1      	beq.n	8000cd8 <__cmpsf2+0x1c>
 8000d14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <__aeabi_cfrcmple>:
 8000d1c:	4684      	mov	ip, r0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	4661      	mov	r1, ip
 8000d22:	e7ff      	b.n	8000d24 <__aeabi_cfcmpeq>

08000d24 <__aeabi_cfcmpeq>:
 8000d24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d26:	f7ff ffc9 	bl	8000cbc <__cmpsf2>
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	bf48      	it	mi
 8000d2e:	f110 0f00 	cmnmi.w	r0, #0
 8000d32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d34 <__aeabi_fcmpeq>:
 8000d34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d38:	f7ff fff4 	bl	8000d24 <__aeabi_cfcmpeq>
 8000d3c:	bf0c      	ite	eq
 8000d3e:	2001      	moveq	r0, #1
 8000d40:	2000      	movne	r0, #0
 8000d42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d46:	bf00      	nop

08000d48 <__aeabi_fcmplt>:
 8000d48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d4c:	f7ff ffea 	bl	8000d24 <__aeabi_cfcmpeq>
 8000d50:	bf34      	ite	cc
 8000d52:	2001      	movcc	r0, #1
 8000d54:	2000      	movcs	r0, #0
 8000d56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5a:	bf00      	nop

08000d5c <__aeabi_fcmple>:
 8000d5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d60:	f7ff ffe0 	bl	8000d24 <__aeabi_cfcmpeq>
 8000d64:	bf94      	ite	ls
 8000d66:	2001      	movls	r0, #1
 8000d68:	2000      	movhi	r0, #0
 8000d6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6e:	bf00      	nop

08000d70 <__aeabi_fcmpge>:
 8000d70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d74:	f7ff ffd2 	bl	8000d1c <__aeabi_cfrcmple>
 8000d78:	bf94      	ite	ls
 8000d7a:	2001      	movls	r0, #1
 8000d7c:	2000      	movhi	r0, #0
 8000d7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d82:	bf00      	nop

08000d84 <__aeabi_fcmpgt>:
 8000d84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d88:	f7ff ffc8 	bl	8000d1c <__aeabi_cfrcmple>
 8000d8c:	bf34      	ite	cc
 8000d8e:	2001      	movcc	r0, #1
 8000d90:	2000      	movcs	r0, #0
 8000d92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d96:	bf00      	nop

08000d98 <__aeabi_f2iz>:
 8000d98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000da0:	d30f      	bcc.n	8000dc2 <__aeabi_f2iz+0x2a>
 8000da2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000da6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000daa:	d90d      	bls.n	8000dc8 <__aeabi_f2iz+0x30>
 8000dac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000db0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000db4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000db8:	fa23 f002 	lsr.w	r0, r3, r2
 8000dbc:	bf18      	it	ne
 8000dbe:	4240      	negne	r0, r0
 8000dc0:	4770      	bx	lr
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	4770      	bx	lr
 8000dc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dcc:	d101      	bne.n	8000dd2 <__aeabi_f2iz+0x3a>
 8000dce:	0242      	lsls	r2, r0, #9
 8000dd0:	d105      	bne.n	8000dde <__aeabi_f2iz+0x46>
 8000dd2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000dd6:	bf08      	it	eq
 8000dd8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ddc:	4770      	bx	lr
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	4770      	bx	lr

08000de4 <start_fill>:
const float d2 = (float)(square_size - (halfSize_MicroMouse * 2))/2;

void found(int16_t index);
void set_wall(bool rbl, bool rbr, bool rbf);

void start_fill() {
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
	memset(visited, false, sizeof(visited));
 8000dea:	2264      	movs	r2, #100	; 0x64
 8000dec:	2100      	movs	r1, #0
 8000dee:	48b7      	ldr	r0, [pc, #732]	; (80010cc <start_fill+0x2e8>)
 8000df0:	f006 fe7e 	bl	8007af0 <memset>
	memset(maze, 0, sizeof(maze));
 8000df4:	2264      	movs	r2, #100	; 0x64
 8000df6:	2100      	movs	r1, #0
 8000df8:	48b5      	ldr	r0, [pc, #724]	; (80010d0 <start_fill+0x2ec>)
 8000dfa:	f006 fe79 	bl	8007af0 <memset>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000dfe:	4bb5      	ldr	r3, [pc, #724]	; (80010d4 <start_fill+0x2f0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000e06:	4bb4      	ldr	r3, [pc, #720]	; (80010d8 <start_fill+0x2f4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
	current_speed = 0;
 8000e0e:	4bb3      	ldr	r3, [pc, #716]	; (80010dc <start_fill+0x2f8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
	visited[starting_coordinates[1]][starting_coordinates[0]] = true;
 8000e14:	4bb2      	ldr	r3, [pc, #712]	; (80010e0 <start_fill+0x2fc>)
 8000e16:	785b      	ldrb	r3, [r3, #1]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4bb1      	ldr	r3, [pc, #708]	; (80010e0 <start_fill+0x2fc>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	4aaa      	ldr	r2, [pc, #680]	; (80010cc <start_fill+0x2e8>)
 8000e22:	460b      	mov	r3, r1
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	440b      	add	r3, r1
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4403      	add	r3, r0
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
	int16_t i = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	81fb      	strh	r3, [r7, #14]
	x = starting_coordinates[0];
 8000e36:	4baa      	ldr	r3, [pc, #680]	; (80010e0 <start_fill+0x2fc>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b25a      	sxtb	r2, r3
 8000e3c:	4ba9      	ldr	r3, [pc, #676]	; (80010e4 <start_fill+0x300>)
 8000e3e:	701a      	strb	r2, [r3, #0]
	y = starting_coordinates[1] + 1;
 8000e40:	4ba7      	ldr	r3, [pc, #668]	; (80010e0 <start_fill+0x2fc>)
 8000e42:	785b      	ldrb	r3, [r3, #1]
 8000e44:	3301      	adds	r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	b25a      	sxtb	r2, r3
 8000e4a:	4ba7      	ldr	r3, [pc, #668]	; (80010e8 <start_fill+0x304>)
 8000e4c:	701a      	strb	r2, [r3, #0]
	maze[y - 1][x] |= bottom_wall;
 8000e4e:	4ba6      	ldr	r3, [pc, #664]	; (80010e8 <start_fill+0x304>)
 8000e50:	f993 3000 	ldrsb.w	r3, [r3]
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	4ba3      	ldr	r3, [pc, #652]	; (80010e4 <start_fill+0x300>)
 8000e58:	f993 3000 	ldrsb.w	r3, [r3]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	499c      	ldr	r1, [pc, #624]	; (80010d0 <start_fill+0x2ec>)
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	440b      	add	r3, r1
 8000e6a:	4403      	add	r3, r0
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4a9e      	ldr	r2, [pc, #632]	; (80010e8 <start_fill+0x304>)
 8000e70:	f992 2000 	ldrsb.w	r2, [r2]
 8000e74:	3a01      	subs	r2, #1
 8000e76:	499b      	ldr	r1, [pc, #620]	; (80010e4 <start_fill+0x300>)
 8000e78:	f991 1000 	ldrsb.w	r1, [r1]
 8000e7c:	460c      	mov	r4, r1
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	b2d8      	uxtb	r0, r3
 8000e84:	4992      	ldr	r1, [pc, #584]	; (80010d0 <start_fill+0x2ec>)
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	440b      	add	r3, r1
 8000e90:	4423      	add	r3, r4
 8000e92:	4602      	mov	r2, r0
 8000e94:	701a      	strb	r2, [r3, #0]
	direction = north;
 8000e96:	4b95      	ldr	r3, [pc, #596]	; (80010ec <start_fill+0x308>)
 8000e98:	2202      	movs	r2, #2
 8000e9a:	701a      	strb	r2, [r3, #0]
	bool frontfree, leftfree, rightfree;
	while(1){
		frontfree = adc_value[0] < frontWallValue;
 8000e9c:	4b94      	ldr	r3, [pc, #592]	; (80010f0 <start_fill+0x30c>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	2b63      	cmp	r3, #99	; 0x63
 8000ea4:	bf94      	ite	ls
 8000ea6:	2301      	movls	r3, #1
 8000ea8:	2300      	movhi	r3, #0
 8000eaa:	737b      	strb	r3, [r7, #13]
		rightfree = adc_value[1] < rightWallValue;
 8000eac:	4b90      	ldr	r3, [pc, #576]	; (80010f0 <start_fill+0x30c>)
 8000eae:	885b      	ldrh	r3, [r3, #2]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	2b63      	cmp	r3, #99	; 0x63
 8000eb4:	bf94      	ite	ls
 8000eb6:	2301      	movls	r3, #1
 8000eb8:	2300      	movhi	r3, #0
 8000eba:	72fb      	strb	r3, [r7, #11]
		leftfree  = adc_value[2] < leftWallValue;
 8000ebc:	4b8c      	ldr	r3, [pc, #560]	; (80010f0 <start_fill+0x30c>)
 8000ebe:	889b      	ldrh	r3, [r3, #4]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	2b63      	cmp	r3, #99	; 0x63
 8000ec4:	bf94      	ite	ls
 8000ec6:	2301      	movls	r3, #1
 8000ec8:	2300      	movhi	r3, #0
 8000eca:	733b      	strb	r3, [r7, #12]
		set_wall(!leftfree, !rightfree, !frontfree);
 8000ecc:	7b3b      	ldrb	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf14      	ite	ne
 8000ed2:	2301      	movne	r3, #1
 8000ed4:	2300      	moveq	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	f083 0301 	eor.w	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	b2d8      	uxtb	r0, r3
 8000ee4:	7afb      	ldrb	r3, [r7, #11]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf14      	ite	ne
 8000eea:	2301      	movne	r3, #1
 8000eec:	2300      	moveq	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	f083 0301 	eor.w	r3, r3, #1
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	b2d9      	uxtb	r1, r3
 8000efc:	7b7b      	ldrb	r3, [r7, #13]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf14      	ite	ne
 8000f02:	2301      	movne	r3, #1
 8000f04:	2300      	moveq	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f083 0301 	eor.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	461a      	mov	r2, r3
 8000f16:	f001 fb5d 	bl	80025d4 <set_wall>
		visited[y][x] = true;
 8000f1a:	4b73      	ldr	r3, [pc, #460]	; (80010e8 <start_fill+0x304>)
 8000f1c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4b70      	ldr	r3, [pc, #448]	; (80010e4 <start_fill+0x300>)
 8000f24:	f993 3000 	ldrsb.w	r3, [r3]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	4a68      	ldr	r2, [pc, #416]	; (80010cc <start_fill+0x2e8>)
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	4403      	add	r3, r0
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
		if(x == ending_coordinates[0] && y == ending_coordinates[1]){
 8000f3c:	4b69      	ldr	r3, [pc, #420]	; (80010e4 <start_fill+0x300>)
 8000f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <start_fill+0x310>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d132      	bne.n	8000fb2 <start_fill+0x1ce>
 8000f4c:	4b66      	ldr	r3, [pc, #408]	; (80010e8 <start_fill+0x304>)
 8000f4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b67      	ldr	r3, [pc, #412]	; (80010f4 <start_fill+0x310>)
 8000f56:	785b      	ldrb	r3, [r3, #1]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d12a      	bne.n	8000fb2 <start_fill+0x1ce>
			found(i);
 8000f5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 faef 	bl	8002544 <found>
			maze[y][x] |= top_wall;
 8000f66:	4b60      	ldr	r3, [pc, #384]	; (80010e8 <start_fill+0x304>)
 8000f68:	f993 3000 	ldrsb.w	r3, [r3]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4b5d      	ldr	r3, [pc, #372]	; (80010e4 <start_fill+0x300>)
 8000f70:	f993 3000 	ldrsb.w	r3, [r3]
 8000f74:	4618      	mov	r0, r3
 8000f76:	4a56      	ldr	r2, [pc, #344]	; (80010d0 <start_fill+0x2ec>)
 8000f78:	460b      	mov	r3, r1
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	4403      	add	r3, r0
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4a58      	ldr	r2, [pc, #352]	; (80010e8 <start_fill+0x304>)
 8000f88:	f992 2000 	ldrsb.w	r2, [r2]
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4a55      	ldr	r2, [pc, #340]	; (80010e4 <start_fill+0x300>)
 8000f90:	f992 2000 	ldrsb.w	r2, [r2]
 8000f94:	4614      	mov	r4, r2
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	b2d8      	uxtb	r0, r3
 8000f9c:	4a4c      	ldr	r2, [pc, #304]	; (80010d0 <start_fill+0x2ec>)
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4423      	add	r3, r4
 8000faa:	4602      	mov	r2, r0
 8000fac:	701a      	strb	r2, [r3, #0]
			break;
 8000fae:	f001 bab5 	b.w	800251c <start_fill+0x1738>
		}
		switch(direction){
 8000fb2:	4b4e      	ldr	r3, [pc, #312]	; (80010ec <start_fill+0x308>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	f200 81a7 	bhi.w	800130a <start_fill+0x526>
 8000fbc:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <start_fill+0x1e0>)
 8000fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc2:	bf00      	nop
 8000fc4:	08000fd5 	.word	0x08000fd5
 8000fc8:	08001097 	.word	0x08001097
 8000fcc:	08001187 	.word	0x08001187
 8000fd0:	08001249 	.word	0x08001249
			case west:
				frontfree = frontfree && !visited[y][x - 1];
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d016      	beq.n	8001008 <start_fill+0x224>
 8000fda:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <start_fill+0x304>)
 8000fdc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <start_fill+0x300>)
 8000fe4:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe8:	1e5a      	subs	r2, r3, #1
 8000fea:	4938      	ldr	r1, [pc, #224]	; (80010cc <start_fill+0x2e8>)
 8000fec:	4603      	mov	r3, r0
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4403      	add	r3, r0
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	440b      	add	r3, r1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	f083 0301 	eor.w	r3, r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <start_fill+0x224>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <start_fill+0x226>
 8001008:	2300      	movs	r3, #0
 800100a:	737b      	strb	r3, [r7, #13]
 800100c:	7b7b      	ldrb	r3, [r7, #13]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y + 1][x];
 8001014:	7b3b      	ldrb	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d016      	beq.n	8001048 <start_fill+0x264>
 800101a:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <start_fill+0x304>)
 800101c:	f993 3000 	ldrsb.w	r3, [r3]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <start_fill+0x300>)
 8001024:	f993 3000 	ldrsb.w	r3, [r3]
 8001028:	4618      	mov	r0, r3
 800102a:	4928      	ldr	r1, [pc, #160]	; (80010cc <start_fill+0x2e8>)
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	440b      	add	r3, r1
 8001036:	4403      	add	r3, r0
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	f083 0301 	eor.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <start_fill+0x264>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <start_fill+0x266>
 8001048:	2300      	movs	r3, #0
 800104a:	733b      	strb	r3, [r7, #12]
 800104c:	7b3b      	ldrb	r3, [r7, #12]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y - 1][x];
 8001054:	7afb      	ldrb	r3, [r7, #11]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d016      	beq.n	8001088 <start_fill+0x2a4>
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <start_fill+0x304>)
 800105c:	f993 3000 	ldrsb.w	r3, [r3]
 8001060:	1e5a      	subs	r2, r3, #1
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <start_fill+0x300>)
 8001064:	f993 3000 	ldrsb.w	r3, [r3]
 8001068:	4618      	mov	r0, r3
 800106a:	4918      	ldr	r1, [pc, #96]	; (80010cc <start_fill+0x2e8>)
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	440b      	add	r3, r1
 8001076:	4403      	add	r3, r0
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	f083 0301 	eor.w	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <start_fill+0x2a4>
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <start_fill+0x2a6>
 8001088:	2300      	movs	r3, #0
 800108a:	72fb      	strb	r3, [r7, #11]
 800108c:	7afb      	ldrb	r3, [r7, #11]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	72fb      	strb	r3, [r7, #11]
				break;
 8001094:	e139      	b.n	800130a <start_fill+0x526>
			case east:
				frontfree = frontfree && !visited[y][x + 1];
 8001096:	7b7b      	ldrb	r3, [r7, #13]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d02d      	beq.n	80010f8 <start_fill+0x314>
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <start_fill+0x304>)
 800109e:	f993 3000 	ldrsb.w	r3, [r3]
 80010a2:	4618      	mov	r0, r3
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <start_fill+0x300>)
 80010a6:	f993 3000 	ldrsb.w	r3, [r3]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <start_fill+0x2e8>)
 80010ae:	4603      	mov	r3, r0
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4403      	add	r3, r0
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	440b      	add	r3, r1
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	f083 0301 	eor.w	r3, r3, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d018      	beq.n	80010f8 <start_fill+0x314>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e017      	b.n	80010fa <start_fill+0x316>
 80010ca:	bf00      	nop
 80010cc:	20000350 	.word	0x20000350
 80010d0:	200002ec 	.word	0x200002ec
 80010d4:	200001cc 	.word	0x200001cc
 80010d8:	2000025c 	.word	0x2000025c
 80010dc:	200003bc 	.word	0x200003bc
 80010e0:	08007ba8 	.word	0x08007ba8
 80010e4:	20000154 	.word	0x20000154
 80010e8:	20000155 	.word	0x20000155
 80010ec:	20000156 	.word	0x20000156
 80010f0:	200003b4 	.word	0x200003b4
 80010f4:	08007bac 	.word	0x08007bac
 80010f8:	2300      	movs	r3, #0
 80010fa:	737b      	strb	r3, [r7, #13]
 80010fc:	7b7b      	ldrb	r3, [r7, #13]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y - 1][x];
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d016      	beq.n	8001138 <start_fill+0x354>
 800110a:	4bb1      	ldr	r3, [pc, #708]	; (80013d0 <start_fill+0x5ec>)
 800110c:	f993 3000 	ldrsb.w	r3, [r3]
 8001110:	1e5a      	subs	r2, r3, #1
 8001112:	4bb0      	ldr	r3, [pc, #704]	; (80013d4 <start_fill+0x5f0>)
 8001114:	f993 3000 	ldrsb.w	r3, [r3]
 8001118:	4618      	mov	r0, r3
 800111a:	49af      	ldr	r1, [pc, #700]	; (80013d8 <start_fill+0x5f4>)
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	440b      	add	r3, r1
 8001126:	4403      	add	r3, r0
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	f083 0301 	eor.w	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <start_fill+0x354>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <start_fill+0x356>
 8001138:	2300      	movs	r3, #0
 800113a:	733b      	strb	r3, [r7, #12]
 800113c:	7b3b      	ldrb	r3, [r7, #12]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y + 1][x];
 8001144:	7afb      	ldrb	r3, [r7, #11]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d016      	beq.n	8001178 <start_fill+0x394>
 800114a:	4ba1      	ldr	r3, [pc, #644]	; (80013d0 <start_fill+0x5ec>)
 800114c:	f993 3000 	ldrsb.w	r3, [r3]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	4ba0      	ldr	r3, [pc, #640]	; (80013d4 <start_fill+0x5f0>)
 8001154:	f993 3000 	ldrsb.w	r3, [r3]
 8001158:	4618      	mov	r0, r3
 800115a:	499f      	ldr	r1, [pc, #636]	; (80013d8 <start_fill+0x5f4>)
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	440b      	add	r3, r1
 8001166:	4403      	add	r3, r0
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	f083 0301 	eor.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <start_fill+0x394>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <start_fill+0x396>
 8001178:	2300      	movs	r3, #0
 800117a:	72fb      	strb	r3, [r7, #11]
 800117c:	7afb      	ldrb	r3, [r7, #11]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	72fb      	strb	r3, [r7, #11]
				break;
 8001184:	e0c1      	b.n	800130a <start_fill+0x526>
			case north:
				frontfree = frontfree && !visited[y - 1][x];
 8001186:	7b7b      	ldrb	r3, [r7, #13]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d016      	beq.n	80011ba <start_fill+0x3d6>
 800118c:	4b90      	ldr	r3, [pc, #576]	; (80013d0 <start_fill+0x5ec>)
 800118e:	f993 3000 	ldrsb.w	r3, [r3]
 8001192:	1e5a      	subs	r2, r3, #1
 8001194:	4b8f      	ldr	r3, [pc, #572]	; (80013d4 <start_fill+0x5f0>)
 8001196:	f993 3000 	ldrsb.w	r3, [r3]
 800119a:	4618      	mov	r0, r3
 800119c:	498e      	ldr	r1, [pc, #568]	; (80013d8 <start_fill+0x5f4>)
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	440b      	add	r3, r1
 80011a8:	4403      	add	r3, r0
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	f083 0301 	eor.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <start_fill+0x3d6>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <start_fill+0x3d8>
 80011ba:	2300      	movs	r3, #0
 80011bc:	737b      	strb	r3, [r7, #13]
 80011be:	7b7b      	ldrb	r3, [r7, #13]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y][x - 1];
 80011c6:	7b3b      	ldrb	r3, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d016      	beq.n	80011fa <start_fill+0x416>
 80011cc:	4b80      	ldr	r3, [pc, #512]	; (80013d0 <start_fill+0x5ec>)
 80011ce:	f993 3000 	ldrsb.w	r3, [r3]
 80011d2:	4618      	mov	r0, r3
 80011d4:	4b7f      	ldr	r3, [pc, #508]	; (80013d4 <start_fill+0x5f0>)
 80011d6:	f993 3000 	ldrsb.w	r3, [r3]
 80011da:	1e5a      	subs	r2, r3, #1
 80011dc:	497e      	ldr	r1, [pc, #504]	; (80013d8 <start_fill+0x5f4>)
 80011de:	4603      	mov	r3, r0
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4403      	add	r3, r0
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	440b      	add	r3, r1
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f083 0301 	eor.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <start_fill+0x416>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <start_fill+0x418>
 80011fa:	2300      	movs	r3, #0
 80011fc:	733b      	strb	r3, [r7, #12]
 80011fe:	7b3b      	ldrb	r3, [r7, #12]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y][x + 1];
 8001206:	7afb      	ldrb	r3, [r7, #11]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d016      	beq.n	800123a <start_fill+0x456>
 800120c:	4b70      	ldr	r3, [pc, #448]	; (80013d0 <start_fill+0x5ec>)
 800120e:	f993 3000 	ldrsb.w	r3, [r3]
 8001212:	4618      	mov	r0, r3
 8001214:	4b6f      	ldr	r3, [pc, #444]	; (80013d4 <start_fill+0x5f0>)
 8001216:	f993 3000 	ldrsb.w	r3, [r3]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	496e      	ldr	r1, [pc, #440]	; (80013d8 <start_fill+0x5f4>)
 800121e:	4603      	mov	r3, r0
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4403      	add	r3, r0
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	440b      	add	r3, r1
 8001228:	4413      	add	r3, r2
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f083 0301 	eor.w	r3, r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <start_fill+0x456>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <start_fill+0x458>
 800123a:	2300      	movs	r3, #0
 800123c:	72fb      	strb	r3, [r7, #11]
 800123e:	7afb      	ldrb	r3, [r7, #11]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	72fb      	strb	r3, [r7, #11]
				break;
 8001246:	e060      	b.n	800130a <start_fill+0x526>
			case south:
				frontfree = frontfree && !visited[y + 1][x];
 8001248:	7b7b      	ldrb	r3, [r7, #13]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d016      	beq.n	800127c <start_fill+0x498>
 800124e:	4b60      	ldr	r3, [pc, #384]	; (80013d0 <start_fill+0x5ec>)
 8001250:	f993 3000 	ldrsb.w	r3, [r3]
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <start_fill+0x5f0>)
 8001258:	f993 3000 	ldrsb.w	r3, [r3]
 800125c:	4618      	mov	r0, r3
 800125e:	495e      	ldr	r1, [pc, #376]	; (80013d8 <start_fill+0x5f4>)
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	440b      	add	r3, r1
 800126a:	4403      	add	r3, r0
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f083 0301 	eor.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <start_fill+0x498>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <start_fill+0x49a>
 800127c:	2300      	movs	r3, #0
 800127e:	737b      	strb	r3, [r7, #13]
 8001280:	7b7b      	ldrb	r3, [r7, #13]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y][x + 1];
 8001288:	7b3b      	ldrb	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d016      	beq.n	80012bc <start_fill+0x4d8>
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <start_fill+0x5ec>)
 8001290:	f993 3000 	ldrsb.w	r3, [r3]
 8001294:	4618      	mov	r0, r3
 8001296:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <start_fill+0x5f0>)
 8001298:	f993 3000 	ldrsb.w	r3, [r3]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	494e      	ldr	r1, [pc, #312]	; (80013d8 <start_fill+0x5f4>)
 80012a0:	4603      	mov	r3, r0
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4403      	add	r3, r0
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	440b      	add	r3, r1
 80012aa:	4413      	add	r3, r2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	f083 0301 	eor.w	r3, r3, #1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <start_fill+0x4d8>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <start_fill+0x4da>
 80012bc:	2300      	movs	r3, #0
 80012be:	733b      	strb	r3, [r7, #12]
 80012c0:	7b3b      	ldrb	r3, [r7, #12]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y][x - 1];
 80012c8:	7afb      	ldrb	r3, [r7, #11]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d016      	beq.n	80012fc <start_fill+0x518>
 80012ce:	4b40      	ldr	r3, [pc, #256]	; (80013d0 <start_fill+0x5ec>)
 80012d0:	f993 3000 	ldrsb.w	r3, [r3]
 80012d4:	4618      	mov	r0, r3
 80012d6:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <start_fill+0x5f0>)
 80012d8:	f993 3000 	ldrsb.w	r3, [r3]
 80012dc:	1e5a      	subs	r2, r3, #1
 80012de:	493e      	ldr	r1, [pc, #248]	; (80013d8 <start_fill+0x5f4>)
 80012e0:	4603      	mov	r3, r0
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4403      	add	r3, r0
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	440b      	add	r3, r1
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	f083 0301 	eor.w	r3, r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <start_fill+0x518>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <start_fill+0x51a>
 80012fc:	2300      	movs	r3, #0
 80012fe:	72fb      	strb	r3, [r7, #11]
 8001300:	7afb      	ldrb	r3, [r7, #11]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	72fb      	strb	r3, [r7, #11]
				break;
 8001308:	bf00      	nop
		}
		if((leftfree && rightfree) || (leftfree && frontfree) || (rightfree && frontfree)){
 800130a:	7b3b      	ldrb	r3, [r7, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <start_fill+0x532>
 8001310:	7afb      	ldrb	r3, [r7, #11]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10d      	bne.n	8001332 <start_fill+0x54e>
 8001316:	7b3b      	ldrb	r3, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <start_fill+0x53e>
 800131c:	7b7b      	ldrb	r3, [r7, #13]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d107      	bne.n	8001332 <start_fill+0x54e>
 8001322:	7afb      	ldrb	r3, [r7, #11]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80b9 	beq.w	800149c <start_fill+0x6b8>
 800132a:	7b7b      	ldrb	r3, [r7, #13]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80b5 	beq.w	800149c <start_fill+0x6b8>
			i++;
 8001332:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001336:	b29b      	uxth	r3, r3
 8001338:	3301      	adds	r3, #1
 800133a:	b29b      	uxth	r3, r3
 800133c:	81fb      	strh	r3, [r7, #14]
			stack[i][1] = x;
 800133e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <start_fill+0x5f0>)
 8001344:	f993 0000 	ldrsb.w	r0, [r3]
 8001348:	4924      	ldr	r1, [pc, #144]	; (80013dc <start_fill+0x5f8>)
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	440b      	add	r3, r1
 8001352:	3301      	adds	r3, #1
 8001354:	4602      	mov	r2, r0
 8001356:	701a      	strb	r2, [r3, #0]
			stack[i][2] = y;
 8001358:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <start_fill+0x5ec>)
 800135e:	f993 0000 	ldrsb.w	r0, [r3]
 8001362:	491e      	ldr	r1, [pc, #120]	; (80013dc <start_fill+0x5f8>)
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	440b      	add	r3, r1
 800136c:	3302      	adds	r3, #2
 800136e:	4602      	mov	r2, r0
 8001370:	701a      	strb	r2, [r3, #0]
			if(direction == west){
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <start_fill+0x5fc>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d138      	bne.n	80013ec <start_fill+0x608>
				if(rightfree){
 800137a:	7afb      	ldrb	r3, [r7, #11]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d017      	beq.n	80013b0 <start_fill+0x5cc>
					stack[i][0] = turn_right_90;
 8001380:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001384:	4915      	ldr	r1, [pc, #84]	; (80013dc <start_fill+0x5f8>)
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	440b      	add	r3, r1
 800138e:	22ff      	movs	r2, #255	; 0xff
 8001390:	701a      	strb	r2, [r3, #0]
					go_straight(d2, 1);
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <start_fill+0x600>)
 8001394:	2101      	movs	r1, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fcc0 	bl	8004d1c <go_straight>
					turn_right90(&direction);
 800139c:	4810      	ldr	r0, [pc, #64]	; (80013e0 <start_fill+0x5fc>)
 800139e:	f003 fbe3 	bl	8004b68 <turn_right90>
					go_straight(d2, 0);
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <start_fill+0x600>)
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 fcb8 	bl	8004d1c <go_straight>
			if(direction == west){
 80013ac:	f001 b804 	b.w	80023b8 <start_fill+0x15d4>
				} else {
					stack[i][0] = straight;
 80013b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013b4:	4909      	ldr	r1, [pc, #36]	; (80013dc <start_fill+0x5f8>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	440b      	add	r3, r1
 80013be:	22fa      	movs	r2, #250	; 0xfa
 80013c0:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 80013c2:	2100      	movs	r1, #0
 80013c4:	4808      	ldr	r0, [pc, #32]	; (80013e8 <start_fill+0x604>)
 80013c6:	f003 fca9 	bl	8004d1c <go_straight>
			if(direction == west){
 80013ca:	f000 bff5 	b.w	80023b8 <start_fill+0x15d4>
 80013ce:	bf00      	nop
 80013d0:	20000155 	.word	0x20000155
 80013d4:	20000154 	.word	0x20000154
 80013d8:	20000350 	.word	0x20000350
 80013dc:	20000028 	.word	0x20000028
 80013e0:	20000156 	.word	0x20000156
 80013e4:	42e80000 	.word	0x42e80000
 80013e8:	43960000 	.word	0x43960000
				}
			} else if(direction == east){
 80013ec:	4b8a      	ldr	r3, [pc, #552]	; (8001618 <start_fill+0x834>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d129      	bne.n	8001448 <start_fill+0x664>
				if(leftfree){
 80013f4:	7b3b      	ldrb	r3, [r7, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d017      	beq.n	800142a <start_fill+0x646>
					stack[i][0] = turn_left_90;
 80013fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013fe:	4987      	ldr	r1, [pc, #540]	; (800161c <start_fill+0x838>)
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	440b      	add	r3, r1
 8001408:	22fc      	movs	r2, #252	; 0xfc
 800140a:	701a      	strb	r2, [r3, #0]
					go_straight(d2, 1);
 800140c:	4b84      	ldr	r3, [pc, #528]	; (8001620 <start_fill+0x83c>)
 800140e:	2101      	movs	r1, #1
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fc83 	bl	8004d1c <go_straight>
					turn_left90(&direction);
 8001416:	4880      	ldr	r0, [pc, #512]	; (8001618 <start_fill+0x834>)
 8001418:	f003 facc 	bl	80049b4 <turn_left90>
					go_straight(d2, 0);
 800141c:	4b80      	ldr	r3, [pc, #512]	; (8001620 <start_fill+0x83c>)
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f003 fc7b 	bl	8004d1c <go_straight>
			if(direction == west){
 8001426:	f000 bfc7 	b.w	80023b8 <start_fill+0x15d4>
				} else {
					stack[i][0] = straight;
 800142a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800142e:	497b      	ldr	r1, [pc, #492]	; (800161c <start_fill+0x838>)
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	440b      	add	r3, r1
 8001438:	22fa      	movs	r2, #250	; 0xfa
 800143a:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 800143c:	2100      	movs	r1, #0
 800143e:	4879      	ldr	r0, [pc, #484]	; (8001624 <start_fill+0x840>)
 8001440:	f003 fc6c 	bl	8004d1c <go_straight>
			if(direction == west){
 8001444:	f000 bfb8 	b.w	80023b8 <start_fill+0x15d4>
				}
			} else {
				if(frontfree){
 8001448:	7b7b      	ldrb	r3, [r7, #13]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00e      	beq.n	800146c <start_fill+0x688>
					stack[i][0] = straight;
 800144e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001452:	4972      	ldr	r1, [pc, #456]	; (800161c <start_fill+0x838>)
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	440b      	add	r3, r1
 800145c:	22fa      	movs	r2, #250	; 0xfa
 800145e:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 8001460:	2100      	movs	r1, #0
 8001462:	4870      	ldr	r0, [pc, #448]	; (8001624 <start_fill+0x840>)
 8001464:	f003 fc5a 	bl	8004d1c <go_straight>
			if(direction == west){
 8001468:	f000 bfa6 	b.w	80023b8 <start_fill+0x15d4>
				} else {
					stack[i][0] = turn_left_90;
 800146c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001470:	496a      	ldr	r1, [pc, #424]	; (800161c <start_fill+0x838>)
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	440b      	add	r3, r1
 800147a:	22fc      	movs	r2, #252	; 0xfc
 800147c:	701a      	strb	r2, [r3, #0]
					go_straight(d2, 1);
 800147e:	4b68      	ldr	r3, [pc, #416]	; (8001620 <start_fill+0x83c>)
 8001480:	2101      	movs	r1, #1
 8001482:	4618      	mov	r0, r3
 8001484:	f003 fc4a 	bl	8004d1c <go_straight>
					turn_left90(&direction);
 8001488:	4863      	ldr	r0, [pc, #396]	; (8001618 <start_fill+0x834>)
 800148a:	f003 fa93 	bl	80049b4 <turn_left90>
					go_straight(d2, 0);
 800148e:	4b64      	ldr	r3, [pc, #400]	; (8001620 <start_fill+0x83c>)
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f003 fc42 	bl	8004d1c <go_straight>
			if(direction == west){
 8001498:	f000 bf8e 	b.w	80023b8 <start_fill+0x15d4>
				}
			}
		} else if(leftfree || rightfree || frontfree){
 800149c:	7b3b      	ldrb	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <start_fill+0x6cc>
 80014a2:	7afb      	ldrb	r3, [r7, #11]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d103      	bne.n	80014b0 <start_fill+0x6cc>
 80014a8:	7b7b      	ldrb	r3, [r7, #13]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80bc 	beq.w	8001628 <start_fill+0x844>
			if(frontfree){
 80014b0:	7b7b      	ldrb	r3, [r7, #13]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d058      	beq.n	8001568 <start_fill+0x784>
				if(stack[i][0] == straight && stack[i][1] == -1){
 80014b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014ba:	4958      	ldr	r1, [pc, #352]	; (800161c <start_fill+0x838>)
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f993 3000 	ldrsb.w	r3, [r3]
 80014c8:	f113 0f06 	cmn.w	r3, #6
 80014cc:	d123      	bne.n	8001516 <start_fill+0x732>
 80014ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014d2:	4952      	ldr	r1, [pc, #328]	; (800161c <start_fill+0x838>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	440b      	add	r3, r1
 80014dc:	3301      	adds	r3, #1
 80014de:	f993 3000 	ldrsb.w	r3, [r3]
 80014e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e6:	d116      	bne.n	8001516 <start_fill+0x732>
					stack[i][2]++;
 80014e8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014ec:	494b      	ldr	r1, [pc, #300]	; (800161c <start_fill+0x838>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	3302      	adds	r3, #2
 80014f8:	f993 3000 	ldrsb.w	r3, [r3]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	b258      	sxtb	r0, r3
 8001504:	4945      	ldr	r1, [pc, #276]	; (800161c <start_fill+0x838>)
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	440b      	add	r3, r1
 800150e:	3302      	adds	r3, #2
 8001510:	4602      	mov	r2, r0
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	e022      	b.n	800155c <start_fill+0x778>
				} else {
					i++;
 8001516:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800151a:	b29b      	uxth	r3, r3
 800151c:	3301      	adds	r3, #1
 800151e:	b29b      	uxth	r3, r3
 8001520:	81fb      	strh	r3, [r7, #14]
					stack[i][0] = straight;
 8001522:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001526:	493d      	ldr	r1, [pc, #244]	; (800161c <start_fill+0x838>)
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	440b      	add	r3, r1
 8001530:	22fa      	movs	r2, #250	; 0xfa
 8001532:	701a      	strb	r2, [r3, #0]
					stack[i][1] = -1;
 8001534:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001538:	4938      	ldr	r1, [pc, #224]	; (800161c <start_fill+0x838>)
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	440b      	add	r3, r1
 8001542:	3301      	adds	r3, #1
 8001544:	22ff      	movs	r2, #255	; 0xff
 8001546:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 8001548:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800154c:	4933      	ldr	r1, [pc, #204]	; (800161c <start_fill+0x838>)
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	440b      	add	r3, r1
 8001556:	3302      	adds	r3, #2
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
				}
				go_straight(square_size, 0);
 800155c:	2100      	movs	r1, #0
 800155e:	4831      	ldr	r0, [pc, #196]	; (8001624 <start_fill+0x840>)
 8001560:	f003 fbdc 	bl	8004d1c <go_straight>
			if(frontfree){
 8001564:	f000 bf1f 	b.w	80023a6 <start_fill+0x15c2>
			} else if(leftfree){
 8001568:	7b3b      	ldrb	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d027      	beq.n	80015be <start_fill+0x7da>
				i++;
 800156e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001572:	b29b      	uxth	r3, r3
 8001574:	3301      	adds	r3, #1
 8001576:	b29b      	uxth	r3, r3
 8001578:	81fb      	strh	r3, [r7, #14]
				stack[i][0] = turn_left_90;
 800157a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800157e:	4927      	ldr	r1, [pc, #156]	; (800161c <start_fill+0x838>)
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	440b      	add	r3, r1
 8001588:	22fc      	movs	r2, #252	; 0xfc
 800158a:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 800158c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001590:	4922      	ldr	r1, [pc, #136]	; (800161c <start_fill+0x838>)
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	440b      	add	r3, r1
 800159a:	3301      	adds	r3, #1
 800159c:	22ff      	movs	r2, #255	; 0xff
 800159e:	701a      	strb	r2, [r3, #0]
				go_straight(d2, 1);
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <start_fill+0x83c>)
 80015a2:	2101      	movs	r1, #1
 80015a4:	4618      	mov	r0, r3
 80015a6:	f003 fbb9 	bl	8004d1c <go_straight>
				turn_left90(&direction);
 80015aa:	481b      	ldr	r0, [pc, #108]	; (8001618 <start_fill+0x834>)
 80015ac:	f003 fa02 	bl	80049b4 <turn_left90>
				go_straight(d2, 0);
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <start_fill+0x83c>)
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 fbb1 	bl	8004d1c <go_straight>
			if(frontfree){
 80015ba:	f000 bef4 	b.w	80023a6 <start_fill+0x15c2>
			} else if(rightfree){
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 86f0 	beq.w	80023a6 <start_fill+0x15c2>
				i++;
 80015c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	3301      	adds	r3, #1
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	81fb      	strh	r3, [r7, #14]
				stack[i][0] = turn_right_90;
 80015d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015d6:	4911      	ldr	r1, [pc, #68]	; (800161c <start_fill+0x838>)
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	440b      	add	r3, r1
 80015e0:	22ff      	movs	r2, #255	; 0xff
 80015e2:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 80015e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015e8:	490c      	ldr	r1, [pc, #48]	; (800161c <start_fill+0x838>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	3301      	adds	r3, #1
 80015f4:	22ff      	movs	r2, #255	; 0xff
 80015f6:	701a      	strb	r2, [r3, #0]
				go_straight(d2, 1);
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <start_fill+0x83c>)
 80015fa:	2101      	movs	r1, #1
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 fb8d 	bl	8004d1c <go_straight>
				turn_right90(&direction);
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <start_fill+0x834>)
 8001604:	f003 fab0 	bl	8004b68 <turn_right90>
				go_straight(d2, 0);
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <start_fill+0x83c>)
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f003 fb85 	bl	8004d1c <go_straight>
			if(frontfree){
 8001612:	f000 bec8 	b.w	80023a6 <start_fill+0x15c2>
 8001616:	bf00      	nop
 8001618:	20000156 	.word	0x20000156
 800161c:	20000028 	.word	0x20000028
 8001620:	42e80000 	.word	0x42e80000
 8001624:	43960000 	.word	0x43960000
			}
		} else {
			go_straight(d2, 1);
 8001628:	4bbb      	ldr	r3, [pc, #748]	; (8001918 <start_fill+0xb34>)
 800162a:	2101      	movs	r1, #1
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fb75 	bl	8004d1c <go_straight>
			u_turnf(&direction);
 8001632:	48ba      	ldr	r0, [pc, #744]	; (800191c <start_fill+0xb38>)
 8001634:	f002 ff74 	bl	8004520 <u_turnf>
			go_straight(d2, 0);
 8001638:	4bb7      	ldr	r3, [pc, #732]	; (8001918 <start_fill+0xb34>)
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fb6d 	bl	8004d1c <go_straight>
			if(stack[i][1] != -1 &&
 8001642:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001646:	49b6      	ldr	r1, [pc, #728]	; (8001920 <start_fill+0xb3c>)
 8001648:	4613      	mov	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	440b      	add	r3, r1
 8001650:	3301      	adds	r3, #1
 8001652:	f993 3000 	ldrsb.w	r3, [r3]
 8001656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165a:	f000 82a9 	beq.w	8001bb0 <start_fill+0xdcc>
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 800165e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001662:	49af      	ldr	r1, [pc, #700]	; (8001920 <start_fill+0xb3c>)
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	440b      	add	r3, r1
 800166c:	3302      	adds	r3, #2
 800166e:	f993 3000 	ldrsb.w	r3, [r3]
 8001672:	4618      	mov	r0, r3
 8001674:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001678:	49a9      	ldr	r1, [pc, #676]	; (8001920 <start_fill+0xb3c>)
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	440b      	add	r3, r1
 8001682:	3301      	adds	r3, #1
 8001684:	f993 3000 	ldrsb.w	r3, [r3]
 8001688:	4619      	mov	r1, r3
 800168a:	4aa6      	ldr	r2, [pc, #664]	; (8001924 <start_fill+0xb40>)
 800168c:	4603      	mov	r3, r0
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4403      	add	r3, r0
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	440b      	add	r3, r1
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
			if(stack[i][1] != -1 &&
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d120      	bne.n	80016e4 <start_fill+0x900>
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 80016a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016a6:	499e      	ldr	r1, [pc, #632]	; (8001920 <start_fill+0xb3c>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	3302      	adds	r3, #2
 80016b2:	f993 3000 	ldrsb.w	r3, [r3]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016bc:	4998      	ldr	r1, [pc, #608]	; (8001920 <start_fill+0xb3c>)
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	3301      	adds	r3, #1
 80016c8:	f993 3000 	ldrsb.w	r3, [r3]
 80016cc:	1e5a      	subs	r2, r3, #1
 80016ce:	4996      	ldr	r1, [pc, #600]	; (8001928 <start_fill+0xb44>)
 80016d0:	4603      	mov	r3, r0
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4403      	add	r3, r0
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	440b      	add	r3, r1
 80016da:	4413      	add	r3, r2
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8266 	beq.w	8001bb0 <start_fill+0xdcc>
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80016e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016e8:	498d      	ldr	r1, [pc, #564]	; (8001920 <start_fill+0xb3c>)
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	3302      	adds	r3, #2
 80016f4:	f993 3000 	ldrsb.w	r3, [r3]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016fe:	4988      	ldr	r1, [pc, #544]	; (8001920 <start_fill+0xb3c>)
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	440b      	add	r3, r1
 8001708:	3301      	adds	r3, #1
 800170a:	f993 3000 	ldrsb.w	r3, [r3]
 800170e:	4619      	mov	r1, r3
 8001710:	4a84      	ldr	r2, [pc, #528]	; (8001924 <start_fill+0xb40>)
 8001712:	4603      	mov	r3, r0
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4403      	add	r3, r0
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	440b      	add	r3, r1
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001724:	2b00      	cmp	r3, #0
 8001726:	d120      	bne.n	800176a <start_fill+0x986>
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001728:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800172c:	497c      	ldr	r1, [pc, #496]	; (8001920 <start_fill+0xb3c>)
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	440b      	add	r3, r1
 8001736:	3302      	adds	r3, #2
 8001738:	f993 3000 	ldrsb.w	r3, [r3]
 800173c:	4618      	mov	r0, r3
 800173e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001742:	4977      	ldr	r1, [pc, #476]	; (8001920 <start_fill+0xb3c>)
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	440b      	add	r3, r1
 800174c:	3301      	adds	r3, #1
 800174e:	f993 3000 	ldrsb.w	r3, [r3]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	4974      	ldr	r1, [pc, #464]	; (8001928 <start_fill+0xb44>)
 8001756:	4603      	mov	r3, r0
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4403      	add	r3, r0
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	440b      	add	r3, r1
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 8223 	beq.w	8001bb0 <start_fill+0xdcc>
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 800176a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800176e:	496c      	ldr	r1, [pc, #432]	; (8001920 <start_fill+0xb3c>)
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	440b      	add	r3, r1
 8001778:	3302      	adds	r3, #2
 800177a:	f993 3000 	ldrsb.w	r3, [r3]
 800177e:	4618      	mov	r0, r3
 8001780:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001784:	4966      	ldr	r1, [pc, #408]	; (8001920 <start_fill+0xb3c>)
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	440b      	add	r3, r1
 800178e:	3301      	adds	r3, #1
 8001790:	f993 3000 	ldrsb.w	r3, [r3]
 8001794:	4619      	mov	r1, r3
 8001796:	4a63      	ldr	r2, [pc, #396]	; (8001924 <start_fill+0xb40>)
 8001798:	4603      	mov	r3, r0
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4403      	add	r3, r0
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d120      	bne.n	80017f0 <start_fill+0xa0c>
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 80017ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017b2:	495b      	ldr	r1, [pc, #364]	; (8001920 <start_fill+0xb3c>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	3302      	adds	r3, #2
 80017be:	f993 3000 	ldrsb.w	r3, [r3]
 80017c2:	1e5a      	subs	r2, r3, #1
 80017c4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80017c8:	4855      	ldr	r0, [pc, #340]	; (8001920 <start_fill+0xb3c>)
 80017ca:	460b      	mov	r3, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	440b      	add	r3, r1
 80017d0:	4403      	add	r3, r0
 80017d2:	3301      	adds	r3, #1
 80017d4:	f993 3000 	ldrsb.w	r3, [r3]
 80017d8:	4618      	mov	r0, r3
 80017da:	4953      	ldr	r1, [pc, #332]	; (8001928 <start_fill+0xb44>)
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	440b      	add	r3, r1
 80017e6:	4403      	add	r3, r0
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 81e0 	beq.w	8001bb0 <start_fill+0xdcc>
					((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 80017f0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017f4:	494a      	ldr	r1, [pc, #296]	; (8001920 <start_fill+0xb3c>)
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	440b      	add	r3, r1
 80017fe:	3302      	adds	r3, #2
 8001800:	f993 3000 	ldrsb.w	r3, [r3]
 8001804:	4618      	mov	r0, r3
 8001806:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800180a:	4945      	ldr	r1, [pc, #276]	; (8001920 <start_fill+0xb3c>)
 800180c:	4613      	mov	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	440b      	add	r3, r1
 8001814:	3301      	adds	r3, #1
 8001816:	f993 3000 	ldrsb.w	r3, [r3]
 800181a:	4619      	mov	r1, r3
 800181c:	4a41      	ldr	r2, [pc, #260]	; (8001924 <start_fill+0xb40>)
 800181e:	4603      	mov	r3, r0
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4403      	add	r3, r0
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	440b      	add	r3, r1
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001830:	2b00      	cmp	r3, #0
 8001832:	d120      	bne.n	8001876 <start_fill+0xa92>
					((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001834:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001838:	4939      	ldr	r1, [pc, #228]	; (8001920 <start_fill+0xb3c>)
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	440b      	add	r3, r1
 8001842:	3302      	adds	r3, #2
 8001844:	f993 3000 	ldrsb.w	r3, [r3]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800184e:	4834      	ldr	r0, [pc, #208]	; (8001920 <start_fill+0xb3c>)
 8001850:	460b      	mov	r3, r1
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	440b      	add	r3, r1
 8001856:	4403      	add	r3, r0
 8001858:	3301      	adds	r3, #1
 800185a:	f993 3000 	ldrsb.w	r3, [r3]
 800185e:	4618      	mov	r0, r3
 8001860:	4931      	ldr	r1, [pc, #196]	; (8001928 <start_fill+0xb44>)
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	440b      	add	r3, r1
 800186c:	4403      	add	r3, r0
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 819d 	beq.w	8001bb0 <start_fill+0xdcc>
				stack[i][1] = -1;
 8001876:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800187a:	4929      	ldr	r1, [pc, #164]	; (8001920 <start_fill+0xb3c>)
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	440b      	add	r3, r1
 8001884:	3301      	adds	r3, #1
 8001886:	22ff      	movs	r2, #255	; 0xff
 8001888:	701a      	strb	r2, [r3, #0]
				stack[i][2] = 1;
 800188a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800188e:	4924      	ldr	r1, [pc, #144]	; (8001920 <start_fill+0xb3c>)
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	440b      	add	r3, r1
 8001898:	3302      	adds	r3, #2
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
			}
			while(stack[i][1] == -1){
 800189e:	e187      	b.n	8001bb0 <start_fill+0xdcc>
				switch(stack[i][0]){
 80018a0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018a4:	491e      	ldr	r1, [pc, #120]	; (8001920 <start_fill+0xb3c>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	f993 3000 	ldrsb.w	r3, [r3]
 80018b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b6:	d03b      	beq.n	8001930 <start_fill+0xb4c>
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	da47      	bge.n	800194c <start_fill+0xb68>
 80018bc:	f113 0f06 	cmn.w	r3, #6
 80018c0:	d003      	beq.n	80018ca <start_fill+0xae6>
 80018c2:	f113 0f04 	cmn.w	r3, #4
 80018c6:	d018      	beq.n	80018fa <start_fill+0xb16>
 80018c8:	e040      	b.n	800194c <start_fill+0xb68>
					case straight:
						go_straight((float)stack[i][2] * square_size, 0);
 80018ca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018ce:	4914      	ldr	r1, [pc, #80]	; (8001920 <start_fill+0xb3c>)
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	3302      	adds	r3, #2
 80018da:	f993 3000 	ldrsb.w	r3, [r3]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f990 	bl	8000c04 <__aeabi_i2f>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4911      	ldr	r1, [pc, #68]	; (800192c <start_fill+0xb48>)
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fc2f 	bl	800014c <__aeabi_fmul>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 fa12 	bl	8004d1c <go_straight>
						break;
 80018f8:	e028      	b.n	800194c <start_fill+0xb68>
					case turn_left_90:
						go_straight(d2, 1);
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <start_fill+0xb34>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 fa0c 	bl	8004d1c <go_straight>
						turn_right90(&direction);
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <start_fill+0xb38>)
 8001906:	f003 f92f 	bl	8004b68 <turn_right90>
						go_straight(d2, 0);
 800190a:	4b03      	ldr	r3, [pc, #12]	; (8001918 <start_fill+0xb34>)
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f003 fa04 	bl	8004d1c <go_straight>
						break;
 8001914:	e01a      	b.n	800194c <start_fill+0xb68>
 8001916:	bf00      	nop
 8001918:	42e80000 	.word	0x42e80000
 800191c:	20000156 	.word	0x20000156
 8001920:	20000028 	.word	0x20000028
 8001924:	200002ec 	.word	0x200002ec
 8001928:	20000350 	.word	0x20000350
 800192c:	43960000 	.word	0x43960000
					case turn_right_90:
						go_straight(d2, 1);
 8001930:	4bba      	ldr	r3, [pc, #744]	; (8001c1c <start_fill+0xe38>)
 8001932:	2101      	movs	r1, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f003 f9f1 	bl	8004d1c <go_straight>
						turn_left90(&direction);
 800193a:	48b9      	ldr	r0, [pc, #740]	; (8001c20 <start_fill+0xe3c>)
 800193c:	f003 f83a 	bl	80049b4 <turn_left90>
						go_straight(d2, 0);
 8001940:	4bb6      	ldr	r3, [pc, #728]	; (8001c1c <start_fill+0xe38>)
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f003 f9e9 	bl	8004d1c <go_straight>
						break;
 800194a:	bf00      	nop
				}
				i--;
 800194c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	81fb      	strh	r3, [r7, #14]
				if(stack[i][1] != -1 &&
 8001958:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800195c:	49b1      	ldr	r1, [pc, #708]	; (8001c24 <start_fill+0xe40>)
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	440b      	add	r3, r1
 8001966:	3301      	adds	r3, #1
 8001968:	f993 3000 	ldrsb.w	r3, [r3]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	f000 811e 	beq.w	8001bb0 <start_fill+0xdcc>
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001974:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001978:	49aa      	ldr	r1, [pc, #680]	; (8001c24 <start_fill+0xe40>)
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	440b      	add	r3, r1
 8001982:	3302      	adds	r3, #2
 8001984:	f993 3000 	ldrsb.w	r3, [r3]
 8001988:	4618      	mov	r0, r3
 800198a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800198e:	49a5      	ldr	r1, [pc, #660]	; (8001c24 <start_fill+0xe40>)
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	440b      	add	r3, r1
 8001998:	3301      	adds	r3, #1
 800199a:	f993 3000 	ldrsb.w	r3, [r3]
 800199e:	4619      	mov	r1, r3
 80019a0:	4aa1      	ldr	r2, [pc, #644]	; (8001c28 <start_fill+0xe44>)
 80019a2:	4603      	mov	r3, r0
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4403      	add	r3, r0
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
				if(stack[i][1] != -1 &&
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d120      	bne.n	80019fa <start_fill+0xc16>
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 80019b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019bc:	4999      	ldr	r1, [pc, #612]	; (8001c24 <start_fill+0xe40>)
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	3302      	adds	r3, #2
 80019c8:	f993 3000 	ldrsb.w	r3, [r3]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019d2:	4994      	ldr	r1, [pc, #592]	; (8001c24 <start_fill+0xe40>)
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	440b      	add	r3, r1
 80019dc:	3301      	adds	r3, #1
 80019de:	f993 3000 	ldrsb.w	r3, [r3]
 80019e2:	1e5a      	subs	r2, r3, #1
 80019e4:	4991      	ldr	r1, [pc, #580]	; (8001c2c <start_fill+0xe48>)
 80019e6:	4603      	mov	r3, r0
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4403      	add	r3, r0
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	440b      	add	r3, r1
 80019f0:	4413      	add	r3, r2
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80db 	beq.w	8001bb0 <start_fill+0xdcc>
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80019fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019fe:	4989      	ldr	r1, [pc, #548]	; (8001c24 <start_fill+0xe40>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	3302      	adds	r3, #2
 8001a0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a14:	4983      	ldr	r1, [pc, #524]	; (8001c24 <start_fill+0xe40>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f993 3000 	ldrsb.w	r3, [r3]
 8001a24:	4619      	mov	r1, r3
 8001a26:	4a80      	ldr	r2, [pc, #512]	; (8001c28 <start_fill+0xe44>)
 8001a28:	4603      	mov	r3, r0
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4403      	add	r3, r0
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f003 0304 	and.w	r3, r3, #4
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d120      	bne.n	8001a80 <start_fill+0xc9c>
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001a3e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a42:	4978      	ldr	r1, [pc, #480]	; (8001c24 <start_fill+0xe40>)
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a58:	4972      	ldr	r1, [pc, #456]	; (8001c24 <start_fill+0xe40>)
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	3301      	adds	r3, #1
 8001a64:	f993 3000 	ldrsb.w	r3, [r3]
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	4970      	ldr	r1, [pc, #448]	; (8001c2c <start_fill+0xe48>)
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4403      	add	r3, r0
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	440b      	add	r3, r1
 8001a76:	4413      	add	r3, r2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8098 	beq.w	8001bb0 <start_fill+0xdcc>
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001a80:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a84:	4967      	ldr	r1, [pc, #412]	; (8001c24 <start_fill+0xe40>)
 8001a86:	4613      	mov	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3302      	adds	r3, #2
 8001a90:	f993 3000 	ldrsb.w	r3, [r3]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a9a:	4962      	ldr	r1, [pc, #392]	; (8001c24 <start_fill+0xe40>)
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f993 3000 	ldrsb.w	r3, [r3]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4a5e      	ldr	r2, [pc, #376]	; (8001c28 <start_fill+0xe44>)
 8001aae:	4603      	mov	r3, r0
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4403      	add	r3, r0
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d11f      	bne.n	8001b04 <start_fill+0xd20>
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001ac4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ac8:	4956      	ldr	r1, [pc, #344]	; (8001c24 <start_fill+0xe40>)
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad8:	1e5a      	subs	r2, r3, #1
 8001ada:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001ade:	4851      	ldr	r0, [pc, #324]	; (8001c24 <start_fill+0xe40>)
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	440b      	add	r3, r1
 8001ae6:	4403      	add	r3, r0
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f993 3000 	ldrsb.w	r3, [r3]
 8001aee:	4618      	mov	r0, r3
 8001af0:	494e      	ldr	r1, [pc, #312]	; (8001c2c <start_fill+0xe48>)
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	440b      	add	r3, r1
 8001afc:	4403      	add	r3, r0
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d055      	beq.n	8001bb0 <start_fill+0xdcc>
						((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001b04:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b08:	4946      	ldr	r1, [pc, #280]	; (8001c24 <start_fill+0xe40>)
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	3302      	adds	r3, #2
 8001b14:	f993 3000 	ldrsb.w	r3, [r3]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b1e:	4941      	ldr	r1, [pc, #260]	; (8001c24 <start_fill+0xe40>)
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4a3d      	ldr	r2, [pc, #244]	; (8001c28 <start_fill+0xe44>)
 8001b32:	4603      	mov	r3, r0
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4403      	add	r3, r0
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d11f      	bne.n	8001b88 <start_fill+0xda4>
						((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001b48:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b4c:	4935      	ldr	r1, [pc, #212]	; (8001c24 <start_fill+0xe40>)
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	3302      	adds	r3, #2
 8001b58:	f993 3000 	ldrsb.w	r3, [r3]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001b62:	4830      	ldr	r0, [pc, #192]	; (8001c24 <start_fill+0xe40>)
 8001b64:	460b      	mov	r3, r1
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	440b      	add	r3, r1
 8001b6a:	4403      	add	r3, r0
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b72:	4618      	mov	r0, r3
 8001b74:	492d      	ldr	r1, [pc, #180]	; (8001c2c <start_fill+0xe48>)
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	440b      	add	r3, r1
 8001b80:	4403      	add	r3, r0
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d013      	beq.n	8001bb0 <start_fill+0xdcc>
					stack[i][1] = -1;
 8001b88:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b8c:	4925      	ldr	r1, [pc, #148]	; (8001c24 <start_fill+0xe40>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	3301      	adds	r3, #1
 8001b98:	22ff      	movs	r2, #255	; 0xff
 8001b9a:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 8001b9c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ba0:	4920      	ldr	r1, [pc, #128]	; (8001c24 <start_fill+0xe40>)
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3302      	adds	r3, #2
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
			while(stack[i][1] == -1){
 8001bb0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bb4:	491b      	ldr	r1, [pc, #108]	; (8001c24 <start_fill+0xe40>)
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	f43f ae6a 	beq.w	80018a0 <start_fill+0xabc>
				}
			}
			x = stack[i][1];
 8001bcc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bd0:	4914      	ldr	r1, [pc, #80]	; (8001c24 <start_fill+0xe40>)
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f993 2000 	ldrsb.w	r2, [r3]
 8001be0:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <start_fill+0xe4c>)
 8001be2:	701a      	strb	r2, [r3, #0]
			y = stack[i][2];
 8001be4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001be8:	490e      	ldr	r1, [pc, #56]	; (8001c24 <start_fill+0xe40>)
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	f993 2000 	ldrsb.w	r2, [r3]
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <start_fill+0xe50>)
 8001bfa:	701a      	strb	r2, [r3, #0]
			switch(direction){
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <start_fill+0xe3c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	f200 83d9 	bhi.w	80023b8 <start_fill+0x15d4>
 8001c06:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <start_fill+0xe28>)
 8001c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0c:	08001c39 	.word	0x08001c39
 8001c10:	08001d95 	.word	0x08001d95
 8001c14:	08001f11 	.word	0x08001f11
 8001c18:	0800206d 	.word	0x0800206d
 8001c1c:	42e80000 	.word	0x42e80000
 8001c20:	20000156 	.word	0x20000156
 8001c24:	20000028 	.word	0x20000028
 8001c28:	200002ec 	.word	0x200002ec
 8001c2c:	20000350 	.word	0x20000350
 8001c30:	20000154 	.word	0x20000154
 8001c34:	20000155 	.word	0x20000155
				case west:
					if(stack[i][0] == straight){
 8001c38:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c3c:	49ac      	ldr	r1, [pc, #688]	; (8001ef0 <start_fill+0x110c>)
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	440b      	add	r3, r1
 8001c46:	f993 3000 	ldrsb.w	r3, [r3]
 8001c4a:	f113 0f06 	cmn.w	r3, #6
 8001c4e:	f040 8082 	bne.w	8001d56 <start_fill+0xf72>
						if((maze[y][x] & top_wall) == 0 && !visited[y - 1][x]){
 8001c52:	4ba8      	ldr	r3, [pc, #672]	; (8001ef4 <start_fill+0x1110>)
 8001c54:	f993 3000 	ldrsb.w	r3, [r3]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4ba7      	ldr	r3, [pc, #668]	; (8001ef8 <start_fill+0x1114>)
 8001c5c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c60:	4618      	mov	r0, r3
 8001c62:	4aa6      	ldr	r2, [pc, #664]	; (8001efc <start_fill+0x1118>)
 8001c64:	460b      	mov	r3, r1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4403      	add	r3, r0
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d12b      	bne.n	8001cd2 <start_fill+0xeee>
 8001c7a:	4b9e      	ldr	r3, [pc, #632]	; (8001ef4 <start_fill+0x1110>)
 8001c7c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c80:	1e5a      	subs	r2, r3, #1
 8001c82:	4b9d      	ldr	r3, [pc, #628]	; (8001ef8 <start_fill+0x1114>)
 8001c84:	f993 3000 	ldrsb.w	r3, [r3]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	499d      	ldr	r1, [pc, #628]	; (8001f00 <start_fill+0x111c>)
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	440b      	add	r3, r1
 8001c96:	4403      	add	r3, r0
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	f083 0301 	eor.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d016      	beq.n	8001cd2 <start_fill+0xeee>
							stack[i][0] = turn_left_90;
 8001ca4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ca8:	4991      	ldr	r1, [pc, #580]	; (8001ef0 <start_fill+0x110c>)
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	22fc      	movs	r2, #252	; 0xfc
 8001cb4:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001cb6:	4b93      	ldr	r3, [pc, #588]	; (8001f04 <start_fill+0x1120>)
 8001cb8:	2101      	movs	r1, #1
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f003 f82e 	bl	8004d1c <go_straight>
							turn_right90(&direction);
 8001cc0:	4891      	ldr	r0, [pc, #580]	; (8001f08 <start_fill+0x1124>)
 8001cc2:	f002 ff51 	bl	8004b68 <turn_right90>
							go_straight(d2, 0);
 8001cc6:	4b8f      	ldr	r3, [pc, #572]	; (8001f04 <start_fill+0x1120>)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f003 f826 	bl	8004d1c <go_straight>
						}
					} else {
						stack[i][0] = stack[i][0] == turn_left_90 ? turn_right_90 : turn_left_90;
						go_straight(square_size, 0);
					}
					break;
 8001cd0:	e36b      	b.n	80023aa <start_fill+0x15c6>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8001cd2:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <start_fill+0x1110>)
 8001cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4b87      	ldr	r3, [pc, #540]	; (8001ef8 <start_fill+0x1114>)
 8001cdc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	4a86      	ldr	r2, [pc, #536]	; (8001efc <start_fill+0x1118>)
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	4403      	add	r3, r0
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 8357 	bne.w	80023aa <start_fill+0x15c6>
 8001cfc:	4b7d      	ldr	r3, [pc, #500]	; (8001ef4 <start_fill+0x1110>)
 8001cfe:	f993 3000 	ldrsb.w	r3, [r3]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <start_fill+0x1114>)
 8001d06:	f993 3000 	ldrsb.w	r3, [r3]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	497c      	ldr	r1, [pc, #496]	; (8001f00 <start_fill+0x111c>)
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	440b      	add	r3, r1
 8001d18:	4403      	add	r3, r0
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	f083 0301 	eor.w	r3, r3, #1
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8341 	beq.w	80023aa <start_fill+0x15c6>
							stack[i][0] = turn_right_90;
 8001d28:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d2c:	4970      	ldr	r1, [pc, #448]	; (8001ef0 <start_fill+0x110c>)
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	22ff      	movs	r2, #255	; 0xff
 8001d38:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001d3a:	4b72      	ldr	r3, [pc, #456]	; (8001f04 <start_fill+0x1120>)
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 ffec 	bl	8004d1c <go_straight>
							turn_left90(&direction);
 8001d44:	4870      	ldr	r0, [pc, #448]	; (8001f08 <start_fill+0x1124>)
 8001d46:	f002 fe35 	bl	80049b4 <turn_left90>
							go_straight(d2, 0);
 8001d4a:	4b6e      	ldr	r3, [pc, #440]	; (8001f04 <start_fill+0x1120>)
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 ffe4 	bl	8004d1c <go_straight>
					break;
 8001d54:	e329      	b.n	80023aa <start_fill+0x15c6>
						stack[i][0] = stack[i][0] == turn_left_90 ? turn_right_90 : turn_left_90;
 8001d56:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d5a:	4965      	ldr	r1, [pc, #404]	; (8001ef0 <start_fill+0x110c>)
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f993 3000 	ldrsb.w	r3, [r3]
 8001d68:	f113 0f04 	cmn.w	r3, #4
 8001d6c:	d102      	bne.n	8001d74 <start_fill+0xf90>
 8001d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d72:	e001      	b.n	8001d78 <start_fill+0xf94>
 8001d74:	f06f 0003 	mvn.w	r0, #3
 8001d78:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d7c:	495c      	ldr	r1, [pc, #368]	; (8001ef0 <start_fill+0x110c>)
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	4602      	mov	r2, r0
 8001d88:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	485f      	ldr	r0, [pc, #380]	; (8001f0c <start_fill+0x1128>)
 8001d8e:	f002 ffc5 	bl	8004d1c <go_straight>
					break;
 8001d92:	e30a      	b.n	80023aa <start_fill+0x15c6>
				case east:
					if(stack[i][0] == straight){
 8001d94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d98:	4955      	ldr	r1, [pc, #340]	; (8001ef0 <start_fill+0x110c>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	f993 3000 	ldrsb.w	r3, [r3]
 8001da6:	f113 0f06 	cmn.w	r3, #6
 8001daa:	f040 8082 	bne.w	8001eb2 <start_fill+0x10ce>
						if(((maze[y][x] & top_wall) == 0) && !visited[y - 1][x]){
 8001dae:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <start_fill+0x1110>)
 8001db0:	f993 3000 	ldrsb.w	r3, [r3]
 8001db4:	4619      	mov	r1, r3
 8001db6:	4b50      	ldr	r3, [pc, #320]	; (8001ef8 <start_fill+0x1114>)
 8001db8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	4a4f      	ldr	r2, [pc, #316]	; (8001efc <start_fill+0x1118>)
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	4403      	add	r3, r0
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d12b      	bne.n	8001e2e <start_fill+0x104a>
 8001dd6:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <start_fill+0x1110>)
 8001dd8:	f993 3000 	ldrsb.w	r3, [r3]
 8001ddc:	1e5a      	subs	r2, r3, #1
 8001dde:	4b46      	ldr	r3, [pc, #280]	; (8001ef8 <start_fill+0x1114>)
 8001de0:	f993 3000 	ldrsb.w	r3, [r3]
 8001de4:	4618      	mov	r0, r3
 8001de6:	4946      	ldr	r1, [pc, #280]	; (8001f00 <start_fill+0x111c>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	440b      	add	r3, r1
 8001df2:	4403      	add	r3, r0
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	f083 0301 	eor.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d016      	beq.n	8001e2e <start_fill+0x104a>
							stack[i][0] = turn_right_90;
 8001e00:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e04:	493a      	ldr	r1, [pc, #232]	; (8001ef0 <start_fill+0x110c>)
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	22ff      	movs	r2, #255	; 0xff
 8001e10:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001e12:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <start_fill+0x1120>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 ff80 	bl	8004d1c <go_straight>
							turn_left90(&direction);
 8001e1c:	483a      	ldr	r0, [pc, #232]	; (8001f08 <start_fill+0x1124>)
 8001e1e:	f002 fdc9 	bl	80049b4 <turn_left90>
							go_straight(d2, 0);
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <start_fill+0x1120>)
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f002 ff78 	bl	8004d1c <go_straight>
						}
					} else {
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
						go_straight(square_size, 0);
					}
					break;
 8001e2c:	e2bf      	b.n	80023ae <start_fill+0x15ca>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8001e2e:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <start_fill+0x1110>)
 8001e30:	f993 3000 	ldrsb.w	r3, [r3]
 8001e34:	4619      	mov	r1, r3
 8001e36:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <start_fill+0x1114>)
 8001e38:	f993 3000 	ldrsb.w	r3, [r3]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	4a2f      	ldr	r2, [pc, #188]	; (8001efc <start_fill+0x1118>)
 8001e40:	460b      	mov	r3, r1
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	4403      	add	r3, r0
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 82ab 	bne.w	80023ae <start_fill+0x15ca>
 8001e58:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <start_fill+0x1110>)
 8001e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <start_fill+0x1114>)
 8001e62:	f993 3000 	ldrsb.w	r3, [r3]
 8001e66:	4618      	mov	r0, r3
 8001e68:	4925      	ldr	r1, [pc, #148]	; (8001f00 <start_fill+0x111c>)
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	440b      	add	r3, r1
 8001e74:	4403      	add	r3, r0
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	f083 0301 	eor.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8295 	beq.w	80023ae <start_fill+0x15ca>
							stack[i][0] = turn_left_90;
 8001e84:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e88:	4919      	ldr	r1, [pc, #100]	; (8001ef0 <start_fill+0x110c>)
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	440b      	add	r3, r1
 8001e92:	22fc      	movs	r2, #252	; 0xfc
 8001e94:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <start_fill+0x1120>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 ff3e 	bl	8004d1c <go_straight>
							turn_right90(&direction);
 8001ea0:	4819      	ldr	r0, [pc, #100]	; (8001f08 <start_fill+0x1124>)
 8001ea2:	f002 fe61 	bl	8004b68 <turn_right90>
							go_straight(d2, 0);
 8001ea6:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <start_fill+0x1120>)
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 ff36 	bl	8004d1c <go_straight>
					break;
 8001eb0:	e27d      	b.n	80023ae <start_fill+0x15ca>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001eb2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001eb6:	490e      	ldr	r1, [pc, #56]	; (8001ef0 <start_fill+0x110c>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ec4:	f113 0f04 	cmn.w	r3, #4
 8001ec8:	d102      	bne.n	8001ed0 <start_fill+0x10ec>
 8001eca:	f04f 30ff 	mov.w	r0, #4294967295
 8001ece:	e001      	b.n	8001ed4 <start_fill+0x10f0>
 8001ed0:	f06f 0003 	mvn.w	r0, #3
 8001ed4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ed8:	4905      	ldr	r1, [pc, #20]	; (8001ef0 <start_fill+0x110c>)
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4808      	ldr	r0, [pc, #32]	; (8001f0c <start_fill+0x1128>)
 8001eea:	f002 ff17 	bl	8004d1c <go_straight>
					break;
 8001eee:	e25e      	b.n	80023ae <start_fill+0x15ca>
 8001ef0:	20000028 	.word	0x20000028
 8001ef4:	20000155 	.word	0x20000155
 8001ef8:	20000154 	.word	0x20000154
 8001efc:	200002ec 	.word	0x200002ec
 8001f00:	20000350 	.word	0x20000350
 8001f04:	42e80000 	.word	0x42e80000
 8001f08:	20000156 	.word	0x20000156
 8001f0c:	43960000 	.word	0x43960000
				case north:
					if(stack[i][0] == straight){
 8001f10:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f14:	49c3      	ldr	r1, [pc, #780]	; (8002224 <start_fill+0x1440>)
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f22:	f113 0f06 	cmn.w	r3, #6
 8001f26:	f040 8082 	bne.w	800202e <start_fill+0x124a>
						if((maze[y][x] & left_wall) == 0 && !visited[y][x - 1]){
 8001f2a:	4bbf      	ldr	r3, [pc, #764]	; (8002228 <start_fill+0x1444>)
 8001f2c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f30:	4619      	mov	r1, r3
 8001f32:	4bbe      	ldr	r3, [pc, #760]	; (800222c <start_fill+0x1448>)
 8001f34:	f993 3000 	ldrsb.w	r3, [r3]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	4abd      	ldr	r2, [pc, #756]	; (8002230 <start_fill+0x144c>)
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	4403      	add	r3, r0
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d12b      	bne.n	8001faa <start_fill+0x11c6>
 8001f52:	4bb5      	ldr	r3, [pc, #724]	; (8002228 <start_fill+0x1444>)
 8001f54:	f993 3000 	ldrsb.w	r3, [r3]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	4bb4      	ldr	r3, [pc, #720]	; (800222c <start_fill+0x1448>)
 8001f5c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f60:	1e5a      	subs	r2, r3, #1
 8001f62:	49b4      	ldr	r1, [pc, #720]	; (8002234 <start_fill+0x1450>)
 8001f64:	4603      	mov	r3, r0
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4403      	add	r3, r0
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	440b      	add	r3, r1
 8001f6e:	4413      	add	r3, r2
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	f083 0301 	eor.w	r3, r3, #1
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d016      	beq.n	8001faa <start_fill+0x11c6>
							stack[i][0] = turn_right_90;
 8001f7c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f80:	49a8      	ldr	r1, [pc, #672]	; (8002224 <start_fill+0x1440>)
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	22ff      	movs	r2, #255	; 0xff
 8001f8c:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001f8e:	4baa      	ldr	r3, [pc, #680]	; (8002238 <start_fill+0x1454>)
 8001f90:	2101      	movs	r1, #1
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 fec2 	bl	8004d1c <go_straight>
							turn_left90(&direction);
 8001f98:	48a8      	ldr	r0, [pc, #672]	; (800223c <start_fill+0x1458>)
 8001f9a:	f002 fd0b 	bl	80049b4 <turn_left90>
							go_straight(d2, 0);
 8001f9e:	4ba6      	ldr	r3, [pc, #664]	; (8002238 <start_fill+0x1454>)
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 feba 	bl	8004d1c <go_straight>
						}
					} else {
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
						go_straight(square_size, 0);
					}
					break;
 8001fa8:	e203      	b.n	80023b2 <start_fill+0x15ce>
						} else if((maze[y][x] & right_wall) == 0 && !visited[y][x + 1]) {
 8001faa:	4b9f      	ldr	r3, [pc, #636]	; (8002228 <start_fill+0x1444>)
 8001fac:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4b9e      	ldr	r3, [pc, #632]	; (800222c <start_fill+0x1448>)
 8001fb4:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	4a9d      	ldr	r2, [pc, #628]	; (8002230 <start_fill+0x144c>)
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4403      	add	r3, r0
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 81ef 	bne.w	80023b2 <start_fill+0x15ce>
 8001fd4:	4b94      	ldr	r3, [pc, #592]	; (8002228 <start_fill+0x1444>)
 8001fd6:	f993 3000 	ldrsb.w	r3, [r3]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	4b93      	ldr	r3, [pc, #588]	; (800222c <start_fill+0x1448>)
 8001fde:	f993 3000 	ldrsb.w	r3, [r3]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	4993      	ldr	r1, [pc, #588]	; (8002234 <start_fill+0x1450>)
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4403      	add	r3, r0
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	440b      	add	r3, r1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	f083 0301 	eor.w	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 81d9 	beq.w	80023b2 <start_fill+0x15ce>
							stack[i][0] = turn_left_90;
 8002000:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002004:	4987      	ldr	r1, [pc, #540]	; (8002224 <start_fill+0x1440>)
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	440b      	add	r3, r1
 800200e:	22fc      	movs	r2, #252	; 0xfc
 8002010:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8002012:	4b89      	ldr	r3, [pc, #548]	; (8002238 <start_fill+0x1454>)
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f002 fe80 	bl	8004d1c <go_straight>
							turn_right90(&direction);
 800201c:	4887      	ldr	r0, [pc, #540]	; (800223c <start_fill+0x1458>)
 800201e:	f002 fda3 	bl	8004b68 <turn_right90>
							go_straight(d2, 0);
 8002022:	4b85      	ldr	r3, [pc, #532]	; (8002238 <start_fill+0x1454>)
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f002 fe78 	bl	8004d1c <go_straight>
					break;
 800202c:	e1c1      	b.n	80023b2 <start_fill+0x15ce>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 800202e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002032:	497c      	ldr	r1, [pc, #496]	; (8002224 <start_fill+0x1440>)
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	440b      	add	r3, r1
 800203c:	f993 3000 	ldrsb.w	r3, [r3]
 8002040:	f113 0f04 	cmn.w	r3, #4
 8002044:	d102      	bne.n	800204c <start_fill+0x1268>
 8002046:	f04f 30ff 	mov.w	r0, #4294967295
 800204a:	e001      	b.n	8002050 <start_fill+0x126c>
 800204c:	f06f 0003 	mvn.w	r0, #3
 8002050:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002054:	4973      	ldr	r1, [pc, #460]	; (8002224 <start_fill+0x1440>)
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	440b      	add	r3, r1
 800205e:	4602      	mov	r2, r0
 8002060:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8002062:	2100      	movs	r1, #0
 8002064:	4876      	ldr	r0, [pc, #472]	; (8002240 <start_fill+0x145c>)
 8002066:	f002 fe59 	bl	8004d1c <go_straight>
					break;
 800206a:	e1a2      	b.n	80023b2 <start_fill+0x15ce>
				case south:
					if(stack[i][0] == straight){
 800206c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002070:	496c      	ldr	r1, [pc, #432]	; (8002224 <start_fill+0x1440>)
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	440b      	add	r3, r1
 800207a:	f993 3000 	ldrsb.w	r3, [r3]
 800207e:	f113 0f06 	cmn.w	r3, #6
 8002082:	f040 8082 	bne.w	800218a <start_fill+0x13a6>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 8002086:	4b68      	ldr	r3, [pc, #416]	; (8002228 <start_fill+0x1444>)
 8002088:	f993 3000 	ldrsb.w	r3, [r3]
 800208c:	4619      	mov	r1, r3
 800208e:	4b67      	ldr	r3, [pc, #412]	; (800222c <start_fill+0x1448>)
 8002090:	f993 3000 	ldrsb.w	r3, [r3]
 8002094:	4618      	mov	r0, r3
 8002096:	4a66      	ldr	r2, [pc, #408]	; (8002230 <start_fill+0x144c>)
 8002098:	460b      	mov	r3, r1
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	4403      	add	r3, r0
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d12b      	bne.n	8002106 <start_fill+0x1322>
 80020ae:	4b5e      	ldr	r3, [pc, #376]	; (8002228 <start_fill+0x1444>)
 80020b0:	f993 3000 	ldrsb.w	r3, [r3]
 80020b4:	4618      	mov	r0, r3
 80020b6:	4b5d      	ldr	r3, [pc, #372]	; (800222c <start_fill+0x1448>)
 80020b8:	f993 3000 	ldrsb.w	r3, [r3]
 80020bc:	1e5a      	subs	r2, r3, #1
 80020be:	495d      	ldr	r1, [pc, #372]	; (8002234 <start_fill+0x1450>)
 80020c0:	4603      	mov	r3, r0
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4403      	add	r3, r0
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	440b      	add	r3, r1
 80020ca:	4413      	add	r3, r2
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	f083 0301 	eor.w	r3, r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d016      	beq.n	8002106 <start_fill+0x1322>
							stack[i][0] = turn_left_90;
 80020d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80020dc:	4951      	ldr	r1, [pc, #324]	; (8002224 <start_fill+0x1440>)
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	22fc      	movs	r2, #252	; 0xfc
 80020e8:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 80020ea:	4b53      	ldr	r3, [pc, #332]	; (8002238 <start_fill+0x1454>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	4618      	mov	r0, r3
 80020f0:	f002 fe14 	bl	8004d1c <go_straight>
							turn_right90(&direction);
 80020f4:	4851      	ldr	r0, [pc, #324]	; (800223c <start_fill+0x1458>)
 80020f6:	f002 fd37 	bl	8004b68 <turn_right90>
							go_straight(d2, 0);
 80020fa:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <start_fill+0x1454>)
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f002 fe0c 	bl	8004d1c <go_straight>
 8002104:	e14e      	b.n	80023a4 <start_fill+0x15c0>
						} else if(((maze[y][x] & right_wall) == 0) && !visited[y][x + 1]){
 8002106:	4b48      	ldr	r3, [pc, #288]	; (8002228 <start_fill+0x1444>)
 8002108:	f993 3000 	ldrsb.w	r3, [r3]
 800210c:	4619      	mov	r1, r3
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <start_fill+0x1448>)
 8002110:	f993 3000 	ldrsb.w	r3, [r3]
 8002114:	4618      	mov	r0, r3
 8002116:	4a46      	ldr	r2, [pc, #280]	; (8002230 <start_fill+0x144c>)
 8002118:	460b      	mov	r3, r1
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	4403      	add	r3, r0
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 8143 	bne.w	80023b6 <start_fill+0x15d2>
 8002130:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <start_fill+0x1444>)
 8002132:	f993 3000 	ldrsb.w	r3, [r3]
 8002136:	4618      	mov	r0, r3
 8002138:	4b3c      	ldr	r3, [pc, #240]	; (800222c <start_fill+0x1448>)
 800213a:	f993 3000 	ldrsb.w	r3, [r3]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	493c      	ldr	r1, [pc, #240]	; (8002234 <start_fill+0x1450>)
 8002142:	4603      	mov	r3, r0
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4403      	add	r3, r0
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	440b      	add	r3, r1
 800214c:	4413      	add	r3, r2
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f083 0301 	eor.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 812d 	beq.w	80023b6 <start_fill+0x15d2>
							stack[i][0] = turn_right_90;
 800215c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002160:	4930      	ldr	r1, [pc, #192]	; (8002224 <start_fill+0x1440>)
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	440b      	add	r3, r1
 800216a:	22ff      	movs	r2, #255	; 0xff
 800216c:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 800216e:	4b32      	ldr	r3, [pc, #200]	; (8002238 <start_fill+0x1454>)
 8002170:	2101      	movs	r1, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f002 fdd2 	bl	8004d1c <go_straight>
							turn_left90(&direction);
 8002178:	4830      	ldr	r0, [pc, #192]	; (800223c <start_fill+0x1458>)
 800217a:	f002 fc1b 	bl	80049b4 <turn_left90>
							go_straight(d2, 0);
 800217e:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <start_fill+0x1454>)
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f002 fdca 	bl	8004d1c <go_straight>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
							stack[i][0] = turn_left_90;
							go_straight(square_size, 0);
						}
					}
					break;
 8002188:	e115      	b.n	80023b6 <start_fill+0x15d2>
					} else if(stack[i][0] == turn_left_90){
 800218a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800218e:	4925      	ldr	r1, [pc, #148]	; (8002224 <start_fill+0x1440>)
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	440b      	add	r3, r1
 8002198:	f993 3000 	ldrsb.w	r3, [r3]
 800219c:	f113 0f04 	cmn.w	r3, #4
 80021a0:	f040 8089 	bne.w	80022b6 <start_fill+0x14d2>
						if(((maze[y][x] & right_wall) == 0) && !visited[y][x + 1]){
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <start_fill+0x1444>)
 80021a6:	f993 3000 	ldrsb.w	r3, [r3]
 80021aa:	4619      	mov	r1, r3
 80021ac:	4b1f      	ldr	r3, [pc, #124]	; (800222c <start_fill+0x1448>)
 80021ae:	f993 3000 	ldrsb.w	r3, [r3]
 80021b2:	4618      	mov	r0, r3
 80021b4:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <start_fill+0x144c>)
 80021b6:	460b      	mov	r3, r1
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	4403      	add	r3, r0
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d13b      	bne.n	8002244 <start_fill+0x1460>
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <start_fill+0x1444>)
 80021ce:	f993 3000 	ldrsb.w	r3, [r3]
 80021d2:	4618      	mov	r0, r3
 80021d4:	4b15      	ldr	r3, [pc, #84]	; (800222c <start_fill+0x1448>)
 80021d6:	f993 3000 	ldrsb.w	r3, [r3]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	4915      	ldr	r1, [pc, #84]	; (8002234 <start_fill+0x1450>)
 80021de:	4603      	mov	r3, r0
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4403      	add	r3, r0
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	440b      	add	r3, r1
 80021e8:	4413      	add	r3, r2
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	f083 0301 	eor.w	r3, r3, #1
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d026      	beq.n	8002244 <start_fill+0x1460>
							stack[i][0] = straight;
 80021f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021fa:	490a      	ldr	r1, [pc, #40]	; (8002224 <start_fill+0x1440>)
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	440b      	add	r3, r1
 8002204:	22fa      	movs	r2, #250	; 0xfa
 8002206:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <start_fill+0x1454>)
 800220a:	2101      	movs	r1, #1
 800220c:	4618      	mov	r0, r3
 800220e:	f002 fd85 	bl	8004d1c <go_straight>
							turn_left90(&direction);
 8002212:	480a      	ldr	r0, [pc, #40]	; (800223c <start_fill+0x1458>)
 8002214:	f002 fbce 	bl	80049b4 <turn_left90>
							go_straight(d2, 0);
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <start_fill+0x1454>)
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f002 fd7d 	bl	8004d1c <go_straight>
 8002222:	e0bf      	b.n	80023a4 <start_fill+0x15c0>
 8002224:	20000028 	.word	0x20000028
 8002228:	20000155 	.word	0x20000155
 800222c:	20000154 	.word	0x20000154
 8002230:	200002ec 	.word	0x200002ec
 8002234:	20000350 	.word	0x20000350
 8002238:	42e80000 	.word	0x42e80000
 800223c:	20000156 	.word	0x20000156
 8002240:	43960000 	.word	0x43960000
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8002244:	4bb7      	ldr	r3, [pc, #732]	; (8002524 <start_fill+0x1740>)
 8002246:	f993 3000 	ldrsb.w	r3, [r3]
 800224a:	4619      	mov	r1, r3
 800224c:	4bb6      	ldr	r3, [pc, #728]	; (8002528 <start_fill+0x1744>)
 800224e:	f993 3000 	ldrsb.w	r3, [r3]
 8002252:	4618      	mov	r0, r3
 8002254:	4ab5      	ldr	r2, [pc, #724]	; (800252c <start_fill+0x1748>)
 8002256:	460b      	mov	r3, r1
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	4403      	add	r3, r0
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	f040 80a4 	bne.w	80023b6 <start_fill+0x15d2>
 800226e:	4bad      	ldr	r3, [pc, #692]	; (8002524 <start_fill+0x1740>)
 8002270:	f993 3000 	ldrsb.w	r3, [r3]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	4bac      	ldr	r3, [pc, #688]	; (8002528 <start_fill+0x1744>)
 8002278:	f993 3000 	ldrsb.w	r3, [r3]
 800227c:	4618      	mov	r0, r3
 800227e:	49ac      	ldr	r1, [pc, #688]	; (8002530 <start_fill+0x174c>)
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	440b      	add	r3, r1
 800228a:	4403      	add	r3, r0
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	f083 0301 	eor.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 808e 	beq.w	80023b6 <start_fill+0x15d2>
							stack[i][0] = turn_right_90;
 800229a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800229e:	49a5      	ldr	r1, [pc, #660]	; (8002534 <start_fill+0x1750>)
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	440b      	add	r3, r1
 80022a8:	22ff      	movs	r2, #255	; 0xff
 80022aa:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 80022ac:	2100      	movs	r1, #0
 80022ae:	48a2      	ldr	r0, [pc, #648]	; (8002538 <start_fill+0x1754>)
 80022b0:	f002 fd34 	bl	8004d1c <go_straight>
					break;
 80022b4:	e07f      	b.n	80023b6 <start_fill+0x15d2>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 80022b6:	4b9b      	ldr	r3, [pc, #620]	; (8002524 <start_fill+0x1740>)
 80022b8:	f993 3000 	ldrsb.w	r3, [r3]
 80022bc:	4619      	mov	r1, r3
 80022be:	4b9a      	ldr	r3, [pc, #616]	; (8002528 <start_fill+0x1744>)
 80022c0:	f993 3000 	ldrsb.w	r3, [r3]
 80022c4:	4618      	mov	r0, r3
 80022c6:	4a99      	ldr	r2, [pc, #612]	; (800252c <start_fill+0x1748>)
 80022c8:	460b      	mov	r3, r1
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	4403      	add	r3, r0
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d12b      	bne.n	8002336 <start_fill+0x1552>
 80022de:	4b91      	ldr	r3, [pc, #580]	; (8002524 <start_fill+0x1740>)
 80022e0:	f993 3000 	ldrsb.w	r3, [r3]
 80022e4:	4618      	mov	r0, r3
 80022e6:	4b90      	ldr	r3, [pc, #576]	; (8002528 <start_fill+0x1744>)
 80022e8:	f993 3000 	ldrsb.w	r3, [r3]
 80022ec:	1e5a      	subs	r2, r3, #1
 80022ee:	4990      	ldr	r1, [pc, #576]	; (8002530 <start_fill+0x174c>)
 80022f0:	4603      	mov	r3, r0
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4403      	add	r3, r0
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	440b      	add	r3, r1
 80022fa:	4413      	add	r3, r2
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f083 0301 	eor.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d016      	beq.n	8002336 <start_fill+0x1552>
							stack[i][0] = straight;
 8002308:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800230c:	4989      	ldr	r1, [pc, #548]	; (8002534 <start_fill+0x1750>)
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	440b      	add	r3, r1
 8002316:	22fa      	movs	r2, #250	; 0xfa
 8002318:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 800231a:	4b88      	ldr	r3, [pc, #544]	; (800253c <start_fill+0x1758>)
 800231c:	2101      	movs	r1, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f002 fcfc 	bl	8004d1c <go_straight>
							turn_right90(&direction);
 8002324:	4886      	ldr	r0, [pc, #536]	; (8002540 <start_fill+0x175c>)
 8002326:	f002 fc1f 	bl	8004b68 <turn_right90>
							go_straight(d2, 0);
 800232a:	4b84      	ldr	r3, [pc, #528]	; (800253c <start_fill+0x1758>)
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f002 fcf4 	bl	8004d1c <go_straight>
 8002334:	e036      	b.n	80023a4 <start_fill+0x15c0>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8002336:	4b7b      	ldr	r3, [pc, #492]	; (8002524 <start_fill+0x1740>)
 8002338:	f993 3000 	ldrsb.w	r3, [r3]
 800233c:	4619      	mov	r1, r3
 800233e:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <start_fill+0x1744>)
 8002340:	f993 3000 	ldrsb.w	r3, [r3]
 8002344:	4618      	mov	r0, r3
 8002346:	4a79      	ldr	r2, [pc, #484]	; (800252c <start_fill+0x1748>)
 8002348:	460b      	mov	r3, r1
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	4403      	add	r3, r0
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d12b      	bne.n	80023b6 <start_fill+0x15d2>
 800235e:	4b71      	ldr	r3, [pc, #452]	; (8002524 <start_fill+0x1740>)
 8002360:	f993 3000 	ldrsb.w	r3, [r3]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	4b70      	ldr	r3, [pc, #448]	; (8002528 <start_fill+0x1744>)
 8002368:	f993 3000 	ldrsb.w	r3, [r3]
 800236c:	4618      	mov	r0, r3
 800236e:	4970      	ldr	r1, [pc, #448]	; (8002530 <start_fill+0x174c>)
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	440b      	add	r3, r1
 800237a:	4403      	add	r3, r0
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	f083 0301 	eor.w	r3, r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d016      	beq.n	80023b6 <start_fill+0x15d2>
							stack[i][0] = turn_left_90;
 8002388:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800238c:	4969      	ldr	r1, [pc, #420]	; (8002534 <start_fill+0x1750>)
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	440b      	add	r3, r1
 8002396:	22fc      	movs	r2, #252	; 0xfc
 8002398:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 800239a:	2100      	movs	r1, #0
 800239c:	4866      	ldr	r0, [pc, #408]	; (8002538 <start_fill+0x1754>)
 800239e:	f002 fcbd 	bl	8004d1c <go_straight>
					break;
 80023a2:	e008      	b.n	80023b6 <start_fill+0x15d2>
 80023a4:	e007      	b.n	80023b6 <start_fill+0x15d2>
			if(frontfree){
 80023a6:	bf00      	nop
 80023a8:	e006      	b.n	80023b8 <start_fill+0x15d4>
					break;
 80023aa:	bf00      	nop
 80023ac:	e004      	b.n	80023b8 <start_fill+0x15d4>
					break;
 80023ae:	bf00      	nop
 80023b0:	e002      	b.n	80023b8 <start_fill+0x15d4>
					break;
 80023b2:	bf00      	nop
 80023b4:	e000      	b.n	80023b8 <start_fill+0x15d4>
					break;
 80023b6:	bf00      	nop
			}
		}
		for(int n = 0; n < grid_size; n++){
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	e0a8      	b.n	8002510 <start_fill+0x172c>
			for(int m = 0; m < grid_size; m++){
 80023be:	2300      	movs	r3, #0
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	e09e      	b.n	8002502 <start_fill+0x171e>
				if(!visited[n][m]){
 80023c4:	495a      	ldr	r1, [pc, #360]	; (8002530 <start_fill+0x174c>)
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	18ca      	adds	r2, r1, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	4413      	add	r3, r2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	f083 0301 	eor.w	r3, r3, #1
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 808c 	beq.w	80024fc <start_fill+0x1718>
					maze[n][m] |= 15;
 80023e4:	4951      	ldr	r1, [pc, #324]	; (800252c <start_fill+0x1748>)
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	18ca      	adds	r2, r1, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	4413      	add	r3, r2
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	f043 030f 	orr.w	r3, r3, #15
 80023fc:	b2d8      	uxtb	r0, r3
 80023fe:	494b      	ldr	r1, [pc, #300]	; (800252c <start_fill+0x1748>)
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	18ca      	adds	r2, r1, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4602      	mov	r2, r0
 8002412:	701a      	strb	r2, [r3, #0]
					if(n > 0){ maze[n - 1][m] |= bottom_wall; }
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	dd19      	ble.n	800244e <start_fill+0x166a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	4943      	ldr	r1, [pc, #268]	; (800252c <start_fill+0x1748>)
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	18ca      	adds	r2, r1, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	4413      	add	r3, r2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	3a01      	subs	r2, #1
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	b2d8      	uxtb	r0, r3
 800243a:	493c      	ldr	r1, [pc, #240]	; (800252c <start_fill+0x1748>)
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	18ca      	adds	r2, r1, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	4413      	add	r3, r2
 800244a:	4602      	mov	r2, r0
 800244c:	701a      	strb	r2, [r3, #0]
					if(n + 1 < grid_size){ maze[n + 1][m] |= top_wall; }
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b08      	cmp	r3, #8
 8002452:	dc19      	bgt.n	8002488 <start_fill+0x16a4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	4934      	ldr	r1, [pc, #208]	; (800252c <start_fill+0x1748>)
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	18ca      	adds	r2, r1, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4413      	add	r3, r2
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	3201      	adds	r2, #1
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	b2d8      	uxtb	r0, r3
 8002474:	492d      	ldr	r1, [pc, #180]	; (800252c <start_fill+0x1748>)
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	18ca      	adds	r2, r1, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4413      	add	r3, r2
 8002484:	4602      	mov	r2, r0
 8002486:	701a      	strb	r2, [r3, #0]
					if(m > 0){ maze[n][m - 1] |= right_wall; }
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	dd19      	ble.n	80024c2 <start_fill+0x16de>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	1e59      	subs	r1, r3, #1
 8002492:	4826      	ldr	r0, [pc, #152]	; (800252c <start_fill+0x1748>)
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4403      	add	r3, r0
 80024a0:	440b      	add	r3, r1
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	1e51      	subs	r1, r2, #1
 80024a8:	f043 0304 	orr.w	r3, r3, #4
 80024ac:	b2dc      	uxtb	r4, r3
 80024ae:	481f      	ldr	r0, [pc, #124]	; (800252c <start_fill+0x1748>)
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4403      	add	r3, r0
 80024bc:	440b      	add	r3, r1
 80024be:	4622      	mov	r2, r4
 80024c0:	701a      	strb	r2, [r3, #0]
					if(m + 1 < grid_size){ maze[n][m + 1] |= left_wall; }
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	dc19      	bgt.n	80024fc <start_fill+0x1718>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	1c59      	adds	r1, r3, #1
 80024cc:	4817      	ldr	r0, [pc, #92]	; (800252c <start_fill+0x1748>)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4403      	add	r3, r0
 80024da:	440b      	add	r3, r1
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	1c51      	adds	r1, r2, #1
 80024e2:	f043 0308 	orr.w	r3, r3, #8
 80024e6:	b2dc      	uxtb	r4, r3
 80024e8:	4810      	ldr	r0, [pc, #64]	; (800252c <start_fill+0x1748>)
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4403      	add	r3, r0
 80024f6:	440b      	add	r3, r1
 80024f8:	4622      	mov	r2, r4
 80024fa:	701a      	strb	r2, [r3, #0]
			for(int m = 0; m < grid_size; m++){
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b09      	cmp	r3, #9
 8002506:	f77f af5d 	ble.w	80023c4 <start_fill+0x15e0>
		for(int n = 0; n < grid_size; n++){
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3301      	adds	r3, #1
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b09      	cmp	r3, #9
 8002514:	f77f af53 	ble.w	80023be <start_fill+0x15da>
		frontfree = adc_value[0] < frontWallValue;
 8002518:	f7fe bcc0 	b.w	8000e9c <start_fill+0xb8>
				}
			}
		}
	}
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	bd90      	pop	{r4, r7, pc}
 8002524:	20000155 	.word	0x20000155
 8002528:	20000154 	.word	0x20000154
 800252c:	200002ec 	.word	0x200002ec
 8002530:	20000350 	.word	0x20000350
 8002534:	20000028 	.word	0x20000028
 8002538:	43960000 	.word	0x43960000
 800253c:	42e80000 	.word	0x42e80000
 8002540:	20000156 	.word	0x20000156

08002544 <found>:

void found(int16_t index){
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
	switch(direction){
 800254e:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <found+0x80>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d02c      	beq.n	80025b0 <found+0x6c>
 8002556:	2b02      	cmp	r3, #2
 8002558:	dc2f      	bgt.n	80025ba <found+0x76>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <found+0x20>
 800255e:	2b01      	cmp	r3, #1
 8002560:	d013      	beq.n	800258a <found+0x46>
			break;
		case north:
			go_straight(square_size * 2, 1);
			break;
	}
}
 8002562:	e02a      	b.n	80025ba <found+0x76>
			go_straight(d2, 1);
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <found+0x84>)
 8002566:	2101      	movs	r1, #1
 8002568:	4618      	mov	r0, r3
 800256a:	f002 fbd7 	bl	8004d1c <go_straight>
			turn_right90(&direction);
 800256e:	4815      	ldr	r0, [pc, #84]	; (80025c4 <found+0x80>)
 8002570:	f002 fafa 	bl	8004b68 <turn_right90>
			go_straight(d2 + square_size, 1);
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <found+0x84>)
 8002576:	4915      	ldr	r1, [pc, #84]	; (80025cc <found+0x88>)
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe fa8f 	bl	8000a9c <__addsf3>
 800257e:	4603      	mov	r3, r0
 8002580:	2101      	movs	r1, #1
 8002582:	4618      	mov	r0, r3
 8002584:	f002 fbca 	bl	8004d1c <go_straight>
			break;
 8002588:	e017      	b.n	80025ba <found+0x76>
			go_straight(d2, 1);
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <found+0x84>)
 800258c:	2101      	movs	r1, #1
 800258e:	4618      	mov	r0, r3
 8002590:	f002 fbc4 	bl	8004d1c <go_straight>
			turn_left90(&direction);
 8002594:	480b      	ldr	r0, [pc, #44]	; (80025c4 <found+0x80>)
 8002596:	f002 fa0d 	bl	80049b4 <turn_left90>
			go_straight(d2 + square_size, 1);
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <found+0x84>)
 800259c:	490b      	ldr	r1, [pc, #44]	; (80025cc <found+0x88>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fa7c 	bl	8000a9c <__addsf3>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2101      	movs	r1, #1
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 fbb7 	bl	8004d1c <go_straight>
			break;
 80025ae:	e004      	b.n	80025ba <found+0x76>
			go_straight(square_size * 2, 1);
 80025b0:	2101      	movs	r1, #1
 80025b2:	4807      	ldr	r0, [pc, #28]	; (80025d0 <found+0x8c>)
 80025b4:	f002 fbb2 	bl	8004d1c <go_straight>
			break;
 80025b8:	bf00      	nop
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000156 	.word	0x20000156
 80025c8:	42e80000 	.word	0x42e80000
 80025cc:	43960000 	.word	0x43960000
 80025d0:	44160000 	.word	0x44160000

080025d4 <set_wall>:

void set_wall(bool rbl, bool rbr, bool rbf){
 80025d4:	b490      	push	{r4, r7}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
 80025de:	460b      	mov	r3, r1
 80025e0:	71bb      	strb	r3, [r7, #6]
 80025e2:	4613      	mov	r3, r2
 80025e4:	717b      	strb	r3, [r7, #5]
	switch(direction){
 80025e6:	4b86      	ldr	r3, [pc, #536]	; (8002800 <set_wall+0x22c>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	f200 8415 	bhi.w	8002e1a <set_wall+0x846>
 80025f0:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <set_wall+0x24>)
 80025f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f6:	bf00      	nop
 80025f8:	08002609 	.word	0x08002609
 80025fc:	08002811 	.word	0x08002811
 8002600:	08002a15 	.word	0x08002a15
 8002604:	08002c19 	.word	0x08002c19
		case west:
			x--;
 8002608:	4b7e      	ldr	r3, [pc, #504]	; (8002804 <set_wall+0x230>)
 800260a:	f993 3000 	ldrsb.w	r3, [r3]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	b25a      	sxtb	r2, r3
 8002616:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <set_wall+0x230>)
 8002618:	701a      	strb	r2, [r3, #0]
			if(rbl){
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d04c      	beq.n	80026ba <set_wall+0xe6>
				maze[y][x] |= bottom_wall;
 8002620:	4b79      	ldr	r3, [pc, #484]	; (8002808 <set_wall+0x234>)
 8002622:	f993 3000 	ldrsb.w	r3, [r3]
 8002626:	4619      	mov	r1, r3
 8002628:	4b76      	ldr	r3, [pc, #472]	; (8002804 <set_wall+0x230>)
 800262a:	f993 3000 	ldrsb.w	r3, [r3]
 800262e:	4618      	mov	r0, r3
 8002630:	4a76      	ldr	r2, [pc, #472]	; (800280c <set_wall+0x238>)
 8002632:	460b      	mov	r3, r1
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	4403      	add	r3, r0
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4a71      	ldr	r2, [pc, #452]	; (8002808 <set_wall+0x234>)
 8002642:	f992 2000 	ldrsb.w	r2, [r2]
 8002646:	4611      	mov	r1, r2
 8002648:	4a6e      	ldr	r2, [pc, #440]	; (8002804 <set_wall+0x230>)
 800264a:	f992 2000 	ldrsb.w	r2, [r2]
 800264e:	4614      	mov	r4, r2
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	b2d8      	uxtb	r0, r3
 8002656:	4a6d      	ldr	r2, [pc, #436]	; (800280c <set_wall+0x238>)
 8002658:	460b      	mov	r3, r1
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	4423      	add	r3, r4
 8002664:	4602      	mov	r2, r0
 8002666:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002668:	4b67      	ldr	r3, [pc, #412]	; (8002808 <set_wall+0x234>)
 800266a:	f993 3000 	ldrsb.w	r3, [r3]
 800266e:	2b08      	cmp	r3, #8
 8002670:	dc23      	bgt.n	80026ba <set_wall+0xe6>
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <set_wall+0x234>)
 8002674:	f993 3000 	ldrsb.w	r3, [r3]
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	4b62      	ldr	r3, [pc, #392]	; (8002804 <set_wall+0x230>)
 800267c:	f993 3000 	ldrsb.w	r3, [r3]
 8002680:	4618      	mov	r0, r3
 8002682:	4962      	ldr	r1, [pc, #392]	; (800280c <set_wall+0x238>)
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	440b      	add	r3, r1
 800268e:	4403      	add	r3, r0
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	4a5d      	ldr	r2, [pc, #372]	; (8002808 <set_wall+0x234>)
 8002694:	f992 2000 	ldrsb.w	r2, [r2]
 8002698:	3201      	adds	r2, #1
 800269a:	495a      	ldr	r1, [pc, #360]	; (8002804 <set_wall+0x230>)
 800269c:	f991 1000 	ldrsb.w	r1, [r1]
 80026a0:	460c      	mov	r4, r1
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	b2d8      	uxtb	r0, r3
 80026a8:	4958      	ldr	r1, [pc, #352]	; (800280c <set_wall+0x238>)
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	440b      	add	r3, r1
 80026b4:	4423      	add	r3, r4
 80026b6:	4602      	mov	r2, r0
 80026b8:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 80026ba:	79bb      	ldrb	r3, [r7, #6]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d04c      	beq.n	800275a <set_wall+0x186>
				maze[y][x] |= top_wall;
 80026c0:	4b51      	ldr	r3, [pc, #324]	; (8002808 <set_wall+0x234>)
 80026c2:	f993 3000 	ldrsb.w	r3, [r3]
 80026c6:	4619      	mov	r1, r3
 80026c8:	4b4e      	ldr	r3, [pc, #312]	; (8002804 <set_wall+0x230>)
 80026ca:	f993 3000 	ldrsb.w	r3, [r3]
 80026ce:	4618      	mov	r0, r3
 80026d0:	4a4e      	ldr	r2, [pc, #312]	; (800280c <set_wall+0x238>)
 80026d2:	460b      	mov	r3, r1
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	4403      	add	r3, r0
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4a49      	ldr	r2, [pc, #292]	; (8002808 <set_wall+0x234>)
 80026e2:	f992 2000 	ldrsb.w	r2, [r2]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4a46      	ldr	r2, [pc, #280]	; (8002804 <set_wall+0x230>)
 80026ea:	f992 2000 	ldrsb.w	r2, [r2]
 80026ee:	4614      	mov	r4, r2
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	b2d8      	uxtb	r0, r3
 80026f6:	4a45      	ldr	r2, [pc, #276]	; (800280c <set_wall+0x238>)
 80026f8:	460b      	mov	r3, r1
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	4423      	add	r3, r4
 8002704:	4602      	mov	r2, r0
 8002706:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002708:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <set_wall+0x234>)
 800270a:	f993 3000 	ldrsb.w	r3, [r3]
 800270e:	2b00      	cmp	r3, #0
 8002710:	dd23      	ble.n	800275a <set_wall+0x186>
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <set_wall+0x234>)
 8002714:	f993 3000 	ldrsb.w	r3, [r3]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <set_wall+0x230>)
 800271c:	f993 3000 	ldrsb.w	r3, [r3]
 8002720:	4618      	mov	r0, r3
 8002722:	493a      	ldr	r1, [pc, #232]	; (800280c <set_wall+0x238>)
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	440b      	add	r3, r1
 800272e:	4403      	add	r3, r0
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	4a35      	ldr	r2, [pc, #212]	; (8002808 <set_wall+0x234>)
 8002734:	f992 2000 	ldrsb.w	r2, [r2]
 8002738:	3a01      	subs	r2, #1
 800273a:	4932      	ldr	r1, [pc, #200]	; (8002804 <set_wall+0x230>)
 800273c:	f991 1000 	ldrsb.w	r1, [r1]
 8002740:	460c      	mov	r4, r1
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	b2d8      	uxtb	r0, r3
 8002748:	4930      	ldr	r1, [pc, #192]	; (800280c <set_wall+0x238>)
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	440b      	add	r3, r1
 8002754:	4423      	add	r3, r4
 8002756:	4602      	mov	r2, r0
 8002758:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 800275a:	797b      	ldrb	r3, [r7, #5]
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8355 	beq.w	8002e0c <set_wall+0x838>
				maze[y][x] |= left_wall;
 8002762:	4b29      	ldr	r3, [pc, #164]	; (8002808 <set_wall+0x234>)
 8002764:	f993 3000 	ldrsb.w	r3, [r3]
 8002768:	4619      	mov	r1, r3
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <set_wall+0x230>)
 800276c:	f993 3000 	ldrsb.w	r3, [r3]
 8002770:	4618      	mov	r0, r3
 8002772:	4a26      	ldr	r2, [pc, #152]	; (800280c <set_wall+0x238>)
 8002774:	460b      	mov	r3, r1
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	4403      	add	r3, r0
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	4a21      	ldr	r2, [pc, #132]	; (8002808 <set_wall+0x234>)
 8002784:	f992 2000 	ldrsb.w	r2, [r2]
 8002788:	4611      	mov	r1, r2
 800278a:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <set_wall+0x230>)
 800278c:	f992 2000 	ldrsb.w	r2, [r2]
 8002790:	4614      	mov	r4, r2
 8002792:	f043 0308 	orr.w	r3, r3, #8
 8002796:	b2d8      	uxtb	r0, r3
 8002798:	4a1c      	ldr	r2, [pc, #112]	; (800280c <set_wall+0x238>)
 800279a:	460b      	mov	r3, r1
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	4423      	add	r3, r4
 80027a6:	4602      	mov	r2, r0
 80027a8:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <set_wall+0x230>)
 80027ac:	f993 3000 	ldrsb.w	r3, [r3]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f340 832b 	ble.w	8002e0c <set_wall+0x838>
 80027b6:	4b14      	ldr	r3, [pc, #80]	; (8002808 <set_wall+0x234>)
 80027b8:	f993 3000 	ldrsb.w	r3, [r3]
 80027bc:	4618      	mov	r0, r3
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <set_wall+0x230>)
 80027c0:	f993 3000 	ldrsb.w	r3, [r3]
 80027c4:	1e5a      	subs	r2, r3, #1
 80027c6:	4911      	ldr	r1, [pc, #68]	; (800280c <set_wall+0x238>)
 80027c8:	4603      	mov	r3, r0
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4403      	add	r3, r0
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	440b      	add	r3, r1
 80027d2:	4413      	add	r3, r2
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <set_wall+0x234>)
 80027d8:	f992 2000 	ldrsb.w	r2, [r2]
 80027dc:	4610      	mov	r0, r2
 80027de:	4a09      	ldr	r2, [pc, #36]	; (8002804 <set_wall+0x230>)
 80027e0:	f992 2000 	ldrsb.w	r2, [r2]
 80027e4:	3a01      	subs	r2, #1
 80027e6:	f043 0304 	orr.w	r3, r3, #4
 80027ea:	b2dc      	uxtb	r4, r3
 80027ec:	4907      	ldr	r1, [pc, #28]	; (800280c <set_wall+0x238>)
 80027ee:	4603      	mov	r3, r0
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4403      	add	r3, r0
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	440b      	add	r3, r1
 80027f8:	4413      	add	r3, r2
 80027fa:	4622      	mov	r2, r4
 80027fc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80027fe:	e305      	b.n	8002e0c <set_wall+0x838>
 8002800:	20000156 	.word	0x20000156
 8002804:	20000154 	.word	0x20000154
 8002808:	20000155 	.word	0x20000155
 800280c:	200002ec 	.word	0x200002ec
		case east:
			x++;
 8002810:	4b7d      	ldr	r3, [pc, #500]	; (8002a08 <set_wall+0x434>)
 8002812:	f993 3000 	ldrsb.w	r3, [r3]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	3301      	adds	r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	b25a      	sxtb	r2, r3
 800281e:	4b7a      	ldr	r3, [pc, #488]	; (8002a08 <set_wall+0x434>)
 8002820:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d04c      	beq.n	80028c2 <set_wall+0x2ee>
				maze[y][x] |= top_wall;
 8002828:	4b78      	ldr	r3, [pc, #480]	; (8002a0c <set_wall+0x438>)
 800282a:	f993 3000 	ldrsb.w	r3, [r3]
 800282e:	4619      	mov	r1, r3
 8002830:	4b75      	ldr	r3, [pc, #468]	; (8002a08 <set_wall+0x434>)
 8002832:	f993 3000 	ldrsb.w	r3, [r3]
 8002836:	4618      	mov	r0, r3
 8002838:	4a75      	ldr	r2, [pc, #468]	; (8002a10 <set_wall+0x43c>)
 800283a:	460b      	mov	r3, r1
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	4403      	add	r3, r0
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4a70      	ldr	r2, [pc, #448]	; (8002a0c <set_wall+0x438>)
 800284a:	f992 2000 	ldrsb.w	r2, [r2]
 800284e:	4611      	mov	r1, r2
 8002850:	4a6d      	ldr	r2, [pc, #436]	; (8002a08 <set_wall+0x434>)
 8002852:	f992 2000 	ldrsb.w	r2, [r2]
 8002856:	4614      	mov	r4, r2
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	b2d8      	uxtb	r0, r3
 800285e:	4a6c      	ldr	r2, [pc, #432]	; (8002a10 <set_wall+0x43c>)
 8002860:	460b      	mov	r3, r1
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	4423      	add	r3, r4
 800286c:	4602      	mov	r2, r0
 800286e:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002870:	4b66      	ldr	r3, [pc, #408]	; (8002a0c <set_wall+0x438>)
 8002872:	f993 3000 	ldrsb.w	r3, [r3]
 8002876:	2b00      	cmp	r3, #0
 8002878:	dd23      	ble.n	80028c2 <set_wall+0x2ee>
 800287a:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <set_wall+0x438>)
 800287c:	f993 3000 	ldrsb.w	r3, [r3]
 8002880:	1e5a      	subs	r2, r3, #1
 8002882:	4b61      	ldr	r3, [pc, #388]	; (8002a08 <set_wall+0x434>)
 8002884:	f993 3000 	ldrsb.w	r3, [r3]
 8002888:	4618      	mov	r0, r3
 800288a:	4961      	ldr	r1, [pc, #388]	; (8002a10 <set_wall+0x43c>)
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	440b      	add	r3, r1
 8002896:	4403      	add	r3, r0
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	4a5c      	ldr	r2, [pc, #368]	; (8002a0c <set_wall+0x438>)
 800289c:	f992 2000 	ldrsb.w	r2, [r2]
 80028a0:	3a01      	subs	r2, #1
 80028a2:	4959      	ldr	r1, [pc, #356]	; (8002a08 <set_wall+0x434>)
 80028a4:	f991 1000 	ldrsb.w	r1, [r1]
 80028a8:	460c      	mov	r4, r1
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	b2d8      	uxtb	r0, r3
 80028b0:	4957      	ldr	r1, [pc, #348]	; (8002a10 <set_wall+0x43c>)
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	440b      	add	r3, r1
 80028bc:	4423      	add	r3, r4
 80028be:	4602      	mov	r2, r0
 80028c0:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 80028c2:	79bb      	ldrb	r3, [r7, #6]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d04c      	beq.n	8002962 <set_wall+0x38e>
				maze[y][x] |= bottom_wall;
 80028c8:	4b50      	ldr	r3, [pc, #320]	; (8002a0c <set_wall+0x438>)
 80028ca:	f993 3000 	ldrsb.w	r3, [r3]
 80028ce:	4619      	mov	r1, r3
 80028d0:	4b4d      	ldr	r3, [pc, #308]	; (8002a08 <set_wall+0x434>)
 80028d2:	f993 3000 	ldrsb.w	r3, [r3]
 80028d6:	4618      	mov	r0, r3
 80028d8:	4a4d      	ldr	r2, [pc, #308]	; (8002a10 <set_wall+0x43c>)
 80028da:	460b      	mov	r3, r1
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	4403      	add	r3, r0
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4a48      	ldr	r2, [pc, #288]	; (8002a0c <set_wall+0x438>)
 80028ea:	f992 2000 	ldrsb.w	r2, [r2]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4a45      	ldr	r2, [pc, #276]	; (8002a08 <set_wall+0x434>)
 80028f2:	f992 2000 	ldrsb.w	r2, [r2]
 80028f6:	4614      	mov	r4, r2
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b2d8      	uxtb	r0, r3
 80028fe:	4a44      	ldr	r2, [pc, #272]	; (8002a10 <set_wall+0x43c>)
 8002900:	460b      	mov	r3, r1
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	4423      	add	r3, r4
 800290c:	4602      	mov	r2, r0
 800290e:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002910:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <set_wall+0x438>)
 8002912:	f993 3000 	ldrsb.w	r3, [r3]
 8002916:	2b08      	cmp	r3, #8
 8002918:	dc23      	bgt.n	8002962 <set_wall+0x38e>
 800291a:	4b3c      	ldr	r3, [pc, #240]	; (8002a0c <set_wall+0x438>)
 800291c:	f993 3000 	ldrsb.w	r3, [r3]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <set_wall+0x434>)
 8002924:	f993 3000 	ldrsb.w	r3, [r3]
 8002928:	4618      	mov	r0, r3
 800292a:	4939      	ldr	r1, [pc, #228]	; (8002a10 <set_wall+0x43c>)
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	440b      	add	r3, r1
 8002936:	4403      	add	r3, r0
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	4a34      	ldr	r2, [pc, #208]	; (8002a0c <set_wall+0x438>)
 800293c:	f992 2000 	ldrsb.w	r2, [r2]
 8002940:	3201      	adds	r2, #1
 8002942:	4931      	ldr	r1, [pc, #196]	; (8002a08 <set_wall+0x434>)
 8002944:	f991 1000 	ldrsb.w	r1, [r1]
 8002948:	460c      	mov	r4, r1
 800294a:	f043 0302 	orr.w	r3, r3, #2
 800294e:	b2d8      	uxtb	r0, r3
 8002950:	492f      	ldr	r1, [pc, #188]	; (8002a10 <set_wall+0x43c>)
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	440b      	add	r3, r1
 800295c:	4423      	add	r3, r4
 800295e:	4602      	mov	r2, r0
 8002960:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002962:	797b      	ldrb	r3, [r7, #5]
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8253 	beq.w	8002e10 <set_wall+0x83c>
				maze[y][x] |= right_wall;
 800296a:	4b28      	ldr	r3, [pc, #160]	; (8002a0c <set_wall+0x438>)
 800296c:	f993 3000 	ldrsb.w	r3, [r3]
 8002970:	4619      	mov	r1, r3
 8002972:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <set_wall+0x434>)
 8002974:	f993 3000 	ldrsb.w	r3, [r3]
 8002978:	4618      	mov	r0, r3
 800297a:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <set_wall+0x43c>)
 800297c:	460b      	mov	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	4403      	add	r3, r0
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	4a20      	ldr	r2, [pc, #128]	; (8002a0c <set_wall+0x438>)
 800298c:	f992 2000 	ldrsb.w	r2, [r2]
 8002990:	4611      	mov	r1, r2
 8002992:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <set_wall+0x434>)
 8002994:	f992 2000 	ldrsb.w	r2, [r2]
 8002998:	4614      	mov	r4, r2
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	b2d8      	uxtb	r0, r3
 80029a0:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <set_wall+0x43c>)
 80029a2:	460b      	mov	r3, r1
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	4423      	add	r3, r4
 80029ae:	4602      	mov	r2, r0
 80029b0:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <set_wall+0x434>)
 80029b4:	f993 3000 	ldrsb.w	r3, [r3]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	f300 8229 	bgt.w	8002e10 <set_wall+0x83c>
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <set_wall+0x438>)
 80029c0:	f993 3000 	ldrsb.w	r3, [r3]
 80029c4:	4618      	mov	r0, r3
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <set_wall+0x434>)
 80029c8:	f993 3000 	ldrsb.w	r3, [r3]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	4910      	ldr	r1, [pc, #64]	; (8002a10 <set_wall+0x43c>)
 80029d0:	4603      	mov	r3, r0
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4403      	add	r3, r0
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	440b      	add	r3, r1
 80029da:	4413      	add	r3, r2
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <set_wall+0x438>)
 80029e0:	f992 2000 	ldrsb.w	r2, [r2]
 80029e4:	4610      	mov	r0, r2
 80029e6:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <set_wall+0x434>)
 80029e8:	f992 2000 	ldrsb.w	r2, [r2]
 80029ec:	3201      	adds	r2, #1
 80029ee:	f043 0308 	orr.w	r3, r3, #8
 80029f2:	b2dc      	uxtb	r4, r3
 80029f4:	4906      	ldr	r1, [pc, #24]	; (8002a10 <set_wall+0x43c>)
 80029f6:	4603      	mov	r3, r0
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4403      	add	r3, r0
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	440b      	add	r3, r1
 8002a00:	4413      	add	r3, r2
 8002a02:	4622      	mov	r2, r4
 8002a04:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a06:	e203      	b.n	8002e10 <set_wall+0x83c>
 8002a08:	20000154 	.word	0x20000154
 8002a0c:	20000155 	.word	0x20000155
 8002a10:	200002ec 	.word	0x200002ec
		case north:
			y--;
 8002a14:	4b7d      	ldr	r3, [pc, #500]	; (8002c0c <set_wall+0x638>)
 8002a16:	f993 3000 	ldrsb.w	r3, [r3]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	b25a      	sxtb	r2, r3
 8002a22:	4b7a      	ldr	r3, [pc, #488]	; (8002c0c <set_wall+0x638>)
 8002a24:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d04c      	beq.n	8002ac6 <set_wall+0x4f2>
				maze[y][x] |= left_wall;
 8002a2c:	4b77      	ldr	r3, [pc, #476]	; (8002c0c <set_wall+0x638>)
 8002a2e:	f993 3000 	ldrsb.w	r3, [r3]
 8002a32:	4619      	mov	r1, r3
 8002a34:	4b76      	ldr	r3, [pc, #472]	; (8002c10 <set_wall+0x63c>)
 8002a36:	f993 3000 	ldrsb.w	r3, [r3]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	4a75      	ldr	r2, [pc, #468]	; (8002c14 <set_wall+0x640>)
 8002a3e:	460b      	mov	r3, r1
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	4403      	add	r3, r0
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4a6f      	ldr	r2, [pc, #444]	; (8002c0c <set_wall+0x638>)
 8002a4e:	f992 2000 	ldrsb.w	r2, [r2]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4a6e      	ldr	r2, [pc, #440]	; (8002c10 <set_wall+0x63c>)
 8002a56:	f992 2000 	ldrsb.w	r2, [r2]
 8002a5a:	4614      	mov	r4, r2
 8002a5c:	f043 0308 	orr.w	r3, r3, #8
 8002a60:	b2d8      	uxtb	r0, r3
 8002a62:	4a6c      	ldr	r2, [pc, #432]	; (8002c14 <set_wall+0x640>)
 8002a64:	460b      	mov	r3, r1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	4423      	add	r3, r4
 8002a70:	4602      	mov	r2, r0
 8002a72:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002a74:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <set_wall+0x63c>)
 8002a76:	f993 3000 	ldrsb.w	r3, [r3]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	dd23      	ble.n	8002ac6 <set_wall+0x4f2>
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <set_wall+0x638>)
 8002a80:	f993 3000 	ldrsb.w	r3, [r3]
 8002a84:	4618      	mov	r0, r3
 8002a86:	4b62      	ldr	r3, [pc, #392]	; (8002c10 <set_wall+0x63c>)
 8002a88:	f993 3000 	ldrsb.w	r3, [r3]
 8002a8c:	1e5a      	subs	r2, r3, #1
 8002a8e:	4961      	ldr	r1, [pc, #388]	; (8002c14 <set_wall+0x640>)
 8002a90:	4603      	mov	r3, r0
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4403      	add	r3, r0
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	440b      	add	r3, r1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	4a5b      	ldr	r2, [pc, #364]	; (8002c0c <set_wall+0x638>)
 8002aa0:	f992 2000 	ldrsb.w	r2, [r2]
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4a5a      	ldr	r2, [pc, #360]	; (8002c10 <set_wall+0x63c>)
 8002aa8:	f992 2000 	ldrsb.w	r2, [r2]
 8002aac:	3a01      	subs	r2, #1
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	b2dc      	uxtb	r4, r3
 8002ab4:	4957      	ldr	r1, [pc, #348]	; (8002c14 <set_wall+0x640>)
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4403      	add	r3, r0
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	440b      	add	r3, r1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	4622      	mov	r2, r4
 8002ac4:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002ac6:	79bb      	ldrb	r3, [r7, #6]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d04c      	beq.n	8002b66 <set_wall+0x592>
				maze[y][x] |= right_wall;
 8002acc:	4b4f      	ldr	r3, [pc, #316]	; (8002c0c <set_wall+0x638>)
 8002ace:	f993 3000 	ldrsb.w	r3, [r3]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4b4e      	ldr	r3, [pc, #312]	; (8002c10 <set_wall+0x63c>)
 8002ad6:	f993 3000 	ldrsb.w	r3, [r3]
 8002ada:	4618      	mov	r0, r3
 8002adc:	4a4d      	ldr	r2, [pc, #308]	; (8002c14 <set_wall+0x640>)
 8002ade:	460b      	mov	r3, r1
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4403      	add	r3, r0
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4a47      	ldr	r2, [pc, #284]	; (8002c0c <set_wall+0x638>)
 8002aee:	f992 2000 	ldrsb.w	r2, [r2]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4a46      	ldr	r2, [pc, #280]	; (8002c10 <set_wall+0x63c>)
 8002af6:	f992 2000 	ldrsb.w	r2, [r2]
 8002afa:	4614      	mov	r4, r2
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	b2d8      	uxtb	r0, r3
 8002b02:	4a44      	ldr	r2, [pc, #272]	; (8002c14 <set_wall+0x640>)
 8002b04:	460b      	mov	r3, r1
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	4423      	add	r3, r4
 8002b10:	4602      	mov	r2, r0
 8002b12:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002b14:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <set_wall+0x63c>)
 8002b16:	f993 3000 	ldrsb.w	r3, [r3]
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	dc23      	bgt.n	8002b66 <set_wall+0x592>
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <set_wall+0x638>)
 8002b20:	f993 3000 	ldrsb.w	r3, [r3]
 8002b24:	4618      	mov	r0, r3
 8002b26:	4b3a      	ldr	r3, [pc, #232]	; (8002c10 <set_wall+0x63c>)
 8002b28:	f993 3000 	ldrsb.w	r3, [r3]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	4939      	ldr	r1, [pc, #228]	; (8002c14 <set_wall+0x640>)
 8002b30:	4603      	mov	r3, r0
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4403      	add	r3, r0
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	440b      	add	r3, r1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	4a33      	ldr	r2, [pc, #204]	; (8002c0c <set_wall+0x638>)
 8002b40:	f992 2000 	ldrsb.w	r2, [r2]
 8002b44:	4610      	mov	r0, r2
 8002b46:	4a32      	ldr	r2, [pc, #200]	; (8002c10 <set_wall+0x63c>)
 8002b48:	f992 2000 	ldrsb.w	r2, [r2]
 8002b4c:	3201      	adds	r2, #1
 8002b4e:	f043 0308 	orr.w	r3, r3, #8
 8002b52:	b2dc      	uxtb	r4, r3
 8002b54:	492f      	ldr	r1, [pc, #188]	; (8002c14 <set_wall+0x640>)
 8002b56:	4603      	mov	r3, r0
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4403      	add	r3, r0
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	440b      	add	r3, r1
 8002b60:	4413      	add	r3, r2
 8002b62:	4622      	mov	r2, r4
 8002b64:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002b66:	797b      	ldrb	r3, [r7, #5]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8153 	beq.w	8002e14 <set_wall+0x840>
				maze[y][x] |= top_wall;
 8002b6e:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <set_wall+0x638>)
 8002b70:	f993 3000 	ldrsb.w	r3, [r3]
 8002b74:	4619      	mov	r1, r3
 8002b76:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <set_wall+0x63c>)
 8002b78:	f993 3000 	ldrsb.w	r3, [r3]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	4a25      	ldr	r2, [pc, #148]	; (8002c14 <set_wall+0x640>)
 8002b80:	460b      	mov	r3, r1
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	4403      	add	r3, r0
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <set_wall+0x638>)
 8002b90:	f992 2000 	ldrsb.w	r2, [r2]
 8002b94:	4611      	mov	r1, r2
 8002b96:	4a1e      	ldr	r2, [pc, #120]	; (8002c10 <set_wall+0x63c>)
 8002b98:	f992 2000 	ldrsb.w	r2, [r2]
 8002b9c:	4614      	mov	r4, r2
 8002b9e:	f043 0302 	orr.w	r3, r3, #2
 8002ba2:	b2d8      	uxtb	r0, r3
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <set_wall+0x640>)
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	4423      	add	r3, r4
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <set_wall+0x638>)
 8002bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f340 8129 	ble.w	8002e14 <set_wall+0x840>
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <set_wall+0x638>)
 8002bc4:	f993 3000 	ldrsb.w	r3, [r3]
 8002bc8:	1e5a      	subs	r2, r3, #1
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <set_wall+0x63c>)
 8002bcc:	f993 3000 	ldrsb.w	r3, [r3]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	4910      	ldr	r1, [pc, #64]	; (8002c14 <set_wall+0x640>)
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	440b      	add	r3, r1
 8002bde:	4403      	add	r3, r0
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <set_wall+0x638>)
 8002be4:	f992 2000 	ldrsb.w	r2, [r2]
 8002be8:	3a01      	subs	r2, #1
 8002bea:	4909      	ldr	r1, [pc, #36]	; (8002c10 <set_wall+0x63c>)
 8002bec:	f991 1000 	ldrsb.w	r1, [r1]
 8002bf0:	460c      	mov	r4, r1
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	b2d8      	uxtb	r0, r3
 8002bf8:	4906      	ldr	r1, [pc, #24]	; (8002c14 <set_wall+0x640>)
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	440b      	add	r3, r1
 8002c04:	4423      	add	r3, r4
 8002c06:	4602      	mov	r2, r0
 8002c08:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002c0a:	e103      	b.n	8002e14 <set_wall+0x840>
 8002c0c:	20000155 	.word	0x20000155
 8002c10:	20000154 	.word	0x20000154
 8002c14:	200002ec 	.word	0x200002ec
		case south:
			y++;
 8002c18:	4b82      	ldr	r3, [pc, #520]	; (8002e24 <set_wall+0x850>)
 8002c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	b25a      	sxtb	r2, r3
 8002c26:	4b7f      	ldr	r3, [pc, #508]	; (8002e24 <set_wall+0x850>)
 8002c28:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d04c      	beq.n	8002cca <set_wall+0x6f6>
				maze[y][x] |= right_wall;
 8002c30:	4b7c      	ldr	r3, [pc, #496]	; (8002e24 <set_wall+0x850>)
 8002c32:	f993 3000 	ldrsb.w	r3, [r3]
 8002c36:	4619      	mov	r1, r3
 8002c38:	4b7b      	ldr	r3, [pc, #492]	; (8002e28 <set_wall+0x854>)
 8002c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	4a7a      	ldr	r2, [pc, #488]	; (8002e2c <set_wall+0x858>)
 8002c42:	460b      	mov	r3, r1
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4403      	add	r3, r0
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4a74      	ldr	r2, [pc, #464]	; (8002e24 <set_wall+0x850>)
 8002c52:	f992 2000 	ldrsb.w	r2, [r2]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4a73      	ldr	r2, [pc, #460]	; (8002e28 <set_wall+0x854>)
 8002c5a:	f992 2000 	ldrsb.w	r2, [r2]
 8002c5e:	4614      	mov	r4, r2
 8002c60:	f043 0304 	orr.w	r3, r3, #4
 8002c64:	b2d8      	uxtb	r0, r3
 8002c66:	4a71      	ldr	r2, [pc, #452]	; (8002e2c <set_wall+0x858>)
 8002c68:	460b      	mov	r3, r1
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	4423      	add	r3, r4
 8002c74:	4602      	mov	r2, r0
 8002c76:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002c78:	4b6b      	ldr	r3, [pc, #428]	; (8002e28 <set_wall+0x854>)
 8002c7a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	dc23      	bgt.n	8002cca <set_wall+0x6f6>
 8002c82:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <set_wall+0x850>)
 8002c84:	f993 3000 	ldrsb.w	r3, [r3]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	4b67      	ldr	r3, [pc, #412]	; (8002e28 <set_wall+0x854>)
 8002c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	4966      	ldr	r1, [pc, #408]	; (8002e2c <set_wall+0x858>)
 8002c94:	4603      	mov	r3, r0
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4403      	add	r3, r0
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	440b      	add	r3, r1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	4a60      	ldr	r2, [pc, #384]	; (8002e24 <set_wall+0x850>)
 8002ca4:	f992 2000 	ldrsb.w	r2, [r2]
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4a5f      	ldr	r2, [pc, #380]	; (8002e28 <set_wall+0x854>)
 8002cac:	f992 2000 	ldrsb.w	r2, [r2]
 8002cb0:	3201      	adds	r2, #1
 8002cb2:	f043 0308 	orr.w	r3, r3, #8
 8002cb6:	b2dc      	uxtb	r4, r3
 8002cb8:	495c      	ldr	r1, [pc, #368]	; (8002e2c <set_wall+0x858>)
 8002cba:	4603      	mov	r3, r0
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4403      	add	r3, r0
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	440b      	add	r3, r1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002cca:	79bb      	ldrb	r3, [r7, #6]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d04c      	beq.n	8002d6a <set_wall+0x796>
				maze[y][x] |= left_wall;
 8002cd0:	4b54      	ldr	r3, [pc, #336]	; (8002e24 <set_wall+0x850>)
 8002cd2:	f993 3000 	ldrsb.w	r3, [r3]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <set_wall+0x854>)
 8002cda:	f993 3000 	ldrsb.w	r3, [r3]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	4a52      	ldr	r2, [pc, #328]	; (8002e2c <set_wall+0x858>)
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	4403      	add	r3, r0
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	4a4c      	ldr	r2, [pc, #304]	; (8002e24 <set_wall+0x850>)
 8002cf2:	f992 2000 	ldrsb.w	r2, [r2]
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4a4b      	ldr	r2, [pc, #300]	; (8002e28 <set_wall+0x854>)
 8002cfa:	f992 2000 	ldrsb.w	r2, [r2]
 8002cfe:	4614      	mov	r4, r2
 8002d00:	f043 0308 	orr.w	r3, r3, #8
 8002d04:	b2d8      	uxtb	r0, r3
 8002d06:	4a49      	ldr	r2, [pc, #292]	; (8002e2c <set_wall+0x858>)
 8002d08:	460b      	mov	r3, r1
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	4423      	add	r3, r4
 8002d14:	4602      	mov	r2, r0
 8002d16:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002d18:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <set_wall+0x854>)
 8002d1a:	f993 3000 	ldrsb.w	r3, [r3]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	dd23      	ble.n	8002d6a <set_wall+0x796>
 8002d22:	4b40      	ldr	r3, [pc, #256]	; (8002e24 <set_wall+0x850>)
 8002d24:	f993 3000 	ldrsb.w	r3, [r3]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <set_wall+0x854>)
 8002d2c:	f993 3000 	ldrsb.w	r3, [r3]
 8002d30:	1e5a      	subs	r2, r3, #1
 8002d32:	493e      	ldr	r1, [pc, #248]	; (8002e2c <set_wall+0x858>)
 8002d34:	4603      	mov	r3, r0
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4403      	add	r3, r0
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	440b      	add	r3, r1
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	4a38      	ldr	r2, [pc, #224]	; (8002e24 <set_wall+0x850>)
 8002d44:	f992 2000 	ldrsb.w	r2, [r2]
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4a37      	ldr	r2, [pc, #220]	; (8002e28 <set_wall+0x854>)
 8002d4c:	f992 2000 	ldrsb.w	r2, [r2]
 8002d50:	3a01      	subs	r2, #1
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	b2dc      	uxtb	r4, r3
 8002d58:	4934      	ldr	r1, [pc, #208]	; (8002e2c <set_wall+0x858>)
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4403      	add	r3, r0
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	440b      	add	r3, r1
 8002d64:	4413      	add	r3, r2
 8002d66:	4622      	mov	r2, r4
 8002d68:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002d6a:	797b      	ldrb	r3, [r7, #5]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d053      	beq.n	8002e18 <set_wall+0x844>
				maze[y][x] |= bottom_wall;
 8002d70:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <set_wall+0x850>)
 8002d72:	f993 3000 	ldrsb.w	r3, [r3]
 8002d76:	4619      	mov	r1, r3
 8002d78:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <set_wall+0x854>)
 8002d7a:	f993 3000 	ldrsb.w	r3, [r3]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	4a2a      	ldr	r2, [pc, #168]	; (8002e2c <set_wall+0x858>)
 8002d82:	460b      	mov	r3, r1
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4403      	add	r3, r0
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4a24      	ldr	r2, [pc, #144]	; (8002e24 <set_wall+0x850>)
 8002d92:	f992 2000 	ldrsb.w	r2, [r2]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4a23      	ldr	r2, [pc, #140]	; (8002e28 <set_wall+0x854>)
 8002d9a:	f992 2000 	ldrsb.w	r2, [r2]
 8002d9e:	4614      	mov	r4, r2
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	b2d8      	uxtb	r0, r3
 8002da6:	4a21      	ldr	r2, [pc, #132]	; (8002e2c <set_wall+0x858>)
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	4423      	add	r3, r4
 8002db4:	4602      	mov	r2, r0
 8002db6:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002db8:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <set_wall+0x850>)
 8002dba:	f993 3000 	ldrsb.w	r3, [r3]
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	dc2a      	bgt.n	8002e18 <set_wall+0x844>
 8002dc2:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <set_wall+0x850>)
 8002dc4:	f993 3000 	ldrsb.w	r3, [r3]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <set_wall+0x854>)
 8002dcc:	f993 3000 	ldrsb.w	r3, [r3]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	4916      	ldr	r1, [pc, #88]	; (8002e2c <set_wall+0x858>)
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	440b      	add	r3, r1
 8002dde:	4403      	add	r3, r0
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	4a10      	ldr	r2, [pc, #64]	; (8002e24 <set_wall+0x850>)
 8002de4:	f992 2000 	ldrsb.w	r2, [r2]
 8002de8:	3201      	adds	r2, #1
 8002dea:	490f      	ldr	r1, [pc, #60]	; (8002e28 <set_wall+0x854>)
 8002dec:	f991 1000 	ldrsb.w	r1, [r1]
 8002df0:	460c      	mov	r4, r1
 8002df2:	f043 0302 	orr.w	r3, r3, #2
 8002df6:	b2d8      	uxtb	r0, r3
 8002df8:	490c      	ldr	r1, [pc, #48]	; (8002e2c <set_wall+0x858>)
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	440b      	add	r3, r1
 8002e04:	4423      	add	r3, r4
 8002e06:	4602      	mov	r2, r0
 8002e08:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002e0a:	e005      	b.n	8002e18 <set_wall+0x844>
			break;
 8002e0c:	bf00      	nop
 8002e0e:	e004      	b.n	8002e1a <set_wall+0x846>
			break;
 8002e10:	bf00      	nop
 8002e12:	e002      	b.n	8002e1a <set_wall+0x846>
			break;
 8002e14:	bf00      	nop
 8002e16:	e000      	b.n	8002e1a <set_wall+0x846>
			break;
 8002e18:	bf00      	nop
	}
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc90      	pop	{r4, r7}
 8002e22:	4770      	bx	lr
 8002e24:	20000155 	.word	0x20000155
 8002e28:	20000154 	.word	0x20000154
 8002e2c:	200002ec 	.word	0x200002ec

08002e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e36:	f002 f973 	bl	8005120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e3a:	f000 f8cf 	bl	8002fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e3e:	f000 fb51 	bl	80034e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e42:	f000 fb39 	bl	80034b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002e46:	f000 f925 	bl	8003094 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002e4a:	f000 f98d 	bl	8003168 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002e4e:	f000 f9df 	bl	8003210 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002e52:	f000 fa5d 	bl	8003310 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002e56:	f000 faad 	bl	80033b4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4854      	ldr	r0, [pc, #336]	; (8002fb0 <main+0x180>)
 8002e5e:	f003 fedb 	bl	8006c18 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002e62:	2104      	movs	r1, #4
 8002e64:	4852      	ldr	r0, [pc, #328]	; (8002fb0 <main+0x180>)
 8002e66:	f003 fed7 	bl	8006c18 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4851      	ldr	r0, [pc, #324]	; (8002fb4 <main+0x184>)
 8002e6e:	f003 fed3 	bl	8006c18 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002e72:	2104      	movs	r1, #4
 8002e74:	484f      	ldr	r0, [pc, #316]	; (8002fb4 <main+0x184>)
 8002e76:	f003 fecf 	bl	8006c18 <HAL_TIM_PWM_Start>
  	HAL_TIM_Base_Start_IT(&htim1);
 8002e7a:	484f      	ldr	r0, [pc, #316]	; (8002fb8 <main+0x188>)
 8002e7c:	f003 fe22 	bl	8006ac4 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim3);
 8002e80:	484e      	ldr	r0, [pc, #312]	; (8002fbc <main+0x18c>)
 8002e82:	f003 fe1f 	bl	8006ac4 <HAL_TIM_Base_Start_IT>
	HAL_Delay(2000);
 8002e86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e8a:	f002 f9ab 	bl	80051e4 <HAL_Delay>
	mmode = 0;
 8002e8e:	4b4c      	ldr	r3, [pc, #304]	; (8002fc0 <main+0x190>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
	status = 0;
 8002e94:	4b4b      	ldr	r3, [pc, #300]	; (8002fc4 <main+0x194>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
	current_speed = 0;
 8002e9a:	4b4b      	ldr	r3, [pc, #300]	; (8002fc8 <main+0x198>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, 4);
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	494a      	ldr	r1, [pc, #296]	; (8002fcc <main+0x19c>)
 8002ea4:	484a      	ldr	r0, [pc, #296]	; (8002fd0 <main+0x1a0>)
 8002ea6:	f002 fa99 	bl	80053dc <HAL_ADC_Start_DMA>

	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, htim2.Init.Period);
 8002eaa:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <main+0x180>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a40      	ldr	r2, [pc, #256]	; (8002fb0 <main+0x180>)
 8002eb0:	68d2      	ldr	r2, [r2, #12]
 8002eb2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, htim2.Init.Period);
 8002eb4:	4b3e      	ldr	r3, [pc, #248]	; (8002fb0 <main+0x180>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a3d      	ldr	r2, [pc, #244]	; (8002fb0 <main+0x180>)
 8002eba:	68d2      	ldr	r2, [r2, #12]
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor1, htim2.Init.Period);
 8002ebe:	4b3d      	ldr	r3, [pc, #244]	; (8002fb4 <main+0x184>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a3b      	ldr	r2, [pc, #236]	; (8002fb0 <main+0x180>)
 8002ec4:	68d2      	ldr	r2, [r2, #12]
 8002ec6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, htim2.Init.Period);
 8002ec8:	4b3a      	ldr	r3, [pc, #232]	; (8002fb4 <main+0x184>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a38      	ldr	r2, [pc, #224]	; (8002fb0 <main+0x180>)
 8002ece:	68d2      	ldr	r2, [r2, #12]
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (mmode == 1) {
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <main+0x190>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d10a      	bne.n	8002ef2 <main+0xc2>
			HAL_Delay(5000);
 8002edc:	f241 3088 	movw	r0, #5000	; 0x1388
 8002ee0:	f002 f980 	bl	80051e4 <HAL_Delay>
			start_fill();
 8002ee4:	f7fd ff7e 	bl	8000de4 <start_fill>
			findShortestPath();
 8002ee8:	f000 fb56 	bl	8003598 <findShortestPath>
			mmode = 0;
 8002eec:	4b34      	ldr	r3, [pc, #208]	; (8002fc0 <main+0x190>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
		}
		if (mmode == 2) {
 8002ef2:	4b33      	ldr	r3, [pc, #204]	; (8002fc0 <main+0x190>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d1ea      	bne.n	8002ed2 <main+0xa2>
			uint8_t d = north;
 8002efc:	2302      	movs	r3, #2
 8002efe:	717b      	strb	r3, [r7, #5]
			for(uint16_t i = 0; i <= path_index; i++){
 8002f00:	2300      	movs	r3, #0
 8002f02:	80fb      	strh	r3, [r7, #6]
 8002f04:	e04a      	b.n	8002f9c <main+0x16c>
				switch((int32_t)shortestPath[i]){
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	4a32      	ldr	r2, [pc, #200]	; (8002fd4 <main+0x1a4>)
 8002f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd ff42 	bl	8000d98 <__aeabi_f2iz>
 8002f14:	4603      	mov	r3, r0
 8002f16:	3304      	adds	r3, #4
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d81f      	bhi.n	8002f5c <main+0x12c>
 8002f1c:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <main+0xf4>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f49 	.word	0x08002f49
 8002f2c:	08002f53 	.word	0x08002f53
 8002f30:	08002f3f 	.word	0x08002f3f
					case turn_left_90:
						turn_left90(&d);
 8002f34:	1d7b      	adds	r3, r7, #5
 8002f36:	4618      	mov	r0, r3
 8002f38:	f001 fd3c 	bl	80049b4 <turn_left90>
						break;
 8002f3c:	e02b      	b.n	8002f96 <main+0x166>
					case turn_right_90:
						turn_right90(&d);
 8002f3e:	1d7b      	adds	r3, r7, #5
 8002f40:	4618      	mov	r0, r3
 8002f42:	f001 fe11 	bl	8004b68 <turn_right90>
						break;
 8002f46:	e026      	b.n	8002f96 <main+0x166>
					case turn_left_45:
						turn_left45(&d);
 8002f48:	1d7b      	adds	r3, r7, #5
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 fbc6 	bl	80046dc <turn_left45>
						break;
 8002f50:	e021      	b.n	8002f96 <main+0x166>
					case turn_right_45:
						turn_right45(&d);
 8002f52:	1d7b      	adds	r3, r7, #5
 8002f54:	4618      	mov	r0, r3
 8002f56:	f001 fc77 	bl	8004848 <turn_right45>
						break;
 8002f5a:	e01c      	b.n	8002f96 <main+0x166>
					default:
						if(shortestPath[i] < 0){
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <main+0x1a4>)
 8002f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd feed 	bl	8000d48 <__aeabi_fcmplt>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <main+0x156>
							backwards(shortestPath[i], true);
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <main+0x1a4>)
 8002f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 ff4a 	bl	8004e18 <backwards>
 8002f84:	e007      	b.n	8002f96 <main+0x166>
						} else {
							go_straight(shortestPath[i], true);
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <main+0x1a4>)
 8002f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8e:	2101      	movs	r1, #1
 8002f90:	4618      	mov	r0, r3
 8002f92:	f001 fec3 	bl	8004d1c <go_straight>
			for(uint16_t i = 0; i <= path_index; i++){
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	80fb      	strh	r3, [r7, #6]
 8002f9c:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <main+0x1a8>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	88fa      	ldrh	r2, [r7, #6]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d9af      	bls.n	8002f06 <main+0xd6>
						}
				}
			}
			mmode = 0;
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <main+0x190>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
		if (mmode == 1) {
 8002fac:	e791      	b.n	8002ed2 <main+0xa2>
 8002fae:	bf00      	nop
 8002fb0:	20000214 	.word	0x20000214
 8002fb4:	200002a4 	.word	0x200002a4
 8002fb8:	200001cc 	.word	0x200001cc
 8002fbc:	2000025c 	.word	0x2000025c
 8002fc0:	200003bd 	.word	0x200003bd
 8002fc4:	200003be 	.word	0x200003be
 8002fc8:	200003bc 	.word	0x200003bc
 8002fcc:	200003b4 	.word	0x200003b4
 8002fd0:	20000158 	.word	0x20000158
 8002fd4:	20000618 	.word	0x20000618
 8002fd8:	20000c5a 	.word	0x20000c5a

08002fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b094      	sub	sp, #80	; 0x50
 8002fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fe6:	2228      	movs	r2, #40	; 0x28
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f004 fd80 	bl	8007af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003000:	1d3b      	adds	r3, r7, #4
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800300c:	2301      	movs	r3, #1
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003016:	2300      	movs	r3, #0
 8003018:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800301a:	2301      	movs	r3, #1
 800301c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800301e:	2302      	movs	r3, #2
 8003020:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003026:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003028:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800302c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800302e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003032:	4618      	mov	r0, r3
 8003034:	f003 f862 	bl	80060fc <HAL_RCC_OscConfig>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800303e:	f000 faa5 	bl	800358c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003042:	230f      	movs	r3, #15
 8003044:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003046:	2302      	movs	r3, #2
 8003048:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800304e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003052:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	2102      	movs	r1, #2
 800305e:	4618      	mov	r0, r3
 8003060:	f003 face 	bl	8006600 <HAL_RCC_ClockConfig>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800306a:	f000 fa8f 	bl	800358c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800306e:	2302      	movs	r3, #2
 8003070:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003076:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	4618      	mov	r0, r3
 800307c:	f003 fc1c 	bl	80068b8 <HAL_RCCEx_PeriphCLKConfig>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003086:	f000 fa81 	bl	800358c <Error_Handler>
  }
}
 800308a:	bf00      	nop
 800308c:	3750      	adds	r7, #80	; 0x50
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80030a4:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <MX_ADC1_Init+0xcc>)
 80030a6:	4a2f      	ldr	r2, [pc, #188]	; (8003164 <MX_ADC1_Init+0xd0>)
 80030a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80030aa:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <MX_ADC1_Init+0xcc>)
 80030ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80030b2:	4b2b      	ldr	r3, [pc, #172]	; (8003160 <MX_ADC1_Init+0xcc>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030b8:	4b29      	ldr	r3, [pc, #164]	; (8003160 <MX_ADC1_Init+0xcc>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030be:	4b28      	ldr	r3, [pc, #160]	; (8003160 <MX_ADC1_Init+0xcc>)
 80030c0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80030c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <MX_ADC1_Init+0xcc>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <MX_ADC1_Init+0xcc>)
 80030ce:	2204      	movs	r2, #4
 80030d0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80030d2:	4823      	ldr	r0, [pc, #140]	; (8003160 <MX_ADC1_Init+0xcc>)
 80030d4:	f002 f8aa 	bl	800522c <HAL_ADC_Init>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80030de:	f000 fa55 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80030e2:	2302      	movs	r3, #2
 80030e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030e6:	2301      	movs	r3, #1
 80030e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80030ea:	2304      	movs	r3, #4
 80030ec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	4619      	mov	r1, r3
 80030f2:	481b      	ldr	r0, [pc, #108]	; (8003160 <MX_ADC1_Init+0xcc>)
 80030f4:	f002 fa6c 	bl	80055d0 <HAL_ADC_ConfigChannel>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80030fe:	f000 fa45 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003102:	2303      	movs	r3, #3
 8003104:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003106:	2302      	movs	r3, #2
 8003108:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	4619      	mov	r1, r3
 800310e:	4814      	ldr	r0, [pc, #80]	; (8003160 <MX_ADC1_Init+0xcc>)
 8003110:	f002 fa5e 	bl	80055d0 <HAL_ADC_ConfigChannel>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800311a:	f000 fa37 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800311e:	2304      	movs	r3, #4
 8003120:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003122:	2303      	movs	r3, #3
 8003124:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003126:	1d3b      	adds	r3, r7, #4
 8003128:	4619      	mov	r1, r3
 800312a:	480d      	ldr	r0, [pc, #52]	; (8003160 <MX_ADC1_Init+0xcc>)
 800312c:	f002 fa50 	bl	80055d0 <HAL_ADC_ConfigChannel>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8003136:	f000 fa29 	bl	800358c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800313a:	2305      	movs	r3, #5
 800313c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800313e:	2304      	movs	r3, #4
 8003140:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003142:	1d3b      	adds	r3, r7, #4
 8003144:	4619      	mov	r1, r3
 8003146:	4806      	ldr	r0, [pc, #24]	; (8003160 <MX_ADC1_Init+0xcc>)
 8003148:	f002 fa42 	bl	80055d0 <HAL_ADC_ConfigChannel>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8003152:	f000 fa1b 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000158 	.word	0x20000158
 8003164:	40012400 	.word	0x40012400

08003168 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800316e:	f107 030c 	add.w	r3, r7, #12
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	605a      	str	r2, [r3, #4]
 8003178:	609a      	str	r2, [r3, #8]
 800317a:	60da      	str	r2, [r3, #12]
 800317c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800317e:	1d3b      	adds	r3, r7, #4
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003186:	4b20      	ldr	r3, [pc, #128]	; (8003208 <MX_TIM1_Init+0xa0>)
 8003188:	4a20      	ldr	r2, [pc, #128]	; (800320c <MX_TIM1_Init+0xa4>)
 800318a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800318c:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <MX_TIM1_Init+0xa0>)
 800318e:	2200      	movs	r2, #0
 8003190:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <MX_TIM1_Init+0xa0>)
 8003194:	2200      	movs	r2, #0
 8003196:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <MX_TIM1_Init+0xa0>)
 800319a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800319e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <MX_TIM1_Init+0xa0>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031a6:	4b18      	ldr	r3, [pc, #96]	; (8003208 <MX_TIM1_Init+0xa0>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ac:	4b16      	ldr	r3, [pc, #88]	; (8003208 <MX_TIM1_Init+0xa0>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031b2:	4815      	ldr	r0, [pc, #84]	; (8003208 <MX_TIM1_Init+0xa0>)
 80031b4:	f003 fc36 	bl	8006a24 <HAL_TIM_Base_Init>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80031be:	f000 f9e5 	bl	800358c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80031c2:	2307      	movs	r3, #7
 80031c4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80031c6:	2340      	movs	r3, #64	; 0x40
 80031c8:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 12;
 80031ca:	230c      	movs	r3, #12
 80031cc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80031ce:	f107 030c 	add.w	r3, r7, #12
 80031d2:	4619      	mov	r1, r3
 80031d4:	480c      	ldr	r0, [pc, #48]	; (8003208 <MX_TIM1_Init+0xa0>)
 80031d6:	f004 f852 	bl	800727e <HAL_TIM_SlaveConfigSynchro>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80031e0:	f000 f9d4 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031e4:	2300      	movs	r3, #0
 80031e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031ec:	1d3b      	adds	r3, r7, #4
 80031ee:	4619      	mov	r1, r3
 80031f0:	4805      	ldr	r0, [pc, #20]	; (8003208 <MX_TIM1_Init+0xa0>)
 80031f2:	f004 fbe9 	bl	80079c8 <HAL_TIMEx_MasterConfigSynchronization>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80031fc:	f000 f9c6 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003200:	bf00      	nop
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	200001cc 	.word	0x200001cc
 800320c:	40012c00 	.word	0x40012c00

08003210 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08e      	sub	sp, #56	; 0x38
 8003214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	605a      	str	r2, [r3, #4]
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003224:	f107 0320 	add.w	r3, r7, #32
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800322e:	1d3b      	adds	r3, r7, #4
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
 800323c:	615a      	str	r2, [r3, #20]
 800323e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003240:	4b32      	ldr	r3, [pc, #200]	; (800330c <MX_TIM2_Init+0xfc>)
 8003242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003246:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8003248:	4b30      	ldr	r3, [pc, #192]	; (800330c <MX_TIM2_Init+0xfc>)
 800324a:	224f      	movs	r2, #79	; 0x4f
 800324c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800324e:	4b2f      	ldr	r3, [pc, #188]	; (800330c <MX_TIM2_Init+0xfc>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8003254:	4b2d      	ldr	r3, [pc, #180]	; (800330c <MX_TIM2_Init+0xfc>)
 8003256:	f242 720f 	movw	r2, #9999	; 0x270f
 800325a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800325c:	4b2b      	ldr	r3, [pc, #172]	; (800330c <MX_TIM2_Init+0xfc>)
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003262:	4b2a      	ldr	r3, [pc, #168]	; (800330c <MX_TIM2_Init+0xfc>)
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003268:	4828      	ldr	r0, [pc, #160]	; (800330c <MX_TIM2_Init+0xfc>)
 800326a:	f003 fbdb 	bl	8006a24 <HAL_TIM_Base_Init>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003274:	f000 f98a 	bl	800358c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800327e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003282:	4619      	mov	r1, r3
 8003284:	4821      	ldr	r0, [pc, #132]	; (800330c <MX_TIM2_Init+0xfc>)
 8003286:	f003 ff33 	bl	80070f0 <HAL_TIM_ConfigClockSource>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003290:	f000 f97c 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003294:	481d      	ldr	r0, [pc, #116]	; (800330c <MX_TIM2_Init+0xfc>)
 8003296:	f003 fc67 	bl	8006b68 <HAL_TIM_PWM_Init>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80032a0:	f000 f974 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032a4:	2300      	movs	r3, #0
 80032a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032ac:	f107 0320 	add.w	r3, r7, #32
 80032b0:	4619      	mov	r1, r3
 80032b2:	4816      	ldr	r0, [pc, #88]	; (800330c <MX_TIM2_Init+0xfc>)
 80032b4:	f004 fb88 	bl	80079c8 <HAL_TIMEx_MasterConfigSynchronization>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80032be:	f000 f965 	bl	800358c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032c2:	2360      	movs	r3, #96	; 0x60
 80032c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	2200      	movs	r2, #0
 80032d6:	4619      	mov	r1, r3
 80032d8:	480c      	ldr	r0, [pc, #48]	; (800330c <MX_TIM2_Init+0xfc>)
 80032da:	f003 fe47 	bl	8006f6c <HAL_TIM_PWM_ConfigChannel>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80032e4:	f000 f952 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	2204      	movs	r2, #4
 80032ec:	4619      	mov	r1, r3
 80032ee:	4807      	ldr	r0, [pc, #28]	; (800330c <MX_TIM2_Init+0xfc>)
 80032f0:	f003 fe3c 	bl	8006f6c <HAL_TIM_PWM_ConfigChannel>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80032fa:	f000 f947 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80032fe:	4803      	ldr	r0, [pc, #12]	; (800330c <MX_TIM2_Init+0xfc>)
 8003300:	f000 ffa4 	bl	800424c <HAL_TIM_MspPostInit>

}
 8003304:	bf00      	nop
 8003306:	3738      	adds	r7, #56	; 0x38
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20000214 	.word	0x20000214

08003310 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003316:	f107 030c 	add.w	r3, r7, #12
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	60da      	str	r2, [r3, #12]
 8003324:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800332e:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <MX_TIM3_Init+0x9c>)
 8003330:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <MX_TIM3_Init+0xa0>)
 8003332:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <MX_TIM3_Init+0x9c>)
 8003336:	2200      	movs	r2, #0
 8003338:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800333a:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <MX_TIM3_Init+0x9c>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <MX_TIM3_Init+0x9c>)
 8003342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003346:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003348:	4b18      	ldr	r3, [pc, #96]	; (80033ac <MX_TIM3_Init+0x9c>)
 800334a:	2200      	movs	r2, #0
 800334c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800334e:	4b17      	ldr	r3, [pc, #92]	; (80033ac <MX_TIM3_Init+0x9c>)
 8003350:	2200      	movs	r2, #0
 8003352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003354:	4815      	ldr	r0, [pc, #84]	; (80033ac <MX_TIM3_Init+0x9c>)
 8003356:	f003 fb65 	bl	8006a24 <HAL_TIM_Base_Init>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003360:	f000 f914 	bl	800358c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003364:	2307      	movs	r3, #7
 8003366:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8003368:	2340      	movs	r3, #64	; 0x40
 800336a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 12;
 800336c:	230c      	movs	r3, #12
 800336e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003370:	f107 030c 	add.w	r3, r7, #12
 8003374:	4619      	mov	r1, r3
 8003376:	480d      	ldr	r0, [pc, #52]	; (80033ac <MX_TIM3_Init+0x9c>)
 8003378:	f003 ff81 	bl	800727e <HAL_TIM_SlaveConfigSynchro>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003382:	f000 f903 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003386:	2300      	movs	r3, #0
 8003388:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	4619      	mov	r1, r3
 8003392:	4806      	ldr	r0, [pc, #24]	; (80033ac <MX_TIM3_Init+0x9c>)
 8003394:	f004 fb18 	bl	80079c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800339e:	f000 f8f5 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80033a2:	bf00      	nop
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	2000025c 	.word	0x2000025c
 80033b0:	40000400 	.word	0x40000400

080033b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08e      	sub	sp, #56	; 0x38
 80033b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	609a      	str	r2, [r3, #8]
 80033c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033c8:	f107 0320 	add.w	r3, r7, #32
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033d2:	1d3b      	adds	r3, r7, #4
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
 80033e0:	615a      	str	r2, [r3, #20]
 80033e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033e4:	4b32      	ldr	r3, [pc, #200]	; (80034b0 <MX_TIM4_Init+0xfc>)
 80033e6:	4a33      	ldr	r2, [pc, #204]	; (80034b4 <MX_TIM4_Init+0x100>)
 80033e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80033ea:	4b31      	ldr	r3, [pc, #196]	; (80034b0 <MX_TIM4_Init+0xfc>)
 80033ec:	224f      	movs	r2, #79	; 0x4f
 80033ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f0:	4b2f      	ldr	r3, [pc, #188]	; (80034b0 <MX_TIM4_Init+0xfc>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80033f6:	4b2e      	ldr	r3, [pc, #184]	; (80034b0 <MX_TIM4_Init+0xfc>)
 80033f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80033fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033fe:	4b2c      	ldr	r3, [pc, #176]	; (80034b0 <MX_TIM4_Init+0xfc>)
 8003400:	2200      	movs	r2, #0
 8003402:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003404:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <MX_TIM4_Init+0xfc>)
 8003406:	2280      	movs	r2, #128	; 0x80
 8003408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800340a:	4829      	ldr	r0, [pc, #164]	; (80034b0 <MX_TIM4_Init+0xfc>)
 800340c:	f003 fb0a 	bl	8006a24 <HAL_TIM_Base_Init>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003416:	f000 f8b9 	bl	800358c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800341a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003420:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003424:	4619      	mov	r1, r3
 8003426:	4822      	ldr	r0, [pc, #136]	; (80034b0 <MX_TIM4_Init+0xfc>)
 8003428:	f003 fe62 	bl	80070f0 <HAL_TIM_ConfigClockSource>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003432:	f000 f8ab 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003436:	481e      	ldr	r0, [pc, #120]	; (80034b0 <MX_TIM4_Init+0xfc>)
 8003438:	f003 fb96 	bl	8006b68 <HAL_TIM_PWM_Init>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003442:	f000 f8a3 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003446:	2300      	movs	r3, #0
 8003448:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800344a:	2300      	movs	r3, #0
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800344e:	f107 0320 	add.w	r3, r7, #32
 8003452:	4619      	mov	r1, r3
 8003454:	4816      	ldr	r0, [pc, #88]	; (80034b0 <MX_TIM4_Init+0xfc>)
 8003456:	f004 fab7 	bl	80079c8 <HAL_TIMEx_MasterConfigSynchronization>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003460:	f000 f894 	bl	800358c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003464:	2360      	movs	r3, #96	; 0x60
 8003466:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003474:	1d3b      	adds	r3, r7, #4
 8003476:	2200      	movs	r2, #0
 8003478:	4619      	mov	r1, r3
 800347a:	480d      	ldr	r0, [pc, #52]	; (80034b0 <MX_TIM4_Init+0xfc>)
 800347c:	f003 fd76 	bl	8006f6c <HAL_TIM_PWM_ConfigChannel>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003486:	f000 f881 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800348a:	1d3b      	adds	r3, r7, #4
 800348c:	2204      	movs	r2, #4
 800348e:	4619      	mov	r1, r3
 8003490:	4807      	ldr	r0, [pc, #28]	; (80034b0 <MX_TIM4_Init+0xfc>)
 8003492:	f003 fd6b 	bl	8006f6c <HAL_TIM_PWM_ConfigChannel>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800349c:	f000 f876 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80034a0:	4803      	ldr	r0, [pc, #12]	; (80034b0 <MX_TIM4_Init+0xfc>)
 80034a2:	f000 fed3 	bl	800424c <HAL_TIM_MspPostInit>

}
 80034a6:	bf00      	nop
 80034a8:	3738      	adds	r7, #56	; 0x38
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	200002a4 	.word	0x200002a4
 80034b4:	40000800 	.word	0x40000800

080034b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034be:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <MX_DMA_Init+0x28>)
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	4a07      	ldr	r2, [pc, #28]	; (80034e0 <MX_DMA_Init+0x28>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6153      	str	r3, [r2, #20]
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <MX_DMA_Init+0x28>)
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	607b      	str	r3, [r7, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]

}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	40021000 	.word	0x40021000

080034e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ea:	f107 0310 	add.w	r3, r7, #16
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	609a      	str	r2, [r3, #8]
 80034f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034f8:	4b21      	ldr	r3, [pc, #132]	; (8003580 <MX_GPIO_Init+0x9c>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	4a20      	ldr	r2, [pc, #128]	; (8003580 <MX_GPIO_Init+0x9c>)
 80034fe:	f043 0320 	orr.w	r3, r3, #32
 8003502:	6193      	str	r3, [r2, #24]
 8003504:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <MX_GPIO_Init+0x9c>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <MX_GPIO_Init+0x9c>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <MX_GPIO_Init+0x9c>)
 8003516:	f043 0304 	orr.w	r3, r3, #4
 800351a:	6193      	str	r3, [r2, #24]
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <MX_GPIO_Init+0x9c>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <MX_GPIO_Init+0x9c>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	4a14      	ldr	r2, [pc, #80]	; (8003580 <MX_GPIO_Init+0x9c>)
 800352e:	f043 0308 	orr.w	r3, r3, #8
 8003532:	6193      	str	r3, [r2, #24]
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <MX_GPIO_Init+0x9c>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003540:	2303      	movs	r3, #3
 8003542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <MX_GPIO_Init+0xa0>)
 8003546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003548:	2301      	movs	r3, #1
 800354a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354c:	f107 0310 	add.w	r3, r7, #16
 8003550:	4619      	mov	r1, r3
 8003552:	480d      	ldr	r0, [pc, #52]	; (8003588 <MX_GPIO_Init+0xa4>)
 8003554:	f002 fc2c 	bl	8005db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003558:	2200      	movs	r2, #0
 800355a:	2100      	movs	r1, #0
 800355c:	2006      	movs	r0, #6
 800355e:	f002 fb08 	bl	8005b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003562:	2006      	movs	r0, #6
 8003564:	f002 fb21 	bl	8005baa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003568:	2200      	movs	r2, #0
 800356a:	2100      	movs	r1, #0
 800356c:	2007      	movs	r0, #7
 800356e:	f002 fb00 	bl	8005b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003572:	2007      	movs	r0, #7
 8003574:	f002 fb19 	bl	8005baa <HAL_NVIC_EnableIRQ>

}
 8003578:	bf00      	nop
 800357a:	3720      	adds	r7, #32
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000
 8003584:	10210000 	.word	0x10210000
 8003588:	40010c00 	.word	0x40010c00

0800358c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003590:	b672      	cpsid	i
}
 8003592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003594:	e7fe      	b.n	8003594 <Error_Handler+0x8>
	...

08003598 <findShortestPath>:
uint16_t path_index;


void add_path(float pram1, float param2, float param3, uint8_t param4);

void findShortestPath(){
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
    memset(visited, false, sizeof(visited));
 800359e:	2264      	movs	r2, #100	; 0x64
 80035a0:	2100      	movs	r1, #0
 80035a2:	48ae      	ldr	r0, [pc, #696]	; (800385c <findShortestPath+0x2c4>)
 80035a4:	f004 faa4 	bl	8007af0 <memset>
    for(uint16_t i = 0; i < grid_size * grid_size; i++)
 80035a8:	2300      	movs	r3, #0
 80035aa:	81fb      	strh	r3, [r7, #14]
 80035ac:	e008      	b.n	80035c0 <findShortestPath+0x28>
    	shortestPath[i] = 0;
 80035ae:	89fb      	ldrh	r3, [r7, #14]
 80035b0:	4aab      	ldr	r2, [pc, #684]	; (8003860 <findShortestPath+0x2c8>)
 80035b2:	f04f 0100 	mov.w	r1, #0
 80035b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(uint16_t i = 0; i < grid_size * grid_size; i++)
 80035ba:	89fb      	ldrh	r3, [r7, #14]
 80035bc:	3301      	adds	r3, #1
 80035be:	81fb      	strh	r3, [r7, #14]
 80035c0:	89fb      	ldrh	r3, [r7, #14]
 80035c2:	2b63      	cmp	r3, #99	; 0x63
 80035c4:	d9f3      	bls.n	80035ae <findShortestPath+0x16>

    int16_t len = 3;
 80035c6:	2303      	movs	r3, #3
 80035c8:	81bb      	strh	r3, [r7, #12]
    int16_t curr = 2;
 80035ca:	2302      	movs	r3, #2
 80035cc:	817b      	strh	r3, [r7, #10]

    temp[0][0] = ending_coordinates[0];
 80035ce:	4ba5      	ldr	r3, [pc, #660]	; (8003864 <findShortestPath+0x2cc>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	b21a      	sxth	r2, r3
 80035d4:	4ba4      	ldr	r3, [pc, #656]	; (8003868 <findShortestPath+0x2d0>)
 80035d6:	801a      	strh	r2, [r3, #0]
    temp[0][1] = ending_coordinates[1] - 2;
 80035d8:	4ba2      	ldr	r3, [pc, #648]	; (8003864 <findShortestPath+0x2cc>)
 80035da:	785b      	ldrb	r3, [r3, #1]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b02      	subs	r3, #2
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	b21a      	sxth	r2, r3
 80035e4:	4ba0      	ldr	r3, [pc, #640]	; (8003868 <findShortestPath+0x2d0>)
 80035e6:	805a      	strh	r2, [r3, #2]
    temp[0][2] = -1;
 80035e8:	4b9f      	ldr	r3, [pc, #636]	; (8003868 <findShortestPath+0x2d0>)
 80035ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ee:	809a      	strh	r2, [r3, #4]

    temp[1][0] = ending_coordinates[0];
 80035f0:	4b9c      	ldr	r3, [pc, #624]	; (8003864 <findShortestPath+0x2cc>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	b21a      	sxth	r2, r3
 80035f6:	4b9c      	ldr	r3, [pc, #624]	; (8003868 <findShortestPath+0x2d0>)
 80035f8:	80da      	strh	r2, [r3, #6]
    temp[1][1] = ending_coordinates[1] - 1;
 80035fa:	4b9a      	ldr	r3, [pc, #616]	; (8003864 <findShortestPath+0x2cc>)
 80035fc:	785b      	ldrb	r3, [r3, #1]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29b      	uxth	r3, r3
 8003604:	b21a      	sxth	r2, r3
 8003606:	4b98      	ldr	r3, [pc, #608]	; (8003868 <findShortestPath+0x2d0>)
 8003608:	811a      	strh	r2, [r3, #8]
    temp[1][2] = 0;
 800360a:	4b97      	ldr	r3, [pc, #604]	; (8003868 <findShortestPath+0x2d0>)
 800360c:	2200      	movs	r2, #0
 800360e:	815a      	strh	r2, [r3, #10]

    temp[2][0] = ending_coordinates[0];
 8003610:	4b94      	ldr	r3, [pc, #592]	; (8003864 <findShortestPath+0x2cc>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	b21a      	sxth	r2, r3
 8003616:	4b94      	ldr	r3, [pc, #592]	; (8003868 <findShortestPath+0x2d0>)
 8003618:	819a      	strh	r2, [r3, #12]
    temp[2][1] = ending_coordinates[1];
 800361a:	4b92      	ldr	r3, [pc, #584]	; (8003864 <findShortestPath+0x2cc>)
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	b21a      	sxth	r2, r3
 8003620:	4b91      	ldr	r3, [pc, #580]	; (8003868 <findShortestPath+0x2d0>)
 8003622:	81da      	strh	r2, [r3, #14]
    temp[2][2] = 1;
 8003624:	4b90      	ldr	r3, [pc, #576]	; (8003868 <findShortestPath+0x2d0>)
 8003626:	2201      	movs	r2, #1
 8003628:	821a      	strh	r2, [r3, #16]

    visited[temp[2][1]][temp[2][0]] = true;
 800362a:	4b8f      	ldr	r3, [pc, #572]	; (8003868 <findShortestPath+0x2d0>)
 800362c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003630:	4619      	mov	r1, r3
 8003632:	4b8d      	ldr	r3, [pc, #564]	; (8003868 <findShortestPath+0x2d0>)
 8003634:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003638:	4618      	mov	r0, r3
 800363a:	4a88      	ldr	r2, [pc, #544]	; (800385c <findShortestPath+0x2c4>)
 800363c:	460b      	mov	r3, r1
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	4403      	add	r3, r0
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
    int16_t x, y;
    while(curr != len){
 800364c:	e0cf      	b.n	80037ee <findShortestPath+0x256>
        x = temp[curr][0];
 800364e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003652:	4985      	ldr	r1, [pc, #532]	; (8003868 <findShortestPath+0x2d0>)
 8003654:	4613      	mov	r3, r2
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4413      	add	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	440b      	add	r3, r1
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	80bb      	strh	r3, [r7, #4]
        y = temp[curr][1];
 8003662:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003666:	4980      	ldr	r1, [pc, #512]	; (8003868 <findShortestPath+0x2d0>)
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	440b      	add	r3, r1
 8003672:	3302      	adds	r3, #2
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	807b      	strh	r3, [r7, #2]
        if(x == starting_coordinates[0] && y == starting_coordinates[1]){
 8003678:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800367c:	4a7b      	ldr	r2, [pc, #492]	; (800386c <findShortestPath+0x2d4>)
 800367e:	7812      	ldrb	r2, [r2, #0]
 8003680:	4293      	cmp	r3, r2
 8003682:	d106      	bne.n	8003692 <findShortestPath+0xfa>
 8003684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003688:	4a78      	ldr	r2, [pc, #480]	; (800386c <findShortestPath+0x2d4>)
 800368a:	7852      	ldrb	r2, [r2, #1]
 800368c:	4293      	cmp	r3, r2
 800368e:	f000 80b6 	beq.w	80037fe <findShortestPath+0x266>
            break;
        }
        uint8_t wall = maze[y][x];
 8003692:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003696:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800369a:	4875      	ldr	r0, [pc, #468]	; (8003870 <findShortestPath+0x2d8>)
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4403      	add	r3, r0
 80036a6:	440b      	add	r3, r1
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	707b      	strb	r3, [r7, #1]
        for(uint8_t _ = 0; _ < 4; _++){
 80036ac:	2300      	movs	r3, #0
 80036ae:	727b      	strb	r3, [r7, #9]
 80036b0:	e093      	b.n	80037da <findShortestPath+0x242>
            if(!visited[y + move[_][0]][x + move[_][1]] && !(wall & move[_][2])){
 80036b2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80036b6:	7a7a      	ldrb	r2, [r7, #9]
 80036b8:	486e      	ldr	r0, [pc, #440]	; (8003874 <findShortestPath+0x2dc>)
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	4403      	add	r3, r0
 80036c2:	f993 3000 	ldrsb.w	r3, [r3]
 80036c6:	18ca      	adds	r2, r1, r3
 80036c8:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80036cc:	7a79      	ldrb	r1, [r7, #9]
 80036ce:	4c69      	ldr	r4, [pc, #420]	; (8003874 <findShortestPath+0x2dc>)
 80036d0:	460b      	mov	r3, r1
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	440b      	add	r3, r1
 80036d6:	4423      	add	r3, r4
 80036d8:	3301      	adds	r3, #1
 80036da:	f993 3000 	ldrsb.w	r3, [r3]
 80036de:	18c1      	adds	r1, r0, r3
 80036e0:	485e      	ldr	r0, [pc, #376]	; (800385c <findShortestPath+0x2c4>)
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4403      	add	r3, r0
 80036ec:	440b      	add	r3, r1
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	f083 0301 	eor.w	r3, r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d06c      	beq.n	80037d4 <findShortestPath+0x23c>
 80036fa:	7879      	ldrb	r1, [r7, #1]
 80036fc:	7a7a      	ldrb	r2, [r7, #9]
 80036fe:	485d      	ldr	r0, [pc, #372]	; (8003874 <findShortestPath+0x2dc>)
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	4403      	add	r3, r0
 8003708:	3302      	adds	r3, #2
 800370a:	f993 3000 	ldrsb.w	r3, [r3]
 800370e:	400b      	ands	r3, r1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d15f      	bne.n	80037d4 <findShortestPath+0x23c>
                temp[len][0] = x + move[_][1];
 8003714:	7a7a      	ldrb	r2, [r7, #9]
 8003716:	4957      	ldr	r1, [pc, #348]	; (8003874 <findShortestPath+0x2dc>)
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	440b      	add	r3, r1
 8003720:	3301      	adds	r3, #1
 8003722:	f993 3000 	ldrsb.w	r3, [r3]
 8003726:	b29a      	uxth	r2, r3
 8003728:	88bb      	ldrh	r3, [r7, #4]
 800372a:	4413      	add	r3, r2
 800372c:	b29b      	uxth	r3, r3
 800372e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003732:	b218      	sxth	r0, r3
 8003734:	494c      	ldr	r1, [pc, #304]	; (8003868 <findShortestPath+0x2d0>)
 8003736:	4613      	mov	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4413      	add	r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	440b      	add	r3, r1
 8003740:	4602      	mov	r2, r0
 8003742:	801a      	strh	r2, [r3, #0]
                temp[len][1] = y + move[_][0];
 8003744:	7a7a      	ldrb	r2, [r7, #9]
 8003746:	494b      	ldr	r1, [pc, #300]	; (8003874 <findShortestPath+0x2dc>)
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	440b      	add	r3, r1
 8003750:	f993 3000 	ldrsb.w	r3, [r3]
 8003754:	b29a      	uxth	r2, r3
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	4413      	add	r3, r2
 800375a:	b29b      	uxth	r3, r3
 800375c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003760:	b218      	sxth	r0, r3
 8003762:	4941      	ldr	r1, [pc, #260]	; (8003868 <findShortestPath+0x2d0>)
 8003764:	4613      	mov	r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	4413      	add	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	440b      	add	r3, r1
 800376e:	3302      	adds	r3, #2
 8003770:	4602      	mov	r2, r0
 8003772:	801a      	strh	r2, [r3, #0]
                visited[temp[len][1]][temp[len][0]] = true;
 8003774:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003778:	493b      	ldr	r1, [pc, #236]	; (8003868 <findShortestPath+0x2d0>)
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	440b      	add	r3, r1
 8003784:	3302      	adds	r3, #2
 8003786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800378a:	4618      	mov	r0, r3
 800378c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003790:	4935      	ldr	r1, [pc, #212]	; (8003868 <findShortestPath+0x2d0>)
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	440b      	add	r3, r1
 800379c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a0:	4619      	mov	r1, r3
 80037a2:	4a2e      	ldr	r2, [pc, #184]	; (800385c <findShortestPath+0x2c4>)
 80037a4:	4603      	mov	r3, r0
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4403      	add	r3, r0
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	440b      	add	r3, r1
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]
                temp[len++][2] = curr;
 80037b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80037b8:	b293      	uxth	r3, r2
 80037ba:	3301      	adds	r3, #1
 80037bc:	b29b      	uxth	r3, r3
 80037be:	81bb      	strh	r3, [r7, #12]
 80037c0:	4611      	mov	r1, r2
 80037c2:	4a29      	ldr	r2, [pc, #164]	; (8003868 <findShortestPath+0x2d0>)
 80037c4:	460b      	mov	r3, r1
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	440b      	add	r3, r1
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	897a      	ldrh	r2, [r7, #10]
 80037d2:	801a      	strh	r2, [r3, #0]
        for(uint8_t _ = 0; _ < 4; _++){
 80037d4:	7a7b      	ldrb	r3, [r7, #9]
 80037d6:	3301      	adds	r3, #1
 80037d8:	727b      	strb	r3, [r7, #9]
 80037da:	7a7b      	ldrb	r3, [r7, #9]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	f67f af68 	bls.w	80036b2 <findShortestPath+0x11a>
            }
        }
        curr++;
 80037e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	817b      	strh	r3, [r7, #10]
    while(curr != len){
 80037ee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80037f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	f47f af29 	bne.w	800364e <findShortestPath+0xb6>
 80037fc:	e000      	b.n	8003800 <findShortestPath+0x268>
            break;
 80037fe:	bf00      	nop
    }

    direction = north;
 8003800:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <findShortestPath+0x2e0>)
 8003802:	2202      	movs	r2, #2
 8003804:	701a      	strb	r2, [r3, #0]
    uint8_t lastt_x;
    uint8_t last_x = temp[curr][0];
 8003806:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800380a:	4917      	ldr	r1, [pc, #92]	; (8003868 <findShortestPath+0x2d0>)
 800380c:	4613      	mov	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4413      	add	r3, r2
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	440b      	add	r3, r1
 8003816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800381a:	71fb      	strb	r3, [r7, #7]
    uint8_t last_y = temp[curr][1];
 800381c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003820:	4911      	ldr	r1, [pc, #68]	; (8003868 <findShortestPath+0x2d0>)
 8003822:	4613      	mov	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	440b      	add	r3, r1
 800382c:	3302      	adds	r3, #2
 800382e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003832:	71bb      	strb	r3, [r7, #6]
    curr = temp[curr][2];
 8003834:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003838:	490b      	ldr	r1, [pc, #44]	; (8003868 <findShortestPath+0x2d0>)
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	440b      	add	r3, r1
 8003844:	3304      	adds	r3, #4
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	817b      	strh	r3, [r7, #10]
    path_index = 0;
 800384a:	4b0c      	ldr	r3, [pc, #48]	; (800387c <findShortestPath+0x2e4>)
 800384c:	2200      	movs	r2, #0
 800384e:	801a      	strh	r2, [r3, #0]
    shortestPath[0] = 0;
 8003850:	4b03      	ldr	r3, [pc, #12]	; (8003860 <findShortestPath+0x2c8>)
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
    while(curr != -1){
 8003858:	e35d      	b.n	8003f16 <findShortestPath+0x97e>
 800385a:	bf00      	nop
 800385c:	20000350 	.word	0x20000350
 8003860:	20000618 	.word	0x20000618
 8003864:	08007bac 	.word	0x08007bac
 8003868:	200003c0 	.word	0x200003c0
 800386c:	08007ba8 	.word	0x08007ba8
 8003870:	200002ec 	.word	0x200002ec
 8003874:	08007bb8 	.word	0x08007bb8
 8003878:	20000c58 	.word	0x20000c58
 800387c:	20000c5a 	.word	0x20000c5a
        if(temp[curr][1] > last_y){
 8003880:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003884:	499c      	ldr	r1, [pc, #624]	; (8003af8 <findShortestPath+0x560>)
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	440b      	add	r3, r1
 8003890:	3302      	adds	r3, #2
 8003892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003896:	461a      	mov	r2, r3
 8003898:	79bb      	ldrb	r3, [r7, #6]
 800389a:	429a      	cmp	r2, r3
 800389c:	f340 80b3 	ble.w	8003a06 <findShortestPath+0x46e>
            switch(direction){
 80038a0:	4b96      	ldr	r3, [pc, #600]	; (8003afc <findShortestPath+0x564>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b07      	cmp	r3, #7
 80038a6:	f200 8312 	bhi.w	8003ece <findShortestPath+0x936>
 80038aa:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <findShortestPath+0x318>)
 80038ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b0:	080038d1 	.word	0x080038d1
 80038b4:	080038ef 	.word	0x080038ef
 80038b8:	08003ecf 	.word	0x08003ecf
 80038bc:	0800390f 	.word	0x0800390f
 80038c0:	08003935 	.word	0x08003935
 80038c4:	08003953 	.word	0x08003953
 80038c8:	080039bd 	.word	0x080039bd
 80038cc:	08003971 	.word	0x08003971
                case west:
                    add_path(offset45, turn_left_45, half_diagonal - offset45, south_west);
 80038d0:	4c8b      	ldr	r4, [pc, #556]	; (8003b00 <findShortestPath+0x568>)
 80038d2:	4b8c      	ldr	r3, [pc, #560]	; (8003b04 <findShortestPath+0x56c>)
 80038d4:	4a8a      	ldr	r2, [pc, #552]	; (8003b00 <findShortestPath+0x568>)
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fd f8dd 	bl	8000a98 <__aeabi_fsub>
 80038de:	4603      	mov	r3, r0
 80038e0:	461a      	mov	r2, r3
 80038e2:	2306      	movs	r3, #6
 80038e4:	4988      	ldr	r1, [pc, #544]	; (8003b08 <findShortestPath+0x570>)
 80038e6:	4620      	mov	r0, r4
 80038e8:	f000 fb34 	bl	8003f54 <add_path>
                    break;
 80038ec:	e2ef      	b.n	8003ece <findShortestPath+0x936>
                case east:
                    add_path(offset45, turn_right_45, half_diagonal - offset45, south_east);
 80038ee:	4c84      	ldr	r4, [pc, #528]	; (8003b00 <findShortestPath+0x568>)
 80038f0:	4b84      	ldr	r3, [pc, #528]	; (8003b04 <findShortestPath+0x56c>)
 80038f2:	4a83      	ldr	r2, [pc, #524]	; (8003b00 <findShortestPath+0x568>)
 80038f4:	4611      	mov	r1, r2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd f8ce 	bl	8000a98 <__aeabi_fsub>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	2307      	movs	r3, #7
 8003902:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003906:	4620      	mov	r0, r4
 8003908:	f000 fb24 	bl	8003f54 <add_path>
                    break;
 800390c:	e2df      	b.n	8003ece <findShortestPath+0x936>
                case south:
                    shortestPath[path_index]+=square_size;
 800390e:	4b7f      	ldr	r3, [pc, #508]	; (8003b0c <findShortestPath+0x574>)
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	4b7e      	ldr	r3, [pc, #504]	; (8003b10 <findShortestPath+0x578>)
 8003916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800391a:	4a7c      	ldr	r2, [pc, #496]	; (8003b0c <findShortestPath+0x574>)
 800391c:	8812      	ldrh	r2, [r2, #0]
 800391e:	4614      	mov	r4, r2
 8003920:	497c      	ldr	r1, [pc, #496]	; (8003b14 <findShortestPath+0x57c>)
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd f8ba 	bl	8000a9c <__addsf3>
 8003928:	4603      	mov	r3, r0
 800392a:	461a      	mov	r2, r3
 800392c:	4b78      	ldr	r3, [pc, #480]	; (8003b10 <findShortestPath+0x578>)
 800392e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    break;
 8003932:	e2cc      	b.n	8003ece <findShortestPath+0x936>
                case north_west:
                    add_path(offset90, turn_left_90, half_diagonal - offset90, south_west);
 8003934:	4c78      	ldr	r4, [pc, #480]	; (8003b18 <findShortestPath+0x580>)
 8003936:	4b73      	ldr	r3, [pc, #460]	; (8003b04 <findShortestPath+0x56c>)
 8003938:	4a77      	ldr	r2, [pc, #476]	; (8003b18 <findShortestPath+0x580>)
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f7fd f8ab 	bl	8000a98 <__aeabi_fsub>
 8003942:	4603      	mov	r3, r0
 8003944:	461a      	mov	r2, r3
 8003946:	2306      	movs	r3, #6
 8003948:	4974      	ldr	r1, [pc, #464]	; (8003b1c <findShortestPath+0x584>)
 800394a:	4620      	mov	r0, r4
 800394c:	f000 fb02 	bl	8003f54 <add_path>
                    break;
 8003950:	e2bd      	b.n	8003ece <findShortestPath+0x936>
                case north_east:
                    add_path(offset90, turn_right_90, half_diagonal - offset90, south_east);
 8003952:	4c71      	ldr	r4, [pc, #452]	; (8003b18 <findShortestPath+0x580>)
 8003954:	4b6b      	ldr	r3, [pc, #428]	; (8003b04 <findShortestPath+0x56c>)
 8003956:	4a70      	ldr	r2, [pc, #448]	; (8003b18 <findShortestPath+0x580>)
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd f89c 	bl	8000a98 <__aeabi_fsub>
 8003960:	4603      	mov	r3, r0
 8003962:	461a      	mov	r2, r3
 8003964:	2307      	movs	r3, #7
 8003966:	496e      	ldr	r1, [pc, #440]	; (8003b20 <findShortestPath+0x588>)
 8003968:	4620      	mov	r0, r4
 800396a:	f000 faf3 	bl	8003f54 <add_path>
                    break;
 800396e:	e2ae      	b.n	8003ece <findShortestPath+0x936>
                case south_east:
                    if(lastt_x < last_x){
 8003970:	7a3a      	ldrb	r2, [r7, #8]
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	429a      	cmp	r2, r3
 8003976:	d212      	bcs.n	800399e <findShortestPath+0x406>
                        shortestPath[path_index]+=half_diagonal;
 8003978:	4b64      	ldr	r3, [pc, #400]	; (8003b0c <findShortestPath+0x574>)
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	4b64      	ldr	r3, [pc, #400]	; (8003b10 <findShortestPath+0x578>)
 8003980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003984:	495f      	ldr	r1, [pc, #380]	; (8003b04 <findShortestPath+0x56c>)
 8003986:	4a61      	ldr	r2, [pc, #388]	; (8003b0c <findShortestPath+0x574>)
 8003988:	8812      	ldrh	r2, [r2, #0]
 800398a:	4614      	mov	r4, r2
 800398c:	4618      	mov	r0, r3
 800398e:	f7fd f885 	bl	8000a9c <__addsf3>
 8003992:	4603      	mov	r3, r0
 8003994:	461a      	mov	r2, r3
 8003996:	4b5e      	ldr	r3, [pc, #376]	; (8003b10 <findShortestPath+0x578>)
 8003998:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    } else {
                        add_path(offset45, turn_right_45, square_size - offset45, south);
                    }
                    break;
 800399c:	e297      	b.n	8003ece <findShortestPath+0x936>
                        add_path(offset45, turn_right_45, square_size - offset45, south);
 800399e:	4c58      	ldr	r4, [pc, #352]	; (8003b00 <findShortestPath+0x568>)
 80039a0:	4b57      	ldr	r3, [pc, #348]	; (8003b00 <findShortestPath+0x568>)
 80039a2:	4619      	mov	r1, r3
 80039a4:	485b      	ldr	r0, [pc, #364]	; (8003b14 <findShortestPath+0x57c>)
 80039a6:	f7fd f877 	bl	8000a98 <__aeabi_fsub>
 80039aa:	4603      	mov	r3, r0
 80039ac:	461a      	mov	r2, r3
 80039ae:	2303      	movs	r3, #3
 80039b0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80039b4:	4620      	mov	r0, r4
 80039b6:	f000 facd 	bl	8003f54 <add_path>
                    break;
 80039ba:	e288      	b.n	8003ece <findShortestPath+0x936>
                case south_west:
                    if(lastt_x > last_x){
 80039bc:	7a3a      	ldrb	r2, [r7, #8]
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d912      	bls.n	80039ea <findShortestPath+0x452>
                        shortestPath[path_index]+=half_diagonal;
 80039c4:	4b51      	ldr	r3, [pc, #324]	; (8003b0c <findShortestPath+0x574>)
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	4b51      	ldr	r3, [pc, #324]	; (8003b10 <findShortestPath+0x578>)
 80039cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d0:	494c      	ldr	r1, [pc, #304]	; (8003b04 <findShortestPath+0x56c>)
 80039d2:	4a4e      	ldr	r2, [pc, #312]	; (8003b0c <findShortestPath+0x574>)
 80039d4:	8812      	ldrh	r2, [r2, #0]
 80039d6:	4614      	mov	r4, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fd f85f 	bl	8000a9c <__addsf3>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	4b4b      	ldr	r3, [pc, #300]	; (8003b10 <findShortestPath+0x578>)
 80039e4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80039e8:	e271      	b.n	8003ece <findShortestPath+0x936>
                    } else {
                        add_path(offset45, turn_left_45, square_size - offset45, south);
 80039ea:	4c45      	ldr	r4, [pc, #276]	; (8003b00 <findShortestPath+0x568>)
 80039ec:	4b44      	ldr	r3, [pc, #272]	; (8003b00 <findShortestPath+0x568>)
 80039ee:	4619      	mov	r1, r3
 80039f0:	4848      	ldr	r0, [pc, #288]	; (8003b14 <findShortestPath+0x57c>)
 80039f2:	f7fd f851 	bl	8000a98 <__aeabi_fsub>
 80039f6:	4603      	mov	r3, r0
 80039f8:	461a      	mov	r2, r3
 80039fa:	2303      	movs	r3, #3
 80039fc:	4942      	ldr	r1, [pc, #264]	; (8003b08 <findShortestPath+0x570>)
 80039fe:	4620      	mov	r0, r4
 8003a00:	f000 faa8 	bl	8003f54 <add_path>
 8003a04:	e263      	b.n	8003ece <findShortestPath+0x936>
                    }
            }
        } else if(temp[curr][1] < last_y){
 8003a06:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003a0a:	493b      	ldr	r1, [pc, #236]	; (8003af8 <findShortestPath+0x560>)
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	440b      	add	r3, r1
 8003a16:	3302      	adds	r3, #2
 8003a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	79bb      	ldrb	r3, [r7, #6]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	f280 80ca 	bge.w	8003bba <findShortestPath+0x622>
            switch(direction){
 8003a26:	4b35      	ldr	r3, [pc, #212]	; (8003afc <findShortestPath+0x564>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b07      	cmp	r3, #7
 8003a2c:	f200 824f 	bhi.w	8003ece <findShortestPath+0x936>
 8003a30:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <findShortestPath+0x4a0>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003a59 	.word	0x08003a59
 8003a3c:	08003a79 	.word	0x08003a79
 8003a40:	08003a97 	.word	0x08003a97
 8003a44:	08003ecf 	.word	0x08003ecf
 8003a48:	08003b25 	.word	0x08003b25
 8003a4c:	08003b71 	.word	0x08003b71
 8003a50:	08003abd 	.word	0x08003abd
 8003a54:	08003adb 	.word	0x08003adb
                case west:
                    add_path(offset45, turn_right_45, half_diagonal - offset45, north_west);
 8003a58:	4c29      	ldr	r4, [pc, #164]	; (8003b00 <findShortestPath+0x568>)
 8003a5a:	4b2a      	ldr	r3, [pc, #168]	; (8003b04 <findShortestPath+0x56c>)
 8003a5c:	4a28      	ldr	r2, [pc, #160]	; (8003b00 <findShortestPath+0x568>)
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fd f819 	bl	8000a98 <__aeabi_fsub>
 8003a66:	4603      	mov	r3, r0
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003a70:	4620      	mov	r0, r4
 8003a72:	f000 fa6f 	bl	8003f54 <add_path>
                    break;
 8003a76:	e22a      	b.n	8003ece <findShortestPath+0x936>
                case east:
                    add_path(offset45, turn_left_45, half_diagonal - offset45, north_east);
 8003a78:	4c21      	ldr	r4, [pc, #132]	; (8003b00 <findShortestPath+0x568>)
 8003a7a:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <findShortestPath+0x56c>)
 8003a7c:	4a20      	ldr	r2, [pc, #128]	; (8003b00 <findShortestPath+0x568>)
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fd f809 	bl	8000a98 <__aeabi_fsub>
 8003a86:	4603      	mov	r3, r0
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2305      	movs	r3, #5
 8003a8c:	491e      	ldr	r1, [pc, #120]	; (8003b08 <findShortestPath+0x570>)
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f000 fa60 	bl	8003f54 <add_path>
                    break;
 8003a94:	e21b      	b.n	8003ece <findShortestPath+0x936>
                case north:
                    shortestPath[path_index]+=square_size;
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <findShortestPath+0x574>)
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <findShortestPath+0x578>)
 8003a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa2:	4a1a      	ldr	r2, [pc, #104]	; (8003b0c <findShortestPath+0x574>)
 8003aa4:	8812      	ldrh	r2, [r2, #0]
 8003aa6:	4614      	mov	r4, r2
 8003aa8:	491a      	ldr	r1, [pc, #104]	; (8003b14 <findShortestPath+0x57c>)
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fc fff6 	bl	8000a9c <__addsf3>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <findShortestPath+0x578>)
 8003ab6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    break;
 8003aba:	e208      	b.n	8003ece <findShortestPath+0x936>
                case south_west:
                    add_path(offset90, turn_right_90, half_diagonal - offset90, north_west);
 8003abc:	4c16      	ldr	r4, [pc, #88]	; (8003b18 <findShortestPath+0x580>)
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <findShortestPath+0x56c>)
 8003ac0:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <findShortestPath+0x580>)
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fc ffe7 	bl	8000a98 <__aeabi_fsub>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	2304      	movs	r3, #4
 8003ad0:	4913      	ldr	r1, [pc, #76]	; (8003b20 <findShortestPath+0x588>)
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f000 fa3e 	bl	8003f54 <add_path>
                    break;
 8003ad8:	e1f9      	b.n	8003ece <findShortestPath+0x936>
                case south_east:
                    add_path(offset90, turn_left_90, half_diagonal - offset90, north_east);
 8003ada:	4c0f      	ldr	r4, [pc, #60]	; (8003b18 <findShortestPath+0x580>)
 8003adc:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <findShortestPath+0x56c>)
 8003ade:	4a0e      	ldr	r2, [pc, #56]	; (8003b18 <findShortestPath+0x580>)
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fc ffd8 	bl	8000a98 <__aeabi_fsub>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	461a      	mov	r2, r3
 8003aec:	2305      	movs	r3, #5
 8003aee:	490b      	ldr	r1, [pc, #44]	; (8003b1c <findShortestPath+0x584>)
 8003af0:	4620      	mov	r0, r4
 8003af2:	f000 fa2f 	bl	8003f54 <add_path>
                    break;
 8003af6:	e1ea      	b.n	8003ece <findShortestPath+0x936>
 8003af8:	200003c0 	.word	0x200003c0
 8003afc:	20000c58 	.word	0x20000c58
 8003b00:	4161550a 	.word	0x4161550a
 8003b04:	435421cd 	.word	0x435421cd
 8003b08:	c0400000 	.word	0xc0400000
 8003b0c:	20000c5a 	.word	0x20000c5a
 8003b10:	20000618 	.word	0x20000618
 8003b14:	43960000 	.word	0x43960000
 8003b18:	42080000 	.word	0x42080000
 8003b1c:	c0800000 	.word	0xc0800000
 8003b20:	bf800000 	.word	0xbf800000
                case north_west:
                    if(lastt_x > last_x){
 8003b24:	7a3a      	ldrb	r2, [r7, #8]
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d912      	bls.n	8003b52 <findShortestPath+0x5ba>
                        shortestPath[path_index]+=half_diagonal;
 8003b2c:	4ba1      	ldr	r3, [pc, #644]	; (8003db4 <findShortestPath+0x81c>)
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	4ba1      	ldr	r3, [pc, #644]	; (8003db8 <findShortestPath+0x820>)
 8003b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b38:	49a0      	ldr	r1, [pc, #640]	; (8003dbc <findShortestPath+0x824>)
 8003b3a:	4a9e      	ldr	r2, [pc, #632]	; (8003db4 <findShortestPath+0x81c>)
 8003b3c:	8812      	ldrh	r2, [r2, #0]
 8003b3e:	4614      	mov	r4, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fc ffab 	bl	8000a9c <__addsf3>
 8003b46:	4603      	mov	r3, r0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4b9b      	ldr	r3, [pc, #620]	; (8003db8 <findShortestPath+0x820>)
 8003b4c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    } else {
                        add_path(offset45, turn_right_45, square_size - offset45, north);
                    }
                    break;
 8003b50:	e1bd      	b.n	8003ece <findShortestPath+0x936>
                        add_path(offset45, turn_right_45, square_size - offset45, north);
 8003b52:	4c9b      	ldr	r4, [pc, #620]	; (8003dc0 <findShortestPath+0x828>)
 8003b54:	4b9a      	ldr	r3, [pc, #616]	; (8003dc0 <findShortestPath+0x828>)
 8003b56:	4619      	mov	r1, r3
 8003b58:	489a      	ldr	r0, [pc, #616]	; (8003dc4 <findShortestPath+0x82c>)
 8003b5a:	f7fc ff9d 	bl	8000a98 <__aeabi_fsub>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	461a      	mov	r2, r3
 8003b62:	2302      	movs	r3, #2
 8003b64:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003b68:	4620      	mov	r0, r4
 8003b6a:	f000 f9f3 	bl	8003f54 <add_path>
                    break;
 8003b6e:	e1ae      	b.n	8003ece <findShortestPath+0x936>
                case north_east:
                    if(lastt_x < last_x){
 8003b70:	7a3a      	ldrb	r2, [r7, #8]
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d212      	bcs.n	8003b9e <findShortestPath+0x606>
                        shortestPath[path_index]+=half_diagonal;
 8003b78:	4b8e      	ldr	r3, [pc, #568]	; (8003db4 <findShortestPath+0x81c>)
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4b8e      	ldr	r3, [pc, #568]	; (8003db8 <findShortestPath+0x820>)
 8003b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b84:	498d      	ldr	r1, [pc, #564]	; (8003dbc <findShortestPath+0x824>)
 8003b86:	4a8b      	ldr	r2, [pc, #556]	; (8003db4 <findShortestPath+0x81c>)
 8003b88:	8812      	ldrh	r2, [r2, #0]
 8003b8a:	4614      	mov	r4, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fc ff85 	bl	8000a9c <__addsf3>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	4b88      	ldr	r3, [pc, #544]	; (8003db8 <findShortestPath+0x820>)
 8003b98:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8003b9c:	e197      	b.n	8003ece <findShortestPath+0x936>
                    } else {
                        add_path(offset45, turn_left_45, square_size - offset45, north);
 8003b9e:	4c88      	ldr	r4, [pc, #544]	; (8003dc0 <findShortestPath+0x828>)
 8003ba0:	4b87      	ldr	r3, [pc, #540]	; (8003dc0 <findShortestPath+0x828>)
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4887      	ldr	r0, [pc, #540]	; (8003dc4 <findShortestPath+0x82c>)
 8003ba6:	f7fc ff77 	bl	8000a98 <__aeabi_fsub>
 8003baa:	4603      	mov	r3, r0
 8003bac:	461a      	mov	r2, r3
 8003bae:	2302      	movs	r3, #2
 8003bb0:	4985      	ldr	r1, [pc, #532]	; (8003dc8 <findShortestPath+0x830>)
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f000 f9ce 	bl	8003f54 <add_path>
 8003bb8:	e189      	b.n	8003ece <findShortestPath+0x936>
                    }
            }
        } else if(temp[curr][0] < last_x){
 8003bba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003bbe:	4983      	ldr	r1, [pc, #524]	; (8003dcc <findShortestPath+0x834>)
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4413      	add	r3, r2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	440b      	add	r3, r1
 8003bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	f280 80b3 	bge.w	8003d3e <findShortestPath+0x7a6>
            switch(direction){
 8003bd8:	4b7d      	ldr	r3, [pc, #500]	; (8003dd0 <findShortestPath+0x838>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b07      	cmp	r3, #7
 8003bde:	f200 8176 	bhi.w	8003ece <findShortestPath+0x936>
 8003be2:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <findShortestPath+0x650>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003c09 	.word	0x08003c09
 8003bec:	08003ecf 	.word	0x08003ecf
 8003bf0:	08003c2f 	.word	0x08003c2f
 8003bf4:	08003c4d 	.word	0x08003c4d
 8003bf8:	08003ca9 	.word	0x08003ca9
 8003bfc:	08003c6d 	.word	0x08003c6d
 8003c00:	08003cf3 	.word	0x08003cf3
 8003c04:	08003c8b 	.word	0x08003c8b
                case west:
                    shortestPath[path_index]+=square_size;
 8003c08:	4b6a      	ldr	r3, [pc, #424]	; (8003db4 <findShortestPath+0x81c>)
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4b6a      	ldr	r3, [pc, #424]	; (8003db8 <findShortestPath+0x820>)
 8003c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c14:	4a67      	ldr	r2, [pc, #412]	; (8003db4 <findShortestPath+0x81c>)
 8003c16:	8812      	ldrh	r2, [r2, #0]
 8003c18:	4614      	mov	r4, r2
 8003c1a:	496a      	ldr	r1, [pc, #424]	; (8003dc4 <findShortestPath+0x82c>)
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fc ff3d 	bl	8000a9c <__addsf3>
 8003c22:	4603      	mov	r3, r0
 8003c24:	461a      	mov	r2, r3
 8003c26:	4b64      	ldr	r3, [pc, #400]	; (8003db8 <findShortestPath+0x820>)
 8003c28:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    break;
 8003c2c:	e14f      	b.n	8003ece <findShortestPath+0x936>
                case north:
                    add_path(offset45, turn_left_45, half_diagonal - offset45, north_west);
 8003c2e:	4c64      	ldr	r4, [pc, #400]	; (8003dc0 <findShortestPath+0x828>)
 8003c30:	4b62      	ldr	r3, [pc, #392]	; (8003dbc <findShortestPath+0x824>)
 8003c32:	4a63      	ldr	r2, [pc, #396]	; (8003dc0 <findShortestPath+0x828>)
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fc ff2e 	bl	8000a98 <__aeabi_fsub>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2304      	movs	r3, #4
 8003c42:	4961      	ldr	r1, [pc, #388]	; (8003dc8 <findShortestPath+0x830>)
 8003c44:	4620      	mov	r0, r4
 8003c46:	f000 f985 	bl	8003f54 <add_path>
                    break;
 8003c4a:	e140      	b.n	8003ece <findShortestPath+0x936>
                case south:
                    add_path(offset45, turn_right_45, half_diagonal - offset45, south_west);
 8003c4c:	4c5c      	ldr	r4, [pc, #368]	; (8003dc0 <findShortestPath+0x828>)
 8003c4e:	4b5b      	ldr	r3, [pc, #364]	; (8003dbc <findShortestPath+0x824>)
 8003c50:	4a5b      	ldr	r2, [pc, #364]	; (8003dc0 <findShortestPath+0x828>)
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fc ff1f 	bl	8000a98 <__aeabi_fsub>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2306      	movs	r3, #6
 8003c60:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003c64:	4620      	mov	r0, r4
 8003c66:	f000 f975 	bl	8003f54 <add_path>
                    break;
 8003c6a:	e130      	b.n	8003ece <findShortestPath+0x936>
                case north_east:
                    add_path(offset90, turn_left_90, half_diagonal - offset90, north_west);
 8003c6c:	4c59      	ldr	r4, [pc, #356]	; (8003dd4 <findShortestPath+0x83c>)
 8003c6e:	4b53      	ldr	r3, [pc, #332]	; (8003dbc <findShortestPath+0x824>)
 8003c70:	4a58      	ldr	r2, [pc, #352]	; (8003dd4 <findShortestPath+0x83c>)
 8003c72:	4611      	mov	r1, r2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fc ff0f 	bl	8000a98 <__aeabi_fsub>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2304      	movs	r3, #4
 8003c80:	4955      	ldr	r1, [pc, #340]	; (8003dd8 <findShortestPath+0x840>)
 8003c82:	4620      	mov	r0, r4
 8003c84:	f000 f966 	bl	8003f54 <add_path>
                    break;
 8003c88:	e121      	b.n	8003ece <findShortestPath+0x936>
                case south_east:
                    add_path(offset90, turn_right_90, half_diagonal - offset90, south_west);
 8003c8a:	4c52      	ldr	r4, [pc, #328]	; (8003dd4 <findShortestPath+0x83c>)
 8003c8c:	4b4b      	ldr	r3, [pc, #300]	; (8003dbc <findShortestPath+0x824>)
 8003c8e:	4a51      	ldr	r2, [pc, #324]	; (8003dd4 <findShortestPath+0x83c>)
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fc ff00 	bl	8000a98 <__aeabi_fsub>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	2306      	movs	r3, #6
 8003c9e:	494f      	ldr	r1, [pc, #316]	; (8003ddc <findShortestPath+0x844>)
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f000 f957 	bl	8003f54 <add_path>
                    break;
 8003ca6:	e112      	b.n	8003ece <findShortestPath+0x936>
                case north_west:
                    if(lastt_x > last_x){
 8003ca8:	7a3a      	ldrb	r2, [r7, #8]
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d90d      	bls.n	8003ccc <findShortestPath+0x734>
                        add_path(offset45, turn_left_45, square_size - offset45, west);
 8003cb0:	4c43      	ldr	r4, [pc, #268]	; (8003dc0 <findShortestPath+0x828>)
 8003cb2:	4b43      	ldr	r3, [pc, #268]	; (8003dc0 <findShortestPath+0x828>)
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4843      	ldr	r0, [pc, #268]	; (8003dc4 <findShortestPath+0x82c>)
 8003cb8:	f7fc feee 	bl	8000a98 <__aeabi_fsub>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	4941      	ldr	r1, [pc, #260]	; (8003dc8 <findShortestPath+0x830>)
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f000 f945 	bl	8003f54 <add_path>
                    } else {
                        shortestPath[path_index]+=half_diagonal;
                    }
                    break;
 8003cca:	e100      	b.n	8003ece <findShortestPath+0x936>
                        shortestPath[path_index]+=half_diagonal;
 8003ccc:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <findShortestPath+0x81c>)
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <findShortestPath+0x820>)
 8003cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd8:	4938      	ldr	r1, [pc, #224]	; (8003dbc <findShortestPath+0x824>)
 8003cda:	4a36      	ldr	r2, [pc, #216]	; (8003db4 <findShortestPath+0x81c>)
 8003cdc:	8812      	ldrh	r2, [r2, #0]
 8003cde:	4614      	mov	r4, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fc fedb 	bl	8000a9c <__addsf3>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b33      	ldr	r3, [pc, #204]	; (8003db8 <findShortestPath+0x820>)
 8003cec:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    break;
 8003cf0:	e0ed      	b.n	8003ece <findShortestPath+0x936>
                case south_west:
                    if(lastt_x > last_x){
 8003cf2:	7a3a      	ldrb	r2, [r7, #8]
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d90e      	bls.n	8003d18 <findShortestPath+0x780>
                        add_path(offset45, turn_right_45, square_size - offset45, west);
 8003cfa:	4c31      	ldr	r4, [pc, #196]	; (8003dc0 <findShortestPath+0x828>)
 8003cfc:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <findShortestPath+0x828>)
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4830      	ldr	r0, [pc, #192]	; (8003dc4 <findShortestPath+0x82c>)
 8003d02:	f7fc fec9 	bl	8000a98 <__aeabi_fsub>
 8003d06:	4603      	mov	r3, r0
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003d10:	4620      	mov	r0, r4
 8003d12:	f000 f91f 	bl	8003f54 <add_path>
 8003d16:	e0da      	b.n	8003ece <findShortestPath+0x936>
                    } else {
                        shortestPath[path_index]+=half_diagonal;
 8003d18:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <findShortestPath+0x81c>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b26      	ldr	r3, [pc, #152]	; (8003db8 <findShortestPath+0x820>)
 8003d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d24:	4925      	ldr	r1, [pc, #148]	; (8003dbc <findShortestPath+0x824>)
 8003d26:	4a23      	ldr	r2, [pc, #140]	; (8003db4 <findShortestPath+0x81c>)
 8003d28:	8812      	ldrh	r2, [r2, #0]
 8003d2a:	4614      	mov	r4, r2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fc feb5 	bl	8000a9c <__addsf3>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <findShortestPath+0x820>)
 8003d38:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8003d3c:	e0c7      	b.n	8003ece <findShortestPath+0x936>
                    }
            }
        } else {
            switch(direction){
 8003d3e:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <findShortestPath+0x838>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	2b06      	cmp	r3, #6
 8003d46:	f200 80c2 	bhi.w	8003ece <findShortestPath+0x936>
 8003d4a:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <findShortestPath+0x7b8>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d6d 	.word	0x08003d6d
 8003d54:	08003d93 	.word	0x08003d93
 8003d58:	08003de1 	.word	0x08003de1
 8003d5c:	08003dff 	.word	0x08003dff
 8003d60:	08003e3b 	.word	0x08003e3b
 8003d64:	08003e1d 	.word	0x08003e1d
 8003d68:	08003e87 	.word	0x08003e87
                case east:
                    shortestPath[path_index]+=square_size;
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <findShortestPath+0x81c>)
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	461a      	mov	r2, r3
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <findShortestPath+0x820>)
 8003d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d78:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <findShortestPath+0x81c>)
 8003d7a:	8812      	ldrh	r2, [r2, #0]
 8003d7c:	4614      	mov	r4, r2
 8003d7e:	4911      	ldr	r1, [pc, #68]	; (8003dc4 <findShortestPath+0x82c>)
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fc fe8b 	bl	8000a9c <__addsf3>
 8003d86:	4603      	mov	r3, r0
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <findShortestPath+0x820>)
 8003d8c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    break;
 8003d90:	e09d      	b.n	8003ece <findShortestPath+0x936>
                case north:
                    add_path(offset45, turn_right_45, half_diagonal - offset45, north_east);
 8003d92:	4c0b      	ldr	r4, [pc, #44]	; (8003dc0 <findShortestPath+0x828>)
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <findShortestPath+0x824>)
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <findShortestPath+0x828>)
 8003d98:	4611      	mov	r1, r2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fc fe7c 	bl	8000a98 <__aeabi_fsub>
 8003da0:	4603      	mov	r3, r0
 8003da2:	461a      	mov	r2, r3
 8003da4:	2305      	movs	r3, #5
 8003da6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003daa:	4620      	mov	r0, r4
 8003dac:	f000 f8d2 	bl	8003f54 <add_path>
                    break;
 8003db0:	e08d      	b.n	8003ece <findShortestPath+0x936>
 8003db2:	bf00      	nop
 8003db4:	20000c5a 	.word	0x20000c5a
 8003db8:	20000618 	.word	0x20000618
 8003dbc:	435421cd 	.word	0x435421cd
 8003dc0:	4161550a 	.word	0x4161550a
 8003dc4:	43960000 	.word	0x43960000
 8003dc8:	c0400000 	.word	0xc0400000
 8003dcc:	200003c0 	.word	0x200003c0
 8003dd0:	20000c58 	.word	0x20000c58
 8003dd4:	42080000 	.word	0x42080000
 8003dd8:	c0800000 	.word	0xc0800000
 8003ddc:	bf800000 	.word	0xbf800000
                case south:
                    add_path(offset45, turn_left_45, half_diagonal - offset45, south_east);
 8003de0:	4c52      	ldr	r4, [pc, #328]	; (8003f2c <findShortestPath+0x994>)
 8003de2:	4b53      	ldr	r3, [pc, #332]	; (8003f30 <findShortestPath+0x998>)
 8003de4:	4a51      	ldr	r2, [pc, #324]	; (8003f2c <findShortestPath+0x994>)
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fc fe55 	bl	8000a98 <__aeabi_fsub>
 8003dee:	4603      	mov	r3, r0
 8003df0:	461a      	mov	r2, r3
 8003df2:	2307      	movs	r3, #7
 8003df4:	494f      	ldr	r1, [pc, #316]	; (8003f34 <findShortestPath+0x99c>)
 8003df6:	4620      	mov	r0, r4
 8003df8:	f000 f8ac 	bl	8003f54 <add_path>
                    break;
 8003dfc:	e067      	b.n	8003ece <findShortestPath+0x936>
                case north_west:
                    add_path(offset90, turn_right_90, half_diagonal - offset90, north_east);
 8003dfe:	4c4e      	ldr	r4, [pc, #312]	; (8003f38 <findShortestPath+0x9a0>)
 8003e00:	4b4b      	ldr	r3, [pc, #300]	; (8003f30 <findShortestPath+0x998>)
 8003e02:	4a4d      	ldr	r2, [pc, #308]	; (8003f38 <findShortestPath+0x9a0>)
 8003e04:	4611      	mov	r1, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fc fe46 	bl	8000a98 <__aeabi_fsub>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2305      	movs	r3, #5
 8003e12:	494a      	ldr	r1, [pc, #296]	; (8003f3c <findShortestPath+0x9a4>)
 8003e14:	4620      	mov	r0, r4
 8003e16:	f000 f89d 	bl	8003f54 <add_path>
                    break;
 8003e1a:	e058      	b.n	8003ece <findShortestPath+0x936>
                case south_west:
                    add_path(offset90, turn_left_90, half_diagonal - offset90, south_east);
 8003e1c:	4c46      	ldr	r4, [pc, #280]	; (8003f38 <findShortestPath+0x9a0>)
 8003e1e:	4b44      	ldr	r3, [pc, #272]	; (8003f30 <findShortestPath+0x998>)
 8003e20:	4a45      	ldr	r2, [pc, #276]	; (8003f38 <findShortestPath+0x9a0>)
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fc fe37 	bl	8000a98 <__aeabi_fsub>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2307      	movs	r3, #7
 8003e30:	4943      	ldr	r1, [pc, #268]	; (8003f40 <findShortestPath+0x9a8>)
 8003e32:	4620      	mov	r0, r4
 8003e34:	f000 f88e 	bl	8003f54 <add_path>
                    break;
 8003e38:	e049      	b.n	8003ece <findShortestPath+0x936>
                case north_east:
                    if(lastt_x < last_x){
 8003e3a:	7a3a      	ldrb	r2, [r7, #8]
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d20e      	bcs.n	8003e60 <findShortestPath+0x8c8>
                        add_path(offset45, turn_right_45, square_size - offset45, east);
 8003e42:	4c3a      	ldr	r4, [pc, #232]	; (8003f2c <findShortestPath+0x994>)
 8003e44:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <findShortestPath+0x994>)
 8003e46:	4619      	mov	r1, r3
 8003e48:	483e      	ldr	r0, [pc, #248]	; (8003f44 <findShortestPath+0x9ac>)
 8003e4a:	f7fc fe25 	bl	8000a98 <__aeabi_fsub>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	2301      	movs	r3, #1
 8003e54:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f000 f87b 	bl	8003f54 <add_path>
                    } else {
                        shortestPath[path_index]+=half_diagonal;
                    }
                    break;
 8003e5e:	e036      	b.n	8003ece <findShortestPath+0x936>
                        shortestPath[path_index]+=half_diagonal;
 8003e60:	4b39      	ldr	r3, [pc, #228]	; (8003f48 <findShortestPath+0x9b0>)
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	4b39      	ldr	r3, [pc, #228]	; (8003f4c <findShortestPath+0x9b4>)
 8003e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e6c:	4930      	ldr	r1, [pc, #192]	; (8003f30 <findShortestPath+0x998>)
 8003e6e:	4a36      	ldr	r2, [pc, #216]	; (8003f48 <findShortestPath+0x9b0>)
 8003e70:	8812      	ldrh	r2, [r2, #0]
 8003e72:	4614      	mov	r4, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fc fe11 	bl	8000a9c <__addsf3>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4b33      	ldr	r3, [pc, #204]	; (8003f4c <findShortestPath+0x9b4>)
 8003e80:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    break;
 8003e84:	e023      	b.n	8003ece <findShortestPath+0x936>
                case south_east:
                    if(lastt_x < last_x){
 8003e86:	7a3a      	ldrb	r2, [r7, #8]
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d20d      	bcs.n	8003eaa <findShortestPath+0x912>
                        add_path(offset45, turn_left_45, square_size - offset45, east);
 8003e8e:	4c27      	ldr	r4, [pc, #156]	; (8003f2c <findShortestPath+0x994>)
 8003e90:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <findShortestPath+0x994>)
 8003e92:	4619      	mov	r1, r3
 8003e94:	482b      	ldr	r0, [pc, #172]	; (8003f44 <findShortestPath+0x9ac>)
 8003e96:	f7fc fdff 	bl	8000a98 <__aeabi_fsub>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	4924      	ldr	r1, [pc, #144]	; (8003f34 <findShortestPath+0x99c>)
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f000 f856 	bl	8003f54 <add_path>
 8003ea8:	e011      	b.n	8003ece <findShortestPath+0x936>
                    } else {
                        shortestPath[path_index]+=half_diagonal;
 8003eaa:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <findShortestPath+0x9b0>)
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4b26      	ldr	r3, [pc, #152]	; (8003f4c <findShortestPath+0x9b4>)
 8003eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb6:	491e      	ldr	r1, [pc, #120]	; (8003f30 <findShortestPath+0x998>)
 8003eb8:	4a23      	ldr	r2, [pc, #140]	; (8003f48 <findShortestPath+0x9b0>)
 8003eba:	8812      	ldrh	r2, [r2, #0]
 8003ebc:	4614      	mov	r4, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fc fdec 	bl	8000a9c <__addsf3>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <findShortestPath+0x9b4>)
 8003eca:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    }
            }
        }
        lastt_x = last_x;
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	723b      	strb	r3, [r7, #8]
        last_x = temp[curr][0];
 8003ed2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003ed6:	491e      	ldr	r1, [pc, #120]	; (8003f50 <findShortestPath+0x9b8>)
 8003ed8:	4613      	mov	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	440b      	add	r3, r1
 8003ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ee6:	71fb      	strb	r3, [r7, #7]
        last_y = temp[curr][1];
 8003ee8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003eec:	4918      	ldr	r1, [pc, #96]	; (8003f50 <findShortestPath+0x9b8>)
 8003eee:	4613      	mov	r3, r2
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	4413      	add	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	440b      	add	r3, r1
 8003ef8:	3302      	adds	r3, #2
 8003efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003efe:	71bb      	strb	r3, [r7, #6]
        curr = temp[curr][2];
 8003f00:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003f04:	4912      	ldr	r1, [pc, #72]	; (8003f50 <findShortestPath+0x9b8>)
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	440b      	add	r3, r1
 8003f10:	3304      	adds	r3, #4
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	817b      	strh	r3, [r7, #10]
    while(curr != -1){
 8003f16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1e:	f47f acaf 	bne.w	8003880 <findShortestPath+0x2e8>
    }
}
 8003f22:	bf00      	nop
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd90      	pop	{r4, r7, pc}
 8003f2c:	4161550a 	.word	0x4161550a
 8003f30:	435421cd 	.word	0x435421cd
 8003f34:	c0400000 	.word	0xc0400000
 8003f38:	42080000 	.word	0x42080000
 8003f3c:	bf800000 	.word	0xbf800000
 8003f40:	c0800000 	.word	0xc0800000
 8003f44:	43960000 	.word	0x43960000
 8003f48:	20000c5a 	.word	0x20000c5a
 8003f4c:	20000618 	.word	0x20000618
 8003f50:	200003c0 	.word	0x200003c0

08003f54 <add_path>:

void add_path(float param1, float param2, float param3, uint8_t param4){
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	70fb      	strb	r3, [r7, #3]
	shortestPath[path_index]-=param1;
 8003f62:	4b19      	ldr	r3, [pc, #100]	; (8003fc8 <add_path+0x74>)
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b18      	ldr	r3, [pc, #96]	; (8003fcc <add_path+0x78>)
 8003f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f6e:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <add_path+0x74>)
 8003f70:	8812      	ldrh	r2, [r2, #0]
 8003f72:	4614      	mov	r4, r2
 8003f74:	68f9      	ldr	r1, [r7, #12]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fc fd8e 	bl	8000a98 <__aeabi_fsub>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <add_path+0x78>)
 8003f82:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	shortestPath[++path_index] = param2;
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <add_path+0x74>)
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <add_path+0x74>)
 8003f90:	801a      	strh	r2, [r3, #0]
 8003f92:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <add_path+0x74>)
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	4619      	mov	r1, r3
 8003f98:	4a0c      	ldr	r2, [pc, #48]	; (8003fcc <add_path+0x78>)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	shortestPath[++path_index] = param3;
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <add_path+0x74>)
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <add_path+0x74>)
 8003faa:	801a      	strh	r2, [r3, #0]
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <add_path+0x74>)
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4a06      	ldr	r2, [pc, #24]	; (8003fcc <add_path+0x78>)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	direction = param4;
 8003fba:	4a05      	ldr	r2, [pc, #20]	; (8003fd0 <add_path+0x7c>)
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	7013      	strb	r3, [r2, #0]
}
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd90      	pop	{r4, r7, pc}
 8003fc8:	20000c5a 	.word	0x20000c5a
 8003fcc:	20000618 	.word	0x20000618
 8003fd0:	20000c58 	.word	0x20000c58

08003fd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <HAL_MspInit+0x5c>)
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	4a14      	ldr	r2, [pc, #80]	; (8004030 <HAL_MspInit+0x5c>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6193      	str	r3, [r2, #24]
 8003fe6:	4b12      	ldr	r3, [pc, #72]	; (8004030 <HAL_MspInit+0x5c>)
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <HAL_MspInit+0x5c>)
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	4a0e      	ldr	r2, [pc, #56]	; (8004030 <HAL_MspInit+0x5c>)
 8003ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	61d3      	str	r3, [r2, #28]
 8003ffe:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <HAL_MspInit+0x5c>)
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004006:	607b      	str	r3, [r7, #4]
 8004008:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800400a:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_MspInit+0x60>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	4a04      	ldr	r2, [pc, #16]	; (8004034 <HAL_MspInit+0x60>)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr
 8004030:	40021000 	.word	0x40021000
 8004034:	40010000 	.word	0x40010000

08004038 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004040:	f107 0310 	add.w	r3, r7, #16
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a28      	ldr	r2, [pc, #160]	; (80040f4 <HAL_ADC_MspInit+0xbc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d149      	bne.n	80040ec <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004058:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <HAL_ADC_MspInit+0xc0>)
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <HAL_ADC_MspInit+0xc0>)
 800405e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004062:	6193      	str	r3, [r2, #24]
 8004064:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <HAL_ADC_MspInit+0xc0>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004070:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <HAL_ADC_MspInit+0xc0>)
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <HAL_ADC_MspInit+0xc0>)
 8004076:	f043 0304 	orr.w	r3, r3, #4
 800407a:	6193      	str	r3, [r2, #24]
 800407c:	4b1e      	ldr	r3, [pc, #120]	; (80040f8 <HAL_ADC_MspInit+0xc0>)
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004088:	233c      	movs	r3, #60	; 0x3c
 800408a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800408c:	2303      	movs	r3, #3
 800408e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004090:	f107 0310 	add.w	r3, r7, #16
 8004094:	4619      	mov	r1, r3
 8004096:	4819      	ldr	r0, [pc, #100]	; (80040fc <HAL_ADC_MspInit+0xc4>)
 8004098:	f001 fe8a 	bl	8005db0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800409c:	4b18      	ldr	r3, [pc, #96]	; (8004100 <HAL_ADC_MspInit+0xc8>)
 800409e:	4a19      	ldr	r2, [pc, #100]	; (8004104 <HAL_ADC_MspInit+0xcc>)
 80040a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040a2:	4b17      	ldr	r3, [pc, #92]	; (8004100 <HAL_ADC_MspInit+0xc8>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80040a8:	4b15      	ldr	r3, [pc, #84]	; (8004100 <HAL_ADC_MspInit+0xc8>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80040ae:	4b14      	ldr	r3, [pc, #80]	; (8004100 <HAL_ADC_MspInit+0xc8>)
 80040b0:	2280      	movs	r2, #128	; 0x80
 80040b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80040b4:	4b12      	ldr	r3, [pc, #72]	; (8004100 <HAL_ADC_MspInit+0xc8>)
 80040b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_ADC_MspInit+0xc8>)
 80040be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80040c4:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <HAL_ADC_MspInit+0xc8>)
 80040c6:	2220      	movs	r2, #32
 80040c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80040ca:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <HAL_ADC_MspInit+0xc8>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80040d0:	480b      	ldr	r0, [pc, #44]	; (8004100 <HAL_ADC_MspInit+0xc8>)
 80040d2:	f001 fd85 	bl	8005be0 <HAL_DMA_Init>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80040dc:	f7ff fa56 	bl	800358c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a07      	ldr	r2, [pc, #28]	; (8004100 <HAL_ADC_MspInit+0xc8>)
 80040e4:	621a      	str	r2, [r3, #32]
 80040e6:	4a06      	ldr	r2, [pc, #24]	; (8004100 <HAL_ADC_MspInit+0xc8>)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80040ec:	bf00      	nop
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40012400 	.word	0x40012400
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40010800 	.word	0x40010800
 8004100:	20000188 	.word	0x20000188
 8004104:	40020008 	.word	0x40020008

08004108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08c      	sub	sp, #48	; 0x30
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004110:	f107 0320 	add.w	r3, r7, #32
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a45      	ldr	r2, [pc, #276]	; (8004238 <HAL_TIM_Base_MspInit+0x130>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d12d      	bne.n	8004184 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004128:	4b44      	ldr	r3, [pc, #272]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	4a43      	ldr	r2, [pc, #268]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 800412e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004132:	6193      	str	r3, [r2, #24]
 8004134:	4b41      	ldr	r3, [pc, #260]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004140:	4b3e      	ldr	r3, [pc, #248]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	4a3d      	ldr	r2, [pc, #244]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 8004146:	f043 0304 	orr.w	r3, r3, #4
 800414a:	6193      	str	r3, [r2, #24]
 800414c:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800415c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004162:	2300      	movs	r3, #0
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004166:	f107 0320 	add.w	r3, r7, #32
 800416a:	4619      	mov	r1, r3
 800416c:	4834      	ldr	r0, [pc, #208]	; (8004240 <HAL_TIM_Base_MspInit+0x138>)
 800416e:	f001 fe1f 	bl	8005db0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004172:	2200      	movs	r2, #0
 8004174:	2100      	movs	r1, #0
 8004176:	2019      	movs	r0, #25
 8004178:	f001 fcfb 	bl	8005b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800417c:	2019      	movs	r0, #25
 800417e:	f001 fd14 	bl	8005baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004182:	e054      	b.n	800422e <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d10c      	bne.n	80041a8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800418e:	4b2b      	ldr	r3, [pc, #172]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	4a2a      	ldr	r2, [pc, #168]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	61d3      	str	r3, [r2, #28]
 800419a:	4b28      	ldr	r3, [pc, #160]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	697b      	ldr	r3, [r7, #20]
}
 80041a6:	e042      	b.n	800422e <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a25      	ldr	r2, [pc, #148]	; (8004244 <HAL_TIM_Base_MspInit+0x13c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d12c      	bne.n	800420c <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041b2:	4b22      	ldr	r3, [pc, #136]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	4a21      	ldr	r2, [pc, #132]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 80041b8:	f043 0302 	orr.w	r3, r3, #2
 80041bc:	61d3      	str	r3, [r2, #28]
 80041be:	4b1f      	ldr	r3, [pc, #124]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ca:	4b1c      	ldr	r3, [pc, #112]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	4a1b      	ldr	r2, [pc, #108]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 80041d0:	f043 0304 	orr.w	r3, r3, #4
 80041d4:	6193      	str	r3, [r2, #24]
 80041d6:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80041e2:	2340      	movs	r3, #64	; 0x40
 80041e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041e6:	2300      	movs	r3, #0
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ee:	f107 0320 	add.w	r3, r7, #32
 80041f2:	4619      	mov	r1, r3
 80041f4:	4812      	ldr	r0, [pc, #72]	; (8004240 <HAL_TIM_Base_MspInit+0x138>)
 80041f6:	f001 fddb 	bl	8005db0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80041fa:	2200      	movs	r2, #0
 80041fc:	2100      	movs	r1, #0
 80041fe:	201d      	movs	r0, #29
 8004200:	f001 fcb7 	bl	8005b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004204:	201d      	movs	r0, #29
 8004206:	f001 fcd0 	bl	8005baa <HAL_NVIC_EnableIRQ>
}
 800420a:	e010      	b.n	800422e <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a0d      	ldr	r2, [pc, #52]	; (8004248 <HAL_TIM_Base_MspInit+0x140>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d10b      	bne.n	800422e <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	4a08      	ldr	r2, [pc, #32]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 800421c:	f043 0304 	orr.w	r3, r3, #4
 8004220:	61d3      	str	r3, [r2, #28]
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_TIM_Base_MspInit+0x134>)
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
}
 800422e:	bf00      	nop
 8004230:	3730      	adds	r7, #48	; 0x30
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40012c00 	.word	0x40012c00
 800423c:	40021000 	.word	0x40021000
 8004240:	40010800 	.word	0x40010800
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800

0800424c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	; 0x28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004254:	f107 0314 	add.w	r3, r7, #20
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426a:	d143      	bne.n	80042f4 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426c:	4b32      	ldr	r3, [pc, #200]	; (8004338 <HAL_TIM_MspPostInit+0xec>)
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	4a31      	ldr	r2, [pc, #196]	; (8004338 <HAL_TIM_MspPostInit+0xec>)
 8004272:	f043 0304 	orr.w	r3, r3, #4
 8004276:	6193      	str	r3, [r2, #24]
 8004278:	4b2f      	ldr	r3, [pc, #188]	; (8004338 <HAL_TIM_MspPostInit+0xec>)
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004284:	4b2c      	ldr	r3, [pc, #176]	; (8004338 <HAL_TIM_MspPostInit+0xec>)
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	4a2b      	ldr	r2, [pc, #172]	; (8004338 <HAL_TIM_MspPostInit+0xec>)
 800428a:	f043 0308 	orr.w	r3, r3, #8
 800428e:	6193      	str	r3, [r2, #24]
 8004290:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_TIM_MspPostInit+0xec>)
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800429c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a2:	2302      	movs	r3, #2
 80042a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a6:	2302      	movs	r3, #2
 80042a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042aa:	f107 0314 	add.w	r3, r7, #20
 80042ae:	4619      	mov	r1, r3
 80042b0:	4822      	ldr	r0, [pc, #136]	; (800433c <HAL_TIM_MspPostInit+0xf0>)
 80042b2:	f001 fd7d 	bl	8005db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80042b6:	2308      	movs	r3, #8
 80042b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ba:	2302      	movs	r3, #2
 80042bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042be:	2302      	movs	r3, #2
 80042c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c2:	f107 0314 	add.w	r3, r7, #20
 80042c6:	4619      	mov	r1, r3
 80042c8:	481d      	ldr	r0, [pc, #116]	; (8004340 <HAL_TIM_MspPostInit+0xf4>)
 80042ca:	f001 fd71 	bl	8005db0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80042ce:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <HAL_TIM_MspPostInit+0xf8>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
 80042ec:	4a15      	ldr	r2, [pc, #84]	; (8004344 <HAL_TIM_MspPostInit+0xf8>)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80042f2:	e01c      	b.n	800432e <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM4)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a13      	ldr	r2, [pc, #76]	; (8004348 <HAL_TIM_MspPostInit+0xfc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d117      	bne.n	800432e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042fe:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <HAL_TIM_MspPostInit+0xec>)
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <HAL_TIM_MspPostInit+0xec>)
 8004304:	f043 0308 	orr.w	r3, r3, #8
 8004308:	6193      	str	r3, [r2, #24]
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <HAL_TIM_MspPostInit+0xec>)
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004316:	23c0      	movs	r3, #192	; 0xc0
 8004318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431a:	2302      	movs	r3, #2
 800431c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431e:	2302      	movs	r3, #2
 8004320:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004322:	f107 0314 	add.w	r3, r7, #20
 8004326:	4619      	mov	r1, r3
 8004328:	4805      	ldr	r0, [pc, #20]	; (8004340 <HAL_TIM_MspPostInit+0xf4>)
 800432a:	f001 fd41 	bl	8005db0 <HAL_GPIO_Init>
}
 800432e:	bf00      	nop
 8004330:	3728      	adds	r7, #40	; 0x28
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
 800433c:	40010800 	.word	0x40010800
 8004340:	40010c00 	.word	0x40010c00
 8004344:	40010000 	.word	0x40010000
 8004348:	40000800 	.word	0x40000800

0800434c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004350:	e7fe      	b.n	8004350 <NMI_Handler+0x4>

08004352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004352:	b480      	push	{r7}
 8004354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004356:	e7fe      	b.n	8004356 <HardFault_Handler+0x4>

08004358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800435c:	e7fe      	b.n	800435c <MemManage_Handler+0x4>

0800435e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800435e:	b480      	push	{r7}
 8004360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004362:	e7fe      	b.n	8004362 <BusFault_Handler+0x4>

08004364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004368:	e7fe      	b.n	8004368 <UsageFault_Handler+0x4>

0800436a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800436a:	b480      	push	{r7}
 800436c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800436e:	bf00      	nop
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr

08004376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004376:	b480      	push	{r7}
 8004378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800437a:	bf00      	nop
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr

08004382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004382:	b480      	push	{r7}
 8004384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004386:	bf00      	nop
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr

0800438e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004392:	f000 ff0b 	bl	80051ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80043a0:	2001      	movs	r0, #1
 80043a2:	f001 fe89 	bl	80060b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	mmode = 1;
 80043a6:	4b02      	ldr	r3, [pc, #8]	; (80043b0 <EXTI0_IRQHandler+0x14>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 80043ac:	bf00      	nop
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	200003bd 	.word	0x200003bd

080043b4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80043b8:	2002      	movs	r0, #2
 80043ba:	f001 fe7d 	bl	80060b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	mmode = 2;
 80043be:	4b02      	ldr	r3, [pc, #8]	; (80043c8 <EXTI1_IRQHandler+0x14>)
 80043c0:	2202      	movs	r2, #2
 80043c2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 80043c4:	bf00      	nop
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	200003bd 	.word	0x200003bd

080043cc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if(status == u_turn || status == turn_right_90 || status == turn_right_45 || status == straight){
 80043d0:	4b1f      	ldr	r3, [pc, #124]	; (8004450 <TIM1_UP_IRQHandler+0x84>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	b25b      	sxtb	r3, r3
 80043d6:	f113 0f05 	cmn.w	r3, #5
 80043da:	d011      	beq.n	8004400 <TIM1_UP_IRQHandler+0x34>
 80043dc:	4b1c      	ldr	r3, [pc, #112]	; (8004450 <TIM1_UP_IRQHandler+0x84>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	b25b      	sxtb	r3, r3
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e6:	d00b      	beq.n	8004400 <TIM1_UP_IRQHandler+0x34>
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <TIM1_UP_IRQHandler+0x84>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	b25b      	sxtb	r3, r3
 80043ee:	f113 0f02 	cmn.w	r3, #2
 80043f2:	d005      	beq.n	8004400 <TIM1_UP_IRQHandler+0x34>
 80043f4:	4b16      	ldr	r3, [pc, #88]	; (8004450 <TIM1_UP_IRQHandler+0x84>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	b25b      	sxtb	r3, r3
 80043fa:	f113 0f06 	cmn.w	r3, #6
 80043fe:	d103      	bne.n	8004408 <TIM1_UP_IRQHandler+0x3c>
		status = 0;
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <TIM1_UP_IRQHandler+0x84>)
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	e01d      	b.n	8004444 <TIM1_UP_IRQHandler+0x78>
	} else {
		switch(status){
 8004408:	4b11      	ldr	r3, [pc, #68]	; (8004450 <TIM1_UP_IRQHandler+0x84>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	b25b      	sxtb	r3, r3
 800440e:	f113 0f04 	cmn.w	r3, #4
 8004412:	d003      	beq.n	800441c <TIM1_UP_IRQHandler+0x50>
 8004414:	f113 0f03 	cmn.w	r3, #3
 8004418:	d00a      	beq.n	8004430 <TIM1_UP_IRQHandler+0x64>
 800441a:	e013      	b.n	8004444 <TIM1_UP_IRQHandler+0x78>
			case turn_left_90:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 800441c:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <TIM1_UP_IRQHandler+0x88>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <TIM1_UP_IRQHandler+0x88>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2200      	movs	r2, #0
 800442c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800442e:	e009      	b.n	8004444 <TIM1_UP_IRQHandler+0x78>
			case turn_left_45:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 8004430:	4b08      	ldr	r3, [pc, #32]	; (8004454 <TIM1_UP_IRQHandler+0x88>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004438:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <TIM1_UP_IRQHandler+0x88>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2200      	movs	r2, #0
 8004440:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8004442:	bf00      	nop
		}
	}
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004444:	4804      	ldr	r0, [pc, #16]	; (8004458 <TIM1_UP_IRQHandler+0x8c>)
 8004446:	f002 fc89 	bl	8006d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800444a:	bf00      	nop
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	200003be 	.word	0x200003be
 8004454:	20000214 	.word	0x20000214
 8004458:	200001cc 	.word	0x200001cc

0800445c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(status == turn_left_90 || status == turn_left_45){
 8004460:	4b29      	ldr	r3, [pc, #164]	; (8004508 <TIM3_IRQHandler+0xac>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	b25b      	sxtb	r3, r3
 8004466:	f113 0f04 	cmn.w	r3, #4
 800446a:	d005      	beq.n	8004478 <TIM3_IRQHandler+0x1c>
 800446c:	4b26      	ldr	r3, [pc, #152]	; (8004508 <TIM3_IRQHandler+0xac>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	b25b      	sxtb	r3, r3
 8004472:	f113 0f03 	cmn.w	r3, #3
 8004476:	d103      	bne.n	8004480 <TIM3_IRQHandler+0x24>
		status = 0;
 8004478:	4b23      	ldr	r3, [pc, #140]	; (8004508 <TIM3_IRQHandler+0xac>)
 800447a:	2200      	movs	r2, #0
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	e03e      	b.n	80044fe <TIM3_IRQHandler+0xa2>
	} else  {
		switch(status){
 8004480:	4b21      	ldr	r3, [pc, #132]	; (8004508 <TIM3_IRQHandler+0xac>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	b25b      	sxtb	r3, r3
 8004486:	3306      	adds	r3, #6
 8004488:	2b05      	cmp	r3, #5
 800448a:	d838      	bhi.n	80044fe <TIM3_IRQHandler+0xa2>
 800448c:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <TIM3_IRQHandler+0x38>)
 800448e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004492:	bf00      	nop
 8004494:	080044e9 	.word	0x080044e9
 8004498:	080044ad 	.word	0x080044ad
 800449c:	080044ff 	.word	0x080044ff
 80044a0:	080044ff 	.word	0x080044ff
 80044a4:	080044d5 	.word	0x080044d5
 80044a8:	080044c1 	.word	0x080044c1
			case u_turn:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80044ac:	4b17      	ldr	r3, [pc, #92]	; (800450c <TIM3_IRQHandler+0xb0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044b4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 500);
 80044b6:	4b15      	ldr	r3, [pc, #84]	; (800450c <TIM3_IRQHandler+0xb0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044be:	63da      	str	r2, [r3, #60]	; 0x3c
			case turn_right_90:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80044c0:	4b12      	ldr	r3, [pc, #72]	; (800450c <TIM3_IRQHandler+0xb0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044c8:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80044ca:	4b10      	ldr	r3, [pc, #64]	; (800450c <TIM3_IRQHandler+0xb0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2200      	movs	r2, #0
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80044d2:	e014      	b.n	80044fe <TIM3_IRQHandler+0xa2>
			case turn_right_45:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80044d4:	4b0d      	ldr	r3, [pc, #52]	; (800450c <TIM3_IRQHandler+0xb0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044dc:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <TIM3_IRQHandler+0xb0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2200      	movs	r2, #0
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80044e6:	e00a      	b.n	80044fe <TIM3_IRQHandler+0xa2>
			case straight:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80044e8:	4b08      	ldr	r3, [pc, #32]	; (800450c <TIM3_IRQHandler+0xb0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044f0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <TIM3_IRQHandler+0xb0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 80044fc:	bf00      	nop
		}
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80044fe:	4804      	ldr	r0, [pc, #16]	; (8004510 <TIM3_IRQHandler+0xb4>)
 8004500:	f002 fc2c 	bl	8006d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004504:	bf00      	nop
 8004506:	bd80      	pop	{r7, pc}
 8004508:	200003be 	.word	0x200003be
 800450c:	20000214 	.word	0x20000214
 8004510:	2000025c 	.word	0x2000025c

08004514 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004518:	bf00      	nop
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr

08004520 <u_turnf>:
const float turn90_arc_en = (float)halfSize_MicroMouse * M_PI * 4 * (90.0/360) * counts_per_1mm;
const float turn45_arc_en = (float)halfSize_MicroMouse * M_PI * 4 * (45.0/360) * counts_per_1mm;
const uint16_t kp = 3;
const uint16_t kd = 3;

void u_turnf(uint8_t *direction) {
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d81b      	bhi.n	8004568 <u_turnf+0x48>
 8004530:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <u_turnf+0x18>)
 8004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004536:	bf00      	nop
 8004538:	08004549 	.word	0x08004549
 800453c:	08004551 	.word	0x08004551
 8004540:	08004559 	.word	0x08004559
 8004544:	08004561 	.word	0x08004561
		case west:  *direction = east;   break;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	e00b      	b.n	8004568 <u_turnf+0x48>
		case east:  *direction = west;   break;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	e007      	b.n	8004568 <u_turnf+0x48>
		case north: *direction = south;  break;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2203      	movs	r2, #3
 800455c:	701a      	strb	r2, [r3, #0]
 800455e:	e003      	b.n	8004568 <u_turnf+0x48>
		case south: *direction = north;  break;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	bf00      	nop
	}
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(uturn_arc_en));
 8004568:	4b52      	ldr	r3, [pc, #328]	; (80046b4 <u_turnf+0x194>)
 800456a:	4618      	mov	r0, r3
 800456c:	f7fc f806 	bl	800057c <__aeabi_f2d>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	f003 fac2 	bl	8007b00 <round>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	494d      	ldr	r1, [pc, #308]	; (80046b8 <u_turnf+0x198>)
 8004582:	680c      	ldr	r4, [r1, #0]
 8004584:	4610      	mov	r0, r2
 8004586:	4619      	mov	r1, r3
 8004588:	f7fc fa62 	bl	8000a50 <__aeabi_d2uiz>
 800458c:	4603      	mov	r3, r0
 800458e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004590:	4b48      	ldr	r3, [pc, #288]	; (80046b4 <u_turnf+0x194>)
 8004592:	4618      	mov	r0, r3
 8004594:	f7fb fff2 	bl	800057c <__aeabi_f2d>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4610      	mov	r0, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	f003 faae 	bl	8007b00 <round>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4610      	mov	r0, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	f7fc fa50 	bl	8000a50 <__aeabi_d2uiz>
 80045b0:	4603      	mov	r3, r0
 80045b2:	4a41      	ldr	r2, [pc, #260]	; (80046b8 <u_turnf+0x198>)
 80045b4:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(uturn_arc_en) * 5 / 10);
 80045b6:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <u_turnf+0x194>)
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fb ffdf 	bl	800057c <__aeabi_f2d>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4610      	mov	r0, r2
 80045c4:	4619      	mov	r1, r3
 80045c6:	f003 fa9b 	bl	8007b00 <round>
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	4b3b      	ldr	r3, [pc, #236]	; (80046bc <u_turnf+0x19c>)
 80045d0:	f7fc f82c 	bl	800062c <__aeabi_dmul>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4610      	mov	r0, r2
 80045da:	4619      	mov	r1, r3
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <u_turnf+0x1a0>)
 80045e2:	f7fc f94d 	bl	8000880 <__aeabi_ddiv>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4936      	ldr	r1, [pc, #216]	; (80046c4 <u_turnf+0x1a4>)
 80045ec:	680c      	ldr	r4, [r1, #0]
 80045ee:	4610      	mov	r0, r2
 80045f0:	4619      	mov	r1, r3
 80045f2:	f7fc fa2d 	bl	8000a50 <__aeabi_d2uiz>
 80045f6:	4603      	mov	r3, r0
 80045f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045fa:	4b2e      	ldr	r3, [pc, #184]	; (80046b4 <u_turnf+0x194>)
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fb ffbd 	bl	800057c <__aeabi_f2d>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4610      	mov	r0, r2
 8004608:	4619      	mov	r1, r3
 800460a:	f003 fa79 	bl	8007b00 <round>
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	4b2a      	ldr	r3, [pc, #168]	; (80046bc <u_turnf+0x19c>)
 8004614:	f7fc f80a 	bl	800062c <__aeabi_dmul>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4610      	mov	r0, r2
 800461e:	4619      	mov	r1, r3
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <u_turnf+0x1a0>)
 8004626:	f7fc f92b 	bl	8000880 <__aeabi_ddiv>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	f7fc fa0d 	bl	8000a50 <__aeabi_d2uiz>
 8004636:	4603      	mov	r3, r0
 8004638:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <u_turnf+0x1a4>)
 800463a:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800463c:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <u_turnf+0x198>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2200      	movs	r2, #0
 8004642:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004644:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <u_turnf+0x1a4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2200      	movs	r2, #0
 800464a:	625a      	str	r2, [r3, #36]	; 0x24
	status = u_turn;
 800464c:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <u_turnf+0x1a8>)
 800464e:	22fb      	movs	r2, #251	; 0xfb
 8004650:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, speed_levels[current_speed][0]);
 8004652:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <u_turnf+0x1ac>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <u_turnf+0x1b0>)
 800465c:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8004660:	4b1c      	ldr	r3, [pc, #112]	; (80046d4 <u_turnf+0x1b4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, 0);
 8004666:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <u_turnf+0x1b4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2200      	movs	r2, #0
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor1, 0);
 800466e:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <u_turnf+0x1b8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2200      	movs	r2, #0
 8004674:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, speed_levels[current_speed][1]);
 8004676:	4b15      	ldr	r3, [pc, #84]	; (80046cc <u_turnf+0x1ac>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	4a14      	ldr	r2, [pc, #80]	; (80046d0 <u_turnf+0x1b0>)
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	885a      	ldrh	r2, [r3, #2]
 8004684:	4b14      	ldr	r3, [pc, #80]	; (80046d8 <u_turnf+0x1b8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	639a      	str	r2, [r3, #56]	; 0x38
	while(status != 0);
 800468a:	bf00      	nop
 800468c:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <u_turnf+0x1a8>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	b25b      	sxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1fa      	bne.n	800468c <u_turnf+0x16c>
	brake();
 8004696:	f000 fc3d 	bl	8004f14 <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <u_turnf+0x198>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2200      	movs	r2, #0
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <u_turnf+0x1a4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2200      	movs	r2, #0
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd90      	pop	{r4, r7, pc}
 80046b2:	bf00      	nop
 80046b4:	422a0000 	.word	0x422a0000
 80046b8:	200001cc 	.word	0x200001cc
 80046bc:	40140000 	.word	0x40140000
 80046c0:	40240000 	.word	0x40240000
 80046c4:	2000025c 	.word	0x2000025c
 80046c8:	200003be 	.word	0x200003be
 80046cc:	200003bc 	.word	0x200003bc
 80046d0:	08007bb0 	.word	0x08007bb0
 80046d4:	20000214 	.word	0x20000214
 80046d8:	200002a4 	.word	0x200002a4

080046dc <turn_left45>:

void turn_left45() {
 80046dc:	b598      	push	{r3, r4, r7, lr}
 80046de:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn45_arc_en));
 80046e0:	4b4f      	ldr	r3, [pc, #316]	; (8004820 <turn_left45+0x144>)
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fb ff4a 	bl	800057c <__aeabi_f2d>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	f003 fa06 	bl	8007b00 <round>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	494a      	ldr	r1, [pc, #296]	; (8004824 <turn_left45+0x148>)
 80046fa:	680c      	ldr	r4, [r1, #0]
 80046fc:	4610      	mov	r0, r2
 80046fe:	4619      	mov	r1, r3
 8004700:	f7fc f9a6 	bl	8000a50 <__aeabi_d2uiz>
 8004704:	4603      	mov	r3, r0
 8004706:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004708:	4b45      	ldr	r3, [pc, #276]	; (8004820 <turn_left45+0x144>)
 800470a:	4618      	mov	r0, r3
 800470c:	f7fb ff36 	bl	800057c <__aeabi_f2d>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	f003 f9f2 	bl	8007b00 <round>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4610      	mov	r0, r2
 8004722:	4619      	mov	r1, r3
 8004724:	f7fc f994 	bl	8000a50 <__aeabi_d2uiz>
 8004728:	4603      	mov	r3, r0
 800472a:	4a3e      	ldr	r2, [pc, #248]	; (8004824 <turn_left45+0x148>)
 800472c:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(turn45_arc_en) * 5 / 10);
 800472e:	4b3c      	ldr	r3, [pc, #240]	; (8004820 <turn_left45+0x144>)
 8004730:	4618      	mov	r0, r3
 8004732:	f7fb ff23 	bl	800057c <__aeabi_f2d>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4610      	mov	r0, r2
 800473c:	4619      	mov	r1, r3
 800473e:	f003 f9df 	bl	8007b00 <round>
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	4b38      	ldr	r3, [pc, #224]	; (8004828 <turn_left45+0x14c>)
 8004748:	f7fb ff70 	bl	800062c <__aeabi_dmul>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	4b34      	ldr	r3, [pc, #208]	; (800482c <turn_left45+0x150>)
 800475a:	f7fc f891 	bl	8000880 <__aeabi_ddiv>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4933      	ldr	r1, [pc, #204]	; (8004830 <turn_left45+0x154>)
 8004764:	680c      	ldr	r4, [r1, #0]
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	f7fc f971 	bl	8000a50 <__aeabi_d2uiz>
 800476e:	4603      	mov	r3, r0
 8004770:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004772:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <turn_left45+0x144>)
 8004774:	4618      	mov	r0, r3
 8004776:	f7fb ff01 	bl	800057c <__aeabi_f2d>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	f003 f9bd 	bl	8007b00 <round>
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	4b27      	ldr	r3, [pc, #156]	; (8004828 <turn_left45+0x14c>)
 800478c:	f7fb ff4e 	bl	800062c <__aeabi_dmul>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4610      	mov	r0, r2
 8004796:	4619      	mov	r1, r3
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	4b23      	ldr	r3, [pc, #140]	; (800482c <turn_left45+0x150>)
 800479e:	f7fc f86f 	bl	8000880 <__aeabi_ddiv>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4610      	mov	r0, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	f7fc f951 	bl	8000a50 <__aeabi_d2uiz>
 80047ae:	4603      	mov	r3, r0
 80047b0:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <turn_left45+0x154>)
 80047b2:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80047b4:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <turn_left45+0x154>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2200      	movs	r2, #0
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80047bc:	4b19      	ldr	r3, [pc, #100]	; (8004824 <turn_left45+0x148>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2200      	movs	r2, #0
 80047c2:	625a      	str	r2, [r3, #36]	; 0x24
	status = turn_left_45;
 80047c4:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <turn_left45+0x158>)
 80047c6:	22fd      	movs	r2, #253	; 0xfd
 80047c8:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, htim2.Init.Period);
 80047ca:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <turn_left45+0x15c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <turn_left45+0x15c>)
 80047d0:	68d2      	ldr	r2, [r2, #12]
 80047d2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, htim2.Init.Period);
 80047d4:	4b18      	ldr	r3, [pc, #96]	; (8004838 <turn_left45+0x15c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a17      	ldr	r2, [pc, #92]	; (8004838 <turn_left45+0x15c>)
 80047da:	68d2      	ldr	r2, [r2, #12]
 80047dc:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor1, speed_levels[current_speed][1]);
 80047de:	4b17      	ldr	r3, [pc, #92]	; (800483c <turn_left45+0x160>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	4a16      	ldr	r2, [pc, #88]	; (8004840 <turn_left45+0x164>)
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	885a      	ldrh	r2, [r3, #2]
 80047ec:	4b15      	ldr	r3, [pc, #84]	; (8004844 <turn_left45+0x168>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, 0);
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <turn_left45+0x168>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2200      	movs	r2, #0
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38
	while(status != 0);
 80047fa:	bf00      	nop
 80047fc:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <turn_left45+0x158>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	b25b      	sxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1fa      	bne.n	80047fc <turn_left45+0x120>
	brake();
 8004806:	f000 fb85 	bl	8004f14 <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800480a:	4b09      	ldr	r3, [pc, #36]	; (8004830 <turn_left45+0x154>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2200      	movs	r2, #0
 8004810:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004812:	4b04      	ldr	r3, [pc, #16]	; (8004824 <turn_left45+0x148>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2200      	movs	r2, #0
 8004818:	625a      	str	r2, [r3, #36]	; 0x24
}
 800481a:	bf00      	nop
 800481c:	bd98      	pop	{r3, r4, r7, pc}
 800481e:	bf00      	nop
 8004820:	41aa0000 	.word	0x41aa0000
 8004824:	2000025c 	.word	0x2000025c
 8004828:	40140000 	.word	0x40140000
 800482c:	40240000 	.word	0x40240000
 8004830:	200001cc 	.word	0x200001cc
 8004834:	200003be 	.word	0x200003be
 8004838:	20000214 	.word	0x20000214
 800483c:	200003bc 	.word	0x200003bc
 8004840:	08007bb0 	.word	0x08007bb0
 8004844:	200002a4 	.word	0x200002a4

08004848 <turn_right45>:

void turn_right45() {
 8004848:	b598      	push	{r3, r4, r7, lr}
 800484a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(turn45_arc_en));
 800484c:	4b4f      	ldr	r3, [pc, #316]	; (800498c <turn_right45+0x144>)
 800484e:	4618      	mov	r0, r3
 8004850:	f7fb fe94 	bl	800057c <__aeabi_f2d>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4610      	mov	r0, r2
 800485a:	4619      	mov	r1, r3
 800485c:	f003 f950 	bl	8007b00 <round>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	494a      	ldr	r1, [pc, #296]	; (8004990 <turn_right45+0x148>)
 8004866:	680c      	ldr	r4, [r1, #0]
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	f7fc f8f0 	bl	8000a50 <__aeabi_d2uiz>
 8004870:	4603      	mov	r3, r0
 8004872:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004874:	4b45      	ldr	r3, [pc, #276]	; (800498c <turn_right45+0x144>)
 8004876:	4618      	mov	r0, r3
 8004878:	f7fb fe80 	bl	800057c <__aeabi_f2d>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4610      	mov	r0, r2
 8004882:	4619      	mov	r1, r3
 8004884:	f003 f93c 	bl	8007b00 <round>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4610      	mov	r0, r2
 800488e:	4619      	mov	r1, r3
 8004890:	f7fc f8de 	bl	8000a50 <__aeabi_d2uiz>
 8004894:	4603      	mov	r3, r0
 8004896:	4a3e      	ldr	r2, [pc, #248]	; (8004990 <turn_right45+0x148>)
 8004898:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn45_arc_en) * 5 / 10);
 800489a:	4b3c      	ldr	r3, [pc, #240]	; (800498c <turn_right45+0x144>)
 800489c:	4618      	mov	r0, r3
 800489e:	f7fb fe6d 	bl	800057c <__aeabi_f2d>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4610      	mov	r0, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	f003 f929 	bl	8007b00 <round>
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	4b38      	ldr	r3, [pc, #224]	; (8004994 <turn_right45+0x14c>)
 80048b4:	f7fb feba 	bl	800062c <__aeabi_dmul>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4610      	mov	r0, r2
 80048be:	4619      	mov	r1, r3
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	4b34      	ldr	r3, [pc, #208]	; (8004998 <turn_right45+0x150>)
 80048c6:	f7fb ffdb 	bl	8000880 <__aeabi_ddiv>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4933      	ldr	r1, [pc, #204]	; (800499c <turn_right45+0x154>)
 80048d0:	680c      	ldr	r4, [r1, #0]
 80048d2:	4610      	mov	r0, r2
 80048d4:	4619      	mov	r1, r3
 80048d6:	f7fc f8bb 	bl	8000a50 <__aeabi_d2uiz>
 80048da:	4603      	mov	r3, r0
 80048dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048de:	4b2b      	ldr	r3, [pc, #172]	; (800498c <turn_right45+0x144>)
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fb fe4b 	bl	800057c <__aeabi_f2d>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4610      	mov	r0, r2
 80048ec:	4619      	mov	r1, r3
 80048ee:	f003 f907 	bl	8007b00 <round>
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	4b27      	ldr	r3, [pc, #156]	; (8004994 <turn_right45+0x14c>)
 80048f8:	f7fb fe98 	bl	800062c <__aeabi_dmul>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4610      	mov	r0, r2
 8004902:	4619      	mov	r1, r3
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	4b23      	ldr	r3, [pc, #140]	; (8004998 <turn_right45+0x150>)
 800490a:	f7fb ffb9 	bl	8000880 <__aeabi_ddiv>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4610      	mov	r0, r2
 8004914:	4619      	mov	r1, r3
 8004916:	f7fc f89b 	bl	8000a50 <__aeabi_d2uiz>
 800491a:	4603      	mov	r3, r0
 800491c:	4a1f      	ldr	r2, [pc, #124]	; (800499c <turn_right45+0x154>)
 800491e:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <turn_right45+0x148>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2200      	movs	r2, #0
 8004926:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004928:	4b1c      	ldr	r3, [pc, #112]	; (800499c <turn_right45+0x154>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2200      	movs	r2, #0
 800492e:	625a      	str	r2, [r3, #36]	; 0x24
	status = turn_right_45;
 8004930:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <turn_right45+0x158>)
 8004932:	22fe      	movs	r2, #254	; 0xfe
 8004934:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, speed_levels[current_speed][0]);
 8004936:	4b1b      	ldr	r3, [pc, #108]	; (80049a4 <turn_right45+0x15c>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	4b1a      	ldr	r3, [pc, #104]	; (80049a8 <turn_right45+0x160>)
 8004940:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8004944:	4b19      	ldr	r3, [pc, #100]	; (80049ac <turn_right45+0x164>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, 0);
 800494a:	4b18      	ldr	r3, [pc, #96]	; (80049ac <turn_right45+0x164>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor1, htim2.Init.Period);
 8004952:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <turn_right45+0x168>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a15      	ldr	r2, [pc, #84]	; (80049ac <turn_right45+0x164>)
 8004958:	68d2      	ldr	r2, [r2, #12]
 800495a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, htim2.Init.Period);
 800495c:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <turn_right45+0x168>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a12      	ldr	r2, [pc, #72]	; (80049ac <turn_right45+0x164>)
 8004962:	68d2      	ldr	r2, [r2, #12]
 8004964:	639a      	str	r2, [r3, #56]	; 0x38
	while(status != 0);
 8004966:	bf00      	nop
 8004968:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <turn_right45+0x158>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	b25b      	sxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1fa      	bne.n	8004968 <turn_right45+0x120>
	brake();
 8004972:	f000 facf 	bl	8004f14 <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <turn_right45+0x148>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2200      	movs	r2, #0
 800497c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800497e:	4b07      	ldr	r3, [pc, #28]	; (800499c <turn_right45+0x154>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2200      	movs	r2, #0
 8004984:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004986:	bf00      	nop
 8004988:	bd98      	pop	{r3, r4, r7, pc}
 800498a:	bf00      	nop
 800498c:	41aa0000 	.word	0x41aa0000
 8004990:	200001cc 	.word	0x200001cc
 8004994:	40140000 	.word	0x40140000
 8004998:	40240000 	.word	0x40240000
 800499c:	2000025c 	.word	0x2000025c
 80049a0:	200003be 	.word	0x200003be
 80049a4:	200003bc 	.word	0x200003bc
 80049a8:	08007bb0 	.word	0x08007bb0
 80049ac:	20000214 	.word	0x20000214
 80049b0:	200002a4 	.word	0x200002a4

080049b4 <turn_left90>:

void turn_left90(uint8_t *direction) {
 80049b4:	b590      	push	{r4, r7, lr}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	switch(*direction){
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d81b      	bhi.n	80049fc <turn_left90+0x48>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <turn_left90+0x18>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	080049dd 	.word	0x080049dd
 80049d0:	080049e5 	.word	0x080049e5
 80049d4:	080049ed 	.word	0x080049ed
 80049d8:	080049f5 	.word	0x080049f5
		case west:  *direction = south; break;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2203      	movs	r2, #3
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	e00b      	b.n	80049fc <turn_left90+0x48>
		case east:  *direction = north; break;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	e007      	b.n	80049fc <turn_left90+0x48>
		case north: *direction = west;  break;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	e003      	b.n	80049fc <turn_left90+0x48>
		case south: *direction = east;  break;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	bf00      	nop
	}
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn90_arc_en));
 80049fc:	4b50      	ldr	r3, [pc, #320]	; (8004b40 <turn_left90+0x18c>)
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fb fdbc 	bl	800057c <__aeabi_f2d>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	f003 f878 	bl	8007b00 <round>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	494b      	ldr	r1, [pc, #300]	; (8004b44 <turn_left90+0x190>)
 8004a16:	680c      	ldr	r4, [r1, #0]
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	f7fc f818 	bl	8000a50 <__aeabi_d2uiz>
 8004a20:	4603      	mov	r3, r0
 8004a22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a24:	4b46      	ldr	r3, [pc, #280]	; (8004b40 <turn_left90+0x18c>)
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fb fda8 	bl	800057c <__aeabi_f2d>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4610      	mov	r0, r2
 8004a32:	4619      	mov	r1, r3
 8004a34:	f003 f864 	bl	8007b00 <round>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	4619      	mov	r1, r3
 8004a40:	f7fc f806 	bl	8000a50 <__aeabi_d2uiz>
 8004a44:	4603      	mov	r3, r0
 8004a46:	4a3f      	ldr	r2, [pc, #252]	; (8004b44 <turn_left90+0x190>)
 8004a48:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(turn90_arc_en) * 5 / 10);
 8004a4a:	4b3d      	ldr	r3, [pc, #244]	; (8004b40 <turn_left90+0x18c>)
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fb fd95 	bl	800057c <__aeabi_f2d>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f003 f851 	bl	8007b00 <round>
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	4b39      	ldr	r3, [pc, #228]	; (8004b48 <turn_left90+0x194>)
 8004a64:	f7fb fde2 	bl	800062c <__aeabi_dmul>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	4b35      	ldr	r3, [pc, #212]	; (8004b4c <turn_left90+0x198>)
 8004a76:	f7fb ff03 	bl	8000880 <__aeabi_ddiv>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4934      	ldr	r1, [pc, #208]	; (8004b50 <turn_left90+0x19c>)
 8004a80:	680c      	ldr	r4, [r1, #0]
 8004a82:	4610      	mov	r0, r2
 8004a84:	4619      	mov	r1, r3
 8004a86:	f7fb ffe3 	bl	8000a50 <__aeabi_d2uiz>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a8e:	4b2c      	ldr	r3, [pc, #176]	; (8004b40 <turn_left90+0x18c>)
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fb fd73 	bl	800057c <__aeabi_f2d>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f003 f82f 	bl	8007b00 <round>
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <turn_left90+0x194>)
 8004aa8:	f7fb fdc0 	bl	800062c <__aeabi_dmul>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	4b24      	ldr	r3, [pc, #144]	; (8004b4c <turn_left90+0x198>)
 8004aba:	f7fb fee1 	bl	8000880 <__aeabi_ddiv>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	f7fb ffc3 	bl	8000a50 <__aeabi_d2uiz>
 8004aca:	4603      	mov	r3, r0
 8004acc:	4a20      	ldr	r2, [pc, #128]	; (8004b50 <turn_left90+0x19c>)
 8004ace:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004ad0:	4b1f      	ldr	r3, [pc, #124]	; (8004b50 <turn_left90+0x19c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004ad8:	4b1a      	ldr	r3, [pc, #104]	; (8004b44 <turn_left90+0x190>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2200      	movs	r2, #0
 8004ade:	625a      	str	r2, [r3, #36]	; 0x24
	status = turn_left_90;
 8004ae0:	4b1c      	ldr	r3, [pc, #112]	; (8004b54 <turn_left90+0x1a0>)
 8004ae2:	22fc      	movs	r2, #252	; 0xfc
 8004ae4:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, htim2.Init.Period);
 8004ae6:	4b1c      	ldr	r3, [pc, #112]	; (8004b58 <turn_left90+0x1a4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1b      	ldr	r2, [pc, #108]	; (8004b58 <turn_left90+0x1a4>)
 8004aec:	68d2      	ldr	r2, [r2, #12]
 8004aee:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, htim2.Init.Period);
 8004af0:	4b19      	ldr	r3, [pc, #100]	; (8004b58 <turn_left90+0x1a4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <turn_left90+0x1a4>)
 8004af6:	68d2      	ldr	r2, [r2, #12]
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor1, speed_levels[current_speed][1]);
 8004afa:	4b18      	ldr	r3, [pc, #96]	; (8004b5c <turn_left90+0x1a8>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	4a17      	ldr	r2, [pc, #92]	; (8004b60 <turn_left90+0x1ac>)
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	885a      	ldrh	r2, [r3, #2]
 8004b08:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <turn_left90+0x1b0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, 0);
 8004b0e:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <turn_left90+0x1b0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2200      	movs	r2, #0
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38
	while(status != 0);
 8004b16:	bf00      	nop
 8004b18:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <turn_left90+0x1a0>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1fa      	bne.n	8004b18 <turn_left90+0x164>
	brake();
 8004b22:	f000 f9f7 	bl	8004f14 <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004b26:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <turn_left90+0x19c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <turn_left90+0x190>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2200      	movs	r2, #0
 8004b34:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd90      	pop	{r4, r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	422a0000 	.word	0x422a0000
 8004b44:	2000025c 	.word	0x2000025c
 8004b48:	40140000 	.word	0x40140000
 8004b4c:	40240000 	.word	0x40240000
 8004b50:	200001cc 	.word	0x200001cc
 8004b54:	200003be 	.word	0x200003be
 8004b58:	20000214 	.word	0x20000214
 8004b5c:	200003bc 	.word	0x200003bc
 8004b60:	08007bb0 	.word	0x08007bb0
 8004b64:	200002a4 	.word	0x200002a4

08004b68 <turn_right90>:

void turn_right90(uint8_t *direction) {
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d81b      	bhi.n	8004bb0 <turn_right90+0x48>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <turn_right90+0x18>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004b99 	.word	0x08004b99
 8004b88:	08004ba1 	.word	0x08004ba1
 8004b8c:	08004ba9 	.word	0x08004ba9
		case west:  *direction = north; break;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e00b      	b.n	8004bb0 <turn_right90+0x48>
		case east:  *direction = south; break;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	e007      	b.n	8004bb0 <turn_right90+0x48>
		case north: *direction = east;  break;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	e003      	b.n	8004bb0 <turn_right90+0x48>
		case south: *direction = west;  break;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	bf00      	nop
	}
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(turn90_arc_en));
 8004bb0:	4b50      	ldr	r3, [pc, #320]	; (8004cf4 <turn_right90+0x18c>)
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fb fce2 	bl	800057c <__aeabi_f2d>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	f002 ff9e 	bl	8007b00 <round>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	494b      	ldr	r1, [pc, #300]	; (8004cf8 <turn_right90+0x190>)
 8004bca:	680c      	ldr	r4, [r1, #0]
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	f7fb ff3e 	bl	8000a50 <__aeabi_d2uiz>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bd8:	4b46      	ldr	r3, [pc, #280]	; (8004cf4 <turn_right90+0x18c>)
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fb fcce 	bl	800057c <__aeabi_f2d>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4610      	mov	r0, r2
 8004be6:	4619      	mov	r1, r3
 8004be8:	f002 ff8a 	bl	8007b00 <round>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	f7fb ff2c 	bl	8000a50 <__aeabi_d2uiz>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	4a3f      	ldr	r2, [pc, #252]	; (8004cf8 <turn_right90+0x190>)
 8004bfc:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn90_arc_en) * 5 / 10);
 8004bfe:	4b3d      	ldr	r3, [pc, #244]	; (8004cf4 <turn_right90+0x18c>)
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fb fcbb 	bl	800057c <__aeabi_f2d>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	f002 ff77 	bl	8007b00 <round>
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	4b39      	ldr	r3, [pc, #228]	; (8004cfc <turn_right90+0x194>)
 8004c18:	f7fb fd08 	bl	800062c <__aeabi_dmul>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4610      	mov	r0, r2
 8004c22:	4619      	mov	r1, r3
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	4b35      	ldr	r3, [pc, #212]	; (8004d00 <turn_right90+0x198>)
 8004c2a:	f7fb fe29 	bl	8000880 <__aeabi_ddiv>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4934      	ldr	r1, [pc, #208]	; (8004d04 <turn_right90+0x19c>)
 8004c34:	680c      	ldr	r4, [r1, #0]
 8004c36:	4610      	mov	r0, r2
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f7fb ff09 	bl	8000a50 <__aeabi_d2uiz>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c42:	4b2c      	ldr	r3, [pc, #176]	; (8004cf4 <turn_right90+0x18c>)
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fb fc99 	bl	800057c <__aeabi_f2d>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	f002 ff55 	bl	8007b00 <round>
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	4b28      	ldr	r3, [pc, #160]	; (8004cfc <turn_right90+0x194>)
 8004c5c:	f7fb fce6 	bl	800062c <__aeabi_dmul>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4610      	mov	r0, r2
 8004c66:	4619      	mov	r1, r3
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	4b24      	ldr	r3, [pc, #144]	; (8004d00 <turn_right90+0x198>)
 8004c6e:	f7fb fe07 	bl	8000880 <__aeabi_ddiv>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4610      	mov	r0, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	f7fb fee9 	bl	8000a50 <__aeabi_d2uiz>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4a20      	ldr	r2, [pc, #128]	; (8004d04 <turn_right90+0x19c>)
 8004c82:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004c84:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <turn_right90+0x190>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	; (8004d04 <turn_right90+0x19c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2200      	movs	r2, #0
 8004c92:	625a      	str	r2, [r3, #36]	; 0x24
	status = turn_right_90;
 8004c94:	4b1c      	ldr	r3, [pc, #112]	; (8004d08 <turn_right90+0x1a0>)
 8004c96:	22ff      	movs	r2, #255	; 0xff
 8004c98:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, speed_levels[current_speed][0]);
 8004c9a:	4b1c      	ldr	r3, [pc, #112]	; (8004d0c <turn_right90+0x1a4>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	4b1b      	ldr	r3, [pc, #108]	; (8004d10 <turn_right90+0x1a8>)
 8004ca4:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8004ca8:	4b1a      	ldr	r3, [pc, #104]	; (8004d14 <turn_right90+0x1ac>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, 0);
 8004cae:	4b19      	ldr	r3, [pc, #100]	; (8004d14 <turn_right90+0x1ac>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor1, htim2.Init.Period);
 8004cb6:	4b17      	ldr	r3, [pc, #92]	; (8004d14 <turn_right90+0x1ac>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a16      	ldr	r2, [pc, #88]	; (8004d14 <turn_right90+0x1ac>)
 8004cbc:	68d2      	ldr	r2, [r2, #12]
 8004cbe:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, htim2.Init.Period);
 8004cc0:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <turn_right90+0x1b0>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a13      	ldr	r2, [pc, #76]	; (8004d14 <turn_right90+0x1ac>)
 8004cc6:	68d2      	ldr	r2, [r2, #12]
 8004cc8:	639a      	str	r2, [r3, #56]	; 0x38

	while(status != 0);
 8004cca:	bf00      	nop
 8004ccc:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <turn_right90+0x1a0>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	b25b      	sxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1fa      	bne.n	8004ccc <turn_right90+0x164>
	brake();
 8004cd6:	f000 f91d 	bl	8004f14 <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004cda:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <turn_right90+0x190>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <turn_right90+0x19c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd90      	pop	{r4, r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	422a0000 	.word	0x422a0000
 8004cf8:	200001cc 	.word	0x200001cc
 8004cfc:	40140000 	.word	0x40140000
 8004d00:	40240000 	.word	0x40240000
 8004d04:	2000025c 	.word	0x2000025c
 8004d08:	200003be 	.word	0x200003be
 8004d0c:	200003bc 	.word	0x200003bc
 8004d10:	08007bb0 	.word	0x08007bb0
 8004d14:	20000214 	.word	0x20000214
 8004d18:	200002a4 	.word	0x200002a4

08004d1c <go_straight>:

void go_straight(float distance, bool brakee) { //millimeter
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	70fb      	strb	r3, [r7, #3]
	uint16_t en = round(distance * counts_per_1mm);
 8004d28:	4b32      	ldr	r3, [pc, #200]	; (8004df4 <go_straight+0xd8>)
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fb fa0d 	bl	800014c <__aeabi_fmul>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fb fc21 	bl	800057c <__aeabi_f2d>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	f002 fedd 	bl	8007b00 <round>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	f7fb fe7f 	bl	8000a50 <__aeabi_d2uiz>
 8004d52:	4603      	mov	r3, r0
 8004d54:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_AUTORELOAD(&htim1, en);
 8004d56:	4b28      	ldr	r3, [pc, #160]	; (8004df8 <go_straight+0xdc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	89fa      	ldrh	r2, [r7, #14]
 8004d5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d5e:	89fb      	ldrh	r3, [r7, #14]
 8004d60:	4a25      	ldr	r2, [pc, #148]	; (8004df8 <go_straight+0xdc>)
 8004d62:	60d3      	str	r3, [r2, #12]
	if(brakee){
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d019      	beq.n	8004d9e <go_straight+0x82>
		__HAL_TIM_SET_AUTORELOAD(&htim3, en * 7 / 10);
 8004d6a:	89fa      	ldrh	r2, [r7, #14]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	4a22      	ldr	r2, [pc, #136]	; (8004dfc <go_straight+0xe0>)
 8004d74:	fb82 1203 	smull	r1, r2, r2, r3
 8004d78:	1092      	asrs	r2, r2, #2
 8004d7a:	17db      	asrs	r3, r3, #31
 8004d7c:	1ad2      	subs	r2, r2, r3
 8004d7e:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <go_straight+0xe4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d84:	89fa      	ldrh	r2, [r7, #14]
 8004d86:	4613      	mov	r3, r2
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	4a1b      	ldr	r2, [pc, #108]	; (8004dfc <go_straight+0xe0>)
 8004d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8004d92:	1092      	asrs	r2, r2, #2
 8004d94:	17db      	asrs	r3, r3, #31
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4b19      	ldr	r3, [pc, #100]	; (8004e00 <go_straight+0xe4>)
 8004d9c:	60da      	str	r2, [r3, #12]
	}
	status = straight;
 8004d9e:	4b19      	ldr	r3, [pc, #100]	; (8004e04 <go_straight+0xe8>)
 8004da0:	22fa      	movs	r2, #250	; 0xfa
 8004da2:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, speed_levels[current_speed][0]);
 8004da4:	4b18      	ldr	r3, [pc, #96]	; (8004e08 <go_straight+0xec>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <go_straight+0xf0>)
 8004dae:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8004db2:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <go_straight+0xf4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, 0);
 8004db8:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <go_straight+0xf4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor1, speed_levels[current_speed][1]);
 8004dc0:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <go_straight+0xec>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	4a11      	ldr	r2, [pc, #68]	; (8004e0c <go_straight+0xf0>)
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	885a      	ldrh	r2, [r3, #2]
 8004dce:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <go_straight+0xf8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, 0);
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <go_straight+0xf8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
	PID(0);
 8004ddc:	2000      	movs	r0, #0
 8004dde:	f000 f8b7 	bl	8004f50 <PID>
	if(brakee){
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <go_straight+0xd0>
		brake();
 8004de8:	f000 f894 	bl	8004f14 <brake>
	}
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	3ecbb7e4 	.word	0x3ecbb7e4
 8004df8:	200001cc 	.word	0x200001cc
 8004dfc:	66666667 	.word	0x66666667
 8004e00:	2000025c 	.word	0x2000025c
 8004e04:	200003be 	.word	0x200003be
 8004e08:	200003bc 	.word	0x200003bc
 8004e0c:	08007bb0 	.word	0x08007bb0
 8004e10:	20000214 	.word	0x20000214
 8004e14:	200002a4 	.word	0x200002a4

08004e18 <backwards>:

void backwards(float distance, bool brakee){
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	70fb      	strb	r3, [r7, #3]
	uint16_t en = round(distance * counts_per_1mm);
 8004e24:	4b32      	ldr	r3, [pc, #200]	; (8004ef0 <backwards+0xd8>)
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fb f98f 	bl	800014c <__aeabi_fmul>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fb fba3 	bl	800057c <__aeabi_f2d>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	f002 fe5f 	bl	8007b00 <round>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4610      	mov	r0, r2
 8004e48:	4619      	mov	r1, r3
 8004e4a:	f7fb fe01 	bl	8000a50 <__aeabi_d2uiz>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_AUTORELOAD(&htim1, en);
 8004e52:	4b28      	ldr	r3, [pc, #160]	; (8004ef4 <backwards+0xdc>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	89fa      	ldrh	r2, [r7, #14]
 8004e58:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e5a:	89fb      	ldrh	r3, [r7, #14]
 8004e5c:	4a25      	ldr	r2, [pc, #148]	; (8004ef4 <backwards+0xdc>)
 8004e5e:	60d3      	str	r3, [r2, #12]
	if(brakee){
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d019      	beq.n	8004e9a <backwards+0x82>
		__HAL_TIM_SET_AUTORELOAD(&htim3, en * 7 / 10);
 8004e66:	89fa      	ldrh	r2, [r7, #14]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	4a22      	ldr	r2, [pc, #136]	; (8004ef8 <backwards+0xe0>)
 8004e70:	fb82 1203 	smull	r1, r2, r2, r3
 8004e74:	1092      	asrs	r2, r2, #2
 8004e76:	17db      	asrs	r3, r3, #31
 8004e78:	1ad2      	subs	r2, r2, r3
 8004e7a:	4b20      	ldr	r3, [pc, #128]	; (8004efc <backwards+0xe4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e80:	89fa      	ldrh	r2, [r7, #14]
 8004e82:	4613      	mov	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	4a1b      	ldr	r2, [pc, #108]	; (8004ef8 <backwards+0xe0>)
 8004e8a:	fb82 1203 	smull	r1, r2, r2, r3
 8004e8e:	1092      	asrs	r2, r2, #2
 8004e90:	17db      	asrs	r3, r3, #31
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	4b19      	ldr	r3, [pc, #100]	; (8004efc <backwards+0xe4>)
 8004e98:	60da      	str	r2, [r3, #12]
	}
	status = straight;
 8004e9a:	4b19      	ldr	r3, [pc, #100]	; (8004f00 <backwards+0xe8>)
 8004e9c:	22fa      	movs	r2, #250	; 0xfa
 8004e9e:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, 0);
 8004ea0:	4b18      	ldr	r3, [pc, #96]	; (8004f04 <backwards+0xec>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, speed_levels[current_speed][0]);
 8004ea8:	4b17      	ldr	r3, [pc, #92]	; (8004f08 <backwards+0xf0>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	4b16      	ldr	r3, [pc, #88]	; (8004f0c <backwards+0xf4>)
 8004eb2:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8004eb6:	4b13      	ldr	r3, [pc, #76]	; (8004f04 <backwards+0xec>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor1, 0);
 8004ebc:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <backwards+0xf8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, speed_levels[current_speed][1]);
 8004ec4:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <backwards+0xf0>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	4a10      	ldr	r2, [pc, #64]	; (8004f0c <backwards+0xf4>)
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	885a      	ldrh	r2, [r3, #2]
 8004ed2:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <backwards+0xf8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38
	PID(1);
 8004ed8:	2001      	movs	r0, #1
 8004eda:	f000 f839 	bl	8004f50 <PID>
	if(brakee){
 8004ede:	78fb      	ldrb	r3, [r7, #3]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <backwards+0xd0>
		brake();
 8004ee4:	f000 f816 	bl	8004f14 <brake>
	}
}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	3ecbb7e4 	.word	0x3ecbb7e4
 8004ef4:	200001cc 	.word	0x200001cc
 8004ef8:	66666667 	.word	0x66666667
 8004efc:	2000025c 	.word	0x2000025c
 8004f00:	200003be 	.word	0x200003be
 8004f04:	20000214 	.word	0x20000214
 8004f08:	200003bc 	.word	0x200003bc
 8004f0c:	08007bb0 	.word	0x08007bb0
 8004f10:	200002a4 	.word	0x200002a4

08004f14 <brake>:

void brake(){
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, htim2.Init.Period);
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <brake+0x34>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <brake+0x34>)
 8004f1e:	68d2      	ldr	r2, [r2, #12]
 8004f20:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, htim2.Init.Period);
 8004f22:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <brake+0x34>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a08      	ldr	r2, [pc, #32]	; (8004f48 <brake+0x34>)
 8004f28:	68d2      	ldr	r2, [r2, #12]
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor1, htim2.Init.Period);
 8004f2c:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <brake+0x38>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a05      	ldr	r2, [pc, #20]	; (8004f48 <brake+0x34>)
 8004f32:	68d2      	ldr	r2, [r2, #12]
 8004f34:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, htim2.Init.Period);
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <brake+0x38>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a03      	ldr	r2, [pc, #12]	; (8004f48 <brake+0x34>)
 8004f3c:	68d2      	ldr	r2, [r2, #12]
 8004f3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004f40:	bf00      	nop
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr
 8004f48:	20000214 	.word	0x20000214
 8004f4c:	200002a4 	.word	0x200002a4

08004f50 <PID>:

void PID(uint8_t d){
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
	int16_t Err, pErr = 0, P, D, total;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	82bb      	strh	r3, [r7, #20]
	while(status != 0){
 8004f5e:	e09d      	b.n	800509c <PID+0x14c>
		if(left_sensor45 > leftWallValue && right_sensor45 > rightWallValue){
 8004f60:	4b54      	ldr	r3, [pc, #336]	; (80050b4 <PID+0x164>)
 8004f62:	889b      	ldrh	r3, [r3, #4]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b64      	cmp	r3, #100	; 0x64
 8004f68:	d910      	bls.n	8004f8c <PID+0x3c>
 8004f6a:	4b52      	ldr	r3, [pc, #328]	; (80050b4 <PID+0x164>)
 8004f6c:	885b      	ldrh	r3, [r3, #2]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b64      	cmp	r3, #100	; 0x64
 8004f72:	d90b      	bls.n	8004f8c <PID+0x3c>
			Err = left_sensor45 - right_sensor45 - 10;
 8004f74:	4b4f      	ldr	r3, [pc, #316]	; (80050b4 <PID+0x164>)
 8004f76:	889b      	ldrh	r3, [r3, #4]
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	4b4e      	ldr	r3, [pc, #312]	; (80050b4 <PID+0x164>)
 8004f7c:	885b      	ldrh	r3, [r3, #2]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b0a      	subs	r3, #10
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	82fb      	strh	r3, [r7, #22]
 8004f8a:	e023      	b.n	8004fd4 <PID+0x84>
		} else if(left_sensor45 > leftWallValue){
 8004f8c:	4b49      	ldr	r3, [pc, #292]	; (80050b4 <PID+0x164>)
 8004f8e:	889b      	ldrh	r3, [r3, #4]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b64      	cmp	r3, #100	; 0x64
 8004f94:	d906      	bls.n	8004fa4 <PID+0x54>
			Err = left_sensor45 - leftWallValue;
 8004f96:	4b47      	ldr	r3, [pc, #284]	; (80050b4 <PID+0x164>)
 8004f98:	889b      	ldrh	r3, [r3, #4]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b64      	subs	r3, #100	; 0x64
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	82fb      	strh	r3, [r7, #22]
 8004fa2:	e017      	b.n	8004fd4 <PID+0x84>
		} else if(right_sensor45 > rightWallValue){
 8004fa4:	4b43      	ldr	r3, [pc, #268]	; (80050b4 <PID+0x164>)
 8004fa6:	885b      	ldrh	r3, [r3, #2]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b64      	cmp	r3, #100	; 0x64
 8004fac:	d907      	bls.n	8004fbe <PID+0x6e>
			Err = rightWallValue - right_sensor45;
 8004fae:	4b41      	ldr	r3, [pc, #260]	; (80050b4 <PID+0x164>)
 8004fb0:	885b      	ldrh	r3, [r3, #2]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	82fb      	strh	r3, [r7, #22]
 8004fbc:	e00a      	b.n	8004fd4 <PID+0x84>
		} else {
			Err = TIM3->CNT - TIM1->CNT;
 8004fbe:	4b3e      	ldr	r3, [pc, #248]	; (80050b8 <PID+0x168>)
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	4b3d      	ldr	r3, [pc, #244]	; (80050bc <PID+0x16c>)
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	82fb      	strh	r3, [r7, #22]
			pErr = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	82bb      	strh	r3, [r7, #20]
		}
		P = kp * Err;
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	8afb      	ldrh	r3, [r7, #22]
 8004fd8:	fb02 f303 	mul.w	r3, r2, r3
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	827b      	strh	r3, [r7, #18]
		D = kd * (Err - pErr);
 8004fe0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004fe4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2203      	movs	r2, #3
 8004fee:	fb02 f303 	mul.w	r3, r2, r3
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	823b      	strh	r3, [r7, #16]
		pErr = Err;
 8004ff6:	8afb      	ldrh	r3, [r7, #22]
 8004ff8:	82bb      	strh	r3, [r7, #20]
		total = P + D;
 8004ffa:	8a7a      	ldrh	r2, [r7, #18]
 8004ffc:	8a3b      	ldrh	r3, [r7, #16]
 8004ffe:	4413      	add	r3, r2
 8005000:	b29b      	uxth	r3, r3
 8005002:	81fb      	strh	r3, [r7, #14]
		if(d == 0){
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d124      	bne.n	8005054 <PID+0x104>
			__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, speed_levels[current_speed][0] + total);
 800500a:	4b2d      	ldr	r3, [pc, #180]	; (80050c0 <PID+0x170>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	461a      	mov	r2, r3
 8005012:	4b2c      	ldr	r3, [pc, #176]	; (80050c4 <PID+0x174>)
 8005014:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8005018:	461a      	mov	r2, r3
 800501a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800501e:	441a      	add	r2, r3
 8005020:	4b29      	ldr	r3, [pc, #164]	; (80050c8 <PID+0x178>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, 0);
 8005026:	4b28      	ldr	r3, [pc, #160]	; (80050c8 <PID+0x178>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2200      	movs	r2, #0
 800502c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, R_Motor1, speed_levels[current_speed][1] - total);
 800502e:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <PID+0x170>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	4a23      	ldr	r2, [pc, #140]	; (80050c4 <PID+0x174>)
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	885b      	ldrh	r3, [r3, #2]
 800503c:	461a      	mov	r2, r3
 800503e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005042:	1ad2      	subs	r2, r2, r3
 8005044:	4b21      	ldr	r3, [pc, #132]	; (80050cc <PID+0x17c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, 0);
 800504a:	4b20      	ldr	r3, [pc, #128]	; (80050cc <PID+0x17c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2200      	movs	r2, #0
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
 8005052:	e023      	b.n	800509c <PID+0x14c>
		} else {
			__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, 0);
 8005054:	4b1c      	ldr	r3, [pc, #112]	; (80050c8 <PID+0x178>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2200      	movs	r2, #0
 800505a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, speed_levels[current_speed][0] + total);
 800505c:	4b18      	ldr	r3, [pc, #96]	; (80050c0 <PID+0x170>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	461a      	mov	r2, r3
 8005064:	4b17      	ldr	r3, [pc, #92]	; (80050c4 <PID+0x174>)
 8005066:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 800506a:	461a      	mov	r2, r3
 800506c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005070:	441a      	add	r2, r3
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <PID+0x178>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, R_Motor1, 0);
 8005078:	4b14      	ldr	r3, [pc, #80]	; (80050cc <PID+0x17c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2200      	movs	r2, #0
 800507e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, speed_levels[current_speed][1] - total);
 8005080:	4b0f      	ldr	r3, [pc, #60]	; (80050c0 <PID+0x170>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	4a0f      	ldr	r2, [pc, #60]	; (80050c4 <PID+0x174>)
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	885b      	ldrh	r3, [r3, #2]
 800508e:	461a      	mov	r2, r3
 8005090:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005094:	1ad2      	subs	r2, r2, r3
 8005096:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <PID+0x17c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
	while(status != 0){
 800509c:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <PID+0x180>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	b25b      	sxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f47f af5c 	bne.w	8004f60 <PID+0x10>
		}
	}
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr
 80050b4:	200003b4 	.word	0x200003b4
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	200003bc 	.word	0x200003bc
 80050c4:	08007bb0 	.word	0x08007bb0
 80050c8:	20000214 	.word	0x20000214
 80050cc:	200002a4 	.word	0x200002a4
 80050d0:	200003be 	.word	0x200003be

080050d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80050d4:	f7ff fa1e 	bl	8004514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050d8:	480b      	ldr	r0, [pc, #44]	; (8005108 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80050da:	490c      	ldr	r1, [pc, #48]	; (800510c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80050dc:	4a0c      	ldr	r2, [pc, #48]	; (8005110 <LoopFillZerobss+0x16>)
  movs r3, #0
 80050de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050e0:	e002      	b.n	80050e8 <LoopCopyDataInit>

080050e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050e6:	3304      	adds	r3, #4

080050e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050ec:	d3f9      	bcc.n	80050e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050ee:	4a09      	ldr	r2, [pc, #36]	; (8005114 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80050f0:	4c09      	ldr	r4, [pc, #36]	; (8005118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050f4:	e001      	b.n	80050fa <LoopFillZerobss>

080050f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050f8:	3204      	adds	r2, #4

080050fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050fc:	d3fb      	bcc.n	80050f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050fe:	f002 fcd3 	bl	8007aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005102:	f7fd fe95 	bl	8002e30 <main>
  bx lr
 8005106:	4770      	bx	lr
  ldr r0, =_sdata
 8005108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800510c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8005110:	08007bf0 	.word	0x08007bf0
  ldr r2, =_sbss
 8005114:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8005118:	20000c60 	.word	0x20000c60

0800511c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800511c:	e7fe      	b.n	800511c <ADC1_2_IRQHandler>
	...

08005120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005124:	4b08      	ldr	r3, [pc, #32]	; (8005148 <HAL_Init+0x28>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a07      	ldr	r2, [pc, #28]	; (8005148 <HAL_Init+0x28>)
 800512a:	f043 0310 	orr.w	r3, r3, #16
 800512e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005130:	2003      	movs	r0, #3
 8005132:	f000 fd13 	bl	8005b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005136:	200f      	movs	r0, #15
 8005138:	f000 f808 	bl	800514c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800513c:	f7fe ff4a 	bl	8003fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40022000 	.word	0x40022000

0800514c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005154:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <HAL_InitTick+0x54>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <HAL_InitTick+0x58>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	4619      	mov	r1, r3
 800515e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005162:	fbb3 f3f1 	udiv	r3, r3, r1
 8005166:	fbb2 f3f3 	udiv	r3, r2, r3
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fd2b 	bl	8005bc6 <HAL_SYSTICK_Config>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e00e      	b.n	8005198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d80a      	bhi.n	8005196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005180:	2200      	movs	r2, #0
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	f04f 30ff 	mov.w	r0, #4294967295
 8005188:	f000 fcf3 	bl	8005b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800518c:	4a06      	ldr	r2, [pc, #24]	; (80051a8 <HAL_InitTick+0x5c>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	e000      	b.n	8005198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
}
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20000000 	.word	0x20000000
 80051a4:	20000008 	.word	0x20000008
 80051a8:	20000004 	.word	0x20000004

080051ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051b0:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_IncTick+0x1c>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_IncTick+0x20>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4413      	add	r3, r2
 80051bc:	4a03      	ldr	r2, [pc, #12]	; (80051cc <HAL_IncTick+0x20>)
 80051be:	6013      	str	r3, [r2, #0]
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr
 80051c8:	20000008 	.word	0x20000008
 80051cc:	20000c5c 	.word	0x20000c5c

080051d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  return uwTick;
 80051d4:	4b02      	ldr	r3, [pc, #8]	; (80051e0 <HAL_GetTick+0x10>)
 80051d6:	681b      	ldr	r3, [r3, #0]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr
 80051e0:	20000c5c 	.word	0x20000c5c

080051e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051ec:	f7ff fff0 	bl	80051d0 <HAL_GetTick>
 80051f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d005      	beq.n	800520a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80051fe:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <HAL_Delay+0x44>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800520a:	bf00      	nop
 800520c:	f7ff ffe0 	bl	80051d0 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	429a      	cmp	r2, r3
 800521a:	d8f7      	bhi.n	800520c <HAL_Delay+0x28>
  {
  }
}
 800521c:	bf00      	nop
 800521e:	bf00      	nop
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000008 	.word	0x20000008

0800522c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800523c:	2300      	movs	r3, #0
 800523e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e0be      	b.n	80053cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	2b00      	cmp	r3, #0
 800525a:	d109      	bne.n	8005270 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fe fee4 	bl	8004038 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 faff 	bl	8005874 <ADC_ConversionStop_Disable>
 8005276:	4603      	mov	r3, r0
 8005278:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b00      	cmp	r3, #0
 8005284:	f040 8099 	bne.w	80053ba <HAL_ADC_Init+0x18e>
 8005288:	7dfb      	ldrb	r3, [r7, #23]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f040 8095 	bne.w	80053ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005294:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005298:	f023 0302 	bic.w	r3, r3, #2
 800529c:	f043 0202 	orr.w	r2, r3, #2
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80052ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	7b1b      	ldrb	r3, [r3, #12]
 80052b2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80052b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c4:	d003      	beq.n	80052ce <HAL_ADC_Init+0xa2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d102      	bne.n	80052d4 <HAL_ADC_Init+0xa8>
 80052ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052d2:	e000      	b.n	80052d6 <HAL_ADC_Init+0xaa>
 80052d4:	2300      	movs	r3, #0
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	7d1b      	ldrb	r3, [r3, #20]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d119      	bne.n	8005318 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7b1b      	ldrb	r3, [r3, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d109      	bne.n	8005300 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	035a      	lsls	r2, r3, #13
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	e00b      	b.n	8005318 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	f043 0220 	orr.w	r2, r3, #32
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	f043 0201 	orr.w	r2, r3, #1
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	430a      	orrs	r2, r1
 800532a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <HAL_ADC_Init+0x1a8>)
 8005334:	4013      	ands	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	430b      	orrs	r3, r1
 800533e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005348:	d003      	beq.n	8005352 <HAL_ADC_Init+0x126>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d104      	bne.n	800535c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	3b01      	subs	r3, #1
 8005358:	051b      	lsls	r3, r3, #20
 800535a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	430a      	orrs	r2, r1
 800536e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <HAL_ADC_Init+0x1ac>)
 8005378:	4013      	ands	r3, r2
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	429a      	cmp	r2, r3
 800537e:	d10b      	bne.n	8005398 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	f023 0303 	bic.w	r3, r3, #3
 800538e:	f043 0201 	orr.w	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005396:	e018      	b.n	80053ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	f023 0312 	bic.w	r3, r3, #18
 80053a0:	f043 0210 	orr.w	r2, r3, #16
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	f043 0201 	orr.w	r2, r3, #1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80053b8:	e007      	b.n	80053ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053be:	f043 0210 	orr.w	r2, r3, #16
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80053ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	ffe1f7fd 	.word	0xffe1f7fd
 80053d8:	ff1f0efe 	.word	0xff1f0efe

080053dc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a64      	ldr	r2, [pc, #400]	; (8005584 <HAL_ADC_Start_DMA+0x1a8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_ADC_Start_DMA+0x24>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a63      	ldr	r2, [pc, #396]	; (8005588 <HAL_ADC_Start_DMA+0x1ac>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d106      	bne.n	800540e <HAL_ADC_Start_DMA+0x32>
 8005400:	4b60      	ldr	r3, [pc, #384]	; (8005584 <HAL_ADC_Start_DMA+0x1a8>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005408:	2b00      	cmp	r3, #0
 800540a:	f040 80b3 	bne.w	8005574 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_ADC_Start_DMA+0x40>
 8005418:	2302      	movs	r3, #2
 800541a:	e0ae      	b.n	800557a <HAL_ADC_Start_DMA+0x19e>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 f9cb 	bl	80057c0 <ADC_Enable>
 800542a:	4603      	mov	r3, r0
 800542c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	2b00      	cmp	r3, #0
 8005432:	f040 809a 	bne.w	800556a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800543e:	f023 0301 	bic.w	r3, r3, #1
 8005442:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a4e      	ldr	r2, [pc, #312]	; (8005588 <HAL_ADC_Start_DMA+0x1ac>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d105      	bne.n	8005460 <HAL_ADC_Start_DMA+0x84>
 8005454:	4b4b      	ldr	r3, [pc, #300]	; (8005584 <HAL_ADC_Start_DMA+0x1a8>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d115      	bne.n	800548c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005476:	2b00      	cmp	r3, #0
 8005478:	d026      	beq.n	80054c8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005482:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800548a:	e01d      	b.n	80054c8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a39      	ldr	r2, [pc, #228]	; (8005584 <HAL_ADC_Start_DMA+0x1a8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_ADC_Start_DMA+0xd0>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a38      	ldr	r2, [pc, #224]	; (8005588 <HAL_ADC_Start_DMA+0x1ac>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d10d      	bne.n	80054c8 <HAL_ADC_Start_DMA+0xec>
 80054ac:	4b35      	ldr	r3, [pc, #212]	; (8005584 <HAL_ADC_Start_DMA+0x1a8>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d006      	beq.n	80054e2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	f023 0206 	bic.w	r2, r3, #6
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	62da      	str	r2, [r3, #44]	; 0x2c
 80054e0:	e002      	b.n	80054e8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	4a25      	ldr	r2, [pc, #148]	; (800558c <HAL_ADC_Start_DMA+0x1b0>)
 80054f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	4a24      	ldr	r2, [pc, #144]	; (8005590 <HAL_ADC_Start_DMA+0x1b4>)
 80054fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	4a23      	ldr	r2, [pc, #140]	; (8005594 <HAL_ADC_Start_DMA+0x1b8>)
 8005506:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0202 	mvn.w	r2, #2
 8005510:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005520:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a18      	ldr	r0, [r3, #32]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	334c      	adds	r3, #76	; 0x4c
 800552c:	4619      	mov	r1, r3
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f000 fbaf 	bl	8005c94 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005540:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005544:	d108      	bne.n	8005558 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005554:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005556:	e00f      	b.n	8005578 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689a      	ldr	r2, [r3, #8]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005566:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005568:	e006      	b.n	8005578 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8005572:	e001      	b.n	8005578 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005578:	7dfb      	ldrb	r3, [r7, #23]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40012400 	.word	0x40012400
 8005588:	40012800 	.word	0x40012800
 800558c:	080058f7 	.word	0x080058f7
 8005590:	08005973 	.word	0x08005973
 8005594:	0800598f 	.word	0x0800598f

08005598 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr

080055bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr
	...

080055d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x20>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e0dc      	b.n	80057aa <HAL_ADC_ConfigChannel+0x1da>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b06      	cmp	r3, #6
 80055fe:	d81c      	bhi.n	800563a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	3b05      	subs	r3, #5
 8005612:	221f      	movs	r2, #31
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	43db      	mvns	r3, r3
 800561a:	4019      	ands	r1, r3
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	3b05      	subs	r3, #5
 800562c:	fa00 f203 	lsl.w	r2, r0, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	635a      	str	r2, [r3, #52]	; 0x34
 8005638:	e03c      	b.n	80056b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b0c      	cmp	r3, #12
 8005640:	d81c      	bhi.n	800567c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	3b23      	subs	r3, #35	; 0x23
 8005654:	221f      	movs	r2, #31
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	43db      	mvns	r3, r3
 800565c:	4019      	ands	r1, r3
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	3b23      	subs	r3, #35	; 0x23
 800566e:	fa00 f203 	lsl.w	r2, r0, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	631a      	str	r2, [r3, #48]	; 0x30
 800567a:	e01b      	b.n	80056b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	3b41      	subs	r3, #65	; 0x41
 800568e:	221f      	movs	r2, #31
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	43db      	mvns	r3, r3
 8005696:	4019      	ands	r1, r3
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	3b41      	subs	r3, #65	; 0x41
 80056a8:	fa00 f203 	lsl.w	r2, r0, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b09      	cmp	r3, #9
 80056ba:	d91c      	bls.n	80056f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68d9      	ldr	r1, [r3, #12]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4613      	mov	r3, r2
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	4413      	add	r3, r2
 80056cc:	3b1e      	subs	r3, #30
 80056ce:	2207      	movs	r2, #7
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	43db      	mvns	r3, r3
 80056d6:	4019      	ands	r1, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	6898      	ldr	r0, [r3, #8]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	4413      	add	r3, r2
 80056e6:	3b1e      	subs	r3, #30
 80056e8:	fa00 f203 	lsl.w	r2, r0, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	60da      	str	r2, [r3, #12]
 80056f4:	e019      	b.n	800572a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6919      	ldr	r1, [r3, #16]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	4613      	mov	r3, r2
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	4413      	add	r3, r2
 8005706:	2207      	movs	r2, #7
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	43db      	mvns	r3, r3
 800570e:	4019      	ands	r1, r3
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	6898      	ldr	r0, [r3, #8]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4613      	mov	r3, r2
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	4413      	add	r3, r2
 800571e:	fa00 f203 	lsl.w	r2, r0, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b10      	cmp	r3, #16
 8005730:	d003      	beq.n	800573a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005736:	2b11      	cmp	r3, #17
 8005738:	d132      	bne.n	80057a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1d      	ldr	r2, [pc, #116]	; (80057b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d125      	bne.n	8005790 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d126      	bne.n	80057a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005760:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b10      	cmp	r3, #16
 8005768:	d11a      	bne.n	80057a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800576a:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a13      	ldr	r2, [pc, #76]	; (80057bc <HAL_ADC_ConfigChannel+0x1ec>)
 8005770:	fba2 2303 	umull	r2, r3, r2, r3
 8005774:	0c9a      	lsrs	r2, r3, #18
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005780:	e002      	b.n	8005788 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	3b01      	subs	r3, #1
 8005786:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f9      	bne.n	8005782 <HAL_ADC_ConfigChannel+0x1b2>
 800578e:	e007      	b.n	80057a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005794:	f043 0220 	orr.w	r2, r3, #32
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr
 80057b4:	40012400 	.word	0x40012400
 80057b8:	20000000 	.word	0x20000000
 80057bc:	431bde83 	.word	0x431bde83

080057c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d040      	beq.n	8005860 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0201 	orr.w	r2, r2, #1
 80057ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80057ee:	4b1f      	ldr	r3, [pc, #124]	; (800586c <ADC_Enable+0xac>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a1f      	ldr	r2, [pc, #124]	; (8005870 <ADC_Enable+0xb0>)
 80057f4:	fba2 2303 	umull	r2, r3, r2, r3
 80057f8:	0c9b      	lsrs	r3, r3, #18
 80057fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80057fc:	e002      	b.n	8005804 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	3b01      	subs	r3, #1
 8005802:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f9      	bne.n	80057fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800580a:	f7ff fce1 	bl	80051d0 <HAL_GetTick>
 800580e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005810:	e01f      	b.n	8005852 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005812:	f7ff fcdd 	bl	80051d0 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d918      	bls.n	8005852 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b01      	cmp	r3, #1
 800582c:	d011      	beq.n	8005852 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005832:	f043 0210 	orr.w	r2, r3, #16
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	f043 0201 	orr.w	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e007      	b.n	8005862 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b01      	cmp	r3, #1
 800585e:	d1d8      	bne.n	8005812 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000000 	.word	0x20000000
 8005870:	431bde83 	.word	0x431bde83

08005874 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b01      	cmp	r3, #1
 800588c:	d12e      	bne.n	80058ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0201 	bic.w	r2, r2, #1
 800589c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800589e:	f7ff fc97 	bl	80051d0 <HAL_GetTick>
 80058a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80058a4:	e01b      	b.n	80058de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80058a6:	f7ff fc93 	bl	80051d0 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d914      	bls.n	80058de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d10d      	bne.n	80058de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	f043 0210 	orr.w	r2, r3, #16
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	f043 0201 	orr.w	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e007      	b.n	80058ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d0dc      	beq.n	80058a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800590c:	2b00      	cmp	r3, #0
 800590e:	d127      	bne.n	8005960 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005926:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800592a:	d115      	bne.n	8005958 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005930:	2b00      	cmp	r3, #0
 8005932:	d111      	bne.n	8005958 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005938:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d105      	bne.n	8005958 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	f043 0201 	orr.w	r2, r3, #1
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7ff fe1d 	bl	8005598 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800595e:	e004      	b.n	800596a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
}
 800596a:	bf00      	nop
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b084      	sub	sp, #16
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f7ff fe12 	bl	80055aa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005986:	bf00      	nop
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	f043 0204 	orr.w	r2, r3, #4
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff fe01 	bl	80055bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <__NVIC_SetPriorityGrouping+0x44>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059e0:	4013      	ands	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059f6:	4a04      	ldr	r2, [pc, #16]	; (8005a08 <__NVIC_SetPriorityGrouping+0x44>)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	60d3      	str	r3, [r2, #12]
}
 80059fc:	bf00      	nop
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bc80      	pop	{r7}
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	e000ed00 	.word	0xe000ed00

08005a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a10:	4b04      	ldr	r3, [pc, #16]	; (8005a24 <__NVIC_GetPriorityGrouping+0x18>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	0a1b      	lsrs	r3, r3, #8
 8005a16:	f003 0307 	and.w	r3, r3, #7
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	e000ed00 	.word	0xe000ed00

08005a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	db0b      	blt.n	8005a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a3a:	79fb      	ldrb	r3, [r7, #7]
 8005a3c:	f003 021f 	and.w	r2, r3, #31
 8005a40:	4906      	ldr	r1, [pc, #24]	; (8005a5c <__NVIC_EnableIRQ+0x34>)
 8005a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	2001      	movs	r0, #1
 8005a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr
 8005a5c:	e000e100 	.word	0xe000e100

08005a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	6039      	str	r1, [r7, #0]
 8005a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	db0a      	blt.n	8005a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	490c      	ldr	r1, [pc, #48]	; (8005aac <__NVIC_SetPriority+0x4c>)
 8005a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7e:	0112      	lsls	r2, r2, #4
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	440b      	add	r3, r1
 8005a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a88:	e00a      	b.n	8005aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	4908      	ldr	r1, [pc, #32]	; (8005ab0 <__NVIC_SetPriority+0x50>)
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	3b04      	subs	r3, #4
 8005a98:	0112      	lsls	r2, r2, #4
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	761a      	strb	r2, [r3, #24]
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	e000e100 	.word	0xe000e100
 8005ab0:	e000ed00 	.word	0xe000ed00

08005ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b089      	sub	sp, #36	; 0x24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f1c3 0307 	rsb	r3, r3, #7
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	bf28      	it	cs
 8005ad2:	2304      	movcs	r3, #4
 8005ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	2b06      	cmp	r3, #6
 8005adc:	d902      	bls.n	8005ae4 <NVIC_EncodePriority+0x30>
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	3b03      	subs	r3, #3
 8005ae2:	e000      	b.n	8005ae6 <NVIC_EncodePriority+0x32>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	43da      	mvns	r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	401a      	ands	r2, r3
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005afc:	f04f 31ff 	mov.w	r1, #4294967295
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	fa01 f303 	lsl.w	r3, r1, r3
 8005b06:	43d9      	mvns	r1, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b0c:	4313      	orrs	r3, r2
         );
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3724      	adds	r7, #36	; 0x24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b28:	d301      	bcc.n	8005b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e00f      	b.n	8005b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b2e:	4a0a      	ldr	r2, [pc, #40]	; (8005b58 <SysTick_Config+0x40>)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b36:	210f      	movs	r1, #15
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	f7ff ff90 	bl	8005a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <SysTick_Config+0x40>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b46:	4b04      	ldr	r3, [pc, #16]	; (8005b58 <SysTick_Config+0x40>)
 8005b48:	2207      	movs	r2, #7
 8005b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	e000e010 	.word	0xe000e010

08005b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff ff2d 	bl	80059c4 <__NVIC_SetPriorityGrouping>
}
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b086      	sub	sp, #24
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	4603      	mov	r3, r0
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
 8005b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b84:	f7ff ff42 	bl	8005a0c <__NVIC_GetPriorityGrouping>
 8005b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	6978      	ldr	r0, [r7, #20]
 8005b90:	f7ff ff90 	bl	8005ab4 <NVIC_EncodePriority>
 8005b94:	4602      	mov	r2, r0
 8005b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff ff5f 	bl	8005a60 <__NVIC_SetPriority>
}
 8005ba2:	bf00      	nop
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff ff35 	bl	8005a28 <__NVIC_EnableIRQ>
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff ffa2 	bl	8005b18 <SysTick_Config>
 8005bd4:	4603      	mov	r3, r0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e043      	b.n	8005c7e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	4b22      	ldr	r3, [pc, #136]	; (8005c88 <HAL_DMA_Init+0xa8>)
 8005bfe:	4413      	add	r3, r2
 8005c00:	4a22      	ldr	r2, [pc, #136]	; (8005c8c <HAL_DMA_Init+0xac>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	091b      	lsrs	r3, r3, #4
 8005c08:	009a      	lsls	r2, r3, #2
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a1f      	ldr	r2, [pc, #124]	; (8005c90 <HAL_DMA_Init+0xb0>)
 8005c12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005c2a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005c2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bc80      	pop	{r7}
 8005c86:	4770      	bx	lr
 8005c88:	bffdfff8 	.word	0xbffdfff8
 8005c8c:	cccccccd 	.word	0xcccccccd
 8005c90:	40020000 	.word	0x40020000

08005c94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_DMA_Start_IT+0x20>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e04b      	b.n	8005d4c <HAL_DMA_Start_IT+0xb8>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d13a      	bne.n	8005d3e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f831 	bl	8005d54 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d008      	beq.n	8005d0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 020e 	orr.w	r2, r2, #14
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	e00f      	b.n	8005d2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0204 	bic.w	r2, r2, #4
 8005d1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 020a 	orr.w	r2, r2, #10
 8005d2a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0201 	orr.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	e005      	b.n	8005d4a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d46:	2302      	movs	r3, #2
 8005d48:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b10      	cmp	r3, #16
 8005d80:	d108      	bne.n	8005d94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d92:	e007      	b.n	8005da4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	60da      	str	r2, [r3, #12]
}
 8005da4:	bf00      	nop
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr
	...

08005db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b08b      	sub	sp, #44	; 0x2c
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dc2:	e169      	b.n	8006098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	f040 8158 	bne.w	8006092 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	4a9a      	ldr	r2, [pc, #616]	; (8006050 <HAL_GPIO_Init+0x2a0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d05e      	beq.n	8005eaa <HAL_GPIO_Init+0xfa>
 8005dec:	4a98      	ldr	r2, [pc, #608]	; (8006050 <HAL_GPIO_Init+0x2a0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d875      	bhi.n	8005ede <HAL_GPIO_Init+0x12e>
 8005df2:	4a98      	ldr	r2, [pc, #608]	; (8006054 <HAL_GPIO_Init+0x2a4>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d058      	beq.n	8005eaa <HAL_GPIO_Init+0xfa>
 8005df8:	4a96      	ldr	r2, [pc, #600]	; (8006054 <HAL_GPIO_Init+0x2a4>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d86f      	bhi.n	8005ede <HAL_GPIO_Init+0x12e>
 8005dfe:	4a96      	ldr	r2, [pc, #600]	; (8006058 <HAL_GPIO_Init+0x2a8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d052      	beq.n	8005eaa <HAL_GPIO_Init+0xfa>
 8005e04:	4a94      	ldr	r2, [pc, #592]	; (8006058 <HAL_GPIO_Init+0x2a8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d869      	bhi.n	8005ede <HAL_GPIO_Init+0x12e>
 8005e0a:	4a94      	ldr	r2, [pc, #592]	; (800605c <HAL_GPIO_Init+0x2ac>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d04c      	beq.n	8005eaa <HAL_GPIO_Init+0xfa>
 8005e10:	4a92      	ldr	r2, [pc, #584]	; (800605c <HAL_GPIO_Init+0x2ac>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d863      	bhi.n	8005ede <HAL_GPIO_Init+0x12e>
 8005e16:	4a92      	ldr	r2, [pc, #584]	; (8006060 <HAL_GPIO_Init+0x2b0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d046      	beq.n	8005eaa <HAL_GPIO_Init+0xfa>
 8005e1c:	4a90      	ldr	r2, [pc, #576]	; (8006060 <HAL_GPIO_Init+0x2b0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d85d      	bhi.n	8005ede <HAL_GPIO_Init+0x12e>
 8005e22:	2b12      	cmp	r3, #18
 8005e24:	d82a      	bhi.n	8005e7c <HAL_GPIO_Init+0xcc>
 8005e26:	2b12      	cmp	r3, #18
 8005e28:	d859      	bhi.n	8005ede <HAL_GPIO_Init+0x12e>
 8005e2a:	a201      	add	r2, pc, #4	; (adr r2, 8005e30 <HAL_GPIO_Init+0x80>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005eab 	.word	0x08005eab
 8005e34:	08005e85 	.word	0x08005e85
 8005e38:	08005e97 	.word	0x08005e97
 8005e3c:	08005ed9 	.word	0x08005ed9
 8005e40:	08005edf 	.word	0x08005edf
 8005e44:	08005edf 	.word	0x08005edf
 8005e48:	08005edf 	.word	0x08005edf
 8005e4c:	08005edf 	.word	0x08005edf
 8005e50:	08005edf 	.word	0x08005edf
 8005e54:	08005edf 	.word	0x08005edf
 8005e58:	08005edf 	.word	0x08005edf
 8005e5c:	08005edf 	.word	0x08005edf
 8005e60:	08005edf 	.word	0x08005edf
 8005e64:	08005edf 	.word	0x08005edf
 8005e68:	08005edf 	.word	0x08005edf
 8005e6c:	08005edf 	.word	0x08005edf
 8005e70:	08005edf 	.word	0x08005edf
 8005e74:	08005e8d 	.word	0x08005e8d
 8005e78:	08005ea1 	.word	0x08005ea1
 8005e7c:	4a79      	ldr	r2, [pc, #484]	; (8006064 <HAL_GPIO_Init+0x2b4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005e82:	e02c      	b.n	8005ede <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	623b      	str	r3, [r7, #32]
          break;
 8005e8a:	e029      	b.n	8005ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	3304      	adds	r3, #4
 8005e92:	623b      	str	r3, [r7, #32]
          break;
 8005e94:	e024      	b.n	8005ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	623b      	str	r3, [r7, #32]
          break;
 8005e9e:	e01f      	b.n	8005ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	330c      	adds	r3, #12
 8005ea6:	623b      	str	r3, [r7, #32]
          break;
 8005ea8:	e01a      	b.n	8005ee0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d102      	bne.n	8005eb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005eb2:	2304      	movs	r3, #4
 8005eb4:	623b      	str	r3, [r7, #32]
          break;
 8005eb6:	e013      	b.n	8005ee0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d105      	bne.n	8005ecc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	611a      	str	r2, [r3, #16]
          break;
 8005eca:	e009      	b.n	8005ee0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ecc:	2308      	movs	r3, #8
 8005ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	615a      	str	r2, [r3, #20]
          break;
 8005ed6:	e003      	b.n	8005ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	623b      	str	r3, [r7, #32]
          break;
 8005edc:	e000      	b.n	8005ee0 <HAL_GPIO_Init+0x130>
          break;
 8005ede:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	2bff      	cmp	r3, #255	; 0xff
 8005ee4:	d801      	bhi.n	8005eea <HAL_GPIO_Init+0x13a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	e001      	b.n	8005eee <HAL_GPIO_Init+0x13e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3304      	adds	r3, #4
 8005eee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	2bff      	cmp	r3, #255	; 0xff
 8005ef4:	d802      	bhi.n	8005efc <HAL_GPIO_Init+0x14c>
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	e002      	b.n	8005f02 <HAL_GPIO_Init+0x152>
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	3b08      	subs	r3, #8
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	210f      	movs	r1, #15
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f10:	43db      	mvns	r3, r3
 8005f12:	401a      	ands	r2, r3
 8005f14:	6a39      	ldr	r1, [r7, #32]
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80b1 	beq.w	8006092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005f30:	4b4d      	ldr	r3, [pc, #308]	; (8006068 <HAL_GPIO_Init+0x2b8>)
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	4a4c      	ldr	r2, [pc, #304]	; (8006068 <HAL_GPIO_Init+0x2b8>)
 8005f36:	f043 0301 	orr.w	r3, r3, #1
 8005f3a:	6193      	str	r3, [r2, #24]
 8005f3c:	4b4a      	ldr	r3, [pc, #296]	; (8006068 <HAL_GPIO_Init+0x2b8>)
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	60bb      	str	r3, [r7, #8]
 8005f46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005f48:	4a48      	ldr	r2, [pc, #288]	; (800606c <HAL_GPIO_Init+0x2bc>)
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	089b      	lsrs	r3, r3, #2
 8005f4e:	3302      	adds	r3, #2
 8005f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	f003 0303 	and.w	r3, r3, #3
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	220f      	movs	r2, #15
 8005f60:	fa02 f303 	lsl.w	r3, r2, r3
 8005f64:	43db      	mvns	r3, r3
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a40      	ldr	r2, [pc, #256]	; (8006070 <HAL_GPIO_Init+0x2c0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d013      	beq.n	8005f9c <HAL_GPIO_Init+0x1ec>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a3f      	ldr	r2, [pc, #252]	; (8006074 <HAL_GPIO_Init+0x2c4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00d      	beq.n	8005f98 <HAL_GPIO_Init+0x1e8>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a3e      	ldr	r2, [pc, #248]	; (8006078 <HAL_GPIO_Init+0x2c8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d007      	beq.n	8005f94 <HAL_GPIO_Init+0x1e4>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a3d      	ldr	r2, [pc, #244]	; (800607c <HAL_GPIO_Init+0x2cc>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d101      	bne.n	8005f90 <HAL_GPIO_Init+0x1e0>
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e006      	b.n	8005f9e <HAL_GPIO_Init+0x1ee>
 8005f90:	2304      	movs	r3, #4
 8005f92:	e004      	b.n	8005f9e <HAL_GPIO_Init+0x1ee>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e002      	b.n	8005f9e <HAL_GPIO_Init+0x1ee>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e000      	b.n	8005f9e <HAL_GPIO_Init+0x1ee>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa0:	f002 0203 	and.w	r2, r2, #3
 8005fa4:	0092      	lsls	r2, r2, #2
 8005fa6:	4093      	lsls	r3, r2
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005fae:	492f      	ldr	r1, [pc, #188]	; (800606c <HAL_GPIO_Init+0x2bc>)
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	089b      	lsrs	r3, r3, #2
 8005fb4:	3302      	adds	r3, #2
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d006      	beq.n	8005fd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005fc8:	4b2d      	ldr	r3, [pc, #180]	; (8006080 <HAL_GPIO_Init+0x2d0>)
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	492c      	ldr	r1, [pc, #176]	; (8006080 <HAL_GPIO_Init+0x2d0>)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	608b      	str	r3, [r1, #8]
 8005fd4:	e006      	b.n	8005fe4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005fd6:	4b2a      	ldr	r3, [pc, #168]	; (8006080 <HAL_GPIO_Init+0x2d0>)
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	4928      	ldr	r1, [pc, #160]	; (8006080 <HAL_GPIO_Init+0x2d0>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d006      	beq.n	8005ffe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005ff0:	4b23      	ldr	r3, [pc, #140]	; (8006080 <HAL_GPIO_Init+0x2d0>)
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	4922      	ldr	r1, [pc, #136]	; (8006080 <HAL_GPIO_Init+0x2d0>)
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60cb      	str	r3, [r1, #12]
 8005ffc:	e006      	b.n	800600c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005ffe:	4b20      	ldr	r3, [pc, #128]	; (8006080 <HAL_GPIO_Init+0x2d0>)
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	43db      	mvns	r3, r3
 8006006:	491e      	ldr	r1, [pc, #120]	; (8006080 <HAL_GPIO_Init+0x2d0>)
 8006008:	4013      	ands	r3, r2
 800600a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d006      	beq.n	8006026 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006018:	4b19      	ldr	r3, [pc, #100]	; (8006080 <HAL_GPIO_Init+0x2d0>)
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	4918      	ldr	r1, [pc, #96]	; (8006080 <HAL_GPIO_Init+0x2d0>)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	4313      	orrs	r3, r2
 8006022:	604b      	str	r3, [r1, #4]
 8006024:	e006      	b.n	8006034 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006026:	4b16      	ldr	r3, [pc, #88]	; (8006080 <HAL_GPIO_Init+0x2d0>)
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	43db      	mvns	r3, r3
 800602e:	4914      	ldr	r1, [pc, #80]	; (8006080 <HAL_GPIO_Init+0x2d0>)
 8006030:	4013      	ands	r3, r2
 8006032:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d021      	beq.n	8006084 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006040:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <HAL_GPIO_Init+0x2d0>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	490e      	ldr	r1, [pc, #56]	; (8006080 <HAL_GPIO_Init+0x2d0>)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	4313      	orrs	r3, r2
 800604a:	600b      	str	r3, [r1, #0]
 800604c:	e021      	b.n	8006092 <HAL_GPIO_Init+0x2e2>
 800604e:	bf00      	nop
 8006050:	10320000 	.word	0x10320000
 8006054:	10310000 	.word	0x10310000
 8006058:	10220000 	.word	0x10220000
 800605c:	10210000 	.word	0x10210000
 8006060:	10120000 	.word	0x10120000
 8006064:	10110000 	.word	0x10110000
 8006068:	40021000 	.word	0x40021000
 800606c:	40010000 	.word	0x40010000
 8006070:	40010800 	.word	0x40010800
 8006074:	40010c00 	.word	0x40010c00
 8006078:	40011000 	.word	0x40011000
 800607c:	40011400 	.word	0x40011400
 8006080:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <HAL_GPIO_Init+0x304>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	43db      	mvns	r3, r3
 800608c:	4909      	ldr	r1, [pc, #36]	; (80060b4 <HAL_GPIO_Init+0x304>)
 800608e:	4013      	ands	r3, r2
 8006090:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	3301      	adds	r3, #1
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	fa22 f303 	lsr.w	r3, r2, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f47f ae8e 	bne.w	8005dc4 <HAL_GPIO_Init+0x14>
  }
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	372c      	adds	r7, #44	; 0x2c
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bc80      	pop	{r7}
 80060b2:	4770      	bx	lr
 80060b4:	40010400 	.word	0x40010400

080060b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80060c2:	4b08      	ldr	r3, [pc, #32]	; (80060e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060c4:	695a      	ldr	r2, [r3, #20]
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	4013      	ands	r3, r2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d006      	beq.n	80060dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060ce:	4a05      	ldr	r2, [pc, #20]	; (80060e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060d0:	88fb      	ldrh	r3, [r7, #6]
 80060d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f806 	bl	80060e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80060dc:	bf00      	nop
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40010400 	.word	0x40010400

080060e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr

080060fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e272      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 8087 	beq.w	800622a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800611c:	4b92      	ldr	r3, [pc, #584]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f003 030c 	and.w	r3, r3, #12
 8006124:	2b04      	cmp	r3, #4
 8006126:	d00c      	beq.n	8006142 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006128:	4b8f      	ldr	r3, [pc, #572]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f003 030c 	and.w	r3, r3, #12
 8006130:	2b08      	cmp	r3, #8
 8006132:	d112      	bne.n	800615a <HAL_RCC_OscConfig+0x5e>
 8006134:	4b8c      	ldr	r3, [pc, #560]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800613c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006140:	d10b      	bne.n	800615a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006142:	4b89      	ldr	r3, [pc, #548]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d06c      	beq.n	8006228 <HAL_RCC_OscConfig+0x12c>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d168      	bne.n	8006228 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e24c      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006162:	d106      	bne.n	8006172 <HAL_RCC_OscConfig+0x76>
 8006164:	4b80      	ldr	r3, [pc, #512]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a7f      	ldr	r2, [pc, #508]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 800616a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	e02e      	b.n	80061d0 <HAL_RCC_OscConfig+0xd4>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10c      	bne.n	8006194 <HAL_RCC_OscConfig+0x98>
 800617a:	4b7b      	ldr	r3, [pc, #492]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a7a      	ldr	r2, [pc, #488]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 8006180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	4b78      	ldr	r3, [pc, #480]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a77      	ldr	r2, [pc, #476]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 800618c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	e01d      	b.n	80061d0 <HAL_RCC_OscConfig+0xd4>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800619c:	d10c      	bne.n	80061b8 <HAL_RCC_OscConfig+0xbc>
 800619e:	4b72      	ldr	r3, [pc, #456]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a71      	ldr	r2, [pc, #452]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 80061a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	4b6f      	ldr	r3, [pc, #444]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a6e      	ldr	r2, [pc, #440]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 80061b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	e00b      	b.n	80061d0 <HAL_RCC_OscConfig+0xd4>
 80061b8:	4b6b      	ldr	r3, [pc, #428]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a6a      	ldr	r2, [pc, #424]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 80061be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	4b68      	ldr	r3, [pc, #416]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a67      	ldr	r2, [pc, #412]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 80061ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d013      	beq.n	8006200 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d8:	f7fe fffa 	bl	80051d0 <HAL_GetTick>
 80061dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061e0:	f7fe fff6 	bl	80051d0 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b64      	cmp	r3, #100	; 0x64
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e200      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f2:	4b5d      	ldr	r3, [pc, #372]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0f0      	beq.n	80061e0 <HAL_RCC_OscConfig+0xe4>
 80061fe:	e014      	b.n	800622a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006200:	f7fe ffe6 	bl	80051d0 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006208:	f7fe ffe2 	bl	80051d0 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b64      	cmp	r3, #100	; 0x64
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e1ec      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800621a:	4b53      	ldr	r3, [pc, #332]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1f0      	bne.n	8006208 <HAL_RCC_OscConfig+0x10c>
 8006226:	e000      	b.n	800622a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d063      	beq.n	80062fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006236:	4b4c      	ldr	r3, [pc, #304]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f003 030c 	and.w	r3, r3, #12
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00b      	beq.n	800625a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006242:	4b49      	ldr	r3, [pc, #292]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f003 030c 	and.w	r3, r3, #12
 800624a:	2b08      	cmp	r3, #8
 800624c:	d11c      	bne.n	8006288 <HAL_RCC_OscConfig+0x18c>
 800624e:	4b46      	ldr	r3, [pc, #280]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d116      	bne.n	8006288 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800625a:	4b43      	ldr	r3, [pc, #268]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d005      	beq.n	8006272 <HAL_RCC_OscConfig+0x176>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d001      	beq.n	8006272 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e1c0      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006272:	4b3d      	ldr	r3, [pc, #244]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	4939      	ldr	r1, [pc, #228]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 8006282:	4313      	orrs	r3, r2
 8006284:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006286:	e03a      	b.n	80062fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d020      	beq.n	80062d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006290:	4b36      	ldr	r3, [pc, #216]	; (800636c <HAL_RCC_OscConfig+0x270>)
 8006292:	2201      	movs	r2, #1
 8006294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006296:	f7fe ff9b 	bl	80051d0 <HAL_GetTick>
 800629a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800629c:	e008      	b.n	80062b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800629e:	f7fe ff97 	bl	80051d0 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e1a1      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b0:	4b2d      	ldr	r3, [pc, #180]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0f0      	beq.n	800629e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062bc:	4b2a      	ldr	r3, [pc, #168]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	4927      	ldr	r1, [pc, #156]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	600b      	str	r3, [r1, #0]
 80062d0:	e015      	b.n	80062fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062d2:	4b26      	ldr	r3, [pc, #152]	; (800636c <HAL_RCC_OscConfig+0x270>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d8:	f7fe ff7a 	bl	80051d0 <HAL_GetTick>
 80062dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062de:	e008      	b.n	80062f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062e0:	f7fe ff76 	bl	80051d0 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e180      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062f2:	4b1d      	ldr	r3, [pc, #116]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1f0      	bne.n	80062e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d03a      	beq.n	8006380 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d019      	beq.n	8006346 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006312:	4b17      	ldr	r3, [pc, #92]	; (8006370 <HAL_RCC_OscConfig+0x274>)
 8006314:	2201      	movs	r2, #1
 8006316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006318:	f7fe ff5a 	bl	80051d0 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006320:	f7fe ff56 	bl	80051d0 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e160      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006332:	4b0d      	ldr	r3, [pc, #52]	; (8006368 <HAL_RCC_OscConfig+0x26c>)
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0f0      	beq.n	8006320 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800633e:	2001      	movs	r0, #1
 8006340:	f000 fa9c 	bl	800687c <RCC_Delay>
 8006344:	e01c      	b.n	8006380 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006346:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <HAL_RCC_OscConfig+0x274>)
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800634c:	f7fe ff40 	bl	80051d0 <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006352:	e00f      	b.n	8006374 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006354:	f7fe ff3c 	bl	80051d0 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d908      	bls.n	8006374 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e146      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
 8006366:	bf00      	nop
 8006368:	40021000 	.word	0x40021000
 800636c:	42420000 	.word	0x42420000
 8006370:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006374:	4b92      	ldr	r3, [pc, #584]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e9      	bne.n	8006354 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80a6 	beq.w	80064da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800638e:	2300      	movs	r3, #0
 8006390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006392:	4b8b      	ldr	r3, [pc, #556]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10d      	bne.n	80063ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800639e:	4b88      	ldr	r3, [pc, #544]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	4a87      	ldr	r2, [pc, #540]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 80063a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a8:	61d3      	str	r3, [r2, #28]
 80063aa:	4b85      	ldr	r3, [pc, #532]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b2:	60bb      	str	r3, [r7, #8]
 80063b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063b6:	2301      	movs	r3, #1
 80063b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ba:	4b82      	ldr	r3, [pc, #520]	; (80065c4 <HAL_RCC_OscConfig+0x4c8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d118      	bne.n	80063f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063c6:	4b7f      	ldr	r3, [pc, #508]	; (80065c4 <HAL_RCC_OscConfig+0x4c8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a7e      	ldr	r2, [pc, #504]	; (80065c4 <HAL_RCC_OscConfig+0x4c8>)
 80063cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063d2:	f7fe fefd 	bl	80051d0 <HAL_GetTick>
 80063d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063d8:	e008      	b.n	80063ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063da:	f7fe fef9 	bl	80051d0 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b64      	cmp	r3, #100	; 0x64
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e103      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ec:	4b75      	ldr	r3, [pc, #468]	; (80065c4 <HAL_RCC_OscConfig+0x4c8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0f0      	beq.n	80063da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d106      	bne.n	800640e <HAL_RCC_OscConfig+0x312>
 8006400:	4b6f      	ldr	r3, [pc, #444]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	4a6e      	ldr	r2, [pc, #440]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	6213      	str	r3, [r2, #32]
 800640c:	e02d      	b.n	800646a <HAL_RCC_OscConfig+0x36e>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10c      	bne.n	8006430 <HAL_RCC_OscConfig+0x334>
 8006416:	4b6a      	ldr	r3, [pc, #424]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	4a69      	ldr	r2, [pc, #420]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 800641c:	f023 0301 	bic.w	r3, r3, #1
 8006420:	6213      	str	r3, [r2, #32]
 8006422:	4b67      	ldr	r3, [pc, #412]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	4a66      	ldr	r2, [pc, #408]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006428:	f023 0304 	bic.w	r3, r3, #4
 800642c:	6213      	str	r3, [r2, #32]
 800642e:	e01c      	b.n	800646a <HAL_RCC_OscConfig+0x36e>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	2b05      	cmp	r3, #5
 8006436:	d10c      	bne.n	8006452 <HAL_RCC_OscConfig+0x356>
 8006438:	4b61      	ldr	r3, [pc, #388]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	4a60      	ldr	r2, [pc, #384]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 800643e:	f043 0304 	orr.w	r3, r3, #4
 8006442:	6213      	str	r3, [r2, #32]
 8006444:	4b5e      	ldr	r3, [pc, #376]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	4a5d      	ldr	r2, [pc, #372]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 800644a:	f043 0301 	orr.w	r3, r3, #1
 800644e:	6213      	str	r3, [r2, #32]
 8006450:	e00b      	b.n	800646a <HAL_RCC_OscConfig+0x36e>
 8006452:	4b5b      	ldr	r3, [pc, #364]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	4a5a      	ldr	r2, [pc, #360]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	6213      	str	r3, [r2, #32]
 800645e:	4b58      	ldr	r3, [pc, #352]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	4a57      	ldr	r2, [pc, #348]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006464:	f023 0304 	bic.w	r3, r3, #4
 8006468:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d015      	beq.n	800649e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006472:	f7fe fead 	bl	80051d0 <HAL_GetTick>
 8006476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006478:	e00a      	b.n	8006490 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800647a:	f7fe fea9 	bl	80051d0 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	f241 3288 	movw	r2, #5000	; 0x1388
 8006488:	4293      	cmp	r3, r2
 800648a:	d901      	bls.n	8006490 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e0b1      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006490:	4b4b      	ldr	r3, [pc, #300]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0ee      	beq.n	800647a <HAL_RCC_OscConfig+0x37e>
 800649c:	e014      	b.n	80064c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800649e:	f7fe fe97 	bl	80051d0 <HAL_GetTick>
 80064a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064a4:	e00a      	b.n	80064bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064a6:	f7fe fe93 	bl	80051d0 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d901      	bls.n	80064bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e09b      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064bc:	4b40      	ldr	r3, [pc, #256]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1ee      	bne.n	80064a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d105      	bne.n	80064da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ce:	4b3c      	ldr	r3, [pc, #240]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	4a3b      	ldr	r2, [pc, #236]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 80064d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 8087 	beq.w	80065f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064e4:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f003 030c 	and.w	r3, r3, #12
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d061      	beq.n	80065b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d146      	bne.n	8006586 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064f8:	4b33      	ldr	r3, [pc, #204]	; (80065c8 <HAL_RCC_OscConfig+0x4cc>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064fe:	f7fe fe67 	bl	80051d0 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006506:	f7fe fe63 	bl	80051d0 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e06d      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006518:	4b29      	ldr	r3, [pc, #164]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1f0      	bne.n	8006506 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652c:	d108      	bne.n	8006540 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800652e:	4b24      	ldr	r3, [pc, #144]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	4921      	ldr	r1, [pc, #132]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 800653c:	4313      	orrs	r3, r2
 800653e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006540:	4b1f      	ldr	r3, [pc, #124]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a19      	ldr	r1, [r3, #32]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	430b      	orrs	r3, r1
 8006552:	491b      	ldr	r1, [pc, #108]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 8006554:	4313      	orrs	r3, r2
 8006556:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006558:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <HAL_RCC_OscConfig+0x4cc>)
 800655a:	2201      	movs	r2, #1
 800655c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800655e:	f7fe fe37 	bl	80051d0 <HAL_GetTick>
 8006562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006564:	e008      	b.n	8006578 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006566:	f7fe fe33 	bl	80051d0 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2b02      	cmp	r3, #2
 8006572:	d901      	bls.n	8006578 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e03d      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006578:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0f0      	beq.n	8006566 <HAL_RCC_OscConfig+0x46a>
 8006584:	e035      	b.n	80065f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006586:	4b10      	ldr	r3, [pc, #64]	; (80065c8 <HAL_RCC_OscConfig+0x4cc>)
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658c:	f7fe fe20 	bl	80051d0 <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006594:	f7fe fe1c 	bl	80051d0 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e026      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065a6:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <HAL_RCC_OscConfig+0x4c4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f0      	bne.n	8006594 <HAL_RCC_OscConfig+0x498>
 80065b2:	e01e      	b.n	80065f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d107      	bne.n	80065cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e019      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
 80065c0:	40021000 	.word	0x40021000
 80065c4:	40007000 	.word	0x40007000
 80065c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80065cc:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <HAL_RCC_OscConfig+0x500>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d106      	bne.n	80065ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d001      	beq.n	80065f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e000      	b.n	80065f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	40021000 	.word	0x40021000

08006600 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e0d0      	b.n	80067b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006614:	4b6a      	ldr	r3, [pc, #424]	; (80067c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0307 	and.w	r3, r3, #7
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d910      	bls.n	8006644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006622:	4b67      	ldr	r3, [pc, #412]	; (80067c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f023 0207 	bic.w	r2, r3, #7
 800662a:	4965      	ldr	r1, [pc, #404]	; (80067c0 <HAL_RCC_ClockConfig+0x1c0>)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	4313      	orrs	r3, r2
 8006630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006632:	4b63      	ldr	r3, [pc, #396]	; (80067c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	d001      	beq.n	8006644 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e0b8      	b.n	80067b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d020      	beq.n	8006692 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800665c:	4b59      	ldr	r3, [pc, #356]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	4a58      	ldr	r2, [pc, #352]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006662:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006666:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0308 	and.w	r3, r3, #8
 8006670:	2b00      	cmp	r3, #0
 8006672:	d005      	beq.n	8006680 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006674:	4b53      	ldr	r3, [pc, #332]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	4a52      	ldr	r2, [pc, #328]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 800667a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800667e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006680:	4b50      	ldr	r3, [pc, #320]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	494d      	ldr	r1, [pc, #308]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 800668e:	4313      	orrs	r3, r2
 8006690:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d040      	beq.n	8006720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d107      	bne.n	80066b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066a6:	4b47      	ldr	r3, [pc, #284]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d115      	bne.n	80066de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e07f      	b.n	80067b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d107      	bne.n	80066ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066be:	4b41      	ldr	r3, [pc, #260]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d109      	bne.n	80066de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e073      	b.n	80067b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066ce:	4b3d      	ldr	r3, [pc, #244]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e06b      	b.n	80067b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066de:	4b39      	ldr	r3, [pc, #228]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f023 0203 	bic.w	r2, r3, #3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	4936      	ldr	r1, [pc, #216]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066f0:	f7fe fd6e 	bl	80051d0 <HAL_GetTick>
 80066f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066f6:	e00a      	b.n	800670e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066f8:	f7fe fd6a 	bl	80051d0 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	f241 3288 	movw	r2, #5000	; 0x1388
 8006706:	4293      	cmp	r3, r2
 8006708:	d901      	bls.n	800670e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e053      	b.n	80067b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800670e:	4b2d      	ldr	r3, [pc, #180]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f003 020c 	and.w	r2, r3, #12
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	429a      	cmp	r2, r3
 800671e:	d1eb      	bne.n	80066f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006720:	4b27      	ldr	r3, [pc, #156]	; (80067c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d210      	bcs.n	8006750 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800672e:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f023 0207 	bic.w	r2, r3, #7
 8006736:	4922      	ldr	r1, [pc, #136]	; (80067c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	4313      	orrs	r3, r2
 800673c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800673e:	4b20      	ldr	r3, [pc, #128]	; (80067c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	429a      	cmp	r2, r3
 800674a:	d001      	beq.n	8006750 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e032      	b.n	80067b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b00      	cmp	r3, #0
 800675a:	d008      	beq.n	800676e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800675c:	4b19      	ldr	r3, [pc, #100]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	4916      	ldr	r1, [pc, #88]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 800676a:	4313      	orrs	r3, r2
 800676c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0308 	and.w	r3, r3, #8
 8006776:	2b00      	cmp	r3, #0
 8006778:	d009      	beq.n	800678e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800677a:	4b12      	ldr	r3, [pc, #72]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	490e      	ldr	r1, [pc, #56]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 800678a:	4313      	orrs	r3, r2
 800678c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800678e:	f000 f821 	bl	80067d4 <HAL_RCC_GetSysClockFreq>
 8006792:	4602      	mov	r2, r0
 8006794:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	091b      	lsrs	r3, r3, #4
 800679a:	f003 030f 	and.w	r3, r3, #15
 800679e:	490a      	ldr	r1, [pc, #40]	; (80067c8 <HAL_RCC_ClockConfig+0x1c8>)
 80067a0:	5ccb      	ldrb	r3, [r1, r3]
 80067a2:	fa22 f303 	lsr.w	r3, r2, r3
 80067a6:	4a09      	ldr	r2, [pc, #36]	; (80067cc <HAL_RCC_ClockConfig+0x1cc>)
 80067a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80067aa:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <HAL_RCC_ClockConfig+0x1d0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fccc 	bl	800514c <HAL_InitTick>

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	40022000 	.word	0x40022000
 80067c4:	40021000 	.word	0x40021000
 80067c8:	08007bc4 	.word	0x08007bc4
 80067cc:	20000000 	.word	0x20000000
 80067d0:	20000004 	.word	0x20000004

080067d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	2300      	movs	r3, #0
 80067e0:	60bb      	str	r3, [r7, #8]
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	2300      	movs	r3, #0
 80067e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80067ee:	4b1e      	ldr	r3, [pc, #120]	; (8006868 <HAL_RCC_GetSysClockFreq+0x94>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f003 030c 	and.w	r3, r3, #12
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d002      	beq.n	8006804 <HAL_RCC_GetSysClockFreq+0x30>
 80067fe:	2b08      	cmp	r3, #8
 8006800:	d003      	beq.n	800680a <HAL_RCC_GetSysClockFreq+0x36>
 8006802:	e027      	b.n	8006854 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006804:	4b19      	ldr	r3, [pc, #100]	; (800686c <HAL_RCC_GetSysClockFreq+0x98>)
 8006806:	613b      	str	r3, [r7, #16]
      break;
 8006808:	e027      	b.n	800685a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	0c9b      	lsrs	r3, r3, #18
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	4a17      	ldr	r2, [pc, #92]	; (8006870 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006814:	5cd3      	ldrb	r3, [r2, r3]
 8006816:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d010      	beq.n	8006844 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006822:	4b11      	ldr	r3, [pc, #68]	; (8006868 <HAL_RCC_GetSysClockFreq+0x94>)
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	0c5b      	lsrs	r3, r3, #17
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	4a11      	ldr	r2, [pc, #68]	; (8006874 <HAL_RCC_GetSysClockFreq+0xa0>)
 800682e:	5cd3      	ldrb	r3, [r2, r3]
 8006830:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a0d      	ldr	r2, [pc, #52]	; (800686c <HAL_RCC_GetSysClockFreq+0x98>)
 8006836:	fb03 f202 	mul.w	r2, r3, r2
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	e004      	b.n	800684e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a0c      	ldr	r2, [pc, #48]	; (8006878 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006848:	fb02 f303 	mul.w	r3, r2, r3
 800684c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	613b      	str	r3, [r7, #16]
      break;
 8006852:	e002      	b.n	800685a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006854:	4b05      	ldr	r3, [pc, #20]	; (800686c <HAL_RCC_GetSysClockFreq+0x98>)
 8006856:	613b      	str	r3, [r7, #16]
      break;
 8006858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800685a:	693b      	ldr	r3, [r7, #16]
}
 800685c:	4618      	mov	r0, r3
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	bc80      	pop	{r7}
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40021000 	.word	0x40021000
 800686c:	007a1200 	.word	0x007a1200
 8006870:	08007bd4 	.word	0x08007bd4
 8006874:	08007be4 	.word	0x08007be4
 8006878:	003d0900 	.word	0x003d0900

0800687c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006884:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <RCC_Delay+0x34>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a0a      	ldr	r2, [pc, #40]	; (80068b4 <RCC_Delay+0x38>)
 800688a:	fba2 2303 	umull	r2, r3, r2, r3
 800688e:	0a5b      	lsrs	r3, r3, #9
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	fb02 f303 	mul.w	r3, r2, r3
 8006896:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006898:	bf00      	nop
  }
  while (Delay --);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	1e5a      	subs	r2, r3, #1
 800689e:	60fa      	str	r2, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1f9      	bne.n	8006898 <RCC_Delay+0x1c>
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr
 80068b0:	20000000 	.word	0x20000000
 80068b4:	10624dd3 	.word	0x10624dd3

080068b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d07d      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80068d4:	2300      	movs	r3, #0
 80068d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d8:	4b4f      	ldr	r3, [pc, #316]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10d      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068e4:	4b4c      	ldr	r3, [pc, #304]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	4a4b      	ldr	r2, [pc, #300]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ee:	61d3      	str	r3, [r2, #28]
 80068f0:	4b49      	ldr	r3, [pc, #292]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f8:	60bb      	str	r3, [r7, #8]
 80068fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068fc:	2301      	movs	r3, #1
 80068fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006900:	4b46      	ldr	r3, [pc, #280]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006908:	2b00      	cmp	r3, #0
 800690a:	d118      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800690c:	4b43      	ldr	r3, [pc, #268]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a42      	ldr	r2, [pc, #264]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006916:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006918:	f7fe fc5a 	bl	80051d0 <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800691e:	e008      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006920:	f7fe fc56 	bl	80051d0 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b64      	cmp	r3, #100	; 0x64
 800692c:	d901      	bls.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e06d      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006932:	4b3a      	ldr	r3, [pc, #232]	; (8006a1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0f0      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800693e:	4b36      	ldr	r3, [pc, #216]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006946:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d02e      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	429a      	cmp	r2, r3
 800695a:	d027      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800695c:	4b2e      	ldr	r3, [pc, #184]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006964:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006966:	4b2e      	ldr	r3, [pc, #184]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006968:	2201      	movs	r2, #1
 800696a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800696c:	4b2c      	ldr	r3, [pc, #176]	; (8006a20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006972:	4a29      	ldr	r2, [pc, #164]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d014      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006982:	f7fe fc25 	bl	80051d0 <HAL_GetTick>
 8006986:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006988:	e00a      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800698a:	f7fe fc21 	bl	80051d0 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	f241 3288 	movw	r2, #5000	; 0x1388
 8006998:	4293      	cmp	r3, r2
 800699a:	d901      	bls.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e036      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a0:	4b1d      	ldr	r3, [pc, #116]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0ee      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069ac:	4b1a      	ldr	r3, [pc, #104]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	4917      	ldr	r1, [pc, #92]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d105      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069c4:	4b14      	ldr	r3, [pc, #80]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	4a13      	ldr	r2, [pc, #76]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069dc:	4b0e      	ldr	r3, [pc, #56]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	490b      	ldr	r1, [pc, #44]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0310 	and.w	r3, r3, #16
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d008      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069fa:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	4904      	ldr	r1, [pc, #16]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	40007000 	.word	0x40007000
 8006a20:	42420440 	.word	0x42420440

08006a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e041      	b.n	8006aba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d106      	bne.n	8006a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fd fb5c 	bl	8004108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4619      	mov	r1, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	f000 fc7a 	bl	800735c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
	...

08006ac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d001      	beq.n	8006adc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e03a      	b.n	8006b52 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68da      	ldr	r2, [r3, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0201 	orr.w	r2, r2, #1
 8006af2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <HAL_TIM_Base_Start_IT+0x98>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d00e      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x58>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b06:	d009      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x58>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a14      	ldr	r2, [pc, #80]	; (8006b60 <HAL_TIM_Base_Start_IT+0x9c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d004      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x58>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a13      	ldr	r2, [pc, #76]	; (8006b64 <HAL_TIM_Base_Start_IT+0xa0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d111      	bne.n	8006b40 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b06      	cmp	r3, #6
 8006b2c:	d010      	beq.n	8006b50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b3e:	e007      	b.n	8006b50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr
 8006b5c:	40012c00 	.word	0x40012c00
 8006b60:	40000400 	.word	0x40000400
 8006b64:	40000800 	.word	0x40000800

08006b68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e041      	b.n	8006bfe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f839 	bl	8006c06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	f000 fbd8 	bl	800735c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c0e:	bf00      	nop
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr

08006c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d109      	bne.n	8006c3c <HAL_TIM_PWM_Start+0x24>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	bf14      	ite	ne
 8006c34:	2301      	movne	r3, #1
 8006c36:	2300      	moveq	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	e022      	b.n	8006c82 <HAL_TIM_PWM_Start+0x6a>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d109      	bne.n	8006c56 <HAL_TIM_PWM_Start+0x3e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	bf14      	ite	ne
 8006c4e:	2301      	movne	r3, #1
 8006c50:	2300      	moveq	r3, #0
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	e015      	b.n	8006c82 <HAL_TIM_PWM_Start+0x6a>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d109      	bne.n	8006c70 <HAL_TIM_PWM_Start+0x58>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	bf14      	ite	ne
 8006c68:	2301      	movne	r3, #1
 8006c6a:	2300      	moveq	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	e008      	b.n	8006c82 <HAL_TIM_PWM_Start+0x6a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	bf14      	ite	ne
 8006c7c:	2301      	movne	r3, #1
 8006c7e:	2300      	moveq	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e05e      	b.n	8006d48 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d104      	bne.n	8006c9a <HAL_TIM_PWM_Start+0x82>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c98:	e013      	b.n	8006cc2 <HAL_TIM_PWM_Start+0xaa>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d104      	bne.n	8006caa <HAL_TIM_PWM_Start+0x92>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ca8:	e00b      	b.n	8006cc2 <HAL_TIM_PWM_Start+0xaa>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d104      	bne.n	8006cba <HAL_TIM_PWM_Start+0xa2>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cb8:	e003      	b.n	8006cc2 <HAL_TIM_PWM_Start+0xaa>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 fe57 	bl	800797e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1e      	ldr	r2, [pc, #120]	; (8006d50 <HAL_TIM_PWM_Start+0x138>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d107      	bne.n	8006cea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ce8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a18      	ldr	r2, [pc, #96]	; (8006d50 <HAL_TIM_PWM_Start+0x138>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d00e      	beq.n	8006d12 <HAL_TIM_PWM_Start+0xfa>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cfc:	d009      	beq.n	8006d12 <HAL_TIM_PWM_Start+0xfa>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a14      	ldr	r2, [pc, #80]	; (8006d54 <HAL_TIM_PWM_Start+0x13c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d004      	beq.n	8006d12 <HAL_TIM_PWM_Start+0xfa>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a12      	ldr	r2, [pc, #72]	; (8006d58 <HAL_TIM_PWM_Start+0x140>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d111      	bne.n	8006d36 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b06      	cmp	r3, #6
 8006d22:	d010      	beq.n	8006d46 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d34:	e007      	b.n	8006d46 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0201 	orr.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	40012c00 	.word	0x40012c00
 8006d54:	40000400 	.word	0x40000400
 8006d58:	40000800 	.word	0x40000800

08006d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d122      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d11b      	bne.n	8006db8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f06f 0202 	mvn.w	r2, #2
 8006d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fac1 	bl	8007326 <HAL_TIM_IC_CaptureCallback>
 8006da4:	e005      	b.n	8006db2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fab4 	bl	8007314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fac3 	bl	8007338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f003 0304 	and.w	r3, r3, #4
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d122      	bne.n	8006e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b04      	cmp	r3, #4
 8006dd2:	d11b      	bne.n	8006e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f06f 0204 	mvn.w	r2, #4
 8006ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa97 	bl	8007326 <HAL_TIM_IC_CaptureCallback>
 8006df8:	e005      	b.n	8006e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa8a 	bl	8007314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fa99 	bl	8007338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	f003 0308 	and.w	r3, r3, #8
 8006e16:	2b08      	cmp	r3, #8
 8006e18:	d122      	bne.n	8006e60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d11b      	bne.n	8006e60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f06f 0208 	mvn.w	r2, #8
 8006e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2204      	movs	r2, #4
 8006e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa6d 	bl	8007326 <HAL_TIM_IC_CaptureCallback>
 8006e4c:	e005      	b.n	8006e5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fa60 	bl	8007314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fa6f 	bl	8007338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	2b10      	cmp	r3, #16
 8006e6c:	d122      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	2b10      	cmp	r3, #16
 8006e7a:	d11b      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f06f 0210 	mvn.w	r2, #16
 8006e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2208      	movs	r2, #8
 8006e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa43 	bl	8007326 <HAL_TIM_IC_CaptureCallback>
 8006ea0:	e005      	b.n	8006eae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa36 	bl	8007314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fa45 	bl	8007338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d10e      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d107      	bne.n	8006ee0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0201 	mvn.w	r2, #1
 8006ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fa11 	bl	8007302 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eea:	2b80      	cmp	r3, #128	; 0x80
 8006eec:	d10e      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef8:	2b80      	cmp	r3, #128	; 0x80
 8006efa:	d107      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fdc5 	bl	8007a96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f16:	2b40      	cmp	r3, #64	; 0x40
 8006f18:	d10e      	bne.n	8006f38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d107      	bne.n	8006f38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fa09 	bl	800734a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d10e      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d107      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0220 	mvn.w	r2, #32
 8006f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fd90 	bl	8007a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d101      	bne.n	8006f8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f86:	2302      	movs	r3, #2
 8006f88:	e0ae      	b.n	80070e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b0c      	cmp	r3, #12
 8006f96:	f200 809f 	bhi.w	80070d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f9a:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08006fd5 	.word	0x08006fd5
 8006fa4:	080070d9 	.word	0x080070d9
 8006fa8:	080070d9 	.word	0x080070d9
 8006fac:	080070d9 	.word	0x080070d9
 8006fb0:	08007015 	.word	0x08007015
 8006fb4:	080070d9 	.word	0x080070d9
 8006fb8:	080070d9 	.word	0x080070d9
 8006fbc:	080070d9 	.word	0x080070d9
 8006fc0:	08007057 	.word	0x08007057
 8006fc4:	080070d9 	.word	0x080070d9
 8006fc8:	080070d9 	.word	0x080070d9
 8006fcc:	080070d9 	.word	0x080070d9
 8006fd0:	08007097 	.word	0x08007097
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fa20 	bl	8007420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699a      	ldr	r2, [r3, #24]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0208 	orr.w	r2, r2, #8
 8006fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699a      	ldr	r2, [r3, #24]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0204 	bic.w	r2, r2, #4
 8006ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6999      	ldr	r1, [r3, #24]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	619a      	str	r2, [r3, #24]
      break;
 8007012:	e064      	b.n	80070de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68b9      	ldr	r1, [r7, #8]
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fa66 	bl	80074ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	699a      	ldr	r2, [r3, #24]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800702e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699a      	ldr	r2, [r3, #24]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800703e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6999      	ldr	r1, [r3, #24]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	021a      	lsls	r2, r3, #8
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	619a      	str	r2, [r3, #24]
      break;
 8007054:	e043      	b.n	80070de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68b9      	ldr	r1, [r7, #8]
 800705c:	4618      	mov	r0, r3
 800705e:	f000 faaf 	bl	80075c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69da      	ldr	r2, [r3, #28]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f042 0208 	orr.w	r2, r2, #8
 8007070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69da      	ldr	r2, [r3, #28]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0204 	bic.w	r2, r2, #4
 8007080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69d9      	ldr	r1, [r3, #28]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	61da      	str	r2, [r3, #28]
      break;
 8007094:	e023      	b.n	80070de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68b9      	ldr	r1, [r7, #8]
 800709c:	4618      	mov	r0, r3
 800709e:	f000 faf9 	bl	8007694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	69da      	ldr	r2, [r3, #28]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69d9      	ldr	r1, [r3, #28]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	021a      	lsls	r2, r3, #8
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	61da      	str	r2, [r3, #28]
      break;
 80070d6:	e002      	b.n	80070de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	75fb      	strb	r3, [r7, #23]
      break;
 80070dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <HAL_TIM_ConfigClockSource+0x1c>
 8007108:	2302      	movs	r3, #2
 800710a:	e0b4      	b.n	8007276 <HAL_TIM_ConfigClockSource+0x186>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800712a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007132:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007144:	d03e      	beq.n	80071c4 <HAL_TIM_ConfigClockSource+0xd4>
 8007146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800714a:	f200 8087 	bhi.w	800725c <HAL_TIM_ConfigClockSource+0x16c>
 800714e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007152:	f000 8086 	beq.w	8007262 <HAL_TIM_ConfigClockSource+0x172>
 8007156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715a:	d87f      	bhi.n	800725c <HAL_TIM_ConfigClockSource+0x16c>
 800715c:	2b70      	cmp	r3, #112	; 0x70
 800715e:	d01a      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0xa6>
 8007160:	2b70      	cmp	r3, #112	; 0x70
 8007162:	d87b      	bhi.n	800725c <HAL_TIM_ConfigClockSource+0x16c>
 8007164:	2b60      	cmp	r3, #96	; 0x60
 8007166:	d050      	beq.n	800720a <HAL_TIM_ConfigClockSource+0x11a>
 8007168:	2b60      	cmp	r3, #96	; 0x60
 800716a:	d877      	bhi.n	800725c <HAL_TIM_ConfigClockSource+0x16c>
 800716c:	2b50      	cmp	r3, #80	; 0x50
 800716e:	d03c      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0xfa>
 8007170:	2b50      	cmp	r3, #80	; 0x50
 8007172:	d873      	bhi.n	800725c <HAL_TIM_ConfigClockSource+0x16c>
 8007174:	2b40      	cmp	r3, #64	; 0x40
 8007176:	d058      	beq.n	800722a <HAL_TIM_ConfigClockSource+0x13a>
 8007178:	2b40      	cmp	r3, #64	; 0x40
 800717a:	d86f      	bhi.n	800725c <HAL_TIM_ConfigClockSource+0x16c>
 800717c:	2b30      	cmp	r3, #48	; 0x30
 800717e:	d064      	beq.n	800724a <HAL_TIM_ConfigClockSource+0x15a>
 8007180:	2b30      	cmp	r3, #48	; 0x30
 8007182:	d86b      	bhi.n	800725c <HAL_TIM_ConfigClockSource+0x16c>
 8007184:	2b20      	cmp	r3, #32
 8007186:	d060      	beq.n	800724a <HAL_TIM_ConfigClockSource+0x15a>
 8007188:	2b20      	cmp	r3, #32
 800718a:	d867      	bhi.n	800725c <HAL_TIM_ConfigClockSource+0x16c>
 800718c:	2b00      	cmp	r3, #0
 800718e:	d05c      	beq.n	800724a <HAL_TIM_ConfigClockSource+0x15a>
 8007190:	2b10      	cmp	r3, #16
 8007192:	d05a      	beq.n	800724a <HAL_TIM_ConfigClockSource+0x15a>
 8007194:	e062      	b.n	800725c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6818      	ldr	r0, [r3, #0]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	6899      	ldr	r1, [r3, #8]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f000 fbcb 	bl	8007940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	609a      	str	r2, [r3, #8]
      break;
 80071c2:	e04f      	b.n	8007264 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6818      	ldr	r0, [r3, #0]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	6899      	ldr	r1, [r3, #8]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f000 fbb4 	bl	8007940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689a      	ldr	r2, [r3, #8]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071e6:	609a      	str	r2, [r3, #8]
      break;
 80071e8:	e03c      	b.n	8007264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6818      	ldr	r0, [r3, #0]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	6859      	ldr	r1, [r3, #4]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	461a      	mov	r2, r3
 80071f8:	f000 fb2b 	bl	8007852 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2150      	movs	r1, #80	; 0x50
 8007202:	4618      	mov	r0, r3
 8007204:	f000 fb82 	bl	800790c <TIM_ITRx_SetConfig>
      break;
 8007208:	e02c      	b.n	8007264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	6859      	ldr	r1, [r3, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	461a      	mov	r2, r3
 8007218:	f000 fb49 	bl	80078ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2160      	movs	r1, #96	; 0x60
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fb72 	bl	800790c <TIM_ITRx_SetConfig>
      break;
 8007228:	e01c      	b.n	8007264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6818      	ldr	r0, [r3, #0]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	6859      	ldr	r1, [r3, #4]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	461a      	mov	r2, r3
 8007238:	f000 fb0b 	bl	8007852 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2140      	movs	r1, #64	; 0x40
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fb62 	bl	800790c <TIM_ITRx_SetConfig>
      break;
 8007248:	e00c      	b.n	8007264 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4619      	mov	r1, r3
 8007254:	4610      	mov	r0, r2
 8007256:	f000 fb59 	bl	800790c <TIM_ITRx_SetConfig>
      break;
 800725a:	e003      	b.n	8007264 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	73fb      	strb	r3, [r7, #15]
      break;
 8007260:	e000      	b.n	8007264 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007262:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800728e:	2b01      	cmp	r3, #1
 8007290:	d101      	bne.n	8007296 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007292:	2302      	movs	r3, #2
 8007294:	e031      	b.n	80072fa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2202      	movs	r2, #2
 80072a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fa41 	bl	8007730 <TIM_SlaveTimer_SetConfig>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d009      	beq.n	80072c8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e018      	b.n	80072fa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072d6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072e6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	bc80      	pop	{r7}
 8007312:	4770      	bx	lr

08007314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	bc80      	pop	{r7}
 8007324:	4770      	bx	lr

08007326 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	bc80      	pop	{r7}
 8007336:	4770      	bx	lr

08007338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	bc80      	pop	{r7}
 8007348:	4770      	bx	lr

0800734a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	bc80      	pop	{r7}
 800735a:	4770      	bx	lr

0800735c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a29      	ldr	r2, [pc, #164]	; (8007414 <TIM_Base_SetConfig+0xb8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00b      	beq.n	800738c <TIM_Base_SetConfig+0x30>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800737a:	d007      	beq.n	800738c <TIM_Base_SetConfig+0x30>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a26      	ldr	r2, [pc, #152]	; (8007418 <TIM_Base_SetConfig+0xbc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d003      	beq.n	800738c <TIM_Base_SetConfig+0x30>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a25      	ldr	r2, [pc, #148]	; (800741c <TIM_Base_SetConfig+0xc0>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d108      	bne.n	800739e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a1c      	ldr	r2, [pc, #112]	; (8007414 <TIM_Base_SetConfig+0xb8>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00b      	beq.n	80073be <TIM_Base_SetConfig+0x62>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ac:	d007      	beq.n	80073be <TIM_Base_SetConfig+0x62>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a19      	ldr	r2, [pc, #100]	; (8007418 <TIM_Base_SetConfig+0xbc>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d003      	beq.n	80073be <TIM_Base_SetConfig+0x62>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a18      	ldr	r2, [pc, #96]	; (800741c <TIM_Base_SetConfig+0xc0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d108      	bne.n	80073d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a07      	ldr	r2, [pc, #28]	; (8007414 <TIM_Base_SetConfig+0xb8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d103      	bne.n	8007404 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	691a      	ldr	r2, [r3, #16]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	615a      	str	r2, [r3, #20]
}
 800740a:	bf00      	nop
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr
 8007414:	40012c00 	.word	0x40012c00
 8007418:	40000400 	.word	0x40000400
 800741c:	40000800 	.word	0x40000800

08007420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	f023 0201 	bic.w	r2, r3, #1
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f023 0303 	bic.w	r3, r3, #3
 8007456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f023 0302 	bic.w	r3, r3, #2
 8007468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a1c      	ldr	r2, [pc, #112]	; (80074e8 <TIM_OC1_SetConfig+0xc8>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d10c      	bne.n	8007496 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f023 0308 	bic.w	r3, r3, #8
 8007482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f023 0304 	bic.w	r3, r3, #4
 8007494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a13      	ldr	r2, [pc, #76]	; (80074e8 <TIM_OC1_SetConfig+0xc8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d111      	bne.n	80074c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	4313      	orrs	r3, r2
 80074c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	621a      	str	r2, [r3, #32]
}
 80074dc:	bf00      	nop
 80074de:	371c      	adds	r7, #28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bc80      	pop	{r7}
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40012c00 	.word	0x40012c00

080074ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	f023 0210 	bic.w	r2, r3, #16
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800751a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	021b      	lsls	r3, r3, #8
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4313      	orrs	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f023 0320 	bic.w	r3, r3, #32
 8007536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	4313      	orrs	r3, r2
 8007542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a1d      	ldr	r2, [pc, #116]	; (80075bc <TIM_OC2_SetConfig+0xd0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d10d      	bne.n	8007568 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007566:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a14      	ldr	r2, [pc, #80]	; (80075bc <TIM_OC2_SetConfig+0xd0>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d113      	bne.n	8007598 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007576:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800757e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	4313      	orrs	r3, r2
 800758a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	4313      	orrs	r3, r2
 8007596:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	621a      	str	r2, [r3, #32]
}
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr
 80075bc:	40012c00 	.word	0x40012c00

080075c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 0303 	bic.w	r3, r3, #3
 80075f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	4313      	orrs	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	021b      	lsls	r3, r3, #8
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	4313      	orrs	r3, r2
 8007614:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a1d      	ldr	r2, [pc, #116]	; (8007690 <TIM_OC3_SetConfig+0xd0>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d10d      	bne.n	800763a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	021b      	lsls	r3, r3, #8
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	4313      	orrs	r3, r2
 8007630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a14      	ldr	r2, [pc, #80]	; (8007690 <TIM_OC3_SetConfig+0xd0>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d113      	bne.n	800766a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	011b      	lsls	r3, r3, #4
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	621a      	str	r2, [r3, #32]
}
 8007684:	bf00      	nop
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	40012c00 	.word	0x40012c00

08007694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	031b      	lsls	r3, r3, #12
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a0f      	ldr	r2, [pc, #60]	; (800772c <TIM_OC4_SetConfig+0x98>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d109      	bne.n	8007708 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	019b      	lsls	r3, r3, #6
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	621a      	str	r2, [r3, #32]
}
 8007722:	bf00      	nop
 8007724:	371c      	adds	r7, #28
 8007726:	46bd      	mov	sp, r7
 8007728:	bc80      	pop	{r7}
 800772a:	4770      	bx	lr
 800772c:	40012c00 	.word	0x40012c00

08007730 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f023 0307 	bic.w	r3, r3, #7
 800775e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	4313      	orrs	r3, r2
 8007768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	2b70      	cmp	r3, #112	; 0x70
 8007778:	d01a      	beq.n	80077b0 <TIM_SlaveTimer_SetConfig+0x80>
 800777a:	2b70      	cmp	r3, #112	; 0x70
 800777c:	d860      	bhi.n	8007840 <TIM_SlaveTimer_SetConfig+0x110>
 800777e:	2b60      	cmp	r3, #96	; 0x60
 8007780:	d054      	beq.n	800782c <TIM_SlaveTimer_SetConfig+0xfc>
 8007782:	2b60      	cmp	r3, #96	; 0x60
 8007784:	d85c      	bhi.n	8007840 <TIM_SlaveTimer_SetConfig+0x110>
 8007786:	2b50      	cmp	r3, #80	; 0x50
 8007788:	d046      	beq.n	8007818 <TIM_SlaveTimer_SetConfig+0xe8>
 800778a:	2b50      	cmp	r3, #80	; 0x50
 800778c:	d858      	bhi.n	8007840 <TIM_SlaveTimer_SetConfig+0x110>
 800778e:	2b40      	cmp	r3, #64	; 0x40
 8007790:	d019      	beq.n	80077c6 <TIM_SlaveTimer_SetConfig+0x96>
 8007792:	2b40      	cmp	r3, #64	; 0x40
 8007794:	d854      	bhi.n	8007840 <TIM_SlaveTimer_SetConfig+0x110>
 8007796:	2b30      	cmp	r3, #48	; 0x30
 8007798:	d055      	beq.n	8007846 <TIM_SlaveTimer_SetConfig+0x116>
 800779a:	2b30      	cmp	r3, #48	; 0x30
 800779c:	d850      	bhi.n	8007840 <TIM_SlaveTimer_SetConfig+0x110>
 800779e:	2b20      	cmp	r3, #32
 80077a0:	d051      	beq.n	8007846 <TIM_SlaveTimer_SetConfig+0x116>
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d84c      	bhi.n	8007840 <TIM_SlaveTimer_SetConfig+0x110>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d04d      	beq.n	8007846 <TIM_SlaveTimer_SetConfig+0x116>
 80077aa:	2b10      	cmp	r3, #16
 80077ac:	d04b      	beq.n	8007846 <TIM_SlaveTimer_SetConfig+0x116>
 80077ae:	e047      	b.n	8007840 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6818      	ldr	r0, [r3, #0]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	68d9      	ldr	r1, [r3, #12]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	f000 f8be 	bl	8007940 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80077c4:	e040      	b.n	8007848 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b05      	cmp	r3, #5
 80077cc:	d101      	bne.n	80077d2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e03b      	b.n	800784a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6a1a      	ldr	r2, [r3, #32]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 0201 	bic.w	r2, r2, #1
 80077e8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077f8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	011b      	lsls	r3, r3, #4
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	4313      	orrs	r3, r2
 8007804:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	621a      	str	r2, [r3, #32]
      break;
 8007816:	e017      	b.n	8007848 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	6899      	ldr	r1, [r3, #8]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	461a      	mov	r2, r3
 8007826:	f000 f814 	bl	8007852 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800782a:	e00d      	b.n	8007848 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	6899      	ldr	r1, [r3, #8]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	461a      	mov	r2, r3
 800783a:	f000 f838 	bl	80078ae <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800783e:	e003      	b.n	8007848 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	75fb      	strb	r3, [r7, #23]
      break;
 8007844:	e000      	b.n	8007848 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007846:	bf00      	nop
  }

  return status;
 8007848:	7dfb      	ldrb	r3, [r7, #23]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007852:	b480      	push	{r7}
 8007854:	b087      	sub	sp, #28
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	f023 0201 	bic.w	r2, r3, #1
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800787c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	4313      	orrs	r3, r2
 8007886:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f023 030a 	bic.w	r3, r3, #10
 800788e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	4313      	orrs	r3, r2
 8007896:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	621a      	str	r2, [r3, #32]
}
 80078a4:	bf00      	nop
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr

080078ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b087      	sub	sp, #28
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6a1b      	ldr	r3, [r3, #32]
 80078c4:	f023 0210 	bic.w	r2, r3, #16
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	031b      	lsls	r3, r3, #12
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	011b      	lsls	r3, r3, #4
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	621a      	str	r2, [r3, #32]
}
 8007902:	bf00      	nop
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	bc80      	pop	{r7}
 800790a:	4770      	bx	lr

0800790c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007922:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	f043 0307 	orr.w	r3, r3, #7
 800792e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	609a      	str	r2, [r3, #8]
}
 8007936:	bf00      	nop
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	bc80      	pop	{r7}
 800793e:	4770      	bx	lr

08007940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
 800794c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800795a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	021a      	lsls	r2, r3, #8
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	431a      	orrs	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4313      	orrs	r3, r2
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	4313      	orrs	r3, r2
 800796c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	609a      	str	r2, [r3, #8]
}
 8007974:	bf00      	nop
 8007976:	371c      	adds	r7, #28
 8007978:	46bd      	mov	sp, r7
 800797a:	bc80      	pop	{r7}
 800797c:	4770      	bx	lr

0800797e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800797e:	b480      	push	{r7}
 8007980:	b087      	sub	sp, #28
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f003 031f 	and.w	r3, r3, #31
 8007990:	2201      	movs	r2, #1
 8007992:	fa02 f303 	lsl.w	r3, r2, r3
 8007996:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6a1a      	ldr	r2, [r3, #32]
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	43db      	mvns	r3, r3
 80079a0:	401a      	ands	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6a1a      	ldr	r2, [r3, #32]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f003 031f 	and.w	r3, r3, #31
 80079b0:	6879      	ldr	r1, [r7, #4]
 80079b2:	fa01 f303 	lsl.w	r3, r1, r3
 80079b6:	431a      	orrs	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	621a      	str	r2, [r3, #32]
}
 80079bc:	bf00      	nop
 80079be:	371c      	adds	r7, #28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bc80      	pop	{r7}
 80079c4:	4770      	bx	lr
	...

080079c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d101      	bne.n	80079e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079dc:	2302      	movs	r3, #2
 80079de:	e046      	b.n	8007a6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a16      	ldr	r2, [pc, #88]	; (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d00e      	beq.n	8007a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a2c:	d009      	beq.n	8007a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a12      	ldr	r2, [pc, #72]	; (8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d004      	beq.n	8007a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a10      	ldr	r2, [pc, #64]	; (8007a80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d10c      	bne.n	8007a5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bc80      	pop	{r7}
 8007a76:	4770      	bx	lr
 8007a78:	40012c00 	.word	0x40012c00
 8007a7c:	40000400 	.word	0x40000400
 8007a80:	40000800 	.word	0x40000800

08007a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bc80      	pop	{r7}
 8007a94:	4770      	bx	lr

08007a96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bc80      	pop	{r7}
 8007aa6:	4770      	bx	lr

08007aa8 <__libc_init_array>:
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	2600      	movs	r6, #0
 8007aac:	4d0c      	ldr	r5, [pc, #48]	; (8007ae0 <__libc_init_array+0x38>)
 8007aae:	4c0d      	ldr	r4, [pc, #52]	; (8007ae4 <__libc_init_array+0x3c>)
 8007ab0:	1b64      	subs	r4, r4, r5
 8007ab2:	10a4      	asrs	r4, r4, #2
 8007ab4:	42a6      	cmp	r6, r4
 8007ab6:	d109      	bne.n	8007acc <__libc_init_array+0x24>
 8007ab8:	f000 f86a 	bl	8007b90 <_init>
 8007abc:	2600      	movs	r6, #0
 8007abe:	4d0a      	ldr	r5, [pc, #40]	; (8007ae8 <__libc_init_array+0x40>)
 8007ac0:	4c0a      	ldr	r4, [pc, #40]	; (8007aec <__libc_init_array+0x44>)
 8007ac2:	1b64      	subs	r4, r4, r5
 8007ac4:	10a4      	asrs	r4, r4, #2
 8007ac6:	42a6      	cmp	r6, r4
 8007ac8:	d105      	bne.n	8007ad6 <__libc_init_array+0x2e>
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad0:	4798      	blx	r3
 8007ad2:	3601      	adds	r6, #1
 8007ad4:	e7ee      	b.n	8007ab4 <__libc_init_array+0xc>
 8007ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ada:	4798      	blx	r3
 8007adc:	3601      	adds	r6, #1
 8007ade:	e7f2      	b.n	8007ac6 <__libc_init_array+0x1e>
 8007ae0:	08007be8 	.word	0x08007be8
 8007ae4:	08007be8 	.word	0x08007be8
 8007ae8:	08007be8 	.word	0x08007be8
 8007aec:	08007bec 	.word	0x08007bec

08007af0 <memset>:
 8007af0:	4603      	mov	r3, r0
 8007af2:	4402      	add	r2, r0
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d100      	bne.n	8007afa <memset+0xa>
 8007af8:	4770      	bx	lr
 8007afa:	f803 1b01 	strb.w	r1, [r3], #1
 8007afe:	e7f9      	b.n	8007af4 <memset+0x4>

08007b00 <round>:
 8007b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b02:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007b06:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8007b0a:	2c13      	cmp	r4, #19
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4606      	mov	r6, r0
 8007b12:	460d      	mov	r5, r1
 8007b14:	dc19      	bgt.n	8007b4a <round+0x4a>
 8007b16:	2c00      	cmp	r4, #0
 8007b18:	da09      	bge.n	8007b2e <round+0x2e>
 8007b1a:	3401      	adds	r4, #1
 8007b1c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007b20:	d103      	bne.n	8007b2a <round+0x2a>
 8007b22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007b26:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	e02a      	b.n	8007b84 <round+0x84>
 8007b2e:	4917      	ldr	r1, [pc, #92]	; (8007b8c <round+0x8c>)
 8007b30:	4121      	asrs	r1, r4
 8007b32:	ea03 0001 	and.w	r0, r3, r1
 8007b36:	4302      	orrs	r2, r0
 8007b38:	d010      	beq.n	8007b5c <round+0x5c>
 8007b3a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007b3e:	fa42 f404 	asr.w	r4, r2, r4
 8007b42:	4423      	add	r3, r4
 8007b44:	ea23 0301 	bic.w	r3, r3, r1
 8007b48:	e7ef      	b.n	8007b2a <round+0x2a>
 8007b4a:	2c33      	cmp	r4, #51	; 0x33
 8007b4c:	dd09      	ble.n	8007b62 <round+0x62>
 8007b4e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007b52:	d103      	bne.n	8007b5c <round+0x5c>
 8007b54:	f7f8 fbb4 	bl	80002c0 <__adddf3>
 8007b58:	4606      	mov	r6, r0
 8007b5a:	460d      	mov	r5, r1
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	4629      	mov	r1, r5
 8007b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b62:	f04f 31ff 	mov.w	r1, #4294967295
 8007b66:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007b6a:	40f9      	lsrs	r1, r7
 8007b6c:	4208      	tst	r0, r1
 8007b6e:	d0f5      	beq.n	8007b5c <round+0x5c>
 8007b70:	2001      	movs	r0, #1
 8007b72:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007b76:	fa00 f404 	lsl.w	r4, r0, r4
 8007b7a:	1912      	adds	r2, r2, r4
 8007b7c:	bf28      	it	cs
 8007b7e:	181b      	addcs	r3, r3, r0
 8007b80:	ea22 0201 	bic.w	r2, r2, r1
 8007b84:	4619      	mov	r1, r3
 8007b86:	4610      	mov	r0, r2
 8007b88:	e7e6      	b.n	8007b58 <round+0x58>
 8007b8a:	bf00      	nop
 8007b8c:	000fffff 	.word	0x000fffff

08007b90 <_init>:
 8007b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b92:	bf00      	nop
 8007b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b96:	bc08      	pop	{r3}
 8007b98:	469e      	mov	lr, r3
 8007b9a:	4770      	bx	lr

08007b9c <_fini>:
 8007b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9e:	bf00      	nop
 8007ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba2:	bc08      	pop	{r3}
 8007ba4:	469e      	mov	lr, r3
 8007ba6:	4770      	bx	lr
