
NoNameZz_MicroMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c420  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800c530  0800c530  0001c530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca14  0800ca14  000202d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ca14  0800ca14  000202d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ca14  0800ca14  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca14  0800ca14  0001ca14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca18  0800ca18  0001ca18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800ca1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fbc  200002d0  0800ccec  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000128c  0800ccec  0002128c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c07c  00000000  00000000  000202f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd3  00000000  00000000  0003c375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0003f048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  00040540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af45  00000000  00000000  00041968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017664  00000000  00000000  0005c8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000956f2  00000000  00000000  00073f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  00109603  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c44  00000000  00000000  0010964c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002d0 	.word	0x200002d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c518 	.word	0x0800c518

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002d4 	.word	0x200002d4
 800014c:	0800c518 	.word	0x0800c518

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2iz>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d215      	bcs.n	8000752 <__aeabi_d2iz+0x36>
 8000726:	d511      	bpl.n	800074c <__aeabi_d2iz+0x30>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d912      	bls.n	8000758 <__aeabi_d2iz+0x3c>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000742:	fa23 f002 	lsr.w	r0, r3, r2
 8000746:	bf18      	it	ne
 8000748:	4240      	negne	r0, r0
 800074a:	4770      	bx	lr
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	4770      	bx	lr
 8000752:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000756:	d105      	bne.n	8000764 <__aeabi_d2iz+0x48>
 8000758:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <__aeabi_d2uiz>:
 800076c:	004a      	lsls	r2, r1, #1
 800076e:	d211      	bcs.n	8000794 <__aeabi_d2uiz+0x28>
 8000770:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000774:	d211      	bcs.n	800079a <__aeabi_d2uiz+0x2e>
 8000776:	d50d      	bpl.n	8000794 <__aeabi_d2uiz+0x28>
 8000778:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800077c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000780:	d40e      	bmi.n	80007a0 <__aeabi_d2uiz+0x34>
 8000782:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000786:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800078a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800078e:	fa23 f002 	lsr.w	r0, r3, r2
 8000792:	4770      	bx	lr
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	4770      	bx	lr
 800079a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800079e:	d102      	bne.n	80007a6 <__aeabi_d2uiz+0x3a>
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295
 80007a4:	4770      	bx	lr
 80007a6:	f04f 0000 	mov.w	r0, #0
 80007aa:	4770      	bx	lr

080007ac <__aeabi_frsub>:
 80007ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007b0:	e002      	b.n	80007b8 <__addsf3>
 80007b2:	bf00      	nop

080007b4 <__aeabi_fsub>:
 80007b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007b8 <__addsf3>:
 80007b8:	0042      	lsls	r2, r0, #1
 80007ba:	bf1f      	itttt	ne
 80007bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007c0:	ea92 0f03 	teqne	r2, r3
 80007c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007cc:	d06a      	beq.n	80008a4 <__addsf3+0xec>
 80007ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007d6:	bfc1      	itttt	gt
 80007d8:	18d2      	addgt	r2, r2, r3
 80007da:	4041      	eorgt	r1, r0
 80007dc:	4048      	eorgt	r0, r1
 80007de:	4041      	eorgt	r1, r0
 80007e0:	bfb8      	it	lt
 80007e2:	425b      	neglt	r3, r3
 80007e4:	2b19      	cmp	r3, #25
 80007e6:	bf88      	it	hi
 80007e8:	4770      	bxhi	lr
 80007ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007f6:	bf18      	it	ne
 80007f8:	4240      	negne	r0, r0
 80007fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000802:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4249      	negne	r1, r1
 800080a:	ea92 0f03 	teq	r2, r3
 800080e:	d03f      	beq.n	8000890 <__addsf3+0xd8>
 8000810:	f1a2 0201 	sub.w	r2, r2, #1
 8000814:	fa41 fc03 	asr.w	ip, r1, r3
 8000818:	eb10 000c 	adds.w	r0, r0, ip
 800081c:	f1c3 0320 	rsb	r3, r3, #32
 8000820:	fa01 f103 	lsl.w	r1, r1, r3
 8000824:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000828:	d502      	bpl.n	8000830 <__addsf3+0x78>
 800082a:	4249      	negs	r1, r1
 800082c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000830:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000834:	d313      	bcc.n	800085e <__addsf3+0xa6>
 8000836:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800083a:	d306      	bcc.n	800084a <__addsf3+0x92>
 800083c:	0840      	lsrs	r0, r0, #1
 800083e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000842:	f102 0201 	add.w	r2, r2, #1
 8000846:	2afe      	cmp	r2, #254	; 0xfe
 8000848:	d251      	bcs.n	80008ee <__addsf3+0x136>
 800084a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800084e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000852:	bf08      	it	eq
 8000854:	f020 0001 	biceq.w	r0, r0, #1
 8000858:	ea40 0003 	orr.w	r0, r0, r3
 800085c:	4770      	bx	lr
 800085e:	0049      	lsls	r1, r1, #1
 8000860:	eb40 0000 	adc.w	r0, r0, r0
 8000864:	3a01      	subs	r2, #1
 8000866:	bf28      	it	cs
 8000868:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800086c:	d2ed      	bcs.n	800084a <__addsf3+0x92>
 800086e:	fab0 fc80 	clz	ip, r0
 8000872:	f1ac 0c08 	sub.w	ip, ip, #8
 8000876:	ebb2 020c 	subs.w	r2, r2, ip
 800087a:	fa00 f00c 	lsl.w	r0, r0, ip
 800087e:	bfaa      	itet	ge
 8000880:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000884:	4252      	neglt	r2, r2
 8000886:	4318      	orrge	r0, r3
 8000888:	bfbc      	itt	lt
 800088a:	40d0      	lsrlt	r0, r2
 800088c:	4318      	orrlt	r0, r3
 800088e:	4770      	bx	lr
 8000890:	f092 0f00 	teq	r2, #0
 8000894:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000898:	bf06      	itte	eq
 800089a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800089e:	3201      	addeq	r2, #1
 80008a0:	3b01      	subne	r3, #1
 80008a2:	e7b5      	b.n	8000810 <__addsf3+0x58>
 80008a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008ac:	bf18      	it	ne
 80008ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008b2:	d021      	beq.n	80008f8 <__addsf3+0x140>
 80008b4:	ea92 0f03 	teq	r2, r3
 80008b8:	d004      	beq.n	80008c4 <__addsf3+0x10c>
 80008ba:	f092 0f00 	teq	r2, #0
 80008be:	bf08      	it	eq
 80008c0:	4608      	moveq	r0, r1
 80008c2:	4770      	bx	lr
 80008c4:	ea90 0f01 	teq	r0, r1
 80008c8:	bf1c      	itt	ne
 80008ca:	2000      	movne	r0, #0
 80008cc:	4770      	bxne	lr
 80008ce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008d2:	d104      	bne.n	80008de <__addsf3+0x126>
 80008d4:	0040      	lsls	r0, r0, #1
 80008d6:	bf28      	it	cs
 80008d8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008dc:	4770      	bx	lr
 80008de:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008e2:	bf3c      	itt	cc
 80008e4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bxcc	lr
 80008ea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008ee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f6:	4770      	bx	lr
 80008f8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008fc:	bf16      	itet	ne
 80008fe:	4608      	movne	r0, r1
 8000900:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000904:	4601      	movne	r1, r0
 8000906:	0242      	lsls	r2, r0, #9
 8000908:	bf06      	itte	eq
 800090a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800090e:	ea90 0f01 	teqeq	r0, r1
 8000912:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000916:	4770      	bx	lr

08000918 <__aeabi_ui2f>:
 8000918:	f04f 0300 	mov.w	r3, #0
 800091c:	e004      	b.n	8000928 <__aeabi_i2f+0x8>
 800091e:	bf00      	nop

08000920 <__aeabi_i2f>:
 8000920:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000924:	bf48      	it	mi
 8000926:	4240      	negmi	r0, r0
 8000928:	ea5f 0c00 	movs.w	ip, r0
 800092c:	bf08      	it	eq
 800092e:	4770      	bxeq	lr
 8000930:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000934:	4601      	mov	r1, r0
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	e01c      	b.n	8000976 <__aeabi_l2f+0x2a>

0800093c <__aeabi_ul2f>:
 800093c:	ea50 0201 	orrs.w	r2, r0, r1
 8000940:	bf08      	it	eq
 8000942:	4770      	bxeq	lr
 8000944:	f04f 0300 	mov.w	r3, #0
 8000948:	e00a      	b.n	8000960 <__aeabi_l2f+0x14>
 800094a:	bf00      	nop

0800094c <__aeabi_l2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000958:	d502      	bpl.n	8000960 <__aeabi_l2f+0x14>
 800095a:	4240      	negs	r0, r0
 800095c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000960:	ea5f 0c01 	movs.w	ip, r1
 8000964:	bf02      	ittt	eq
 8000966:	4684      	moveq	ip, r0
 8000968:	4601      	moveq	r1, r0
 800096a:	2000      	moveq	r0, #0
 800096c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000970:	bf08      	it	eq
 8000972:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000976:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800097a:	fabc f28c 	clz	r2, ip
 800097e:	3a08      	subs	r2, #8
 8000980:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000984:	db10      	blt.n	80009a8 <__aeabi_l2f+0x5c>
 8000986:	fa01 fc02 	lsl.w	ip, r1, r2
 800098a:	4463      	add	r3, ip
 800098c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000990:	f1c2 0220 	rsb	r2, r2, #32
 8000994:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000998:	fa20 f202 	lsr.w	r2, r0, r2
 800099c:	eb43 0002 	adc.w	r0, r3, r2
 80009a0:	bf08      	it	eq
 80009a2:	f020 0001 	biceq.w	r0, r0, #1
 80009a6:	4770      	bx	lr
 80009a8:	f102 0220 	add.w	r2, r2, #32
 80009ac:	fa01 fc02 	lsl.w	ip, r1, r2
 80009b0:	f1c2 0220 	rsb	r2, r2, #32
 80009b4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009b8:	fa21 f202 	lsr.w	r2, r1, r2
 80009bc:	eb43 0002 	adc.w	r0, r3, r2
 80009c0:	bf08      	it	eq
 80009c2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009c6:	4770      	bx	lr

080009c8 <__aeabi_fmul>:
 80009c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009d0:	bf1e      	ittt	ne
 80009d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009d6:	ea92 0f0c 	teqne	r2, ip
 80009da:	ea93 0f0c 	teqne	r3, ip
 80009de:	d06f      	beq.n	8000ac0 <__aeabi_fmul+0xf8>
 80009e0:	441a      	add	r2, r3
 80009e2:	ea80 0c01 	eor.w	ip, r0, r1
 80009e6:	0240      	lsls	r0, r0, #9
 80009e8:	bf18      	it	ne
 80009ea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009ee:	d01e      	beq.n	8000a2e <__aeabi_fmul+0x66>
 80009f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009f4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009f8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009fc:	fba0 3101 	umull	r3, r1, r0, r1
 8000a00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a08:	bf3e      	ittt	cc
 8000a0a:	0049      	lslcc	r1, r1, #1
 8000a0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a10:	005b      	lslcc	r3, r3, #1
 8000a12:	ea40 0001 	orr.w	r0, r0, r1
 8000a16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a1a:	2afd      	cmp	r2, #253	; 0xfd
 8000a1c:	d81d      	bhi.n	8000a5a <__aeabi_fmul+0x92>
 8000a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a26:	bf08      	it	eq
 8000a28:	f020 0001 	biceq.w	r0, r0, #1
 8000a2c:	4770      	bx	lr
 8000a2e:	f090 0f00 	teq	r0, #0
 8000a32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a36:	bf08      	it	eq
 8000a38:	0249      	lsleq	r1, r1, #9
 8000a3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a42:	3a7f      	subs	r2, #127	; 0x7f
 8000a44:	bfc2      	ittt	gt
 8000a46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a4e:	4770      	bxgt	lr
 8000a50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	3a01      	subs	r2, #1
 8000a5a:	dc5d      	bgt.n	8000b18 <__aeabi_fmul+0x150>
 8000a5c:	f112 0f19 	cmn.w	r2, #25
 8000a60:	bfdc      	itt	le
 8000a62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a66:	4770      	bxle	lr
 8000a68:	f1c2 0200 	rsb	r2, r2, #0
 8000a6c:	0041      	lsls	r1, r0, #1
 8000a6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a72:	f1c2 0220 	rsb	r2, r2, #32
 8000a76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a7e:	f140 0000 	adc.w	r0, r0, #0
 8000a82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a86:	bf08      	it	eq
 8000a88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a8c:	4770      	bx	lr
 8000a8e:	f092 0f00 	teq	r2, #0
 8000a92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a96:	bf02      	ittt	eq
 8000a98:	0040      	lsleq	r0, r0, #1
 8000a9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a9e:	3a01      	subeq	r2, #1
 8000aa0:	d0f9      	beq.n	8000a96 <__aeabi_fmul+0xce>
 8000aa2:	ea40 000c 	orr.w	r0, r0, ip
 8000aa6:	f093 0f00 	teq	r3, #0
 8000aaa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aae:	bf02      	ittt	eq
 8000ab0:	0049      	lsleq	r1, r1, #1
 8000ab2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ab6:	3b01      	subeq	r3, #1
 8000ab8:	d0f9      	beq.n	8000aae <__aeabi_fmul+0xe6>
 8000aba:	ea41 010c 	orr.w	r1, r1, ip
 8000abe:	e78f      	b.n	80009e0 <__aeabi_fmul+0x18>
 8000ac0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ac4:	ea92 0f0c 	teq	r2, ip
 8000ac8:	bf18      	it	ne
 8000aca:	ea93 0f0c 	teqne	r3, ip
 8000ace:	d00a      	beq.n	8000ae6 <__aeabi_fmul+0x11e>
 8000ad0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ad4:	bf18      	it	ne
 8000ad6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ada:	d1d8      	bne.n	8000a8e <__aeabi_fmul+0xc6>
 8000adc:	ea80 0001 	eor.w	r0, r0, r1
 8000ae0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ae4:	4770      	bx	lr
 8000ae6:	f090 0f00 	teq	r0, #0
 8000aea:	bf17      	itett	ne
 8000aec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000af0:	4608      	moveq	r0, r1
 8000af2:	f091 0f00 	teqne	r1, #0
 8000af6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000afa:	d014      	beq.n	8000b26 <__aeabi_fmul+0x15e>
 8000afc:	ea92 0f0c 	teq	r2, ip
 8000b00:	d101      	bne.n	8000b06 <__aeabi_fmul+0x13e>
 8000b02:	0242      	lsls	r2, r0, #9
 8000b04:	d10f      	bne.n	8000b26 <__aeabi_fmul+0x15e>
 8000b06:	ea93 0f0c 	teq	r3, ip
 8000b0a:	d103      	bne.n	8000b14 <__aeabi_fmul+0x14c>
 8000b0c:	024b      	lsls	r3, r1, #9
 8000b0e:	bf18      	it	ne
 8000b10:	4608      	movne	r0, r1
 8000b12:	d108      	bne.n	8000b26 <__aeabi_fmul+0x15e>
 8000b14:	ea80 0001 	eor.w	r0, r0, r1
 8000b18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_fdiv>:
 8000b30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b38:	bf1e      	ittt	ne
 8000b3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b3e:	ea92 0f0c 	teqne	r2, ip
 8000b42:	ea93 0f0c 	teqne	r3, ip
 8000b46:	d069      	beq.n	8000c1c <__aeabi_fdiv+0xec>
 8000b48:	eba2 0203 	sub.w	r2, r2, r3
 8000b4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b50:	0249      	lsls	r1, r1, #9
 8000b52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b56:	d037      	beq.n	8000bc8 <__aeabi_fdiv+0x98>
 8000b58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	bf38      	it	cc
 8000b6c:	005b      	lslcc	r3, r3, #1
 8000b6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b76:	428b      	cmp	r3, r1
 8000b78:	bf24      	itt	cs
 8000b7a:	1a5b      	subcs	r3, r3, r1
 8000b7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b84:	bf24      	itt	cs
 8000b86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b92:	bf24      	itt	cs
 8000b94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ba0:	bf24      	itt	cs
 8000ba2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ba6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	bf18      	it	ne
 8000bae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bb2:	d1e0      	bne.n	8000b76 <__aeabi_fdiv+0x46>
 8000bb4:	2afd      	cmp	r2, #253	; 0xfd
 8000bb6:	f63f af50 	bhi.w	8000a5a <__aeabi_fmul+0x92>
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bd0:	327f      	adds	r2, #127	; 0x7f
 8000bd2:	bfc2      	ittt	gt
 8000bd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bdc:	4770      	bxgt	lr
 8000bde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be2:	f04f 0300 	mov.w	r3, #0
 8000be6:	3a01      	subs	r2, #1
 8000be8:	e737      	b.n	8000a5a <__aeabi_fmul+0x92>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bf2:	bf02      	ittt	eq
 8000bf4:	0040      	lsleq	r0, r0, #1
 8000bf6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bfa:	3a01      	subeq	r2, #1
 8000bfc:	d0f9      	beq.n	8000bf2 <__aeabi_fdiv+0xc2>
 8000bfe:	ea40 000c 	orr.w	r0, r0, ip
 8000c02:	f093 0f00 	teq	r3, #0
 8000c06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c0a:	bf02      	ittt	eq
 8000c0c:	0049      	lsleq	r1, r1, #1
 8000c0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c12:	3b01      	subeq	r3, #1
 8000c14:	d0f9      	beq.n	8000c0a <__aeabi_fdiv+0xda>
 8000c16:	ea41 010c 	orr.w	r1, r1, ip
 8000c1a:	e795      	b.n	8000b48 <__aeabi_fdiv+0x18>
 8000c1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c20:	ea92 0f0c 	teq	r2, ip
 8000c24:	d108      	bne.n	8000c38 <__aeabi_fdiv+0x108>
 8000c26:	0242      	lsls	r2, r0, #9
 8000c28:	f47f af7d 	bne.w	8000b26 <__aeabi_fmul+0x15e>
 8000c2c:	ea93 0f0c 	teq	r3, ip
 8000c30:	f47f af70 	bne.w	8000b14 <__aeabi_fmul+0x14c>
 8000c34:	4608      	mov	r0, r1
 8000c36:	e776      	b.n	8000b26 <__aeabi_fmul+0x15e>
 8000c38:	ea93 0f0c 	teq	r3, ip
 8000c3c:	d104      	bne.n	8000c48 <__aeabi_fdiv+0x118>
 8000c3e:	024b      	lsls	r3, r1, #9
 8000c40:	f43f af4c 	beq.w	8000adc <__aeabi_fmul+0x114>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e76e      	b.n	8000b26 <__aeabi_fmul+0x15e>
 8000c48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c4c:	bf18      	it	ne
 8000c4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c52:	d1ca      	bne.n	8000bea <__aeabi_fdiv+0xba>
 8000c54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c58:	f47f af5c 	bne.w	8000b14 <__aeabi_fmul+0x14c>
 8000c5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c60:	f47f af3c 	bne.w	8000adc <__aeabi_fmul+0x114>
 8000c64:	e75f      	b.n	8000b26 <__aeabi_fmul+0x15e>
 8000c66:	bf00      	nop

08000c68 <__aeabi_f2iz>:
 8000c68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c70:	d30f      	bcc.n	8000c92 <__aeabi_f2iz+0x2a>
 8000c72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c7a:	d90d      	bls.n	8000c98 <__aeabi_f2iz+0x30>
 8000c7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c84:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c88:	fa23 f002 	lsr.w	r0, r3, r2
 8000c8c:	bf18      	it	ne
 8000c8e:	4240      	negne	r0, r0
 8000c90:	4770      	bx	lr
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	4770      	bx	lr
 8000c98:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c9c:	d101      	bne.n	8000ca2 <__aeabi_f2iz+0x3a>
 8000c9e:	0242      	lsls	r2, r0, #9
 8000ca0:	d105      	bne.n	8000cae <__aeabi_f2iz+0x46>
 8000ca2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ca6:	bf08      	it	eq
 8000ca8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_f2uiz>:
 8000cb4:	0042      	lsls	r2, r0, #1
 8000cb6:	d20e      	bcs.n	8000cd6 <__aeabi_f2uiz+0x22>
 8000cb8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000cbc:	d30b      	bcc.n	8000cd6 <__aeabi_f2uiz+0x22>
 8000cbe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000cc2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cc6:	d409      	bmi.n	8000cdc <__aeabi_f2uiz+0x28>
 8000cc8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ccc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000cd4:	4770      	bx	lr
 8000cd6:	f04f 0000 	mov.w	r0, #0
 8000cda:	4770      	bx	lr
 8000cdc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_f2uiz+0x32>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d102      	bne.n	8000cec <__aeabi_f2uiz+0x38>
 8000ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cea:	4770      	bx	lr
 8000cec:	f04f 0000 	mov.w	r0, #0
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <start_fill>:


void found(int16_t index);
void set_wall(bool rbl, bool rbr, bool rbf);

void start_fill() {
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
	memset(visited, false, sizeof(visited));
 8000cfa:	2264      	movs	r2, #100	; 0x64
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	48ab      	ldr	r0, [pc, #684]	; (8000fac <start_fill+0x2b8>)
 8000d00:	f00b fbfa 	bl	800c4f8 <memset>
	memset(maze, 0, sizeof(maze));
 8000d04:	2264      	movs	r2, #100	; 0x64
 8000d06:	2100      	movs	r1, #0
 8000d08:	48a9      	ldr	r0, [pc, #676]	; (8000fb0 <start_fill+0x2bc>)
 8000d0a:	f00b fbf5 	bl	800c4f8 <memset>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000d0e:	4ba9      	ldr	r3, [pc, #676]	; (8000fb4 <start_fill+0x2c0>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000d16:	4ba8      	ldr	r3, [pc, #672]	; (8000fb8 <start_fill+0x2c4>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
	visited[starting_coordinates[1]][starting_coordinates[0]] = true;
 8000d1e:	4ba7      	ldr	r3, [pc, #668]	; (8000fbc <start_fill+0x2c8>)
 8000d20:	785b      	ldrb	r3, [r3, #1]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4ba5      	ldr	r3, [pc, #660]	; (8000fbc <start_fill+0x2c8>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	4aa0      	ldr	r2, [pc, #640]	; (8000fac <start_fill+0x2b8>)
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	440b      	add	r3, r1
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	4403      	add	r3, r0
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
	int16_t i = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	82fb      	strh	r3, [r7, #22]
	x = starting_coordinates[0];
 8000d40:	4b9e      	ldr	r3, [pc, #632]	; (8000fbc <start_fill+0x2c8>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b25a      	sxtb	r2, r3
 8000d46:	4b9e      	ldr	r3, [pc, #632]	; (8000fc0 <start_fill+0x2cc>)
 8000d48:	701a      	strb	r2, [r3, #0]
	y = starting_coordinates[1] + 1;
 8000d4a:	4b9c      	ldr	r3, [pc, #624]	; (8000fbc <start_fill+0x2c8>)
 8000d4c:	785b      	ldrb	r3, [r3, #1]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	b25a      	sxtb	r2, r3
 8000d54:	4b9b      	ldr	r3, [pc, #620]	; (8000fc4 <start_fill+0x2d0>)
 8000d56:	701a      	strb	r2, [r3, #0]
	maze[y - 1][x] |= bottom_wall;
 8000d58:	4b9a      	ldr	r3, [pc, #616]	; (8000fc4 <start_fill+0x2d0>)
 8000d5a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	4b97      	ldr	r3, [pc, #604]	; (8000fc0 <start_fill+0x2cc>)
 8000d62:	f993 3000 	ldrsb.w	r3, [r3]
 8000d66:	4618      	mov	r0, r3
 8000d68:	4991      	ldr	r1, [pc, #580]	; (8000fb0 <start_fill+0x2bc>)
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	440b      	add	r3, r1
 8000d74:	4403      	add	r3, r0
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4a92      	ldr	r2, [pc, #584]	; (8000fc4 <start_fill+0x2d0>)
 8000d7a:	f992 2000 	ldrsb.w	r2, [r2]
 8000d7e:	3a01      	subs	r2, #1
 8000d80:	498f      	ldr	r1, [pc, #572]	; (8000fc0 <start_fill+0x2cc>)
 8000d82:	f991 1000 	ldrsb.w	r1, [r1]
 8000d86:	460c      	mov	r4, r1
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	b2d8      	uxtb	r0, r3
 8000d8e:	4988      	ldr	r1, [pc, #544]	; (8000fb0 <start_fill+0x2bc>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	440b      	add	r3, r1
 8000d9a:	4423      	add	r3, r4
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	701a      	strb	r2, [r3, #0]
	direction = north;
 8000da0:	4b89      	ldr	r3, [pc, #548]	; (8000fc8 <start_fill+0x2d4>)
 8000da2:	2202      	movs	r2, #2
 8000da4:	701a      	strb	r2, [r3, #0]
	bool frontfree, leftfree, rightfree;
	uint16_t frontValue, leftValue, rightValue;
	while(1){
		vl53l0x_GetRanging_now(rightSensor0, &frontValue);
 8000da6:	4b89      	ldr	r3, [pc, #548]	; (8000fcc <start_fill+0x2d8>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	1dba      	adds	r2, r7, #6
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f00b f8f8 	bl	800bfa4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(leftSensor45, &leftValue);
 8000db4:	4b85      	ldr	r3, [pc, #532]	; (8000fcc <start_fill+0x2d8>)
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	1d3a      	adds	r2, r7, #4
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f00b f8f1 	bl	800bfa4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor45, &rightValue);
 8000dc2:	4b82      	ldr	r3, [pc, #520]	; (8000fcc <start_fill+0x2d8>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	1cba      	adds	r2, r7, #2
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f00b f8ea 	bl	800bfa4 <vl53l0x_GetRanging_now>
		ts1 = frontValue;
 8000dd0:	88fa      	ldrh	r2, [r7, #6]
 8000dd2:	4b7f      	ldr	r3, [pc, #508]	; (8000fd0 <start_fill+0x2dc>)
 8000dd4:	801a      	strh	r2, [r3, #0]
		ts2 = leftValue;
 8000dd6:	88ba      	ldrh	r2, [r7, #4]
 8000dd8:	4b7e      	ldr	r3, [pc, #504]	; (8000fd4 <start_fill+0x2e0>)
 8000dda:	801a      	strh	r2, [r3, #0]
		ts3 = rightValue;
 8000ddc:	887a      	ldrh	r2, [r7, #2]
 8000dde:	4b7e      	ldr	r3, [pc, #504]	; (8000fd8 <start_fill+0x2e4>)
 8000de0:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de8:	487c      	ldr	r0, [pc, #496]	; (8000fdc <start_fill+0x2e8>)
 8000dea:	f003 fe2b 	bl	8004a44 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000dee:	2032      	movs	r0, #50	; 0x32
 8000df0:	f003 fb40 	bl	8004474 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfa:	4878      	ldr	r0, [pc, #480]	; (8000fdc <start_fill+0x2e8>)
 8000dfc:	f003 fe22 	bl	8004a44 <HAL_GPIO_WritePin>
		frontfree = frontValue > HasfrontWallValue;
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000e06:	bf8c      	ite	hi
 8000e08:	2301      	movhi	r3, #1
 8000e0a:	2300      	movls	r3, #0
 8000e0c:	757b      	strb	r3, [r7, #21]
		leftfree  = leftValue > HasleftWallValue_45;
 8000e0e:	88bb      	ldrh	r3, [r7, #4]
 8000e10:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000e14:	bf8c      	ite	hi
 8000e16:	2301      	movhi	r3, #1
 8000e18:	2300      	movls	r3, #0
 8000e1a:	753b      	strb	r3, [r7, #20]
		rightfree = rightValue > HasrightWallValue_45;
 8000e1c:	887b      	ldrh	r3, [r7, #2]
 8000e1e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000e22:	bf8c      	ite	hi
 8000e24:	2301      	movhi	r3, #1
 8000e26:	2300      	movls	r3, #0
 8000e28:	74fb      	strb	r3, [r7, #19]
		set_wall(!leftfree, !rightfree, !frontfree);
 8000e2a:	7d3b      	ldrb	r3, [r7, #20]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf14      	ite	ne
 8000e30:	2301      	movne	r3, #1
 8000e32:	2300      	moveq	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f083 0301 	eor.w	r3, r3, #1
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	b2d8      	uxtb	r0, r3
 8000e42:	7cfb      	ldrb	r3, [r7, #19]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	bf14      	ite	ne
 8000e48:	2301      	movne	r3, #1
 8000e4a:	2300      	moveq	r3, #0
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f083 0301 	eor.w	r3, r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	b2d9      	uxtb	r1, r3
 8000e5a:	7d7b      	ldrb	r3, [r7, #21]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	bf14      	ite	ne
 8000e60:	2301      	movne	r3, #1
 8000e62:	2300      	moveq	r3, #0
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	f083 0301 	eor.w	r3, r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	f001 fbd4 	bl	8002620 <set_wall>
		visited[y][x] = true;
 8000e78:	4b52      	ldr	r3, [pc, #328]	; (8000fc4 <start_fill+0x2d0>)
 8000e7a:	f993 3000 	ldrsb.w	r3, [r3]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4b4f      	ldr	r3, [pc, #316]	; (8000fc0 <start_fill+0x2cc>)
 8000e82:	f993 3000 	ldrsb.w	r3, [r3]
 8000e86:	4618      	mov	r0, r3
 8000e88:	4a48      	ldr	r2, [pc, #288]	; (8000fac <start_fill+0x2b8>)
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	440b      	add	r3, r1
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4413      	add	r3, r2
 8000e94:	4403      	add	r3, r0
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
		if(x == ending_coordinates[0] && y == ending_coordinates[1]){
 8000e9a:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <start_fill+0x2cc>)
 8000e9c:	f993 3000 	ldrsb.w	r3, [r3]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b4f      	ldr	r3, [pc, #316]	; (8000fe0 <start_fill+0x2ec>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d135      	bne.n	8000f16 <start_fill+0x222>
 8000eaa:	4b46      	ldr	r3, [pc, #280]	; (8000fc4 <start_fill+0x2d0>)
 8000eac:	f993 3000 	ldrsb.w	r3, [r3]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b4b      	ldr	r3, [pc, #300]	; (8000fe0 <start_fill+0x2ec>)
 8000eb4:	785b      	ldrb	r3, [r3, #1]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d12d      	bne.n	8000f16 <start_fill+0x222>
			found(i);
 8000eba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fb5a 	bl	8002578 <found>
			maze[y][x] |= top_wall;
 8000ec4:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <start_fill+0x2d0>)
 8000ec6:	f993 3000 	ldrsb.w	r3, [r3]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4b3c      	ldr	r3, [pc, #240]	; (8000fc0 <start_fill+0x2cc>)
 8000ece:	f993 3000 	ldrsb.w	r3, [r3]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	4a36      	ldr	r2, [pc, #216]	; (8000fb0 <start_fill+0x2bc>)
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	4403      	add	r3, r0
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4a37      	ldr	r2, [pc, #220]	; (8000fc4 <start_fill+0x2d0>)
 8000ee6:	f992 2000 	ldrsb.w	r2, [r2]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4a34      	ldr	r2, [pc, #208]	; (8000fc0 <start_fill+0x2cc>)
 8000eee:	f992 2000 	ldrsb.w	r2, [r2]
 8000ef2:	4614      	mov	r4, r2
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	b2d8      	uxtb	r0, r3
 8000efa:	4a2d      	ldr	r2, [pc, #180]	; (8000fb0 <start_fill+0x2bc>)
 8000efc:	460b      	mov	r3, r1
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	4423      	add	r3, r4
 8000f08:	4602      	mov	r2, r0
 8000f0a:	701a      	strb	r2, [r3, #0]
			break;
 8000f0c:	bf00      	nop
					}
					break;
			}
		}
	}
	for(int n = 0; n < grid_size; n++){
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	f001 bb23 	b.w	800255c <start_fill+0x1868>
		switch(direction){
 8000f16:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <start_fill+0x2d4>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	f200 81b3 	bhi.w	8001286 <start_fill+0x592>
 8000f20:	a201      	add	r2, pc, #4	; (adr r2, 8000f28 <start_fill+0x234>)
 8000f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f26:	bf00      	nop
 8000f28:	08000f39 	.word	0x08000f39
 8000f2c:	08001033 	.word	0x08001033
 8000f30:	080010f5 	.word	0x080010f5
 8000f34:	080011b7 	.word	0x080011b7
				frontfree = frontfree && !visited[y][x - 1];
 8000f38:	7d7b      	ldrb	r3, [r7, #21]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d016      	beq.n	8000f6c <start_fill+0x278>
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <start_fill+0x2d0>)
 8000f40:	f993 3000 	ldrsb.w	r3, [r3]
 8000f44:	4618      	mov	r0, r3
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <start_fill+0x2cc>)
 8000f48:	f993 3000 	ldrsb.w	r3, [r3]
 8000f4c:	1e5a      	subs	r2, r3, #1
 8000f4e:	4917      	ldr	r1, [pc, #92]	; (8000fac <start_fill+0x2b8>)
 8000f50:	4603      	mov	r3, r0
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4403      	add	r3, r0
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	440b      	add	r3, r1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	f083 0301 	eor.w	r3, r3, #1
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <start_fill+0x278>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <start_fill+0x27a>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	757b      	strb	r3, [r7, #21]
 8000f70:	7d7b      	ldrb	r3, [r7, #21]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	757b      	strb	r3, [r7, #21]
				leftfree  = leftfree && !visited[y + 1][x];
 8000f78:	7d3b      	ldrb	r3, [r7, #20]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d032      	beq.n	8000fe4 <start_fill+0x2f0>
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <start_fill+0x2d0>)
 8000f80:	f993 3000 	ldrsb.w	r3, [r3]
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <start_fill+0x2cc>)
 8000f88:	f993 3000 	ldrsb.w	r3, [r3]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	4907      	ldr	r1, [pc, #28]	; (8000fac <start_fill+0x2b8>)
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	440b      	add	r3, r1
 8000f9a:	4403      	add	r3, r0
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	f083 0301 	eor.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d01d      	beq.n	8000fe4 <start_fill+0x2f0>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e01c      	b.n	8000fe6 <start_fill+0x2f2>
 8000fac:	200005f4 	.word	0x200005f4
 8000fb0:	20000590 	.word	0x20000590
 8000fb4:	200004b8 	.word	0x200004b8
 8000fb8:	20000500 	.word	0x20000500
 8000fbc:	0800c9d4 	.word	0x0800c9d4
 8000fc0:	20000418 	.word	0x20000418
 8000fc4:	20000419 	.word	0x20000419
 8000fc8:	2000041a 	.word	0x2000041a
 8000fcc:	20000f94 	.word	0x20000f94
 8000fd0:	2000065a 	.word	0x2000065a
 8000fd4:	2000065c 	.word	0x2000065c
 8000fd8:	2000065e 	.word	0x2000065e
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	0800c9d8 	.word	0x0800c9d8
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	753b      	strb	r3, [r7, #20]
 8000fe8:	7d3b      	ldrb	r3, [r7, #20]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	753b      	strb	r3, [r7, #20]
				rightfree  = rightfree && !visited[y - 1][x];
 8000ff0:	7cfb      	ldrb	r3, [r7, #19]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d016      	beq.n	8001024 <start_fill+0x330>
 8000ff6:	4b9d      	ldr	r3, [pc, #628]	; (800126c <start_fill+0x578>)
 8000ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8000ffc:	1e5a      	subs	r2, r3, #1
 8000ffe:	4b9c      	ldr	r3, [pc, #624]	; (8001270 <start_fill+0x57c>)
 8001000:	f993 3000 	ldrsb.w	r3, [r3]
 8001004:	4618      	mov	r0, r3
 8001006:	499b      	ldr	r1, [pc, #620]	; (8001274 <start_fill+0x580>)
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	440b      	add	r3, r1
 8001012:	4403      	add	r3, r0
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	f083 0301 	eor.w	r3, r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <start_fill+0x330>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <start_fill+0x332>
 8001024:	2300      	movs	r3, #0
 8001026:	74fb      	strb	r3, [r7, #19]
 8001028:	7cfb      	ldrb	r3, [r7, #19]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	74fb      	strb	r3, [r7, #19]
				break;
 8001030:	e129      	b.n	8001286 <start_fill+0x592>
				frontfree = frontfree && !visited[y][x + 1];
 8001032:	7d7b      	ldrb	r3, [r7, #21]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d016      	beq.n	8001066 <start_fill+0x372>
 8001038:	4b8c      	ldr	r3, [pc, #560]	; (800126c <start_fill+0x578>)
 800103a:	f993 3000 	ldrsb.w	r3, [r3]
 800103e:	4618      	mov	r0, r3
 8001040:	4b8b      	ldr	r3, [pc, #556]	; (8001270 <start_fill+0x57c>)
 8001042:	f993 3000 	ldrsb.w	r3, [r3]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	498a      	ldr	r1, [pc, #552]	; (8001274 <start_fill+0x580>)
 800104a:	4603      	mov	r3, r0
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4403      	add	r3, r0
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	440b      	add	r3, r1
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f083 0301 	eor.w	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <start_fill+0x372>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <start_fill+0x374>
 8001066:	2300      	movs	r3, #0
 8001068:	757b      	strb	r3, [r7, #21]
 800106a:	7d7b      	ldrb	r3, [r7, #21]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	757b      	strb	r3, [r7, #21]
				leftfree  = leftfree && !visited[y - 1][x];
 8001072:	7d3b      	ldrb	r3, [r7, #20]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d016      	beq.n	80010a6 <start_fill+0x3b2>
 8001078:	4b7c      	ldr	r3, [pc, #496]	; (800126c <start_fill+0x578>)
 800107a:	f993 3000 	ldrsb.w	r3, [r3]
 800107e:	1e5a      	subs	r2, r3, #1
 8001080:	4b7b      	ldr	r3, [pc, #492]	; (8001270 <start_fill+0x57c>)
 8001082:	f993 3000 	ldrsb.w	r3, [r3]
 8001086:	4618      	mov	r0, r3
 8001088:	497a      	ldr	r1, [pc, #488]	; (8001274 <start_fill+0x580>)
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	440b      	add	r3, r1
 8001094:	4403      	add	r3, r0
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	f083 0301 	eor.w	r3, r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <start_fill+0x3b2>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <start_fill+0x3b4>
 80010a6:	2300      	movs	r3, #0
 80010a8:	753b      	strb	r3, [r7, #20]
 80010aa:	7d3b      	ldrb	r3, [r7, #20]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	753b      	strb	r3, [r7, #20]
				rightfree  = rightfree && !visited[y + 1][x];
 80010b2:	7cfb      	ldrb	r3, [r7, #19]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d016      	beq.n	80010e6 <start_fill+0x3f2>
 80010b8:	4b6c      	ldr	r3, [pc, #432]	; (800126c <start_fill+0x578>)
 80010ba:	f993 3000 	ldrsb.w	r3, [r3]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	4b6b      	ldr	r3, [pc, #428]	; (8001270 <start_fill+0x57c>)
 80010c2:	f993 3000 	ldrsb.w	r3, [r3]
 80010c6:	4618      	mov	r0, r3
 80010c8:	496a      	ldr	r1, [pc, #424]	; (8001274 <start_fill+0x580>)
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	440b      	add	r3, r1
 80010d4:	4403      	add	r3, r0
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	f083 0301 	eor.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <start_fill+0x3f2>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <start_fill+0x3f4>
 80010e6:	2300      	movs	r3, #0
 80010e8:	74fb      	strb	r3, [r7, #19]
 80010ea:	7cfb      	ldrb	r3, [r7, #19]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	74fb      	strb	r3, [r7, #19]
				break;
 80010f2:	e0c8      	b.n	8001286 <start_fill+0x592>
				frontfree = frontfree && !visited[y - 1][x];
 80010f4:	7d7b      	ldrb	r3, [r7, #21]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d016      	beq.n	8001128 <start_fill+0x434>
 80010fa:	4b5c      	ldr	r3, [pc, #368]	; (800126c <start_fill+0x578>)
 80010fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	4b5b      	ldr	r3, [pc, #364]	; (8001270 <start_fill+0x57c>)
 8001104:	f993 3000 	ldrsb.w	r3, [r3]
 8001108:	4618      	mov	r0, r3
 800110a:	495a      	ldr	r1, [pc, #360]	; (8001274 <start_fill+0x580>)
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	440b      	add	r3, r1
 8001116:	4403      	add	r3, r0
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f083 0301 	eor.w	r3, r3, #1
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <start_fill+0x434>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <start_fill+0x436>
 8001128:	2300      	movs	r3, #0
 800112a:	757b      	strb	r3, [r7, #21]
 800112c:	7d7b      	ldrb	r3, [r7, #21]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	757b      	strb	r3, [r7, #21]
				leftfree  = leftfree && !visited[y][x - 1];
 8001134:	7d3b      	ldrb	r3, [r7, #20]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d016      	beq.n	8001168 <start_fill+0x474>
 800113a:	4b4c      	ldr	r3, [pc, #304]	; (800126c <start_fill+0x578>)
 800113c:	f993 3000 	ldrsb.w	r3, [r3]
 8001140:	4618      	mov	r0, r3
 8001142:	4b4b      	ldr	r3, [pc, #300]	; (8001270 <start_fill+0x57c>)
 8001144:	f993 3000 	ldrsb.w	r3, [r3]
 8001148:	1e5a      	subs	r2, r3, #1
 800114a:	494a      	ldr	r1, [pc, #296]	; (8001274 <start_fill+0x580>)
 800114c:	4603      	mov	r3, r0
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4403      	add	r3, r0
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	440b      	add	r3, r1
 8001156:	4413      	add	r3, r2
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	f083 0301 	eor.w	r3, r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <start_fill+0x474>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <start_fill+0x476>
 8001168:	2300      	movs	r3, #0
 800116a:	753b      	strb	r3, [r7, #20]
 800116c:	7d3b      	ldrb	r3, [r7, #20]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	753b      	strb	r3, [r7, #20]
				rightfree  = rightfree && !visited[y][x + 1];
 8001174:	7cfb      	ldrb	r3, [r7, #19]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d016      	beq.n	80011a8 <start_fill+0x4b4>
 800117a:	4b3c      	ldr	r3, [pc, #240]	; (800126c <start_fill+0x578>)
 800117c:	f993 3000 	ldrsb.w	r3, [r3]
 8001180:	4618      	mov	r0, r3
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <start_fill+0x57c>)
 8001184:	f993 3000 	ldrsb.w	r3, [r3]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	493a      	ldr	r1, [pc, #232]	; (8001274 <start_fill+0x580>)
 800118c:	4603      	mov	r3, r0
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4403      	add	r3, r0
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	440b      	add	r3, r1
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	f083 0301 	eor.w	r3, r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <start_fill+0x4b4>
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <start_fill+0x4b6>
 80011a8:	2300      	movs	r3, #0
 80011aa:	74fb      	strb	r3, [r7, #19]
 80011ac:	7cfb      	ldrb	r3, [r7, #19]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	74fb      	strb	r3, [r7, #19]
				break;
 80011b4:	e067      	b.n	8001286 <start_fill+0x592>
				frontfree = frontfree && !visited[y + 1][x];
 80011b6:	7d7b      	ldrb	r3, [r7, #21]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d016      	beq.n	80011ea <start_fill+0x4f6>
 80011bc:	4b2b      	ldr	r3, [pc, #172]	; (800126c <start_fill+0x578>)
 80011be:	f993 3000 	ldrsb.w	r3, [r3]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <start_fill+0x57c>)
 80011c6:	f993 3000 	ldrsb.w	r3, [r3]
 80011ca:	4618      	mov	r0, r3
 80011cc:	4929      	ldr	r1, [pc, #164]	; (8001274 <start_fill+0x580>)
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	440b      	add	r3, r1
 80011d8:	4403      	add	r3, r0
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	f083 0301 	eor.w	r3, r3, #1
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <start_fill+0x4f6>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <start_fill+0x4f8>
 80011ea:	2300      	movs	r3, #0
 80011ec:	757b      	strb	r3, [r7, #21]
 80011ee:	7d7b      	ldrb	r3, [r7, #21]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	757b      	strb	r3, [r7, #21]
				leftfree  = leftfree && !visited[y][x + 1];
 80011f6:	7d3b      	ldrb	r3, [r7, #20]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d016      	beq.n	800122a <start_fill+0x536>
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <start_fill+0x578>)
 80011fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001202:	4618      	mov	r0, r3
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <start_fill+0x57c>)
 8001206:	f993 3000 	ldrsb.w	r3, [r3]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	4919      	ldr	r1, [pc, #100]	; (8001274 <start_fill+0x580>)
 800120e:	4603      	mov	r3, r0
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4403      	add	r3, r0
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	440b      	add	r3, r1
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	f083 0301 	eor.w	r3, r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <start_fill+0x536>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <start_fill+0x538>
 800122a:	2300      	movs	r3, #0
 800122c:	753b      	strb	r3, [r7, #20]
 800122e:	7d3b      	ldrb	r3, [r7, #20]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	753b      	strb	r3, [r7, #20]
				rightfree  = rightfree && !visited[y][x - 1];
 8001236:	7cfb      	ldrb	r3, [r7, #19]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d01d      	beq.n	8001278 <start_fill+0x584>
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <start_fill+0x578>)
 800123e:	f993 3000 	ldrsb.w	r3, [r3]
 8001242:	4618      	mov	r0, r3
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <start_fill+0x57c>)
 8001246:	f993 3000 	ldrsb.w	r3, [r3]
 800124a:	1e5a      	subs	r2, r3, #1
 800124c:	4909      	ldr	r1, [pc, #36]	; (8001274 <start_fill+0x580>)
 800124e:	4603      	mov	r3, r0
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4403      	add	r3, r0
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	440b      	add	r3, r1
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	f083 0301 	eor.w	r3, r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d008      	beq.n	8001278 <start_fill+0x584>
 8001266:	2301      	movs	r3, #1
 8001268:	e007      	b.n	800127a <start_fill+0x586>
 800126a:	bf00      	nop
 800126c:	20000419 	.word	0x20000419
 8001270:	20000418 	.word	0x20000418
 8001274:	200005f4 	.word	0x200005f4
 8001278:	2300      	movs	r3, #0
 800127a:	74fb      	strb	r3, [r7, #19]
 800127c:	7cfb      	ldrb	r3, [r7, #19]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	74fb      	strb	r3, [r7, #19]
				break;
 8001284:	bf00      	nop
		if((leftfree && rightfree) || (leftfree && frontfree) || (rightfree && frontfree)){
 8001286:	7d3b      	ldrb	r3, [r7, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <start_fill+0x59e>
 800128c:	7cfb      	ldrb	r3, [r7, #19]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10d      	bne.n	80012ae <start_fill+0x5ba>
 8001292:	7d3b      	ldrb	r3, [r7, #20]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <start_fill+0x5aa>
 8001298:	7d7b      	ldrb	r3, [r7, #21]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <start_fill+0x5ba>
 800129e:	7cfb      	ldrb	r3, [r7, #19]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80be 	beq.w	8001422 <start_fill+0x72e>
 80012a6:	7d7b      	ldrb	r3, [r7, #21]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80ba 	beq.w	8001422 <start_fill+0x72e>
			i++;
 80012ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	3301      	adds	r3, #1
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	82fb      	strh	r3, [r7, #22]
			stack[i][1] = x;
 80012ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80012be:	4bbc      	ldr	r3, [pc, #752]	; (80015b0 <start_fill+0x8bc>)
 80012c0:	f993 0000 	ldrsb.w	r0, [r3]
 80012c4:	49bb      	ldr	r1, [pc, #748]	; (80015b4 <start_fill+0x8c0>)
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	3301      	adds	r3, #1
 80012d0:	4602      	mov	r2, r0
 80012d2:	701a      	strb	r2, [r3, #0]
			stack[i][2] = y;
 80012d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80012d8:	4bb7      	ldr	r3, [pc, #732]	; (80015b8 <start_fill+0x8c4>)
 80012da:	f993 0000 	ldrsb.w	r0, [r3]
 80012de:	49b5      	ldr	r1, [pc, #724]	; (80015b4 <start_fill+0x8c0>)
 80012e0:	4613      	mov	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4413      	add	r3, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	3302      	adds	r3, #2
 80012ea:	4602      	mov	r2, r0
 80012ec:	701a      	strb	r2, [r3, #0]
			if(direction == west){
 80012ee:	4bb3      	ldr	r3, [pc, #716]	; (80015bc <start_fill+0x8c8>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d129      	bne.n	800134a <start_fill+0x656>
				if(rightfree){
 80012f6:	7cfb      	ldrb	r3, [r7, #19]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d017      	beq.n	800132c <start_fill+0x638>
					stack[i][0] = turn_right_90;
 80012fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001300:	49ac      	ldr	r1, [pc, #688]	; (80015b4 <start_fill+0x8c0>)
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	440b      	add	r3, r1
 800130a:	22ff      	movs	r2, #255	; 0xff
 800130c:	701a      	strb	r2, [r3, #0]
					go_straight(WidthOESide, 1);
 800130e:	4bac      	ldr	r3, [pc, #688]	; (80015c0 <start_fill+0x8cc>)
 8001310:	2101      	movs	r1, #1
 8001312:	4618      	mov	r0, r3
 8001314:	f002 fe42 	bl	8003f9c <go_straight>
					turn_right90(&direction);
 8001318:	48a8      	ldr	r0, [pc, #672]	; (80015bc <start_fill+0x8c8>)
 800131a:	f002 fd5d 	bl	8003dd8 <turn_right90>
					go_straight(WidthOESide, 0);
 800131e:	4ba8      	ldr	r3, [pc, #672]	; (80015c0 <start_fill+0x8cc>)
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fe3a 	bl	8003f9c <go_straight>
			if(direction == west){
 8001328:	f001 b85b 	b.w	80023e2 <start_fill+0x16ee>
					stack[i][0] = straight;
 800132c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001330:	49a0      	ldr	r1, [pc, #640]	; (80015b4 <start_fill+0x8c0>)
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	440b      	add	r3, r1
 800133a:	22fa      	movs	r2, #250	; 0xfa
 800133c:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 800133e:	2100      	movs	r1, #0
 8001340:	48a0      	ldr	r0, [pc, #640]	; (80015c4 <start_fill+0x8d0>)
 8001342:	f002 fe2b 	bl	8003f9c <go_straight>
			if(direction == west){
 8001346:	f001 b84c 	b.w	80023e2 <start_fill+0x16ee>
			} else if(direction == east){
 800134a:	4b9c      	ldr	r3, [pc, #624]	; (80015bc <start_fill+0x8c8>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d133      	bne.n	80013ba <start_fill+0x6c6>
				if(leftfree){
 8001352:	7d3b      	ldrb	r3, [r7, #20]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d021      	beq.n	800139c <start_fill+0x6a8>
					stack[i][0] = turn_left_90;
 8001358:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800135c:	4995      	ldr	r1, [pc, #596]	; (80015b4 <start_fill+0x8c0>)
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	440b      	add	r3, r1
 8001366:	22fc      	movs	r2, #252	; 0xfc
 8001368:	701a      	strb	r2, [r3, #0]
					go_straight(WidthOESide + dbtWheels_c, 1);
 800136a:	4b95      	ldr	r3, [pc, #596]	; (80015c0 <start_fill+0x8cc>)
 800136c:	4996      	ldr	r1, [pc, #600]	; (80015c8 <start_fill+0x8d4>)
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fa22 	bl	80007b8 <__addsf3>
 8001374:	4603      	mov	r3, r0
 8001376:	2101      	movs	r1, #1
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fe0f 	bl	8003f9c <go_straight>
					turn_left90(&direction);
 800137e:	488f      	ldr	r0, [pc, #572]	; (80015bc <start_fill+0x8c8>)
 8001380:	f002 fc7a 	bl	8003c78 <turn_left90>
					go_straight(WidthOESide - dbtWheels_c, 0);
 8001384:	4b8e      	ldr	r3, [pc, #568]	; (80015c0 <start_fill+0x8cc>)
 8001386:	4990      	ldr	r1, [pc, #576]	; (80015c8 <start_fill+0x8d4>)
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fa13 	bl	80007b4 <__aeabi_fsub>
 800138e:	4603      	mov	r3, r0
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fe02 	bl	8003f9c <go_straight>
			if(direction == west){
 8001398:	f001 b823 	b.w	80023e2 <start_fill+0x16ee>
					stack[i][0] = straight;
 800139c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80013a0:	4984      	ldr	r1, [pc, #528]	; (80015b4 <start_fill+0x8c0>)
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	22fa      	movs	r2, #250	; 0xfa
 80013ac:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 80013ae:	2100      	movs	r1, #0
 80013b0:	4884      	ldr	r0, [pc, #528]	; (80015c4 <start_fill+0x8d0>)
 80013b2:	f002 fdf3 	bl	8003f9c <go_straight>
			if(direction == west){
 80013b6:	f001 b814 	b.w	80023e2 <start_fill+0x16ee>
				if(frontfree){
 80013ba:	7d7b      	ldrb	r3, [r7, #21]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00e      	beq.n	80013de <start_fill+0x6ea>
					stack[i][0] = straight;
 80013c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80013c4:	497b      	ldr	r1, [pc, #492]	; (80015b4 <start_fill+0x8c0>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	22fa      	movs	r2, #250	; 0xfa
 80013d0:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 80013d2:	2100      	movs	r1, #0
 80013d4:	487b      	ldr	r0, [pc, #492]	; (80015c4 <start_fill+0x8d0>)
 80013d6:	f002 fde1 	bl	8003f9c <go_straight>
			if(direction == west){
 80013da:	f001 b802 	b.w	80023e2 <start_fill+0x16ee>
					stack[i][0] = turn_left_90;
 80013de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80013e2:	4974      	ldr	r1, [pc, #464]	; (80015b4 <start_fill+0x8c0>)
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	22fc      	movs	r2, #252	; 0xfc
 80013ee:	701a      	strb	r2, [r3, #0]
					go_straight(WidthOESide + dbtWheels_c, 1);
 80013f0:	4b73      	ldr	r3, [pc, #460]	; (80015c0 <start_fill+0x8cc>)
 80013f2:	4975      	ldr	r1, [pc, #468]	; (80015c8 <start_fill+0x8d4>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f9df 	bl	80007b8 <__addsf3>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2101      	movs	r1, #1
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fdcc 	bl	8003f9c <go_straight>
					turn_left90(&direction);
 8001404:	486d      	ldr	r0, [pc, #436]	; (80015bc <start_fill+0x8c8>)
 8001406:	f002 fc37 	bl	8003c78 <turn_left90>
					go_straight(WidthOESide - dbtWheels_c, 0);
 800140a:	4b6d      	ldr	r3, [pc, #436]	; (80015c0 <start_fill+0x8cc>)
 800140c:	496e      	ldr	r1, [pc, #440]	; (80015c8 <start_fill+0x8d4>)
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f9d0 	bl	80007b4 <__aeabi_fsub>
 8001414:	4603      	mov	r3, r0
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fdbf 	bl	8003f9c <go_straight>
			if(direction == west){
 800141e:	f000 bfe0 	b.w	80023e2 <start_fill+0x16ee>
		} else if(leftfree || rightfree || frontfree){
 8001422:	7d3b      	ldrb	r3, [r7, #20]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d106      	bne.n	8001436 <start_fill+0x742>
 8001428:	7cfb      	ldrb	r3, [r7, #19]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d103      	bne.n	8001436 <start_fill+0x742>
 800142e:	7d7b      	ldrb	r3, [r7, #21]
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80cb 	beq.w	80015cc <start_fill+0x8d8>
			if(frontfree){
 8001436:	7d7b      	ldrb	r3, [r7, #21]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d058      	beq.n	80014ee <start_fill+0x7fa>
				if(stack[i][0] == straight && stack[i][1] == -1){
 800143c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001440:	495c      	ldr	r1, [pc, #368]	; (80015b4 <start_fill+0x8c0>)
 8001442:	4613      	mov	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	440b      	add	r3, r1
 800144a:	f993 3000 	ldrsb.w	r3, [r3]
 800144e:	f113 0f06 	cmn.w	r3, #6
 8001452:	d123      	bne.n	800149c <start_fill+0x7a8>
 8001454:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001458:	4956      	ldr	r1, [pc, #344]	; (80015b4 <start_fill+0x8c0>)
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	440b      	add	r3, r1
 8001462:	3301      	adds	r3, #1
 8001464:	f993 3000 	ldrsb.w	r3, [r3]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d116      	bne.n	800149c <start_fill+0x7a8>
					stack[i][2]++;
 800146e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001472:	4950      	ldr	r1, [pc, #320]	; (80015b4 <start_fill+0x8c0>)
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	440b      	add	r3, r1
 800147c:	3302      	adds	r3, #2
 800147e:	f993 3000 	ldrsb.w	r3, [r3]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	3301      	adds	r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	b258      	sxtb	r0, r3
 800148a:	494a      	ldr	r1, [pc, #296]	; (80015b4 <start_fill+0x8c0>)
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	440b      	add	r3, r1
 8001494:	3302      	adds	r3, #2
 8001496:	4602      	mov	r2, r0
 8001498:	701a      	strb	r2, [r3, #0]
 800149a:	e022      	b.n	80014e2 <start_fill+0x7ee>
					i++;
 800149c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	82fb      	strh	r3, [r7, #22]
					stack[i][0] = straight;
 80014a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014ac:	4941      	ldr	r1, [pc, #260]	; (80015b4 <start_fill+0x8c0>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	440b      	add	r3, r1
 80014b6:	22fa      	movs	r2, #250	; 0xfa
 80014b8:	701a      	strb	r2, [r3, #0]
					stack[i][1] = -1;
 80014ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014be:	493d      	ldr	r1, [pc, #244]	; (80015b4 <start_fill+0x8c0>)
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	3301      	adds	r3, #1
 80014ca:	22ff      	movs	r2, #255	; 0xff
 80014cc:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 80014ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014d2:	4938      	ldr	r1, [pc, #224]	; (80015b4 <start_fill+0x8c0>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	440b      	add	r3, r1
 80014dc:	3302      	adds	r3, #2
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
				go_straight(square_size, 0);
 80014e2:	2100      	movs	r1, #0
 80014e4:	4837      	ldr	r0, [pc, #220]	; (80015c4 <start_fill+0x8d0>)
 80014e6:	f002 fd59 	bl	8003f9c <go_straight>
			if(frontfree){
 80014ea:	f000 bf6d 	b.w	80023c8 <start_fill+0x16d4>
			} else if(leftfree){
 80014ee:	7d3b      	ldrb	r3, [r7, #20]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d031      	beq.n	8001558 <start_fill+0x864>
				i++;
 80014f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	3301      	adds	r3, #1
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	82fb      	strh	r3, [r7, #22]
				stack[i][0] = turn_left_90;
 8001500:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001504:	492b      	ldr	r1, [pc, #172]	; (80015b4 <start_fill+0x8c0>)
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	440b      	add	r3, r1
 800150e:	22fc      	movs	r2, #252	; 0xfc
 8001510:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 8001512:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001516:	4927      	ldr	r1, [pc, #156]	; (80015b4 <start_fill+0x8c0>)
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	440b      	add	r3, r1
 8001520:	3301      	adds	r3, #1
 8001522:	22ff      	movs	r2, #255	; 0xff
 8001524:	701a      	strb	r2, [r3, #0]
				go_straight(WidthOESide + dbtWheels_c, 1);
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <start_fill+0x8cc>)
 8001528:	4927      	ldr	r1, [pc, #156]	; (80015c8 <start_fill+0x8d4>)
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f944 	bl	80007b8 <__addsf3>
 8001530:	4603      	mov	r3, r0
 8001532:	2101      	movs	r1, #1
 8001534:	4618      	mov	r0, r3
 8001536:	f002 fd31 	bl	8003f9c <go_straight>
				turn_left90(&direction);
 800153a:	4820      	ldr	r0, [pc, #128]	; (80015bc <start_fill+0x8c8>)
 800153c:	f002 fb9c 	bl	8003c78 <turn_left90>
				go_straight(WidthOESide - dbtWheels_c, 0);
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <start_fill+0x8cc>)
 8001542:	4921      	ldr	r1, [pc, #132]	; (80015c8 <start_fill+0x8d4>)
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff f935 	bl	80007b4 <__aeabi_fsub>
 800154a:	4603      	mov	r3, r0
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fd24 	bl	8003f9c <go_straight>
			if(frontfree){
 8001554:	f000 bf38 	b.w	80023c8 <start_fill+0x16d4>
			} else if(rightfree){
 8001558:	7cfb      	ldrb	r3, [r7, #19]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8734 	beq.w	80023c8 <start_fill+0x16d4>
				i++;
 8001560:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001564:	b29b      	uxth	r3, r3
 8001566:	3301      	adds	r3, #1
 8001568:	b29b      	uxth	r3, r3
 800156a:	82fb      	strh	r3, [r7, #22]
				stack[i][0] = turn_right_90;
 800156c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001570:	4910      	ldr	r1, [pc, #64]	; (80015b4 <start_fill+0x8c0>)
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	440b      	add	r3, r1
 800157a:	22ff      	movs	r2, #255	; 0xff
 800157c:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 800157e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001582:	490c      	ldr	r1, [pc, #48]	; (80015b4 <start_fill+0x8c0>)
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	440b      	add	r3, r1
 800158c:	3301      	adds	r3, #1
 800158e:	22ff      	movs	r2, #255	; 0xff
 8001590:	701a      	strb	r2, [r3, #0]
				go_straight(WidthOESide, 1);
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <start_fill+0x8cc>)
 8001594:	2101      	movs	r1, #1
 8001596:	4618      	mov	r0, r3
 8001598:	f002 fd00 	bl	8003f9c <go_straight>
				turn_right90(&direction);
 800159c:	4807      	ldr	r0, [pc, #28]	; (80015bc <start_fill+0x8c8>)
 800159e:	f002 fc1b 	bl	8003dd8 <turn_right90>
				go_straight(WidthOESide, 0);
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <start_fill+0x8cc>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 fcf8 	bl	8003f9c <go_straight>
			if(frontfree){
 80015ac:	f000 bf0c 	b.w	80023c8 <start_fill+0x16d4>
 80015b0:	20000418 	.word	0x20000418
 80015b4:	200002ec 	.word	0x200002ec
 80015b8:	20000419 	.word	0x20000419
 80015bc:	2000041a 	.word	0x2000041a
 80015c0:	42cc0000 	.word	0x42cc0000
 80015c4:	43960000 	.word	0x43960000
 80015c8:	42340000 	.word	0x42340000
			go_straight(dbtWheels_c * 2, 1);
 80015cc:	2101      	movs	r1, #1
 80015ce:	48b8      	ldr	r0, [pc, #736]	; (80018b0 <start_fill+0xbbc>)
 80015d0:	f002 fce4 	bl	8003f9c <go_straight>
			u_turnf(&direction);
 80015d4:	48b7      	ldr	r0, [pc, #732]	; (80018b4 <start_fill+0xbc0>)
 80015d6:	f002 faad 	bl	8003b34 <u_turnf>
			if(stack[i][1] != -1 &&
 80015da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015de:	49b6      	ldr	r1, [pc, #728]	; (80018b8 <start_fill+0xbc4>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	3301      	adds	r3, #1
 80015ea:	f993 3000 	ldrsb.w	r3, [r3]
 80015ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f2:	f000 82b5 	beq.w	8001b60 <start_fill+0xe6c>
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 80015f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015fa:	49af      	ldr	r1, [pc, #700]	; (80018b8 <start_fill+0xbc4>)
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	440b      	add	r3, r1
 8001604:	3302      	adds	r3, #2
 8001606:	f993 3000 	ldrsb.w	r3, [r3]
 800160a:	4618      	mov	r0, r3
 800160c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001610:	49a9      	ldr	r1, [pc, #676]	; (80018b8 <start_fill+0xbc4>)
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	440b      	add	r3, r1
 800161a:	3301      	adds	r3, #1
 800161c:	f993 3000 	ldrsb.w	r3, [r3]
 8001620:	4619      	mov	r1, r3
 8001622:	4aa6      	ldr	r2, [pc, #664]	; (80018bc <start_fill+0xbc8>)
 8001624:	4603      	mov	r3, r0
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4403      	add	r3, r0
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	440b      	add	r3, r1
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
			if(stack[i][1] != -1 &&
 8001636:	2b00      	cmp	r3, #0
 8001638:	d120      	bne.n	800167c <start_fill+0x988>
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 800163a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800163e:	499e      	ldr	r1, [pc, #632]	; (80018b8 <start_fill+0xbc4>)
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	440b      	add	r3, r1
 8001648:	3302      	adds	r3, #2
 800164a:	f993 3000 	ldrsb.w	r3, [r3]
 800164e:	4618      	mov	r0, r3
 8001650:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001654:	4998      	ldr	r1, [pc, #608]	; (80018b8 <start_fill+0xbc4>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	440b      	add	r3, r1
 800165e:	3301      	adds	r3, #1
 8001660:	f993 3000 	ldrsb.w	r3, [r3]
 8001664:	1e5a      	subs	r2, r3, #1
 8001666:	4996      	ldr	r1, [pc, #600]	; (80018c0 <start_fill+0xbcc>)
 8001668:	4603      	mov	r3, r0
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4403      	add	r3, r0
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	440b      	add	r3, r1
 8001672:	4413      	add	r3, r2
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8272 	beq.w	8001b60 <start_fill+0xe6c>
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 800167c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001680:	498d      	ldr	r1, [pc, #564]	; (80018b8 <start_fill+0xbc4>)
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	440b      	add	r3, r1
 800168a:	3302      	adds	r3, #2
 800168c:	f993 3000 	ldrsb.w	r3, [r3]
 8001690:	4618      	mov	r0, r3
 8001692:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001696:	4988      	ldr	r1, [pc, #544]	; (80018b8 <start_fill+0xbc4>)
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	440b      	add	r3, r1
 80016a0:	3301      	adds	r3, #1
 80016a2:	f993 3000 	ldrsb.w	r3, [r3]
 80016a6:	4619      	mov	r1, r3
 80016a8:	4a84      	ldr	r2, [pc, #528]	; (80018bc <start_fill+0xbc8>)
 80016aa:	4603      	mov	r3, r0
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4403      	add	r3, r0
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d120      	bne.n	8001702 <start_fill+0xa0e>
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80016c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016c4:	497c      	ldr	r1, [pc, #496]	; (80018b8 <start_fill+0xbc4>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	3302      	adds	r3, #2
 80016d0:	f993 3000 	ldrsb.w	r3, [r3]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016da:	4977      	ldr	r1, [pc, #476]	; (80018b8 <start_fill+0xbc4>)
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	3301      	adds	r3, #1
 80016e6:	f993 3000 	ldrsb.w	r3, [r3]
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	4974      	ldr	r1, [pc, #464]	; (80018c0 <start_fill+0xbcc>)
 80016ee:	4603      	mov	r3, r0
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4403      	add	r3, r0
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	440b      	add	r3, r1
 80016f8:	4413      	add	r3, r2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 822f 	beq.w	8001b60 <start_fill+0xe6c>
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001702:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001706:	496c      	ldr	r1, [pc, #432]	; (80018b8 <start_fill+0xbc4>)
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	440b      	add	r3, r1
 8001710:	3302      	adds	r3, #2
 8001712:	f993 3000 	ldrsb.w	r3, [r3]
 8001716:	4618      	mov	r0, r3
 8001718:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800171c:	4966      	ldr	r1, [pc, #408]	; (80018b8 <start_fill+0xbc4>)
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	440b      	add	r3, r1
 8001726:	3301      	adds	r3, #1
 8001728:	f993 3000 	ldrsb.w	r3, [r3]
 800172c:	4619      	mov	r1, r3
 800172e:	4a63      	ldr	r2, [pc, #396]	; (80018bc <start_fill+0xbc8>)
 8001730:	4603      	mov	r3, r0
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4403      	add	r3, r0
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	440b      	add	r3, r1
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d120      	bne.n	8001788 <start_fill+0xa94>
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001746:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800174a:	495b      	ldr	r1, [pc, #364]	; (80018b8 <start_fill+0xbc4>)
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	440b      	add	r3, r1
 8001754:	3302      	adds	r3, #2
 8001756:	f993 3000 	ldrsb.w	r3, [r3]
 800175a:	1e5a      	subs	r2, r3, #1
 800175c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001760:	4855      	ldr	r0, [pc, #340]	; (80018b8 <start_fill+0xbc4>)
 8001762:	460b      	mov	r3, r1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	440b      	add	r3, r1
 8001768:	4403      	add	r3, r0
 800176a:	3301      	adds	r3, #1
 800176c:	f993 3000 	ldrsb.w	r3, [r3]
 8001770:	4618      	mov	r0, r3
 8001772:	4953      	ldr	r1, [pc, #332]	; (80018c0 <start_fill+0xbcc>)
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	440b      	add	r3, r1
 800177e:	4403      	add	r3, r0
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 81ec 	beq.w	8001b60 <start_fill+0xe6c>
					((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001788:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800178c:	494a      	ldr	r1, [pc, #296]	; (80018b8 <start_fill+0xbc4>)
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	440b      	add	r3, r1
 8001796:	3302      	adds	r3, #2
 8001798:	f993 3000 	ldrsb.w	r3, [r3]
 800179c:	4618      	mov	r0, r3
 800179e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017a2:	4945      	ldr	r1, [pc, #276]	; (80018b8 <start_fill+0xbc4>)
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	3301      	adds	r3, #1
 80017ae:	f993 3000 	ldrsb.w	r3, [r3]
 80017b2:	4619      	mov	r1, r3
 80017b4:	4a41      	ldr	r2, [pc, #260]	; (80018bc <start_fill+0xbc8>)
 80017b6:	4603      	mov	r3, r0
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4403      	add	r3, r0
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	f003 0301 	and.w	r3, r3, #1
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d120      	bne.n	800180e <start_fill+0xb1a>
					((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 80017cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017d0:	4939      	ldr	r1, [pc, #228]	; (80018b8 <start_fill+0xbc4>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	440b      	add	r3, r1
 80017da:	3302      	adds	r3, #2
 80017dc:	f993 3000 	ldrsb.w	r3, [r3]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80017e6:	4834      	ldr	r0, [pc, #208]	; (80018b8 <start_fill+0xbc4>)
 80017e8:	460b      	mov	r3, r1
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	440b      	add	r3, r1
 80017ee:	4403      	add	r3, r0
 80017f0:	3301      	adds	r3, #1
 80017f2:	f993 3000 	ldrsb.w	r3, [r3]
 80017f6:	4618      	mov	r0, r3
 80017f8:	4931      	ldr	r1, [pc, #196]	; (80018c0 <start_fill+0xbcc>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	440b      	add	r3, r1
 8001804:	4403      	add	r3, r0
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 81a9 	beq.w	8001b60 <start_fill+0xe6c>
				stack[i][1] = -1;
 800180e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001812:	4929      	ldr	r1, [pc, #164]	; (80018b8 <start_fill+0xbc4>)
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	440b      	add	r3, r1
 800181c:	3301      	adds	r3, #1
 800181e:	22ff      	movs	r2, #255	; 0xff
 8001820:	701a      	strb	r2, [r3, #0]
				stack[i][2] = 1;
 8001822:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001826:	4924      	ldr	r1, [pc, #144]	; (80018b8 <start_fill+0xbc4>)
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	440b      	add	r3, r1
 8001830:	3302      	adds	r3, #2
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
			while(stack[i][1] == -1){
 8001836:	e193      	b.n	8001b60 <start_fill+0xe6c>
				switch(stack[i][0]){
 8001838:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800183c:	491e      	ldr	r1, [pc, #120]	; (80018b8 <start_fill+0xbc4>)
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	440b      	add	r3, r1
 8001846:	f993 3000 	ldrsb.w	r3, [r3]
 800184a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184e:	d03d      	beq.n	80018cc <start_fill+0xbd8>
 8001850:	2b00      	cmp	r3, #0
 8001852:	da53      	bge.n	80018fc <start_fill+0xc08>
 8001854:	f113 0f06 	cmn.w	r3, #6
 8001858:	d003      	beq.n	8001862 <start_fill+0xb6e>
 800185a:	f113 0f04 	cmn.w	r3, #4
 800185e:	d018      	beq.n	8001892 <start_fill+0xb9e>
 8001860:	e04c      	b.n	80018fc <start_fill+0xc08>
						go_straight((float)stack[i][2] * square_size, 0);
 8001862:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001866:	4914      	ldr	r1, [pc, #80]	; (80018b8 <start_fill+0xbc4>)
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	440b      	add	r3, r1
 8001870:	3302      	adds	r3, #2
 8001872:	f993 3000 	ldrsb.w	r3, [r3]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff f852 	bl	8000920 <__aeabi_i2f>
 800187c:	4603      	mov	r3, r0
 800187e:	4911      	ldr	r1, [pc, #68]	; (80018c4 <start_fill+0xbd0>)
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f8a1 	bl	80009c8 <__aeabi_fmul>
 8001886:	4603      	mov	r3, r0
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f002 fb86 	bl	8003f9c <go_straight>
						break;
 8001890:	e034      	b.n	80018fc <start_fill+0xc08>
						go_straight(WidthOESide, 1);
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <start_fill+0xbd4>)
 8001894:	2101      	movs	r1, #1
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fb80 	bl	8003f9c <go_straight>
						turn_right90(&direction);
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <start_fill+0xbc0>)
 800189e:	f002 fa9b 	bl	8003dd8 <turn_right90>
						go_straight(WidthOESide, 0);
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <start_fill+0xbd4>)
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 fb78 	bl	8003f9c <go_straight>
						break;
 80018ac:	e026      	b.n	80018fc <start_fill+0xc08>
 80018ae:	bf00      	nop
 80018b0:	42b40000 	.word	0x42b40000
 80018b4:	2000041a 	.word	0x2000041a
 80018b8:	200002ec 	.word	0x200002ec
 80018bc:	20000590 	.word	0x20000590
 80018c0:	200005f4 	.word	0x200005f4
 80018c4:	43960000 	.word	0x43960000
 80018c8:	42cc0000 	.word	0x42cc0000
						go_straight(WidthOESide + dbtWheels_c, 1);
 80018cc:	4bbf      	ldr	r3, [pc, #764]	; (8001bcc <start_fill+0xed8>)
 80018ce:	49c0      	ldr	r1, [pc, #768]	; (8001bd0 <start_fill+0xedc>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe ff71 	bl	80007b8 <__addsf3>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2101      	movs	r1, #1
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 fb5e 	bl	8003f9c <go_straight>
						turn_left90(&direction);
 80018e0:	48bc      	ldr	r0, [pc, #752]	; (8001bd4 <start_fill+0xee0>)
 80018e2:	f002 f9c9 	bl	8003c78 <turn_left90>
						go_straight(WidthOESide - dbtWheels_c, 0);
 80018e6:	4bb9      	ldr	r3, [pc, #740]	; (8001bcc <start_fill+0xed8>)
 80018e8:	49b9      	ldr	r1, [pc, #740]	; (8001bd0 <start_fill+0xedc>)
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe ff62 	bl	80007b4 <__aeabi_fsub>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 fb51 	bl	8003f9c <go_straight>
						break;
 80018fa:	bf00      	nop
				i--;
 80018fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001900:	b29b      	uxth	r3, r3
 8001902:	3b01      	subs	r3, #1
 8001904:	b29b      	uxth	r3, r3
 8001906:	82fb      	strh	r3, [r7, #22]
				if(stack[i][1] != -1 &&
 8001908:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800190c:	49b2      	ldr	r1, [pc, #712]	; (8001bd8 <start_fill+0xee4>)
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	440b      	add	r3, r1
 8001916:	3301      	adds	r3, #1
 8001918:	f993 3000 	ldrsb.w	r3, [r3]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	f000 811e 	beq.w	8001b60 <start_fill+0xe6c>
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001924:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001928:	49ab      	ldr	r1, [pc, #684]	; (8001bd8 <start_fill+0xee4>)
 800192a:	4613      	mov	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	440b      	add	r3, r1
 8001932:	3302      	adds	r3, #2
 8001934:	f993 3000 	ldrsb.w	r3, [r3]
 8001938:	4618      	mov	r0, r3
 800193a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800193e:	49a6      	ldr	r1, [pc, #664]	; (8001bd8 <start_fill+0xee4>)
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	440b      	add	r3, r1
 8001948:	3301      	adds	r3, #1
 800194a:	f993 3000 	ldrsb.w	r3, [r3]
 800194e:	4619      	mov	r1, r3
 8001950:	4aa2      	ldr	r2, [pc, #648]	; (8001bdc <start_fill+0xee8>)
 8001952:	4603      	mov	r3, r0
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4403      	add	r3, r0
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	440b      	add	r3, r1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
				if(stack[i][1] != -1 &&
 8001964:	2b00      	cmp	r3, #0
 8001966:	d120      	bne.n	80019aa <start_fill+0xcb6>
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001968:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800196c:	499a      	ldr	r1, [pc, #616]	; (8001bd8 <start_fill+0xee4>)
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	440b      	add	r3, r1
 8001976:	3302      	adds	r3, #2
 8001978:	f993 3000 	ldrsb.w	r3, [r3]
 800197c:	4618      	mov	r0, r3
 800197e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001982:	4995      	ldr	r1, [pc, #596]	; (8001bd8 <start_fill+0xee4>)
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	440b      	add	r3, r1
 800198c:	3301      	adds	r3, #1
 800198e:	f993 3000 	ldrsb.w	r3, [r3]
 8001992:	1e5a      	subs	r2, r3, #1
 8001994:	4992      	ldr	r1, [pc, #584]	; (8001be0 <start_fill+0xeec>)
 8001996:	4603      	mov	r3, r0
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4403      	add	r3, r0
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	440b      	add	r3, r1
 80019a0:	4413      	add	r3, r2
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80db 	beq.w	8001b60 <start_fill+0xe6c>
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80019aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019ae:	498a      	ldr	r1, [pc, #552]	; (8001bd8 <start_fill+0xee4>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	3302      	adds	r3, #2
 80019ba:	f993 3000 	ldrsb.w	r3, [r3]
 80019be:	4618      	mov	r0, r3
 80019c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019c4:	4984      	ldr	r1, [pc, #528]	; (8001bd8 <start_fill+0xee4>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	440b      	add	r3, r1
 80019ce:	3301      	adds	r3, #1
 80019d0:	f993 3000 	ldrsb.w	r3, [r3]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4a81      	ldr	r2, [pc, #516]	; (8001bdc <start_fill+0xee8>)
 80019d8:	4603      	mov	r3, r0
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4403      	add	r3, r0
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	f003 0304 	and.w	r3, r3, #4
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d120      	bne.n	8001a30 <start_fill+0xd3c>
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80019ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019f2:	4979      	ldr	r1, [pc, #484]	; (8001bd8 <start_fill+0xee4>)
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	3302      	adds	r3, #2
 80019fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a08:	4973      	ldr	r1, [pc, #460]	; (8001bd8 <start_fill+0xee4>)
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	3301      	adds	r3, #1
 8001a14:	f993 3000 	ldrsb.w	r3, [r3]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	4971      	ldr	r1, [pc, #452]	; (8001be0 <start_fill+0xeec>)
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4403      	add	r3, r0
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	440b      	add	r3, r1
 8001a26:	4413      	add	r3, r2
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8098 	beq.w	8001b60 <start_fill+0xe6c>
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001a30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a34:	4968      	ldr	r1, [pc, #416]	; (8001bd8 <start_fill+0xee4>)
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3302      	adds	r3, #2
 8001a40:	f993 3000 	ldrsb.w	r3, [r3]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a4a:	4963      	ldr	r1, [pc, #396]	; (8001bd8 <start_fill+0xee4>)
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	3301      	adds	r3, #1
 8001a56:	f993 3000 	ldrsb.w	r3, [r3]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4a5f      	ldr	r2, [pc, #380]	; (8001bdc <start_fill+0xee8>)
 8001a5e:	4603      	mov	r3, r0
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4403      	add	r3, r0
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d11f      	bne.n	8001ab4 <start_fill+0xdc0>
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001a74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a78:	4957      	ldr	r1, [pc, #348]	; (8001bd8 <start_fill+0xee4>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	3302      	adds	r3, #2
 8001a84:	f993 3000 	ldrsb.w	r3, [r3]
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001a8e:	4852      	ldr	r0, [pc, #328]	; (8001bd8 <start_fill+0xee4>)
 8001a90:	460b      	mov	r3, r1
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	440b      	add	r3, r1
 8001a96:	4403      	add	r3, r0
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	494f      	ldr	r1, [pc, #316]	; (8001be0 <start_fill+0xeec>)
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	440b      	add	r3, r1
 8001aac:	4403      	add	r3, r0
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d055      	beq.n	8001b60 <start_fill+0xe6c>
						((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001ab4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ab8:	4947      	ldr	r1, [pc, #284]	; (8001bd8 <start_fill+0xee4>)
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ace:	4942      	ldr	r1, [pc, #264]	; (8001bd8 <start_fill+0xee4>)
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f993 3000 	ldrsb.w	r3, [r3]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4a3e      	ldr	r2, [pc, #248]	; (8001bdc <start_fill+0xee8>)
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4403      	add	r3, r0
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d11f      	bne.n	8001b38 <start_fill+0xe44>
						((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001af8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001afc:	4936      	ldr	r1, [pc, #216]	; (8001bd8 <start_fill+0xee4>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	3302      	adds	r3, #2
 8001b08:	f993 3000 	ldrsb.w	r3, [r3]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001b12:	4831      	ldr	r0, [pc, #196]	; (8001bd8 <start_fill+0xee4>)
 8001b14:	460b      	mov	r3, r1
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	440b      	add	r3, r1
 8001b1a:	4403      	add	r3, r0
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b22:	4618      	mov	r0, r3
 8001b24:	492e      	ldr	r1, [pc, #184]	; (8001be0 <start_fill+0xeec>)
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	440b      	add	r3, r1
 8001b30:	4403      	add	r3, r0
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d013      	beq.n	8001b60 <start_fill+0xe6c>
					stack[i][1] = -1;
 8001b38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b3c:	4926      	ldr	r1, [pc, #152]	; (8001bd8 <start_fill+0xee4>)
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	3301      	adds	r3, #1
 8001b48:	22ff      	movs	r2, #255	; 0xff
 8001b4a:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 8001b4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b50:	4921      	ldr	r1, [pc, #132]	; (8001bd8 <start_fill+0xee4>)
 8001b52:	4613      	mov	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
			while(stack[i][1] == -1){
 8001b60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b64:	491c      	ldr	r1, [pc, #112]	; (8001bd8 <start_fill+0xee4>)
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f993 3000 	ldrsb.w	r3, [r3]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	f43f ae5e 	beq.w	8001838 <start_fill+0xb44>
			x = stack[i][1];
 8001b7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b80:	4915      	ldr	r1, [pc, #84]	; (8001bd8 <start_fill+0xee4>)
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f993 2000 	ldrsb.w	r2, [r3]
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <start_fill+0xef0>)
 8001b92:	701a      	strb	r2, [r3, #0]
			y = stack[i][2];
 8001b94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b98:	490f      	ldr	r1, [pc, #60]	; (8001bd8 <start_fill+0xee4>)
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	f993 2000 	ldrsb.w	r2, [r3]
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <start_fill+0xef4>)
 8001baa:	701a      	strb	r2, [r3, #0]
			switch(direction){
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <start_fill+0xee0>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	f63f a8f8 	bhi.w	8000da6 <start_fill+0xb2>
 8001bb6:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <start_fill+0xec8>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001bed 	.word	0x08001bed
 8001bc0:	08001d5d 	.word	0x08001d5d
 8001bc4:	08001ef1 	.word	0x08001ef1
 8001bc8:	08002061 	.word	0x08002061
 8001bcc:	42cc0000 	.word	0x42cc0000
 8001bd0:	42340000 	.word	0x42340000
 8001bd4:	2000041a 	.word	0x2000041a
 8001bd8:	200002ec 	.word	0x200002ec
 8001bdc:	20000590 	.word	0x20000590
 8001be0:	200005f4 	.word	0x200005f4
 8001be4:	20000418 	.word	0x20000418
 8001be8:	20000419 	.word	0x20000419
					if(stack[i][0] == straight){
 8001bec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001bf0:	49b6      	ldr	r1, [pc, #728]	; (8001ecc <start_fill+0x11d8>)
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	f993 3000 	ldrsb.w	r3, [r3]
 8001bfe:	f113 0f06 	cmn.w	r3, #6
 8001c02:	f040 808c 	bne.w	8001d1e <start_fill+0x102a>
						if((maze[y][x] & top_wall) == 0 && !visited[y - 1][x]){
 8001c06:	4bb2      	ldr	r3, [pc, #712]	; (8001ed0 <start_fill+0x11dc>)
 8001c08:	f993 3000 	ldrsb.w	r3, [r3]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4bb1      	ldr	r3, [pc, #708]	; (8001ed4 <start_fill+0x11e0>)
 8001c10:	f993 3000 	ldrsb.w	r3, [r3]
 8001c14:	4618      	mov	r0, r3
 8001c16:	4ab0      	ldr	r2, [pc, #704]	; (8001ed8 <start_fill+0x11e4>)
 8001c18:	460b      	mov	r3, r1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	4403      	add	r3, r0
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d12b      	bne.n	8001c86 <start_fill+0xf92>
 8001c2e:	4ba8      	ldr	r3, [pc, #672]	; (8001ed0 <start_fill+0x11dc>)
 8001c30:	f993 3000 	ldrsb.w	r3, [r3]
 8001c34:	1e5a      	subs	r2, r3, #1
 8001c36:	4ba7      	ldr	r3, [pc, #668]	; (8001ed4 <start_fill+0x11e0>)
 8001c38:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	49a7      	ldr	r1, [pc, #668]	; (8001edc <start_fill+0x11e8>)
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	440b      	add	r3, r1
 8001c4a:	4403      	add	r3, r0
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	f083 0301 	eor.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d016      	beq.n	8001c86 <start_fill+0xf92>
							stack[i][0] = turn_left_90;
 8001c58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c5c:	499b      	ldr	r1, [pc, #620]	; (8001ecc <start_fill+0x11d8>)
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	22fc      	movs	r2, #252	; 0xfc
 8001c68:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 8001c6a:	4b9d      	ldr	r3, [pc, #628]	; (8001ee0 <start_fill+0x11ec>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 f994 	bl	8003f9c <go_straight>
							turn_right90(&direction);
 8001c74:	489b      	ldr	r0, [pc, #620]	; (8001ee4 <start_fill+0x11f0>)
 8001c76:	f002 f8af 	bl	8003dd8 <turn_right90>
							go_straight(WidthOESide, 0);
 8001c7a:	4b99      	ldr	r3, [pc, #612]	; (8001ee0 <start_fill+0x11ec>)
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 f98c 	bl	8003f9c <go_straight>
					break;
 8001c84:	e3a3      	b.n	80023ce <start_fill+0x16da>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8001c86:	4b92      	ldr	r3, [pc, #584]	; (8001ed0 <start_fill+0x11dc>)
 8001c88:	f993 3000 	ldrsb.w	r3, [r3]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4b91      	ldr	r3, [pc, #580]	; (8001ed4 <start_fill+0x11e0>)
 8001c90:	f993 3000 	ldrsb.w	r3, [r3]
 8001c94:	4618      	mov	r0, r3
 8001c96:	4a90      	ldr	r2, [pc, #576]	; (8001ed8 <start_fill+0x11e4>)
 8001c98:	460b      	mov	r3, r1
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4403      	add	r3, r0
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f040 838f 	bne.w	80023ce <start_fill+0x16da>
 8001cb0:	4b87      	ldr	r3, [pc, #540]	; (8001ed0 <start_fill+0x11dc>)
 8001cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	4b86      	ldr	r3, [pc, #536]	; (8001ed4 <start_fill+0x11e0>)
 8001cba:	f993 3000 	ldrsb.w	r3, [r3]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	4986      	ldr	r1, [pc, #536]	; (8001edc <start_fill+0x11e8>)
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	440b      	add	r3, r1
 8001ccc:	4403      	add	r3, r0
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	f083 0301 	eor.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8379 	beq.w	80023ce <start_fill+0x16da>
							stack[i][0] = turn_right_90;
 8001cdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ce0:	497a      	ldr	r1, [pc, #488]	; (8001ecc <start_fill+0x11d8>)
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	22ff      	movs	r2, #255	; 0xff
 8001cec:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 8001cee:	4b7c      	ldr	r3, [pc, #496]	; (8001ee0 <start_fill+0x11ec>)
 8001cf0:	497d      	ldr	r1, [pc, #500]	; (8001ee8 <start_fill+0x11f4>)
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fd60 	bl	80007b8 <__addsf3>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 f94d 	bl	8003f9c <go_straight>
							turn_left90(&direction);
 8001d02:	4878      	ldr	r0, [pc, #480]	; (8001ee4 <start_fill+0x11f0>)
 8001d04:	f001 ffb8 	bl	8003c78 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 8001d08:	4b75      	ldr	r3, [pc, #468]	; (8001ee0 <start_fill+0x11ec>)
 8001d0a:	4977      	ldr	r1, [pc, #476]	; (8001ee8 <start_fill+0x11f4>)
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fd51 	bl	80007b4 <__aeabi_fsub>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f002 f940 	bl	8003f9c <go_straight>
					break;
 8001d1c:	e357      	b.n	80023ce <start_fill+0x16da>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001d1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d22:	496a      	ldr	r1, [pc, #424]	; (8001ecc <start_fill+0x11d8>)
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d30:	f113 0f04 	cmn.w	r3, #4
 8001d34:	d102      	bne.n	8001d3c <start_fill+0x1048>
 8001d36:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3a:	e001      	b.n	8001d40 <start_fill+0x104c>
 8001d3c:	f06f 0003 	mvn.w	r0, #3
 8001d40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d44:	4961      	ldr	r1, [pc, #388]	; (8001ecc <start_fill+0x11d8>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	4602      	mov	r2, r0
 8001d50:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8001d52:	2100      	movs	r1, #0
 8001d54:	4865      	ldr	r0, [pc, #404]	; (8001eec <start_fill+0x11f8>)
 8001d56:	f002 f921 	bl	8003f9c <go_straight>
					break;
 8001d5a:	e338      	b.n	80023ce <start_fill+0x16da>
					if(stack[i][0] == straight){
 8001d5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d60:	495a      	ldr	r1, [pc, #360]	; (8001ecc <start_fill+0x11d8>)
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	440b      	add	r3, r1
 8001d6a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d6e:	f113 0f06 	cmn.w	r3, #6
 8001d72:	f040 808c 	bne.w	8001e8e <start_fill+0x119a>
						if(((maze[y][x] & top_wall) == 0) && !visited[y - 1][x]){
 8001d76:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <start_fill+0x11dc>)
 8001d78:	f993 3000 	ldrsb.w	r3, [r3]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4b55      	ldr	r3, [pc, #340]	; (8001ed4 <start_fill+0x11e0>)
 8001d80:	f993 3000 	ldrsb.w	r3, [r3]
 8001d84:	4618      	mov	r0, r3
 8001d86:	4a54      	ldr	r2, [pc, #336]	; (8001ed8 <start_fill+0x11e4>)
 8001d88:	460b      	mov	r3, r1
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	4403      	add	r3, r0
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d135      	bne.n	8001e0a <start_fill+0x1116>
 8001d9e:	4b4c      	ldr	r3, [pc, #304]	; (8001ed0 <start_fill+0x11dc>)
 8001da0:	f993 3000 	ldrsb.w	r3, [r3]
 8001da4:	1e5a      	subs	r2, r3, #1
 8001da6:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <start_fill+0x11e0>)
 8001da8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dac:	4618      	mov	r0, r3
 8001dae:	494b      	ldr	r1, [pc, #300]	; (8001edc <start_fill+0x11e8>)
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	440b      	add	r3, r1
 8001dba:	4403      	add	r3, r0
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	f083 0301 	eor.w	r3, r3, #1
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d020      	beq.n	8001e0a <start_fill+0x1116>
							stack[i][0] = turn_right_90;
 8001dc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001dcc:	493f      	ldr	r1, [pc, #252]	; (8001ecc <start_fill+0x11d8>)
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	22ff      	movs	r2, #255	; 0xff
 8001dd8:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 8001dda:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <start_fill+0x11ec>)
 8001ddc:	4942      	ldr	r1, [pc, #264]	; (8001ee8 <start_fill+0x11f4>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fcea 	bl	80007b8 <__addsf3>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2101      	movs	r1, #1
 8001de8:	4618      	mov	r0, r3
 8001dea:	f002 f8d7 	bl	8003f9c <go_straight>
							turn_left90(&direction);
 8001dee:	483d      	ldr	r0, [pc, #244]	; (8001ee4 <start_fill+0x11f0>)
 8001df0:	f001 ff42 	bl	8003c78 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 8001df4:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <start_fill+0x11ec>)
 8001df6:	493c      	ldr	r1, [pc, #240]	; (8001ee8 <start_fill+0x11f4>)
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fcdb 	bl	80007b4 <__aeabi_fsub>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 f8ca 	bl	8003f9c <go_straight>
					break;
 8001e08:	e2e4      	b.n	80023d4 <start_fill+0x16e0>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8001e0a:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <start_fill+0x11dc>)
 8001e0c:	f993 3000 	ldrsb.w	r3, [r3]
 8001e10:	4619      	mov	r1, r3
 8001e12:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <start_fill+0x11e0>)
 8001e14:	f993 3000 	ldrsb.w	r3, [r3]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ed8 <start_fill+0x11e4>)
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	4403      	add	r3, r0
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 82d0 	bne.w	80023d4 <start_fill+0x16e0>
 8001e34:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <start_fill+0x11dc>)
 8001e36:	f993 3000 	ldrsb.w	r3, [r3]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <start_fill+0x11e0>)
 8001e3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001e42:	4618      	mov	r0, r3
 8001e44:	4925      	ldr	r1, [pc, #148]	; (8001edc <start_fill+0x11e8>)
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	440b      	add	r3, r1
 8001e50:	4403      	add	r3, r0
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	f083 0301 	eor.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 82ba 	beq.w	80023d4 <start_fill+0x16e0>
							stack[i][0] = turn_left_90;
 8001e60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e64:	4919      	ldr	r1, [pc, #100]	; (8001ecc <start_fill+0x11d8>)
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	22fc      	movs	r2, #252	; 0xfc
 8001e70:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <start_fill+0x11ec>)
 8001e74:	2101      	movs	r1, #1
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 f890 	bl	8003f9c <go_straight>
							turn_right90(&direction);
 8001e7c:	4819      	ldr	r0, [pc, #100]	; (8001ee4 <start_fill+0x11f0>)
 8001e7e:	f001 ffab 	bl	8003dd8 <turn_right90>
							go_straight(WidthOESide, 0);
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <start_fill+0x11ec>)
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 f888 	bl	8003f9c <go_straight>
					break;
 8001e8c:	e2a2      	b.n	80023d4 <start_fill+0x16e0>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001e8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e92:	490e      	ldr	r1, [pc, #56]	; (8001ecc <start_fill+0x11d8>)
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f993 3000 	ldrsb.w	r3, [r3]
 8001ea0:	f113 0f04 	cmn.w	r3, #4
 8001ea4:	d102      	bne.n	8001eac <start_fill+0x11b8>
 8001ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eaa:	e001      	b.n	8001eb0 <start_fill+0x11bc>
 8001eac:	f06f 0003 	mvn.w	r0, #3
 8001eb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001eb4:	4905      	ldr	r1, [pc, #20]	; (8001ecc <start_fill+0x11d8>)
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4809      	ldr	r0, [pc, #36]	; (8001eec <start_fill+0x11f8>)
 8001ec6:	f002 f869 	bl	8003f9c <go_straight>
					break;
 8001eca:	e283      	b.n	80023d4 <start_fill+0x16e0>
 8001ecc:	200002ec 	.word	0x200002ec
 8001ed0:	20000419 	.word	0x20000419
 8001ed4:	20000418 	.word	0x20000418
 8001ed8:	20000590 	.word	0x20000590
 8001edc:	200005f4 	.word	0x200005f4
 8001ee0:	42cc0000 	.word	0x42cc0000
 8001ee4:	2000041a 	.word	0x2000041a
 8001ee8:	42340000 	.word	0x42340000
 8001eec:	43960000 	.word	0x43960000
					if(stack[i][0] == straight){
 8001ef0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ef4:	49a7      	ldr	r1, [pc, #668]	; (8002194 <start_fill+0x14a0>)
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	f993 3000 	ldrsb.w	r3, [r3]
 8001f02:	f113 0f06 	cmn.w	r3, #6
 8001f06:	f040 808c 	bne.w	8002022 <start_fill+0x132e>
						if((maze[y][x] & left_wall) == 0 && !visited[y][x - 1]){
 8001f0a:	4ba3      	ldr	r3, [pc, #652]	; (8002198 <start_fill+0x14a4>)
 8001f0c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f10:	4619      	mov	r1, r3
 8001f12:	4ba2      	ldr	r3, [pc, #648]	; (800219c <start_fill+0x14a8>)
 8001f14:	f993 3000 	ldrsb.w	r3, [r3]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	4aa1      	ldr	r2, [pc, #644]	; (80021a0 <start_fill+0x14ac>)
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	4403      	add	r3, r0
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d135      	bne.n	8001f9e <start_fill+0x12aa>
 8001f32:	4b99      	ldr	r3, [pc, #612]	; (8002198 <start_fill+0x14a4>)
 8001f34:	f993 3000 	ldrsb.w	r3, [r3]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	4b98      	ldr	r3, [pc, #608]	; (800219c <start_fill+0x14a8>)
 8001f3c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f40:	1e5a      	subs	r2, r3, #1
 8001f42:	4998      	ldr	r1, [pc, #608]	; (80021a4 <start_fill+0x14b0>)
 8001f44:	4603      	mov	r3, r0
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4403      	add	r3, r0
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	440b      	add	r3, r1
 8001f4e:	4413      	add	r3, r2
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	f083 0301 	eor.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <start_fill+0x12aa>
							stack[i][0] = turn_right_90;
 8001f5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001f60:	498c      	ldr	r1, [pc, #560]	; (8002194 <start_fill+0x14a0>)
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	22ff      	movs	r2, #255	; 0xff
 8001f6c:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 8001f6e:	4b8e      	ldr	r3, [pc, #568]	; (80021a8 <start_fill+0x14b4>)
 8001f70:	498e      	ldr	r1, [pc, #568]	; (80021ac <start_fill+0x14b8>)
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fc20 	bl	80007b8 <__addsf3>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f002 f80d 	bl	8003f9c <go_straight>
							turn_left90(&direction);
 8001f82:	488b      	ldr	r0, [pc, #556]	; (80021b0 <start_fill+0x14bc>)
 8001f84:	f001 fe78 	bl	8003c78 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 8001f88:	4b87      	ldr	r3, [pc, #540]	; (80021a8 <start_fill+0x14b4>)
 8001f8a:	4988      	ldr	r1, [pc, #544]	; (80021ac <start_fill+0x14b8>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fc11 	bl	80007b4 <__aeabi_fsub>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f002 f800 	bl	8003f9c <go_straight>
					break;
 8001f9c:	e21d      	b.n	80023da <start_fill+0x16e6>
						} else if((maze[y][x] & right_wall) == 0 && !visited[y][x + 1]) {
 8001f9e:	4b7e      	ldr	r3, [pc, #504]	; (8002198 <start_fill+0x14a4>)
 8001fa0:	f993 3000 	ldrsb.w	r3, [r3]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4b7d      	ldr	r3, [pc, #500]	; (800219c <start_fill+0x14a8>)
 8001fa8:	f993 3000 	ldrsb.w	r3, [r3]
 8001fac:	4618      	mov	r0, r3
 8001fae:	4a7c      	ldr	r2, [pc, #496]	; (80021a0 <start_fill+0x14ac>)
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	4403      	add	r3, r0
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 8209 	bne.w	80023da <start_fill+0x16e6>
 8001fc8:	4b73      	ldr	r3, [pc, #460]	; (8002198 <start_fill+0x14a4>)
 8001fca:	f993 3000 	ldrsb.w	r3, [r3]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	4b72      	ldr	r3, [pc, #456]	; (800219c <start_fill+0x14a8>)
 8001fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	4972      	ldr	r1, [pc, #456]	; (80021a4 <start_fill+0x14b0>)
 8001fda:	4603      	mov	r3, r0
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4403      	add	r3, r0
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	440b      	add	r3, r1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	f083 0301 	eor.w	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 81f3 	beq.w	80023da <start_fill+0x16e6>
							stack[i][0] = turn_left_90;
 8001ff4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ff8:	4966      	ldr	r1, [pc, #408]	; (8002194 <start_fill+0x14a0>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	440b      	add	r3, r1
 8002002:	22fc      	movs	r2, #252	; 0xfc
 8002004:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 8002006:	4b68      	ldr	r3, [pc, #416]	; (80021a8 <start_fill+0x14b4>)
 8002008:	2101      	movs	r1, #1
 800200a:	4618      	mov	r0, r3
 800200c:	f001 ffc6 	bl	8003f9c <go_straight>
							turn_right90(&direction);
 8002010:	4867      	ldr	r0, [pc, #412]	; (80021b0 <start_fill+0x14bc>)
 8002012:	f001 fee1 	bl	8003dd8 <turn_right90>
							go_straight(WidthOESide, 0);
 8002016:	4b64      	ldr	r3, [pc, #400]	; (80021a8 <start_fill+0x14b4>)
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f001 ffbe 	bl	8003f9c <go_straight>
					break;
 8002020:	e1db      	b.n	80023da <start_fill+0x16e6>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8002022:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002026:	495b      	ldr	r1, [pc, #364]	; (8002194 <start_fill+0x14a0>)
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	440b      	add	r3, r1
 8002030:	f993 3000 	ldrsb.w	r3, [r3]
 8002034:	f113 0f04 	cmn.w	r3, #4
 8002038:	d102      	bne.n	8002040 <start_fill+0x134c>
 800203a:	f04f 30ff 	mov.w	r0, #4294967295
 800203e:	e001      	b.n	8002044 <start_fill+0x1350>
 8002040:	f06f 0003 	mvn.w	r0, #3
 8002044:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002048:	4952      	ldr	r1, [pc, #328]	; (8002194 <start_fill+0x14a0>)
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	440b      	add	r3, r1
 8002052:	4602      	mov	r2, r0
 8002054:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8002056:	2100      	movs	r1, #0
 8002058:	4856      	ldr	r0, [pc, #344]	; (80021b4 <start_fill+0x14c0>)
 800205a:	f001 ff9f 	bl	8003f9c <go_straight>
					break;
 800205e:	e1bc      	b.n	80023da <start_fill+0x16e6>
					if(stack[i][0] == straight){
 8002060:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002064:	494b      	ldr	r1, [pc, #300]	; (8002194 <start_fill+0x14a0>)
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	440b      	add	r3, r1
 800206e:	f993 3000 	ldrsb.w	r3, [r3]
 8002072:	f113 0f06 	cmn.w	r3, #6
 8002076:	f040 809f 	bne.w	80021b8 <start_fill+0x14c4>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <start_fill+0x14a4>)
 800207c:	f993 3000 	ldrsb.w	r3, [r3]
 8002080:	4619      	mov	r1, r3
 8002082:	4b46      	ldr	r3, [pc, #280]	; (800219c <start_fill+0x14a8>)
 8002084:	f993 3000 	ldrsb.w	r3, [r3]
 8002088:	4618      	mov	r0, r3
 800208a:	4a45      	ldr	r2, [pc, #276]	; (80021a0 <start_fill+0x14ac>)
 800208c:	460b      	mov	r3, r1
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	4403      	add	r3, r0
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d12b      	bne.n	80020fa <start_fill+0x1406>
 80020a2:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <start_fill+0x14a4>)
 80020a4:	f993 3000 	ldrsb.w	r3, [r3]
 80020a8:	4618      	mov	r0, r3
 80020aa:	4b3c      	ldr	r3, [pc, #240]	; (800219c <start_fill+0x14a8>)
 80020ac:	f993 3000 	ldrsb.w	r3, [r3]
 80020b0:	1e5a      	subs	r2, r3, #1
 80020b2:	493c      	ldr	r1, [pc, #240]	; (80021a4 <start_fill+0x14b0>)
 80020b4:	4603      	mov	r3, r0
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4403      	add	r3, r0
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	440b      	add	r3, r1
 80020be:	4413      	add	r3, r2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	f083 0301 	eor.w	r3, r3, #1
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d016      	beq.n	80020fa <start_fill+0x1406>
							stack[i][0] = turn_left_90;
 80020cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80020d0:	4930      	ldr	r1, [pc, #192]	; (8002194 <start_fill+0x14a0>)
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	440b      	add	r3, r1
 80020da:	22fc      	movs	r2, #252	; 0xfc
 80020dc:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 80020de:	4b32      	ldr	r3, [pc, #200]	; (80021a8 <start_fill+0x14b4>)
 80020e0:	2101      	movs	r1, #1
 80020e2:	4618      	mov	r0, r3
 80020e4:	f001 ff5a 	bl	8003f9c <go_straight>
							turn_right90(&direction);
 80020e8:	4831      	ldr	r0, [pc, #196]	; (80021b0 <start_fill+0x14bc>)
 80020ea:	f001 fe75 	bl	8003dd8 <turn_right90>
							go_straight(WidthOESide, 0);
 80020ee:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <start_fill+0x14b4>)
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f001 ff52 	bl	8003f9c <go_straight>
 80020f8:	e165      	b.n	80023c6 <start_fill+0x16d2>
						} else if(((maze[y][x] & right_wall) == 0) && !visited[y][x + 1]){
 80020fa:	4b27      	ldr	r3, [pc, #156]	; (8002198 <start_fill+0x14a4>)
 80020fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002100:	4619      	mov	r1, r3
 8002102:	4b26      	ldr	r3, [pc, #152]	; (800219c <start_fill+0x14a8>)
 8002104:	f993 3000 	ldrsb.w	r3, [r3]
 8002108:	4618      	mov	r0, r3
 800210a:	4a25      	ldr	r2, [pc, #148]	; (80021a0 <start_fill+0x14ac>)
 800210c:	460b      	mov	r3, r1
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	4403      	add	r3, r0
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	f040 815e 	bne.w	80023e0 <start_fill+0x16ec>
 8002124:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <start_fill+0x14a4>)
 8002126:	f993 3000 	ldrsb.w	r3, [r3]
 800212a:	4618      	mov	r0, r3
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <start_fill+0x14a8>)
 800212e:	f993 3000 	ldrsb.w	r3, [r3]
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	491b      	ldr	r1, [pc, #108]	; (80021a4 <start_fill+0x14b0>)
 8002136:	4603      	mov	r3, r0
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4403      	add	r3, r0
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	440b      	add	r3, r1
 8002140:	4413      	add	r3, r2
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f083 0301 	eor.w	r3, r3, #1
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8148 	beq.w	80023e0 <start_fill+0x16ec>
							stack[i][0] = turn_right_90;
 8002150:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002154:	490f      	ldr	r1, [pc, #60]	; (8002194 <start_fill+0x14a0>)
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	440b      	add	r3, r1
 800215e:	22ff      	movs	r2, #255	; 0xff
 8002160:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <start_fill+0x14b4>)
 8002164:	4911      	ldr	r1, [pc, #68]	; (80021ac <start_fill+0x14b8>)
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fb26 	bl	80007b8 <__addsf3>
 800216c:	4603      	mov	r3, r0
 800216e:	2101      	movs	r1, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f001 ff13 	bl	8003f9c <go_straight>
							turn_left90(&direction);
 8002176:	480e      	ldr	r0, [pc, #56]	; (80021b0 <start_fill+0x14bc>)
 8002178:	f001 fd7e 	bl	8003c78 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 800217c:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <start_fill+0x14b4>)
 800217e:	490b      	ldr	r1, [pc, #44]	; (80021ac <start_fill+0x14b8>)
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fb17 	bl	80007b4 <__aeabi_fsub>
 8002186:	4603      	mov	r3, r0
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f001 ff06 	bl	8003f9c <go_straight>
					break;
 8002190:	e126      	b.n	80023e0 <start_fill+0x16ec>
 8002192:	bf00      	nop
 8002194:	200002ec 	.word	0x200002ec
 8002198:	20000419 	.word	0x20000419
 800219c:	20000418 	.word	0x20000418
 80021a0:	20000590 	.word	0x20000590
 80021a4:	200005f4 	.word	0x200005f4
 80021a8:	42cc0000 	.word	0x42cc0000
 80021ac:	42340000 	.word	0x42340000
 80021b0:	2000041a 	.word	0x2000041a
 80021b4:	43960000 	.word	0x43960000
					} else if(stack[i][0] == turn_left_90){
 80021b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80021bc:	498b      	ldr	r1, [pc, #556]	; (80023ec <start_fill+0x16f8>)
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	f993 3000 	ldrsb.w	r3, [r3]
 80021ca:	f113 0f04 	cmn.w	r3, #4
 80021ce:	f040 8083 	bne.w	80022d8 <start_fill+0x15e4>
						if(((maze[y][x] & right_wall) == 0) && !visited[y][x + 1]){
 80021d2:	4b87      	ldr	r3, [pc, #540]	; (80023f0 <start_fill+0x16fc>)
 80021d4:	f993 3000 	ldrsb.w	r3, [r3]
 80021d8:	4619      	mov	r1, r3
 80021da:	4b86      	ldr	r3, [pc, #536]	; (80023f4 <start_fill+0x1700>)
 80021dc:	f993 3000 	ldrsb.w	r3, [r3]
 80021e0:	4618      	mov	r0, r3
 80021e2:	4a85      	ldr	r2, [pc, #532]	; (80023f8 <start_fill+0x1704>)
 80021e4:	460b      	mov	r3, r1
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	4403      	add	r3, r0
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d135      	bne.n	8002266 <start_fill+0x1572>
 80021fa:	4b7d      	ldr	r3, [pc, #500]	; (80023f0 <start_fill+0x16fc>)
 80021fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002200:	4618      	mov	r0, r3
 8002202:	4b7c      	ldr	r3, [pc, #496]	; (80023f4 <start_fill+0x1700>)
 8002204:	f993 3000 	ldrsb.w	r3, [r3]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	497c      	ldr	r1, [pc, #496]	; (80023fc <start_fill+0x1708>)
 800220c:	4603      	mov	r3, r0
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4403      	add	r3, r0
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	440b      	add	r3, r1
 8002216:	4413      	add	r3, r2
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	f083 0301 	eor.w	r3, r3, #1
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <start_fill+0x1572>
							stack[i][0] = straight;
 8002224:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002228:	4970      	ldr	r1, [pc, #448]	; (80023ec <start_fill+0x16f8>)
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	440b      	add	r3, r1
 8002232:	22fa      	movs	r2, #250	; 0xfa
 8002234:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide + dbtWheels_c, 1);
 8002236:	4b72      	ldr	r3, [pc, #456]	; (8002400 <start_fill+0x170c>)
 8002238:	4972      	ldr	r1, [pc, #456]	; (8002404 <start_fill+0x1710>)
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fabc 	bl	80007b8 <__addsf3>
 8002240:	4603      	mov	r3, r0
 8002242:	2101      	movs	r1, #1
 8002244:	4618      	mov	r0, r3
 8002246:	f001 fea9 	bl	8003f9c <go_straight>
							turn_left90(&direction);
 800224a:	486f      	ldr	r0, [pc, #444]	; (8002408 <start_fill+0x1714>)
 800224c:	f001 fd14 	bl	8003c78 <turn_left90>
							go_straight(WidthOESide - dbtWheels_c, 0);
 8002250:	4b6b      	ldr	r3, [pc, #428]	; (8002400 <start_fill+0x170c>)
 8002252:	496c      	ldr	r1, [pc, #432]	; (8002404 <start_fill+0x1710>)
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe faad 	bl	80007b4 <__aeabi_fsub>
 800225a:	4603      	mov	r3, r0
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f001 fe9c 	bl	8003f9c <go_straight>
 8002264:	e0af      	b.n	80023c6 <start_fill+0x16d2>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8002266:	4b62      	ldr	r3, [pc, #392]	; (80023f0 <start_fill+0x16fc>)
 8002268:	f993 3000 	ldrsb.w	r3, [r3]
 800226c:	4619      	mov	r1, r3
 800226e:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <start_fill+0x1700>)
 8002270:	f993 3000 	ldrsb.w	r3, [r3]
 8002274:	4618      	mov	r0, r3
 8002276:	4a60      	ldr	r2, [pc, #384]	; (80023f8 <start_fill+0x1704>)
 8002278:	460b      	mov	r3, r1
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	4403      	add	r3, r0
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	f040 80a8 	bne.w	80023e0 <start_fill+0x16ec>
 8002290:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <start_fill+0x16fc>)
 8002292:	f993 3000 	ldrsb.w	r3, [r3]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <start_fill+0x1700>)
 800229a:	f993 3000 	ldrsb.w	r3, [r3]
 800229e:	4618      	mov	r0, r3
 80022a0:	4956      	ldr	r1, [pc, #344]	; (80023fc <start_fill+0x1708>)
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	440b      	add	r3, r1
 80022ac:	4403      	add	r3, r0
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	f083 0301 	eor.w	r3, r3, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8092 	beq.w	80023e0 <start_fill+0x16ec>
							stack[i][0] = turn_right_90;
 80022bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80022c0:	494a      	ldr	r1, [pc, #296]	; (80023ec <start_fill+0x16f8>)
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	440b      	add	r3, r1
 80022ca:	22ff      	movs	r2, #255	; 0xff
 80022cc:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 80022ce:	2100      	movs	r1, #0
 80022d0:	484e      	ldr	r0, [pc, #312]	; (800240c <start_fill+0x1718>)
 80022d2:	f001 fe63 	bl	8003f9c <go_straight>
					break;
 80022d6:	e083      	b.n	80023e0 <start_fill+0x16ec>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 80022d8:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <start_fill+0x16fc>)
 80022da:	f993 3000 	ldrsb.w	r3, [r3]
 80022de:	4619      	mov	r1, r3
 80022e0:	4b44      	ldr	r3, [pc, #272]	; (80023f4 <start_fill+0x1700>)
 80022e2:	f993 3000 	ldrsb.w	r3, [r3]
 80022e6:	4618      	mov	r0, r3
 80022e8:	4a43      	ldr	r2, [pc, #268]	; (80023f8 <start_fill+0x1704>)
 80022ea:	460b      	mov	r3, r1
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	4403      	add	r3, r0
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d12b      	bne.n	8002358 <start_fill+0x1664>
 8002300:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <start_fill+0x16fc>)
 8002302:	f993 3000 	ldrsb.w	r3, [r3]
 8002306:	4618      	mov	r0, r3
 8002308:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <start_fill+0x1700>)
 800230a:	f993 3000 	ldrsb.w	r3, [r3]
 800230e:	1e5a      	subs	r2, r3, #1
 8002310:	493a      	ldr	r1, [pc, #232]	; (80023fc <start_fill+0x1708>)
 8002312:	4603      	mov	r3, r0
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4403      	add	r3, r0
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	440b      	add	r3, r1
 800231c:	4413      	add	r3, r2
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	f083 0301 	eor.w	r3, r3, #1
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d016      	beq.n	8002358 <start_fill+0x1664>
							stack[i][0] = straight;
 800232a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800232e:	492f      	ldr	r1, [pc, #188]	; (80023ec <start_fill+0x16f8>)
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	440b      	add	r3, r1
 8002338:	22fa      	movs	r2, #250	; 0xfa
 800233a:	701a      	strb	r2, [r3, #0]
							go_straight(WidthOESide, 1);
 800233c:	4b30      	ldr	r3, [pc, #192]	; (8002400 <start_fill+0x170c>)
 800233e:	2101      	movs	r1, #1
 8002340:	4618      	mov	r0, r3
 8002342:	f001 fe2b 	bl	8003f9c <go_straight>
							turn_right90(&direction);
 8002346:	4830      	ldr	r0, [pc, #192]	; (8002408 <start_fill+0x1714>)
 8002348:	f001 fd46 	bl	8003dd8 <turn_right90>
							go_straight(WidthOESide, 0);
 800234c:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <start_fill+0x170c>)
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f001 fe23 	bl	8003f9c <go_straight>
 8002356:	e036      	b.n	80023c6 <start_fill+0x16d2>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8002358:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <start_fill+0x16fc>)
 800235a:	f993 3000 	ldrsb.w	r3, [r3]
 800235e:	4619      	mov	r1, r3
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <start_fill+0x1700>)
 8002362:	f993 3000 	ldrsb.w	r3, [r3]
 8002366:	4618      	mov	r0, r3
 8002368:	4a23      	ldr	r2, [pc, #140]	; (80023f8 <start_fill+0x1704>)
 800236a:	460b      	mov	r3, r1
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	4403      	add	r3, r0
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d12f      	bne.n	80023e0 <start_fill+0x16ec>
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <start_fill+0x16fc>)
 8002382:	f993 3000 	ldrsb.w	r3, [r3]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <start_fill+0x1700>)
 800238a:	f993 3000 	ldrsb.w	r3, [r3]
 800238e:	4618      	mov	r0, r3
 8002390:	491a      	ldr	r1, [pc, #104]	; (80023fc <start_fill+0x1708>)
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	440b      	add	r3, r1
 800239c:	4403      	add	r3, r0
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	f083 0301 	eor.w	r3, r3, #1
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d01a      	beq.n	80023e0 <start_fill+0x16ec>
							stack[i][0] = turn_left_90;
 80023aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80023ae:	490f      	ldr	r1, [pc, #60]	; (80023ec <start_fill+0x16f8>)
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	22fc      	movs	r2, #252	; 0xfc
 80023ba:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 80023bc:	2100      	movs	r1, #0
 80023be:	4813      	ldr	r0, [pc, #76]	; (800240c <start_fill+0x1718>)
 80023c0:	f001 fdec 	bl	8003f9c <go_straight>
					break;
 80023c4:	e00c      	b.n	80023e0 <start_fill+0x16ec>
 80023c6:	e00b      	b.n	80023e0 <start_fill+0x16ec>
			if(frontfree){
 80023c8:	bf00      	nop
 80023ca:	f7fe bcec 	b.w	8000da6 <start_fill+0xb2>
					break;
 80023ce:	bf00      	nop
 80023d0:	f7fe bce9 	b.w	8000da6 <start_fill+0xb2>
					break;
 80023d4:	bf00      	nop
 80023d6:	f7fe bce6 	b.w	8000da6 <start_fill+0xb2>
					break;
 80023da:	bf00      	nop
 80023dc:	f7fe bce3 	b.w	8000da6 <start_fill+0xb2>
					break;
 80023e0:	bf00      	nop
		vl53l0x_GetRanging_now(rightSensor0, &frontValue);
 80023e2:	f7fe bce0 	b.w	8000da6 <start_fill+0xb2>
		for(int m = 0; m < grid_size; m++){
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	e0b0      	b.n	800254e <start_fill+0x185a>
 80023ec:	200002ec 	.word	0x200002ec
 80023f0:	20000419 	.word	0x20000419
 80023f4:	20000418 	.word	0x20000418
 80023f8:	20000590 	.word	0x20000590
 80023fc:	200005f4 	.word	0x200005f4
 8002400:	42cc0000 	.word	0x42cc0000
 8002404:	42340000 	.word	0x42340000
 8002408:	2000041a 	.word	0x2000041a
 800240c:	43960000 	.word	0x43960000
			if(!visited[n][m]){
 8002410:	4957      	ldr	r1, [pc, #348]	; (8002570 <start_fill+0x187c>)
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	18ca      	adds	r2, r1, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	4413      	add	r3, r2
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	f083 0301 	eor.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 808c 	beq.w	8002548 <start_fill+0x1854>
				maze[n][m] |= 15;
 8002430:	4950      	ldr	r1, [pc, #320]	; (8002574 <start_fill+0x1880>)
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	18ca      	adds	r2, r1, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	4413      	add	r3, r2
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	f043 030f 	orr.w	r3, r3, #15
 8002448:	b2d8      	uxtb	r0, r3
 800244a:	494a      	ldr	r1, [pc, #296]	; (8002574 <start_fill+0x1880>)
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	18ca      	adds	r2, r1, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4413      	add	r3, r2
 800245c:	4602      	mov	r2, r0
 800245e:	701a      	strb	r2, [r3, #0]
				if(n > 0){ maze[n - 1][m] |= bottom_wall; }
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	dd19      	ble.n	800249a <start_fill+0x17a6>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	4942      	ldr	r1, [pc, #264]	; (8002574 <start_fill+0x1880>)
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	18ca      	adds	r2, r1, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	4413      	add	r3, r2
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	3a01      	subs	r2, #1
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	b2d8      	uxtb	r0, r3
 8002486:	493b      	ldr	r1, [pc, #236]	; (8002574 <start_fill+0x1880>)
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	18ca      	adds	r2, r1, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	4413      	add	r3, r2
 8002496:	4602      	mov	r2, r0
 8002498:	701a      	strb	r2, [r3, #0]
				if(n + 1 < grid_size){ maze[n + 1][m] |= top_wall; }
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b08      	cmp	r3, #8
 800249e:	dc19      	bgt.n	80024d4 <start_fill+0x17e0>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	4933      	ldr	r1, [pc, #204]	; (8002574 <start_fill+0x1880>)
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	18ca      	adds	r2, r1, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4413      	add	r3, r2
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	3201      	adds	r2, #1
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	b2d8      	uxtb	r0, r3
 80024c0:	492c      	ldr	r1, [pc, #176]	; (8002574 <start_fill+0x1880>)
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	18ca      	adds	r2, r1, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4413      	add	r3, r2
 80024d0:	4602      	mov	r2, r0
 80024d2:	701a      	strb	r2, [r3, #0]
				if(m > 0){ maze[n][m - 1] |= right_wall; }
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	dd19      	ble.n	800250e <start_fill+0x181a>
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	1e59      	subs	r1, r3, #1
 80024de:	4825      	ldr	r0, [pc, #148]	; (8002574 <start_fill+0x1880>)
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4403      	add	r3, r0
 80024ec:	440b      	add	r3, r1
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	1e51      	subs	r1, r2, #1
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	b2dc      	uxtb	r4, r3
 80024fa:	481e      	ldr	r0, [pc, #120]	; (8002574 <start_fill+0x1880>)
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4403      	add	r3, r0
 8002508:	440b      	add	r3, r1
 800250a:	4622      	mov	r2, r4
 800250c:	701a      	strb	r2, [r3, #0]
				if(m + 1 < grid_size){ maze[n][m + 1] |= left_wall; }
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b08      	cmp	r3, #8
 8002512:	dc19      	bgt.n	8002548 <start_fill+0x1854>
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	1c59      	adds	r1, r3, #1
 8002518:	4816      	ldr	r0, [pc, #88]	; (8002574 <start_fill+0x1880>)
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4403      	add	r3, r0
 8002526:	440b      	add	r3, r1
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	1c51      	adds	r1, r2, #1
 800252e:	f043 0308 	orr.w	r3, r3, #8
 8002532:	b2dc      	uxtb	r4, r3
 8002534:	480f      	ldr	r0, [pc, #60]	; (8002574 <start_fill+0x1880>)
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4403      	add	r3, r0
 8002542:	440b      	add	r3, r1
 8002544:	4622      	mov	r2, r4
 8002546:	701a      	strb	r2, [r3, #0]
		for(int m = 0; m < grid_size; m++){
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	3301      	adds	r3, #1
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b09      	cmp	r3, #9
 8002552:	f77f af5d 	ble.w	8002410 <start_fill+0x171c>
	for(int n = 0; n < grid_size; n++){
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3301      	adds	r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b09      	cmp	r3, #9
 8002560:	f77f af41 	ble.w	80023e6 <start_fill+0x16f2>
			}
		}
	}
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	371c      	adds	r7, #28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}
 800256e:	bf00      	nop
 8002570:	200005f4 	.word	0x200005f4
 8002574:	20000590 	.word	0x20000590

08002578 <found>:
void found(int16_t index){
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	80fb      	strh	r3, [r7, #6]
	switch(direction){
 8002582:	4b22      	ldr	r3, [pc, #136]	; (800260c <found+0x94>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d036      	beq.n	80025f8 <found+0x80>
 800258a:	2b02      	cmp	r3, #2
 800258c:	dc39      	bgt.n	8002602 <found+0x8a>
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <found+0x20>
 8002592:	2b01      	cmp	r3, #1
 8002594:	d013      	beq.n	80025be <found+0x46>
			break;
		case north:
			go_straight(square_size * 2, 1);
			break;
	}
}
 8002596:	e034      	b.n	8002602 <found+0x8a>
			go_straight(WidthOESide, 1);
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <found+0x98>)
 800259a:	2101      	movs	r1, #1
 800259c:	4618      	mov	r0, r3
 800259e:	f001 fcfd 	bl	8003f9c <go_straight>
			turn_right90(&direction);
 80025a2:	481a      	ldr	r0, [pc, #104]	; (800260c <found+0x94>)
 80025a4:	f001 fc18 	bl	8003dd8 <turn_right90>
			go_straight(WidthOESide + square_size, 1);
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <found+0x98>)
 80025aa:	491a      	ldr	r1, [pc, #104]	; (8002614 <found+0x9c>)
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe f903 	bl	80007b8 <__addsf3>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2101      	movs	r1, #1
 80025b6:	4618      	mov	r0, r3
 80025b8:	f001 fcf0 	bl	8003f9c <go_straight>
			break;
 80025bc:	e021      	b.n	8002602 <found+0x8a>
			go_straight(WidthOESide + dbtWheels_c, 1);
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <found+0x98>)
 80025c0:	4915      	ldr	r1, [pc, #84]	; (8002618 <found+0xa0>)
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe f8f8 	bl	80007b8 <__addsf3>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2101      	movs	r1, #1
 80025cc:	4618      	mov	r0, r3
 80025ce:	f001 fce5 	bl	8003f9c <go_straight>
			turn_left90(&direction);
 80025d2:	480e      	ldr	r0, [pc, #56]	; (800260c <found+0x94>)
 80025d4:	f001 fb50 	bl	8003c78 <turn_left90>
			go_straight(WidthOESide + square_size - dbtWheels_c, 1);
 80025d8:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <found+0x98>)
 80025da:	490e      	ldr	r1, [pc, #56]	; (8002614 <found+0x9c>)
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe f8eb 	bl	80007b8 <__addsf3>
 80025e2:	4603      	mov	r3, r0
 80025e4:	490c      	ldr	r1, [pc, #48]	; (8002618 <found+0xa0>)
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe f8e4 	bl	80007b4 <__aeabi_fsub>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2101      	movs	r1, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f001 fcd3 	bl	8003f9c <go_straight>
			break;
 80025f6:	e004      	b.n	8002602 <found+0x8a>
			go_straight(square_size * 2, 1);
 80025f8:	2101      	movs	r1, #1
 80025fa:	4808      	ldr	r0, [pc, #32]	; (800261c <found+0xa4>)
 80025fc:	f001 fcce 	bl	8003f9c <go_straight>
			break;
 8002600:	bf00      	nop
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	2000041a 	.word	0x2000041a
 8002610:	42cc0000 	.word	0x42cc0000
 8002614:	43960000 	.word	0x43960000
 8002618:	42340000 	.word	0x42340000
 800261c:	44160000 	.word	0x44160000

08002620 <set_wall>:

void set_wall(bool rbl, bool rbr, bool rbf){
 8002620:	b490      	push	{r4, r7}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
 800262a:	460b      	mov	r3, r1
 800262c:	71bb      	strb	r3, [r7, #6]
 800262e:	4613      	mov	r3, r2
 8002630:	717b      	strb	r3, [r7, #5]
	switch(direction){
 8002632:	4b86      	ldr	r3, [pc, #536]	; (800284c <set_wall+0x22c>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b03      	cmp	r3, #3
 8002638:	f200 8415 	bhi.w	8002e66 <set_wall+0x846>
 800263c:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <set_wall+0x24>)
 800263e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002642:	bf00      	nop
 8002644:	08002655 	.word	0x08002655
 8002648:	0800285d 	.word	0x0800285d
 800264c:	08002a61 	.word	0x08002a61
 8002650:	08002c65 	.word	0x08002c65
		case west:
			x--;
 8002654:	4b7e      	ldr	r3, [pc, #504]	; (8002850 <set_wall+0x230>)
 8002656:	f993 3000 	ldrsb.w	r3, [r3]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	b25a      	sxtb	r2, r3
 8002662:	4b7b      	ldr	r3, [pc, #492]	; (8002850 <set_wall+0x230>)
 8002664:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d04c      	beq.n	8002706 <set_wall+0xe6>
				maze[y][x] |= bottom_wall;
 800266c:	4b79      	ldr	r3, [pc, #484]	; (8002854 <set_wall+0x234>)
 800266e:	f993 3000 	ldrsb.w	r3, [r3]
 8002672:	4619      	mov	r1, r3
 8002674:	4b76      	ldr	r3, [pc, #472]	; (8002850 <set_wall+0x230>)
 8002676:	f993 3000 	ldrsb.w	r3, [r3]
 800267a:	4618      	mov	r0, r3
 800267c:	4a76      	ldr	r2, [pc, #472]	; (8002858 <set_wall+0x238>)
 800267e:	460b      	mov	r3, r1
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	4403      	add	r3, r0
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4a71      	ldr	r2, [pc, #452]	; (8002854 <set_wall+0x234>)
 800268e:	f992 2000 	ldrsb.w	r2, [r2]
 8002692:	4611      	mov	r1, r2
 8002694:	4a6e      	ldr	r2, [pc, #440]	; (8002850 <set_wall+0x230>)
 8002696:	f992 2000 	ldrsb.w	r2, [r2]
 800269a:	4614      	mov	r4, r2
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	b2d8      	uxtb	r0, r3
 80026a2:	4a6d      	ldr	r2, [pc, #436]	; (8002858 <set_wall+0x238>)
 80026a4:	460b      	mov	r3, r1
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	4423      	add	r3, r4
 80026b0:	4602      	mov	r2, r0
 80026b2:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 80026b4:	4b67      	ldr	r3, [pc, #412]	; (8002854 <set_wall+0x234>)
 80026b6:	f993 3000 	ldrsb.w	r3, [r3]
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	dc23      	bgt.n	8002706 <set_wall+0xe6>
 80026be:	4b65      	ldr	r3, [pc, #404]	; (8002854 <set_wall+0x234>)
 80026c0:	f993 3000 	ldrsb.w	r3, [r3]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	4b62      	ldr	r3, [pc, #392]	; (8002850 <set_wall+0x230>)
 80026c8:	f993 3000 	ldrsb.w	r3, [r3]
 80026cc:	4618      	mov	r0, r3
 80026ce:	4962      	ldr	r1, [pc, #392]	; (8002858 <set_wall+0x238>)
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	440b      	add	r3, r1
 80026da:	4403      	add	r3, r0
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	4a5d      	ldr	r2, [pc, #372]	; (8002854 <set_wall+0x234>)
 80026e0:	f992 2000 	ldrsb.w	r2, [r2]
 80026e4:	3201      	adds	r2, #1
 80026e6:	495a      	ldr	r1, [pc, #360]	; (8002850 <set_wall+0x230>)
 80026e8:	f991 1000 	ldrsb.w	r1, [r1]
 80026ec:	460c      	mov	r4, r1
 80026ee:	f043 0302 	orr.w	r3, r3, #2
 80026f2:	b2d8      	uxtb	r0, r3
 80026f4:	4958      	ldr	r1, [pc, #352]	; (8002858 <set_wall+0x238>)
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	440b      	add	r3, r1
 8002700:	4423      	add	r3, r4
 8002702:	4602      	mov	r2, r0
 8002704:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002706:	79bb      	ldrb	r3, [r7, #6]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d04c      	beq.n	80027a6 <set_wall+0x186>
				maze[y][x] |= top_wall;
 800270c:	4b51      	ldr	r3, [pc, #324]	; (8002854 <set_wall+0x234>)
 800270e:	f993 3000 	ldrsb.w	r3, [r3]
 8002712:	4619      	mov	r1, r3
 8002714:	4b4e      	ldr	r3, [pc, #312]	; (8002850 <set_wall+0x230>)
 8002716:	f993 3000 	ldrsb.w	r3, [r3]
 800271a:	4618      	mov	r0, r3
 800271c:	4a4e      	ldr	r2, [pc, #312]	; (8002858 <set_wall+0x238>)
 800271e:	460b      	mov	r3, r1
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	4403      	add	r3, r0
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	4a49      	ldr	r2, [pc, #292]	; (8002854 <set_wall+0x234>)
 800272e:	f992 2000 	ldrsb.w	r2, [r2]
 8002732:	4611      	mov	r1, r2
 8002734:	4a46      	ldr	r2, [pc, #280]	; (8002850 <set_wall+0x230>)
 8002736:	f992 2000 	ldrsb.w	r2, [r2]
 800273a:	4614      	mov	r4, r2
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	b2d8      	uxtb	r0, r3
 8002742:	4a45      	ldr	r2, [pc, #276]	; (8002858 <set_wall+0x238>)
 8002744:	460b      	mov	r3, r1
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	4423      	add	r3, r4
 8002750:	4602      	mov	r2, r0
 8002752:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002754:	4b3f      	ldr	r3, [pc, #252]	; (8002854 <set_wall+0x234>)
 8002756:	f993 3000 	ldrsb.w	r3, [r3]
 800275a:	2b00      	cmp	r3, #0
 800275c:	dd23      	ble.n	80027a6 <set_wall+0x186>
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <set_wall+0x234>)
 8002760:	f993 3000 	ldrsb.w	r3, [r3]
 8002764:	1e5a      	subs	r2, r3, #1
 8002766:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <set_wall+0x230>)
 8002768:	f993 3000 	ldrsb.w	r3, [r3]
 800276c:	4618      	mov	r0, r3
 800276e:	493a      	ldr	r1, [pc, #232]	; (8002858 <set_wall+0x238>)
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	440b      	add	r3, r1
 800277a:	4403      	add	r3, r0
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	4a35      	ldr	r2, [pc, #212]	; (8002854 <set_wall+0x234>)
 8002780:	f992 2000 	ldrsb.w	r2, [r2]
 8002784:	3a01      	subs	r2, #1
 8002786:	4932      	ldr	r1, [pc, #200]	; (8002850 <set_wall+0x230>)
 8002788:	f991 1000 	ldrsb.w	r1, [r1]
 800278c:	460c      	mov	r4, r1
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	b2d8      	uxtb	r0, r3
 8002794:	4930      	ldr	r1, [pc, #192]	; (8002858 <set_wall+0x238>)
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	440b      	add	r3, r1
 80027a0:	4423      	add	r3, r4
 80027a2:	4602      	mov	r2, r0
 80027a4:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 80027a6:	797b      	ldrb	r3, [r7, #5]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8355 	beq.w	8002e58 <set_wall+0x838>
				maze[y][x] |= left_wall;
 80027ae:	4b29      	ldr	r3, [pc, #164]	; (8002854 <set_wall+0x234>)
 80027b0:	f993 3000 	ldrsb.w	r3, [r3]
 80027b4:	4619      	mov	r1, r3
 80027b6:	4b26      	ldr	r3, [pc, #152]	; (8002850 <set_wall+0x230>)
 80027b8:	f993 3000 	ldrsb.w	r3, [r3]
 80027bc:	4618      	mov	r0, r3
 80027be:	4a26      	ldr	r2, [pc, #152]	; (8002858 <set_wall+0x238>)
 80027c0:	460b      	mov	r3, r1
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	4403      	add	r3, r0
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	4a21      	ldr	r2, [pc, #132]	; (8002854 <set_wall+0x234>)
 80027d0:	f992 2000 	ldrsb.w	r2, [r2]
 80027d4:	4611      	mov	r1, r2
 80027d6:	4a1e      	ldr	r2, [pc, #120]	; (8002850 <set_wall+0x230>)
 80027d8:	f992 2000 	ldrsb.w	r2, [r2]
 80027dc:	4614      	mov	r4, r2
 80027de:	f043 0308 	orr.w	r3, r3, #8
 80027e2:	b2d8      	uxtb	r0, r3
 80027e4:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <set_wall+0x238>)
 80027e6:	460b      	mov	r3, r1
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	4423      	add	r3, r4
 80027f2:	4602      	mov	r2, r0
 80027f4:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 80027f6:	4b16      	ldr	r3, [pc, #88]	; (8002850 <set_wall+0x230>)
 80027f8:	f993 3000 	ldrsb.w	r3, [r3]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f340 832b 	ble.w	8002e58 <set_wall+0x838>
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <set_wall+0x234>)
 8002804:	f993 3000 	ldrsb.w	r3, [r3]
 8002808:	4618      	mov	r0, r3
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <set_wall+0x230>)
 800280c:	f993 3000 	ldrsb.w	r3, [r3]
 8002810:	1e5a      	subs	r2, r3, #1
 8002812:	4911      	ldr	r1, [pc, #68]	; (8002858 <set_wall+0x238>)
 8002814:	4603      	mov	r3, r0
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4403      	add	r3, r0
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	440b      	add	r3, r1
 800281e:	4413      	add	r3, r2
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	4a0c      	ldr	r2, [pc, #48]	; (8002854 <set_wall+0x234>)
 8002824:	f992 2000 	ldrsb.w	r2, [r2]
 8002828:	4610      	mov	r0, r2
 800282a:	4a09      	ldr	r2, [pc, #36]	; (8002850 <set_wall+0x230>)
 800282c:	f992 2000 	ldrsb.w	r2, [r2]
 8002830:	3a01      	subs	r2, #1
 8002832:	f043 0304 	orr.w	r3, r3, #4
 8002836:	b2dc      	uxtb	r4, r3
 8002838:	4907      	ldr	r1, [pc, #28]	; (8002858 <set_wall+0x238>)
 800283a:	4603      	mov	r3, r0
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4403      	add	r3, r0
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	440b      	add	r3, r1
 8002844:	4413      	add	r3, r2
 8002846:	4622      	mov	r2, r4
 8002848:	701a      	strb	r2, [r3, #0]
			}
			break;
 800284a:	e305      	b.n	8002e58 <set_wall+0x838>
 800284c:	2000041a 	.word	0x2000041a
 8002850:	20000418 	.word	0x20000418
 8002854:	20000419 	.word	0x20000419
 8002858:	20000590 	.word	0x20000590
		case east:
			x++;
 800285c:	4b7d      	ldr	r3, [pc, #500]	; (8002a54 <set_wall+0x434>)
 800285e:	f993 3000 	ldrsb.w	r3, [r3]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	3301      	adds	r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	b25a      	sxtb	r2, r3
 800286a:	4b7a      	ldr	r3, [pc, #488]	; (8002a54 <set_wall+0x434>)
 800286c:	701a      	strb	r2, [r3, #0]
			if(rbl){
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d04c      	beq.n	800290e <set_wall+0x2ee>
				maze[y][x] |= top_wall;
 8002874:	4b78      	ldr	r3, [pc, #480]	; (8002a58 <set_wall+0x438>)
 8002876:	f993 3000 	ldrsb.w	r3, [r3]
 800287a:	4619      	mov	r1, r3
 800287c:	4b75      	ldr	r3, [pc, #468]	; (8002a54 <set_wall+0x434>)
 800287e:	f993 3000 	ldrsb.w	r3, [r3]
 8002882:	4618      	mov	r0, r3
 8002884:	4a75      	ldr	r2, [pc, #468]	; (8002a5c <set_wall+0x43c>)
 8002886:	460b      	mov	r3, r1
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	4403      	add	r3, r0
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4a70      	ldr	r2, [pc, #448]	; (8002a58 <set_wall+0x438>)
 8002896:	f992 2000 	ldrsb.w	r2, [r2]
 800289a:	4611      	mov	r1, r2
 800289c:	4a6d      	ldr	r2, [pc, #436]	; (8002a54 <set_wall+0x434>)
 800289e:	f992 2000 	ldrsb.w	r2, [r2]
 80028a2:	4614      	mov	r4, r2
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	b2d8      	uxtb	r0, r3
 80028aa:	4a6c      	ldr	r2, [pc, #432]	; (8002a5c <set_wall+0x43c>)
 80028ac:	460b      	mov	r3, r1
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	4423      	add	r3, r4
 80028b8:	4602      	mov	r2, r0
 80028ba:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 80028bc:	4b66      	ldr	r3, [pc, #408]	; (8002a58 <set_wall+0x438>)
 80028be:	f993 3000 	ldrsb.w	r3, [r3]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	dd23      	ble.n	800290e <set_wall+0x2ee>
 80028c6:	4b64      	ldr	r3, [pc, #400]	; (8002a58 <set_wall+0x438>)
 80028c8:	f993 3000 	ldrsb.w	r3, [r3]
 80028cc:	1e5a      	subs	r2, r3, #1
 80028ce:	4b61      	ldr	r3, [pc, #388]	; (8002a54 <set_wall+0x434>)
 80028d0:	f993 3000 	ldrsb.w	r3, [r3]
 80028d4:	4618      	mov	r0, r3
 80028d6:	4961      	ldr	r1, [pc, #388]	; (8002a5c <set_wall+0x43c>)
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	440b      	add	r3, r1
 80028e2:	4403      	add	r3, r0
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	4a5c      	ldr	r2, [pc, #368]	; (8002a58 <set_wall+0x438>)
 80028e8:	f992 2000 	ldrsb.w	r2, [r2]
 80028ec:	3a01      	subs	r2, #1
 80028ee:	4959      	ldr	r1, [pc, #356]	; (8002a54 <set_wall+0x434>)
 80028f0:	f991 1000 	ldrsb.w	r1, [r1]
 80028f4:	460c      	mov	r4, r1
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	b2d8      	uxtb	r0, r3
 80028fc:	4957      	ldr	r1, [pc, #348]	; (8002a5c <set_wall+0x43c>)
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	440b      	add	r3, r1
 8002908:	4423      	add	r3, r4
 800290a:	4602      	mov	r2, r0
 800290c:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 800290e:	79bb      	ldrb	r3, [r7, #6]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d04c      	beq.n	80029ae <set_wall+0x38e>
				maze[y][x] |= bottom_wall;
 8002914:	4b50      	ldr	r3, [pc, #320]	; (8002a58 <set_wall+0x438>)
 8002916:	f993 3000 	ldrsb.w	r3, [r3]
 800291a:	4619      	mov	r1, r3
 800291c:	4b4d      	ldr	r3, [pc, #308]	; (8002a54 <set_wall+0x434>)
 800291e:	f993 3000 	ldrsb.w	r3, [r3]
 8002922:	4618      	mov	r0, r3
 8002924:	4a4d      	ldr	r2, [pc, #308]	; (8002a5c <set_wall+0x43c>)
 8002926:	460b      	mov	r3, r1
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4413      	add	r3, r2
 8002930:	4403      	add	r3, r0
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4a48      	ldr	r2, [pc, #288]	; (8002a58 <set_wall+0x438>)
 8002936:	f992 2000 	ldrsb.w	r2, [r2]
 800293a:	4611      	mov	r1, r2
 800293c:	4a45      	ldr	r2, [pc, #276]	; (8002a54 <set_wall+0x434>)
 800293e:	f992 2000 	ldrsb.w	r2, [r2]
 8002942:	4614      	mov	r4, r2
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	b2d8      	uxtb	r0, r3
 800294a:	4a44      	ldr	r2, [pc, #272]	; (8002a5c <set_wall+0x43c>)
 800294c:	460b      	mov	r3, r1
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	4423      	add	r3, r4
 8002958:	4602      	mov	r2, r0
 800295a:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 800295c:	4b3e      	ldr	r3, [pc, #248]	; (8002a58 <set_wall+0x438>)
 800295e:	f993 3000 	ldrsb.w	r3, [r3]
 8002962:	2b08      	cmp	r3, #8
 8002964:	dc23      	bgt.n	80029ae <set_wall+0x38e>
 8002966:	4b3c      	ldr	r3, [pc, #240]	; (8002a58 <set_wall+0x438>)
 8002968:	f993 3000 	ldrsb.w	r3, [r3]
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <set_wall+0x434>)
 8002970:	f993 3000 	ldrsb.w	r3, [r3]
 8002974:	4618      	mov	r0, r3
 8002976:	4939      	ldr	r1, [pc, #228]	; (8002a5c <set_wall+0x43c>)
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	440b      	add	r3, r1
 8002982:	4403      	add	r3, r0
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	4a34      	ldr	r2, [pc, #208]	; (8002a58 <set_wall+0x438>)
 8002988:	f992 2000 	ldrsb.w	r2, [r2]
 800298c:	3201      	adds	r2, #1
 800298e:	4931      	ldr	r1, [pc, #196]	; (8002a54 <set_wall+0x434>)
 8002990:	f991 1000 	ldrsb.w	r1, [r1]
 8002994:	460c      	mov	r4, r1
 8002996:	f043 0302 	orr.w	r3, r3, #2
 800299a:	b2d8      	uxtb	r0, r3
 800299c:	492f      	ldr	r1, [pc, #188]	; (8002a5c <set_wall+0x43c>)
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	440b      	add	r3, r1
 80029a8:	4423      	add	r3, r4
 80029aa:	4602      	mov	r2, r0
 80029ac:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 80029ae:	797b      	ldrb	r3, [r7, #5]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8253 	beq.w	8002e5c <set_wall+0x83c>
				maze[y][x] |= right_wall;
 80029b6:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <set_wall+0x438>)
 80029b8:	f993 3000 	ldrsb.w	r3, [r3]
 80029bc:	4619      	mov	r1, r3
 80029be:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <set_wall+0x434>)
 80029c0:	f993 3000 	ldrsb.w	r3, [r3]
 80029c4:	4618      	mov	r0, r3
 80029c6:	4a25      	ldr	r2, [pc, #148]	; (8002a5c <set_wall+0x43c>)
 80029c8:	460b      	mov	r3, r1
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	4403      	add	r3, r0
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	4a20      	ldr	r2, [pc, #128]	; (8002a58 <set_wall+0x438>)
 80029d8:	f992 2000 	ldrsb.w	r2, [r2]
 80029dc:	4611      	mov	r1, r2
 80029de:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <set_wall+0x434>)
 80029e0:	f992 2000 	ldrsb.w	r2, [r2]
 80029e4:	4614      	mov	r4, r2
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	b2d8      	uxtb	r0, r3
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <set_wall+0x43c>)
 80029ee:	460b      	mov	r3, r1
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4413      	add	r3, r2
 80029f8:	4423      	add	r3, r4
 80029fa:	4602      	mov	r2, r0
 80029fc:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <set_wall+0x434>)
 8002a00:	f993 3000 	ldrsb.w	r3, [r3]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	f300 8229 	bgt.w	8002e5c <set_wall+0x83c>
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <set_wall+0x438>)
 8002a0c:	f993 3000 	ldrsb.w	r3, [r3]
 8002a10:	4618      	mov	r0, r3
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <set_wall+0x434>)
 8002a14:	f993 3000 	ldrsb.w	r3, [r3]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	4910      	ldr	r1, [pc, #64]	; (8002a5c <set_wall+0x43c>)
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4403      	add	r3, r0
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	440b      	add	r3, r1
 8002a26:	4413      	add	r3, r2
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	4a0b      	ldr	r2, [pc, #44]	; (8002a58 <set_wall+0x438>)
 8002a2c:	f992 2000 	ldrsb.w	r2, [r2]
 8002a30:	4610      	mov	r0, r2
 8002a32:	4a08      	ldr	r2, [pc, #32]	; (8002a54 <set_wall+0x434>)
 8002a34:	f992 2000 	ldrsb.w	r2, [r2]
 8002a38:	3201      	adds	r2, #1
 8002a3a:	f043 0308 	orr.w	r3, r3, #8
 8002a3e:	b2dc      	uxtb	r4, r3
 8002a40:	4906      	ldr	r1, [pc, #24]	; (8002a5c <set_wall+0x43c>)
 8002a42:	4603      	mov	r3, r0
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4403      	add	r3, r0
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	440b      	add	r3, r1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	4622      	mov	r2, r4
 8002a50:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a52:	e203      	b.n	8002e5c <set_wall+0x83c>
 8002a54:	20000418 	.word	0x20000418
 8002a58:	20000419 	.word	0x20000419
 8002a5c:	20000590 	.word	0x20000590
		case north:
			y--;
 8002a60:	4b7d      	ldr	r3, [pc, #500]	; (8002c58 <set_wall+0x638>)
 8002a62:	f993 3000 	ldrsb.w	r3, [r3]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	b25a      	sxtb	r2, r3
 8002a6e:	4b7a      	ldr	r3, [pc, #488]	; (8002c58 <set_wall+0x638>)
 8002a70:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d04c      	beq.n	8002b12 <set_wall+0x4f2>
				maze[y][x] |= left_wall;
 8002a78:	4b77      	ldr	r3, [pc, #476]	; (8002c58 <set_wall+0x638>)
 8002a7a:	f993 3000 	ldrsb.w	r3, [r3]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4b76      	ldr	r3, [pc, #472]	; (8002c5c <set_wall+0x63c>)
 8002a82:	f993 3000 	ldrsb.w	r3, [r3]
 8002a86:	4618      	mov	r0, r3
 8002a88:	4a75      	ldr	r2, [pc, #468]	; (8002c60 <set_wall+0x640>)
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	4403      	add	r3, r0
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4a6f      	ldr	r2, [pc, #444]	; (8002c58 <set_wall+0x638>)
 8002a9a:	f992 2000 	ldrsb.w	r2, [r2]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4a6e      	ldr	r2, [pc, #440]	; (8002c5c <set_wall+0x63c>)
 8002aa2:	f992 2000 	ldrsb.w	r2, [r2]
 8002aa6:	4614      	mov	r4, r2
 8002aa8:	f043 0308 	orr.w	r3, r3, #8
 8002aac:	b2d8      	uxtb	r0, r3
 8002aae:	4a6c      	ldr	r2, [pc, #432]	; (8002c60 <set_wall+0x640>)
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	4423      	add	r3, r4
 8002abc:	4602      	mov	r2, r0
 8002abe:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002ac0:	4b66      	ldr	r3, [pc, #408]	; (8002c5c <set_wall+0x63c>)
 8002ac2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	dd23      	ble.n	8002b12 <set_wall+0x4f2>
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <set_wall+0x638>)
 8002acc:	f993 3000 	ldrsb.w	r3, [r3]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	4b62      	ldr	r3, [pc, #392]	; (8002c5c <set_wall+0x63c>)
 8002ad4:	f993 3000 	ldrsb.w	r3, [r3]
 8002ad8:	1e5a      	subs	r2, r3, #1
 8002ada:	4961      	ldr	r1, [pc, #388]	; (8002c60 <set_wall+0x640>)
 8002adc:	4603      	mov	r3, r0
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4403      	add	r3, r0
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	440b      	add	r3, r1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	4a5b      	ldr	r2, [pc, #364]	; (8002c58 <set_wall+0x638>)
 8002aec:	f992 2000 	ldrsb.w	r2, [r2]
 8002af0:	4610      	mov	r0, r2
 8002af2:	4a5a      	ldr	r2, [pc, #360]	; (8002c5c <set_wall+0x63c>)
 8002af4:	f992 2000 	ldrsb.w	r2, [r2]
 8002af8:	3a01      	subs	r2, #1
 8002afa:	f043 0304 	orr.w	r3, r3, #4
 8002afe:	b2dc      	uxtb	r4, r3
 8002b00:	4957      	ldr	r1, [pc, #348]	; (8002c60 <set_wall+0x640>)
 8002b02:	4603      	mov	r3, r0
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4403      	add	r3, r0
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	440b      	add	r3, r1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	4622      	mov	r2, r4
 8002b10:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002b12:	79bb      	ldrb	r3, [r7, #6]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d04c      	beq.n	8002bb2 <set_wall+0x592>
				maze[y][x] |= right_wall;
 8002b18:	4b4f      	ldr	r3, [pc, #316]	; (8002c58 <set_wall+0x638>)
 8002b1a:	f993 3000 	ldrsb.w	r3, [r3]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4b4e      	ldr	r3, [pc, #312]	; (8002c5c <set_wall+0x63c>)
 8002b22:	f993 3000 	ldrsb.w	r3, [r3]
 8002b26:	4618      	mov	r0, r3
 8002b28:	4a4d      	ldr	r2, [pc, #308]	; (8002c60 <set_wall+0x640>)
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	4403      	add	r3, r0
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4a47      	ldr	r2, [pc, #284]	; (8002c58 <set_wall+0x638>)
 8002b3a:	f992 2000 	ldrsb.w	r2, [r2]
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4a46      	ldr	r2, [pc, #280]	; (8002c5c <set_wall+0x63c>)
 8002b42:	f992 2000 	ldrsb.w	r2, [r2]
 8002b46:	4614      	mov	r4, r2
 8002b48:	f043 0304 	orr.w	r3, r3, #4
 8002b4c:	b2d8      	uxtb	r0, r3
 8002b4e:	4a44      	ldr	r2, [pc, #272]	; (8002c60 <set_wall+0x640>)
 8002b50:	460b      	mov	r3, r1
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	4423      	add	r3, r4
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002b60:	4b3e      	ldr	r3, [pc, #248]	; (8002c5c <set_wall+0x63c>)
 8002b62:	f993 3000 	ldrsb.w	r3, [r3]
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	dc23      	bgt.n	8002bb2 <set_wall+0x592>
 8002b6a:	4b3b      	ldr	r3, [pc, #236]	; (8002c58 <set_wall+0x638>)
 8002b6c:	f993 3000 	ldrsb.w	r3, [r3]
 8002b70:	4618      	mov	r0, r3
 8002b72:	4b3a      	ldr	r3, [pc, #232]	; (8002c5c <set_wall+0x63c>)
 8002b74:	f993 3000 	ldrsb.w	r3, [r3]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	4939      	ldr	r1, [pc, #228]	; (8002c60 <set_wall+0x640>)
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4403      	add	r3, r0
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	440b      	add	r3, r1
 8002b86:	4413      	add	r3, r2
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	4a33      	ldr	r2, [pc, #204]	; (8002c58 <set_wall+0x638>)
 8002b8c:	f992 2000 	ldrsb.w	r2, [r2]
 8002b90:	4610      	mov	r0, r2
 8002b92:	4a32      	ldr	r2, [pc, #200]	; (8002c5c <set_wall+0x63c>)
 8002b94:	f992 2000 	ldrsb.w	r2, [r2]
 8002b98:	3201      	adds	r2, #1
 8002b9a:	f043 0308 	orr.w	r3, r3, #8
 8002b9e:	b2dc      	uxtb	r4, r3
 8002ba0:	492f      	ldr	r1, [pc, #188]	; (8002c60 <set_wall+0x640>)
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4403      	add	r3, r0
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	440b      	add	r3, r1
 8002bac:	4413      	add	r3, r2
 8002bae:	4622      	mov	r2, r4
 8002bb0:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002bb2:	797b      	ldrb	r3, [r7, #5]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8153 	beq.w	8002e60 <set_wall+0x840>
				maze[y][x] |= top_wall;
 8002bba:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <set_wall+0x638>)
 8002bbc:	f993 3000 	ldrsb.w	r3, [r3]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <set_wall+0x63c>)
 8002bc4:	f993 3000 	ldrsb.w	r3, [r3]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	4a25      	ldr	r2, [pc, #148]	; (8002c60 <set_wall+0x640>)
 8002bcc:	460b      	mov	r3, r1
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	4403      	add	r3, r0
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	4a1f      	ldr	r2, [pc, #124]	; (8002c58 <set_wall+0x638>)
 8002bdc:	f992 2000 	ldrsb.w	r2, [r2]
 8002be0:	4611      	mov	r1, r2
 8002be2:	4a1e      	ldr	r2, [pc, #120]	; (8002c5c <set_wall+0x63c>)
 8002be4:	f992 2000 	ldrsb.w	r2, [r2]
 8002be8:	4614      	mov	r4, r2
 8002bea:	f043 0302 	orr.w	r3, r3, #2
 8002bee:	b2d8      	uxtb	r0, r3
 8002bf0:	4a1b      	ldr	r2, [pc, #108]	; (8002c60 <set_wall+0x640>)
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	4423      	add	r3, r4
 8002bfe:	4602      	mov	r2, r0
 8002c00:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <set_wall+0x638>)
 8002c04:	f993 3000 	ldrsb.w	r3, [r3]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f340 8129 	ble.w	8002e60 <set_wall+0x840>
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <set_wall+0x638>)
 8002c10:	f993 3000 	ldrsb.w	r3, [r3]
 8002c14:	1e5a      	subs	r2, r3, #1
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <set_wall+0x63c>)
 8002c18:	f993 3000 	ldrsb.w	r3, [r3]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	4910      	ldr	r1, [pc, #64]	; (8002c60 <set_wall+0x640>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	440b      	add	r3, r1
 8002c2a:	4403      	add	r3, r0
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <set_wall+0x638>)
 8002c30:	f992 2000 	ldrsb.w	r2, [r2]
 8002c34:	3a01      	subs	r2, #1
 8002c36:	4909      	ldr	r1, [pc, #36]	; (8002c5c <set_wall+0x63c>)
 8002c38:	f991 1000 	ldrsb.w	r1, [r1]
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	b2d8      	uxtb	r0, r3
 8002c44:	4906      	ldr	r1, [pc, #24]	; (8002c60 <set_wall+0x640>)
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	440b      	add	r3, r1
 8002c50:	4423      	add	r3, r4
 8002c52:	4602      	mov	r2, r0
 8002c54:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002c56:	e103      	b.n	8002e60 <set_wall+0x840>
 8002c58:	20000419 	.word	0x20000419
 8002c5c:	20000418 	.word	0x20000418
 8002c60:	20000590 	.word	0x20000590
		case south:
			y++;
 8002c64:	4b82      	ldr	r3, [pc, #520]	; (8002e70 <set_wall+0x850>)
 8002c66:	f993 3000 	ldrsb.w	r3, [r3]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	b25a      	sxtb	r2, r3
 8002c72:	4b7f      	ldr	r3, [pc, #508]	; (8002e70 <set_wall+0x850>)
 8002c74:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d04c      	beq.n	8002d16 <set_wall+0x6f6>
				maze[y][x] |= right_wall;
 8002c7c:	4b7c      	ldr	r3, [pc, #496]	; (8002e70 <set_wall+0x850>)
 8002c7e:	f993 3000 	ldrsb.w	r3, [r3]
 8002c82:	4619      	mov	r1, r3
 8002c84:	4b7b      	ldr	r3, [pc, #492]	; (8002e74 <set_wall+0x854>)
 8002c86:	f993 3000 	ldrsb.w	r3, [r3]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	4a7a      	ldr	r2, [pc, #488]	; (8002e78 <set_wall+0x858>)
 8002c8e:	460b      	mov	r3, r1
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	4403      	add	r3, r0
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	4a74      	ldr	r2, [pc, #464]	; (8002e70 <set_wall+0x850>)
 8002c9e:	f992 2000 	ldrsb.w	r2, [r2]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4a73      	ldr	r2, [pc, #460]	; (8002e74 <set_wall+0x854>)
 8002ca6:	f992 2000 	ldrsb.w	r2, [r2]
 8002caa:	4614      	mov	r4, r2
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	b2d8      	uxtb	r0, r3
 8002cb2:	4a71      	ldr	r2, [pc, #452]	; (8002e78 <set_wall+0x858>)
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	4423      	add	r3, r4
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002cc4:	4b6b      	ldr	r3, [pc, #428]	; (8002e74 <set_wall+0x854>)
 8002cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	dc23      	bgt.n	8002d16 <set_wall+0x6f6>
 8002cce:	4b68      	ldr	r3, [pc, #416]	; (8002e70 <set_wall+0x850>)
 8002cd0:	f993 3000 	ldrsb.w	r3, [r3]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	4b67      	ldr	r3, [pc, #412]	; (8002e74 <set_wall+0x854>)
 8002cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	4966      	ldr	r1, [pc, #408]	; (8002e78 <set_wall+0x858>)
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4403      	add	r3, r0
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	440b      	add	r3, r1
 8002cea:	4413      	add	r3, r2
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	4a60      	ldr	r2, [pc, #384]	; (8002e70 <set_wall+0x850>)
 8002cf0:	f992 2000 	ldrsb.w	r2, [r2]
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4a5f      	ldr	r2, [pc, #380]	; (8002e74 <set_wall+0x854>)
 8002cf8:	f992 2000 	ldrsb.w	r2, [r2]
 8002cfc:	3201      	adds	r2, #1
 8002cfe:	f043 0308 	orr.w	r3, r3, #8
 8002d02:	b2dc      	uxtb	r4, r3
 8002d04:	495c      	ldr	r1, [pc, #368]	; (8002e78 <set_wall+0x858>)
 8002d06:	4603      	mov	r3, r0
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4403      	add	r3, r0
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	440b      	add	r3, r1
 8002d10:	4413      	add	r3, r2
 8002d12:	4622      	mov	r2, r4
 8002d14:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002d16:	79bb      	ldrb	r3, [r7, #6]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d04c      	beq.n	8002db6 <set_wall+0x796>
				maze[y][x] |= left_wall;
 8002d1c:	4b54      	ldr	r3, [pc, #336]	; (8002e70 <set_wall+0x850>)
 8002d1e:	f993 3000 	ldrsb.w	r3, [r3]
 8002d22:	4619      	mov	r1, r3
 8002d24:	4b53      	ldr	r3, [pc, #332]	; (8002e74 <set_wall+0x854>)
 8002d26:	f993 3000 	ldrsb.w	r3, [r3]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	4a52      	ldr	r2, [pc, #328]	; (8002e78 <set_wall+0x858>)
 8002d2e:	460b      	mov	r3, r1
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	4403      	add	r3, r0
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	4a4c      	ldr	r2, [pc, #304]	; (8002e70 <set_wall+0x850>)
 8002d3e:	f992 2000 	ldrsb.w	r2, [r2]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4a4b      	ldr	r2, [pc, #300]	; (8002e74 <set_wall+0x854>)
 8002d46:	f992 2000 	ldrsb.w	r2, [r2]
 8002d4a:	4614      	mov	r4, r2
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	b2d8      	uxtb	r0, r3
 8002d52:	4a49      	ldr	r2, [pc, #292]	; (8002e78 <set_wall+0x858>)
 8002d54:	460b      	mov	r3, r1
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4423      	add	r3, r4
 8002d60:	4602      	mov	r2, r0
 8002d62:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002d64:	4b43      	ldr	r3, [pc, #268]	; (8002e74 <set_wall+0x854>)
 8002d66:	f993 3000 	ldrsb.w	r3, [r3]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	dd23      	ble.n	8002db6 <set_wall+0x796>
 8002d6e:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <set_wall+0x850>)
 8002d70:	f993 3000 	ldrsb.w	r3, [r3]
 8002d74:	4618      	mov	r0, r3
 8002d76:	4b3f      	ldr	r3, [pc, #252]	; (8002e74 <set_wall+0x854>)
 8002d78:	f993 3000 	ldrsb.w	r3, [r3]
 8002d7c:	1e5a      	subs	r2, r3, #1
 8002d7e:	493e      	ldr	r1, [pc, #248]	; (8002e78 <set_wall+0x858>)
 8002d80:	4603      	mov	r3, r0
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4403      	add	r3, r0
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	440b      	add	r3, r1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	4a38      	ldr	r2, [pc, #224]	; (8002e70 <set_wall+0x850>)
 8002d90:	f992 2000 	ldrsb.w	r2, [r2]
 8002d94:	4610      	mov	r0, r2
 8002d96:	4a37      	ldr	r2, [pc, #220]	; (8002e74 <set_wall+0x854>)
 8002d98:	f992 2000 	ldrsb.w	r2, [r2]
 8002d9c:	3a01      	subs	r2, #1
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	b2dc      	uxtb	r4, r3
 8002da4:	4934      	ldr	r1, [pc, #208]	; (8002e78 <set_wall+0x858>)
 8002da6:	4603      	mov	r3, r0
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4403      	add	r3, r0
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	440b      	add	r3, r1
 8002db0:	4413      	add	r3, r2
 8002db2:	4622      	mov	r2, r4
 8002db4:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002db6:	797b      	ldrb	r3, [r7, #5]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d053      	beq.n	8002e64 <set_wall+0x844>
				maze[y][x] |= bottom_wall;
 8002dbc:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <set_wall+0x850>)
 8002dbe:	f993 3000 	ldrsb.w	r3, [r3]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <set_wall+0x854>)
 8002dc6:	f993 3000 	ldrsb.w	r3, [r3]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	4a2a      	ldr	r2, [pc, #168]	; (8002e78 <set_wall+0x858>)
 8002dce:	460b      	mov	r3, r1
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	4403      	add	r3, r0
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4a24      	ldr	r2, [pc, #144]	; (8002e70 <set_wall+0x850>)
 8002dde:	f992 2000 	ldrsb.w	r2, [r2]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <set_wall+0x854>)
 8002de6:	f992 2000 	ldrsb.w	r2, [r2]
 8002dea:	4614      	mov	r4, r2
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	b2d8      	uxtb	r0, r3
 8002df2:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <set_wall+0x858>)
 8002df4:	460b      	mov	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	4423      	add	r3, r4
 8002e00:	4602      	mov	r2, r0
 8002e02:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <set_wall+0x850>)
 8002e06:	f993 3000 	ldrsb.w	r3, [r3]
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	dc2a      	bgt.n	8002e64 <set_wall+0x844>
 8002e0e:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <set_wall+0x850>)
 8002e10:	f993 3000 	ldrsb.w	r3, [r3]
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <set_wall+0x854>)
 8002e18:	f993 3000 	ldrsb.w	r3, [r3]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	4916      	ldr	r1, [pc, #88]	; (8002e78 <set_wall+0x858>)
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	440b      	add	r3, r1
 8002e2a:	4403      	add	r3, r0
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <set_wall+0x850>)
 8002e30:	f992 2000 	ldrsb.w	r2, [r2]
 8002e34:	3201      	adds	r2, #1
 8002e36:	490f      	ldr	r1, [pc, #60]	; (8002e74 <set_wall+0x854>)
 8002e38:	f991 1000 	ldrsb.w	r1, [r1]
 8002e3c:	460c      	mov	r4, r1
 8002e3e:	f043 0302 	orr.w	r3, r3, #2
 8002e42:	b2d8      	uxtb	r0, r3
 8002e44:	490c      	ldr	r1, [pc, #48]	; (8002e78 <set_wall+0x858>)
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	440b      	add	r3, r1
 8002e50:	4423      	add	r3, r4
 8002e52:	4602      	mov	r2, r0
 8002e54:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002e56:	e005      	b.n	8002e64 <set_wall+0x844>
			break;
 8002e58:	bf00      	nop
 8002e5a:	e004      	b.n	8002e66 <set_wall+0x846>
			break;
 8002e5c:	bf00      	nop
 8002e5e:	e002      	b.n	8002e66 <set_wall+0x846>
			break;
 8002e60:	bf00      	nop
 8002e62:	e000      	b.n	8002e66 <set_wall+0x846>
			break;
 8002e64:	bf00      	nop
	}
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc90      	pop	{r4, r7}
 8002e6e:	4770      	bx	lr
 8002e70:	20000419 	.word	0x20000419
 8002e74:	20000418 	.word	0x20000418
 8002e78:	20000590 	.word	0x20000590

08002e7c <sensor_init>:
VL53L0X_Version_t *pVersion[n_vl53l0x];
VL53L0X_DeviceInfo_t DeviceInfo[n_vl53l0x];



void sensor_init(){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 8002e82:	2200      	movs	r2, #0
 8002e84:	217e      	movs	r1, #126	; 0x7e
 8002e86:	483a      	ldr	r0, [pc, #232]	; (8002f70 <sensor_init+0xf4>)
 8002e88:	f001 fddc 	bl	8004a44 <HAL_GPIO_WritePin>
            |xSHUT_4_Pin|xSHUT_5_Pin, GPIO_PIN_RESET);
	HAL_Delay(100);
 8002e8c:	2064      	movs	r0, #100	; 0x64
 8002e8e:	f001 faf1 	bl	8004474 <HAL_Delay>
	uint8_t addr = 0x54;
 8002e92:	2354      	movs	r3, #84	; 0x54
 8002e94:	71fb      	strb	r3, [r7, #7]
	for(int i = 0 ; i < n_vl53l0x; i++){
 8002e96:	2300      	movs	r3, #0
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	e060      	b.n	8002f5e <sensor_init+0xe2>
		pMyDevice[i] = &MyDevice[i];
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8002ea2:	fb02 f303 	mul.w	r3, r2, r3
 8002ea6:	4a33      	ldr	r2, [pc, #204]	; (8002f74 <sensor_init+0xf8>)
 8002ea8:	441a      	add	r2, r3
 8002eaa:	4933      	ldr	r1, [pc, #204]	; (8002f78 <sensor_init+0xfc>)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		pMyDevice[i]->I2cDevAddr      = 0x52;
 8002eb2:	4a31      	ldr	r2, [pc, #196]	; (8002f78 <sensor_init+0xfc>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eba:	2252      	movs	r2, #82	; 0x52
 8002ebc:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		pMyDevice[i]->comms_type      =  1;
 8002ec0:	4a2d      	ldr	r2, [pc, #180]	; (8002f78 <sensor_init+0xfc>)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		pMyDevice[i]->comms_speed_khz =  100;
 8002ece:	4a2a      	ldr	r2, [pc, #168]	; (8002f78 <sensor_init+0xfc>)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed6:	2264      	movs	r2, #100	; 0x64
 8002ed8:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
		pMyDevice[i]->I2cHandle = &hi2c1;
 8002edc:	4a26      	ldr	r2, [pc, #152]	; (8002f78 <sensor_init+0xfc>)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee4:	4a25      	ldr	r2, [pc, #148]	; (8002f7c <sensor_init+0x100>)
 8002ee6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		pVersion[i] = &Version[i];
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4a24      	ldr	r2, [pc, #144]	; (8002f80 <sensor_init+0x104>)
 8002ef0:	441a      	add	r2, r3
 8002ef2:	4924      	ldr	r1, [pc, #144]	; (8002f84 <sensor_init+0x108>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_GPIO_WritePin(GPIOA, ((uint16_t)0x0002) << i, GPIO_PIN_SET);
 8002efa:	2202      	movs	r2, #2
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2201      	movs	r2, #1
 8002f06:	4619      	mov	r1, r3
 8002f08:	4819      	ldr	r0, [pc, #100]	; (8002f70 <sensor_init+0xf4>)
 8002f0a:	f001 fd9b 	bl	8004a44 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8002f0e:	200a      	movs	r0, #10
 8002f10:	f001 fab0 	bl	8004474 <HAL_Delay>
		status_debug = vl53l0x_init(pMyDevice[i], pVersion[i], &DeviceInfo[i], addr);
 8002f14:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <sensor_init+0xfc>)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f1c:	4a19      	ldr	r2, [pc, #100]	; (8002f84 <sensor_init+0x108>)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	4613      	mov	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	4413      	add	r3, r2
 8002f30:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <sensor_init+0x10c>)
 8002f32:	441a      	add	r2, r3
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	f008 ffa7 	bl	800be88 <vl53l0x_init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <sensor_init+0x110>)
 8002f40:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 8002f42:	200a      	movs	r0, #10
 8002f44:	f001 fa96 	bl	8004474 <HAL_Delay>
		addr+=2;
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	71fb      	strb	r3, [r7, #7]
		if(status_debug != VL53L0X_ERROR_NONE)
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <sensor_init+0x110>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	b25b      	sxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d106      	bne.n	8002f66 <sensor_init+0xea>
	for(int i = 0 ; i < n_vl53l0x; i++){
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b05      	cmp	r3, #5
 8002f62:	dd9b      	ble.n	8002e9c <sensor_init+0x20>
			break;
	}
}
 8002f64:	e000      	b.n	8002f68 <sensor_init+0xec>
			break;
 8002f66:	bf00      	nop
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40010800 	.word	0x40010800
 8002f74:	20000664 	.word	0x20000664
 8002f78:	20000f94 	.word	0x20000f94
 8002f7c:	2000041c 	.word	0x2000041c
 8002f80:	20000fac 	.word	0x20000fac
 8002f84:	20000fdc 	.word	0x20000fdc
 8002f88:	20000ff4 	.word	0x20000ff4
 8002f8c:	20000660 	.word	0x20000660

08002f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f94:	f001 fa0c 	bl	80043b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f98:	f000 f89a 	bl	80030d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f9c:	f000 faa2 	bl	80034e4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002fa0:	f000 f90a 	bl	80031b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002fa4:	f000 f9cc 	bl	8003340 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002fa8:	f000 fa1e 	bl	80033e8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002fac:	f000 f8d6 	bl	800315c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002fb0:	f000 fa6e 	bl	8003490 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	483f      	ldr	r0, [pc, #252]	; (80030b4 <main+0x124>)
 8002fb8:	f003 fabc 	bl	8006534 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	483d      	ldr	r0, [pc, #244]	; (80030b4 <main+0x124>)
 8002fc0:	f003 fab8 	bl	8006534 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002fc4:	2108      	movs	r1, #8
 8002fc6:	483b      	ldr	r0, [pc, #236]	; (80030b4 <main+0x124>)
 8002fc8:	f003 fab4 	bl	8006534 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002fcc:	210c      	movs	r1, #12
 8002fce:	4839      	ldr	r0, [pc, #228]	; (80030b4 <main+0x124>)
 8002fd0:	f003 fab0 	bl	8006534 <HAL_TIM_PWM_Start>
  	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002fd4:	213c      	movs	r1, #60	; 0x3c
 8002fd6:	4838      	ldr	r0, [pc, #224]	; (80030b8 <main+0x128>)
 8002fd8:	f003 fbf0 	bl	80067bc <HAL_TIM_Encoder_Start>
  	HAL_TIM_Base_Start_IT(&htim2);
 8002fdc:	4836      	ldr	r0, [pc, #216]	; (80030b8 <main+0x128>)
 8002fde:	f003 f9ff 	bl	80063e0 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002fe2:	213c      	movs	r1, #60	; 0x3c
 8002fe4:	4835      	ldr	r0, [pc, #212]	; (80030bc <main+0x12c>)
 8002fe6:	f003 fbe9 	bl	80067bc <HAL_TIM_Encoder_Start>
  	HAL_TIM_Base_Start_IT(&htim3);
 8002fea:	4834      	ldr	r0, [pc, #208]	; (80030bc <main+0x12c>)
 8002fec:	f003 f9f8 	bl	80063e0 <HAL_TIM_Base_Start_IT>
	HAL_Delay(2000);
 8002ff0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ff4:	f001 fa3e 	bl	8004474 <HAL_Delay>

	Rmode = 0;
 8002ff8:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <main+0x130>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
	status = 0;
 8002ffe:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <main+0x134>)
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 8003004:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <main+0x124>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2a      	ldr	r2, [pc, #168]	; (80030b4 <main+0x124>)
 800300a:	68d2      	ldr	r2, [r2, #12]
 800300c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 800300e:	4b29      	ldr	r3, [pc, #164]	; (80030b4 <main+0x124>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a28      	ldr	r2, [pc, #160]	; (80030b4 <main+0x124>)
 8003014:	68d2      	ldr	r2, [r2, #12]
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 8003018:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <main+0x124>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a25      	ldr	r2, [pc, #148]	; (80030b4 <main+0x124>)
 800301e:	68d2      	ldr	r2, [r2, #12]
 8003020:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <main+0x124>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <main+0x124>)
 8003028:	68d2      	ldr	r2, [r2, #12]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40
	#if debug == 1
		sprintf((char*)uart_buffer, "uart send data\n");
		HAL_UART_Transmit(&huart3, uart_buffer, sizeof (uart_buffer), 10);
	#endif
	HAL_Delay(2000);
 800302c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003030:	f001 fa20 	bl	8004474 <HAL_Delay>
	sensor_init();
 8003034:	f7ff ff22 	bl	8002e7c <sensor_init>
	if(status_debug == VL53L0X_ERROR_NONE){
 8003038:	4b23      	ldr	r3, [pc, #140]	; (80030c8 <main+0x138>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	b25b      	sxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d105      	bne.n	800304e <main+0xbe>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003042:	2201      	movs	r2, #1
 8003044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003048:	4820      	ldr	r0, [pc, #128]	; (80030cc <main+0x13c>)
 800304a:	f001 fcfb 	bl	8004a44 <HAL_GPIO_WritePin>
			b = TIM3->CNT;
		#endif
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Rmode == 1) {
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <main+0x130>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d114      	bne.n	8003082 <main+0xf2>
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8003058:	2006      	movs	r0, #6
 800305a:	f001 fb54 	bl	8004706 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 800305e:	2007      	movs	r0, #7
 8003060:	f001 fb51 	bl	8004706 <HAL_NVIC_DisableIRQ>
			HAL_Delay(2000);
 8003064:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003068:	f001 fa04 	bl	8004474 <HAL_Delay>
			start_fill();
 800306c:	f7fd fe42 	bl	8000cf4 <start_fill>
			//uint8_t d;
			//u_turnf(&d);
			//findShortestPath();
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003070:	2006      	movs	r0, #6
 8003072:	f001 fb3a 	bl	80046ea <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003076:	2007      	movs	r0, #7
 8003078:	f001 fb37 	bl	80046ea <HAL_NVIC_EnableIRQ>
			Rmode = 0;
 800307c:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <main+0x130>)
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
		}
		if (Rmode == 2) {
 8003082:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <main+0x130>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d1e0      	bne.n	800304e <main+0xbe>
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800308c:	2006      	movs	r0, #6
 800308e:	f001 fb3a 	bl	8004706 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8003092:	2007      	movs	r0, #7
 8003094:	f001 fb37 	bl	8004706 <HAL_NVIC_DisableIRQ>

			HAL_Delay(500);
 8003098:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800309c:	f001 f9ea 	bl	8004474 <HAL_Delay>
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80030a0:	2006      	movs	r0, #6
 80030a2:	f001 fb22 	bl	80046ea <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80030a6:	2007      	movs	r0, #7
 80030a8:	f001 fb1f 	bl	80046ea <HAL_NVIC_EnableIRQ>
			Rmode = 0;
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <main+0x130>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
		if (Rmode == 1) {
 80030b2:	e7cc      	b.n	800304e <main+0xbe>
 80030b4:	20000470 	.word	0x20000470
 80030b8:	200004b8 	.word	0x200004b8
 80030bc:	20000500 	.word	0x20000500
 80030c0:	20000658 	.word	0x20000658
 80030c4:	20000659 	.word	0x20000659
 80030c8:	20000660 	.word	0x20000660
 80030cc:	40011000 	.word	0x40011000

080030d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b090      	sub	sp, #64	; 0x40
 80030d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030d6:	f107 0318 	add.w	r3, r7, #24
 80030da:	2228      	movs	r2, #40	; 0x28
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f009 fa0a 	bl	800c4f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030e4:	1d3b      	adds	r3, r7, #4
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	609a      	str	r2, [r3, #8]
 80030ee:	60da      	str	r2, [r3, #12]
 80030f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80030fc:	2300      	movs	r3, #0
 80030fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003100:	2301      	movs	r3, #1
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003104:	2302      	movs	r3, #2
 8003106:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003108:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800310c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800310e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003112:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003114:	f107 0318 	add.w	r3, r7, #24
 8003118:	4618      	mov	r0, r3
 800311a:	f002 fd01 	bl	8005b20 <HAL_RCC_OscConfig>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003124:	f000 fa6a 	bl	80035fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003128:	230f      	movs	r3, #15
 800312a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800312c:	2302      	movs	r3, #2
 800312e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	2102      	movs	r1, #2
 8003142:	4618      	mov	r0, r3
 8003144:	f002 ff6e 	bl	8006024 <HAL_RCC_ClockConfig>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800314e:	f000 fa55 	bl	80035fc <Error_Handler>
  }
}
 8003152:	bf00      	nop
 8003154:	3740      	adds	r7, #64	; 0x40
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003160:	4b12      	ldr	r3, [pc, #72]	; (80031ac <MX_I2C1_Init+0x50>)
 8003162:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <MX_I2C1_Init+0x54>)
 8003164:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003166:	4b11      	ldr	r3, [pc, #68]	; (80031ac <MX_I2C1_Init+0x50>)
 8003168:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <MX_I2C1_Init+0x58>)
 800316a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <MX_I2C1_Init+0x50>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <MX_I2C1_Init+0x50>)
 8003174:	2200      	movs	r2, #0
 8003176:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <MX_I2C1_Init+0x50>)
 800317a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800317e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <MX_I2C1_Init+0x50>)
 8003182:	2200      	movs	r2, #0
 8003184:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <MX_I2C1_Init+0x50>)
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800318c:	4b07      	ldr	r3, [pc, #28]	; (80031ac <MX_I2C1_Init+0x50>)
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <MX_I2C1_Init+0x50>)
 8003194:	2200      	movs	r2, #0
 8003196:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003198:	4804      	ldr	r0, [pc, #16]	; (80031ac <MX_I2C1_Init+0x50>)
 800319a:	f001 fc8d 	bl	8004ab8 <HAL_I2C_Init>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031a4:	f000 fa2a 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	2000041c 	.word	0x2000041c
 80031b0:	40005400 	.word	0x40005400
 80031b4:	000186a0 	.word	0x000186a0

080031b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b096      	sub	sp, #88	; 0x58
 80031bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	605a      	str	r2, [r3, #4]
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	60da      	str	r2, [r3, #12]
 80031e4:	611a      	str	r2, [r3, #16]
 80031e6:	615a      	str	r2, [r3, #20]
 80031e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	2220      	movs	r2, #32
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f009 f981 	bl	800c4f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031f6:	4b50      	ldr	r3, [pc, #320]	; (8003338 <MX_TIM1_Init+0x180>)
 80031f8:	4a50      	ldr	r2, [pc, #320]	; (800333c <MX_TIM1_Init+0x184>)
 80031fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 80031fc:	4b4e      	ldr	r3, [pc, #312]	; (8003338 <MX_TIM1_Init+0x180>)
 80031fe:	2263      	movs	r2, #99	; 0x63
 8003200:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003202:	4b4d      	ldr	r3, [pc, #308]	; (8003338 <MX_TIM1_Init+0x180>)
 8003204:	2200      	movs	r2, #0
 8003206:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8003208:	4b4b      	ldr	r3, [pc, #300]	; (8003338 <MX_TIM1_Init+0x180>)
 800320a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800320e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003210:	4b49      	ldr	r3, [pc, #292]	; (8003338 <MX_TIM1_Init+0x180>)
 8003212:	2200      	movs	r2, #0
 8003214:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003216:	4b48      	ldr	r3, [pc, #288]	; (8003338 <MX_TIM1_Init+0x180>)
 8003218:	2200      	movs	r2, #0
 800321a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800321c:	4b46      	ldr	r3, [pc, #280]	; (8003338 <MX_TIM1_Init+0x180>)
 800321e:	2280      	movs	r2, #128	; 0x80
 8003220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003222:	4845      	ldr	r0, [pc, #276]	; (8003338 <MX_TIM1_Init+0x180>)
 8003224:	f003 f88c 	bl	8006340 <HAL_TIM_Base_Init>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800322e:	f000 f9e5 	bl	80035fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003236:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003238:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800323c:	4619      	mov	r1, r3
 800323e:	483e      	ldr	r0, [pc, #248]	; (8003338 <MX_TIM1_Init+0x180>)
 8003240:	f003 fd14 	bl	8006c6c <HAL_TIM_ConfigClockSource>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800324a:	f000 f9d7 	bl	80035fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800324e:	483a      	ldr	r0, [pc, #232]	; (8003338 <MX_TIM1_Init+0x180>)
 8003250:	f003 f918 	bl	8006484 <HAL_TIM_PWM_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800325a:	f000 f9cf 	bl	80035fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003262:	2300      	movs	r3, #0
 8003264:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003266:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800326a:	4619      	mov	r1, r3
 800326c:	4832      	ldr	r0, [pc, #200]	; (8003338 <MX_TIM1_Init+0x180>)
 800326e:	f004 f895 	bl	800739c <HAL_TIMEx_MasterConfigSynchronization>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003278:	f000 f9c0 	bl	80035fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800327c:	2360      	movs	r3, #96	; 0x60
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003284:	2300      	movs	r3, #0
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003288:	2300      	movs	r3, #0
 800328a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003290:	2300      	movs	r3, #0
 8003292:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003294:	2300      	movs	r3, #0
 8003296:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800329c:	2200      	movs	r2, #0
 800329e:	4619      	mov	r1, r3
 80032a0:	4825      	ldr	r0, [pc, #148]	; (8003338 <MX_TIM1_Init+0x180>)
 80032a2:	f003 fc21 	bl	8006ae8 <HAL_TIM_PWM_ConfigChannel>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80032ac:	f000 f9a6 	bl	80035fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032b4:	2204      	movs	r2, #4
 80032b6:	4619      	mov	r1, r3
 80032b8:	481f      	ldr	r0, [pc, #124]	; (8003338 <MX_TIM1_Init+0x180>)
 80032ba:	f003 fc15 	bl	8006ae8 <HAL_TIM_PWM_ConfigChannel>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80032c4:	f000 f99a 	bl	80035fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032cc:	2208      	movs	r2, #8
 80032ce:	4619      	mov	r1, r3
 80032d0:	4819      	ldr	r0, [pc, #100]	; (8003338 <MX_TIM1_Init+0x180>)
 80032d2:	f003 fc09 	bl	8006ae8 <HAL_TIM_PWM_ConfigChannel>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80032dc:	f000 f98e 	bl	80035fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80032e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e4:	220c      	movs	r2, #12
 80032e6:	4619      	mov	r1, r3
 80032e8:	4813      	ldr	r0, [pc, #76]	; (8003338 <MX_TIM1_Init+0x180>)
 80032ea:	f003 fbfd 	bl	8006ae8 <HAL_TIM_PWM_ConfigChannel>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80032f4:	f000 f982 	bl	80035fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800330c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003310:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003312:	2300      	movs	r3, #0
 8003314:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	4619      	mov	r1, r3
 800331a:	4807      	ldr	r0, [pc, #28]	; (8003338 <MX_TIM1_Init+0x180>)
 800331c:	f004 f89c 	bl	8007458 <HAL_TIMEx_ConfigBreakDeadTime>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003326:	f000 f969 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800332a:	4803      	ldr	r0, [pc, #12]	; (8003338 <MX_TIM1_Init+0x180>)
 800332c:	f000 fab4 	bl	8003898 <HAL_TIM_MspPostInit>

}
 8003330:	bf00      	nop
 8003332:	3758      	adds	r7, #88	; 0x58
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000470 	.word	0x20000470
 800333c:	40012c00 	.word	0x40012c00

08003340 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08c      	sub	sp, #48	; 0x30
 8003344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003346:	f107 030c 	add.w	r3, r7, #12
 800334a:	2224      	movs	r2, #36	; 0x24
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f009 f8d2 	bl	800c4f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003354:	1d3b      	adds	r3, r7, #4
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800335c:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <MX_TIM2_Init+0xa4>)
 800335e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003362:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003364:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <MX_TIM2_Init+0xa4>)
 8003366:	2200      	movs	r2, #0
 8003368:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800336a:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <MX_TIM2_Init+0xa4>)
 800336c:	2200      	movs	r2, #0
 800336e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003370:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <MX_TIM2_Init+0xa4>)
 8003372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003376:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003378:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <MX_TIM2_Init+0xa4>)
 800337a:	2200      	movs	r2, #0
 800337c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800337e:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <MX_TIM2_Init+0xa4>)
 8003380:	2200      	movs	r2, #0
 8003382:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003384:	2301      	movs	r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800338c:	2301      	movs	r3, #1
 800338e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003390:	2300      	movs	r3, #0
 8003392:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003398:	2300      	movs	r3, #0
 800339a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800339c:	2301      	movs	r3, #1
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033a0:	2300      	movs	r3, #0
 80033a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80033a8:	f107 030c 	add.w	r3, r7, #12
 80033ac:	4619      	mov	r1, r3
 80033ae:	480d      	ldr	r0, [pc, #52]	; (80033e4 <MX_TIM2_Init+0xa4>)
 80033b0:	f003 f962 	bl	8006678 <HAL_TIM_Encoder_Init>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80033ba:	f000 f91f 	bl	80035fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	4619      	mov	r1, r3
 80033ca:	4806      	ldr	r0, [pc, #24]	; (80033e4 <MX_TIM2_Init+0xa4>)
 80033cc:	f003 ffe6 	bl	800739c <HAL_TIMEx_MasterConfigSynchronization>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80033d6:	f000 f911 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033da:	bf00      	nop
 80033dc:	3730      	adds	r7, #48	; 0x30
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	200004b8 	.word	0x200004b8

080033e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08c      	sub	sp, #48	; 0x30
 80033ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033ee:	f107 030c 	add.w	r3, r7, #12
 80033f2:	2224      	movs	r2, #36	; 0x24
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f009 f87e 	bl	800c4f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003404:	4b20      	ldr	r3, [pc, #128]	; (8003488 <MX_TIM3_Init+0xa0>)
 8003406:	4a21      	ldr	r2, [pc, #132]	; (800348c <MX_TIM3_Init+0xa4>)
 8003408:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800340a:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <MX_TIM3_Init+0xa0>)
 800340c:	2200      	movs	r2, #0
 800340e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003410:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <MX_TIM3_Init+0xa0>)
 8003412:	2200      	movs	r2, #0
 8003414:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003416:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <MX_TIM3_Init+0xa0>)
 8003418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800341c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <MX_TIM3_Init+0xa0>)
 8003420:	2200      	movs	r2, #0
 8003422:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003424:	4b18      	ldr	r3, [pc, #96]	; (8003488 <MX_TIM3_Init+0xa0>)
 8003426:	2200      	movs	r2, #0
 8003428:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800342a:	2301      	movs	r3, #1
 800342c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003432:	2301      	movs	r3, #1
 8003434:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003436:	2300      	movs	r3, #0
 8003438:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800343e:	2300      	movs	r3, #0
 8003440:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003442:	2301      	movs	r3, #1
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003446:	2300      	movs	r3, #0
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800344e:	f107 030c 	add.w	r3, r7, #12
 8003452:	4619      	mov	r1, r3
 8003454:	480c      	ldr	r0, [pc, #48]	; (8003488 <MX_TIM3_Init+0xa0>)
 8003456:	f003 f90f 	bl	8006678 <HAL_TIM_Encoder_Init>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003460:	f000 f8cc 	bl	80035fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003464:	2300      	movs	r3, #0
 8003466:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800346c:	1d3b      	adds	r3, r7, #4
 800346e:	4619      	mov	r1, r3
 8003470:	4805      	ldr	r0, [pc, #20]	; (8003488 <MX_TIM3_Init+0xa0>)
 8003472:	f003 ff93 	bl	800739c <HAL_TIMEx_MasterConfigSynchronization>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800347c:	f000 f8be 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003480:	bf00      	nop
 8003482:	3730      	adds	r7, #48	; 0x30
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000500 	.word	0x20000500
 800348c:	40000400 	.word	0x40000400

08003490 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003494:	4b11      	ldr	r3, [pc, #68]	; (80034dc <MX_USART3_UART_Init+0x4c>)
 8003496:	4a12      	ldr	r2, [pc, #72]	; (80034e0 <MX_USART3_UART_Init+0x50>)
 8003498:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <MX_USART3_UART_Init+0x4c>)
 800349c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80034a2:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <MX_USART3_UART_Init+0x4c>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <MX_USART3_UART_Init+0x4c>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <MX_USART3_UART_Init+0x4c>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <MX_USART3_UART_Init+0x4c>)
 80034b6:	220c      	movs	r2, #12
 80034b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ba:	4b08      	ldr	r3, [pc, #32]	; (80034dc <MX_USART3_UART_Init+0x4c>)
 80034bc:	2200      	movs	r2, #0
 80034be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <MX_USART3_UART_Init+0x4c>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034c6:	4805      	ldr	r0, [pc, #20]	; (80034dc <MX_USART3_UART_Init+0x4c>)
 80034c8:	f004 f829 	bl	800751e <HAL_UART_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80034d2:	f000 f893 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000548 	.word	0x20000548
 80034e0:	40004800 	.word	0x40004800

080034e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ea:	f107 0310 	add.w	r3, r7, #16
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	609a      	str	r2, [r3, #8]
 80034f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f8:	4b3b      	ldr	r3, [pc, #236]	; (80035e8 <MX_GPIO_Init+0x104>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	4a3a      	ldr	r2, [pc, #232]	; (80035e8 <MX_GPIO_Init+0x104>)
 80034fe:	f043 0310 	orr.w	r3, r3, #16
 8003502:	6193      	str	r3, [r2, #24]
 8003504:	4b38      	ldr	r3, [pc, #224]	; (80035e8 <MX_GPIO_Init+0x104>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003510:	4b35      	ldr	r3, [pc, #212]	; (80035e8 <MX_GPIO_Init+0x104>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <MX_GPIO_Init+0x104>)
 8003516:	f043 0320 	orr.w	r3, r3, #32
 800351a:	6193      	str	r3, [r2, #24]
 800351c:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <MX_GPIO_Init+0x104>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003528:	4b2f      	ldr	r3, [pc, #188]	; (80035e8 <MX_GPIO_Init+0x104>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	4a2e      	ldr	r2, [pc, #184]	; (80035e8 <MX_GPIO_Init+0x104>)
 800352e:	f043 0304 	orr.w	r3, r3, #4
 8003532:	6193      	str	r3, [r2, #24]
 8003534:	4b2c      	ldr	r3, [pc, #176]	; (80035e8 <MX_GPIO_Init+0x104>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003540:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <MX_GPIO_Init+0x104>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	4a28      	ldr	r2, [pc, #160]	; (80035e8 <MX_GPIO_Init+0x104>)
 8003546:	f043 0308 	orr.w	r3, r3, #8
 800354a:	6193      	str	r3, [r2, #24]
 800354c:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <MX_GPIO_Init+0x104>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003558:	2200      	movs	r2, #0
 800355a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800355e:	4823      	ldr	r0, [pc, #140]	; (80035ec <MX_GPIO_Init+0x108>)
 8003560:	f001 fa70 	bl	8004a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 8003564:	2200      	movs	r2, #0
 8003566:	217e      	movs	r1, #126	; 0x7e
 8003568:	4821      	ldr	r0, [pc, #132]	; (80035f0 <MX_GPIO_Init+0x10c>)
 800356a:	f001 fa6b 	bl	8004a44 <HAL_GPIO_WritePin>
                          |xSHUT_4_Pin|xSHUT_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800356e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003574:	2301      	movs	r3, #1
 8003576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357c:	2302      	movs	r3, #2
 800357e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003580:	f107 0310 	add.w	r3, r7, #16
 8003584:	4619      	mov	r1, r3
 8003586:	4819      	ldr	r0, [pc, #100]	; (80035ec <MX_GPIO_Init+0x108>)
 8003588:	f001 f8d8 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pins : xSHUT_0_Pin xSHUT_1_Pin xSHUT_2_Pin xSHUT_3_Pin
                           xSHUT_4_Pin xSHUT_5_Pin */
  GPIO_InitStruct.Pin = xSHUT_0_Pin|xSHUT_1_Pin|xSHUT_2_Pin|xSHUT_3_Pin
 800358c:	237e      	movs	r3, #126	; 0x7e
 800358e:	613b      	str	r3, [r7, #16]
                          |xSHUT_4_Pin|xSHUT_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003590:	2301      	movs	r3, #1
 8003592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003594:	2301      	movs	r3, #1
 8003596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003598:	2302      	movs	r3, #2
 800359a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359c:	f107 0310 	add.w	r3, r7, #16
 80035a0:	4619      	mov	r1, r3
 80035a2:	4813      	ldr	r0, [pc, #76]	; (80035f0 <MX_GPIO_Init+0x10c>)
 80035a4:	f001 f8ca 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035a8:	2303      	movs	r3, #3
 80035aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <MX_GPIO_Init+0x110>)
 80035ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035b0:	2301      	movs	r3, #1
 80035b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b4:	f107 0310 	add.w	r3, r7, #16
 80035b8:	4619      	mov	r1, r3
 80035ba:	480f      	ldr	r0, [pc, #60]	; (80035f8 <MX_GPIO_Init+0x114>)
 80035bc:	f001 f8be 	bl	800473c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80035c0:	2200      	movs	r2, #0
 80035c2:	2100      	movs	r1, #0
 80035c4:	2006      	movs	r0, #6
 80035c6:	f001 f874 	bl	80046b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80035ca:	2006      	movs	r0, #6
 80035cc:	f001 f88d 	bl	80046ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80035d0:	2200      	movs	r2, #0
 80035d2:	2100      	movs	r1, #0
 80035d4:	2007      	movs	r0, #7
 80035d6:	f001 f86c 	bl	80046b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80035da:	2007      	movs	r0, #7
 80035dc:	f001 f885 	bl	80046ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80035e0:	bf00      	nop
 80035e2:	3720      	adds	r7, #32
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40011000 	.word	0x40011000
 80035f0:	40010800 	.word	0x40010800
 80035f4:	10210000 	.word	0x10210000
 80035f8:	40010c00 	.word	0x40010c00

080035fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003600:	b672      	cpsid	i
}
 8003602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003604:	e7fe      	b.n	8003604 <Error_Handler+0x8>
	...

08003608 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <HAL_MspInit+0x5c>)
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	4a14      	ldr	r2, [pc, #80]	; (8003664 <HAL_MspInit+0x5c>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6193      	str	r3, [r2, #24]
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_MspInit+0x5c>)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_MspInit+0x5c>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <HAL_MspInit+0x5c>)
 800362c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003630:	61d3      	str	r3, [r2, #28]
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <HAL_MspInit+0x5c>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_MspInit+0x60>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	4a04      	ldr	r2, [pc, #16]	; (8003668 <HAL_MspInit+0x60>)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40021000 	.word	0x40021000
 8003668:	40010000 	.word	0x40010000

0800366c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	f107 0310 	add.w	r3, r7, #16
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a15      	ldr	r2, [pc, #84]	; (80036dc <HAL_I2C_MspInit+0x70>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d123      	bne.n	80036d4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800368c:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <HAL_I2C_MspInit+0x74>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <HAL_I2C_MspInit+0x74>)
 8003692:	f043 0308 	orr.w	r3, r3, #8
 8003696:	6193      	str	r3, [r2, #24]
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_I2C_MspInit+0x74>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036a4:	23c0      	movs	r3, #192	; 0xc0
 80036a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036a8:	2312      	movs	r3, #18
 80036aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ac:	2303      	movs	r3, #3
 80036ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b0:	f107 0310 	add.w	r3, r7, #16
 80036b4:	4619      	mov	r1, r3
 80036b6:	480b      	ldr	r0, [pc, #44]	; (80036e4 <HAL_I2C_MspInit+0x78>)
 80036b8:	f001 f840 	bl	800473c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036bc:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_I2C_MspInit+0x74>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <HAL_I2C_MspInit+0x74>)
 80036c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036c6:	61d3      	str	r3, [r2, #28]
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_I2C_MspInit+0x74>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036d4:	bf00      	nop
 80036d6:	3720      	adds	r7, #32
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40005400 	.word	0x40005400
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40010c00 	.word	0x40010c00

080036e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a09      	ldr	r2, [pc, #36]	; (800371c <HAL_TIM_Base_MspInit+0x34>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d10b      	bne.n	8003712 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HAL_TIM_Base_MspInit+0x38>)
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	4a08      	ldr	r2, [pc, #32]	; (8003720 <HAL_TIM_Base_MspInit+0x38>)
 8003700:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003704:	6193      	str	r3, [r2, #24]
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_TIM_Base_MspInit+0x38>)
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40021000 	.word	0x40021000

08003724 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08e      	sub	sp, #56	; 0x38
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372c:	f107 0320 	add.w	r3, r7, #32
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003742:	d157      	bne.n	80037f4 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003744:	4b4f      	ldr	r3, [pc, #316]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	4a4e      	ldr	r2, [pc, #312]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	61d3      	str	r3, [r2, #28]
 8003750:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800375c:	4b49      	ldr	r3, [pc, #292]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	4a48      	ldr	r2, [pc, #288]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 8003762:	f043 0304 	orr.w	r3, r3, #4
 8003766:	6193      	str	r3, [r2, #24]
 8003768:	4b46      	ldr	r3, [pc, #280]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003774:	4b43      	ldr	r3, [pc, #268]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	4a42      	ldr	r2, [pc, #264]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 800377a:	f043 0308 	orr.w	r3, r3, #8
 800377e:	6193      	str	r3, [r2, #24]
 8003780:	4b40      	ldr	r3, [pc, #256]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800378c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003792:	2300      	movs	r3, #0
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003796:	2300      	movs	r3, #0
 8003798:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379a:	f107 0320 	add.w	r3, r7, #32
 800379e:	4619      	mov	r1, r3
 80037a0:	4839      	ldr	r0, [pc, #228]	; (8003888 <HAL_TIM_Encoder_MspInit+0x164>)
 80037a2:	f000 ffcb 	bl	800473c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037a6:	2308      	movs	r3, #8
 80037a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037aa:	2300      	movs	r3, #0
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b2:	f107 0320 	add.w	r3, r7, #32
 80037b6:	4619      	mov	r1, r3
 80037b8:	4834      	ldr	r0, [pc, #208]	; (800388c <HAL_TIM_Encoder_MspInit+0x168>)
 80037ba:	f000 ffbf 	bl	800473c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80037be:	4b34      	ldr	r3, [pc, #208]	; (8003890 <HAL_TIM_Encoder_MspInit+0x16c>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ca:	633b      	str	r3, [r7, #48]	; 0x30
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80037d2:	633b      	str	r3, [r7, #48]	; 0x30
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037da:	633b      	str	r3, [r7, #48]	; 0x30
 80037dc:	4a2c      	ldr	r2, [pc, #176]	; (8003890 <HAL_TIM_Encoder_MspInit+0x16c>)
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80037e2:	2200      	movs	r2, #0
 80037e4:	2100      	movs	r1, #0
 80037e6:	201c      	movs	r0, #28
 80037e8:	f000 ff63 	bl	80046b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037ec:	201c      	movs	r0, #28
 80037ee:	f000 ff7c 	bl	80046ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80037f2:	e042      	b.n	800387a <HAL_TIM_Encoder_MspInit+0x156>
  else if(htim_encoder->Instance==TIM3)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a26      	ldr	r2, [pc, #152]	; (8003894 <HAL_TIM_Encoder_MspInit+0x170>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d13d      	bne.n	800387a <HAL_TIM_Encoder_MspInit+0x156>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037fe:	4b21      	ldr	r3, [pc, #132]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	4a20      	ldr	r2, [pc, #128]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	61d3      	str	r3, [r2, #28]
 800380a:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003816:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	4a1a      	ldr	r2, [pc, #104]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 800381c:	f043 0308 	orr.w	r3, r3, #8
 8003820:	6193      	str	r3, [r2, #24]
 8003822:	4b18      	ldr	r3, [pc, #96]	; (8003884 <HAL_TIM_Encoder_MspInit+0x160>)
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800382e:	2330      	movs	r3, #48	; 0x30
 8003830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	2300      	movs	r3, #0
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800383a:	f107 0320 	add.w	r3, r7, #32
 800383e:	4619      	mov	r1, r3
 8003840:	4812      	ldr	r0, [pc, #72]	; (800388c <HAL_TIM_Encoder_MspInit+0x168>)
 8003842:	f000 ff7b 	bl	800473c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003846:	4b12      	ldr	r3, [pc, #72]	; (8003890 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	637b      	str	r3, [r7, #52]	; 0x34
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
 8003854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003856:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800385a:	637b      	str	r3, [r7, #52]	; 0x34
 800385c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
 8003864:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003868:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800386a:	2200      	movs	r2, #0
 800386c:	2100      	movs	r1, #0
 800386e:	201d      	movs	r0, #29
 8003870:	f000 ff1f 	bl	80046b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003874:	201d      	movs	r0, #29
 8003876:	f000 ff38 	bl	80046ea <HAL_NVIC_EnableIRQ>
}
 800387a:	bf00      	nop
 800387c:	3738      	adds	r7, #56	; 0x38
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	40010800 	.word	0x40010800
 800388c:	40010c00 	.word	0x40010c00
 8003890:	40010000 	.word	0x40010000
 8003894:	40000400 	.word	0x40000400

08003898 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a0:	f107 0310 	add.w	r3, r7, #16
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	609a      	str	r2, [r3, #8]
 80038ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <HAL_TIM_MspPostInit+0x5c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d118      	bne.n	80038ea <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <HAL_TIM_MspPostInit+0x60>)
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	4a0e      	ldr	r2, [pc, #56]	; (80038f8 <HAL_TIM_MspPostInit+0x60>)
 80038be:	f043 0304 	orr.w	r3, r3, #4
 80038c2:	6193      	str	r3, [r2, #24]
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <HAL_TIM_MspPostInit+0x60>)
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80038d0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80038d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d6:	2302      	movs	r3, #2
 80038d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038da:	2302      	movs	r3, #2
 80038dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038de:	f107 0310 	add.w	r3, r7, #16
 80038e2:	4619      	mov	r1, r3
 80038e4:	4805      	ldr	r0, [pc, #20]	; (80038fc <HAL_TIM_MspPostInit+0x64>)
 80038e6:	f000 ff29 	bl	800473c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80038ea:	bf00      	nop
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40012c00 	.word	0x40012c00
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40010800 	.word	0x40010800

08003900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003908:	f107 0310 	add.w	r3, r7, #16
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1c      	ldr	r2, [pc, #112]	; (800398c <HAL_UART_MspInit+0x8c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d131      	bne.n	8003984 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003920:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <HAL_UART_MspInit+0x90>)
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	4a1a      	ldr	r2, [pc, #104]	; (8003990 <HAL_UART_MspInit+0x90>)
 8003926:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800392a:	61d3      	str	r3, [r2, #28]
 800392c:	4b18      	ldr	r3, [pc, #96]	; (8003990 <HAL_UART_MspInit+0x90>)
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003938:	4b15      	ldr	r3, [pc, #84]	; (8003990 <HAL_UART_MspInit+0x90>)
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <HAL_UART_MspInit+0x90>)
 800393e:	f043 0308 	orr.w	r3, r3, #8
 8003942:	6193      	str	r3, [r2, #24]
 8003944:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_UART_MspInit+0x90>)
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003954:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003956:	2302      	movs	r3, #2
 8003958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800395a:	2303      	movs	r3, #3
 800395c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800395e:	f107 0310 	add.w	r3, r7, #16
 8003962:	4619      	mov	r1, r3
 8003964:	480b      	ldr	r0, [pc, #44]	; (8003994 <HAL_UART_MspInit+0x94>)
 8003966:	f000 fee9 	bl	800473c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800396a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800396e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003978:	f107 0310 	add.w	r3, r7, #16
 800397c:	4619      	mov	r1, r3
 800397e:	4805      	ldr	r0, [pc, #20]	; (8003994 <HAL_UART_MspInit+0x94>)
 8003980:	f000 fedc 	bl	800473c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003984:	bf00      	nop
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40004800 	.word	0x40004800
 8003990:	40021000 	.word	0x40021000
 8003994:	40010c00 	.word	0x40010c00

08003998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800399c:	e7fe      	b.n	800399c <NMI_Handler+0x4>

0800399e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039a2:	e7fe      	b.n	80039a2 <HardFault_Handler+0x4>

080039a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039a8:	e7fe      	b.n	80039a8 <MemManage_Handler+0x4>

080039aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039aa:	b480      	push	{r7}
 80039ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039ae:	e7fe      	b.n	80039ae <BusFault_Handler+0x4>

080039b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039b4:	e7fe      	b.n	80039b4 <UsageFault_Handler+0x4>

080039b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039b6:	b480      	push	{r7}
 80039b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039c2:	b480      	push	{r7}
 80039c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr

080039ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ce:	b480      	push	{r7}
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr

080039da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039de:	f000 fd2d 	bl	800443c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80039ec:	2001      	movs	r0, #1
 80039ee:	f001 f841 	bl	8004a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	Rmode = 2;
 80039f2:	4b02      	ldr	r3, [pc, #8]	; (80039fc <EXTI0_IRQHandler+0x14>)
 80039f4:	2202      	movs	r2, #2
 80039f6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 80039f8:	bf00      	nop
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000658 	.word	0x20000658

08003a00 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003a04:	2002      	movs	r0, #2
 8003a06:	f001 f835 	bl	8004a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	Rmode = 1;
 8003a0a:	4b02      	ldr	r3, [pc, #8]	; (8003a14 <EXTI1_IRQHandler+0x14>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000658 	.word	0x20000658

08003a18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a1c:	480c      	ldr	r0, [pc, #48]	; (8003a50 <TIM2_IRQHandler+0x38>)
 8003a1e:	f002 ff5b 	bl	80068d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if(status == turn_right_90 || status == turn_right_45 || status == u_turn){
 8003a22:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <TIM2_IRQHandler+0x3c>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	b25b      	sxtb	r3, r3
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d00b      	beq.n	8003a46 <TIM2_IRQHandler+0x2e>
 8003a2e:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <TIM2_IRQHandler+0x3c>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	b25b      	sxtb	r3, r3
 8003a34:	f113 0f02 	cmn.w	r3, #2
 8003a38:	d005      	beq.n	8003a46 <TIM2_IRQHandler+0x2e>
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <TIM2_IRQHandler+0x3c>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	b25b      	sxtb	r3, r3
 8003a40:	f113 0f05 	cmn.w	r3, #5
 8003a44:	d102      	bne.n	8003a4c <TIM2_IRQHandler+0x34>
	  status = 0;
 8003a46:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <TIM2_IRQHandler+0x3c>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8003a4c:	bf00      	nop
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	200004b8 	.word	0x200004b8
 8003a54:	20000659 	.word	0x20000659

08003a58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a5c:	480c      	ldr	r0, [pc, #48]	; (8003a90 <TIM3_IRQHandler+0x38>)
 8003a5e:	f002 ff3b 	bl	80068d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(status == turn_left_90 || status == turn_left_45 || status == straight){
 8003a62:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <TIM3_IRQHandler+0x3c>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b25b      	sxtb	r3, r3
 8003a68:	f113 0f04 	cmn.w	r3, #4
 8003a6c:	d00b      	beq.n	8003a86 <TIM3_IRQHandler+0x2e>
 8003a6e:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <TIM3_IRQHandler+0x3c>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	b25b      	sxtb	r3, r3
 8003a74:	f113 0f03 	cmn.w	r3, #3
 8003a78:	d005      	beq.n	8003a86 <TIM3_IRQHandler+0x2e>
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <TIM3_IRQHandler+0x3c>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	b25b      	sxtb	r3, r3
 8003a80:	f113 0f06 	cmn.w	r3, #6
 8003a84:	d102      	bne.n	8003a8c <TIM3_IRQHandler+0x34>
	  status = 0;
 8003a86:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <TIM3_IRQHandler+0x3c>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a8c:	bf00      	nop
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000500 	.word	0x20000500
 8003a94:	20000659 	.word	0x20000659

08003a98 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <running_left_motor>:
const float turn90_arc_en = (float)turning_radius * M_PI * 4 * (90.0/360) * counts_per_1mm;
const float turn45_arc_en = (float)turning_radius * M_PI * 4 * (45.0/360) * counts_per_1mm;
volatile uint8_t flag_uturn;


void running_left_motor(uint8_t mode, uint16_t speed){
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	460a      	mov	r2, r1
 8003aae:	71fb      	strb	r3, [r7, #7]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	80bb      	strh	r3, [r7, #4]
	if(mode == 0){
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d108      	bne.n	8003acc <running_left_motor+0x28>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <running_left_motor+0x44>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, speed);
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <running_left_motor+0x44>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	88ba      	ldrh	r2, [r7, #4]
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40
	} else {
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
	}
}
 8003aca:	e007      	b.n	8003adc <running_left_motor+0x38>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, speed);
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <running_left_motor+0x44>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	88ba      	ldrh	r2, [r7, #4]
 8003ad2:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8003ad4:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <running_left_motor+0x44>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000470 	.word	0x20000470

08003aec <running_right_motor>:

void running_right_motor(uint8_t mode, uint16_t speed){
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	460a      	mov	r2, r1
 8003af6:	71fb      	strb	r3, [r7, #7]
 8003af8:	4613      	mov	r3, r2
 8003afa:	80bb      	strh	r3, [r7, #4]
	if(mode == 0){
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d108      	bne.n	8003b14 <running_right_motor+0x28>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <running_right_motor+0x44>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	88ba      	ldrh	r2, [r7, #4]
 8003b08:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <running_right_motor+0x44>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38
	} else {
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
	}
}
 8003b12:	e007      	b.n	8003b24 <running_right_motor+0x38>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <running_right_motor+0x44>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <running_right_motor+0x44>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	88ba      	ldrh	r2, [r7, #4]
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000470 	.word	0x20000470

08003b34 <u_turnf>:

void u_turnf(uint8_t *direction) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d81b      	bhi.n	8003b7c <u_turnf+0x48>
 8003b44:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <u_turnf+0x18>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b65 	.word	0x08003b65
 8003b54:	08003b6d 	.word	0x08003b6d
 8003b58:	08003b75 	.word	0x08003b75
		case west:  *direction = east;   break;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	e00b      	b.n	8003b7c <u_turnf+0x48>
		case east:  *direction = west;   break;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	e007      	b.n	8003b7c <u_turnf+0x48>
		case north: *direction = south;  break;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2203      	movs	r2, #3
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	e003      	b.n	8003b7c <u_turnf+0x48>
		case south: *direction = north;  break;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	bf00      	nop
	#if debug == 1
		sprintf((char*)uart_buffer, "uturn\n");
		HAL_UART_Transmit(&huart3, uart_buffer, sizeof (uart_buffer), 10);
	#endif

	uint16_t last = 2702;
 8003b7c:	f640 238e 	movw	r3, #2702	; 0xa8e
 8003b80:	82fb      	strh	r3, [r7, #22]
	while(last != TIM3->CNT){
 8003b82:	e005      	b.n	8003b90 <u_turnf+0x5c>
		last = TIM3->CNT;
 8003b84:	4b37      	ldr	r3, [pc, #220]	; (8003c64 <u_turnf+0x130>)
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	82fb      	strh	r3, [r7, #22]
		HAL_Delay(50);
 8003b8a:	2032      	movs	r0, #50	; 0x32
 8003b8c:	f000 fc72 	bl	8004474 <HAL_Delay>
	while(last != TIM3->CNT){
 8003b90:	8afa      	ldrh	r2, [r7, #22]
 8003b92:	4b34      	ldr	r3, [pc, #208]	; (8003c64 <u_turnf+0x130>)
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d1f4      	bne.n	8003b84 <u_turnf+0x50>
	}

	uint16_t en = round(uturn_arc_en);
 8003b9a:	4b33      	ldr	r3, [pc, #204]	; (8003c68 <u_turnf+0x134>)
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fc fd65 	bl	800066c <__aeabi_f2d>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f7fc fddf 	bl	800076c <__aeabi_d2uiz>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	82bb      	strh	r3, [r7, #20]
	__HAL_TIM_SET_COUNTER(&htim2, en);
 8003bb2:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <u_turnf+0x138>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	8aba      	ldrh	r2, [r7, #20]
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003bba:	4b2d      	ldr	r3, [pc, #180]	; (8003c70 <u_turnf+0x13c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8003bc2:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <u_turnf+0x138>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bca:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bcc:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <u_turnf+0x138>)
 8003bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bd2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 8003bd4:	4b26      	ldr	r3, [pc, #152]	; (8003c70 <u_turnf+0x13c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <u_turnf+0x13c>)
 8003be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003be4:	60da      	str	r2, [r3, #12]
	status = u_turn;
 8003be6:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <u_turnf+0x140>)
 8003be8:	22fb      	movs	r2, #251	; 0xfb
 8003bea:	701a      	strb	r2, [r3, #0]

	uint16_t speed = 300;
 8003bec:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003bf0:	827b      	strh	r3, [r7, #18]
	int32_t P;
	while(status != 0){
 8003bf2:	e01d      	b.n	8003c30 <u_turnf+0xfc>
		P = ((int32_t)TIM3->CNT - ((int32_t)en - TIM2->CNT)) * 5;
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <u_turnf+0x130>)
 8003bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bfc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bfe:	8abb      	ldrh	r3, [r7, #20]
 8003c00:	1acb      	subs	r3, r1, r3
 8003c02:	441a      	add	r2, r3
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
		running_left_motor(1, speed + P);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	8a7b      	ldrh	r3, [r7, #18]
 8003c12:	4413      	add	r3, r2
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	4619      	mov	r1, r3
 8003c18:	2001      	movs	r0, #1
 8003c1a:	f7ff ff43 	bl	8003aa4 <running_left_motor>
		running_right_motor(0, speed - P);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	8a7a      	ldrh	r2, [r7, #18]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	4619      	mov	r1, r3
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	f7ff ff5e 	bl	8003aec <running_right_motor>
	while(status != 0){
 8003c30:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <u_turnf+0x140>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	b25b      	sxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1dc      	bne.n	8003bf4 <u_turnf+0xc0>
		#if debug == 1
		a = (int32_t)en - TIM2->CNT;
		b = TIM3->CNT;
		#endif
	}
	running_left_motor(0, 500);
 8003c3a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f7ff ff30 	bl	8003aa4 <running_left_motor>
	running_right_motor(1, 500);
 8003c44:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003c48:	2001      	movs	r0, #1
 8003c4a:	f7ff ff4f 	bl	8003aec <running_right_motor>
	HAL_Delay(30);
 8003c4e:	201e      	movs	r0, #30
 8003c50:	f000 fc10 	bl	8004474 <HAL_Delay>
	brake(2);
 8003c54:	2002      	movs	r0, #2
 8003c56:	f000 fb49 	bl	80042ec <brake>
}
 8003c5a:	bf00      	nop
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40000400 	.word	0x40000400
 8003c68:	449a0000 	.word	0x449a0000
 8003c6c:	200004b8 	.word	0x200004b8
 8003c70:	20000500 	.word	0x20000500
 8003c74:	20000659 	.word	0x20000659

08003c78 <turn_left90>:
	brake(0);
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	__HAL_TIM_SET_COUNTER(&htim3, 0);
}

void turn_left90(uint8_t *direction) {
 8003c78:	b590      	push	{r4, r7, lr}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d81b      	bhi.n	8003cc0 <turn_left90+0x48>
 8003c88:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <turn_left90+0x18>)
 8003c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8e:	bf00      	nop
 8003c90:	08003ca1 	.word	0x08003ca1
 8003c94:	08003ca9 	.word	0x08003ca9
 8003c98:	08003cb1 	.word	0x08003cb1
 8003c9c:	08003cb9 	.word	0x08003cb9
		case west:  *direction = south; break;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	e00b      	b.n	8003cc0 <turn_left90+0x48>
		case east:  *direction = north; break;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e007      	b.n	8003cc0 <turn_left90+0x48>
		case north: *direction = west;  break;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]
 8003cb6:	e003      	b.n	8003cc0 <turn_left90+0x48>
		case south: *direction = east;  break;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	bf00      	nop
	#if debug == 1
		sprintf((char*)uart_buffer, "turn_left90\n");
		HAL_UART_Transmit(&huart3, uart_buffer, sizeof (uart_buffer), 10);
	#endif

	uint16_t last = 2702;
 8003cc0:	f640 238e 	movw	r3, #2702	; 0xa8e
 8003cc4:	81fb      	strh	r3, [r7, #14]
	while(last != TIM3->CNT){
 8003cc6:	e005      	b.n	8003cd4 <turn_left90+0x5c>
		last = TIM3->CNT;
 8003cc8:	4b3b      	ldr	r3, [pc, #236]	; (8003db8 <turn_left90+0x140>)
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	81fb      	strh	r3, [r7, #14]
		HAL_Delay(50);
 8003cce:	2032      	movs	r0, #50	; 0x32
 8003cd0:	f000 fbd0 	bl	8004474 <HAL_Delay>
	while(last != TIM3->CNT){
 8003cd4:	89fa      	ldrh	r2, [r7, #14]
 8003cd6:	4b38      	ldr	r3, [pc, #224]	; (8003db8 <turn_left90+0x140>)
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d1f4      	bne.n	8003cc8 <turn_left90+0x50>
	}

	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003cde:	4b37      	ldr	r3, [pc, #220]	; (8003dbc <turn_left90+0x144>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003ce6:	4b36      	ldr	r3, [pc, #216]	; (8003dc0 <turn_left90+0x148>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2200      	movs	r2, #0
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8003cee:	4b34      	ldr	r3, [pc, #208]	; (8003dc0 <turn_left90+0x148>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cf6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cf8:	4b31      	ldr	r3, [pc, #196]	; (8003dc0 <turn_left90+0x148>)
 8003cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cfe:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn90_arc_en));
 8003d00:	4b30      	ldr	r3, [pc, #192]	; (8003dc4 <turn_left90+0x14c>)
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fcb2 	bl	800066c <__aeabi_f2d>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	492b      	ldr	r1, [pc, #172]	; (8003dbc <turn_left90+0x144>)
 8003d0e:	680c      	ldr	r4, [r1, #0]
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	f7fc fd2a 	bl	800076c <__aeabi_d2uiz>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d1c:	4b29      	ldr	r3, [pc, #164]	; (8003dc4 <turn_left90+0x14c>)
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fc fca4 	bl	800066c <__aeabi_f2d>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	f7fc fd1e 	bl	800076c <__aeabi_d2uiz>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <turn_left90+0x144>)
 8003d34:	60d3      	str	r3, [r2, #12]
	status = turn_left_90;
 8003d36:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <turn_left90+0x150>)
 8003d38:	22fc      	movs	r2, #252	; 0xfc
 8003d3a:	701a      	strb	r2, [r3, #0]

	while(status != 0){
 8003d3c:	e01f      	b.n	8003d7e <turn_left90+0x106>
		running_right_motor(0, 300 + 200 * (float)TIM3->CNT/turn90_arc_en);
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <turn_left90+0x140>)
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fc fde8 	bl	8000918 <__aeabi_ui2f>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	4920      	ldr	r1, [pc, #128]	; (8003dcc <turn_left90+0x154>)
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fc fe3b 	bl	80009c8 <__aeabi_fmul>
 8003d52:	4603      	mov	r3, r0
 8003d54:	461a      	mov	r2, r3
 8003d56:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <turn_left90+0x14c>)
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f7fc fee8 	bl	8000b30 <__aeabi_fdiv>
 8003d60:	4603      	mov	r3, r0
 8003d62:	491b      	ldr	r1, [pc, #108]	; (8003dd0 <turn_left90+0x158>)
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fc fd27 	bl	80007b8 <__addsf3>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fc ffa1 	bl	8000cb4 <__aeabi_f2uiz>
 8003d72:	4603      	mov	r3, r0
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	4619      	mov	r1, r3
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7ff feb7 	bl	8003aec <running_right_motor>
	while(status != 0){
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <turn_left90+0x150>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	b25b      	sxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1da      	bne.n	8003d3e <turn_left90+0xc6>
	}
	running_right_motor(1, 500);
 8003d88:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	f7ff fead 	bl	8003aec <running_right_motor>
	HAL_Delay(50);
 8003d92:	2032      	movs	r0, #50	; 0x32
 8003d94:	f000 fb6e 	bl	8004474 <HAL_Delay>
	brake(1);
 8003d98:	2001      	movs	r0, #1
 8003d9a:	f000 faa7 	bl	80042ec <brake>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003d9e:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <turn_left90+0x148>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2200      	movs	r2, #0
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <turn_left90+0x144>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2200      	movs	r2, #0
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003dae:	bf00      	nop
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd90      	pop	{r4, r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40000400 	.word	0x40000400
 8003dbc:	20000500 	.word	0x20000500
 8003dc0:	200004b8 	.word	0x200004b8
 8003dc4:	449a0000 	.word	0x449a0000
 8003dc8:	20000659 	.word	0x20000659
 8003dcc:	43480000 	.word	0x43480000
 8003dd0:	43960000 	.word	0x43960000
 8003dd4:	00000000 	.word	0x00000000

08003dd8 <turn_right90>:

void turn_right90(uint8_t *direction) {
 8003dd8:	b5b0      	push	{r4, r5, r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d81b      	bhi.n	8003e20 <turn_right90+0x48>
 8003de8:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <turn_right90+0x18>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e01 	.word	0x08003e01
 8003df4:	08003e09 	.word	0x08003e09
 8003df8:	08003e11 	.word	0x08003e11
 8003dfc:	08003e19 	.word	0x08003e19
		case west:  *direction = north; break;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e00b      	b.n	8003e20 <turn_right90+0x48>
		case east:  *direction = south; break;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	e007      	b.n	8003e20 <turn_right90+0x48>
		case north: *direction = east;  break;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e003      	b.n	8003e20 <turn_right90+0x48>
		case south: *direction = west;  break;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	bf00      	nop
	#if debug == 1
	sprintf((char*)uart_buffer, "turn_right90\n");
	HAL_UART_Transmit(&huart3, uart_buffer, sizeof(uart_buffer), 10);
	#endif

	uint16_t last = 2702;
 8003e20:	f640 238e 	movw	r3, #2702	; 0xa8e
 8003e24:	81fb      	strh	r3, [r7, #14]
	while(last != TIM2->CNT){
 8003e26:	e006      	b.n	8003e36 <turn_right90+0x5e>
		last = TIM2->CNT;
 8003e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	81fb      	strh	r3, [r7, #14]
		HAL_Delay(50);
 8003e30:	2032      	movs	r0, #50	; 0x32
 8003e32:	f000 fb1f 	bl	8004474 <HAL_Delay>
	while(last != TIM2->CNT){
 8003e36:	89fa      	ldrh	r2, [r7, #14]
 8003e38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d1f2      	bne.n	8003e28 <turn_right90+0x50>
	}

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003e42:	4b4f      	ldr	r3, [pc, #316]	; (8003f80 <turn_right90+0x1a8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003e4a:	4b4e      	ldr	r3, [pc, #312]	; (8003f84 <turn_right90+0x1ac>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, round(turn90_arc_en - turn90_arc_en *0.05));
 8003e52:	4b4d      	ldr	r3, [pc, #308]	; (8003f88 <turn_right90+0x1b0>)
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fc fc09 	bl	800066c <__aeabi_f2d>
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	460d      	mov	r5, r1
 8003e5e:	4b4a      	ldr	r3, [pc, #296]	; (8003f88 <turn_right90+0x1b0>)
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fc fc03 	bl	800066c <__aeabi_f2d>
 8003e66:	a344      	add	r3, pc, #272	; (adr r3, 8003f78 <turn_right90+0x1a0>)
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f7fc f970 	bl	8000150 <__aeabi_dmul>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4620      	mov	r0, r4
 8003e76:	4629      	mov	r1, r5
 8003e78:	f7fc fa98 	bl	80003ac <__aeabi_dsub>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	f008 faba 	bl	800c3fc <round>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	493c      	ldr	r1, [pc, #240]	; (8003f80 <turn_right90+0x1a8>)
 8003e8e:	680c      	ldr	r4, [r1, #0]
 8003e90:	4610      	mov	r0, r2
 8003e92:	4619      	mov	r1, r3
 8003e94:	f7fc fc6a 	bl	800076c <__aeabi_d2uiz>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e9c:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <turn_right90+0x1b0>)
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc fbe4 	bl	800066c <__aeabi_f2d>
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	460d      	mov	r5, r1
 8003ea8:	4b37      	ldr	r3, [pc, #220]	; (8003f88 <turn_right90+0x1b0>)
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fc fbde 	bl	800066c <__aeabi_f2d>
 8003eb0:	a331      	add	r3, pc, #196	; (adr r3, 8003f78 <turn_right90+0x1a0>)
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f7fc f94b 	bl	8000150 <__aeabi_dmul>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	f7fc fa73 	bl	80003ac <__aeabi_dsub>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f008 fa95 	bl	800c3fc <round>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f7fc fc47 	bl	800076c <__aeabi_d2uiz>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <turn_right90+0x1a8>)
 8003ee2:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 8003ee4:	4b27      	ldr	r3, [pc, #156]	; (8003f84 <turn_right90+0x1ac>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eec:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eee:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <turn_right90+0x1ac>)
 8003ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ef4:	60da      	str	r2, [r3, #12]
	status = turn_right_90;
 8003ef6:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <turn_right90+0x1b4>)
 8003ef8:	22ff      	movs	r2, #255	; 0xff
 8003efa:	701a      	strb	r2, [r3, #0]

	while(status != 0){
 8003efc:	e01f      	b.n	8003f3e <turn_right90+0x166>
		#if debug == 1
		a = TIM2->CNT;
		b = TIM3->CNT;
		#endif
		running_left_motor(0, 300 + 200 * (float)TIM1->CNT/turn90_arc_en);
 8003efe:	4b24      	ldr	r3, [pc, #144]	; (8003f90 <turn_right90+0x1b8>)
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fc fd08 	bl	8000918 <__aeabi_ui2f>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	4922      	ldr	r1, [pc, #136]	; (8003f94 <turn_right90+0x1bc>)
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fc fd5b 	bl	80009c8 <__aeabi_fmul>
 8003f12:	4603      	mov	r3, r0
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <turn_right90+0x1b0>)
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f7fc fe08 	bl	8000b30 <__aeabi_fdiv>
 8003f20:	4603      	mov	r3, r0
 8003f22:	491d      	ldr	r1, [pc, #116]	; (8003f98 <turn_right90+0x1c0>)
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fc fc47 	bl	80007b8 <__addsf3>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fc fec1 	bl	8000cb4 <__aeabi_f2uiz>
 8003f32:	4603      	mov	r3, r0
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	4619      	mov	r1, r3
 8003f38:	2000      	movs	r0, #0
 8003f3a:	f7ff fdb3 	bl	8003aa4 <running_left_motor>
	while(status != 0){
 8003f3e:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <turn_right90+0x1b4>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	b25b      	sxtb	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1da      	bne.n	8003efe <turn_right90+0x126>
	}
	running_left_motor(1, 500);
 8003f48:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	f7ff fda9 	bl	8003aa4 <running_left_motor>
	HAL_Delay(50);
 8003f52:	2032      	movs	r0, #50	; 0x32
 8003f54:	f000 fa8e 	bl	8004474 <HAL_Delay>
	brake(0);
 8003f58:	2000      	movs	r0, #0
 8003f5a:	f000 f9c7 	bl	80042ec <brake>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003f5e:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <turn_right90+0x1a8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2200      	movs	r2, #0
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <turn_right90+0x1ac>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bdb0      	pop	{r4, r5, r7, pc}
 8003f76:	bf00      	nop
 8003f78:	9999999a 	.word	0x9999999a
 8003f7c:	3fa99999 	.word	0x3fa99999
 8003f80:	200004b8 	.word	0x200004b8
 8003f84:	20000500 	.word	0x20000500
 8003f88:	449a0000 	.word	0x449a0000
 8003f8c:	20000659 	.word	0x20000659
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	43480000 	.word	0x43480000
 8003f98:	43960000 	.word	0x43960000

08003f9c <go_straight>:

void go_straight(float distance, bool brakee) { //millimeter
 8003f9c:	b5b0      	push	{r4, r5, r7, lr}
 8003f9e:	b094      	sub	sp, #80	; 0x50
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	70fb      	strb	r3, [r7, #3]
	uint16_t en = round(distance * counts_per_1mm);
 8003fa8:	4b96      	ldr	r3, [pc, #600]	; (8004204 <go_straight+0x268>)
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc fd0b 	bl	80009c8 <__aeabi_fmul>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fc fb59 	bl	800066c <__aeabi_f2d>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f008 fa1b 	bl	800c3fc <round>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	f7fc fbcd 	bl	800076c <__aeabi_d2uiz>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	867b      	strh	r3, [r7, #50]	; 0x32
	#if debug == 1
		sprintf((char*)uart_buffer, "go_straight: %d | brake: %d\n", (int)distance, (int)brake);
		HAL_UART_Transmit(&huart3, uart_buffer, sizeof (uart_buffer), 10);
	#endif

	if(__HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1) == htim1.Init.Period){
 8003fd6:	4b8c      	ldr	r3, [pc, #560]	; (8004208 <go_straight+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fdc:	4b8a      	ldr	r3, [pc, #552]	; (8004208 <go_straight+0x26c>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d119      	bne.n	8004018 <go_straight+0x7c>
		uint16_t last = 2702;
 8003fe4:	f640 238e 	movw	r3, #2702	; 0xa8e
 8003fe8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		while(last != TIM3->CNT){
 8003fec:	e006      	b.n	8003ffc <go_straight+0x60>
			last = TIM3->CNT;
 8003fee:	4b87      	ldr	r3, [pc, #540]	; (800420c <go_straight+0x270>)
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			HAL_Delay(50);
 8003ff6:	2032      	movs	r0, #50	; 0x32
 8003ff8:	f000 fa3c 	bl	8004474 <HAL_Delay>
		while(last != TIM3->CNT){
 8003ffc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8004000:	4b82      	ldr	r3, [pc, #520]	; (800420c <go_straight+0x270>)
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	429a      	cmp	r2, r3
 8004006:	d1f2      	bne.n	8003fee <go_straight+0x52>
		}
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8004008:	4b81      	ldr	r3, [pc, #516]	; (8004210 <go_straight+0x274>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2200      	movs	r2, #0
 800400e:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004010:	4b80      	ldr	r3, [pc, #512]	; (8004214 <go_straight+0x278>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2200      	movs	r2, #0
 8004016:	625a      	str	r2, [r3, #36]	; 0x24
	}
	__HAL_TIM_SET_AUTORELOAD(&htim2, UINT16_MAX);
 8004018:	4b7d      	ldr	r3, [pc, #500]	; (8004210 <go_straight+0x274>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004020:	62da      	str	r2, [r3, #44]	; 0x2c
 8004022:	4b7b      	ldr	r3, [pc, #492]	; (8004210 <go_straight+0x274>)
 8004024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004028:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, en + 100);
 800402a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800402c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004030:	4b78      	ldr	r3, [pc, #480]	; (8004214 <go_straight+0x278>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	62da      	str	r2, [r3, #44]	; 0x2c
 8004036:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004038:	3364      	adds	r3, #100	; 0x64
 800403a:	461a      	mov	r2, r3
 800403c:	4b75      	ldr	r3, [pc, #468]	; (8004214 <go_straight+0x278>)
 800403e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim2, TIM2->CNT + 100);
 8004040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004046:	4b72      	ldr	r3, [pc, #456]	; (8004210 <go_straight+0x274>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3264      	adds	r2, #100	; 0x64
 800404c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, TIM3->CNT + 100);
 800404e:	4b6f      	ldr	r3, [pc, #444]	; (800420c <go_straight+0x270>)
 8004050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004052:	4b70      	ldr	r3, [pc, #448]	; (8004214 <go_straight+0x278>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3264      	adds	r2, #100	; 0x64
 8004058:	625a      	str	r2, [r3, #36]	; 0x24

	status = straight;
 800405a:	4b6f      	ldr	r3, [pc, #444]	; (8004218 <go_straight+0x27c>)
 800405c:	22fa      	movs	r2, #250	; 0xfa
 800405e:	701a      	strb	r2, [r3, #0]
	int32_t Err, P, D, old_Error = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t temp_1, temp_2;
	bool useIRSensor = true;
 8004064:	2301      	movs	r3, #1
 8004066:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint16_t oe2 = WidthOESide + 50;
 800406a:	4b6c      	ldr	r3, [pc, #432]	; (800421c <go_straight+0x280>)
 800406c:	496c      	ldr	r1, [pc, #432]	; (8004220 <go_straight+0x284>)
 800406e:	4618      	mov	r0, r3
 8004070:	f7fc fba2 	bl	80007b8 <__addsf3>
 8004074:	4603      	mov	r3, r0
 8004076:	4618      	mov	r0, r3
 8004078:	f7fc fe1c 	bl	8000cb4 <__aeabi_f2uiz>
 800407c:	4603      	mov	r3, r0
 800407e:	863b      	strh	r3, [r7, #48]	; 0x30
	uint16_t left_sensor45, right_sensor45, left_sensor90, right_sensor90, right_sensor0 = 8000;
 8004080:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8004084:	817b      	strh	r3, [r7, #10]
	uint16_t speed = speed_levels[Rmode];
 8004086:	4b67      	ldr	r3, [pc, #412]	; (8004224 <go_straight+0x288>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	4b66      	ldr	r3, [pc, #408]	; (8004228 <go_straight+0x28c>)
 8004090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004094:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int32_t ofs;
	while(status != 0 && right_sensor0 > oe2){
 8004096:	e104      	b.n	80042a2 <go_straight+0x306>
		vl53l0x_GetRanging_now(leftSensor90, &left_sensor90);
 8004098:	4b64      	ldr	r3, [pc, #400]	; (800422c <go_straight+0x290>)
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f107 020e 	add.w	r2, r7, #14
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f007 ff7e 	bl	800bfa4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(leftSensor45, &left_sensor45);
 80040a8:	4b60      	ldr	r3, [pc, #384]	; (800422c <go_straight+0x290>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f107 0212 	add.w	r2, r7, #18
 80040b0:	4611      	mov	r1, r2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f007 ff76 	bl	800bfa4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor45, &right_sensor45);
 80040b8:	4b5c      	ldr	r3, [pc, #368]	; (800422c <go_straight+0x290>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f107 0210 	add.w	r2, r7, #16
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f007 ff6e 	bl	800bfa4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor90, &right_sensor90);
 80040c8:	4b58      	ldr	r3, [pc, #352]	; (800422c <go_straight+0x290>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f107 020c 	add.w	r2, r7, #12
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f007 ff66 	bl	800bfa4 <vl53l0x_GetRanging_now>
		vl53l0x_GetRanging_now(rightSensor0, &right_sensor0);
 80040d8:	4b54      	ldr	r3, [pc, #336]	; (800422c <go_straight+0x290>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f107 020a 	add.w	r2, r7, #10
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f007 ff5e 	bl	800bfa4 <vl53l0x_GetRanging_now>
		if(left_sensor45 < HasleftWallValue_45 && right_sensor45 < HasrightWallValue_45
 80040e8:	8a7b      	ldrh	r3, [r7, #18]
 80040ea:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80040ee:	d219      	bcs.n	8004124 <go_straight+0x188>
 80040f0:	8a3b      	ldrh	r3, [r7, #16]
 80040f2:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80040f6:	d215      	bcs.n	8004124 <go_straight+0x188>
				&& left_sensor90 < HasleftWallValue_90 && right_sensor90 < HasrightWallValue_90){
 80040f8:	89fb      	ldrh	r3, [r7, #14]
 80040fa:	2bc7      	cmp	r3, #199	; 0xc7
 80040fc:	d812      	bhi.n	8004124 <go_straight+0x188>
 80040fe:	89bb      	ldrh	r3, [r7, #12]
 8004100:	2bc7      	cmp	r3, #199	; 0xc7
 8004102:	d80f      	bhi.n	8004124 <go_straight+0x188>
			Err = right_sensor45 - left_sensor45 + 10;
 8004104:	8a3b      	ldrh	r3, [r7, #16]
 8004106:	461a      	mov	r2, r3
 8004108:	8a7b      	ldrh	r3, [r7, #18]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	330a      	adds	r3, #10
 800410e:	64bb      	str	r3, [r7, #72]	; 0x48
			D = Err - old_Error;
 8004110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	643b      	str	r3, [r7, #64]	; 0x40
			old_Error = Err;
 8004118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411a:	63fb      	str	r3, [r7, #60]	; 0x3c
			useIRSensor = true;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004122:	e043      	b.n	80041ac <go_straight+0x210>
		} else if(left_sensor45 < HasleftWallValue_45 && left_sensor90 < HasleftWallValue_90){
 8004124:	8a7b      	ldrh	r3, [r7, #18]
 8004126:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800412a:	d210      	bcs.n	800414e <go_straight+0x1b2>
 800412c:	89fb      	ldrh	r3, [r7, #14]
 800412e:	2bc7      	cmp	r3, #199	; 0xc7
 8004130:	d80d      	bhi.n	800414e <go_straight+0x1b2>
			Err = (int32_t)leftWallValue - (int32_t)left_sensor45;
 8004132:	8a7b      	ldrh	r3, [r7, #18]
 8004134:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8004138:	64bb      	str	r3, [r7, #72]	; 0x48
			D = Err - old_Error;
 800413a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800413c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	643b      	str	r3, [r7, #64]	; 0x40
			old_Error = Err;
 8004142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004144:	63fb      	str	r3, [r7, #60]	; 0x3c
			useIRSensor = true;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800414c:	e02e      	b.n	80041ac <go_straight+0x210>
		} else if(right_sensor45 < HasrightWallValue_45 && right_sensor90 < HasrightWallValue_90){
 800414e:	8a3b      	ldrh	r3, [r7, #16]
 8004150:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8004154:	d20f      	bcs.n	8004176 <go_straight+0x1da>
 8004156:	89bb      	ldrh	r3, [r7, #12]
 8004158:	2bc7      	cmp	r3, #199	; 0xc7
 800415a:	d80c      	bhi.n	8004176 <go_straight+0x1da>
			Err = (int32_t)right_sensor45 - (int32_t)rightWallValue;
 800415c:	8a3b      	ldrh	r3, [r7, #16]
 800415e:	3bfa      	subs	r3, #250	; 0xfa
 8004160:	64bb      	str	r3, [r7, #72]	; 0x48
			D = Err - old_Error;
 8004162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	643b      	str	r3, [r7, #64]	; 0x40
			old_Error = Err;
 800416a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800416c:	63fb      	str	r3, [r7, #60]	; 0x3c
			useIRSensor = true;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004174:	e01a      	b.n	80041ac <go_straight+0x210>
		} else {
			if(useIRSensor){
 8004176:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800417a:	2b00      	cmp	r3, #0
 800417c:	d006      	beq.n	800418c <go_straight+0x1f0>
				ofs = TIM3->CNT - TIM2->CNT;
 800417e:	4b23      	ldr	r3, [pc, #140]	; (800420c <go_straight+0x270>)
 8004180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004182:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	637b      	str	r3, [r7, #52]	; 0x34
			}
			temp_1 = TIM2->CNT;
 800418c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
			temp_2 = TIM3->CNT;
 8004194:	4b1d      	ldr	r3, [pc, #116]	; (800420c <go_straight+0x270>)
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
			Err = temp_2 - (temp_1 + ofs);
 800419a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800419c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419e:	4413      	add	r3, r2
 80041a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	64bb      	str	r3, [r7, #72]	; 0x48
			useIRSensor = false;
 80041a6:	2300      	movs	r3, #0
 80041a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			#if debug == 1
			a = TIM2->CNT;
			b = TIM3->CNT;
			#endif
		}
		if(useIRSensor){
 80041ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d041      	beq.n	8004238 <go_straight+0x29c>
			P = P_params[0] * Err + D * 0.5;
 80041b4:	4b1e      	ldr	r3, [pc, #120]	; (8004230 <go_straight+0x294>)
 80041b6:	681c      	ldr	r4, [r3, #0]
 80041b8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80041ba:	f7fc fbb1 	bl	8000920 <__aeabi_i2f>
 80041be:	4603      	mov	r3, r0
 80041c0:	4619      	mov	r1, r3
 80041c2:	4620      	mov	r0, r4
 80041c4:	f7fc fc00 	bl	80009c8 <__aeabi_fmul>
 80041c8:	4603      	mov	r3, r0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fc fa4e 	bl	800066c <__aeabi_f2d>
 80041d0:	4604      	mov	r4, r0
 80041d2:	460d      	mov	r5, r1
 80041d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80041d6:	f7fc fa37 	bl	8000648 <__aeabi_i2d>
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	4b15      	ldr	r3, [pc, #84]	; (8004234 <go_straight+0x298>)
 80041e0:	f7fb ffb6 	bl	8000150 <__aeabi_dmul>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4620      	mov	r0, r4
 80041ea:	4629      	mov	r1, r5
 80041ec:	f7fc f8e0 	bl	80003b0 <__adddf3>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4610      	mov	r0, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	f7fc fa90 	bl	800071c <__aeabi_d2iz>
 80041fc:	4603      	mov	r3, r0
 80041fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004200:	e02a      	b.n	8004258 <go_straight+0x2bc>
 8004202:	bf00      	nop
 8004204:	40d85ce8 	.word	0x40d85ce8
 8004208:	20000470 	.word	0x20000470
 800420c:	40000400 	.word	0x40000400
 8004210:	200004b8 	.word	0x200004b8
 8004214:	20000500 	.word	0x20000500
 8004218:	20000659 	.word	0x20000659
 800421c:	42cc0000 	.word	0x42cc0000
 8004220:	42480000 	.word	0x42480000
 8004224:	20000658 	.word	0x20000658
 8004228:	0800c9dc 	.word	0x0800c9dc
 800422c:	20000f94 	.word	0x20000f94
 8004230:	20000000 	.word	0x20000000
 8004234:	3fe00000 	.word	0x3fe00000
		} else {
			P = P_params[1] * Err;
 8004238:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <go_straight+0x348>)
 800423a:	685c      	ldr	r4, [r3, #4]
 800423c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800423e:	f7fc fb6f 	bl	8000920 <__aeabi_i2f>
 8004242:	4603      	mov	r3, r0
 8004244:	4619      	mov	r1, r3
 8004246:	4620      	mov	r0, r4
 8004248:	f7fc fbbe 	bl	80009c8 <__aeabi_fmul>
 800424c:	4603      	mov	r3, r0
 800424e:	4618      	mov	r0, r3
 8004250:	f7fc fd0a 	bl	8000c68 <__aeabi_f2iz>
 8004254:	4603      	mov	r3, r0
 8004256:	647b      	str	r3, [r7, #68]	; 0x44
		}
		P = max(-200, min(P, 200));
 8004258:	f06f 03c7 	mvn.w	r3, #199	; 0xc7
 800425c:	623b      	str	r3, [r7, #32]
 800425e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004260:	61fb      	str	r3, [r7, #28]
 8004262:	23c8      	movs	r3, #200	; 0xc8
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4293      	cmp	r3, r2
 800426c:	bfa8      	it	ge
 800426e:	4613      	movge	r3, r2
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	4293      	cmp	r3, r2
 8004278:	bfb8      	it	lt
 800427a:	4613      	movlt	r3, r2
 800427c:	647b      	str	r3, [r7, #68]	; 0x44
		running_left_motor(0, speed + P);
 800427e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004280:	b29a      	uxth	r2, r3
 8004282:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004284:	4413      	add	r3, r2
 8004286:	b29b      	uxth	r3, r3
 8004288:	4619      	mov	r1, r3
 800428a:	2000      	movs	r0, #0
 800428c:	f7ff fc0a 	bl	8003aa4 <running_left_motor>
		running_right_motor(0, speed - P);
 8004290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004292:	b29b      	uxth	r3, r3
 8004294:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	b29b      	uxth	r3, r3
 800429a:	4619      	mov	r1, r3
 800429c:	2000      	movs	r0, #0
 800429e:	f7ff fc25 	bl	8003aec <running_right_motor>
	while(status != 0 && right_sensor0 > oe2){
 80042a2:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <go_straight+0x34c>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d004      	beq.n	80042b6 <go_straight+0x31a>
 80042ac:	897b      	ldrh	r3, [r7, #10]
 80042ae:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80042b0:	429a      	cmp	r2, r3
 80042b2:	f4ff aef1 	bcc.w	8004098 <go_straight+0xfc>
	}
	if(brakee){
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00f      	beq.n	80042dc <go_straight+0x340>
		running_right_motor(1, 500);
 80042bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80042c0:	2001      	movs	r0, #1
 80042c2:	f7ff fc13 	bl	8003aec <running_right_motor>
		running_left_motor(1, 500);
 80042c6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80042ca:	2001      	movs	r0, #1
 80042cc:	f7ff fbea 	bl	8003aa4 <running_left_motor>
		HAL_Delay(50);
 80042d0:	2032      	movs	r0, #50	; 0x32
 80042d2:	f000 f8cf 	bl	8004474 <HAL_Delay>
		brake(2);
 80042d6:	2002      	movs	r0, #2
 80042d8:	f000 f808 	bl	80042ec <brake>
	}
}
 80042dc:	bf00      	nop
 80042de:	3750      	adds	r7, #80	; 0x50
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bdb0      	pop	{r4, r5, r7, pc}
 80042e4:	20000000 	.word	0x20000000
 80042e8:	20000659 	.word	0x20000659

080042ec <brake>:

void brake(uint8_t mode){
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	71fb      	strb	r3, [r7, #7]
	if(mode == 0){
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10a      	bne.n	8004312 <brake+0x26>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 80042fc:	4b18      	ldr	r3, [pc, #96]	; (8004360 <brake+0x74>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a17      	ldr	r2, [pc, #92]	; (8004360 <brake+0x74>)
 8004302:	68d2      	ldr	r2, [r2, #12]
 8004304:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 8004306:	4b16      	ldr	r3, [pc, #88]	; (8004360 <brake+0x74>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a15      	ldr	r2, [pc, #84]	; (8004360 <brake+0x74>)
 800430c:	68d2      	ldr	r2, [r2, #12]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
	}

}
 8004310:	e021      	b.n	8004356 <brake+0x6a>
	} else if(mode == 1){
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d10a      	bne.n	800432e <brake+0x42>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 8004318:	4b11      	ldr	r3, [pc, #68]	; (8004360 <brake+0x74>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a10      	ldr	r2, [pc, #64]	; (8004360 <brake+0x74>)
 800431e:	68d2      	ldr	r2, [r2, #12]
 8004320:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <brake+0x74>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a0e      	ldr	r2, [pc, #56]	; (8004360 <brake+0x74>)
 8004328:	68d2      	ldr	r2, [r2, #12]
 800432a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800432c:	e013      	b.n	8004356 <brake+0x6a>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period);
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <brake+0x74>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a0b      	ldr	r2, [pc, #44]	; (8004360 <brake+0x74>)
 8004334:	68d2      	ldr	r2, [r2, #12]
 8004336:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, htim1.Init.Period);
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <brake+0x74>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a08      	ldr	r2, [pc, #32]	; (8004360 <brake+0x74>)
 800433e:	68d2      	ldr	r2, [r2, #12]
 8004340:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, htim1.Init.Period);
 8004342:	4b07      	ldr	r3, [pc, #28]	; (8004360 <brake+0x74>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a06      	ldr	r2, [pc, #24]	; (8004360 <brake+0x74>)
 8004348:	68d2      	ldr	r2, [r2, #12]
 800434a:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, htim1.Init.Period);
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <brake+0x74>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a03      	ldr	r2, [pc, #12]	; (8004360 <brake+0x74>)
 8004352:	68d2      	ldr	r2, [r2, #12]
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr
 8004360:	20000470 	.word	0x20000470

08004364 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004364:	f7ff fb98 	bl	8003a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004368:	480b      	ldr	r0, [pc, #44]	; (8004398 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800436a:	490c      	ldr	r1, [pc, #48]	; (800439c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800436c:	4a0c      	ldr	r2, [pc, #48]	; (80043a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800436e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004370:	e002      	b.n	8004378 <LoopCopyDataInit>

08004372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004376:	3304      	adds	r3, #4

08004378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800437a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800437c:	d3f9      	bcc.n	8004372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004380:	4c09      	ldr	r4, [pc, #36]	; (80043a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004384:	e001      	b.n	800438a <LoopFillZerobss>

08004386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004388:	3204      	adds	r2, #4

0800438a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800438a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800438c:	d3fb      	bcc.n	8004386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800438e:	f008 f881 	bl	800c494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004392:	f7fe fdfd 	bl	8002f90 <main>
  bx lr
 8004396:	4770      	bx	lr
  ldr r0, =_sdata
 8004398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800439c:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 80043a0:	0800ca1c 	.word	0x0800ca1c
  ldr r2, =_sbss
 80043a4:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 80043a8:	2000128c 	.word	0x2000128c

080043ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043ac:	e7fe      	b.n	80043ac <ADC1_2_IRQHandler>
	...

080043b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <HAL_Init+0x28>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <HAL_Init+0x28>)
 80043ba:	f043 0310 	orr.w	r3, r3, #16
 80043be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043c0:	2003      	movs	r0, #3
 80043c2:	f000 f96b 	bl	800469c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043c6:	200f      	movs	r0, #15
 80043c8:	f000 f808 	bl	80043dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043cc:	f7ff f91c 	bl	8003608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40022000 	.word	0x40022000

080043dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043e4:	4b12      	ldr	r3, [pc, #72]	; (8004430 <HAL_InitTick+0x54>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b12      	ldr	r3, [pc, #72]	; (8004434 <HAL_InitTick+0x58>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	4619      	mov	r1, r3
 80043ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f991 	bl	8004722 <HAL_SYSTICK_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e00e      	b.n	8004428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b0f      	cmp	r3, #15
 800440e:	d80a      	bhi.n	8004426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004410:	2200      	movs	r2, #0
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	f04f 30ff 	mov.w	r0, #4294967295
 8004418:	f000 f94b 	bl	80046b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800441c:	4a06      	ldr	r2, [pc, #24]	; (8004438 <HAL_InitTick+0x5c>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e000      	b.n	8004428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20000008 	.word	0x20000008
 8004434:	20000010 	.word	0x20000010
 8004438:	2000000c 	.word	0x2000000c

0800443c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_IncTick+0x1c>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_IncTick+0x20>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4413      	add	r3, r2
 800444c:	4a03      	ldr	r2, [pc, #12]	; (800445c <HAL_IncTick+0x20>)
 800444e:	6013      	str	r3, [r2, #0]
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr
 8004458:	20000010 	.word	0x20000010
 800445c:	20001248 	.word	0x20001248

08004460 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  return uwTick;
 8004464:	4b02      	ldr	r3, [pc, #8]	; (8004470 <HAL_GetTick+0x10>)
 8004466:	681b      	ldr	r3, [r3, #0]
}
 8004468:	4618      	mov	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	20001248 	.word	0x20001248

08004474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800447c:	f7ff fff0 	bl	8004460 <HAL_GetTick>
 8004480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d005      	beq.n	800449a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <HAL_Delay+0x44>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800449a:	bf00      	nop
 800449c:	f7ff ffe0 	bl	8004460 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d8f7      	bhi.n	800449c <HAL_Delay+0x28>
  {
  }
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000010 	.word	0x20000010

080044bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <__NVIC_SetPriorityGrouping+0x44>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044d8:	4013      	ands	r3, r2
 80044da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ee:	4a04      	ldr	r2, [pc, #16]	; (8004500 <__NVIC_SetPriorityGrouping+0x44>)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	60d3      	str	r3, [r2, #12]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <__NVIC_GetPriorityGrouping+0x18>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f003 0307 	and.w	r3, r3, #7
}
 8004512:	4618      	mov	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	2b00      	cmp	r3, #0
 8004530:	db0b      	blt.n	800454a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	f003 021f 	and.w	r2, r3, #31
 8004538:	4906      	ldr	r1, [pc, #24]	; (8004554 <__NVIC_EnableIRQ+0x34>)
 800453a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2001      	movs	r0, #1
 8004542:	fa00 f202 	lsl.w	r2, r0, r2
 8004546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	e000e100 	.word	0xe000e100

08004558 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db12      	blt.n	8004590 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	f003 021f 	and.w	r2, r3, #31
 8004570:	490a      	ldr	r1, [pc, #40]	; (800459c <__NVIC_DisableIRQ+0x44>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2001      	movs	r0, #1
 800457a:	fa00 f202 	lsl.w	r2, r0, r2
 800457e:	3320      	adds	r3, #32
 8004580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004584:	f3bf 8f4f 	dsb	sy
}
 8004588:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800458a:	f3bf 8f6f 	isb	sy
}
 800458e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	e000e100 	.word	0xe000e100

080045a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	6039      	str	r1, [r7, #0]
 80045aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	db0a      	blt.n	80045ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	490c      	ldr	r1, [pc, #48]	; (80045ec <__NVIC_SetPriority+0x4c>)
 80045ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045be:	0112      	lsls	r2, r2, #4
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	440b      	add	r3, r1
 80045c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045c8:	e00a      	b.n	80045e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	4908      	ldr	r1, [pc, #32]	; (80045f0 <__NVIC_SetPriority+0x50>)
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	3b04      	subs	r3, #4
 80045d8:	0112      	lsls	r2, r2, #4
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	440b      	add	r3, r1
 80045de:	761a      	strb	r2, [r3, #24]
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	e000e100 	.word	0xe000e100
 80045f0:	e000ed00 	.word	0xe000ed00

080045f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b089      	sub	sp, #36	; 0x24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f1c3 0307 	rsb	r3, r3, #7
 800460e:	2b04      	cmp	r3, #4
 8004610:	bf28      	it	cs
 8004612:	2304      	movcs	r3, #4
 8004614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3304      	adds	r3, #4
 800461a:	2b06      	cmp	r3, #6
 800461c:	d902      	bls.n	8004624 <NVIC_EncodePriority+0x30>
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	3b03      	subs	r3, #3
 8004622:	e000      	b.n	8004626 <NVIC_EncodePriority+0x32>
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004628:	f04f 32ff 	mov.w	r2, #4294967295
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43da      	mvns	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	401a      	ands	r2, r3
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800463c:	f04f 31ff 	mov.w	r1, #4294967295
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	fa01 f303 	lsl.w	r3, r1, r3
 8004646:	43d9      	mvns	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800464c:	4313      	orrs	r3, r2
         );
}
 800464e:	4618      	mov	r0, r3
 8004650:	3724      	adds	r7, #36	; 0x24
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3b01      	subs	r3, #1
 8004664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004668:	d301      	bcc.n	800466e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800466a:	2301      	movs	r3, #1
 800466c:	e00f      	b.n	800468e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <SysTick_Config+0x40>)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3b01      	subs	r3, #1
 8004674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004676:	210f      	movs	r1, #15
 8004678:	f04f 30ff 	mov.w	r0, #4294967295
 800467c:	f7ff ff90 	bl	80045a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <SysTick_Config+0x40>)
 8004682:	2200      	movs	r2, #0
 8004684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004686:	4b04      	ldr	r3, [pc, #16]	; (8004698 <SysTick_Config+0x40>)
 8004688:	2207      	movs	r2, #7
 800468a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	e000e010 	.word	0xe000e010

0800469c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ff09 	bl	80044bc <__NVIC_SetPriorityGrouping>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b086      	sub	sp, #24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	4603      	mov	r3, r0
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046c4:	f7ff ff1e 	bl	8004504 <__NVIC_GetPriorityGrouping>
 80046c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	f7ff ff90 	bl	80045f4 <NVIC_EncodePriority>
 80046d4:	4602      	mov	r2, r0
 80046d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff ff5f 	bl	80045a0 <__NVIC_SetPriority>
}
 80046e2:	bf00      	nop
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	4603      	mov	r3, r0
 80046f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff ff11 	bl	8004520 <__NVIC_EnableIRQ>
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	4603      	mov	r3, r0
 800470e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff ff1f 	bl	8004558 <__NVIC_DisableIRQ>
}
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff ff94 	bl	8004658 <SysTick_Config>
 8004730:	4603      	mov	r3, r0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800473c:	b480      	push	{r7}
 800473e:	b08b      	sub	sp, #44	; 0x2c
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004746:	2300      	movs	r3, #0
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800474a:	2300      	movs	r3, #0
 800474c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800474e:	e169      	b.n	8004a24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004750:	2201      	movs	r2, #1
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69fa      	ldr	r2, [r7, #28]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	429a      	cmp	r2, r3
 800476a:	f040 8158 	bne.w	8004a1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4a9a      	ldr	r2, [pc, #616]	; (80049dc <HAL_GPIO_Init+0x2a0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d05e      	beq.n	8004836 <HAL_GPIO_Init+0xfa>
 8004778:	4a98      	ldr	r2, [pc, #608]	; (80049dc <HAL_GPIO_Init+0x2a0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d875      	bhi.n	800486a <HAL_GPIO_Init+0x12e>
 800477e:	4a98      	ldr	r2, [pc, #608]	; (80049e0 <HAL_GPIO_Init+0x2a4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d058      	beq.n	8004836 <HAL_GPIO_Init+0xfa>
 8004784:	4a96      	ldr	r2, [pc, #600]	; (80049e0 <HAL_GPIO_Init+0x2a4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d86f      	bhi.n	800486a <HAL_GPIO_Init+0x12e>
 800478a:	4a96      	ldr	r2, [pc, #600]	; (80049e4 <HAL_GPIO_Init+0x2a8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d052      	beq.n	8004836 <HAL_GPIO_Init+0xfa>
 8004790:	4a94      	ldr	r2, [pc, #592]	; (80049e4 <HAL_GPIO_Init+0x2a8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d869      	bhi.n	800486a <HAL_GPIO_Init+0x12e>
 8004796:	4a94      	ldr	r2, [pc, #592]	; (80049e8 <HAL_GPIO_Init+0x2ac>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d04c      	beq.n	8004836 <HAL_GPIO_Init+0xfa>
 800479c:	4a92      	ldr	r2, [pc, #584]	; (80049e8 <HAL_GPIO_Init+0x2ac>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d863      	bhi.n	800486a <HAL_GPIO_Init+0x12e>
 80047a2:	4a92      	ldr	r2, [pc, #584]	; (80049ec <HAL_GPIO_Init+0x2b0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d046      	beq.n	8004836 <HAL_GPIO_Init+0xfa>
 80047a8:	4a90      	ldr	r2, [pc, #576]	; (80049ec <HAL_GPIO_Init+0x2b0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d85d      	bhi.n	800486a <HAL_GPIO_Init+0x12e>
 80047ae:	2b12      	cmp	r3, #18
 80047b0:	d82a      	bhi.n	8004808 <HAL_GPIO_Init+0xcc>
 80047b2:	2b12      	cmp	r3, #18
 80047b4:	d859      	bhi.n	800486a <HAL_GPIO_Init+0x12e>
 80047b6:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <HAL_GPIO_Init+0x80>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	08004837 	.word	0x08004837
 80047c0:	08004811 	.word	0x08004811
 80047c4:	08004823 	.word	0x08004823
 80047c8:	08004865 	.word	0x08004865
 80047cc:	0800486b 	.word	0x0800486b
 80047d0:	0800486b 	.word	0x0800486b
 80047d4:	0800486b 	.word	0x0800486b
 80047d8:	0800486b 	.word	0x0800486b
 80047dc:	0800486b 	.word	0x0800486b
 80047e0:	0800486b 	.word	0x0800486b
 80047e4:	0800486b 	.word	0x0800486b
 80047e8:	0800486b 	.word	0x0800486b
 80047ec:	0800486b 	.word	0x0800486b
 80047f0:	0800486b 	.word	0x0800486b
 80047f4:	0800486b 	.word	0x0800486b
 80047f8:	0800486b 	.word	0x0800486b
 80047fc:	0800486b 	.word	0x0800486b
 8004800:	08004819 	.word	0x08004819
 8004804:	0800482d 	.word	0x0800482d
 8004808:	4a79      	ldr	r2, [pc, #484]	; (80049f0 <HAL_GPIO_Init+0x2b4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800480e:	e02c      	b.n	800486a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	623b      	str	r3, [r7, #32]
          break;
 8004816:	e029      	b.n	800486c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	3304      	adds	r3, #4
 800481e:	623b      	str	r3, [r7, #32]
          break;
 8004820:	e024      	b.n	800486c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	3308      	adds	r3, #8
 8004828:	623b      	str	r3, [r7, #32]
          break;
 800482a:	e01f      	b.n	800486c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	330c      	adds	r3, #12
 8004832:	623b      	str	r3, [r7, #32]
          break;
 8004834:	e01a      	b.n	800486c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d102      	bne.n	8004844 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800483e:	2304      	movs	r3, #4
 8004840:	623b      	str	r3, [r7, #32]
          break;
 8004842:	e013      	b.n	800486c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d105      	bne.n	8004858 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800484c:	2308      	movs	r3, #8
 800484e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	611a      	str	r2, [r3, #16]
          break;
 8004856:	e009      	b.n	800486c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004858:	2308      	movs	r3, #8
 800485a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	615a      	str	r2, [r3, #20]
          break;
 8004862:	e003      	b.n	800486c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004864:	2300      	movs	r3, #0
 8004866:	623b      	str	r3, [r7, #32]
          break;
 8004868:	e000      	b.n	800486c <HAL_GPIO_Init+0x130>
          break;
 800486a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2bff      	cmp	r3, #255	; 0xff
 8004870:	d801      	bhi.n	8004876 <HAL_GPIO_Init+0x13a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	e001      	b.n	800487a <HAL_GPIO_Init+0x13e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3304      	adds	r3, #4
 800487a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2bff      	cmp	r3, #255	; 0xff
 8004880:	d802      	bhi.n	8004888 <HAL_GPIO_Init+0x14c>
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	e002      	b.n	800488e <HAL_GPIO_Init+0x152>
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	3b08      	subs	r3, #8
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	210f      	movs	r1, #15
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	fa01 f303 	lsl.w	r3, r1, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	401a      	ands	r2, r3
 80048a0:	6a39      	ldr	r1, [r7, #32]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	431a      	orrs	r2, r3
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80b1 	beq.w	8004a1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80048bc:	4b4d      	ldr	r3, [pc, #308]	; (80049f4 <HAL_GPIO_Init+0x2b8>)
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	4a4c      	ldr	r2, [pc, #304]	; (80049f4 <HAL_GPIO_Init+0x2b8>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	6193      	str	r3, [r2, #24]
 80048c8:	4b4a      	ldr	r3, [pc, #296]	; (80049f4 <HAL_GPIO_Init+0x2b8>)
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80048d4:	4a48      	ldr	r2, [pc, #288]	; (80049f8 <HAL_GPIO_Init+0x2bc>)
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	089b      	lsrs	r3, r3, #2
 80048da:	3302      	adds	r3, #2
 80048dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	220f      	movs	r2, #15
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	43db      	mvns	r3, r3
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4013      	ands	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a40      	ldr	r2, [pc, #256]	; (80049fc <HAL_GPIO_Init+0x2c0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <HAL_GPIO_Init+0x1ec>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a3f      	ldr	r2, [pc, #252]	; (8004a00 <HAL_GPIO_Init+0x2c4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00d      	beq.n	8004924 <HAL_GPIO_Init+0x1e8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a3e      	ldr	r2, [pc, #248]	; (8004a04 <HAL_GPIO_Init+0x2c8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d007      	beq.n	8004920 <HAL_GPIO_Init+0x1e4>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a3d      	ldr	r2, [pc, #244]	; (8004a08 <HAL_GPIO_Init+0x2cc>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d101      	bne.n	800491c <HAL_GPIO_Init+0x1e0>
 8004918:	2303      	movs	r3, #3
 800491a:	e006      	b.n	800492a <HAL_GPIO_Init+0x1ee>
 800491c:	2304      	movs	r3, #4
 800491e:	e004      	b.n	800492a <HAL_GPIO_Init+0x1ee>
 8004920:	2302      	movs	r3, #2
 8004922:	e002      	b.n	800492a <HAL_GPIO_Init+0x1ee>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <HAL_GPIO_Init+0x1ee>
 8004928:	2300      	movs	r3, #0
 800492a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492c:	f002 0203 	and.w	r2, r2, #3
 8004930:	0092      	lsls	r2, r2, #2
 8004932:	4093      	lsls	r3, r2
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800493a:	492f      	ldr	r1, [pc, #188]	; (80049f8 <HAL_GPIO_Init+0x2bc>)
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	089b      	lsrs	r3, r3, #2
 8004940:	3302      	adds	r3, #2
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d006      	beq.n	8004962 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004954:	4b2d      	ldr	r3, [pc, #180]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	492c      	ldr	r1, [pc, #176]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	4313      	orrs	r3, r2
 800495e:	608b      	str	r3, [r1, #8]
 8004960:	e006      	b.n	8004970 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004962:	4b2a      	ldr	r3, [pc, #168]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	43db      	mvns	r3, r3
 800496a:	4928      	ldr	r1, [pc, #160]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 800496c:	4013      	ands	r3, r2
 800496e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d006      	beq.n	800498a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800497c:	4b23      	ldr	r3, [pc, #140]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	4922      	ldr	r1, [pc, #136]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	4313      	orrs	r3, r2
 8004986:	60cb      	str	r3, [r1, #12]
 8004988:	e006      	b.n	8004998 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800498a:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	43db      	mvns	r3, r3
 8004992:	491e      	ldr	r1, [pc, #120]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 8004994:	4013      	ands	r3, r2
 8004996:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d006      	beq.n	80049b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	4918      	ldr	r1, [pc, #96]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	604b      	str	r3, [r1, #4]
 80049b0:	e006      	b.n	80049c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80049b2:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	4914      	ldr	r1, [pc, #80]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 80049bc:	4013      	ands	r3, r2
 80049be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d021      	beq.n	8004a10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	490e      	ldr	r1, [pc, #56]	; (8004a0c <HAL_GPIO_Init+0x2d0>)
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	600b      	str	r3, [r1, #0]
 80049d8:	e021      	b.n	8004a1e <HAL_GPIO_Init+0x2e2>
 80049da:	bf00      	nop
 80049dc:	10320000 	.word	0x10320000
 80049e0:	10310000 	.word	0x10310000
 80049e4:	10220000 	.word	0x10220000
 80049e8:	10210000 	.word	0x10210000
 80049ec:	10120000 	.word	0x10120000
 80049f0:	10110000 	.word	0x10110000
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40010000 	.word	0x40010000
 80049fc:	40010800 	.word	0x40010800
 8004a00:	40010c00 	.word	0x40010c00
 8004a04:	40011000 	.word	0x40011000
 8004a08:	40011400 	.word	0x40011400
 8004a0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_GPIO_Init+0x304>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	43db      	mvns	r3, r3
 8004a18:	4909      	ldr	r1, [pc, #36]	; (8004a40 <HAL_GPIO_Init+0x304>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	3301      	adds	r3, #1
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f47f ae8e 	bne.w	8004750 <HAL_GPIO_Init+0x14>
  }
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	372c      	adds	r7, #44	; 0x2c
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	40010400 	.word	0x40010400

08004a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	807b      	strh	r3, [r7, #2]
 8004a50:	4613      	mov	r3, r2
 8004a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a54:	787b      	ldrb	r3, [r7, #1]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a5a:	887a      	ldrh	r2, [r7, #2]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a60:	e003      	b.n	8004a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a62:	887b      	ldrh	r3, [r7, #2]
 8004a64:	041a      	lsls	r2, r3, #16
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	611a      	str	r2, [r3, #16]
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr

08004a74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a7e:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d006      	beq.n	8004a98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a8a:	4a05      	ldr	r2, [pc, #20]	; (8004aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a8c:	88fb      	ldrh	r3, [r7, #6]
 8004a8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a90:	88fb      	ldrh	r3, [r7, #6]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f806 	bl	8004aa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a98:	bf00      	nop
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40010400 	.word	0x40010400

08004aa4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e12b      	b.n	8004d22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fe fdc4 	bl	800366c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2224      	movs	r2, #36	; 0x24
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b1c:	f001 fbca 	bl	80062b4 <HAL_RCC_GetPCLK1Freq>
 8004b20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	4a81      	ldr	r2, [pc, #516]	; (8004d2c <HAL_I2C_Init+0x274>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d807      	bhi.n	8004b3c <HAL_I2C_Init+0x84>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4a80      	ldr	r2, [pc, #512]	; (8004d30 <HAL_I2C_Init+0x278>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	bf94      	ite	ls
 8004b34:	2301      	movls	r3, #1
 8004b36:	2300      	movhi	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	e006      	b.n	8004b4a <HAL_I2C_Init+0x92>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a7d      	ldr	r2, [pc, #500]	; (8004d34 <HAL_I2C_Init+0x27c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	bf94      	ite	ls
 8004b44:	2301      	movls	r3, #1
 8004b46:	2300      	movhi	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e0e7      	b.n	8004d22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4a78      	ldr	r2, [pc, #480]	; (8004d38 <HAL_I2C_Init+0x280>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	0c9b      	lsrs	r3, r3, #18
 8004b5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4a6a      	ldr	r2, [pc, #424]	; (8004d2c <HAL_I2C_Init+0x274>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d802      	bhi.n	8004b8c <HAL_I2C_Init+0xd4>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	e009      	b.n	8004ba0 <HAL_I2C_Init+0xe8>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	4a69      	ldr	r2, [pc, #420]	; (8004d3c <HAL_I2C_Init+0x284>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	099b      	lsrs	r3, r3, #6
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	495c      	ldr	r1, [pc, #368]	; (8004d2c <HAL_I2C_Init+0x274>)
 8004bbc:	428b      	cmp	r3, r1
 8004bbe:	d819      	bhi.n	8004bf4 <HAL_I2C_Init+0x13c>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1e59      	subs	r1, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bce:	1c59      	adds	r1, r3, #1
 8004bd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bd4:	400b      	ands	r3, r1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_I2C_Init+0x138>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1e59      	subs	r1, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004be8:	3301      	adds	r3, #1
 8004bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bee:	e051      	b.n	8004c94 <HAL_I2C_Init+0x1dc>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	e04f      	b.n	8004c94 <HAL_I2C_Init+0x1dc>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d111      	bne.n	8004c20 <HAL_I2C_Init+0x168>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	1e58      	subs	r0, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6859      	ldr	r1, [r3, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	440b      	add	r3, r1
 8004c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e012      	b.n	8004c46 <HAL_I2C_Init+0x18e>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1e58      	subs	r0, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6859      	ldr	r1, [r3, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	0099      	lsls	r1, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c36:	3301      	adds	r3, #1
 8004c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_I2C_Init+0x196>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e022      	b.n	8004c94 <HAL_I2C_Init+0x1dc>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10e      	bne.n	8004c74 <HAL_I2C_Init+0x1bc>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1e58      	subs	r0, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6859      	ldr	r1, [r3, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	440b      	add	r3, r1
 8004c64:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c68:	3301      	adds	r3, #1
 8004c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c72:	e00f      	b.n	8004c94 <HAL_I2C_Init+0x1dc>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1e58      	subs	r0, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6859      	ldr	r1, [r3, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	0099      	lsls	r1, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	6809      	ldr	r1, [r1, #0]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6911      	ldr	r1, [r2, #16]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68d2      	ldr	r2, [r2, #12]
 8004cce:	4311      	orrs	r1, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695a      	ldr	r2, [r3, #20]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	000186a0 	.word	0x000186a0
 8004d30:	001e847f 	.word	0x001e847f
 8004d34:	003d08ff 	.word	0x003d08ff
 8004d38:	431bde83 	.word	0x431bde83
 8004d3c:	10624dd3 	.word	0x10624dd3

08004d40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	607a      	str	r2, [r7, #4]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	817b      	strh	r3, [r7, #10]
 8004d50:	4613      	mov	r3, r2
 8004d52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d54:	f7ff fb84 	bl	8004460 <HAL_GetTick>
 8004d58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	f040 80e0 	bne.w	8004f28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	2319      	movs	r3, #25
 8004d6e:	2201      	movs	r2, #1
 8004d70:	4970      	ldr	r1, [pc, #448]	; (8004f34 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 fc9e 	bl	80056b4 <I2C_WaitOnFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e0d3      	b.n	8004f2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_I2C_Master_Transmit+0x50>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e0cc      	b.n	8004f2a <HAL_I2C_Master_Transmit+0x1ea>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d007      	beq.n	8004db6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0201 	orr.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2221      	movs	r2, #33	; 0x21
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2210      	movs	r2, #16
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	893a      	ldrh	r2, [r7, #8]
 8004de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4a50      	ldr	r2, [pc, #320]	; (8004f38 <HAL_I2C_Master_Transmit+0x1f8>)
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004df8:	8979      	ldrh	r1, [r7, #10]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	6a3a      	ldr	r2, [r7, #32]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fb08 	bl	8005414 <I2C_MasterRequestWrite>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e08d      	b.n	8004f2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e24:	e066      	b.n	8004ef4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	6a39      	ldr	r1, [r7, #32]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fd5c 	bl	80058e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00d      	beq.n	8004e52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d107      	bne.n	8004e4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e06b      	b.n	8004f2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	781a      	ldrb	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d11b      	bne.n	8004ec8 <HAL_I2C_Master_Transmit+0x188>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d017      	beq.n	8004ec8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	781a      	ldrb	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	6a39      	ldr	r1, [r7, #32]
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fd53 	bl	8005978 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00d      	beq.n	8004ef4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d107      	bne.n	8004ef0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e01a      	b.n	8004f2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d194      	bne.n	8004e26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	e000      	b.n	8004f2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f28:	2302      	movs	r3, #2
  }
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	00100002 	.word	0x00100002
 8004f38:	ffff0000 	.word	0xffff0000

08004f3c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08c      	sub	sp, #48	; 0x30
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	607a      	str	r2, [r7, #4]
 8004f46:	461a      	mov	r2, r3
 8004f48:	460b      	mov	r3, r1
 8004f4a:	817b      	strh	r3, [r7, #10]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f54:	f7ff fa84 	bl	8004460 <HAL_GetTick>
 8004f58:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	f040 824b 	bne.w	80053fe <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2319      	movs	r3, #25
 8004f6e:	2201      	movs	r2, #1
 8004f70:	497f      	ldr	r1, [pc, #508]	; (8005170 <HAL_I2C_Master_Receive+0x234>)
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 fb9e 	bl	80056b4 <I2C_WaitOnFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e23e      	b.n	8005400 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_I2C_Master_Receive+0x54>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e237      	b.n	8005400 <HAL_I2C_Master_Receive+0x4c4>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d007      	beq.n	8004fb6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0201 	orr.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2222      	movs	r2, #34	; 0x22
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2210      	movs	r2, #16
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	893a      	ldrh	r2, [r7, #8]
 8004fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a5f      	ldr	r2, [pc, #380]	; (8005174 <HAL_I2C_Master_Receive+0x238>)
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ff8:	8979      	ldrh	r1, [r7, #10]
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 fa8a 	bl	8005518 <I2C_MasterRequestRead>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e1f8      	b.n	8005400 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005012:	2b00      	cmp	r3, #0
 8005014:	d113      	bne.n	800503e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	61fb      	str	r3, [r7, #28]
 800502a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	e1cc      	b.n	80053d8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005042:	2b01      	cmp	r3, #1
 8005044:	d11e      	bne.n	8005084 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005054:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005056:	b672      	cpsid	i
}
 8005058:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505a:	2300      	movs	r3, #0
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800507e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005080:	b662      	cpsie	i
}
 8005082:	e035      	b.n	80050f0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005088:	2b02      	cmp	r3, #2
 800508a:	d11e      	bne.n	80050ca <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800509a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800509c:	b672      	cpsid	i
}
 800509e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80050c6:	b662      	cpsie	i
}
 80050c8:	e012      	b.n	80050f0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050da:	2300      	movs	r3, #0
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80050f0:	e172      	b.n	80053d8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	f200 811f 	bhi.w	800533a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005100:	2b01      	cmp	r3, #1
 8005102:	d123      	bne.n	800514c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005106:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 fc7d 	bl	8005a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e173      	b.n	8005400 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	855a      	strh	r2, [r3, #42]	; 0x2a
 800514a:	e145      	b.n	80053d8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005150:	2b02      	cmp	r3, #2
 8005152:	d152      	bne.n	80051fa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	2200      	movs	r2, #0
 800515c:	4906      	ldr	r1, [pc, #24]	; (8005178 <HAL_I2C_Master_Receive+0x23c>)
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 faa8 	bl	80056b4 <I2C_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e148      	b.n	8005400 <HAL_I2C_Master_Receive+0x4c4>
 800516e:	bf00      	nop
 8005170:	00100002 	.word	0x00100002
 8005174:	ffff0000 	.word	0xffff0000
 8005178:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800517c:	b672      	cpsid	i
}
 800517e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80051c2:	b662      	cpsie	i
}
 80051c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051f8:	e0ee      	b.n	80053d8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	2200      	movs	r2, #0
 8005202:	4981      	ldr	r1, [pc, #516]	; (8005408 <HAL_I2C_Master_Receive+0x4cc>)
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 fa55 	bl	80056b4 <I2C_WaitOnFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0f5      	b.n	8005400 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005222:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005224:	b672      	cpsid	i
}
 8005226:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800525a:	4b6c      	ldr	r3, [pc, #432]	; (800540c <HAL_I2C_Master_Receive+0x4d0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	08db      	lsrs	r3, r3, #3
 8005260:	4a6b      	ldr	r2, [pc, #428]	; (8005410 <HAL_I2C_Master_Receive+0x4d4>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	0a1a      	lsrs	r2, r3, #8
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	00da      	lsls	r2, r3, #3
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	3b01      	subs	r3, #1
 8005278:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d118      	bne.n	80052b2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f043 0220 	orr.w	r2, r3, #32
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80052a2:	b662      	cpsie	i
}
 80052a4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e0a6      	b.n	8005400 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d1d9      	bne.n	8005274 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005302:	b662      	cpsie	i
}
 8005304:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005338:	e04e      	b.n	80053d8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800533a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 fb62 	bl	8005a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e058      	b.n	8005400 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b04      	cmp	r3, #4
 800538c:	d124      	bne.n	80053d8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005392:	2b03      	cmp	r3, #3
 8005394:	d107      	bne.n	80053a6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f47f ae88 	bne.w	80050f2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3728      	adds	r7, #40	; 0x28
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	00010004 	.word	0x00010004
 800540c:	20000008 	.word	0x20000008
 8005410:	14f8b589 	.word	0x14f8b589

08005414 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	607a      	str	r2, [r7, #4]
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	460b      	mov	r3, r1
 8005422:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b08      	cmp	r3, #8
 800542e:	d006      	beq.n	800543e <I2C_MasterRequestWrite+0x2a>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d003      	beq.n	800543e <I2C_MasterRequestWrite+0x2a>
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800543c:	d108      	bne.n	8005450 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e00b      	b.n	8005468 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005454:	2b12      	cmp	r3, #18
 8005456:	d107      	bne.n	8005468 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005466:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f91d 	bl	80056b4 <I2C_WaitOnFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00d      	beq.n	800549c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548e:	d103      	bne.n	8005498 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005496:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e035      	b.n	8005508 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054a4:	d108      	bne.n	80054b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054a6:	897b      	ldrh	r3, [r7, #10]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054b4:	611a      	str	r2, [r3, #16]
 80054b6:	e01b      	b.n	80054f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054b8:	897b      	ldrh	r3, [r7, #10]
 80054ba:	11db      	asrs	r3, r3, #7
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f003 0306 	and.w	r3, r3, #6
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	f063 030f 	orn	r3, r3, #15
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	490e      	ldr	r1, [pc, #56]	; (8005510 <I2C_MasterRequestWrite+0xfc>)
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f966 	bl	80057a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e010      	b.n	8005508 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054e6:	897b      	ldrh	r3, [r7, #10]
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	4907      	ldr	r1, [pc, #28]	; (8005514 <I2C_MasterRequestWrite+0x100>)
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f956 	bl	80057a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e000      	b.n	8005508 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	00010008 	.word	0x00010008
 8005514:	00010002 	.word	0x00010002

08005518 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	607a      	str	r2, [r7, #4]
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	460b      	mov	r3, r1
 8005526:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800553c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2b08      	cmp	r3, #8
 8005542:	d006      	beq.n	8005552 <I2C_MasterRequestRead+0x3a>
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d003      	beq.n	8005552 <I2C_MasterRequestRead+0x3a>
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005550:	d108      	bne.n	8005564 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	e00b      	b.n	800557c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	2b11      	cmp	r3, #17
 800556a:	d107      	bne.n	800557c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800557a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f893 	bl	80056b4 <I2C_WaitOnFlagUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00d      	beq.n	80055b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a2:	d103      	bne.n	80055ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e079      	b.n	80056a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055b8:	d108      	bne.n	80055cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055ba:	897b      	ldrh	r3, [r7, #10]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	611a      	str	r2, [r3, #16]
 80055ca:	e05f      	b.n	800568c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055cc:	897b      	ldrh	r3, [r7, #10]
 80055ce:	11db      	asrs	r3, r3, #7
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	f003 0306 	and.w	r3, r3, #6
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	f063 030f 	orn	r3, r3, #15
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	4930      	ldr	r1, [pc, #192]	; (80056ac <I2C_MasterRequestRead+0x194>)
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 f8dc 	bl	80057a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e054      	b.n	80056a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055fa:	897b      	ldrh	r3, [r7, #10]
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	4929      	ldr	r1, [pc, #164]	; (80056b0 <I2C_MasterRequestRead+0x198>)
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 f8cc 	bl	80057a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e044      	b.n	80056a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800561a:	2300      	movs	r3, #0
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800563e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f831 	bl	80056b4 <I2C_WaitOnFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00d      	beq.n	8005674 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005666:	d103      	bne.n	8005670 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800566e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e017      	b.n	80056a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005674:	897b      	ldrh	r3, [r7, #10]
 8005676:	11db      	asrs	r3, r3, #7
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f003 0306 	and.w	r3, r3, #6
 800567e:	b2db      	uxtb	r3, r3
 8005680:	f063 030e 	orn	r3, r3, #14
 8005684:	b2da      	uxtb	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	4907      	ldr	r1, [pc, #28]	; (80056b0 <I2C_MasterRequestRead+0x198>)
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f888 	bl	80057a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	00010008 	.word	0x00010008
 80056b0:	00010002 	.word	0x00010002

080056b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056c4:	e048      	b.n	8005758 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056cc:	d044      	beq.n	8005758 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ce:	f7fe fec7 	bl	8004460 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d302      	bcc.n	80056e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d139      	bne.n	8005758 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	0c1b      	lsrs	r3, r3, #16
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d10d      	bne.n	800570a <I2C_WaitOnFlagUntilTimeout+0x56>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	43da      	mvns	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	4013      	ands	r3, r2
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	bf0c      	ite	eq
 8005700:	2301      	moveq	r3, #1
 8005702:	2300      	movne	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	e00c      	b.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x70>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	43da      	mvns	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4013      	ands	r3, r2
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	bf0c      	ite	eq
 800571c:	2301      	moveq	r3, #1
 800571e:	2300      	movne	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	461a      	mov	r2, r3
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	429a      	cmp	r2, r3
 8005728:	d116      	bne.n	8005758 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	f043 0220 	orr.w	r2, r3, #32
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e023      	b.n	80057a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	0c1b      	lsrs	r3, r3, #16
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b01      	cmp	r3, #1
 8005760:	d10d      	bne.n	800577e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	43da      	mvns	r2, r3
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	4013      	ands	r3, r2
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	bf0c      	ite	eq
 8005774:	2301      	moveq	r3, #1
 8005776:	2300      	movne	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	461a      	mov	r2, r3
 800577c:	e00c      	b.n	8005798 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	43da      	mvns	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	4013      	ands	r3, r2
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	bf0c      	ite	eq
 8005790:	2301      	moveq	r3, #1
 8005792:	2300      	movne	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	429a      	cmp	r2, r3
 800579c:	d093      	beq.n	80056c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057b6:	e071      	b.n	800589c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c6:	d123      	bne.n	8005810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	f043 0204 	orr.w	r2, r3, #4
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e067      	b.n	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005816:	d041      	beq.n	800589c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005818:	f7fe fe22 	bl	8004460 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	429a      	cmp	r2, r3
 8005826:	d302      	bcc.n	800582e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d136      	bne.n	800589c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	0c1b      	lsrs	r3, r3, #16
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	d10c      	bne.n	8005852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	43da      	mvns	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4013      	ands	r3, r2
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	bf14      	ite	ne
 800584a:	2301      	movne	r3, #1
 800584c:	2300      	moveq	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	e00b      	b.n	800586a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	43da      	mvns	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4013      	ands	r3, r2
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d016      	beq.n	800589c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	f043 0220 	orr.w	r2, r3, #32
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e021      	b.n	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	0c1b      	lsrs	r3, r3, #16
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d10c      	bne.n	80058c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	43da      	mvns	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4013      	ands	r3, r2
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	e00b      	b.n	80058d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	43da      	mvns	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4013      	ands	r3, r2
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bf14      	ite	ne
 80058d2:	2301      	movne	r3, #1
 80058d4:	2300      	moveq	r3, #0
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f47f af6d 	bne.w	80057b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058f4:	e034      	b.n	8005960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 f8e3 	bl	8005ac2 <I2C_IsAcknowledgeFailed>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e034      	b.n	8005970 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d028      	beq.n	8005960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590e:	f7fe fda7 	bl	8004460 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	429a      	cmp	r2, r3
 800591c:	d302      	bcc.n	8005924 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d11d      	bne.n	8005960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b80      	cmp	r3, #128	; 0x80
 8005930:	d016      	beq.n	8005960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	f043 0220 	orr.w	r2, r3, #32
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e007      	b.n	8005970 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596a:	2b80      	cmp	r3, #128	; 0x80
 800596c:	d1c3      	bne.n	80058f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005984:	e034      	b.n	80059f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 f89b 	bl	8005ac2 <I2C_IsAcknowledgeFailed>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e034      	b.n	8005a00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d028      	beq.n	80059f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599e:	f7fe fd5f 	bl	8004460 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d302      	bcc.n	80059b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d11d      	bne.n	80059f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d016      	beq.n	80059f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	f043 0220 	orr.w	r2, r3, #32
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e007      	b.n	8005a00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b04      	cmp	r3, #4
 80059fc:	d1c3      	bne.n	8005986 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a14:	e049      	b.n	8005aaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	2b10      	cmp	r3, #16
 8005a22:	d119      	bne.n	8005a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0210 	mvn.w	r2, #16
 8005a2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e030      	b.n	8005aba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a58:	f7fe fd02 	bl	8004460 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d302      	bcc.n	8005a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d11d      	bne.n	8005aaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a78:	2b40      	cmp	r3, #64	; 0x40
 8005a7a:	d016      	beq.n	8005aaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f043 0220 	orr.w	r2, r3, #32
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e007      	b.n	8005aba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab4:	2b40      	cmp	r3, #64	; 0x40
 8005ab6:	d1ae      	bne.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad8:	d11b      	bne.n	8005b12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ae2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	f043 0204 	orr.w	r2, r3, #4
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr
	...

08005b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e272      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 8087 	beq.w	8005c4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b40:	4b92      	ldr	r3, [pc, #584]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f003 030c 	and.w	r3, r3, #12
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d00c      	beq.n	8005b66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b4c:	4b8f      	ldr	r3, [pc, #572]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f003 030c 	and.w	r3, r3, #12
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d112      	bne.n	8005b7e <HAL_RCC_OscConfig+0x5e>
 8005b58:	4b8c      	ldr	r3, [pc, #560]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b64:	d10b      	bne.n	8005b7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b66:	4b89      	ldr	r3, [pc, #548]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d06c      	beq.n	8005c4c <HAL_RCC_OscConfig+0x12c>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d168      	bne.n	8005c4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e24c      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b86:	d106      	bne.n	8005b96 <HAL_RCC_OscConfig+0x76>
 8005b88:	4b80      	ldr	r3, [pc, #512]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a7f      	ldr	r2, [pc, #508]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	e02e      	b.n	8005bf4 <HAL_RCC_OscConfig+0xd4>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10c      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x98>
 8005b9e:	4b7b      	ldr	r3, [pc, #492]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a7a      	ldr	r2, [pc, #488]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	4b78      	ldr	r3, [pc, #480]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a77      	ldr	r2, [pc, #476]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e01d      	b.n	8005bf4 <HAL_RCC_OscConfig+0xd4>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bc0:	d10c      	bne.n	8005bdc <HAL_RCC_OscConfig+0xbc>
 8005bc2:	4b72      	ldr	r3, [pc, #456]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a71      	ldr	r2, [pc, #452]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	4b6f      	ldr	r3, [pc, #444]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a6e      	ldr	r2, [pc, #440]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	e00b      	b.n	8005bf4 <HAL_RCC_OscConfig+0xd4>
 8005bdc:	4b6b      	ldr	r3, [pc, #428]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a6a      	ldr	r2, [pc, #424]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	4b68      	ldr	r3, [pc, #416]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a67      	ldr	r2, [pc, #412]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d013      	beq.n	8005c24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfc:	f7fe fc30 	bl	8004460 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c04:	f7fe fc2c 	bl	8004460 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b64      	cmp	r3, #100	; 0x64
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e200      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c16:	4b5d      	ldr	r3, [pc, #372]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0xe4>
 8005c22:	e014      	b.n	8005c4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c24:	f7fe fc1c 	bl	8004460 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c2c:	f7fe fc18 	bl	8004460 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b64      	cmp	r3, #100	; 0x64
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e1ec      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c3e:	4b53      	ldr	r3, [pc, #332]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0x10c>
 8005c4a:	e000      	b.n	8005c4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d063      	beq.n	8005d22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c5a:	4b4c      	ldr	r3, [pc, #304]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f003 030c 	and.w	r3, r3, #12
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00b      	beq.n	8005c7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005c66:	4b49      	ldr	r3, [pc, #292]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f003 030c 	and.w	r3, r3, #12
 8005c6e:	2b08      	cmp	r3, #8
 8005c70:	d11c      	bne.n	8005cac <HAL_RCC_OscConfig+0x18c>
 8005c72:	4b46      	ldr	r3, [pc, #280]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d116      	bne.n	8005cac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c7e:	4b43      	ldr	r3, [pc, #268]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d005      	beq.n	8005c96 <HAL_RCC_OscConfig+0x176>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d001      	beq.n	8005c96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e1c0      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c96:	4b3d      	ldr	r3, [pc, #244]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4939      	ldr	r1, [pc, #228]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005caa:	e03a      	b.n	8005d22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d020      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cb4:	4b36      	ldr	r3, [pc, #216]	; (8005d90 <HAL_RCC_OscConfig+0x270>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cba:	f7fe fbd1 	bl	8004460 <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cc2:	f7fe fbcd 	bl	8004460 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e1a1      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd4:	4b2d      	ldr	r3, [pc, #180]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f0      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce0:	4b2a      	ldr	r3, [pc, #168]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	4927      	ldr	r1, [pc, #156]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	600b      	str	r3, [r1, #0]
 8005cf4:	e015      	b.n	8005d22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cf6:	4b26      	ldr	r3, [pc, #152]	; (8005d90 <HAL_RCC_OscConfig+0x270>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfc:	f7fe fbb0 	bl	8004460 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d04:	f7fe fbac 	bl	8004460 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e180      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d16:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f0      	bne.n	8005d04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d03a      	beq.n	8005da4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d019      	beq.n	8005d6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d36:	4b17      	ldr	r3, [pc, #92]	; (8005d94 <HAL_RCC_OscConfig+0x274>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d3c:	f7fe fb90 	bl	8004460 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d44:	f7fe fb8c 	bl	8004460 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e160      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d56:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <HAL_RCC_OscConfig+0x26c>)
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0f0      	beq.n	8005d44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005d62:	2001      	movs	r0, #1
 8005d64:	f000 face 	bl	8006304 <RCC_Delay>
 8005d68:	e01c      	b.n	8005da4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <HAL_RCC_OscConfig+0x274>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d70:	f7fe fb76 	bl	8004460 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d76:	e00f      	b.n	8005d98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d78:	f7fe fb72 	bl	8004460 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d908      	bls.n	8005d98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e146      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
 8005d8a:	bf00      	nop
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	42420000 	.word	0x42420000
 8005d94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d98:	4b92      	ldr	r3, [pc, #584]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e9      	bne.n	8005d78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80a6 	beq.w	8005efe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005db2:	2300      	movs	r3, #0
 8005db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005db6:	4b8b      	ldr	r3, [pc, #556]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10d      	bne.n	8005dde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dc2:	4b88      	ldr	r3, [pc, #544]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	4a87      	ldr	r2, [pc, #540]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dcc:	61d3      	str	r3, [r2, #28]
 8005dce:	4b85      	ldr	r3, [pc, #532]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd6:	60bb      	str	r3, [r7, #8]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dde:	4b82      	ldr	r3, [pc, #520]	; (8005fe8 <HAL_RCC_OscConfig+0x4c8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d118      	bne.n	8005e1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dea:	4b7f      	ldr	r3, [pc, #508]	; (8005fe8 <HAL_RCC_OscConfig+0x4c8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a7e      	ldr	r2, [pc, #504]	; (8005fe8 <HAL_RCC_OscConfig+0x4c8>)
 8005df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005df6:	f7fe fb33 	bl	8004460 <HAL_GetTick>
 8005dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dfc:	e008      	b.n	8005e10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dfe:	f7fe fb2f 	bl	8004460 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b64      	cmp	r3, #100	; 0x64
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e103      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e10:	4b75      	ldr	r3, [pc, #468]	; (8005fe8 <HAL_RCC_OscConfig+0x4c8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0f0      	beq.n	8005dfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d106      	bne.n	8005e32 <HAL_RCC_OscConfig+0x312>
 8005e24:	4b6f      	ldr	r3, [pc, #444]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	4a6e      	ldr	r2, [pc, #440]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005e2a:	f043 0301 	orr.w	r3, r3, #1
 8005e2e:	6213      	str	r3, [r2, #32]
 8005e30:	e02d      	b.n	8005e8e <HAL_RCC_OscConfig+0x36e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10c      	bne.n	8005e54 <HAL_RCC_OscConfig+0x334>
 8005e3a:	4b6a      	ldr	r3, [pc, #424]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	4a69      	ldr	r2, [pc, #420]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005e40:	f023 0301 	bic.w	r3, r3, #1
 8005e44:	6213      	str	r3, [r2, #32]
 8005e46:	4b67      	ldr	r3, [pc, #412]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	4a66      	ldr	r2, [pc, #408]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005e4c:	f023 0304 	bic.w	r3, r3, #4
 8005e50:	6213      	str	r3, [r2, #32]
 8005e52:	e01c      	b.n	8005e8e <HAL_RCC_OscConfig+0x36e>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b05      	cmp	r3, #5
 8005e5a:	d10c      	bne.n	8005e76 <HAL_RCC_OscConfig+0x356>
 8005e5c:	4b61      	ldr	r3, [pc, #388]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	4a60      	ldr	r2, [pc, #384]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005e62:	f043 0304 	orr.w	r3, r3, #4
 8005e66:	6213      	str	r3, [r2, #32]
 8005e68:	4b5e      	ldr	r3, [pc, #376]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	4a5d      	ldr	r2, [pc, #372]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005e6e:	f043 0301 	orr.w	r3, r3, #1
 8005e72:	6213      	str	r3, [r2, #32]
 8005e74:	e00b      	b.n	8005e8e <HAL_RCC_OscConfig+0x36e>
 8005e76:	4b5b      	ldr	r3, [pc, #364]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	4a5a      	ldr	r2, [pc, #360]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005e7c:	f023 0301 	bic.w	r3, r3, #1
 8005e80:	6213      	str	r3, [r2, #32]
 8005e82:	4b58      	ldr	r3, [pc, #352]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	4a57      	ldr	r2, [pc, #348]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005e88:	f023 0304 	bic.w	r3, r3, #4
 8005e8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d015      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e96:	f7fe fae3 	bl	8004460 <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e9c:	e00a      	b.n	8005eb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e9e:	f7fe fadf 	bl	8004460 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e0b1      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eb4:	4b4b      	ldr	r3, [pc, #300]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0ee      	beq.n	8005e9e <HAL_RCC_OscConfig+0x37e>
 8005ec0:	e014      	b.n	8005eec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ec2:	f7fe facd 	bl	8004460 <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ec8:	e00a      	b.n	8005ee0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eca:	f7fe fac9 	bl	8004460 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e09b      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ee0:	4b40      	ldr	r3, [pc, #256]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1ee      	bne.n	8005eca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d105      	bne.n	8005efe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ef2:	4b3c      	ldr	r3, [pc, #240]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	4a3b      	ldr	r2, [pc, #236]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005efc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 8087 	beq.w	8006016 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f08:	4b36      	ldr	r3, [pc, #216]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f003 030c 	and.w	r3, r3, #12
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d061      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d146      	bne.n	8005faa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f1c:	4b33      	ldr	r3, [pc, #204]	; (8005fec <HAL_RCC_OscConfig+0x4cc>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f22:	f7fe fa9d 	bl	8004460 <HAL_GetTick>
 8005f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f2a:	f7fe fa99 	bl	8004460 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e06d      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f3c:	4b29      	ldr	r3, [pc, #164]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f0      	bne.n	8005f2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f50:	d108      	bne.n	8005f64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f52:	4b24      	ldr	r3, [pc, #144]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	4921      	ldr	r1, [pc, #132]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f64:	4b1f      	ldr	r3, [pc, #124]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a19      	ldr	r1, [r3, #32]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	430b      	orrs	r3, r1
 8005f76:	491b      	ldr	r1, [pc, #108]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <HAL_RCC_OscConfig+0x4cc>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f82:	f7fe fa6d 	bl	8004460 <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f8a:	f7fe fa69 	bl	8004460 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e03d      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f0      	beq.n	8005f8a <HAL_RCC_OscConfig+0x46a>
 8005fa8:	e035      	b.n	8006016 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005faa:	4b10      	ldr	r3, [pc, #64]	; (8005fec <HAL_RCC_OscConfig+0x4cc>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb0:	f7fe fa56 	bl	8004460 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb8:	f7fe fa52 	bl	8004460 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e026      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fca:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <HAL_RCC_OscConfig+0x4c4>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f0      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x498>
 8005fd6:	e01e      	b.n	8006016 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d107      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e019      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	40007000 	.word	0x40007000
 8005fec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <HAL_RCC_OscConfig+0x500>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	429a      	cmp	r2, r3
 8006002:	d106      	bne.n	8006012 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800600e:	429a      	cmp	r2, r3
 8006010:	d001      	beq.n	8006016 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40021000 	.word	0x40021000

08006024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0d0      	b.n	80061da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006038:	4b6a      	ldr	r3, [pc, #424]	; (80061e4 <HAL_RCC_ClockConfig+0x1c0>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d910      	bls.n	8006068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006046:	4b67      	ldr	r3, [pc, #412]	; (80061e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f023 0207 	bic.w	r2, r3, #7
 800604e:	4965      	ldr	r1, [pc, #404]	; (80061e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	4313      	orrs	r3, r2
 8006054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006056:	4b63      	ldr	r3, [pc, #396]	; (80061e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d001      	beq.n	8006068 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e0b8      	b.n	80061da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d020      	beq.n	80060b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d005      	beq.n	800608c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006080:	4b59      	ldr	r3, [pc, #356]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	4a58      	ldr	r2, [pc, #352]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006086:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800608a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0308 	and.w	r3, r3, #8
 8006094:	2b00      	cmp	r3, #0
 8006096:	d005      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006098:	4b53      	ldr	r3, [pc, #332]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	4a52      	ldr	r2, [pc, #328]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 800609e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80060a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060a4:	4b50      	ldr	r3, [pc, #320]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	494d      	ldr	r1, [pc, #308]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d040      	beq.n	8006144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d107      	bne.n	80060da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ca:	4b47      	ldr	r3, [pc, #284]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d115      	bne.n	8006102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e07f      	b.n	80061da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d107      	bne.n	80060f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060e2:	4b41      	ldr	r3, [pc, #260]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d109      	bne.n	8006102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e073      	b.n	80061da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f2:	4b3d      	ldr	r3, [pc, #244]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e06b      	b.n	80061da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006102:	4b39      	ldr	r3, [pc, #228]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f023 0203 	bic.w	r2, r3, #3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	4936      	ldr	r1, [pc, #216]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006110:	4313      	orrs	r3, r2
 8006112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006114:	f7fe f9a4 	bl	8004460 <HAL_GetTick>
 8006118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800611a:	e00a      	b.n	8006132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800611c:	f7fe f9a0 	bl	8004460 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	f241 3288 	movw	r2, #5000	; 0x1388
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e053      	b.n	80061da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006132:	4b2d      	ldr	r3, [pc, #180]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f003 020c 	and.w	r2, r3, #12
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	429a      	cmp	r2, r3
 8006142:	d1eb      	bne.n	800611c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006144:	4b27      	ldr	r3, [pc, #156]	; (80061e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d210      	bcs.n	8006174 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006152:	4b24      	ldr	r3, [pc, #144]	; (80061e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f023 0207 	bic.w	r2, r3, #7
 800615a:	4922      	ldr	r1, [pc, #136]	; (80061e4 <HAL_RCC_ClockConfig+0x1c0>)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	4313      	orrs	r3, r2
 8006160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006162:	4b20      	ldr	r3, [pc, #128]	; (80061e4 <HAL_RCC_ClockConfig+0x1c0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	d001      	beq.n	8006174 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e032      	b.n	80061da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006180:	4b19      	ldr	r3, [pc, #100]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	4916      	ldr	r1, [pc, #88]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 800618e:	4313      	orrs	r3, r2
 8006190:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d009      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800619e:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	490e      	ldr	r1, [pc, #56]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061b2:	f000 f821 	bl	80061f8 <HAL_RCC_GetSysClockFreq>
 80061b6:	4602      	mov	r2, r0
 80061b8:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <HAL_RCC_ClockConfig+0x1c4>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	091b      	lsrs	r3, r3, #4
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	490a      	ldr	r1, [pc, #40]	; (80061ec <HAL_RCC_ClockConfig+0x1c8>)
 80061c4:	5ccb      	ldrb	r3, [r1, r3]
 80061c6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ca:	4a09      	ldr	r2, [pc, #36]	; (80061f0 <HAL_RCC_ClockConfig+0x1cc>)
 80061cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061ce:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <HAL_RCC_ClockConfig+0x1d0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe f902 	bl	80043dc <HAL_InitTick>

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40022000 	.word	0x40022000
 80061e8:	40021000 	.word	0x40021000
 80061ec:	0800c9e8 	.word	0x0800c9e8
 80061f0:	20000008 	.word	0x20000008
 80061f4:	2000000c 	.word	0x2000000c

080061f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	2300      	movs	r3, #0
 800620c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006212:	4b1e      	ldr	r3, [pc, #120]	; (800628c <HAL_RCC_GetSysClockFreq+0x94>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f003 030c 	and.w	r3, r3, #12
 800621e:	2b04      	cmp	r3, #4
 8006220:	d002      	beq.n	8006228 <HAL_RCC_GetSysClockFreq+0x30>
 8006222:	2b08      	cmp	r3, #8
 8006224:	d003      	beq.n	800622e <HAL_RCC_GetSysClockFreq+0x36>
 8006226:	e027      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006228:	4b19      	ldr	r3, [pc, #100]	; (8006290 <HAL_RCC_GetSysClockFreq+0x98>)
 800622a:	613b      	str	r3, [r7, #16]
      break;
 800622c:	e027      	b.n	800627e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	0c9b      	lsrs	r3, r3, #18
 8006232:	f003 030f 	and.w	r3, r3, #15
 8006236:	4a17      	ldr	r2, [pc, #92]	; (8006294 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006238:	5cd3      	ldrb	r3, [r2, r3]
 800623a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d010      	beq.n	8006268 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006246:	4b11      	ldr	r3, [pc, #68]	; (800628c <HAL_RCC_GetSysClockFreq+0x94>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	0c5b      	lsrs	r3, r3, #17
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	4a11      	ldr	r2, [pc, #68]	; (8006298 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006252:	5cd3      	ldrb	r3, [r2, r3]
 8006254:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a0d      	ldr	r2, [pc, #52]	; (8006290 <HAL_RCC_GetSysClockFreq+0x98>)
 800625a:	fb03 f202 	mul.w	r2, r3, r2
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	e004      	b.n	8006272 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a0c      	ldr	r2, [pc, #48]	; (800629c <HAL_RCC_GetSysClockFreq+0xa4>)
 800626c:	fb02 f303 	mul.w	r3, r2, r3
 8006270:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	613b      	str	r3, [r7, #16]
      break;
 8006276:	e002      	b.n	800627e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006278:	4b05      	ldr	r3, [pc, #20]	; (8006290 <HAL_RCC_GetSysClockFreq+0x98>)
 800627a:	613b      	str	r3, [r7, #16]
      break;
 800627c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800627e:	693b      	ldr	r3, [r7, #16]
}
 8006280:	4618      	mov	r0, r3
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	bc80      	pop	{r7}
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40021000 	.word	0x40021000
 8006290:	007a1200 	.word	0x007a1200
 8006294:	0800ca00 	.word	0x0800ca00
 8006298:	0800ca10 	.word	0x0800ca10
 800629c:	003d0900 	.word	0x003d0900

080062a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062a4:	4b02      	ldr	r3, [pc, #8]	; (80062b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80062a6:	681b      	ldr	r3, [r3, #0]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bc80      	pop	{r7}
 80062ae:	4770      	bx	lr
 80062b0:	20000008 	.word	0x20000008

080062b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062b8:	f7ff fff2 	bl	80062a0 <HAL_RCC_GetHCLKFreq>
 80062bc:	4602      	mov	r2, r0
 80062be:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	0a1b      	lsrs	r3, r3, #8
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	4903      	ldr	r1, [pc, #12]	; (80062d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ca:	5ccb      	ldrb	r3, [r1, r3]
 80062cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40021000 	.word	0x40021000
 80062d8:	0800c9f8 	.word	0x0800c9f8

080062dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062e0:	f7ff ffde 	bl	80062a0 <HAL_RCC_GetHCLKFreq>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4b05      	ldr	r3, [pc, #20]	; (80062fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	0adb      	lsrs	r3, r3, #11
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	4903      	ldr	r1, [pc, #12]	; (8006300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062f2:	5ccb      	ldrb	r3, [r1, r3]
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40021000 	.word	0x40021000
 8006300:	0800c9f8 	.word	0x0800c9f8

08006304 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <RCC_Delay+0x34>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a0a      	ldr	r2, [pc, #40]	; (800633c <RCC_Delay+0x38>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	0a5b      	lsrs	r3, r3, #9
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	fb02 f303 	mul.w	r3, r2, r3
 800631e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006320:	bf00      	nop
  }
  while (Delay --);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1e5a      	subs	r2, r3, #1
 8006326:	60fa      	str	r2, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1f9      	bne.n	8006320 <RCC_Delay+0x1c>
}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr
 8006338:	20000008 	.word	0x20000008
 800633c:	10624dd3 	.word	0x10624dd3

08006340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e041      	b.n	80063d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fd f9be 	bl	80036e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3304      	adds	r3, #4
 800637c:	4619      	mov	r1, r3
 800637e:	4610      	mov	r0, r2
 8006380:	f000 fd68 	bl	8006e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d001      	beq.n	80063f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e03a      	b.n	800646e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a18      	ldr	r2, [pc, #96]	; (8006478 <HAL_TIM_Base_Start_IT+0x98>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00e      	beq.n	8006438 <HAL_TIM_Base_Start_IT+0x58>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006422:	d009      	beq.n	8006438 <HAL_TIM_Base_Start_IT+0x58>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a14      	ldr	r2, [pc, #80]	; (800647c <HAL_TIM_Base_Start_IT+0x9c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d004      	beq.n	8006438 <HAL_TIM_Base_Start_IT+0x58>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a13      	ldr	r2, [pc, #76]	; (8006480 <HAL_TIM_Base_Start_IT+0xa0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d111      	bne.n	800645c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b06      	cmp	r3, #6
 8006448:	d010      	beq.n	800646c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0201 	orr.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645a:	e007      	b.n	800646c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr
 8006478:	40012c00 	.word	0x40012c00
 800647c:	40000400 	.word	0x40000400
 8006480:	40000800 	.word	0x40000800

08006484 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e041      	b.n	800651a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f839 	bl	8006522 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	4619      	mov	r1, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	f000 fcc6 	bl	8006e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr

08006534 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d109      	bne.n	8006558 <HAL_TIM_PWM_Start+0x24>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b01      	cmp	r3, #1
 800654e:	bf14      	ite	ne
 8006550:	2301      	movne	r3, #1
 8006552:	2300      	moveq	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	e022      	b.n	800659e <HAL_TIM_PWM_Start+0x6a>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b04      	cmp	r3, #4
 800655c:	d109      	bne.n	8006572 <HAL_TIM_PWM_Start+0x3e>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b01      	cmp	r3, #1
 8006568:	bf14      	ite	ne
 800656a:	2301      	movne	r3, #1
 800656c:	2300      	moveq	r3, #0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	e015      	b.n	800659e <HAL_TIM_PWM_Start+0x6a>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b08      	cmp	r3, #8
 8006576:	d109      	bne.n	800658c <HAL_TIM_PWM_Start+0x58>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b01      	cmp	r3, #1
 8006582:	bf14      	ite	ne
 8006584:	2301      	movne	r3, #1
 8006586:	2300      	moveq	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	e008      	b.n	800659e <HAL_TIM_PWM_Start+0x6a>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b01      	cmp	r3, #1
 8006596:	bf14      	ite	ne
 8006598:	2301      	movne	r3, #1
 800659a:	2300      	moveq	r3, #0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e05e      	b.n	8006664 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d104      	bne.n	80065b6 <HAL_TIM_PWM_Start+0x82>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065b4:	e013      	b.n	80065de <HAL_TIM_PWM_Start+0xaa>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d104      	bne.n	80065c6 <HAL_TIM_PWM_Start+0x92>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065c4:	e00b      	b.n	80065de <HAL_TIM_PWM_Start+0xaa>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d104      	bne.n	80065d6 <HAL_TIM_PWM_Start+0xa2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065d4:	e003      	b.n	80065de <HAL_TIM_PWM_Start+0xaa>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2201      	movs	r2, #1
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 feb4 	bl	8007354 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1e      	ldr	r2, [pc, #120]	; (800666c <HAL_TIM_PWM_Start+0x138>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d107      	bne.n	8006606 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006604:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a18      	ldr	r2, [pc, #96]	; (800666c <HAL_TIM_PWM_Start+0x138>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00e      	beq.n	800662e <HAL_TIM_PWM_Start+0xfa>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006618:	d009      	beq.n	800662e <HAL_TIM_PWM_Start+0xfa>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a14      	ldr	r2, [pc, #80]	; (8006670 <HAL_TIM_PWM_Start+0x13c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d004      	beq.n	800662e <HAL_TIM_PWM_Start+0xfa>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a12      	ldr	r2, [pc, #72]	; (8006674 <HAL_TIM_PWM_Start+0x140>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d111      	bne.n	8006652 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b06      	cmp	r3, #6
 800663e:	d010      	beq.n	8006662 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006650:	e007      	b.n	8006662 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f042 0201 	orr.w	r2, r2, #1
 8006660:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40012c00 	.word	0x40012c00
 8006670:	40000400 	.word	0x40000400
 8006674:	40000800 	.word	0x40000800

08006678 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e093      	b.n	80067b4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7fd f83f 	bl	8003724 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2202      	movs	r2, #2
 80066aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6812      	ldr	r2, [r2, #0]
 80066b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066bc:	f023 0307 	bic.w	r3, r3, #7
 80066c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4619      	mov	r1, r3
 80066cc:	4610      	mov	r0, r2
 80066ce:	f000 fbc1 	bl	8006e54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	4313      	orrs	r3, r2
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006718:	f023 030c 	bic.w	r3, r3, #12
 800671c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	4313      	orrs	r3, r2
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	011a      	lsls	r2, r3, #4
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	031b      	lsls	r3, r3, #12
 8006748:	4313      	orrs	r3, r2
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006756:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	4313      	orrs	r3, r2
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d110      	bne.n	800680e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d102      	bne.n	80067f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80067f2:	7b7b      	ldrb	r3, [r7, #13]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d001      	beq.n	80067fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e069      	b.n	80068d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800680c:	e031      	b.n	8006872 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b04      	cmp	r3, #4
 8006812:	d110      	bne.n	8006836 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006814:	7bbb      	ldrb	r3, [r7, #14]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d102      	bne.n	8006820 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800681a:	7b3b      	ldrb	r3, [r7, #12]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d001      	beq.n	8006824 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e055      	b.n	80068d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006834:	e01d      	b.n	8006872 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d108      	bne.n	800684e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d105      	bne.n	800684e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006842:	7b7b      	ldrb	r3, [r7, #13]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d102      	bne.n	800684e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006848:	7b3b      	ldrb	r3, [r7, #12]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d001      	beq.n	8006852 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e03e      	b.n	80068d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2202      	movs	r2, #2
 8006856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <HAL_TIM_Encoder_Start+0xc4>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b04      	cmp	r3, #4
 800687c:	d008      	beq.n	8006890 <HAL_TIM_Encoder_Start+0xd4>
 800687e:	e00f      	b.n	80068a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2201      	movs	r2, #1
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f000 fd63 	bl	8007354 <TIM_CCxChannelCmd>
      break;
 800688e:	e016      	b.n	80068be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2201      	movs	r2, #1
 8006896:	2104      	movs	r1, #4
 8006898:	4618      	mov	r0, r3
 800689a:	f000 fd5b 	bl	8007354 <TIM_CCxChannelCmd>
      break;
 800689e:	e00e      	b.n	80068be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2201      	movs	r2, #1
 80068a6:	2100      	movs	r1, #0
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fd53 	bl	8007354 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2201      	movs	r2, #1
 80068b4:	2104      	movs	r1, #4
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fd4c 	bl	8007354 <TIM_CCxChannelCmd>
      break;
 80068bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f042 0201 	orr.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d122      	bne.n	8006934 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d11b      	bne.n	8006934 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f06f 0202 	mvn.w	r2, #2
 8006904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fa7f 	bl	8006e1e <HAL_TIM_IC_CaptureCallback>
 8006920:	e005      	b.n	800692e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fa72 	bl	8006e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fa81 	bl	8006e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	2b04      	cmp	r3, #4
 8006940:	d122      	bne.n	8006988 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f003 0304 	and.w	r3, r3, #4
 800694c:	2b04      	cmp	r3, #4
 800694e:	d11b      	bne.n	8006988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f06f 0204 	mvn.w	r2, #4
 8006958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2202      	movs	r2, #2
 800695e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa55 	bl	8006e1e <HAL_TIM_IC_CaptureCallback>
 8006974:	e005      	b.n	8006982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fa48 	bl	8006e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fa57 	bl	8006e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b08      	cmp	r3, #8
 8006994:	d122      	bne.n	80069dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d11b      	bne.n	80069dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f06f 0208 	mvn.w	r2, #8
 80069ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2204      	movs	r2, #4
 80069b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa2b 	bl	8006e1e <HAL_TIM_IC_CaptureCallback>
 80069c8:	e005      	b.n	80069d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fa1e 	bl	8006e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fa2d 	bl	8006e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f003 0310 	and.w	r3, r3, #16
 80069e6:	2b10      	cmp	r3, #16
 80069e8:	d122      	bne.n	8006a30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b10      	cmp	r3, #16
 80069f6:	d11b      	bne.n	8006a30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f06f 0210 	mvn.w	r2, #16
 8006a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2208      	movs	r2, #8
 8006a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa01 	bl	8006e1e <HAL_TIM_IC_CaptureCallback>
 8006a1c:	e005      	b.n	8006a2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f9f4 	bl	8006e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fa03 	bl	8006e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d10e      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d107      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0201 	mvn.w	r2, #1
 8006a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f9cf 	bl	8006dfa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a66:	2b80      	cmp	r3, #128	; 0x80
 8006a68:	d10e      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a74:	2b80      	cmp	r3, #128	; 0x80
 8006a76:	d107      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fd42 	bl	800750c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d10e      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa0:	2b40      	cmp	r3, #64	; 0x40
 8006aa2:	d107      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f9c7 	bl	8006e42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d10e      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d107      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0220 	mvn.w	r2, #32
 8006ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fd0d 	bl	80074fa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e0ae      	b.n	8006c64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b0c      	cmp	r3, #12
 8006b12:	f200 809f 	bhi.w	8006c54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b16:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1c:	08006b51 	.word	0x08006b51
 8006b20:	08006c55 	.word	0x08006c55
 8006b24:	08006c55 	.word	0x08006c55
 8006b28:	08006c55 	.word	0x08006c55
 8006b2c:	08006b91 	.word	0x08006b91
 8006b30:	08006c55 	.word	0x08006c55
 8006b34:	08006c55 	.word	0x08006c55
 8006b38:	08006c55 	.word	0x08006c55
 8006b3c:	08006bd3 	.word	0x08006bd3
 8006b40:	08006c55 	.word	0x08006c55
 8006b44:	08006c55 	.word	0x08006c55
 8006b48:	08006c55 	.word	0x08006c55
 8006b4c:	08006c13 	.word	0x08006c13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68b9      	ldr	r1, [r7, #8]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 f9de 	bl	8006f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0208 	orr.w	r2, r2, #8
 8006b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0204 	bic.w	r2, r2, #4
 8006b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6999      	ldr	r1, [r3, #24]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	619a      	str	r2, [r3, #24]
      break;
 8006b8e:	e064      	b.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68b9      	ldr	r1, [r7, #8]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fa24 	bl	8006fe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699a      	ldr	r2, [r3, #24]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6999      	ldr	r1, [r3, #24]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	021a      	lsls	r2, r3, #8
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	619a      	str	r2, [r3, #24]
      break;
 8006bd0:	e043      	b.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68b9      	ldr	r1, [r7, #8]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fa6d 	bl	80070b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 0208 	orr.w	r2, r2, #8
 8006bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0204 	bic.w	r2, r2, #4
 8006bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69d9      	ldr	r1, [r3, #28]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	61da      	str	r2, [r3, #28]
      break;
 8006c10:	e023      	b.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fab7 	bl	800718c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69da      	ldr	r2, [r3, #28]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69d9      	ldr	r1, [r3, #28]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	021a      	lsls	r2, r3, #8
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	61da      	str	r2, [r3, #28]
      break;
 8006c52:	e002      	b.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	75fb      	strb	r3, [r7, #23]
      break;
 8006c58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <HAL_TIM_ConfigClockSource+0x1c>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e0b4      	b.n	8006df2 <HAL_TIM_ConfigClockSource+0x186>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cc0:	d03e      	beq.n	8006d40 <HAL_TIM_ConfigClockSource+0xd4>
 8006cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cc6:	f200 8087 	bhi.w	8006dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cce:	f000 8086 	beq.w	8006dde <HAL_TIM_ConfigClockSource+0x172>
 8006cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd6:	d87f      	bhi.n	8006dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cd8:	2b70      	cmp	r3, #112	; 0x70
 8006cda:	d01a      	beq.n	8006d12 <HAL_TIM_ConfigClockSource+0xa6>
 8006cdc:	2b70      	cmp	r3, #112	; 0x70
 8006cde:	d87b      	bhi.n	8006dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ce0:	2b60      	cmp	r3, #96	; 0x60
 8006ce2:	d050      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x11a>
 8006ce4:	2b60      	cmp	r3, #96	; 0x60
 8006ce6:	d877      	bhi.n	8006dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ce8:	2b50      	cmp	r3, #80	; 0x50
 8006cea:	d03c      	beq.n	8006d66 <HAL_TIM_ConfigClockSource+0xfa>
 8006cec:	2b50      	cmp	r3, #80	; 0x50
 8006cee:	d873      	bhi.n	8006dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf0:	2b40      	cmp	r3, #64	; 0x40
 8006cf2:	d058      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0x13a>
 8006cf4:	2b40      	cmp	r3, #64	; 0x40
 8006cf6:	d86f      	bhi.n	8006dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf8:	2b30      	cmp	r3, #48	; 0x30
 8006cfa:	d064      	beq.n	8006dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006cfc:	2b30      	cmp	r3, #48	; 0x30
 8006cfe:	d86b      	bhi.n	8006dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006d00:	2b20      	cmp	r3, #32
 8006d02:	d060      	beq.n	8006dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006d04:	2b20      	cmp	r3, #32
 8006d06:	d867      	bhi.n	8006dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d05c      	beq.n	8006dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006d0c:	2b10      	cmp	r3, #16
 8006d0e:	d05a      	beq.n	8006dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006d10:	e062      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	6899      	ldr	r1, [r3, #8]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	f000 faf8 	bl	8007316 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	609a      	str	r2, [r3, #8]
      break;
 8006d3e:	e04f      	b.n	8006de0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	6899      	ldr	r1, [r3, #8]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f000 fae1 	bl	8007316 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689a      	ldr	r2, [r3, #8]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d62:	609a      	str	r2, [r3, #8]
      break;
 8006d64:	e03c      	b.n	8006de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6818      	ldr	r0, [r3, #0]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	6859      	ldr	r1, [r3, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	461a      	mov	r2, r3
 8006d74:	f000 fa58 	bl	8007228 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2150      	movs	r1, #80	; 0x50
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 faaf 	bl	80072e2 <TIM_ITRx_SetConfig>
      break;
 8006d84:	e02c      	b.n	8006de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	6859      	ldr	r1, [r3, #4]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	461a      	mov	r2, r3
 8006d94:	f000 fa76 	bl	8007284 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2160      	movs	r1, #96	; 0x60
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fa9f 	bl	80072e2 <TIM_ITRx_SetConfig>
      break;
 8006da4:	e01c      	b.n	8006de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	6859      	ldr	r1, [r3, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	461a      	mov	r2, r3
 8006db4:	f000 fa38 	bl	8007228 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2140      	movs	r1, #64	; 0x40
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fa8f 	bl	80072e2 <TIM_ITRx_SetConfig>
      break;
 8006dc4:	e00c      	b.n	8006de0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f000 fa86 	bl	80072e2 <TIM_ITRx_SetConfig>
      break;
 8006dd6:	e003      	b.n	8006de0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	73fb      	strb	r3, [r7, #15]
      break;
 8006ddc:	e000      	b.n	8006de0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006dde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bc80      	pop	{r7}
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr

08006e1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr

08006e42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr

08006e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a29      	ldr	r2, [pc, #164]	; (8006f0c <TIM_Base_SetConfig+0xb8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00b      	beq.n	8006e84 <TIM_Base_SetConfig+0x30>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e72:	d007      	beq.n	8006e84 <TIM_Base_SetConfig+0x30>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a26      	ldr	r2, [pc, #152]	; (8006f10 <TIM_Base_SetConfig+0xbc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_Base_SetConfig+0x30>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a25      	ldr	r2, [pc, #148]	; (8006f14 <TIM_Base_SetConfig+0xc0>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d108      	bne.n	8006e96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a1c      	ldr	r2, [pc, #112]	; (8006f0c <TIM_Base_SetConfig+0xb8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00b      	beq.n	8006eb6 <TIM_Base_SetConfig+0x62>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea4:	d007      	beq.n	8006eb6 <TIM_Base_SetConfig+0x62>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a19      	ldr	r2, [pc, #100]	; (8006f10 <TIM_Base_SetConfig+0xbc>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d003      	beq.n	8006eb6 <TIM_Base_SetConfig+0x62>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a18      	ldr	r2, [pc, #96]	; (8006f14 <TIM_Base_SetConfig+0xc0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d108      	bne.n	8006ec8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a07      	ldr	r2, [pc, #28]	; (8006f0c <TIM_Base_SetConfig+0xb8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d103      	bne.n	8006efc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	615a      	str	r2, [r3, #20]
}
 8006f02:	bf00      	nop
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40000400 	.word	0x40000400
 8006f14:	40000800 	.word	0x40000800

08006f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	f023 0201 	bic.w	r2, r3, #1
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0303 	bic.w	r3, r3, #3
 8006f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f023 0302 	bic.w	r3, r3, #2
 8006f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <TIM_OC1_SetConfig+0xc8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d10c      	bne.n	8006f8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f023 0308 	bic.w	r3, r3, #8
 8006f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f023 0304 	bic.w	r3, r3, #4
 8006f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a13      	ldr	r2, [pc, #76]	; (8006fe0 <TIM_OC1_SetConfig+0xc8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d111      	bne.n	8006fba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	621a      	str	r2, [r3, #32]
}
 8006fd4:	bf00      	nop
 8006fd6:	371c      	adds	r7, #28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40012c00 	.word	0x40012c00

08006fe4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	f023 0210 	bic.w	r2, r3, #16
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f023 0320 	bic.w	r3, r3, #32
 800702e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a1d      	ldr	r2, [pc, #116]	; (80070b4 <TIM_OC2_SetConfig+0xd0>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d10d      	bne.n	8007060 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800704a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800705e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <TIM_OC2_SetConfig+0xd0>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d113      	bne.n	8007090 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800706e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	621a      	str	r2, [r3, #32]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr
 80070b4:	40012c00 	.word	0x40012c00

080070b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a1d      	ldr	r2, [pc, #116]	; (8007188 <TIM_OC3_SetConfig+0xd0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d10d      	bne.n	8007132 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800711c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a14      	ldr	r2, [pc, #80]	; (8007188 <TIM_OC3_SetConfig+0xd0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d113      	bne.n	8007162 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	4313      	orrs	r3, r2
 8007154:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	4313      	orrs	r3, r2
 8007160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	621a      	str	r2, [r3, #32]
}
 800717c:	bf00      	nop
 800717e:	371c      	adds	r7, #28
 8007180:	46bd      	mov	sp, r7
 8007182:	bc80      	pop	{r7}
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	40012c00 	.word	0x40012c00

0800718c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	031b      	lsls	r3, r3, #12
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a0f      	ldr	r2, [pc, #60]	; (8007224 <TIM_OC4_SetConfig+0x98>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d109      	bne.n	8007200 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	019b      	lsls	r3, r3, #6
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	621a      	str	r2, [r3, #32]
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr
 8007224:	40012c00 	.word	0x40012c00

08007228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	f023 0201 	bic.w	r2, r3, #1
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f023 030a 	bic.w	r3, r3, #10
 8007264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4313      	orrs	r3, r2
 800726c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	621a      	str	r2, [r3, #32]
}
 800727a:	bf00      	nop
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr

08007284 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f023 0210 	bic.w	r2, r3, #16
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	031b      	lsls	r3, r3, #12
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	621a      	str	r2, [r3, #32]
}
 80072d8:	bf00      	nop
 80072da:	371c      	adds	r7, #28
 80072dc:	46bd      	mov	sp, r7
 80072de:	bc80      	pop	{r7}
 80072e0:	4770      	bx	lr

080072e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b085      	sub	sp, #20
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4313      	orrs	r3, r2
 8007300:	f043 0307 	orr.w	r3, r3, #7
 8007304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	609a      	str	r2, [r3, #8]
}
 800730c:	bf00      	nop
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	bc80      	pop	{r7}
 8007314:	4770      	bx	lr

08007316 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007316:	b480      	push	{r7}
 8007318:	b087      	sub	sp, #28
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007330:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	021a      	lsls	r2, r3, #8
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	431a      	orrs	r2, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	4313      	orrs	r3, r2
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	609a      	str	r2, [r3, #8]
}
 800734a:	bf00      	nop
 800734c:	371c      	adds	r7, #28
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr

08007354 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f003 031f 	and.w	r3, r3, #31
 8007366:	2201      	movs	r2, #1
 8007368:	fa02 f303 	lsl.w	r3, r2, r3
 800736c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a1a      	ldr	r2, [r3, #32]
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	43db      	mvns	r3, r3
 8007376:	401a      	ands	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a1a      	ldr	r2, [r3, #32]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f003 031f 	and.w	r3, r3, #31
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	fa01 f303 	lsl.w	r3, r1, r3
 800738c:	431a      	orrs	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	621a      	str	r2, [r3, #32]
}
 8007392:	bf00      	nop
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	bc80      	pop	{r7}
 800739a:	4770      	bx	lr

0800739c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e046      	b.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a16      	ldr	r2, [pc, #88]	; (800744c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d00e      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007400:	d009      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a12      	ldr	r2, [pc, #72]	; (8007450 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d004      	beq.n	8007416 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a10      	ldr	r2, [pc, #64]	; (8007454 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d10c      	bne.n	8007430 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800741c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	4313      	orrs	r3, r2
 8007426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	bc80      	pop	{r7}
 800744a:	4770      	bx	lr
 800744c:	40012c00 	.word	0x40012c00
 8007450:	40000400 	.word	0x40000400
 8007454:	40000800 	.word	0x40000800

08007458 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007470:	2302      	movs	r3, #2
 8007472:	e03d      	b.n	80074f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	4313      	orrs	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr

080074fa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	bc80      	pop	{r7}
 800750a:	4770      	bx	lr

0800750c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	bc80      	pop	{r7}
 800751c:	4770      	bx	lr

0800751e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e042      	b.n	80075b6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	d106      	bne.n	800754a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7fc f9db 	bl	8003900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2224      	movs	r2, #36	; 0x24
 800754e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007560:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f82c 	bl	80075c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691a      	ldr	r2, [r3, #16]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007576:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	695a      	ldr	r2, [r3, #20]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007586:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007596:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2220      	movs	r2, #32
 80075a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80075fa:	f023 030c 	bic.w	r3, r3, #12
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	68b9      	ldr	r1, [r7, #8]
 8007604:	430b      	orrs	r3, r1
 8007606:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699a      	ldr	r2, [r3, #24]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a2c      	ldr	r2, [pc, #176]	; (80076d4 <UART_SetConfig+0x114>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d103      	bne.n	8007630 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007628:	f7fe fe58 	bl	80062dc <HAL_RCC_GetPCLK2Freq>
 800762c:	60f8      	str	r0, [r7, #12]
 800762e:	e002      	b.n	8007636 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007630:	f7fe fe40 	bl	80062b4 <HAL_RCC_GetPCLK1Freq>
 8007634:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4613      	mov	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	009a      	lsls	r2, r3, #2
 8007640:	441a      	add	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	fbb2 f3f3 	udiv	r3, r2, r3
 800764c:	4a22      	ldr	r2, [pc, #136]	; (80076d8 <UART_SetConfig+0x118>)
 800764e:	fba2 2303 	umull	r2, r3, r2, r3
 8007652:	095b      	lsrs	r3, r3, #5
 8007654:	0119      	lsls	r1, r3, #4
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009a      	lsls	r2, r3, #2
 8007660:	441a      	add	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	fbb2 f2f3 	udiv	r2, r2, r3
 800766c:	4b1a      	ldr	r3, [pc, #104]	; (80076d8 <UART_SetConfig+0x118>)
 800766e:	fba3 0302 	umull	r0, r3, r3, r2
 8007672:	095b      	lsrs	r3, r3, #5
 8007674:	2064      	movs	r0, #100	; 0x64
 8007676:	fb00 f303 	mul.w	r3, r0, r3
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	011b      	lsls	r3, r3, #4
 800767e:	3332      	adds	r3, #50	; 0x32
 8007680:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <UART_SetConfig+0x118>)
 8007682:	fba2 2303 	umull	r2, r3, r2, r3
 8007686:	095b      	lsrs	r3, r3, #5
 8007688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800768c:	4419      	add	r1, r3
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	009a      	lsls	r2, r3, #2
 8007698:	441a      	add	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80076a4:	4b0c      	ldr	r3, [pc, #48]	; (80076d8 <UART_SetConfig+0x118>)
 80076a6:	fba3 0302 	umull	r0, r3, r3, r2
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	2064      	movs	r0, #100	; 0x64
 80076ae:	fb00 f303 	mul.w	r3, r0, r3
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	3332      	adds	r3, #50	; 0x32
 80076b8:	4a07      	ldr	r2, [pc, #28]	; (80076d8 <UART_SetConfig+0x118>)
 80076ba:	fba2 2303 	umull	r2, r3, r2, r3
 80076be:	095b      	lsrs	r3, r3, #5
 80076c0:	f003 020f 	and.w	r2, r3, #15
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	440a      	add	r2, r1
 80076ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80076cc:	bf00      	nop
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	40013800 	.word	0x40013800
 80076d8:	51eb851f 	.word	0x51eb851f

080076dc <VL53L0X_GetVersion>:
#endif

/* Group PAL General Functions */

VL53L0X_Error VL53L0X_GetVersion(VL53L0X_Version_t *pVersion)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076e4:	2300      	movs	r3, #0
 80076e6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	pVersion->major = VL53L0X_IMPLEMENTATION_VER_MAJOR;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	711a      	strb	r2, [r3, #4]
	pVersion->minor = VL53L0X_IMPLEMENTATION_VER_MINOR;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	715a      	strb	r2, [r3, #5]
	pVersion->build = VL53L0X_IMPLEMENTATION_VER_SUB;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	719a      	strb	r2, [r3, #6]

	pVersion->revision = VL53L0X_IMPLEMENTATION_VER_REVISION;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f241 12da 	movw	r2, #4570	; 0x11da
 8007700:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007702:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	bc80      	pop	{r7}
 800770e:	4770      	bx	lr

08007710 <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f004 fb2d 	bl	800bd80 <VL53L0X_get_device_info>
 8007726:	4603      	mov	r3, r0
 8007728:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800772a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b084      	sub	sp, #16
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007740:	2300      	movs	r3, #0
 8007742:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f001 fc4d 	bl	8008fe6 <VL53L0X_get_offset_calibration_data_micro_meter>
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8007750:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007768:	2300      	movs	r3, #0
 800776a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	085b      	lsrs	r3, r3, #1
 8007770:	b2db      	uxtb	r3, r3
 8007772:	461a      	mov	r2, r3
 8007774:	218a      	movs	r1, #138	; 0x8a
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f004 fdae 	bl	800c2d8 <VL53L0X_WrByte>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8007780:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800778c:	b5b0      	push	{r4, r5, r7, lr}
 800778e:	b094      	sub	sp, #80	; 0x50
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007794:	2300      	movs	r3, #0
 8007796:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800779a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d107      	bne.n	80077b2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80077a2:	2200      	movs	r2, #0
 80077a4:	2188      	movs	r1, #136	; 0x88
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f004 fd96 	bl	800c2d8 <VL53L0X_WrByte>
 80077ac:	4603      	mov	r3, r0
 80077ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077c0:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80077ca:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a71      	ldr	r2, [pc, #452]	; (8007998 <VL53L0X_DataInit+0x20c>)
 80077d2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a70      	ldr	r2, [pc, #448]	; (800799c <VL53L0X_DataInit+0x210>)
 80077da:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80077e4:	f107 0308 	add.w	r3, r7, #8
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa5a 	bl	8007ca4 <VL53L0X_GetDeviceParameters>
 80077f0:	4603      	mov	r3, r0
 80077f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 80077f6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d112      	bne.n	8007824 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80077fe:	2300      	movs	r3, #0
 8007800:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8007802:	2300      	movs	r3, #0
 8007804:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f103 0410 	add.w	r4, r3, #16
 800780c:	f107 0508 	add.w	r5, r7, #8
 8007810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800781a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800781c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007820:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2264      	movs	r2, #100	; 0x64
 8007828:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007832:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800783c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007846:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007852:	2300      	movs	r3, #0
 8007854:	64bb      	str	r3, [r7, #72]	; 0x48
 8007856:	e014      	b.n	8007882 <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 8007858:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800785c:	2b00      	cmp	r3, #0
 800785e:	d114      	bne.n	800788a <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007862:	b29b      	uxth	r3, r3
 8007864:	2201      	movs	r2, #1
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fd4b 	bl	8008304 <VL53L0X_SetLimitCheckEnable>
 800786e:	4603      	mov	r3, r0
 8007870:	461a      	mov	r2, r3
 8007872:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007876:	4313      	orrs	r3, r2
 8007878:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800787c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800787e:	3301      	adds	r3, #1
 8007880:	64bb      	str	r3, [r7, #72]	; 0x48
 8007882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007884:	2b05      	cmp	r3, #5
 8007886:	dde7      	ble.n	8007858 <VL53L0X_DataInit+0xcc>
 8007888:	e000      	b.n	800788c <VL53L0X_DataInit+0x100>
		else
			break;
 800788a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800788c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007890:	2b00      	cmp	r3, #0
 8007892:	d107      	bne.n	80078a4 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007894:	2200      	movs	r2, #0
 8007896:	2102      	movs	r1, #2
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fd33 	bl	8008304 <VL53L0X_SetLimitCheckEnable>
 800789e:	4603      	mov	r3, r0
 80078a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80078a4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d107      	bne.n	80078bc <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80078ac:	2200      	movs	r2, #0
 80078ae:	2103      	movs	r1, #3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fd27 	bl	8008304 <VL53L0X_SetLimitCheckEnable>
 80078b6:	4603      	mov	r3, r0
 80078b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80078bc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d107      	bne.n	80078d4 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80078c4:	2200      	movs	r2, #0
 80078c6:	2104      	movs	r1, #4
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fd1b 	bl	8008304 <VL53L0X_SetLimitCheckEnable>
 80078ce:	4603      	mov	r3, r0
 80078d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80078d4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d107      	bne.n	80078ec <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80078dc:	2200      	movs	r2, #0
 80078de:	2105      	movs	r1, #5
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fd0f 	bl	8008304 <VL53L0X_SetLimitCheckEnable>
 80078e6:	4603      	mov	r3, r0
 80078e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80078ec:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d108      	bne.n	8007906 <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80078f4:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80078f8:	2100      	movs	r1, #0
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fdb0 	bl	8008460 <VL53L0X_SetLimitCheckValue>
 8007900:	4603      	mov	r3, r0
 8007902:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007906:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800790a:	2b00      	cmp	r3, #0
 800790c:	d108      	bne.n	8007920 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800790e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007912:	2101      	movs	r1, #1
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fda3 	bl	8008460 <VL53L0X_SetLimitCheckValue>
 800791a:	4603      	mov	r3, r0
 800791c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007920:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007924:	2b00      	cmp	r3, #0
 8007926:	d108      	bne.n	800793a <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007928:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800792c:	2102      	movs	r1, #2
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fd96 	bl	8008460 <VL53L0X_SetLimitCheckValue>
 8007934:	4603      	mov	r3, r0
 8007936:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800793a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800793e:	2b00      	cmp	r3, #0
 8007940:	d107      	bne.n	8007952 <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007942:	2200      	movs	r2, #0
 8007944:	2103      	movs	r1, #3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fd8a 	bl	8008460 <VL53L0X_SetLimitCheckValue>
 800794c:	4603      	mov	r3, r0
 800794e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007952:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10f      	bne.n	800797a <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	22ff      	movs	r2, #255	; 0xff
 800795e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007962:	22ff      	movs	r2, #255	; 0xff
 8007964:	2101      	movs	r1, #1
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f004 fcb6 	bl	800c2d8 <VL53L0X_WrByte>
 800796c:	4603      	mov	r3, r0
 800796e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800797a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800797e:	2b00      	cmp	r3, #0
 8007980:	d103      	bne.n	800798a <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800798a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800798e:	4618      	mov	r0, r3
 8007990:	3750      	adds	r7, #80	; 0x50
 8007992:	46bd      	mov	sp, r7
 8007994:	bdb0      	pop	{r4, r5, r7, pc}
 8007996:	bf00      	nop
 8007998:	00016b85 	.word	0x00016b85
 800799c:	000970a4 	.word	0x000970a4

080079a0 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80079a0:	b5b0      	push	{r4, r5, r7, lr}
 80079a2:	b09e      	sub	sp, #120	; 0x78
 80079a4:	af02      	add	r7, sp, #8
 80079a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079a8:	2300      	movs	r3, #0
 80079aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80079ae:	f107 031c 	add.w	r3, r7, #28
 80079b2:	2240      	movs	r2, #64	; 0x40
 80079b4:	2100      	movs	r1, #0
 80079b6:	4618      	mov	r0, r3
 80079b8:	f004 fd9e 	bl	800c4f8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80079c0:	2300      	movs	r3, #0
 80079c2:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80079d6:	2300      	movs	r3, #0
 80079d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80079dc:	2101      	movs	r1, #1
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f002 fa3e 	bl	8009e60 <VL53L0X_get_info_from_device>
 80079e4:	4603      	mov	r3, r0
 80079e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80079f0:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80079f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80079fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d80d      	bhi.n	8007a20 <VL53L0X_StaticInit+0x80>
 8007a04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d102      	bne.n	8007a12 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8007a0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a0e:	2b20      	cmp	r3, #32
 8007a10:	d806      	bhi.n	8007a20 <VL53L0X_StaticInit+0x80>
 8007a12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10e      	bne.n	8007a38 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8007a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a1c:	2b0c      	cmp	r3, #12
 8007a1e:	d90b      	bls.n	8007a38 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8007a20:	f107 0218 	add.w	r2, r7, #24
 8007a24:	f107 0314 	add.w	r3, r7, #20
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 fcd5 	bl	80093da <VL53L0X_perform_ref_spad_management>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007a36:	e009      	b.n	8007a4c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8007a38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 fed6 	bl	80097f2 <VL53L0X_set_reference_spads>
 8007a46:	4603      	mov	r3, r0
 8007a48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8007a4c:	4b94      	ldr	r3, [pc, #592]	; (8007ca0 <VL53L0X_StaticInit+0x300>)
 8007a4e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8007a50:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10f      	bne.n	8007a78 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8007a5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8007a62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d104      	bne.n	8007a74 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8007a70:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a72:	e001      	b.n	8007a78 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8007a74:	4b8a      	ldr	r3, [pc, #552]	; (8007ca0 <VL53L0X_StaticInit+0x300>)
 8007a76:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007a78:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8007a80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f003 fb0a 	bl	800b09c <VL53L0X_load_tuning_settings>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8007a8e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10a      	bne.n	8007aac <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8007a96:	2300      	movs	r3, #0
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	2304      	movs	r3, #4
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 f8cf 	bl	8008c44 <VL53L0X_SetGpioConfig>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007aac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d121      	bne.n	8007af8 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	21ff      	movs	r1, #255	; 0xff
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f004 fc0d 	bl	800c2d8 <VL53L0X_WrByte>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8007ac4:	f107 031a 	add.w	r3, r7, #26
 8007ac8:	461a      	mov	r2, r3
 8007aca:	2184      	movs	r1, #132	; 0x84
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f004 fb8f 	bl	800c1f0 <VL53L0X_RdWord>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007ada:	4313      	orrs	r3, r2
 8007adc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	21ff      	movs	r1, #255	; 0xff
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f004 fbf7 	bl	800c2d8 <VL53L0X_WrByte>
 8007aea:	4603      	mov	r3, r0
 8007aec:	461a      	mov	r2, r3
 8007aee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007af2:	4313      	orrs	r3, r2
 8007af4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007af8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d105      	bne.n	8007b0c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8007b00:	8b7b      	ldrh	r3, [r7, #26]
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	461a      	mov	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8007b0c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d108      	bne.n	8007b26 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007b14:	f107 031c 	add.w	r3, r7, #28
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f8c2 	bl	8007ca4 <VL53L0X_GetDeviceParameters>
 8007b20:	4603      	mov	r3, r0
 8007b22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8007b26:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d110      	bne.n	8007b50 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8007b2e:	f107 0319 	add.w	r3, r7, #25
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f981 	bl	8007e3c <VL53L0X_GetFractionEnable>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007b40:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d103      	bne.n	8007b50 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007b48:	7e7a      	ldrb	r2, [r7, #25]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007b50:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10e      	bne.n	8007b76 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f103 0410 	add.w	r4, r3, #16
 8007b5e:	f107 051c 	add.w	r5, r7, #28
 8007b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8007b76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d111      	bne.n	8007ba2 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8007b7e:	f107 0319 	add.w	r3, r7, #25
 8007b82:	461a      	mov	r2, r3
 8007b84:	2101      	movs	r1, #1
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f004 faab 	bl	800c0e2 <VL53L0X_RdByte>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8007b92:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d103      	bne.n	8007ba2 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8007b9a:	7e7a      	ldrb	r2, [r7, #25]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8007ba2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d107      	bne.n	8007bba <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007baa:	2200      	movs	r2, #0
 8007bac:	2100      	movs	r1, #0
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f9a0 	bl	8007ef4 <VL53L0X_SetSequenceStepEnable>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007bba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d107      	bne.n	8007bd2 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2102      	movs	r1, #2
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f994 	bl	8007ef4 <VL53L0X_SetSequenceStepEnable>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8007bd2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d103      	bne.n	8007be2 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2203      	movs	r2, #3
 8007bde:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007be2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d109      	bne.n	8007bfe <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007bea:	f107 0313 	add.w	r3, r7, #19
 8007bee:	461a      	mov	r2, r3
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f967 	bl	8007ec6 <VL53L0X_GetVcselPulsePeriod>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007bfe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d103      	bne.n	8007c0e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007c06:	7cfa      	ldrb	r2, [r7, #19]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007c0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d109      	bne.n	8007c2a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007c16:	f107 0313 	add.w	r3, r7, #19
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f951 	bl	8007ec6 <VL53L0X_GetVcselPulsePeriod>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c2a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d103      	bne.n	8007c3a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007c32:	7cfa      	ldrb	r2, [r7, #19]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007c3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d109      	bne.n	8007c56 <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 8007c42:	f107 030c 	add.w	r3, r7, #12
 8007c46:	461a      	mov	r2, r3
 8007c48:	2103      	movs	r1, #3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fa9e 	bl	800818c <VL53L0X_GetSequenceStepTimeout>
 8007c50:	4603      	mov	r3, r0
 8007c52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c56:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d103      	bne.n	8007c66 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007c66:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d109      	bne.n	8007c82 <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 8007c6e:	f107 030c 	add.w	r3, r7, #12
 8007c72:	461a      	mov	r2, r3
 8007c74:	2104      	movs	r1, #4
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fa88 	bl	800818c <VL53L0X_GetSequenceStepTimeout>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c82:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d103      	bne.n	8007c92 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c92:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3770      	adds	r7, #112	; 0x70
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000014 	.word	0x20000014

08007ca4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f8ae 	bl	8007e18 <VL53L0X_GetDeviceMode>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d107      	bne.n	8007cd8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa9c 	bl	800820c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8007cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d102      	bne.n	8007ce6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8007ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d107      	bne.n	8007cfe <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	3310      	adds	r3, #16
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fad1 	bl	800829c <VL53L0X_GetXTalkCompensationRateMegaCps>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8007cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d107      	bne.n	8007d16 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	3314      	adds	r3, #20
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7ff fd12 	bl	8007736 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8007d12:	4603      	mov	r3, r0
 8007d14:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8007d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d134      	bne.n	8007d88 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60bb      	str	r3, [r7, #8]
 8007d22:	e02a      	b.n	8007d7a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d12a      	bne.n	8007d82 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	b299      	uxth	r1, r3
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	3308      	adds	r3, #8
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	4413      	add	r3, r2
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fbf0 	bl	8008524 <VL53L0X_GetLimitCheckValue>
 8007d44:	4603      	mov	r3, r0
 8007d46:	461a      	mov	r2, r3
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d117      	bne.n	8007d86 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	b299      	uxth	r1, r3
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	3318      	adds	r3, #24
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	4413      	add	r3, r2
 8007d62:	461a      	mov	r2, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fb59 	bl	800841c <VL53L0X_GetLimitCheckEnable>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	3301      	adds	r3, #1
 8007d78:	60bb      	str	r3, [r7, #8]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2b05      	cmp	r3, #5
 8007d7e:	ddd1      	ble.n	8007d24 <VL53L0X_GetDeviceParameters+0x80>
 8007d80:	e002      	b.n	8007d88 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8007d82:	bf00      	nop
 8007d84:	e000      	b.n	8007d88 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8007d86:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d107      	bne.n	8007da0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	333c      	adds	r3, #60	; 0x3c
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fc52 	bl	8008640 <VL53L0X_GetWrapAroundCheckEnable>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8007da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d107      	bne.n	8007db8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	3304      	adds	r3, #4
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f876 	bl	8007ea0 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	460b      	mov	r3, r1
 8007dce:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	2b15      	cmp	r3, #21
 8007dd8:	bf8c      	ite	hi
 8007dda:	2201      	movhi	r2, #1
 8007ddc:	2200      	movls	r2, #0
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d10e      	bne.n	8007e02 <VL53L0X_SetDeviceMode+0x3e>
 8007de4:	2201      	movs	r2, #1
 8007de6:	409a      	lsls	r2, r3
 8007de8:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <VL53L0X_SetDeviceMode+0x50>)
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bf14      	ite	ne
 8007df0:	2301      	movne	r3, #1
 8007df2:	2300      	moveq	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	78fa      	ldrb	r2, [r7, #3]
 8007dfe:	741a      	strb	r2, [r3, #16]
		break;
 8007e00:	e001      	b.n	8007e06 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007e02:	23f8      	movs	r3, #248	; 0xf8
 8007e04:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bc80      	pop	{r7}
 8007e12:	4770      	bx	lr
 8007e14:	0030000b 	.word	0x0030000b

08007e18 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e22:	2300      	movs	r3, #0
 8007e24:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	7c1a      	ldrb	r2, [r3, #16]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bc80      	pop	{r7}
 8007e3a:	4770      	bx	lr

08007e3c <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e46:	2300      	movs	r3, #0
 8007e48:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	2109      	movs	r1, #9
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f004 f947 	bl	800c0e2 <VL53L0X_RdByte>
 8007e54:	4603      	mov	r3, r0
 8007e56:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d106      	bne.n	8007e6e <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e84:	2300      	movs	r3, #0
 8007e86:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f002 ff74 	bl	800ad78 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8007e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f003 f841 	bl	800af38 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8007eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8007ed8:	7afb      	ldrb	r3, [r7, #11]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	4619      	mov	r1, r3
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f002 ff13 	bl	800ad0a <VL53L0X_get_vcsel_pulse_period>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007ee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3718      	adds	r7, #24
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	70fb      	strb	r3, [r7, #3]
 8007f00:	4613      	mov	r3, r2
 8007f02:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f04:	2300      	movs	r3, #0
 8007f06:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007f10:	f107 030f 	add.w	r3, r7, #15
 8007f14:	461a      	mov	r2, r3
 8007f16:	2101      	movs	r1, #1
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f004 f8e2 	bl	800c0e2 <VL53L0X_RdByte>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8007f26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d15a      	bne.n	8007fe4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8007f2e:	78bb      	ldrb	r3, [r7, #2]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d12b      	bne.n	8007f8c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	d825      	bhi.n	8007f86 <VL53L0X_SetSequenceStepEnable+0x92>
 8007f3a:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f40:	08007f55 	.word	0x08007f55
 8007f44:	08007f5f 	.word	0x08007f5f
 8007f48:	08007f69 	.word	0x08007f69
 8007f4c:	08007f73 	.word	0x08007f73
 8007f50:	08007f7d 	.word	0x08007f7d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8007f54:	7dbb      	ldrb	r3, [r7, #22]
 8007f56:	f043 0310 	orr.w	r3, r3, #16
 8007f5a:	75bb      	strb	r3, [r7, #22]
				break;
 8007f5c:	e043      	b.n	8007fe6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007f5e:	7dbb      	ldrb	r3, [r7, #22]
 8007f60:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007f64:	75bb      	strb	r3, [r7, #22]
				break;
 8007f66:	e03e      	b.n	8007fe6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007f68:	7dbb      	ldrb	r3, [r7, #22]
 8007f6a:	f043 0304 	orr.w	r3, r3, #4
 8007f6e:	75bb      	strb	r3, [r7, #22]
				break;
 8007f70:	e039      	b.n	8007fe6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8007f72:	7dbb      	ldrb	r3, [r7, #22]
 8007f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f78:	75bb      	strb	r3, [r7, #22]
				break;
 8007f7a:	e034      	b.n	8007fe6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007f7c:	7dbb      	ldrb	r3, [r7, #22]
 8007f7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f82:	75bb      	strb	r3, [r7, #22]
				break;
 8007f84:	e02f      	b.n	8007fe6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f86:	23fc      	movs	r3, #252	; 0xfc
 8007f88:	75fb      	strb	r3, [r7, #23]
 8007f8a:	e02c      	b.n	8007fe6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007f8c:	78fb      	ldrb	r3, [r7, #3]
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d825      	bhi.n	8007fde <VL53L0X_SetSequenceStepEnable+0xea>
 8007f92:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08007fad 	.word	0x08007fad
 8007f9c:	08007fb7 	.word	0x08007fb7
 8007fa0:	08007fc1 	.word	0x08007fc1
 8007fa4:	08007fcb 	.word	0x08007fcb
 8007fa8:	08007fd5 	.word	0x08007fd5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007fac:	7dbb      	ldrb	r3, [r7, #22]
 8007fae:	f023 0310 	bic.w	r3, r3, #16
 8007fb2:	75bb      	strb	r3, [r7, #22]
				break;
 8007fb4:	e017      	b.n	8007fe6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007fb6:	7dbb      	ldrb	r3, [r7, #22]
 8007fb8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007fbc:	75bb      	strb	r3, [r7, #22]
				break;
 8007fbe:	e012      	b.n	8007fe6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007fc0:	7dbb      	ldrb	r3, [r7, #22]
 8007fc2:	f023 0304 	bic.w	r3, r3, #4
 8007fc6:	75bb      	strb	r3, [r7, #22]
				break;
 8007fc8:	e00d      	b.n	8007fe6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007fca:	7dbb      	ldrb	r3, [r7, #22]
 8007fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd0:	75bb      	strb	r3, [r7, #22]
				break;
 8007fd2:	e008      	b.n	8007fe6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007fd4:	7dbb      	ldrb	r3, [r7, #22]
 8007fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fda:	75bb      	strb	r3, [r7, #22]
				break;
 8007fdc:	e003      	b.n	8007fe6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007fde:	23fc      	movs	r3, #252	; 0xfc
 8007fe0:	75fb      	strb	r3, [r7, #23]
 8007fe2:	e000      	b.n	8007fe6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007fe4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	7dba      	ldrb	r2, [r7, #22]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d01e      	beq.n	800802c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d107      	bne.n	8008006 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8007ff6:	7dbb      	ldrb	r3, [r7, #22]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f004 f96b 	bl	800c2d8 <VL53L0X_WrByte>
 8008002:	4603      	mov	r3, r0
 8008004:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8008006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d103      	bne.n	8008016 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	7dba      	ldrb	r2, [r7, #22]
 8008012:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8008016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d106      	bne.n	800802c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008024:	6939      	ldr	r1, [r7, #16]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff ff27 	bl	8007e7a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800802c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3718      	adds	r7, #24
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8008038:	b480      	push	{r7}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	607b      	str	r3, [r7, #4]
 8008042:	460b      	mov	r3, r1
 8008044:	72fb      	strb	r3, [r7, #11]
 8008046:	4613      	mov	r3, r2
 8008048:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800804a:	2300      	movs	r3, #0
 800804c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8008054:	7afb      	ldrb	r3, [r7, #11]
 8008056:	2b04      	cmp	r3, #4
 8008058:	d836      	bhi.n	80080c8 <sequence_step_enabled+0x90>
 800805a:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <sequence_step_enabled+0x28>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	08008075 	.word	0x08008075
 8008064:	08008087 	.word	0x08008087
 8008068:	08008099 	.word	0x08008099
 800806c:	080080ab 	.word	0x080080ab
 8008070:	080080bd 	.word	0x080080bd
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8008074:	7abb      	ldrb	r3, [r7, #10]
 8008076:	111b      	asrs	r3, r3, #4
 8008078:	b2db      	uxtb	r3, r3
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	b2da      	uxtb	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	701a      	strb	r2, [r3, #0]
		break;
 8008084:	e022      	b.n	80080cc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8008086:	7abb      	ldrb	r3, [r7, #10]
 8008088:	10db      	asrs	r3, r3, #3
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	b2da      	uxtb	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	701a      	strb	r2, [r3, #0]
		break;
 8008096:	e019      	b.n	80080cc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8008098:	7abb      	ldrb	r3, [r7, #10]
 800809a:	109b      	asrs	r3, r3, #2
 800809c:	b2db      	uxtb	r3, r3
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	701a      	strb	r2, [r3, #0]
		break;
 80080a8:	e010      	b.n	80080cc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80080aa:	7abb      	ldrb	r3, [r7, #10]
 80080ac:	119b      	asrs	r3, r3, #6
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	701a      	strb	r2, [r3, #0]
		break;
 80080ba:	e007      	b.n	80080cc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80080bc:	7abb      	ldrb	r3, [r7, #10]
 80080be:	09db      	lsrs	r3, r3, #7
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	701a      	strb	r2, [r3, #0]
		break;
 80080c6:	e001      	b.n	80080cc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80080c8:	23fc      	movs	r3, #252	; 0xfc
 80080ca:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80080cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	371c      	adds	r7, #28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop

080080dc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80080ee:	f107 030e 	add.w	r3, r7, #14
 80080f2:	461a      	mov	r2, r3
 80080f4:	2101      	movs	r1, #1
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f003 fff3 	bl	800c0e2 <VL53L0X_RdByte>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8008100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d107      	bne.n	8008118 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8008108:	7bba      	ldrb	r2, [r7, #14]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2100      	movs	r1, #0
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7ff ff92 	bl	8008038 <sequence_step_enabled>
 8008114:	4603      	mov	r3, r0
 8008116:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d108      	bne.n	8008132 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8008120:	7bba      	ldrb	r2, [r7, #14]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	3302      	adds	r3, #2
 8008126:	2101      	movs	r1, #1
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7ff ff85 	bl	8008038 <sequence_step_enabled>
 800812e:	4603      	mov	r3, r0
 8008130:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d108      	bne.n	800814c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800813a:	7bba      	ldrb	r2, [r7, #14]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	3301      	adds	r3, #1
 8008140:	2102      	movs	r1, #2
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7ff ff78 	bl	8008038 <sequence_step_enabled>
 8008148:	4603      	mov	r3, r0
 800814a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800814c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d108      	bne.n	8008166 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8008154:	7bba      	ldrb	r2, [r7, #14]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	3303      	adds	r3, #3
 800815a:	2103      	movs	r1, #3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7ff ff6b 	bl	8008038 <sequence_step_enabled>
 8008162:	4603      	mov	r3, r0
 8008164:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d108      	bne.n	8008180 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800816e:	7bba      	ldrb	r2, [r7, #14]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	3304      	adds	r3, #4
 8008174:	2104      	movs	r1, #4
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7ff ff5e 	bl	8008038 <sequence_step_enabled>
 800817c:	4603      	mov	r3, r0
 800817e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008180:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	460b      	mov	r3, r1
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800819a:	2300      	movs	r3, #0
 800819c:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 800819e:	2300      	movs	r3, #0
 80081a0:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 80081a2:	2300      	movs	r3, #0
 80081a4:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 80081a6:	f107 0210 	add.w	r2, r7, #16
 80081aa:	7afb      	ldrb	r3, [r7, #11]
 80081ac:	4619      	mov	r1, r3
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f002 fbd6 	bl	800a960 <get_sequence_step_timeout>
 80081b4:	4603      	mov	r3, r0
 80081b6:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 80081b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d11c      	bne.n	80081fa <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	4a11      	ldr	r2, [pc, #68]	; (8008208 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 80081c4:	fba2 2303 	umull	r2, r3, r2, r3
 80081c8:	099b      	lsrs	r3, r3, #6
 80081ca:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80081d4:	fb01 f303 	mul.w	r3, r1, r3
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	4613      	mov	r3, r2
 80081e4:	041b      	lsls	r3, r3, #16
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80081ec:	4a06      	ldr	r2, [pc, #24]	; (8008208 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 80081ee:	fba2 2303 	umull	r2, r3, r2, r3
 80081f2:	099b      	lsrs	r3, r3, #6
 80081f4:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3720      	adds	r7, #32
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	10624dd3 	.word	0x10624dd3

0800820c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008216:	2300      	movs	r3, #0
 8008218:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800821a:	f107 030c 	add.w	r3, r7, #12
 800821e:	461a      	mov	r2, r3
 8008220:	21f8      	movs	r1, #248	; 0xf8
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f003 ffe4 	bl	800c1f0 <VL53L0X_RdWord>
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800822c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d108      	bne.n	8008246 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8008234:	f107 0308 	add.w	r3, r7, #8
 8008238:	461a      	mov	r2, r3
 800823a:	2104      	movs	r1, #4
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f004 f80f 	bl	800c260 <VL53L0X_RdDWord>
 8008242:	4603      	mov	r3, r0
 8008244:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10c      	bne.n	8008268 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800824e:	89bb      	ldrh	r3, [r7, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	89ba      	ldrh	r2, [r7, #12]
 8008258:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008268:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800827e:	2300      	movs	r3, #0
 8008280:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	7f1b      	ldrb	r3, [r3, #28]
 8008286:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	7bba      	ldrb	r2, [r7, #14]
 800828c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800828e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	bc80      	pop	{r7}
 800829a:	4770      	bx	lr

0800829c <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80082aa:	f107 030e 	add.w	r3, r7, #14
 80082ae:	461a      	mov	r2, r3
 80082b0:	2120      	movs	r1, #32
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f003 ff9c 	bl	800c1f0 <VL53L0X_RdWord>
 80082b8:	4603      	mov	r3, r0
 80082ba:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80082bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d118      	bne.n	80082f6 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80082c4:	89fb      	ldrh	r3, [r7, #14]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d109      	bne.n	80082de <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	771a      	strb	r2, [r3, #28]
 80082dc:	e00b      	b.n	80082f6 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80082de:	89fb      	ldrh	r3, [r7, #14]
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80082f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	807b      	strh	r3, [r7, #2]
 8008310:	4613      	mov	r3, r2
 8008312:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008314:	2300      	movs	r3, #0
 8008316:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008324:	887b      	ldrh	r3, [r7, #2]
 8008326:	2b05      	cmp	r3, #5
 8008328:	d902      	bls.n	8008330 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800832a:	23fc      	movs	r3, #252	; 0xfc
 800832c:	75fb      	strb	r3, [r7, #23]
 800832e:	e05b      	b.n	80083e8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8008330:	787b      	ldrb	r3, [r7, #1]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d106      	bne.n	8008344 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800833e:	2301      	movs	r3, #1
 8008340:	73bb      	strb	r3, [r7, #14]
 8008342:	e00a      	b.n	800835a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008344:	887b      	ldrh	r3, [r7, #2]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	330c      	adds	r3, #12
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8008356:	2301      	movs	r3, #1
 8008358:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800835a:	887b      	ldrh	r3, [r7, #2]
 800835c:	2b05      	cmp	r3, #5
 800835e:	d841      	bhi.n	80083e4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8008360:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <VL53L0X_SetLimitCheckEnable+0x64>)
 8008362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008366:	bf00      	nop
 8008368:	08008381 	.word	0x08008381
 800836c:	0800838b 	.word	0x0800838b
 8008370:	080083a1 	.word	0x080083a1
 8008374:	080083ab 	.word	0x080083ab
 8008378:	080083b5 	.word	0x080083b5
 800837c:	080083cd 	.word	0x080083cd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	7bfa      	ldrb	r2, [r7, #15]
 8008384:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8008388:	e02e      	b.n	80083e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800838e:	b29b      	uxth	r3, r3
 8008390:	461a      	mov	r2, r3
 8008392:	2144      	movs	r1, #68	; 0x44
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f003 ffc3 	bl	800c320 <VL53L0X_WrWord>
 800839a:	4603      	mov	r3, r0
 800839c:	75fb      	strb	r3, [r7, #23]

			break;
 800839e:	e023      	b.n	80083e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	7bfa      	ldrb	r2, [r7, #15]
 80083a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80083a8:	e01e      	b.n	80083e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	7bfa      	ldrb	r2, [r7, #15]
 80083ae:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80083b2:	e019      	b.n	80083e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80083ba:	7b7b      	ldrb	r3, [r7, #13]
 80083bc:	22fe      	movs	r2, #254	; 0xfe
 80083be:	2160      	movs	r1, #96	; 0x60
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f003 ffd7 	bl	800c374 <VL53L0X_UpdateByte>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80083ca:	e00d      	b.n	80083e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80083d2:	7b7b      	ldrb	r3, [r7, #13]
 80083d4:	22ef      	movs	r2, #239	; 0xef
 80083d6:	2160      	movs	r1, #96	; 0x60
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f003 ffcb 	bl	800c374 <VL53L0X_UpdateByte>
 80083de:	4603      	mov	r3, r0
 80083e0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80083e2:	e001      	b.n	80083e8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80083e4:	23fc      	movs	r3, #252	; 0xfc
 80083e6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80083e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10f      	bne.n	8008410 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80083f0:	787b      	ldrb	r3, [r7, #1]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d106      	bne.n	8008404 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80083f6:	887b      	ldrh	r3, [r7, #2]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	4413      	add	r3, r2
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008402:	e005      	b.n	8008410 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008404:	887b      	ldrh	r3, [r7, #2]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	4413      	add	r3, r2
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008410:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	460b      	mov	r3, r1
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800842a:	2300      	movs	r3, #0
 800842c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800842e:	897b      	ldrh	r3, [r7, #10]
 8008430:	2b05      	cmp	r3, #5
 8008432:	d905      	bls.n	8008440 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008434:	23fc      	movs	r3, #252	; 0xfc
 8008436:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	701a      	strb	r2, [r3, #0]
 800843e:	e008      	b.n	8008452 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008440:	897b      	ldrh	r3, [r7, #10]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	4413      	add	r3, r2
 8008446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800844a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	7dba      	ldrb	r2, [r7, #22]
 8008450:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008452:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008456:	4618      	mov	r0, r3
 8008458:	371c      	adds	r7, #28
 800845a:	46bd      	mov	sp, r7
 800845c:	bc80      	pop	{r7}
 800845e:	4770      	bx	lr

08008460 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	460b      	mov	r3, r1
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800846e:	2300      	movs	r3, #0
 8008470:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8008472:	897b      	ldrh	r3, [r7, #10]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800847c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800847e:	7dbb      	ldrb	r3, [r7, #22]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d107      	bne.n	8008494 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008484:	897b      	ldrh	r3, [r7, #10]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	330c      	adds	r3, #12
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	605a      	str	r2, [r3, #4]
 8008492:	e040      	b.n	8008516 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8008494:	897b      	ldrh	r3, [r7, #10]
 8008496:	2b05      	cmp	r3, #5
 8008498:	d830      	bhi.n	80084fc <VL53L0X_SetLimitCheckValue+0x9c>
 800849a:	a201      	add	r2, pc, #4	; (adr r2, 80084a0 <VL53L0X_SetLimitCheckValue+0x40>)
 800849c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a0:	080084b9 	.word	0x080084b9
 80084a4:	080084c1 	.word	0x080084c1
 80084a8:	080084d7 	.word	0x080084d7
 80084ac:	080084df 	.word	0x080084df
 80084b0:	080084e7 	.word	0x080084e7
 80084b4:	080084e7 	.word	0x080084e7

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80084be:	e01f      	b.n	8008500 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	461a      	mov	r2, r3
 80084c8:	2144      	movs	r1, #68	; 0x44
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f003 ff28 	bl	800c320 <VL53L0X_WrWord>
 80084d0:	4603      	mov	r3, r0
 80084d2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80084d4:	e014      	b.n	8008500 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80084dc:	e010      	b.n	8008500 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80084e4:	e00c      	b.n	8008500 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	461a      	mov	r2, r3
 80084ee:	2164      	movs	r1, #100	; 0x64
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f003 ff15 	bl	800c320 <VL53L0X_WrWord>
 80084f6:	4603      	mov	r3, r0
 80084f8:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80084fa:	e001      	b.n	8008500 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80084fc:	23fc      	movs	r3, #252	; 0xfc
 80084fe:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008500:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d106      	bne.n	8008516 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008508:	897b      	ldrh	r3, [r7, #10]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	330c      	adds	r3, #12
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008516:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop

08008524 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	460b      	mov	r3, r1
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008532:	2300      	movs	r3, #0
 8008534:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800853a:	897b      	ldrh	r3, [r7, #10]
 800853c:	2b05      	cmp	r3, #5
 800853e:	d847      	bhi.n	80085d0 <VL53L0X_GetLimitCheckValue+0xac>
 8008540:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <VL53L0X_GetLimitCheckValue+0x24>)
 8008542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008546:	bf00      	nop
 8008548:	08008561 	.word	0x08008561
 800854c:	0800856d 	.word	0x0800856d
 8008550:	08008593 	.word	0x08008593
 8008554:	0800859f 	.word	0x0800859f
 8008558:	080085ab 	.word	0x080085ab
 800855c:	080085ab 	.word	0x080085ab

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008564:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	77bb      	strb	r3, [r7, #30]
		break;
 800856a:	e033      	b.n	80085d4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800856c:	f107 0316 	add.w	r3, r7, #22
 8008570:	461a      	mov	r2, r3
 8008572:	2144      	movs	r1, #68	; 0x44
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f003 fe3b 	bl	800c1f0 <VL53L0X_RdWord>
 800857a:	4603      	mov	r3, r0
 800857c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800857e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d102      	bne.n	800858c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008586:	8afb      	ldrh	r3, [r7, #22]
 8008588:	025b      	lsls	r3, r3, #9
 800858a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800858c:	2301      	movs	r3, #1
 800858e:	77bb      	strb	r3, [r7, #30]
		break;
 8008590:	e020      	b.n	80085d4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008596:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	77bb      	strb	r3, [r7, #30]
		break;
 800859c:	e01a      	b.n	80085d4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80085a4:	2300      	movs	r3, #0
 80085a6:	77bb      	strb	r3, [r7, #30]
		break;
 80085a8:	e014      	b.n	80085d4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80085aa:	f107 0316 	add.w	r3, r7, #22
 80085ae:	461a      	mov	r2, r3
 80085b0:	2164      	movs	r1, #100	; 0x64
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f003 fe1c 	bl	800c1f0 <VL53L0X_RdWord>
 80085b8:	4603      	mov	r3, r0
 80085ba:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80085bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d102      	bne.n	80085ca <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80085c4:	8afb      	ldrh	r3, [r7, #22]
 80085c6:	025b      	lsls	r3, r3, #9
 80085c8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	77bb      	strb	r3, [r7, #30]
		break;
 80085ce:	e001      	b.n	80085d4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80085d0:	23fc      	movs	r3, #252	; 0xfc
 80085d2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80085d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d12a      	bne.n	8008632 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80085dc:	7fbb      	ldrb	r3, [r7, #30]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d124      	bne.n	800862c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d110      	bne.n	800860a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80085e8:	897b      	ldrh	r3, [r7, #10]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	330c      	adds	r3, #12
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80085fc:	897b      	ldrh	r3, [r7, #10]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4413      	add	r3, r2
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008608:	e013      	b.n	8008632 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008610:	897b      	ldrh	r3, [r7, #10]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	330c      	adds	r3, #12
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800861e:	897b      	ldrh	r3, [r7, #10]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4413      	add	r3, r2
 8008624:	2201      	movs	r2, #1
 8008626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800862a:	e002      	b.n	8008632 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008632:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008636:	4618      	mov	r0, r3
 8008638:	3720      	adds	r7, #32
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop

08008640 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800864a:	2300      	movs	r3, #0
 800864c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800864e:	f107 030e 	add.w	r3, r7, #14
 8008652:	461a      	mov	r2, r3
 8008654:	2101      	movs	r1, #1
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f003 fd43 	bl	800c0e2 <VL53L0X_RdByte>
 800865c:	4603      	mov	r3, r0
 800865e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10e      	bne.n	8008686 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008668:	7bba      	ldrb	r2, [r7, #14]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	b25b      	sxtb	r3, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	da03      	bge.n	8008680 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2201      	movs	r2, #1
 800867c:	701a      	strb	r2, [r3, #0]
 800867e:	e002      	b.n	8008686 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2200      	movs	r2, #0
 8008684:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d104      	bne.n	8008698 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	781a      	ldrb	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008698:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80086b0:	f107 030e 	add.w	r3, r7, #14
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff fbae 	bl	8007e18 <VL53L0X_GetDeviceMode>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80086c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d107      	bne.n	80086d8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d104      	bne.n	80086d8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f898 	bl	8008804 <VL53L0X_StartMeasurement>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80086d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f001 fb08 	bl	8009cf6 <VL53L0X_measurement_poll_for_completion>
 80086e6:	4603      	mov	r3, r0
 80086e8:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80086ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d106      	bne.n	8008700 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d103      	bne.n	8008700 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2203      	movs	r2, #3
 80086fc:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8008700:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008718:	2300      	movs	r3, #0
 800871a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800871c:	2301      	movs	r3, #1
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	68b9      	ldr	r1, [r7, #8]
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f001 faaa 	bl	8009c7c <VL53L0X_perform_ref_calibration>
 8008728:	4603      	mov	r3, r0
 800872a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800872c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008744:	2300      	movs	r3, #0
 8008746:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800874e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8008750:	7dbb      	ldrb	r3, [r7, #22]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d005      	beq.n	8008762 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8008756:	7dbb      	ldrb	r3, [r7, #22]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d002      	beq.n	8008762 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800875c:	7dbb      	ldrb	r3, [r7, #22]
 800875e:	2b03      	cmp	r3, #3
 8008760:	d147      	bne.n	80087f2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8008762:	f107 030c 	add.w	r3, r7, #12
 8008766:	f107 0210 	add.w	r2, r7, #16
 800876a:	2101      	movs	r1, #1
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fb8d 	bl	8008e8c <VL53L0X_GetInterruptThresholds>
 8008772:	4603      	mov	r3, r0
 8008774:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800877c:	d803      	bhi.n	8008786 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800877e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008780:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008784:	d935      	bls.n	80087f2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8008786:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d131      	bne.n	80087f2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800878e:	78fb      	ldrb	r3, [r7, #3]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d006      	beq.n	80087a2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8008794:	491a      	ldr	r1, [pc, #104]	; (8008800 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f002 fc80 	bl	800b09c <VL53L0X_load_tuning_settings>
 800879c:	4603      	mov	r3, r0
 800879e:	75fb      	strb	r3, [r7, #23]
 80087a0:	e027      	b.n	80087f2 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80087a2:	2204      	movs	r2, #4
 80087a4:	21ff      	movs	r1, #255	; 0xff
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f003 fd96 	bl	800c2d8 <VL53L0X_WrByte>
 80087ac:	4603      	mov	r3, r0
 80087ae:	461a      	mov	r2, r3
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80087b6:	2200      	movs	r2, #0
 80087b8:	2170      	movs	r1, #112	; 0x70
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f003 fd8c 	bl	800c2d8 <VL53L0X_WrByte>
 80087c0:	4603      	mov	r3, r0
 80087c2:	461a      	mov	r2, r3
 80087c4:	7dfb      	ldrb	r3, [r7, #23]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80087ca:	2200      	movs	r2, #0
 80087cc:	21ff      	movs	r1, #255	; 0xff
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f003 fd82 	bl	800c2d8 <VL53L0X_WrByte>
 80087d4:	4603      	mov	r3, r0
 80087d6:	461a      	mov	r2, r3
 80087d8:	7dfb      	ldrb	r3, [r7, #23]
 80087da:	4313      	orrs	r3, r2
 80087dc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80087de:	2200      	movs	r2, #0
 80087e0:	2180      	movs	r1, #128	; 0x80
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f003 fd78 	bl	800c2d8 <VL53L0X_WrByte>
 80087e8:	4603      	mov	r3, r0
 80087ea:	461a      	mov	r2, r3
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80087f2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	20000108 	.word	0x20000108

08008804 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800880c:	2300      	movs	r3, #0
 800880e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8008810:	2301      	movs	r3, #1
 8008812:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008814:	f107 030e 	add.w	r3, r7, #14
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff fafc 	bl	8007e18 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b03      	cmp	r3, #3
 8008824:	d052      	beq.n	80088cc <VL53L0X_StartMeasurement+0xc8>
 8008826:	2b03      	cmp	r3, #3
 8008828:	dc6a      	bgt.n	8008900 <VL53L0X_StartMeasurement+0xfc>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <VL53L0X_StartMeasurement+0x30>
 800882e:	2b01      	cmp	r3, #1
 8008830:	d032      	beq.n	8008898 <VL53L0X_StartMeasurement+0x94>
 8008832:	e065      	b.n	8008900 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8008834:	2201      	movs	r2, #1
 8008836:	2100      	movs	r1, #0
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f003 fd4d 	bl	800c2d8 <VL53L0X_WrByte>
 800883e:	4603      	mov	r3, r0
 8008840:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8008846:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d15b      	bne.n	8008906 <VL53L0X_StartMeasurement+0x102>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d008      	beq.n	800886a <VL53L0X_StartMeasurement+0x66>
					Status = VL53L0X_RdByte(Dev,
 8008858:	f107 030d 	add.w	r3, r7, #13
 800885c:	461a      	mov	r2, r3
 800885e:	2100      	movs	r1, #0
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f003 fc3e 	bl	800c0e2 <VL53L0X_RdByte>
 8008866:	4603      	mov	r3, r0
 8008868:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	3301      	adds	r3, #1
 800886e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8008870:	7b7a      	ldrb	r2, [r7, #13]
 8008872:	7bfb      	ldrb	r3, [r7, #15]
 8008874:	4013      	ands	r3, r2
 8008876:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008878:	7bfa      	ldrb	r2, [r7, #15]
 800887a:	429a      	cmp	r2, r3
 800887c:	d106      	bne.n	800888c <VL53L0X_StartMeasurement+0x88>
				&& (Status == VL53L0X_ERROR_NONE)
 800887e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d102      	bne.n	800888c <VL53L0X_StartMeasurement+0x88>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	2bc7      	cmp	r3, #199	; 0xc7
 800888a:	d9e2      	bls.n	8008852 <VL53L0X_StartMeasurement+0x4e>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	2bc7      	cmp	r3, #199	; 0xc7
 8008890:	d939      	bls.n	8008906 <VL53L0X_StartMeasurement+0x102>
				Status = VL53L0X_ERROR_TIME_OUT;
 8008892:	23f9      	movs	r3, #249	; 0xf9
 8008894:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8008896:	e036      	b.n	8008906 <VL53L0X_StartMeasurement+0x102>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008898:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d105      	bne.n	80088ac <VL53L0X_StartMeasurement+0xa8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80088a0:	2101      	movs	r1, #1
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7ff ff48 	bl	8008738 <VL53L0X_CheckAndLoadInterruptSettings>
 80088a8:	4603      	mov	r3, r0
 80088aa:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80088ac:	2202      	movs	r2, #2
 80088ae:	2100      	movs	r1, #0
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f003 fd11 	bl	800c2d8 <VL53L0X_WrByte>
 80088b6:	4603      	mov	r3, r0
 80088b8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80088ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d123      	bne.n	800890a <VL53L0X_StartMeasurement+0x106>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2204      	movs	r2, #4
 80088c6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80088ca:	e01e      	b.n	800890a <VL53L0X_StartMeasurement+0x106>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80088cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d105      	bne.n	80088e0 <VL53L0X_StartMeasurement+0xdc>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80088d4:	2101      	movs	r1, #1
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff ff2e 	bl	8008738 <VL53L0X_CheckAndLoadInterruptSettings>
 80088dc:	4603      	mov	r3, r0
 80088de:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80088e0:	2204      	movs	r2, #4
 80088e2:	2100      	movs	r1, #0
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f003 fcf7 	bl	800c2d8 <VL53L0X_WrByte>
 80088ea:	4603      	mov	r3, r0
 80088ec:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80088ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10b      	bne.n	800890e <VL53L0X_StartMeasurement+0x10a>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2204      	movs	r2, #4
 80088fa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80088fe:	e006      	b.n	800890e <VL53L0X_StartMeasurement+0x10a>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008900:	23f8      	movs	r3, #248	; 0xf8
 8008902:	75fb      	strb	r3, [r7, #23]
 8008904:	e004      	b.n	8008910 <VL53L0X_StartMeasurement+0x10c>
		break;
 8008906:	bf00      	nop
 8008908:	e002      	b.n	8008910 <VL53L0X_StartMeasurement+0x10c>
		break;
 800890a:	bf00      	nop
 800890c:	e000      	b.n	8008910 <VL53L0X_StartMeasurement+0x10c>
		break;
 800890e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008910:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008930:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b04      	cmp	r3, #4
 8008936:	d112      	bne.n	800895e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8008938:	f107 0308 	add.w	r3, r7, #8
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fb1a 	bl	8008f78 <VL53L0X_GetInterruptMaskStatus>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b04      	cmp	r3, #4
 800894c:	d103      	bne.n	8008956 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2201      	movs	r2, #1
 8008952:	701a      	strb	r2, [r3, #0]
 8008954:	e01c      	b.n	8008990 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2200      	movs	r2, #0
 800895a:	701a      	strb	r2, [r3, #0]
 800895c:	e018      	b.n	8008990 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800895e:	f107 030d 	add.w	r3, r7, #13
 8008962:	461a      	mov	r2, r3
 8008964:	2114      	movs	r1, #20
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f003 fbbb 	bl	800c0e2 <VL53L0X_RdByte>
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8008970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10b      	bne.n	8008990 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8008978:	7b7b      	ldrb	r3, [r7, #13]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2201      	movs	r2, #1
 8008986:	701a      	strb	r2, [r3, #0]
 8008988:	e002      	b.n	8008990 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2200      	movs	r2, #0
 800898e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008990:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800899c:	b5b0      	push	{r4, r5, r7, lr}
 800899e:	b096      	sub	sp, #88	; 0x58
 80089a0:	af02      	add	r7, sp, #8
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089a6:	2300      	movs	r3, #0
 80089a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80089ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80089b0:	230c      	movs	r3, #12
 80089b2:	2114      	movs	r1, #20
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f003 fbef 	bl	800c198 <VL53L0X_ReadMulti>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80089c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f040 80d1 	bne.w	8008b6c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2200      	movs	r2, #0
 80089ce:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	2200      	movs	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80089d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80089da:	b29b      	uxth	r3, r3
 80089dc:	021b      	lsls	r3, r3, #8
 80089de:	b29a      	uxth	r2, r3
 80089e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	4413      	add	r3, r2
 80089e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2200      	movs	r2, #0
 80089f0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80089f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	021b      	lsls	r3, r3, #8
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	4413      	add	r3, r2
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	025b      	lsls	r3, r3, #9
 8008a08:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a0e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008a10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	021b      	lsls	r3, r3, #8
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	4413      	add	r3, r2
 8008a22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8008a26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008a2a:	025b      	lsls	r3, r3, #9
 8008a2c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8008a32:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	021b      	lsls	r3, r3, #8
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	4413      	add	r3, r2
 8008a44:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008a4e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8008a50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8008a5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008a66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8008a6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a70:	d046      	beq.n	8008b00 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8008a72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008a74:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008a78:	fb02 f303 	mul.w	r3, r2, r3
 8008a7c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008a80:	4a57      	ldr	r2, [pc, #348]	; (8008be0 <VL53L0X_GetRangingMeasurementData+0x244>)
 8008a82:	fb82 1203 	smull	r1, r2, r2, r3
 8008a86:	1192      	asrs	r2, r2, #6
 8008a88:	17db      	asrs	r3, r3, #31
 8008a8a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8008a8c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a1b      	ldr	r3, [r3, #32]
 8008a94:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	7f1b      	ldrb	r3, [r3, #28]
 8008a9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8008a9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d02c      	beq.n	8008b00 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8008aa6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008aa8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008aac:	fb02 f303 	mul.w	r3, r2, r3
 8008ab0:	121a      	asrs	r2, r3, #8
					<= 0) {
 8008ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d10d      	bne.n	8008ad4 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8008ab8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d004      	beq.n	8008aca <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8008ac0:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8008ac4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008ac8:	e016      	b.n	8008af8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8008aca:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8008ace:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008ad2:	e011      	b.n	8008af8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8008ad4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ada:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8008ade:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008ae0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8008ae4:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8008ae8:	121b      	asrs	r3, r3, #8
 8008aea:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8008aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aee:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008af0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8008af4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8008af8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008afc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008b00:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00d      	beq.n	8008b24 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8008b08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008b0c:	089b      	lsrs	r3, r3, #2
 8008b0e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008b14:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	019b      	lsls	r3, r3, #6
 8008b1c:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	75da      	strb	r2, [r3, #23]
 8008b22:	e006      	b.n	8008b32 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008b2a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8008b32:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008b36:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8008b3a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	4613      	mov	r3, r2
 8008b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f002 ff09 	bl	800b960 <VL53L0X_get_pal_range_status>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	461a      	mov	r2, r3
 8008b52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008b56:	4313      	orrs	r3, r2
 8008b58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8008b5c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d103      	bne.n	8008b6c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8008b64:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008b6c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d12f      	bne.n	8008bd4 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f107 040c 	add.w	r4, r7, #12
 8008b7a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008b86:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8008b8e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8008b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8008b9c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8008ba2:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8008ba8:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8008bae:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8008bb4:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8008bba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8008bc4:	f107 050c 	add.w	r5, r7, #12
 8008bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008bd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008bd4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3750      	adds	r7, #80	; 0x50
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bdb0      	pop	{r4, r5, r7, pc}
 8008be0:	10624dd3 	.word	0x10624dd3

08008be4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7ff f8e5 	bl	8007dc4 <VL53L0X_SetDeviceMode>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d104      	bne.n	8008c10 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff fd4c 	bl	80086a4 <VL53L0X_PerformSingleMeasurement>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d105      	bne.n	8008c24 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7ff febe 	bl	800899c <VL53L0X_GetRangingMeasurementData>
 8008c20:	4603      	mov	r3, r0
 8008c22:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8008c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d105      	bne.n	8008c38 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f962 	bl	8008ef8 <VL53L0X_ClearInterruptMask>
 8008c34:	4603      	mov	r3, r0
 8008c36:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8008c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	4608      	mov	r0, r1
 8008c4e:	4611      	mov	r1, r2
 8008c50:	461a      	mov	r2, r3
 8008c52:	4603      	mov	r3, r0
 8008c54:	70fb      	strb	r3, [r7, #3]
 8008c56:	460b      	mov	r3, r1
 8008c58:	70bb      	strb	r3, [r7, #2]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8008c62:	78fb      	ldrb	r3, [r7, #3]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8008c68:	23f6      	movs	r3, #246	; 0xf6
 8008c6a:	73fb      	strb	r3, [r7, #15]
 8008c6c:	e107      	b.n	8008e7e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8008c6e:	78bb      	ldrb	r3, [r7, #2]
 8008c70:	2b14      	cmp	r3, #20
 8008c72:	d110      	bne.n	8008c96 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008c74:	7e3b      	ldrb	r3, [r7, #24]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d102      	bne.n	8008c80 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8008c7a:	2310      	movs	r3, #16
 8008c7c:	73bb      	strb	r3, [r7, #14]
 8008c7e:	e001      	b.n	8008c84 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8008c80:	2301      	movs	r3, #1
 8008c82:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8008c84:	7bbb      	ldrb	r3, [r7, #14]
 8008c86:	461a      	mov	r2, r3
 8008c88:	2184      	movs	r1, #132	; 0x84
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f003 fb24 	bl	800c2d8 <VL53L0X_WrByte>
 8008c90:	4603      	mov	r3, r0
 8008c92:	73fb      	strb	r3, [r7, #15]
 8008c94:	e0f3      	b.n	8008e7e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8008c96:	78bb      	ldrb	r3, [r7, #2]
 8008c98:	2b15      	cmp	r3, #21
 8008c9a:	f040 8097 	bne.w	8008dcc <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	21ff      	movs	r1, #255	; 0xff
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f003 fb18 	bl	800c2d8 <VL53L0X_WrByte>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	461a      	mov	r2, r3
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f003 fb0e 	bl	800c2d8 <VL53L0X_WrByte>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	21ff      	movs	r1, #255	; 0xff
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f003 fb04 	bl	800c2d8 <VL53L0X_WrByte>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008cda:	2201      	movs	r2, #1
 8008cdc:	2180      	movs	r1, #128	; 0x80
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f003 fafa 	bl	800c2d8 <VL53L0X_WrByte>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8008cee:	2202      	movs	r2, #2
 8008cf0:	2185      	movs	r1, #133	; 0x85
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f003 faf0 	bl	800c2d8 <VL53L0X_WrByte>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8008d02:	2204      	movs	r2, #4
 8008d04:	21ff      	movs	r1, #255	; 0xff
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f003 fae6 	bl	800c2d8 <VL53L0X_WrByte>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	461a      	mov	r2, r3
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8008d16:	2200      	movs	r2, #0
 8008d18:	21cd      	movs	r1, #205	; 0xcd
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f003 fadc 	bl	800c2d8 <VL53L0X_WrByte>
 8008d20:	4603      	mov	r3, r0
 8008d22:	461a      	mov	r2, r3
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8008d2a:	2211      	movs	r2, #17
 8008d2c:	21cc      	movs	r1, #204	; 0xcc
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f003 fad2 	bl	800c2d8 <VL53L0X_WrByte>
 8008d34:	4603      	mov	r3, r0
 8008d36:	461a      	mov	r2, r3
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8008d3e:	2207      	movs	r2, #7
 8008d40:	21ff      	movs	r1, #255	; 0xff
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f003 fac8 	bl	800c2d8 <VL53L0X_WrByte>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8008d52:	2200      	movs	r2, #0
 8008d54:	21be      	movs	r1, #190	; 0xbe
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f003 fabe 	bl	800c2d8 <VL53L0X_WrByte>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	461a      	mov	r2, r3
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8008d66:	2206      	movs	r2, #6
 8008d68:	21ff      	movs	r1, #255	; 0xff
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f003 fab4 	bl	800c2d8 <VL53L0X_WrByte>
 8008d70:	4603      	mov	r3, r0
 8008d72:	461a      	mov	r2, r3
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8008d7a:	2209      	movs	r2, #9
 8008d7c:	21cc      	movs	r1, #204	; 0xcc
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f003 faaa 	bl	800c2d8 <VL53L0X_WrByte>
 8008d84:	4603      	mov	r3, r0
 8008d86:	461a      	mov	r2, r3
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008d8e:	2200      	movs	r2, #0
 8008d90:	21ff      	movs	r1, #255	; 0xff
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f003 faa0 	bl	800c2d8 <VL53L0X_WrByte>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008da2:	2201      	movs	r2, #1
 8008da4:	21ff      	movs	r1, #255	; 0xff
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f003 fa96 	bl	800c2d8 <VL53L0X_WrByte>
 8008dac:	4603      	mov	r3, r0
 8008dae:	461a      	mov	r2, r3
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008db6:	2200      	movs	r2, #0
 8008db8:	2100      	movs	r1, #0
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f003 fa8c 	bl	800c2d8 <VL53L0X_WrByte>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	73fb      	strb	r3, [r7, #15]
 8008dca:	e058      	b.n	8008e7e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8008dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d121      	bne.n	8008e18 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8008dd4:	787b      	ldrb	r3, [r7, #1]
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	d81b      	bhi.n	8008e12 <VL53L0X_SetGpioConfig+0x1ce>
 8008dda:	a201      	add	r2, pc, #4	; (adr r2, 8008de0 <VL53L0X_SetGpioConfig+0x19c>)
 8008ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de0:	08008df5 	.word	0x08008df5
 8008de4:	08008dfb 	.word	0x08008dfb
 8008de8:	08008e01 	.word	0x08008e01
 8008dec:	08008e07 	.word	0x08008e07
 8008df0:	08008e0d 	.word	0x08008e0d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73bb      	strb	r3, [r7, #14]
				break;
 8008df8:	e00f      	b.n	8008e1a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	73bb      	strb	r3, [r7, #14]
				break;
 8008dfe:	e00c      	b.n	8008e1a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008e00:	2302      	movs	r3, #2
 8008e02:	73bb      	strb	r3, [r7, #14]
				break;
 8008e04:	e009      	b.n	8008e1a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008e06:	2303      	movs	r3, #3
 8008e08:	73bb      	strb	r3, [r7, #14]
				break;
 8008e0a:	e006      	b.n	8008e1a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	73bb      	strb	r3, [r7, #14]
				break;
 8008e10:	e003      	b.n	8008e1a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8008e12:	23f5      	movs	r3, #245	; 0xf5
 8008e14:	73fb      	strb	r3, [r7, #15]
 8008e16:	e000      	b.n	8008e1a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8008e18:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8008e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d107      	bne.n	8008e32 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	461a      	mov	r2, r3
 8008e26:	210a      	movs	r1, #10
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f003 fa55 	bl	800c2d8 <VL53L0X_WrByte>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8008e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10f      	bne.n	8008e5a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008e3a:	7e3b      	ldrb	r3, [r7, #24]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d102      	bne.n	8008e46 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73bb      	strb	r3, [r7, #14]
 8008e44:	e001      	b.n	8008e4a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8008e46:	2310      	movs	r3, #16
 8008e48:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
 8008e4c:	22ef      	movs	r2, #239	; 0xef
 8008e4e:	2184      	movs	r1, #132	; 0x84
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f003 fa8f 	bl	800c374 <VL53L0X_UpdateByte>
 8008e56:	4603      	mov	r3, r0
 8008e58:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d103      	bne.n	8008e6a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	787a      	ldrb	r2, [r7, #1]
 8008e66:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d105      	bne.n	8008e7e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008e72:	2100      	movs	r1, #0
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f83f 	bl	8008ef8 <VL53L0X_ClearInterruptMask>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop

08008e8c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	607a      	str	r2, [r7, #4]
 8008e96:	603b      	str	r3, [r7, #0]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8008ea0:	f107 0314 	add.w	r3, r7, #20
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	210e      	movs	r1, #14
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f003 f9a1 	bl	800c1f0 <VL53L0X_RdWord>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008eb2:	8abb      	ldrh	r3, [r7, #20]
 8008eb4:	045b      	lsls	r3, r3, #17
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	4b0e      	ldr	r3, [pc, #56]	; (8008ef4 <VL53L0X_GetInterruptThresholds+0x68>)
 8008eba:	4013      	ands	r3, r2
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008ec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10f      	bne.n	8008ee8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008ec8:	f107 0314 	add.w	r3, r7, #20
 8008ecc:	461a      	mov	r2, r3
 8008ece:	210c      	movs	r1, #12
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f003 f98d 	bl	800c1f0 <VL53L0X_RdWord>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008eda:	8abb      	ldrh	r3, [r7, #20]
 8008edc:	045b      	lsls	r3, r3, #17
 8008ede:	461a      	mov	r2, r3
 8008ee0:	4b04      	ldr	r3, [pc, #16]	; (8008ef4 <VL53L0X_GetInterruptThresholds+0x68>)
 8008ee2:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3718      	adds	r7, #24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	1ffe0000 	.word	0x1ffe0000

08008ef8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f02:	2300      	movs	r3, #0
 8008f04:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	210b      	movs	r1, #11
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f003 f9e2 	bl	800c2d8 <VL53L0X_WrByte>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008f18:	2200      	movs	r2, #0
 8008f1a:	210b      	movs	r1, #11
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f003 f9db 	bl	800c2d8 <VL53L0X_WrByte>
 8008f22:	4603      	mov	r3, r0
 8008f24:	461a      	mov	r2, r3
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008f2c:	f107 030d 	add.w	r3, r7, #13
 8008f30:	461a      	mov	r2, r3
 8008f32:	2113      	movs	r1, #19
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f003 f8d4 	bl	800c0e2 <VL53L0X_RdByte>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
 8008f46:	3301      	adds	r3, #1
 8008f48:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8008f4a:	7b7b      	ldrb	r3, [r7, #13]
 8008f4c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d006      	beq.n	8008f62 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d803      	bhi.n	8008f62 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8008f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d0d3      	beq.n	8008f0a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8008f62:	7bbb      	ldrb	r3, [r7, #14]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d901      	bls.n	8008f6c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008f68:	23f4      	movs	r3, #244	; 0xf4
 8008f6a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f82:	2300      	movs	r3, #0
 8008f84:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8008f86:	f107 030e 	add.w	r3, r7, #14
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	2113      	movs	r1, #19
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f003 f8a7 	bl	800c0e2 <VL53L0X_RdByte>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	f003 0207 	and.w	r2, r3, #7
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	f003 0318 	and.w	r3, r3, #24
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008fac:	23fa      	movs	r3, #250	; 0xfa
 8008fae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	68b9      	ldr	r1, [r7, #8]
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f000 fa02 	bl	80093da <VL53L0X_perform_ref_spad_management>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8008fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008ff4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008ff8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8008ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ffe:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8009000:	f107 0308 	add.w	r3, r7, #8
 8009004:	461a      	mov	r2, r3
 8009006:	2128      	movs	r1, #40	; 0x28
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f003 f8f1 	bl	800c1f0 <VL53L0X_RdWord>
 800900e:	4603      	mov	r3, r0
 8009010:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8009012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d11e      	bne.n	8009058 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800901a:	893b      	ldrh	r3, [r7, #8]
 800901c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009020:	b29b      	uxth	r3, r3
 8009022:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8009024:	893b      	ldrh	r3, [r7, #8]
 8009026:	461a      	mov	r2, r3
 8009028:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800902c:	429a      	cmp	r2, r3
 800902e:	dd0b      	ble.n	8009048 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8009030:	893a      	ldrh	r2, [r7, #8]
 8009032:	897b      	ldrh	r3, [r7, #10]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	b29b      	uxth	r3, r3
 8009038:	b21b      	sxth	r3, r3
 800903a:	461a      	mov	r2, r3
					* 250;
 800903c:	23fa      	movs	r3, #250	; 0xfa
 800903e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	e007      	b.n	8009058 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8009048:	893b      	ldrh	r3, [r7, #8]
 800904a:	b21b      	sxth	r3, r3
 800904c:	461a      	mov	r2, r3
 800904e:	23fa      	movs	r3, #250	; 0xfa
 8009050:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8009058:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8009064:	b480      	push	{r7}
 8009066:	b08b      	sub	sp, #44	; 0x2c
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8009072:	2308      	movs	r3, #8
 8009074:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	f04f 32ff 	mov.w	r2, #4294967295
 8009080:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	fbb2 f3f3 	udiv	r3, r2, r3
 800908a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	69ba      	ldr	r2, [r7, #24]
 8009090:	fbb3 f2f2 	udiv	r2, r3, r2
 8009094:	69b9      	ldr	r1, [r7, #24]
 8009096:	fb01 f202 	mul.w	r2, r1, r2
 800909a:	1a9b      	subs	r3, r3, r2
 800909c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	627b      	str	r3, [r7, #36]	; 0x24
 80090a2:	e030      	b.n	8009106 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	4413      	add	r3, r2
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80090b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d11e      	bne.n	80090f8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80090ba:	7ffa      	ldrb	r2, [r7, #31]
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	fa42 f303 	asr.w	r3, r2, r3
 80090c2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80090c8:	e016      	b.n	80090f8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80090ca:	7ffb      	ldrb	r3, [r7, #31]
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00b      	beq.n	80090ec <get_next_good_spad+0x88>
				success = 1;
 80090d4:	2301      	movs	r3, #1
 80090d6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	fb03 f202 	mul.w	r2, r3, r2
 80090e0:	6a3b      	ldr	r3, [r7, #32]
 80090e2:	4413      	add	r3, r2
 80090e4:	461a      	mov	r2, r3
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	601a      	str	r2, [r3, #0]
				break;
 80090ea:	e009      	b.n	8009100 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80090ec:	7ffb      	ldrb	r3, [r7, #31]
 80090ee:	085b      	lsrs	r3, r3, #1
 80090f0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	3301      	adds	r3, #1
 80090f6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80090f8:	6a3a      	ldr	r2, [r7, #32]
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d3e4      	bcc.n	80090ca <get_next_good_spad+0x66>
				coarseIndex++) {
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	3301      	adds	r3, #1
 8009104:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	429a      	cmp	r2, r3
 800910c:	d202      	bcs.n	8009114 <get_next_good_spad+0xb0>
 800910e:	7fbb      	ldrb	r3, [r7, #30]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d0c7      	beq.n	80090a4 <get_next_good_spad+0x40>
		}
	}
}
 8009114:	bf00      	nop
 8009116:	372c      	adds	r7, #44	; 0x2c
 8009118:	46bd      	mov	sp, r7
 800911a:	bc80      	pop	{r7}
 800911c:	4770      	bx	lr
	...

08009120 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8009128:	2301      	movs	r3, #1
 800912a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	099b      	lsrs	r3, r3, #6
 8009130:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8009132:	4a07      	ldr	r2, [pc, #28]	; (8009150 <is_aperture+0x30>)
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <is_aperture+0x22>
		isAperture = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8009142:	7bfb      	ldrb	r3, [r7, #15]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	bc80      	pop	{r7}
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	200002c0 	.word	0x200002c0

08009154 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8009154:	b480      	push	{r7}
 8009156:	b089      	sub	sp, #36	; 0x24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009160:	2300      	movs	r3, #0
 8009162:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8009164:	2308      	movs	r3, #8
 8009166:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009170:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	fbb3 f2f2 	udiv	r2, r3, r2
 800917a:	69b9      	ldr	r1, [r7, #24]
 800917c:	fb01 f202 	mul.w	r2, r1, r2
 8009180:	1a9b      	subs	r3, r3, r2
 8009182:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	429a      	cmp	r2, r3
 800918a:	d302      	bcc.n	8009192 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800918c:	23ce      	movs	r3, #206	; 0xce
 800918e:	77fb      	strb	r3, [r7, #31]
 8009190:	e010      	b.n	80091b4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	4413      	add	r3, r2
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	b25a      	sxtb	r2, r3
 800919c:	2101      	movs	r1, #1
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	fa01 f303 	lsl.w	r3, r1, r3
 80091a4:	b25b      	sxtb	r3, r3
 80091a6:	4313      	orrs	r3, r2
 80091a8:	b259      	sxtb	r1, r3
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	4413      	add	r3, r2
 80091b0:	b2ca      	uxtb	r2, r1
 80091b2:	701a      	strb	r2, [r3, #0]

	return status;
 80091b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3724      	adds	r7, #36	; 0x24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bc80      	pop	{r7}
 80091c0:	4770      	bx	lr

080091c2 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b084      	sub	sp, #16
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80091cc:	2306      	movs	r3, #6
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	21b0      	movs	r1, #176	; 0xb0
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f002 ffb0 	bl	800c138 <VL53L0X_WriteMulti>
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80091dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80091f2:	2306      	movs	r3, #6
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	21b0      	movs	r1, #176	; 0xb0
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f002 ffcd 	bl	800c198 <VL53L0X_ReadMulti>
 80091fe:	4603      	mov	r3, r0
 8009200:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8009202:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b08c      	sub	sp, #48	; 0x30
 8009212:	af00      	add	r7, sp, #0
 8009214:	60f8      	str	r0, [r7, #12]
 8009216:	607a      	str	r2, [r7, #4]
 8009218:	603b      	str	r3, [r7, #0]
 800921a:	460b      	mov	r3, r1
 800921c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800921e:	2300      	movs	r3, #0
 8009220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8009224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009226:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8009228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800922a:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800922c:	2300      	movs	r3, #0
 800922e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009230:	e02b      	b.n	800928a <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8009232:	f107 031c 	add.w	r3, r7, #28
 8009236:	6a3a      	ldr	r2, [r7, #32]
 8009238:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7ff ff12 	bl	8009064 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009246:	d103      	bne.n	8009250 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009248:	23ce      	movs	r3, #206	; 0xce
 800924a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800924e:	e020      	b.n	8009292 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	461a      	mov	r2, r3
 8009254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009256:	4413      	add	r3, r2
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff ff61 	bl	8009120 <is_aperture>
 800925e:	4603      	mov	r3, r0
 8009260:	461a      	mov	r2, r3
 8009262:	7afb      	ldrb	r3, [r7, #11]
 8009264:	4293      	cmp	r3, r2
 8009266:	d003      	beq.n	8009270 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009268:	23ce      	movs	r3, #206	; 0xce
 800926a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800926e:	e010      	b.n	8009292 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8009274:	6a3a      	ldr	r2, [r7, #32]
 8009276:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009278:	6838      	ldr	r0, [r7, #0]
 800927a:	f7ff ff6b 	bl	8009154 <enable_spad_bit>
		currentSpad++;
 800927e:	6a3b      	ldr	r3, [r7, #32]
 8009280:	3301      	adds	r3, #1
 8009282:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	3301      	adds	r3, #1
 8009288:	62bb      	str	r3, [r7, #40]	; 0x28
 800928a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800928c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800928e:	429a      	cmp	r2, r3
 8009290:	d3cf      	bcc.n	8009232 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8009292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009294:	6a3a      	ldr	r2, [r7, #32]
 8009296:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8009298:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800929c:	2b00      	cmp	r3, #0
 800929e:	d106      	bne.n	80092ae <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f7ff ff8d 	bl	80091c2 <set_ref_spad_map>
 80092a8:	4603      	mov	r3, r0
 80092aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80092ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d121      	bne.n	80092fa <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80092b6:	f107 0314 	add.w	r3, r7, #20
 80092ba:	4619      	mov	r1, r3
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f7ff ff93 	bl	80091e8 <get_ref_spad_map>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80092c8:	2300      	movs	r3, #0
 80092ca:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80092cc:	e011      	b.n	80092f2 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80092ce:	683a      	ldr	r2, [r7, #0]
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	4413      	add	r3, r2
 80092d4:	781a      	ldrb	r2, [r3, #0]
 80092d6:	f107 0114 	add.w	r1, r7, #20
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	440b      	add	r3, r1
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d003      	beq.n	80092ec <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80092e4:	23ce      	movs	r3, #206	; 0xce
 80092e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80092ea:	e006      	b.n	80092fa <enable_ref_spads+0xec>
			}
			i++;
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ee:	3301      	adds	r3, #1
 80092f0:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80092f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d3e9      	bcc.n	80092ce <enable_ref_spads+0xc0>
		}
	}
	return status;
 80092fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3730      	adds	r7, #48	; 0x30
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b08a      	sub	sp, #40	; 0x28
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009310:	2300      	movs	r3, #0
 8009312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8009326:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800932a:	2b00      	cmp	r3, #0
 800932c:	d107      	bne.n	800933e <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800932e:	22c0      	movs	r2, #192	; 0xc0
 8009330:	2101      	movs	r1, #1
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f002 ffd0 	bl	800c2d8 <VL53L0X_WrByte>
 8009338:	4603      	mov	r3, r0
 800933a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800933e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009342:	2b00      	cmp	r3, #0
 8009344:	d108      	bne.n	8009358 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8009346:	f107 0308 	add.w	r3, r7, #8
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7ff fc49 	bl	8008be4 <VL53L0X_PerformSingleRangingMeasurement>
 8009352:	4603      	mov	r3, r0
 8009354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8009358:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800935c:	2b00      	cmp	r3, #0
 800935e:	d107      	bne.n	8009370 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009360:	2201      	movs	r2, #1
 8009362:	21ff      	movs	r1, #255	; 0xff
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f002 ffb7 	bl	800c2d8 <VL53L0X_WrByte>
 800936a:	4603      	mov	r3, r0
 800936c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8009370:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009374:	2b00      	cmp	r3, #0
 8009376:	d107      	bne.n	8009388 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	21b6      	movs	r1, #182	; 0xb6
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f002 ff37 	bl	800c1f0 <VL53L0X_RdWord>
 8009382:	4603      	mov	r3, r0
 8009384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8009388:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800938c:	2b00      	cmp	r3, #0
 800938e:	d107      	bne.n	80093a0 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009390:	2200      	movs	r2, #0
 8009392:	21ff      	movs	r1, #255	; 0xff
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f002 ff9f 	bl	800c2d8 <VL53L0X_WrByte>
 800939a:	4603      	mov	r3, r0
 800939c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80093a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d112      	bne.n	80093ce <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80093a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80093ac:	461a      	mov	r2, r3
 80093ae:	2101      	movs	r1, #1
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f002 ff91 	bl	800c2d8 <VL53L0X_WrByte>
 80093b6:	4603      	mov	r3, r0
 80093b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80093bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d104      	bne.n	80093ce <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80093ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80093ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3728      	adds	r7, #40	; 0x28
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80093da:	b590      	push	{r4, r7, lr}
 80093dc:	b09d      	sub	sp, #116	; 0x74
 80093de:	af06      	add	r7, sp, #24
 80093e0:	60f8      	str	r0, [r7, #12]
 80093e2:	60b9      	str	r1, [r7, #8]
 80093e4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80093ec:	23b4      	movs	r3, #180	; 0xb4
 80093ee:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80093f2:	2303      	movs	r3, #3
 80093f4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80093f6:	232c      	movs	r3, #44	; 0x2c
 80093f8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80093fe:	2300      	movs	r3, #0
 8009400:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8009402:	2300      	movs	r3, #0
 8009404:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8009406:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800940a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800940c:	2300      	movs	r3, #0
 800940e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8009414:	2306      	movs	r3, #6
 8009416:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800941c:	2300      	movs	r3, #0
 800941e:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800942a:	2300      	movs	r3, #0
 800942c:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 800943e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8009440:	2300      	movs	r3, #0
 8009442:	64bb      	str	r3, [r7, #72]	; 0x48
 8009444:	e009      	b.n	800945a <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800944a:	4413      	add	r3, r2
 800944c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009450:	2200      	movs	r2, #0
 8009452:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009456:	3301      	adds	r3, #1
 8009458:	64bb      	str	r3, [r7, #72]	; 0x48
 800945a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800945c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945e:	429a      	cmp	r2, r3
 8009460:	d3f1      	bcc.n	8009446 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009462:	2201      	movs	r2, #1
 8009464:	21ff      	movs	r1, #255	; 0xff
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f002 ff36 	bl	800c2d8 <VL53L0X_WrByte>
 800946c:	4603      	mov	r3, r0
 800946e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009472:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009476:	2b00      	cmp	r3, #0
 8009478:	d107      	bne.n	800948a <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800947a:	2200      	movs	r2, #0
 800947c:	214f      	movs	r1, #79	; 0x4f
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f002 ff2a 	bl	800c2d8 <VL53L0X_WrByte>
 8009484:	4603      	mov	r3, r0
 8009486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800948a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800948e:	2b00      	cmp	r3, #0
 8009490:	d107      	bne.n	80094a2 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8009492:	222c      	movs	r2, #44	; 0x2c
 8009494:	214e      	movs	r1, #78	; 0x4e
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f002 ff1e 	bl	800c2d8 <VL53L0X_WrByte>
 800949c:	4603      	mov	r3, r0
 800949e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80094a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d107      	bne.n	80094ba <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80094aa:	2200      	movs	r2, #0
 80094ac:	21ff      	movs	r1, #255	; 0xff
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f002 ff12 	bl	800c2d8 <VL53L0X_WrByte>
 80094b4:	4603      	mov	r3, r0
 80094b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80094ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d109      	bne.n	80094d6 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80094c2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80094c6:	461a      	mov	r2, r3
 80094c8:	21b6      	movs	r1, #182	; 0xb6
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f002 ff04 	bl	800c2d8 <VL53L0X_WrByte>
 80094d0:	4603      	mov	r3, r0
 80094d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80094d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d107      	bne.n	80094ee <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80094de:	2200      	movs	r2, #0
 80094e0:	2180      	movs	r1, #128	; 0x80
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f002 fef8 	bl	800c2d8 <VL53L0X_WrByte>
 80094e8:	4603      	mov	r3, r0
 80094ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80094ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10a      	bne.n	800950c <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80094f6:	f107 0210 	add.w	r2, r7, #16
 80094fa:	f107 0111 	add.w	r1, r7, #17
 80094fe:	2300      	movs	r3, #0
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 fbbb 	bl	8009c7c <VL53L0X_perform_ref_calibration>
 8009506:	4603      	mov	r3, r0
 8009508:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800950c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009510:	2b00      	cmp	r3, #0
 8009512:	d121      	bne.n	8009558 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8009514:	2300      	movs	r3, #0
 8009516:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8009518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800951a:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8009520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009522:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8009530:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009534:	f107 0218 	add.w	r2, r7, #24
 8009538:	9204      	str	r2, [sp, #16]
 800953a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800953c:	9203      	str	r2, [sp, #12]
 800953e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009540:	9202      	str	r2, [sp, #8]
 8009542:	9301      	str	r3, [sp, #4]
 8009544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	4623      	mov	r3, r4
 800954a:	4602      	mov	r2, r0
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f7ff fe5e 	bl	800920e <enable_ref_spads>
 8009552:	4603      	mov	r3, r0
 8009554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009558:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800955c:	2b00      	cmp	r3, #0
 800955e:	d174      	bne.n	800964a <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8009564:	f107 0312 	add.w	r3, r7, #18
 8009568:	4619      	mov	r1, r3
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f7ff fecb 	bl	8009306 <perform_ref_signal_measurement>
 8009570:	4603      	mov	r3, r0
 8009572:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009576:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800957a:	2b00      	cmp	r3, #0
 800957c:	d161      	bne.n	8009642 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800957e:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009580:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009582:	429a      	cmp	r2, r3
 8009584:	d25d      	bcs.n	8009642 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8009586:	2300      	movs	r3, #0
 8009588:	64bb      	str	r3, [r7, #72]	; 0x48
 800958a:	e009      	b.n	80095a0 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009590:	4413      	add	r3, r2
 8009592:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009596:	2200      	movs	r2, #0
 8009598:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800959a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800959c:	3301      	adds	r3, #1
 800959e:	64bb      	str	r3, [r7, #72]	; 0x48
 80095a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d3f1      	bcc.n	800958c <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80095a8:	e002      	b.n	80095b0 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80095aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095ac:	3301      	adds	r3, #1
 80095ae:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80095b0:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80095b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095b6:	4413      	add	r3, r2
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7ff fdb1 	bl	8009120 <is_aperture>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d103      	bne.n	80095cc <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80095c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d3ee      	bcc.n	80095aa <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80095cc:	2301      	movs	r3, #1
 80095ce:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80095d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d2:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80095e0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80095e4:	f107 0218 	add.w	r2, r7, #24
 80095e8:	9204      	str	r2, [sp, #16]
 80095ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095ec:	9203      	str	r2, [sp, #12]
 80095ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095f0:	9202      	str	r2, [sp, #8]
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	4623      	mov	r3, r4
 80095fa:	4602      	mov	r2, r0
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f7ff fe06 	bl	800920e <enable_ref_spads>
 8009602:	4603      	mov	r3, r0
 8009604:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009608:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800960c:	2b00      	cmp	r3, #0
 800960e:	d11b      	bne.n	8009648 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8009614:	f107 0312 	add.w	r3, r7, #18
 8009618:	4619      	mov	r1, r3
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f7ff fe73 	bl	8009306 <perform_ref_signal_measurement>
 8009620:	4603      	mov	r3, r0
 8009622:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009626:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10c      	bne.n	8009648 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800962e:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009630:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009632:	429a      	cmp	r2, r3
 8009634:	d208      	bcs.n	8009648 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009636:	2301      	movs	r3, #1
 8009638:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800963c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800963e:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009640:	e002      	b.n	8009648 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009646:	e000      	b.n	800964a <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009648:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800964a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800964e:	2b00      	cmp	r3, #0
 8009650:	f040 80af 	bne.w	80097b2 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8009654:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009656:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009658:	429a      	cmp	r2, r3
 800965a:	f240 80aa 	bls.w	80097b2 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800965e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009660:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8009664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009666:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800966e:	f107 031c 	add.w	r3, r7, #28
 8009672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009674:	4618      	mov	r0, r3
 8009676:	f002 ff31 	bl	800c4dc <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800967a:	8a7b      	ldrh	r3, [r7, #18]
 800967c:	461a      	mov	r2, r3
 800967e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	bfb8      	it	lt
 8009686:	425b      	neglt	r3, r3
 8009688:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8009690:	e086      	b.n	80097a0 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8009698:	f107 0314 	add.w	r3, r7, #20
 800969c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800969e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096a0:	f7ff fce0 	bl	8009064 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096aa:	d103      	bne.n	80096b4 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80096ac:	23ce      	movs	r3, #206	; 0xce
 80096ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80096b2:	e07e      	b.n	80097b2 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80096b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b6:	3301      	adds	r3, #1
 80096b8:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80096ba:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	4413      	add	r3, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7ff fd2c 	bl	8009120 <is_aperture>
 80096c8:	4603      	mov	r3, r0
 80096ca:	461a      	mov	r2, r3
 80096cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d003      	beq.n	80096da <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80096d2:	23ce      	movs	r3, #206	; 0xce
 80096d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80096d8:	e06b      	b.n	80097b2 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80096e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7ff fd33 	bl	8009154 <enable_spad_bit>
 80096ee:	4603      	mov	r3, r0
 80096f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80096f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10c      	bne.n	8009716 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80096fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096fe:	3301      	adds	r3, #1
 8009700:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8009708:	4619      	mov	r1, r3
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f7ff fd59 	bl	80091c2 <set_ref_spad_map>
 8009710:	4603      	mov	r3, r0
 8009712:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009716:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800971a:	2b00      	cmp	r3, #0
 800971c:	d146      	bne.n	80097ac <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800971e:	f107 0312 	add.w	r3, r7, #18
 8009722:	4619      	mov	r1, r3
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f7ff fdee 	bl	8009306 <perform_ref_signal_measurement>
 800972a:	4603      	mov	r3, r0
 800972c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009730:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009734:	2b00      	cmp	r3, #0
 8009736:	d13b      	bne.n	80097b0 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8009738:	8a7b      	ldrh	r3, [r7, #18]
 800973a:	461a      	mov	r2, r3
 800973c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	2b00      	cmp	r3, #0
 8009742:	bfb8      	it	lt
 8009744:	425b      	neglt	r3, r3
 8009746:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8009748:	8a7b      	ldrh	r3, [r7, #18]
 800974a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800974c:	429a      	cmp	r2, r3
 800974e:	d21c      	bcs.n	800978a <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8009750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009754:	429a      	cmp	r2, r3
 8009756:	d914      	bls.n	8009782 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8009758:	f107 031c 	add.w	r3, r7, #28
 800975c:	4619      	mov	r1, r3
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f7ff fd2f 	bl	80091c2 <set_ref_spad_map>
 8009764:	4603      	mov	r3, r0
 8009766:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8009770:	f107 011c 	add.w	r1, r7, #28
 8009774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009776:	4618      	mov	r0, r3
 8009778:	f002 feb0 	bl	800c4dc <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800977c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800977e:	3b01      	subs	r3, #1
 8009780:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8009782:	2301      	movs	r3, #1
 8009784:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009788:	e00a      	b.n	80097a0 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8009794:	f107 031c 	add.w	r3, r7, #28
 8009798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800979a:	4618      	mov	r0, r3
 800979c:	f002 fe9e 	bl	800c4dc <memcpy>
		while (!complete) {
 80097a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f43f af74 	beq.w	8009692 <VL53L0X_perform_ref_spad_management+0x2b8>
 80097aa:	e002      	b.n	80097b2 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80097ac:	bf00      	nop
 80097ae:	e000      	b.n	80097b2 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80097b0:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80097b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d115      	bne.n	80097e6 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80097be:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80097c6:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	781a      	ldrb	r2, [r3, #0]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80097e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	375c      	adds	r7, #92	; 0x5c
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd90      	pop	{r4, r7, pc}

080097f2 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80097f2:	b590      	push	{r4, r7, lr}
 80097f4:	b093      	sub	sp, #76	; 0x4c
 80097f6:	af06      	add	r7, sp, #24
 80097f8:	60f8      	str	r0, [r7, #12]
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	4613      	mov	r3, r2
 80097fe:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009800:	2300      	movs	r3, #0
 8009802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800980a:	23b4      	movs	r3, #180	; 0xb4
 800980c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8009810:	2306      	movs	r3, #6
 8009812:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8009814:	232c      	movs	r3, #44	; 0x2c
 8009816:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009818:	2201      	movs	r2, #1
 800981a:	21ff      	movs	r1, #255	; 0xff
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f002 fd5b 	bl	800c2d8 <VL53L0X_WrByte>
 8009822:	4603      	mov	r3, r0
 8009824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009828:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800982c:	2b00      	cmp	r3, #0
 800982e:	d107      	bne.n	8009840 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8009830:	2200      	movs	r2, #0
 8009832:	214f      	movs	r1, #79	; 0x4f
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f002 fd4f 	bl	800c2d8 <VL53L0X_WrByte>
 800983a:	4603      	mov	r3, r0
 800983c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009840:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009844:	2b00      	cmp	r3, #0
 8009846:	d107      	bne.n	8009858 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8009848:	222c      	movs	r2, #44	; 0x2c
 800984a:	214e      	movs	r1, #78	; 0x4e
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f002 fd43 	bl	800c2d8 <VL53L0X_WrByte>
 8009852:	4603      	mov	r3, r0
 8009854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009858:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800985c:	2b00      	cmp	r3, #0
 800985e:	d107      	bne.n	8009870 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009860:	2200      	movs	r2, #0
 8009862:	21ff      	movs	r1, #255	; 0xff
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f002 fd37 	bl	800c2d8 <VL53L0X_WrByte>
 800986a:	4603      	mov	r3, r0
 800986c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009870:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009874:	2b00      	cmp	r3, #0
 8009876:	d109      	bne.n	800988c <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8009878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800987c:	461a      	mov	r2, r3
 800987e:	21b6      	movs	r1, #182	; 0xb6
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f002 fd29 	bl	800c2d8 <VL53L0X_WrByte>
 8009886:	4603      	mov	r3, r0
 8009888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800988c:	2300      	movs	r3, #0
 800988e:	627b      	str	r3, [r7, #36]	; 0x24
 8009890:	e009      	b.n	80098a6 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	4413      	add	r3, r2
 8009898:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800989c:	2200      	movs	r2, #0
 800989e:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	3301      	adds	r3, #1
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24
 80098a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d3f1      	bcc.n	8009892 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80098ae:	79fb      	ldrb	r3, [r7, #7]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d011      	beq.n	80098d8 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80098b4:	e002      	b.n	80098bc <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80098b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b8:	3301      	adds	r3, #1
 80098ba:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80098bc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80098c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c2:	4413      	add	r3, r2
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7ff fc2b 	bl	8009120 <is_aperture>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d103      	bne.n	80098d8 <VL53L0X_set_reference_spads+0xe6>
 80098d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d3ee      	bcc.n	80098b6 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80098e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098e8:	79f9      	ldrb	r1, [r7, #7]
 80098ea:	f107 0214 	add.w	r2, r7, #20
 80098ee:	9204      	str	r2, [sp, #16]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	9203      	str	r2, [sp, #12]
 80098f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098f6:	9202      	str	r2, [sp, #8]
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	4623      	mov	r3, r4
 8009900:	4602      	mov	r2, r0
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f7ff fc83 	bl	800920e <enable_ref_spads>
 8009908:	4603      	mov	r3, r0
 800990a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800990e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10c      	bne.n	8009930 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	b2da      	uxtb	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	79fa      	ldrb	r2, [r7, #7]
 800992c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8009930:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009934:	4618      	mov	r0, r3
 8009936:	3734      	adds	r7, #52	; 0x34
 8009938:	46bd      	mov	sp, r7
 800993a:	bd90      	pop	{r4, r7, pc}

0800993c <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	460b      	mov	r3, r1
 8009946:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009948:	2300      	movs	r3, #0
 800994a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800994c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10a      	bne.n	800996a <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	f043 0301 	orr.w	r3, r3, #1
 800995a:	b2db      	uxtb	r3, r3
 800995c:	461a      	mov	r2, r3
 800995e:	2100      	movs	r1, #0
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f002 fcb9 	bl	800c2d8 <VL53L0X_WrByte>
 8009966:	4603      	mov	r3, r0
 8009968:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800996a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d104      	bne.n	800997c <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f9bf 	bl	8009cf6 <VL53L0X_measurement_poll_for_completion>
 8009978:	4603      	mov	r3, r0
 800997a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800997c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d105      	bne.n	8009990 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009984:	2100      	movs	r1, #0
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff fab6 	bl	8008ef8 <VL53L0X_ClearInterruptMask>
 800998c:	4603      	mov	r3, r0
 800998e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d106      	bne.n	80099a6 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8009998:	2200      	movs	r2, #0
 800999a:	2100      	movs	r1, #0
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f002 fc9b 	bl	800c2d8 <VL53L0X_WrByte>
 80099a2:	4603      	mov	r3, r0
 80099a4:	73fb      	strb	r3, [r7, #15]

	return Status;
 80099a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b084      	sub	sp, #16
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	4608      	mov	r0, r1
 80099bc:	4611      	mov	r1, r2
 80099be:	461a      	mov	r2, r3
 80099c0:	4603      	mov	r3, r0
 80099c2:	70fb      	strb	r3, [r7, #3]
 80099c4:	460b      	mov	r3, r1
 80099c6:	70bb      	strb	r3, [r7, #2]
 80099c8:	4613      	mov	r3, r2
 80099ca:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099cc:	2300      	movs	r3, #0
 80099ce:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80099d4:	2201      	movs	r2, #1
 80099d6:	21ff      	movs	r1, #255	; 0xff
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f002 fc7d 	bl	800c2d8 <VL53L0X_WrByte>
 80099de:	4603      	mov	r3, r0
 80099e0:	461a      	mov	r2, r3
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80099e8:	2200      	movs	r2, #0
 80099ea:	2100      	movs	r1, #0
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f002 fc73 	bl	800c2d8 <VL53L0X_WrByte>
 80099f2:	4603      	mov	r3, r0
 80099f4:	461a      	mov	r2, r3
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80099fc:	2200      	movs	r2, #0
 80099fe:	21ff      	movs	r1, #255	; 0xff
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f002 fc69 	bl	800c2d8 <VL53L0X_WrByte>
 8009a06:	4603      	mov	r3, r0
 8009a08:	461a      	mov	r2, r3
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d01e      	beq.n	8009a54 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8009a16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d009      	beq.n	8009a32 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009a1e:	69ba      	ldr	r2, [r7, #24]
 8009a20:	21cb      	movs	r1, #203	; 0xcb
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f002 fb5d 	bl	800c0e2 <VL53L0X_RdByte>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009a32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d02a      	beq.n	8009a90 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009a3a:	f107 030e 	add.w	r3, r7, #14
 8009a3e:	461a      	mov	r2, r3
 8009a40:	21ee      	movs	r1, #238	; 0xee
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f002 fb4d 	bl	800c0e2 <VL53L0X_RdByte>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	73fb      	strb	r3, [r7, #15]
 8009a52:	e01d      	b.n	8009a90 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8009a54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00a      	beq.n	8009a72 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8009a5c:	78bb      	ldrb	r3, [r7, #2]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	21cb      	movs	r1, #203	; 0xcb
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f002 fc38 	bl	800c2d8 <VL53L0X_WrByte>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009a72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00a      	beq.n	8009a90 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8009a7a:	787b      	ldrb	r3, [r7, #1]
 8009a7c:	2280      	movs	r2, #128	; 0x80
 8009a7e:	21ee      	movs	r1, #238	; 0xee
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f002 fc77 	bl	800c374 <VL53L0X_UpdateByte>
 8009a86:	4603      	mov	r3, r0
 8009a88:	461a      	mov	r2, r3
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009a90:	2201      	movs	r2, #1
 8009a92:	21ff      	movs	r1, #255	; 0xff
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f002 fc1f 	bl	800c2d8 <VL53L0X_WrByte>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f002 fc15 	bl	800c2d8 <VL53L0X_WrByte>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009ab8:	2200      	movs	r2, #0
 8009aba:	21ff      	movs	r1, #255	; 0xff
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f002 fc0b 	bl	800c2d8 <VL53L0X_WrByte>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	7bfb      	ldrb	r3, [r7, #15]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8009acc:	7bbb      	ldrb	r3, [r7, #14]
 8009ace:	f023 0310 	bic.w	r3, r3, #16
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	701a      	strb	r2, [r3, #0]

	return Status;
 8009ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08a      	sub	sp, #40	; 0x28
 8009ae8:	af04      	add	r7, sp, #16
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	4611      	mov	r1, r2
 8009af0:	461a      	mov	r2, r3
 8009af2:	460b      	mov	r3, r1
 8009af4:	71fb      	strb	r3, [r7, #7]
 8009af6:	4613      	mov	r3, r2
 8009af8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009afa:	2300      	movs	r3, #0
 8009afc:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009afe:	2300      	movs	r3, #0
 8009b00:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009b0e:	79bb      	ldrb	r3, [r7, #6]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d003      	beq.n	8009b1c <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009b1a:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	2101      	movs	r1, #1
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f002 fbd9 	bl	800c2d8 <VL53L0X_WrByte>
 8009b26:	4603      	mov	r3, r0
 8009b28:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d105      	bne.n	8009b3e <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009b32:	2140      	movs	r1, #64	; 0x40
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f7ff ff01 	bl	800993c <VL53L0X_perform_single_ref_calibration>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d115      	bne.n	8009b72 <VL53L0X_perform_vhv_calibration+0x8e>
 8009b46:	79fb      	ldrb	r3, [r7, #7]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d112      	bne.n	8009b72 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009b4c:	7d39      	ldrb	r1, [r7, #20]
 8009b4e:	7d7a      	ldrb	r2, [r7, #21]
 8009b50:	2300      	movs	r3, #0
 8009b52:	9303      	str	r3, [sp, #12]
 8009b54:	2301      	movs	r3, #1
 8009b56:	9302      	str	r3, [sp, #8]
 8009b58:	f107 0313 	add.w	r3, r7, #19
 8009b5c:	9301      	str	r3, [sp, #4]
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	460b      	mov	r3, r1
 8009b64:	2101      	movs	r1, #1
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f7ff ff23 	bl	80099b2 <VL53L0X_ref_calibration_io>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	75fb      	strb	r3, [r7, #23]
 8009b70:	e002      	b.n	8009b78 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	2200      	movs	r2, #0
 8009b76:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009b78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d112      	bne.n	8009ba6 <VL53L0X_perform_vhv_calibration+0xc2>
 8009b80:	79bb      	ldrb	r3, [r7, #6]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00f      	beq.n	8009ba6 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009b86:	7dbb      	ldrb	r3, [r7, #22]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f002 fba3 	bl	800c2d8 <VL53L0X_WrByte>
 8009b92:	4603      	mov	r3, r0
 8009b94:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009b96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d103      	bne.n	8009ba6 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	7dba      	ldrb	r2, [r7, #22]
 8009ba2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3718      	adds	r7, #24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b08a      	sub	sp, #40	; 0x28
 8009bb6:	af04      	add	r7, sp, #16
 8009bb8:	60f8      	str	r0, [r7, #12]
 8009bba:	60b9      	str	r1, [r7, #8]
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	71fb      	strb	r3, [r7, #7]
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009bd8:	79bb      	ldrb	r3, [r7, #6]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009be4:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8009be6:	2202      	movs	r2, #2
 8009be8:	2101      	movs	r1, #1
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f002 fb74 	bl	800c2d8 <VL53L0X_WrByte>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009bf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d105      	bne.n	8009c08 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f7ff fe9c 	bl	800993c <VL53L0X_perform_single_ref_calibration>
 8009c04:	4603      	mov	r3, r0
 8009c06:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009c08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d115      	bne.n	8009c3c <VL53L0X_perform_phase_calibration+0x8a>
 8009c10:	79fb      	ldrb	r3, [r7, #7]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d112      	bne.n	8009c3c <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009c16:	7d39      	ldrb	r1, [r7, #20]
 8009c18:	7d7a      	ldrb	r2, [r7, #21]
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	9303      	str	r3, [sp, #12]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	9302      	str	r3, [sp, #8]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	f107 0313 	add.w	r3, r7, #19
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	2101      	movs	r1, #1
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f7ff febe 	bl	80099b2 <VL53L0X_ref_calibration_io>
 8009c36:	4603      	mov	r3, r0
 8009c38:	75fb      	strb	r3, [r7, #23]
 8009c3a:	e002      	b.n	8009c42 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d112      	bne.n	8009c70 <VL53L0X_perform_phase_calibration+0xbe>
 8009c4a:	79bb      	ldrb	r3, [r7, #6]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00f      	beq.n	8009c70 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009c50:	7dbb      	ldrb	r3, [r7, #22]
 8009c52:	461a      	mov	r2, r3
 8009c54:	2101      	movs	r1, #1
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f002 fb3e 	bl	800c2d8 <VL53L0X_WrByte>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009c60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d103      	bne.n	8009c70 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	7dba      	ldrb	r2, [r7, #22]
 8009c6c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009c98:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8009c9a:	78fa      	ldrb	r2, [r7, #3]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	68b9      	ldr	r1, [r7, #8]
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f7ff ff1f 	bl	8009ae4 <VL53L0X_perform_vhv_calibration>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d107      	bne.n	8009cc2 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8009cb2:	78fa      	ldrb	r2, [r7, #3]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	6879      	ldr	r1, [r7, #4]
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f7ff ff7a 	bl	8009bb2 <VL53L0X_perform_phase_calibration>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8009cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10f      	bne.n	8009cea <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009cca:	7dbb      	ldrb	r3, [r7, #22]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	2101      	movs	r1, #1
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f002 fb01 	bl	800c2d8 <VL53L0X_WrByte>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009cda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d103      	bne.n	8009cea <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	7dba      	ldrb	r2, [r7, #22]
 8009ce6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3718      	adds	r7, #24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b086      	sub	sp, #24
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8009d06:	2300      	movs	r3, #0
 8009d08:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009d0a:	f107 030f 	add.w	r3, r7, #15
 8009d0e:	4619      	mov	r1, r3
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7fe fe03 	bl	800891c <VL53L0X_GetMeasurementDataReady>
 8009d16:	4603      	mov	r3, r0
 8009d18:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8009d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10f      	bne.n	8009d42 <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d00e      	beq.n	8009d46 <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	2bc7      	cmp	r3, #199	; 0xc7
 8009d32:	d902      	bls.n	8009d3a <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009d34:	23f9      	movs	r3, #249	; 0xf9
 8009d36:	75fb      	strb	r3, [r7, #23]
			break;
 8009d38:	e006      	b.n	8009d48 <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f002 fb4e 	bl	800c3dc <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009d40:	e7e3      	b.n	8009d0a <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8009d42:	bf00      	nop
 8009d44:	e000      	b.n	8009d48 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 8009d46:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8009d48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3718      	adds	r7, #24
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	3301      	adds	r3, #1
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3714      	adds	r7, #20
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bc80      	pop	{r7}
 8009d76:	4770      	bx	lr

08009d78 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d88:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8009d8a:	e002      	b.n	8009d92 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	089b      	lsrs	r3, r3, #2
 8009d90:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d8f8      	bhi.n	8009d8c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8009d9a:	e017      	b.n	8009dcc <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	4413      	add	r3, r2
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d30b      	bcc.n	8009dc0 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	4413      	add	r3, r2
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	085b      	lsrs	r3, r3, #1
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	4413      	add	r3, r2
 8009dbc:	60fb      	str	r3, [r7, #12]
 8009dbe:	e002      	b.n	8009dc6 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	085b      	lsrs	r3, r3, #1
 8009dc4:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	089b      	lsrs	r3, r3, #2
 8009dca:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1e4      	bne.n	8009d9c <VL53L0X_isqrt+0x24>
	}

	return res;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bc80      	pop	{r7}
 8009ddc:	4770      	bx	lr

08009dde <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b086      	sub	sp, #24
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009de6:	2300      	movs	r3, #0
 8009de8:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009dea:	2200      	movs	r2, #0
 8009dec:	2183      	movs	r1, #131	; 0x83
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f002 fa72 	bl	800c2d8 <VL53L0X_WrByte>
 8009df4:	4603      	mov	r3, r0
 8009df6:	461a      	mov	r2, r3
 8009df8:	7dfb      	ldrb	r3, [r7, #23]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8009dfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d11c      	bne.n	8009e40 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009e0a:	f107 030f 	add.w	r3, r7, #15
 8009e0e:	461a      	mov	r2, r3
 8009e10:	2183      	movs	r1, #131	; 0x83
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f002 f965 	bl	800c0e2 <VL53L0X_RdByte>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d109      	bne.n	8009e36 <VL53L0X_device_read_strobe+0x58>
 8009e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d105      	bne.n	8009e36 <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	2bc7      	cmp	r3, #199	; 0xc7
 8009e34:	d9e9      	bls.n	8009e0a <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	2bc7      	cmp	r3, #199	; 0xc7
 8009e3a:	d901      	bls.n	8009e40 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009e3c:	23f9      	movs	r3, #249	; 0xf9
 8009e3e:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8009e40:	2201      	movs	r2, #1
 8009e42:	2183      	movs	r1, #131	; 0x83
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f002 fa47 	bl	800c2d8 <VL53L0X_WrByte>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	7dfb      	ldrb	r3, [r7, #23]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8009e54:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3718      	adds	r7, #24
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b098      	sub	sp, #96	; 0x60
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8009e86:	2300      	movs	r3, #0
 8009e88:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009e90:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8009e94:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8009ea8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8009eac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009eb0:	2b07      	cmp	r3, #7
 8009eb2:	f000 8408 	beq.w	800a6c6 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	2180      	movs	r1, #128	; 0x80
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f002 fa0c 	bl	800c2d8 <VL53L0X_WrByte>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009ece:	2201      	movs	r2, #1
 8009ed0:	21ff      	movs	r1, #255	; 0xff
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f002 fa00 	bl	800c2d8 <VL53L0X_WrByte>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	461a      	mov	r2, r3
 8009edc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2100      	movs	r1, #0
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f002 f9f4 	bl	800c2d8 <VL53L0X_WrByte>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009efe:	2206      	movs	r2, #6
 8009f00:	21ff      	movs	r1, #255	; 0xff
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f002 f9e8 	bl	800c2d8 <VL53L0X_WrByte>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f10:	4313      	orrs	r3, r2
 8009f12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009f16:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	2183      	movs	r1, #131	; 0x83
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f002 f8df 	bl	800c0e2 <VL53L0X_RdByte>
 8009f24:	4603      	mov	r3, r0
 8009f26:	461a      	mov	r2, r3
 8009f28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8009f32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f36:	f043 0304 	orr.w	r3, r3, #4
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	2183      	movs	r1, #131	; 0x83
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f002 f9c9 	bl	800c2d8 <VL53L0X_WrByte>
 8009f46:	4603      	mov	r3, r0
 8009f48:	461a      	mov	r2, r3
 8009f4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8009f54:	2207      	movs	r2, #7
 8009f56:	21ff      	movs	r1, #255	; 0xff
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f002 f9bd 	bl	800c2d8 <VL53L0X_WrByte>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	461a      	mov	r2, r3
 8009f62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f66:	4313      	orrs	r3, r2
 8009f68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	2181      	movs	r1, #129	; 0x81
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f002 f9b1 	bl	800c2d8 <VL53L0X_WrByte>
 8009f76:	4603      	mov	r3, r0
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f002 fa29 	bl	800c3dc <VL53L0X_PollingDelay>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f92:	4313      	orrs	r3, r2
 8009f94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009f98:	2201      	movs	r2, #1
 8009f9a:	2180      	movs	r1, #128	; 0x80
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f002 f99b 	bl	800c2d8 <VL53L0X_WrByte>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009faa:	4313      	orrs	r3, r2
 8009fac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8009fb0:	78fb      	ldrb	r3, [r7, #3]
 8009fb2:	f003 0301 	and.w	r3, r3, #1
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f000 8098 	beq.w	800a0ec <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009fbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009fc0:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f040 8091 	bne.w	800a0ec <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009fca:	226b      	movs	r2, #107	; 0x6b
 8009fcc:	2194      	movs	r1, #148	; 0x94
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f002 f982 	bl	800c2d8 <VL53L0X_WrByte>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7ff fefb 	bl	8009dde <VL53L0X_device_read_strobe>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	461a      	mov	r2, r3
 8009fec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009ff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	2190      	movs	r1, #144	; 0x90
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f002 f92e 	bl	800c260 <VL53L0X_RdDWord>
 800a004:	4603      	mov	r3, r0
 800a006:	461a      	mov	r2, r3
 800a008:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a00c:	4313      	orrs	r3, r2
 800a00e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a014:	0a1b      	lsrs	r3, r3, #8
 800a016:	b2db      	uxtb	r3, r3
 800a018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a01c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800a020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a022:	0bdb      	lsrs	r3, r3, #15
 800a024:	b2db      	uxtb	r3, r3
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800a02e:	2224      	movs	r2, #36	; 0x24
 800a030:	2194      	movs	r1, #148	; 0x94
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f002 f950 	bl	800c2d8 <VL53L0X_WrByte>
 800a038:	4603      	mov	r3, r0
 800a03a:	461a      	mov	r2, r3
 800a03c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a040:	4313      	orrs	r3, r2
 800a042:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7ff fec9 	bl	8009dde <VL53L0X_device_read_strobe>
 800a04c:	4603      	mov	r3, r0
 800a04e:	461a      	mov	r2, r3
 800a050:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a054:	4313      	orrs	r3, r2
 800a056:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a05a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a05e:	461a      	mov	r2, r3
 800a060:	2190      	movs	r1, #144	; 0x90
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f002 f8fc 	bl	800c260 <VL53L0X_RdDWord>
 800a068:	4603      	mov	r3, r0
 800a06a:	461a      	mov	r2, r3
 800a06c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a070:	4313      	orrs	r3, r2
 800a072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	0e1b      	lsrs	r3, r3, #24
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	0c1b      	lsrs	r3, r3, #16
 800a082:	b2db      	uxtb	r3, r3
 800a084:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	0a1b      	lsrs	r3, r3, #8
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	b2db      	uxtb	r3, r3
 800a092:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800a094:	2225      	movs	r2, #37	; 0x25
 800a096:	2194      	movs	r1, #148	; 0x94
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f002 f91d 	bl	800c2d8 <VL53L0X_WrByte>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7ff fe96 	bl	8009dde <VL53L0X_device_read_strobe>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a0c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	2190      	movs	r1, #144	; 0x90
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f002 f8c9 	bl	800c260 <VL53L0X_RdDWord>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800a0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0de:	0e1b      	lsrs	r3, r3, #24
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e6:	0c1b      	lsrs	r3, r3, #16
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800a0ec:	78fb      	ldrb	r3, [r7, #3]
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 8189 	beq.w	800a40a <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a0f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a0fc:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a100:	2b00      	cmp	r3, #0
 800a102:	f040 8182 	bne.w	800a40a <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800a106:	2202      	movs	r2, #2
 800a108:	2194      	movs	r1, #148	; 0x94
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f002 f8e4 	bl	800c2d8 <VL53L0X_WrByte>
 800a110:	4603      	mov	r3, r0
 800a112:	461a      	mov	r2, r3
 800a114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a118:	4313      	orrs	r3, r2
 800a11a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f7ff fe5d 	bl	8009dde <VL53L0X_device_read_strobe>
 800a124:	4603      	mov	r3, r0
 800a126:	461a      	mov	r2, r3
 800a128:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a12c:	4313      	orrs	r3, r2
 800a12e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800a132:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800a136:	461a      	mov	r2, r3
 800a138:	2190      	movs	r1, #144	; 0x90
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f001 ffd1 	bl	800c0e2 <VL53L0X_RdByte>
 800a140:	4603      	mov	r3, r0
 800a142:	461a      	mov	r2, r3
 800a144:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a148:	4313      	orrs	r3, r2
 800a14a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a14e:	227b      	movs	r2, #123	; 0x7b
 800a150:	2194      	movs	r1, #148	; 0x94
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f002 f8c0 	bl	800c2d8 <VL53L0X_WrByte>
 800a158:	4603      	mov	r3, r0
 800a15a:	461a      	mov	r2, r3
 800a15c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a160:	4313      	orrs	r3, r2
 800a162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7ff fe39 	bl	8009dde <VL53L0X_device_read_strobe>
 800a16c:	4603      	mov	r3, r0
 800a16e:	461a      	mov	r2, r3
 800a170:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a174:	4313      	orrs	r3, r2
 800a176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800a17a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800a17e:	461a      	mov	r2, r3
 800a180:	2190      	movs	r1, #144	; 0x90
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f001 ffad 	bl	800c0e2 <VL53L0X_RdByte>
 800a188:	4603      	mov	r3, r0
 800a18a:	461a      	mov	r2, r3
 800a18c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a190:	4313      	orrs	r3, r2
 800a192:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800a196:	2277      	movs	r2, #119	; 0x77
 800a198:	2194      	movs	r1, #148	; 0x94
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f002 f89c 	bl	800c2d8 <VL53L0X_WrByte>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7ff fe15 	bl	8009dde <VL53L0X_device_read_strobe>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a1c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	2190      	movs	r1, #144	; 0x90
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f002 f848 	bl	800c260 <VL53L0X_RdDWord>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800a1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e0:	0e5b      	lsrs	r3, r3, #25
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ee:	0c9b      	lsrs	r3, r3, #18
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fc:	0adb      	lsrs	r3, r3, #11
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a204:	b2db      	uxtb	r3, r3
 800a206:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800a208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20a:	091b      	lsrs	r3, r3, #4
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a212:	b2db      	uxtb	r3, r3
 800a214:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800a216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	00db      	lsls	r3, r3, #3
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800a222:	b2db      	uxtb	r3, r3
 800a224:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800a228:	2278      	movs	r2, #120	; 0x78
 800a22a:	2194      	movs	r1, #148	; 0x94
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f002 f853 	bl	800c2d8 <VL53L0X_WrByte>
 800a232:	4603      	mov	r3, r0
 800a234:	461a      	mov	r2, r3
 800a236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a23a:	4313      	orrs	r3, r2
 800a23c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f7ff fdcc 	bl	8009dde <VL53L0X_device_read_strobe>
 800a246:	4603      	mov	r3, r0
 800a248:	461a      	mov	r2, r3
 800a24a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a24e:	4313      	orrs	r3, r2
 800a250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a254:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a258:	461a      	mov	r2, r3
 800a25a:	2190      	movs	r1, #144	; 0x90
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f001 ffff 	bl	800c260 <VL53L0X_RdDWord>
 800a262:	4603      	mov	r3, r0
 800a264:	461a      	mov	r2, r3
 800a266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a26a:	4313      	orrs	r3, r2
 800a26c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800a270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a272:	0f5b      	lsrs	r3, r3, #29
 800a274:	b2db      	uxtb	r3, r3
 800a276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a27a:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800a27c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a280:	4413      	add	r3, r2
 800a282:	b2db      	uxtb	r3, r3
 800a284:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800a286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a288:	0d9b      	lsrs	r3, r3, #22
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a290:	b2db      	uxtb	r3, r3
 800a292:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800a294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a296:	0bdb      	lsrs	r3, r3, #15
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	0a1b      	lsrs	r3, r3, #8
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b2:	085b      	lsrs	r3, r3, #1
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800a2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	019b      	lsls	r3, r3, #6
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800a2d0:	2279      	movs	r2, #121	; 0x79
 800a2d2:	2194      	movs	r1, #148	; 0x94
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f001 ffff 	bl	800c2d8 <VL53L0X_WrByte>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	461a      	mov	r2, r3
 800a2de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff fd78 	bl	8009dde <VL53L0X_device_read_strobe>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a2fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a300:	461a      	mov	r2, r3
 800a302:	2190      	movs	r1, #144	; 0x90
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f001 ffab 	bl	800c260 <VL53L0X_RdDWord>
 800a30a:	4603      	mov	r3, r0
 800a30c:	461a      	mov	r2, r3
 800a30e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a312:	4313      	orrs	r3, r2
 800a314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800a318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31a:	0e9b      	lsrs	r3, r3, #26
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a322:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800a324:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a328:	4413      	add	r3, r2
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800a32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a330:	0cdb      	lsrs	r3, r3, #19
 800a332:	b2db      	uxtb	r3, r3
 800a334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33e:	0b1b      	lsrs	r3, r3, #12
 800a340:	b2db      	uxtb	r3, r3
 800a342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a346:	b2db      	uxtb	r3, r3
 800a348:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800a34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34c:	095b      	lsrs	r3, r3, #5
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a354:	b2db      	uxtb	r3, r3
 800a356:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800a358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800a364:	b2db      	uxtb	r3, r3
 800a366:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800a36a:	227a      	movs	r2, #122	; 0x7a
 800a36c:	2194      	movs	r1, #148	; 0x94
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f001 ffb2 	bl	800c2d8 <VL53L0X_WrByte>
 800a374:	4603      	mov	r3, r0
 800a376:	461a      	mov	r2, r3
 800a378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a37c:	4313      	orrs	r3, r2
 800a37e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f7ff fd2b 	bl	8009dde <VL53L0X_device_read_strobe>
 800a388:	4603      	mov	r3, r0
 800a38a:	461a      	mov	r2, r3
 800a38c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a390:	4313      	orrs	r3, r2
 800a392:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a39a:	461a      	mov	r2, r3
 800a39c:	2190      	movs	r1, #144	; 0x90
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f001 ff5e 	bl	800c260 <VL53L0X_RdDWord>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	0f9b      	lsrs	r3, r3, #30
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3bc:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800a3be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3c2:	4413      	add	r3, r2
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ca:	0ddb      	lsrs	r3, r3, #23
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	0c1b      	lsrs	r3, r3, #16
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e6:	0a5b      	lsrs	r3, r3, #9
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	089b      	lsrs	r3, r3, #2
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800a404:	2300      	movs	r3, #0
 800a406:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800a40a:	78fb      	ldrb	r3, [r7, #3]
 800a40c:	f003 0304 	and.w	r3, r3, #4
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 80f1 	beq.w	800a5f8 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a416:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a41a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a41e:	2b00      	cmp	r3, #0
 800a420:	f040 80ea 	bne.w	800a5f8 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a424:	227b      	movs	r2, #123	; 0x7b
 800a426:	2194      	movs	r1, #148	; 0x94
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f001 ff55 	bl	800c2d8 <VL53L0X_WrByte>
 800a42e:	4603      	mov	r3, r0
 800a430:	461a      	mov	r2, r3
 800a432:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a436:	4313      	orrs	r3, r2
 800a438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7ff fcce 	bl	8009dde <VL53L0X_device_read_strobe>
 800a442:	4603      	mov	r3, r0
 800a444:	461a      	mov	r2, r3
 800a446:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a44a:	4313      	orrs	r3, r2
 800a44c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800a450:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a454:	461a      	mov	r2, r3
 800a456:	2190      	movs	r1, #144	; 0x90
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f001 ff01 	bl	800c260 <VL53L0X_RdDWord>
 800a45e:	4603      	mov	r3, r0
 800a460:	461a      	mov	r2, r3
 800a462:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a466:	4313      	orrs	r3, r2
 800a468:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800a46c:	227c      	movs	r2, #124	; 0x7c
 800a46e:	2194      	movs	r1, #148	; 0x94
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f001 ff31 	bl	800c2d8 <VL53L0X_WrByte>
 800a476:	4603      	mov	r3, r0
 800a478:	461a      	mov	r2, r3
 800a47a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a47e:	4313      	orrs	r3, r2
 800a480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff fcaa 	bl	8009dde <VL53L0X_device_read_strobe>
 800a48a:	4603      	mov	r3, r0
 800a48c:	461a      	mov	r2, r3
 800a48e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a492:	4313      	orrs	r3, r2
 800a494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800a498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a49c:	461a      	mov	r2, r3
 800a49e:	2190      	movs	r1, #144	; 0x90
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f001 fedd 	bl	800c260 <VL53L0X_RdDWord>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800a4b4:	2273      	movs	r2, #115	; 0x73
 800a4b6:	2194      	movs	r1, #148	; 0x94
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f001 ff0d 	bl	800c2d8 <VL53L0X_WrByte>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff fc86 	bl	8009dde <VL53L0X_device_read_strobe>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a4e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	2190      	movs	r1, #144	; 0x90
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 feb9 	bl	800c260 <VL53L0X_RdDWord>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800a500:	b29b      	uxth	r3, r3
 800a502:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800a504:	2274      	movs	r2, #116	; 0x74
 800a506:	2194      	movs	r1, #148	; 0x94
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f001 fee5 	bl	800c2d8 <VL53L0X_WrByte>
 800a50e:	4603      	mov	r3, r0
 800a510:	461a      	mov	r2, r3
 800a512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a516:	4313      	orrs	r3, r2
 800a518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff fc5e 	bl	8009dde <VL53L0X_device_read_strobe>
 800a522:	4603      	mov	r3, r0
 800a524:	461a      	mov	r2, r3
 800a526:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a52a:	4313      	orrs	r3, r2
 800a52c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a530:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a534:	461a      	mov	r2, r3
 800a536:	2190      	movs	r1, #144	; 0x90
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f001 fe91 	bl	800c260 <VL53L0X_RdDWord>
 800a53e:	4603      	mov	r3, r0
 800a540:	461a      	mov	r2, r3
 800a542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a546:	4313      	orrs	r3, r2
 800a548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800a550:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a552:	4313      	orrs	r3, r2
 800a554:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800a556:	2275      	movs	r2, #117	; 0x75
 800a558:	2194      	movs	r1, #148	; 0x94
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f001 febc 	bl	800c2d8 <VL53L0X_WrByte>
 800a560:	4603      	mov	r3, r0
 800a562:	461a      	mov	r2, r3
 800a564:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a568:	4313      	orrs	r3, r2
 800a56a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7ff fc35 	bl	8009dde <VL53L0X_device_read_strobe>
 800a574:	4603      	mov	r3, r0
 800a576:	461a      	mov	r2, r3
 800a578:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a57c:	4313      	orrs	r3, r2
 800a57e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a586:	461a      	mov	r2, r3
 800a588:	2190      	movs	r1, #144	; 0x90
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f001 fe68 	bl	800c260 <VL53L0X_RdDWord>
 800a590:	4603      	mov	r3, r0
 800a592:	461a      	mov	r2, r3
 800a594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a598:	4313      	orrs	r3, r2
 800a59a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 800a59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a0:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800a5a6:	2276      	movs	r2, #118	; 0x76
 800a5a8:	2194      	movs	r1, #148	; 0x94
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f001 fe94 	bl	800c2d8 <VL53L0X_WrByte>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7ff fc0d 	bl	8009dde <VL53L0X_device_read_strobe>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a5d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	2190      	movs	r1, #144	; 0x90
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f001 fe40 	bl	800c260 <VL53L0X_RdDWord>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800a5f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	2181      	movs	r1, #129	; 0x81
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f001 fe6b 	bl	800c2d8 <VL53L0X_WrByte>
 800a602:	4603      	mov	r3, r0
 800a604:	461a      	mov	r2, r3
 800a606:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a60a:	4313      	orrs	r3, r2
 800a60c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a610:	2206      	movs	r2, #6
 800a612:	21ff      	movs	r1, #255	; 0xff
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f001 fe5f 	bl	800c2d8 <VL53L0X_WrByte>
 800a61a:	4603      	mov	r3, r0
 800a61c:	461a      	mov	r2, r3
 800a61e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a622:	4313      	orrs	r3, r2
 800a624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a628:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a62c:	461a      	mov	r2, r3
 800a62e:	2183      	movs	r1, #131	; 0x83
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f001 fd56 	bl	800c0e2 <VL53L0X_RdByte>
 800a636:	4603      	mov	r3, r0
 800a638:	461a      	mov	r2, r3
 800a63a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a63e:	4313      	orrs	r3, r2
 800a640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800a644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a648:	f023 0304 	bic.w	r3, r3, #4
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	461a      	mov	r2, r3
 800a650:	2183      	movs	r1, #131	; 0x83
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f001 fe40 	bl	800c2d8 <VL53L0X_WrByte>
 800a658:	4603      	mov	r3, r0
 800a65a:	461a      	mov	r2, r3
 800a65c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a660:	4313      	orrs	r3, r2
 800a662:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a666:	2201      	movs	r2, #1
 800a668:	21ff      	movs	r1, #255	; 0xff
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f001 fe34 	bl	800c2d8 <VL53L0X_WrByte>
 800a670:	4603      	mov	r3, r0
 800a672:	461a      	mov	r2, r3
 800a674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a678:	4313      	orrs	r3, r2
 800a67a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a67e:	2201      	movs	r2, #1
 800a680:	2100      	movs	r1, #0
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f001 fe28 	bl	800c2d8 <VL53L0X_WrByte>
 800a688:	4603      	mov	r3, r0
 800a68a:	461a      	mov	r2, r3
 800a68c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a690:	4313      	orrs	r3, r2
 800a692:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a696:	2200      	movs	r2, #0
 800a698:	21ff      	movs	r1, #255	; 0xff
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f001 fe1c 	bl	800c2d8 <VL53L0X_WrByte>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	2180      	movs	r1, #128	; 0x80
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f001 fe10 	bl	800c2d8 <VL53L0X_WrByte>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a6c6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f040 808f 	bne.w	800a7ee <VL53L0X_get_info_from_device+0x98e>
 800a6d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a6d4:	2b07      	cmp	r3, #7
 800a6d6:	f000 808a 	beq.w	800a7ee <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800a6da:	78fb      	ldrb	r3, [r7, #3]
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d024      	beq.n	800a72e <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a6e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a6e8:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d11e      	bne.n	800a72e <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800a6f6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800a700:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a704:	2300      	movs	r3, #0
 800a706:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a708:	e00e      	b.n	800a728 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800a70a:	f107 0208 	add.w	r2, r7, #8
 800a70e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a710:	4413      	add	r3, r2
 800a712:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a718:	4413      	add	r3, r2
 800a71a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a71e:	460a      	mov	r2, r1
 800a720:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a724:	3301      	adds	r3, #1
 800a726:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a72a:	2b05      	cmp	r3, #5
 800a72c:	dded      	ble.n	800a70a <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800a72e:	78fb      	ldrb	r3, [r7, #3]
 800a730:	f003 0302 	and.w	r3, r3, #2
 800a734:	2b00      	cmp	r3, #0
 800a736:	d018      	beq.n	800a76a <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a738:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a73c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a740:	2b00      	cmp	r3, #0
 800a742:	d112      	bne.n	800a76a <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a744:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a74e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	33f3      	adds	r3, #243	; 0xf3
 800a75c:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800a75e:	f107 0310 	add.w	r3, r7, #16
 800a762:	4619      	mov	r1, r3
 800a764:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a766:	f001 fecf 	bl	800c508 <strcpy>

		}

		if (((option & 4) == 4) &&
 800a76a:	78fb      	ldrb	r3, [r7, #3]
 800a76c:	f003 0304 	and.w	r3, r3, #4
 800a770:	2b00      	cmp	r3, #0
 800a772:	d030      	beq.n	800a7d6 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a774:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a778:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d12a      	bne.n	800a7d6 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800a790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a792:	025b      	lsls	r3, r3, #9
 800a794:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a79a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800a7a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d011      	beq.n	800a7ce <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800a7aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a7ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800a7b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7b8:	fb02 f303 	mul.w	r3, r2, r3
 800a7bc:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800a7be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800a7c2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a7c6:	425b      	negs	r3, r3
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800a7ce:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800a7d6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a7da:	78fb      	ldrb	r3, [r7, #3]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800a7e4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a7ee:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3760      	adds	r7, #96	; 0x60
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b087      	sub	sp, #28
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	460b      	mov	r3, r1
 800a804:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800a806:	f240 6277 	movw	r2, #1655	; 0x677
 800a80a:	f04f 0300 	mov.w	r3, #0
 800a80e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800a812:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800a816:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800a818:	78fb      	ldrb	r3, [r7, #3]
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	fb02 f303 	mul.w	r3, r2, r3
 800a826:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800a828:	68bb      	ldr	r3, [r7, #8]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	371c      	adds	r7, #28
 800a82e:	46bd      	mov	sp, r7
 800a830:	bc80      	pop	{r7}
 800a832:	4770      	bx	lr

0800a834 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d017      	beq.n	800a87e <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	3b01      	subs	r3, #1
 800a852:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a854:	e005      	b.n	800a862 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	085b      	lsrs	r3, r3, #1
 800a85a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a85c:	89fb      	ldrh	r3, [r7, #14]
 800a85e:	3301      	adds	r3, #1
 800a860:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1f4      	bne.n	800a856 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a86c:	89fb      	ldrh	r3, [r7, #14]
 800a86e:	021b      	lsls	r3, r3, #8
 800a870:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	b29b      	uxth	r3, r3
 800a876:	b2db      	uxtb	r3, r3
 800a878:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a87a:	4413      	add	r3, r2
 800a87c:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a87e:	8afb      	ldrh	r3, [r7, #22]

}
 800a880:	4618      	mov	r0, r3
 800a882:	371c      	adds	r7, #28
 800a884:	46bd      	mov	sp, r7
 800a886:	bc80      	pop	{r7}
 800a888:	4770      	bx	lr

0800a88a <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a88a:	b480      	push	{r7}
 800a88c:	b085      	sub	sp, #20
 800a88e:	af00      	add	r7, sp, #0
 800a890:	4603      	mov	r3, r0
 800a892:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a894:	2300      	movs	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a898:	88fb      	ldrh	r3, [r7, #6]
 800a89a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a89c:	88fa      	ldrh	r2, [r7, #6]
 800a89e:	0a12      	lsrs	r2, r2, #8
 800a8a0:	b292      	uxth	r2, r2
 800a8a2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bc80      	pop	{r7}
 800a8b2:	4770      	bx	lr

0800a8b4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b088      	sub	sp, #32
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a8c6:	79fb      	ldrb	r3, [r7, #7]
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f7ff ff95 	bl	800a7fa <VL53L0X_calc_macro_period_ps>
 800a8d0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a8d8:	4a0a      	ldr	r2, [pc, #40]	; (800a904 <VL53L0X_calc_timeout_mclks+0x50>)
 800a8da:	fba2 2303 	umull	r2, r3, r2, r3
 800a8de:	099b      	lsrs	r3, r3, #6
 800a8e0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a8e8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	085b      	lsrs	r3, r3, #1
 800a8f0:	441a      	add	r2, r3
	timeout_period_mclks =
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8f8:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800a8fa:	69fb      	ldr	r3, [r7, #28]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3720      	adds	r7, #32
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	10624dd3 	.word	0x10624dd3

0800a908 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	460b      	mov	r3, r1
 800a912:	807b      	strh	r3, [r7, #2]
 800a914:	4613      	mov	r3, r2
 800a916:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a918:	2300      	movs	r3, #0
 800a91a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a91c:	787b      	ldrb	r3, [r7, #1]
 800a91e:	4619      	mov	r1, r3
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f7ff ff6a 	bl	800a7fa <VL53L0X_calc_macro_period_ps>
 800a926:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a92e:	4a0b      	ldr	r2, [pc, #44]	; (800a95c <VL53L0X_calc_timeout_us+0x54>)
 800a930:	fba2 2303 	umull	r2, r3, r2, r3
 800a934:	099b      	lsrs	r3, r3, #6
 800a936:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 800a938:	887b      	ldrh	r3, [r7, #2]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / 1000;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	085b      	lsrs	r3, r3, #1
 800a944:	4413      	add	r3, r2
	actual_timeout_period_us =
 800a946:	4a05      	ldr	r2, [pc, #20]	; (800a95c <VL53L0X_calc_timeout_us+0x54>)
 800a948:	fba2 2303 	umull	r2, r3, r2, r3
 800a94c:	099b      	lsrs	r3, r3, #6
 800a94e:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a950:	697b      	ldr	r3, [r7, #20]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3718      	adds	r7, #24
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	10624dd3 	.word	0x10624dd3

0800a960 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b08c      	sub	sp, #48	; 0x30
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	460b      	mov	r3, r1
 800a96a:	607a      	str	r2, [r7, #4]
 800a96c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a96e:	2300      	movs	r3, #0
 800a970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a974:	2300      	movs	r3, #0
 800a976:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a97e:	2300      	movs	r3, #0
 800a980:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a986:	7afb      	ldrb	r3, [r7, #11]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d005      	beq.n	800a998 <get_sequence_step_timeout+0x38>
 800a98c:	7afb      	ldrb	r3, [r7, #11]
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d002      	beq.n	800a998 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a992:	7afb      	ldrb	r3, [r7, #11]
 800a994:	2b02      	cmp	r3, #2
 800a996:	d128      	bne.n	800a9ea <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a998:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a99c:	461a      	mov	r2, r3
 800a99e:	2100      	movs	r1, #0
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f7fd fa90 	bl	8007ec6 <VL53L0X_GetVcselPulsePeriod>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a9ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d109      	bne.n	800a9c8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a9b4:	f107 0320 	add.w	r3, r7, #32
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	2146      	movs	r1, #70	; 0x46
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f001 fb90 	bl	800c0e2 <VL53L0X_RdByte>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a9c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7ff ff5b 	bl	800a88a <VL53L0X_decode_timeout>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a9d8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a9dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9de:	4619      	mov	r1, r3
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f7ff ff91 	bl	800a908 <VL53L0X_calc_timeout_us>
 800a9e6:	62b8      	str	r0, [r7, #40]	; 0x28
 800a9e8:	e092      	b.n	800ab10 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a9ea:	7afb      	ldrb	r3, [r7, #11]
 800a9ec:	2b03      	cmp	r3, #3
 800a9ee:	d135      	bne.n	800aa5c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a9f0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f7fd fa64 	bl	8007ec6 <VL53L0X_GetVcselPulsePeriod>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800aa04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f040 8081 	bne.w	800ab10 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aa0e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800aa12:	461a      	mov	r2, r3
 800aa14:	2100      	movs	r1, #0
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f7fd fa55 	bl	8007ec6 <VL53L0X_GetVcselPulsePeriod>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800aa22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d109      	bne.n	800aa3e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800aa2a:	f107 031e 	add.w	r3, r7, #30
 800aa2e:	461a      	mov	r2, r3
 800aa30:	2151      	movs	r1, #81	; 0x51
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f001 fbdc 	bl	800c1f0 <VL53L0X_RdWord>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800aa3e:	8bfb      	ldrh	r3, [r7, #30]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7ff ff22 	bl	800a88a <VL53L0X_decode_timeout>
 800aa46:	4603      	mov	r3, r0
 800aa48:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800aa4a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800aa4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa50:	4619      	mov	r1, r3
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f7ff ff58 	bl	800a908 <VL53L0X_calc_timeout_us>
 800aa58:	62b8      	str	r0, [r7, #40]	; 0x28
 800aa5a:	e059      	b.n	800ab10 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800aa5c:	7afb      	ldrb	r3, [r7, #11]
 800aa5e:	2b04      	cmp	r3, #4
 800aa60:	d156      	bne.n	800ab10 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800aa62:	f107 0314 	add.w	r3, r7, #20
 800aa66:	4619      	mov	r1, r3
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f7fd fb37 	bl	80080dc <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d01d      	beq.n	800aab4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aa78:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	2100      	movs	r1, #0
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f7fd fa20 	bl	8007ec6 <VL53L0X_GetVcselPulsePeriod>
 800aa86:	4603      	mov	r3, r0
 800aa88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800aa8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10f      	bne.n	800aab4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800aa94:	f107 031e 	add.w	r3, r7, #30
 800aa98:	461a      	mov	r2, r3
 800aa9a:	2151      	movs	r1, #81	; 0x51
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f001 fba7 	bl	800c1f0 <VL53L0X_RdWord>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800aaa8:	8bfb      	ldrh	r3, [r7, #30]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7ff feed 	bl	800a88a <VL53L0X_decode_timeout>
 800aab0:	4603      	mov	r3, r0
 800aab2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800aab4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d109      	bne.n	800aad0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aabc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800aac0:	461a      	mov	r2, r3
 800aac2:	2101      	movs	r1, #1
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f7fd f9fe 	bl	8007ec6 <VL53L0X_GetVcselPulsePeriod>
 800aaca:	4603      	mov	r3, r0
 800aacc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800aad0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10f      	bne.n	800aaf8 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800aad8:	f107 031c 	add.w	r3, r7, #28
 800aadc:	461a      	mov	r2, r3
 800aade:	2171      	movs	r1, #113	; 0x71
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f001 fb85 	bl	800c1f0 <VL53L0X_RdWord>
 800aae6:	4603      	mov	r3, r0
 800aae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800aaec:	8bbb      	ldrh	r3, [r7, #28]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7ff fecb 	bl	800a88a <VL53L0X_decode_timeout>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800aaf8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aafa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ab00:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ab04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab06:	4619      	mov	r1, r3
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f7ff fefd 	bl	800a908 <VL53L0X_calc_timeout_us>
 800ab0e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab14:	601a      	str	r2, [r3, #0]

	return Status;
 800ab16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3730      	adds	r7, #48	; 0x30
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b08a      	sub	sp, #40	; 0x28
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	60f8      	str	r0, [r7, #12]
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	607a      	str	r2, [r7, #4]
 800ab2e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab30:	2300      	movs	r3, #0
 800ab32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800ab36:	7afb      	ldrb	r3, [r7, #11]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d005      	beq.n	800ab48 <set_sequence_step_timeout+0x26>
 800ab3c:	7afb      	ldrb	r3, [r7, #11]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d002      	beq.n	800ab48 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800ab42:	7afb      	ldrb	r3, [r7, #11]
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d138      	bne.n	800abba <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ab48:	f107 031d 	add.w	r3, r7, #29
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	2100      	movs	r1, #0
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f7fd f9b8 	bl	8007ec6 <VL53L0X_GetVcselPulsePeriod>
 800ab56:	4603      	mov	r3, r0
 800ab58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800ab5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d11a      	bne.n	800ab9a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800ab64:	7f7b      	ldrb	r3, [r7, #29]
 800ab66:	461a      	mov	r2, r3
 800ab68:	6879      	ldr	r1, [r7, #4]
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f7ff fea2 	bl	800a8b4 <VL53L0X_calc_timeout_mclks>
 800ab70:	4603      	mov	r3, r0
 800ab72:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800ab74:	8bfb      	ldrh	r3, [r7, #30]
 800ab76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab7a:	d903      	bls.n	800ab84 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800ab7c:	23ff      	movs	r3, #255	; 0xff
 800ab7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ab82:	e004      	b.n	800ab8e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800ab84:	8bfb      	ldrh	r3, [r7, #30]
 800ab86:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ab8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ab9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f040 80ad 	bne.w	800acfe <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 800aba4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aba8:	461a      	mov	r2, r3
 800abaa:	2146      	movs	r1, #70	; 0x46
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f001 fb93 	bl	800c2d8 <VL53L0X_WrByte>
 800abb2:	4603      	mov	r3, r0
 800abb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800abb8:	e0a1      	b.n	800acfe <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800abba:	7afb      	ldrb	r3, [r7, #11]
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d135      	bne.n	800ac2c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800abc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d11b      	bne.n	800ac00 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800abc8:	f107 031d 	add.w	r3, r7, #29
 800abcc:	461a      	mov	r2, r3
 800abce:	2100      	movs	r1, #0
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f7fd f978 	bl	8007ec6 <VL53L0X_GetVcselPulsePeriod>
 800abd6:	4603      	mov	r3, r0
 800abd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800abdc:	7f7b      	ldrb	r3, [r7, #29]
 800abde:	461a      	mov	r2, r3
 800abe0:	6879      	ldr	r1, [r7, #4]
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f7ff fe66 	bl	800a8b4 <VL53L0X_calc_timeout_mclks>
 800abe8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800abea:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800abec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abee:	4618      	mov	r0, r3
 800abf0:	f7ff fe20 	bl	800a834 <VL53L0X_encode_timeout>
 800abf4:	4603      	mov	r3, r0
 800abf6:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800abf8:	8b7a      	ldrh	r2, [r7, #26]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800ac00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d108      	bne.n	800ac1a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800ac08:	8b7b      	ldrh	r3, [r7, #26]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	2151      	movs	r1, #81	; 0x51
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f001 fb86 	bl	800c320 <VL53L0X_WrWord>
 800ac14:	4603      	mov	r3, r0
 800ac16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800ac1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d16d      	bne.n	800acfe <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800ac2a:	e068      	b.n	800acfe <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	2b04      	cmp	r3, #4
 800ac30:	d162      	bne.n	800acf8 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800ac32:	f107 0314 	add.w	r3, r7, #20
 800ac36:	4619      	mov	r1, r3
 800ac38:	68f8      	ldr	r0, [r7, #12]
 800ac3a:	f7fd fa4f 	bl	80080dc <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800ac42:	7dfb      	ldrb	r3, [r7, #23]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d01d      	beq.n	800ac84 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ac48:	f107 031d 	add.w	r3, r7, #29
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	2100      	movs	r1, #0
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f7fd f938 	bl	8007ec6 <VL53L0X_GetVcselPulsePeriod>
 800ac56:	4603      	mov	r3, r0
 800ac58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800ac5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10f      	bne.n	800ac84 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800ac64:	f107 031a 	add.w	r3, r7, #26
 800ac68:	461a      	mov	r2, r3
 800ac6a:	2151      	movs	r1, #81	; 0x51
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f001 fabf 	bl	800c1f0 <VL53L0X_RdWord>
 800ac72:	4603      	mov	r3, r0
 800ac74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800ac78:	8b7b      	ldrh	r3, [r7, #26]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7ff fe05 	bl	800a88a <VL53L0X_decode_timeout>
 800ac80:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800ac82:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800ac84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d109      	bne.n	800aca0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ac8c:	f107 031d 	add.w	r3, r7, #29
 800ac90:	461a      	mov	r2, r3
 800ac92:	2101      	movs	r1, #1
 800ac94:	68f8      	ldr	r0, [r7, #12]
 800ac96:	f7fd f916 	bl	8007ec6 <VL53L0X_GetVcselPulsePeriod>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800aca0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d12a      	bne.n	800acfe <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800aca8:	7f7b      	ldrb	r3, [r7, #29]
 800acaa:	461a      	mov	r2, r3
 800acac:	6879      	ldr	r1, [r7, #4]
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f7ff fe00 	bl	800a8b4 <VL53L0X_calc_timeout_mclks>
 800acb4:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 800acb6:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800acb8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800acba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acbc:	4413      	add	r3, r2
 800acbe:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800acc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7ff fdb6 	bl	800a834 <VL53L0X_encode_timeout>
 800acc8:	4603      	mov	r3, r0
 800acca:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 800accc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d108      	bne.n	800ace6 <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800acd4:	8c3b      	ldrh	r3, [r7, #32]
 800acd6:	461a      	mov	r2, r3
 800acd8:	2171      	movs	r1, #113	; 0x71
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	f001 fb20 	bl	800c320 <VL53L0X_WrWord>
 800ace0:	4603      	mov	r3, r0
 800ace2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800ace6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acea:	2b00      	cmp	r3, #0
 800acec:	d107      	bne.n	800acfe <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800acf6:	e002      	b.n	800acfe <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800acf8:	23fc      	movs	r3, #252	; 0xfc
 800acfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800acfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3728      	adds	r7, #40	; 0x28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b086      	sub	sp, #24
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	60f8      	str	r0, [r7, #12]
 800ad12:	460b      	mov	r3, r1
 800ad14:	607a      	str	r2, [r7, #4]
 800ad16:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800ad1c:	7afb      	ldrb	r3, [r7, #11]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d002      	beq.n	800ad28 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d00a      	beq.n	800ad3c <VL53L0X_get_vcsel_pulse_period+0x32>
 800ad26:	e013      	b.n	800ad50 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ad28:	f107 0316 	add.w	r3, r7, #22
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	2150      	movs	r1, #80	; 0x50
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f001 f9d6 	bl	800c0e2 <VL53L0X_RdByte>
 800ad36:	4603      	mov	r3, r0
 800ad38:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ad3a:	e00b      	b.n	800ad54 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ad3c:	f107 0316 	add.w	r3, r7, #22
 800ad40:	461a      	mov	r2, r3
 800ad42:	2170      	movs	r1, #112	; 0x70
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f001 f9cc 	bl	800c0e2 <VL53L0X_RdByte>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ad4e:	e001      	b.n	800ad54 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad50:	23fc      	movs	r3, #252	; 0xfc
 800ad52:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ad54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d107      	bne.n	800ad6c <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ad5c:	7dbb      	ldrb	r3, [r7, #22]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fe fff8 	bl	8009d54 <VL53L0X_decode_vcsel_period>
 800ad64:	4603      	mov	r3, r0
 800ad66:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	701a      	strb	r2, [r3, #0]

	return Status;
 800ad6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3718      	adds	r7, #24
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b092      	sub	sp, #72	; 0x48
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad82:	2300      	movs	r3, #0
 800ad84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ad88:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ad8c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 800ad8e:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800ad92:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800ad94:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ad98:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ad9a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ad9e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800ada0:	f240 234e 	movw	r3, #590	; 0x24e
 800ada4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800ada6:	f240 23b2 	movw	r3, #690	; 0x2b2
 800adaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800adac:	f44f 7325 	mov.w	r3, #660	; 0x294
 800adb0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800adb2:	f240 2326 	movw	r3, #550	; 0x226
 800adb6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800adb8:	2300      	movs	r3, #0
 800adba:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800adbc:	f644 6320 	movw	r3, #20000	; 0x4e20
 800adc0:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800adc2:	2300      	movs	r3, #0
 800adc4:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	6a3b      	ldr	r3, [r7, #32]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d205      	bcs.n	800adda <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800adce:	23fc      	movs	r3, #252	; 0xfc
 800add0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800add4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800add8:	e0aa      	b.n	800af30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800adda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800addc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adde:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ade6:	f107 0314 	add.w	r3, r7, #20
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7fd f975 	bl	80080dc <VL53L0X_GetSequenceStepEnables>
 800adf2:	4603      	mov	r3, r0
 800adf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800adf8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d15b      	bne.n	800aeb8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800ae00:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d105      	bne.n	800ae12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800ae06:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d102      	bne.n	800ae12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800ae0c:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d052      	beq.n	800aeb8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800ae12:	f107 0310 	add.w	r3, r7, #16
 800ae16:	461a      	mov	r2, r3
 800ae18:	2102      	movs	r1, #2
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7ff fda0 	bl	800a960 <get_sequence_step_timeout>
 800ae20:	4603      	mov	r3, r0
 800ae22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800ae26:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800ae2e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae32:	e07d      	b.n	800af30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800ae34:	7d3b      	ldrb	r3, [r7, #20]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00f      	beq.n	800ae5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800ae3a:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800ae3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae3e:	4413      	add	r3, r2
 800ae40:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ae42:	69fa      	ldr	r2, [r7, #28]
 800ae44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d204      	bcs.n	800ae54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800ae4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	643b      	str	r3, [r7, #64]	; 0x40
 800ae52:	e002      	b.n	800ae5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae54:	23fc      	movs	r3, #252	; 0xfc
 800ae56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ae5a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d002      	beq.n	800ae68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ae62:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae66:	e063      	b.n	800af30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800ae68:	7dbb      	ldrb	r3, [r7, #22]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d011      	beq.n	800ae92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae72:	4413      	add	r3, r2
 800ae74:	005b      	lsls	r3, r3, #1
 800ae76:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ae78:	69fa      	ldr	r2, [r7, #28]
 800ae7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d204      	bcs.n	800ae8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ae80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	643b      	str	r3, [r7, #64]	; 0x40
 800ae88:	e016      	b.n	800aeb8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae8a:	23fc      	movs	r3, #252	; 0xfc
 800ae8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ae90:	e012      	b.n	800aeb8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ae92:	7d7b      	ldrb	r3, [r7, #21]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00f      	beq.n	800aeb8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae9c:	4413      	add	r3, r2
 800ae9e:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800aea0:	69fa      	ldr	r2, [r7, #28]
 800aea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d204      	bcs.n	800aeb2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800aea8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	643b      	str	r3, [r7, #64]	; 0x40
 800aeb0:	e002      	b.n	800aeb8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aeb2:	23fc      	movs	r3, #252	; 0xfc
 800aeb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800aeb8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d002      	beq.n	800aec6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800aec0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aec4:	e034      	b.n	800af30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800aec6:	7dfb      	ldrb	r3, [r7, #23]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d019      	beq.n	800af00 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800aecc:	f107 030c 	add.w	r3, r7, #12
 800aed0:	461a      	mov	r2, r3
 800aed2:	2103      	movs	r1, #3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff fd43 	bl	800a960 <get_sequence_step_timeout>
 800aeda:	4603      	mov	r3, r0
 800aedc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aee4:	4413      	add	r3, r2
 800aee6:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800aee8:	69fa      	ldr	r2, [r7, #28]
 800aeea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d204      	bcs.n	800aefa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800aef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	643b      	str	r3, [r7, #64]	; 0x40
 800aef8:	e002      	b.n	800af00 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aefa:	23fc      	movs	r3, #252	; 0xfc
 800aefc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800af00:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800af04:	2b00      	cmp	r3, #0
 800af06:	d111      	bne.n	800af2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800af08:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00e      	beq.n	800af2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800af0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 800af16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af18:	2104      	movs	r1, #4
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff fe01 	bl	800ab22 <set_sequence_step_timeout>
 800af20:	4603      	mov	r3, r0
 800af22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	683a      	ldr	r2, [r7, #0]
 800af2a:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800af2c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800af30:	4618      	mov	r0, r3
 800af32:	3748      	adds	r7, #72	; 0x48
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b090      	sub	sp, #64	; 0x40
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af42:	2300      	movs	r3, #0
 800af44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800af48:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800af4c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800af4e:	f240 7376 	movw	r3, #1910	; 0x776
 800af52:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800af54:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800af58:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800af5a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800af5e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800af60:	f240 234e 	movw	r3, #590	; 0x24e
 800af64:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800af66:	f240 23b2 	movw	r3, #690	; 0x2b2
 800af6a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800af6c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800af70:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800af72:	f240 2326 	movw	r3, #550	; 0x226
 800af76:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800af7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af80:	441a      	add	r2, r3
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800af86:	f107 0318 	add.w	r3, r7, #24
 800af8a:	4619      	mov	r1, r3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7fd f8a5 	bl	80080dc <VL53L0X_GetSequenceStepEnables>
 800af92:	4603      	mov	r3, r0
 800af94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800af98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800afa0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afa4:	e075      	b.n	800b092 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800afa6:	7e3b      	ldrb	r3, [r7, #24]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d105      	bne.n	800afb8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800afac:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d102      	bne.n	800afb8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800afb2:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d030      	beq.n	800b01a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800afb8:	f107 0310 	add.w	r3, r7, #16
 800afbc:	461a      	mov	r2, r3
 800afbe:	2102      	movs	r1, #2
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f7ff fccd 	bl	800a960 <get_sequence_step_timeout>
 800afc6:	4603      	mov	r3, r0
 800afc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800afcc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d122      	bne.n	800b01a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800afd4:	7e3b      	ldrb	r3, [r7, #24]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d007      	beq.n	800afea <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800afde:	6939      	ldr	r1, [r7, #16]
 800afe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800afe4:	441a      	add	r2, r3
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800afea:	7ebb      	ldrb	r3, [r7, #26]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d009      	beq.n	800b004 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800aff4:	6939      	ldr	r1, [r7, #16]
 800aff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff8:	440b      	add	r3, r1
 800affa:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800affc:	441a      	add	r2, r3
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	601a      	str	r2, [r3, #0]
 800b002:	e00a      	b.n	800b01a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800b004:	7e7b      	ldrb	r3, [r7, #25]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d007      	beq.n	800b01a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b00e:	6939      	ldr	r1, [r7, #16]
 800b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b012:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b014:	441a      	add	r2, r3
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b01a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d114      	bne.n	800b04c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800b022:	7efb      	ldrb	r3, [r7, #27]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d011      	beq.n	800b04c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800b028:	f107 030c 	add.w	r3, r7, #12
 800b02c:	461a      	mov	r2, r3
 800b02e:	2103      	movs	r1, #3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7ff fc95 	bl	800a960 <get_sequence_step_timeout>
 800b036:	4603      	mov	r3, r0
 800b038:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800b040:	68f9      	ldr	r1, [r7, #12]
 800b042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b044:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b046:	441a      	add	r2, r3
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b04c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b050:	2b00      	cmp	r3, #0
 800b052:	d114      	bne.n	800b07e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800b054:	7f3b      	ldrb	r3, [r7, #28]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d011      	beq.n	800b07e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800b05a:	f107 0314 	add.w	r3, r7, #20
 800b05e:	461a      	mov	r2, r3
 800b060:	2104      	movs	r1, #4
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f7ff fc7c 	bl	800a960 <get_sequence_step_timeout>
 800b068:	4603      	mov	r3, r0
 800b06a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800b072:	6979      	ldr	r1, [r7, #20]
 800b074:	6a3b      	ldr	r3, [r7, #32]
 800b076:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b078:	441a      	add	r2, r3
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b07e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b082:	2b00      	cmp	r3, #0
 800b084:	d103      	bne.n	800b08e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b08e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b092:	4618      	mov	r0, r3
 800b094:	3740      	adds	r7, #64	; 0x40
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
	...

0800b09c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b088      	sub	sp, #32
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b0ae:	e0c6      	b.n	800b23e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	683a      	ldr	r2, [r7, #0]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	74fb      	strb	r3, [r7, #19]
		Index++;
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800b0c0:	7cfb      	ldrb	r3, [r7, #19]
 800b0c2:	2bff      	cmp	r3, #255	; 0xff
 800b0c4:	f040 808d 	bne.w	800b1e2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	747b      	strb	r3, [r7, #17]
			Index++;
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800b0d8:	7c7b      	ldrb	r3, [r7, #17]
 800b0da:	2b03      	cmp	r3, #3
 800b0dc:	d87e      	bhi.n	800b1dc <VL53L0X_load_tuning_settings+0x140>
 800b0de:	a201      	add	r2, pc, #4	; (adr r2, 800b0e4 <VL53L0X_load_tuning_settings+0x48>)
 800b0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e4:	0800b0f5 	.word	0x0800b0f5
 800b0e8:	0800b12f 	.word	0x0800b12f
 800b0ec:	0800b169 	.word	0x0800b169
 800b0f0:	0800b1a3 	.word	0x0800b1a3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	683a      	ldr	r2, [r7, #0]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	743b      	strb	r3, [r7, #16]
				Index++;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	3301      	adds	r3, #1
 800b102:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	4413      	add	r3, r2
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	3301      	adds	r3, #1
 800b112:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b114:	7c3b      	ldrb	r3, [r7, #16]
 800b116:	b29b      	uxth	r3, r3
 800b118:	021b      	lsls	r3, r3, #8
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
 800b11e:	b29b      	uxth	r3, r3
 800b120:	4413      	add	r3, r2
 800b122:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	89ba      	ldrh	r2, [r7, #12]
 800b128:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800b12c:	e087      	b.n	800b23e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	4413      	add	r3, r2
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	743b      	strb	r3, [r7, #16]
				Index++;
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	3301      	adds	r3, #1
 800b13c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	4413      	add	r3, r2
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	3301      	adds	r3, #1
 800b14c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b14e:	7c3b      	ldrb	r3, [r7, #16]
 800b150:	b29b      	uxth	r3, r3
 800b152:	021b      	lsls	r3, r3, #8
 800b154:	b29a      	uxth	r2, r3
 800b156:	7bfb      	ldrb	r3, [r7, #15]
 800b158:	b29b      	uxth	r3, r3
 800b15a:	4413      	add	r3, r2
 800b15c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	89ba      	ldrh	r2, [r7, #12]
 800b162:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800b166:	e06a      	b.n	800b23e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	4413      	add	r3, r2
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	743b      	strb	r3, [r7, #16]
				Index++;
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	3301      	adds	r3, #1
 800b176:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	4413      	add	r3, r2
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	3301      	adds	r3, #1
 800b186:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b188:	7c3b      	ldrb	r3, [r7, #16]
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	021b      	lsls	r3, r3, #8
 800b18e:	b29a      	uxth	r2, r3
 800b190:	7bfb      	ldrb	r3, [r7, #15]
 800b192:	b29b      	uxth	r3, r3
 800b194:	4413      	add	r3, r2
 800b196:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	89ba      	ldrh	r2, [r7, #12]
 800b19c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800b1a0:	e04d      	b.n	800b23e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	743b      	strb	r3, [r7, #16]
				Index++;
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b1c2:	7c3b      	ldrb	r3, [r7, #16]
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	021b      	lsls	r3, r3, #8
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	4413      	add	r3, r2
 800b1d0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	89ba      	ldrh	r2, [r7, #12]
 800b1d6:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 800b1da:	e030      	b.n	800b23e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b1dc:	23fc      	movs	r3, #252	; 0xfc
 800b1de:	77fb      	strb	r3, [r7, #31]
 800b1e0:	e02d      	b.n	800b23e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800b1e2:	7cfb      	ldrb	r3, [r7, #19]
 800b1e4:	2b04      	cmp	r3, #4
 800b1e6:	d828      	bhi.n	800b23a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	74bb      	strb	r3, [r7, #18]
			Index++;
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	61bb      	str	r3, [r7, #24]
 800b1fc:	e00f      	b.n	800b21e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	4413      	add	r3, r2
 800b204:	7819      	ldrb	r1, [r3, #0]
 800b206:	f107 0208 	add.w	r2, r7, #8
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	4413      	add	r3, r2
 800b20e:	460a      	mov	r2, r1
 800b210:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	3301      	adds	r3, #1
 800b216:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	3301      	adds	r3, #1
 800b21c:	61bb      	str	r3, [r7, #24]
 800b21e:	7cfb      	ldrb	r3, [r7, #19]
 800b220:	69ba      	ldr	r2, [r7, #24]
 800b222:	429a      	cmp	r2, r3
 800b224:	dbeb      	blt.n	800b1fe <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800b226:	7cfb      	ldrb	r3, [r7, #19]
 800b228:	f107 0208 	add.w	r2, r7, #8
 800b22c:	7cb9      	ldrb	r1, [r7, #18]
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 ff82 	bl	800c138 <VL53L0X_WriteMulti>
 800b234:	4603      	mov	r3, r0
 800b236:	77fb      	strb	r3, [r7, #31]
 800b238:	e001      	b.n	800b23e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b23a:	23fc      	movs	r3, #252	; 0xfc
 800b23c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	4413      	add	r3, r2
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d004      	beq.n	800b254 <VL53L0X_load_tuning_settings+0x1b8>
 800b24a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	f43f af2e 	beq.w	800b0b0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b254:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3720      	adds	r7, #32
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b088      	sub	sp, #32
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b26c:	2300      	movs	r3, #0
 800b26e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800b276:	f107 0313 	add.w	r3, r7, #19
 800b27a:	4619      	mov	r1, r3
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f7fc fff9 	bl	8008274 <VL53L0X_GetXTalkCompensationEnable>
 800b282:	4603      	mov	r3, r0
 800b284:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800b286:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d111      	bne.n	800b2b2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800b28e:	7cfb      	ldrb	r3, [r7, #19]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00e      	beq.n	800b2b2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6a1b      	ldr	r3, [r3, #32]
 800b298:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	8a9b      	ldrh	r3, [r3, #20]
 800b29e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	fb02 f303 	mul.w	r3, r2, r3
 800b2a6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	3380      	adds	r3, #128	; 0x80
 800b2ac:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800b2b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3720      	adds	r7, #32
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b086      	sub	sp, #24
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	60f8      	str	r0, [r7, #12]
 800b2c6:	60b9      	str	r1, [r7, #8]
 800b2c8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800b2d6:	f107 0310 	add.w	r3, r7, #16
 800b2da:	461a      	mov	r2, r3
 800b2dc:	68b9      	ldr	r1, [r7, #8]
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f7ff ffbe 	bl	800b260 <VL53L0X_get_total_xtalk_rate>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800b2e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d105      	bne.n	800b2fc <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	441a      	add	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	601a      	str	r2, [r3, #0]

	return Status;
 800b2fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3718      	adds	r7, #24
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b09a      	sub	sp, #104	; 0x68
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	607a      	str	r2, [r7, #4]
 800b314:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800b316:	2312      	movs	r3, #18
 800b318:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800b31a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b31e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800b320:	2342      	movs	r3, #66	; 0x42
 800b322:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800b324:	2306      	movs	r3, #6
 800b326:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800b328:	2307      	movs	r3, #7
 800b32a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b32c:	2300      	movs	r3, #0
 800b32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 800b338:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b340:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800b342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b346:	fb02 f303 	mul.w	r3, r2, r3
 800b34a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800b34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b34e:	3380      	adds	r3, #128	; 0x80
 800b350:	0a1b      	lsrs	r3, r3, #8
 800b352:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800b354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b356:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b358:	fb02 f303 	mul.w	r3, r2, r3
 800b35c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800b35e:	2300      	movs	r3, #0
 800b360:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d01a      	beq.n	800b39e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	029b      	lsls	r3, r3, #10
 800b36c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800b372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b374:	4413      	add	r3, r2
 800b376:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800b378:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b380:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800b382:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b384:	4613      	mov	r3, r2
 800b386:	005b      	lsls	r3, r3, #1
 800b388:	4413      	add	r3, r2
 800b38a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800b38c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b38e:	fb03 f303 	mul.w	r3, r3, r3
 800b392:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800b394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b396:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b39a:	0c1b      	lsrs	r3, r3, #16
 800b39c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b3a2:	fb02 f303 	mul.w	r3, r2, r3
 800b3a6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b3ae:	0c1b      	lsrs	r3, r3, #16
 800b3b0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800b3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b4:	fb03 f303 	mul.w	r3, r3, r3
 800b3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800b3ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b3c0:	0c1b      	lsrs	r3, r3, #16
 800b3c2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800b3c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3c6:	085a      	lsrs	r2, r3, #1
 800b3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ca:	441a      	add	r2, r3
 800b3cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3d2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800b3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3d8:	fb02 f303 	mul.w	r3, r2, r3
 800b3dc:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800b3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3e4:	d302      	bcc.n	800b3ec <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800b3e6:	4b54      	ldr	r3, [pc, #336]	; (800b538 <VL53L0X_calc_dmax+0x230>)
 800b3e8:	663b      	str	r3, [r7, #96]	; 0x60
 800b3ea:	e015      	b.n	800b418 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800b3ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3ee:	085a      	lsrs	r2, r3, #1
 800b3f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3f2:	441a      	add	r2, r3
 800b3f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3fa:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800b3fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b400:	fb02 f303 	mul.w	r3, r2, r3
 800b404:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800b406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b408:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b40c:	0c1b      	lsrs	r3, r3, #16
 800b40e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800b410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b412:	fb03 f303 	mul.w	r3, r3, r3
 800b416:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800b418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b41a:	039b      	lsls	r3, r3, #14
 800b41c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b420:	4a46      	ldr	r2, [pc, #280]	; (800b53c <VL53L0X_calc_dmax+0x234>)
 800b422:	fba2 2303 	umull	r2, r3, r2, r3
 800b426:	099b      	lsrs	r3, r3, #6
 800b428:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42c:	fb03 f303 	mul.w	r3, r3, r3
 800b430:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800b432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b434:	fb03 f303 	mul.w	r3, r3, r3
 800b438:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800b43a:	6a3b      	ldr	r3, [r7, #32]
 800b43c:	3308      	adds	r3, #8
 800b43e:	091b      	lsrs	r3, r3, #4
 800b440:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800b442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b444:	6a3b      	ldr	r3, [r7, #32]
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800b44a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b44c:	4613      	mov	r3, r2
 800b44e:	005b      	lsls	r3, r3, #1
 800b450:	4413      	add	r3, r2
 800b452:	011b      	lsls	r3, r3, #4
 800b454:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b45c:	0b9b      	lsrs	r3, r3, #14
 800b45e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800b460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b464:	4413      	add	r3, r2
 800b466:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800b468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b46a:	085b      	lsrs	r3, r3, #1
 800b46c:	69ba      	ldr	r2, [r7, #24]
 800b46e:	4413      	add	r3, r2
 800b470:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800b472:	69ba      	ldr	r2, [r7, #24]
 800b474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b476:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	039b      	lsls	r3, r3, #14
 800b480:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	085b      	lsrs	r3, r3, #1
 800b486:	69ba      	ldr	r2, [r7, #24]
 800b488:	4413      	add	r3, r2
 800b48a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800b48c:	69ba      	ldr	r2, [r7, #24]
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	fbb2 f3f3 	udiv	r3, r2, r3
 800b494:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b49a:	fb02 f303 	mul.w	r3, r2, r3
 800b49e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b4a6:	4a25      	ldr	r2, [pc, #148]	; (800b53c <VL53L0X_calc_dmax+0x234>)
 800b4a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ac:	099b      	lsrs	r3, r3, #6
 800b4ae:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	011b      	lsls	r3, r3, #4
 800b4b4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b4bc:	4a1f      	ldr	r2, [pc, #124]	; (800b53c <VL53L0X_calc_dmax+0x234>)
 800b4be:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c2:	099b      	lsrs	r3, r3, #6
 800b4c4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800b4c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4c8:	3380      	adds	r3, #128	; 0x80
 800b4ca:	0a1b      	lsrs	r3, r3, #8
 800b4cc:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d008      	beq.n	800b4e6 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	085a      	lsrs	r2, r3, #1
 800b4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4da:	441a      	add	r2, r3
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4e4:	e001      	b.n	800b4ea <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800b4ea:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b4ec:	f7fe fc44 	bl	8009d78 <VL53L0X_isqrt>
 800b4f0:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d008      	beq.n	800b50a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	085a      	lsrs	r2, r3, #1
 800b4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4fe:	441a      	add	r2, r3
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	fbb2 f3f3 	udiv	r3, r2, r3
 800b506:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b508:	e001      	b.n	800b50e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800b50a:	2300      	movs	r3, #0
 800b50c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800b50e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b510:	f7fe fc32 	bl	8009d78 <VL53L0X_isqrt>
 800b514:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800b516:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b518:	693a      	ldr	r2, [r7, #16]
 800b51a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800b51c:	693a      	ldr	r2, [r7, #16]
 800b51e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b520:	429a      	cmp	r2, r3
 800b522:	d902      	bls.n	800b52a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800b524:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b526:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b528:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b52a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3768      	adds	r7, #104	; 0x68
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	fff00000 	.word	0xfff00000
 800b53c:	10624dd3 	.word	0x10624dd3

0800b540 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b0b2      	sub	sp, #200	; 0xc8
 800b544:	af04      	add	r7, sp, #16
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b54e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b552:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b556:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b55a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800b55e:	2342      	movs	r3, #66	; 0x42
 800b560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b564:	f241 235c 	movw	r3, #4700	; 0x125c
 800b568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b56c:	4b6b      	ldr	r3, [pc, #428]	; (800b71c <VL53L0X_calc_sigma_estimate+0x1dc>)
 800b56e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b572:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b576:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b57a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b57e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b582:	fbb2 f3f3 	udiv	r3, r2, r3
 800b586:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b588:	4b65      	ldr	r3, [pc, #404]	; (800b720 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800b58a:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b58c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b590:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b592:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b596:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 800b598:	f240 6377 	movw	r3, #1655	; 0x677
 800b59c:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	6a1b      	ldr	r3, [r3, #32]
 800b5a8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b5b2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b5b6:	0c1b      	lsrs	r3, r3, #16
 800b5b8:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b5c0:	f107 0310 	add.w	r3, r7, #16
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	68b9      	ldr	r1, [r7, #8]
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f7ff fe78 	bl	800b2be <VL53L0X_get_total_signal_rate>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b5d4:	f107 0314 	add.w	r3, r7, #20
 800b5d8:	461a      	mov	r2, r3
 800b5da:	68b9      	ldr	r1, [r7, #8]
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f7ff fe3f 	bl	800b260 <VL53L0X_get_total_xtalk_rate>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b5ee:	fb02 f303 	mul.w	r3, r2, r3
 800b5f2:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b5f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b5fa:	0c1b      	lsrs	r3, r3, #16
 800b5fc:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b604:	fb02 f303 	mul.w	r3, r2, r3
 800b608:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b60c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b610:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b612:	429a      	cmp	r2, r3
 800b614:	d902      	bls.n	800b61c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 800b61c:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800b620:	2b00      	cmp	r3, #0
 800b622:	d164      	bne.n	800b6ee <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b62a:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b632:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b636:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b63a:	461a      	mov	r2, r3
 800b63c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f7ff f938 	bl	800a8b4 <VL53L0X_calc_timeout_mclks>
 800b644:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b64c:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b654:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b658:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b65c:	461a      	mov	r2, r3
 800b65e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f7ff f927 	bl	800a8b4 <VL53L0X_calc_timeout_mclks>
 800b666:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b668:	2303      	movs	r3, #3
 800b66a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800b66e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b672:	2b08      	cmp	r3, #8
 800b674:	d102      	bne.n	800b67c <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 800b676:	2302      	movs	r3, #2
 800b678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b67c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b67e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b680:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b682:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b686:	fb02 f303 	mul.w	r3, r2, r3
 800b68a:	02db      	lsls	r3, r3, #11
 800b68c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b690:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b694:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b698:	4a22      	ldr	r2, [pc, #136]	; (800b724 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800b69a:	fba2 2303 	umull	r2, r3, r2, r3
 800b69e:	099b      	lsrs	r3, r3, #6
 800b6a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 800b6a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b6aa:	fb02 f303 	mul.w	r3, r2, r3
 800b6ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b6b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6b6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b6ba:	4a1a      	ldr	r2, [pc, #104]	; (800b724 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800b6bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b6c0:	099b      	lsrs	r3, r3, #6
 800b6c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	3380      	adds	r3, #128	; 0x80
 800b6ca:	0a1b      	lsrs	r3, r3, #8
 800b6cc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b6ce:	693a      	ldr	r2, [r7, #16]
 800b6d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6d4:	fb02 f303 	mul.w	r3, r2, r3
 800b6d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b6dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b6e0:	3380      	adds	r3, #128	; 0x80
 800b6e2:	0a1b      	lsrs	r3, r3, #8
 800b6e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	021b      	lsls	r3, r3, #8
 800b6ec:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b6ee:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d002      	beq.n	800b6fc <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 800b6f6:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800b6fa:	e127      	b.n	800b94c <VL53L0X_calc_sigma_estimate+0x40c>
	}

	if (peakSignalRate_kcps == 0) {
 800b6fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d112      	bne.n	800b728 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b708:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b710:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	2200      	movs	r2, #0
 800b718:	601a      	str	r2, [r3, #0]
 800b71a:	e115      	b.n	800b948 <VL53L0X_calc_sigma_estimate+0x408>
 800b71c:	028f87ae 	.word	0x028f87ae
 800b720:	0006999a 	.word	0x0006999a
 800b724:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 800b728:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d102      	bne.n	800b736 <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 800b730:	2301      	movs	r3, #1
 800b732:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b736:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b73a:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b73c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b73e:	041a      	lsls	r2, r3, #16
 800b740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b742:	fbb2 f3f3 	udiv	r3, r2, r3
 800b746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b74a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b74e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b750:	429a      	cmp	r2, r3
 800b752:	d902      	bls.n	800b75a <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b754:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b75a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b75e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b762:	fb02 f303 	mul.w	r3, r2, r3
 800b766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b76a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b76e:	4613      	mov	r3, r2
 800b770:	005b      	lsls	r3, r3, #1
 800b772:	4413      	add	r3, r2
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	4618      	mov	r0, r3
 800b778:	f7fe fafe 	bl	8009d78 <VL53L0X_isqrt>
 800b77c:	4603      	mov	r3, r0
 800b77e:	005b      	lsls	r3, r3, #1
 800b780:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	891b      	ldrh	r3, [r3, #8]
 800b786:	461a      	mov	r2, r3
 800b788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b78a:	fb02 f303 	mul.w	r3, r2, r3
 800b78e:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b792:	041a      	lsls	r2, r3, #16
 800b794:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b798:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 800b79a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b79e:	4a6d      	ldr	r2, [pc, #436]	; (800b954 <VL53L0X_calc_sigma_estimate+0x414>)
 800b7a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b7a4:	099b      	lsrs	r3, r3, #6
 800b7a6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800b7a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7aa:	041a      	lsls	r2, r3, #16
 800b7ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b7b0:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 800b7b2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800b7b6:	4a67      	ldr	r2, [pc, #412]	; (800b954 <VL53L0X_calc_sigma_estimate+0x414>)
 800b7b8:	fba2 2303 	umull	r2, r3, r2, r3
 800b7bc:	099b      	lsrs	r3, r3, #6
 800b7be:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c2:	021b      	lsls	r3, r3, #8
 800b7c4:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b7c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	bfb8      	it	lt
 800b7d2:	425b      	neglt	r3, r3
 800b7d4:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d8:	021b      	lsls	r3, r3, #8
 800b7da:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b7dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b7e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ea:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f0:	fb02 f303 	mul.w	r3, r2, r3
 800b7f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b7f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7fa:	4413      	add	r3, r2
 800b7fc:	0c1b      	lsrs	r3, r3, #16
 800b7fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 800b800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b802:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b806:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 800b808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80a:	085b      	lsrs	r3, r3, #1
 800b80c:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 800b80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b810:	fb03 f303 	mul.w	r3, r3, r3
 800b814:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 800b816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b818:	0b9b      	lsrs	r3, r3, #14
 800b81a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b820:	fb02 f303 	mul.w	r3, r2, r3
 800b824:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b828:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b82c:	0c1b      	lsrs	r3, r3, #16
 800b82e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b832:	fb03 f303 	mul.w	r3, r3, r3
 800b836:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 800b838:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b83c:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b844:	0c1b      	lsrs	r3, r3, #16
 800b846:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84a:	fb03 f303 	mul.w	r3, r3, r3
 800b84e:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b854:	4413      	add	r3, r2
 800b856:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b858:	6a38      	ldr	r0, [r7, #32]
 800b85a:	f7fe fa8d 	bl	8009d78 <VL53L0X_isqrt>
 800b85e:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	041b      	lsls	r3, r3, #16
 800b864:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	3332      	adds	r3, #50	; 0x32
 800b86a:	4a3b      	ldr	r2, [pc, #236]	; (800b958 <VL53L0X_calc_sigma_estimate+0x418>)
 800b86c:	fba2 2303 	umull	r2, r3, r2, r3
 800b870:	095a      	lsrs	r2, r3, #5
 800b872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b874:	fbb2 f3f3 	udiv	r3, r2, r3
 800b878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b87c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b880:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b884:	fb02 f303 	mul.w	r3, r2, r3
 800b888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b88c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b890:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b894:	3308      	adds	r3, #8
 800b896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 800b89a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b89e:	4a2f      	ldr	r2, [pc, #188]	; (800b95c <VL53L0X_calc_sigma_estimate+0x41c>)
 800b8a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b8a4:	0b5b      	lsrs	r3, r3, #13
 800b8a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b8aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b8ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d903      	bls.n	800b8be <VL53L0X_calc_sigma_estimate+0x37e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b8b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b8ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b8be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b8c2:	fb03 f303 	mul.w	r3, r3, r3
 800b8c6:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 800b8c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8cc:	fb03 f303 	mul.w	r3, r3, r3
 800b8d0:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b8d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	4413      	add	r3, r2
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fe fa4d 	bl	8009d78 <VL53L0X_isqrt>
 800b8de:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b8e6:	fb02 f303 	mul.w	r3, r2, r3
 800b8ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b8ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d009      	beq.n	800b908 <VL53L0X_calc_sigma_estimate+0x3c8>
 800b8f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d005      	beq.n	800b908 <VL53L0X_calc_sigma_estimate+0x3c8>
 800b8fc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b904:	429a      	cmp	r2, r3
 800b906:	d903      	bls.n	800b910 <VL53L0X_calc_sigma_estimate+0x3d0>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b908:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b90c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b916:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 800b922:	6939      	ldr	r1, [r7, #16]
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	9303      	str	r3, [sp, #12]
 800b928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b92c:	9302      	str	r3, [sp, #8]
 800b92e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b932:	9301      	str	r3, [sp, #4]
 800b934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f7ff fce3 	bl	800b308 <VL53L0X_calc_dmax>
 800b942:	4603      	mov	r3, r0
 800b944:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b948:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	37b8      	adds	r7, #184	; 0xb8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	10624dd3 	.word	0x10624dd3
 800b958:	51eb851f 	.word	0x51eb851f
 800b95c:	d1b71759 	.word	0xd1b71759

0800b960 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b090      	sub	sp, #64	; 0x40
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	607a      	str	r2, [r7, #4]
 800b96a:	461a      	mov	r2, r3
 800b96c:	460b      	mov	r3, r1
 800b96e:	72fb      	strb	r3, [r7, #11]
 800b970:	4613      	mov	r3, r2
 800b972:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b974:	2300      	movs	r3, #0
 800b976:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b97a:	2300      	movs	r3, #0
 800b97c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b980:	2300      	movs	r3, #0
 800b982:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b986:	2300      	movs	r3, #0
 800b988:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b98c:	2300      	movs	r3, #0
 800b98e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b998:	2300      	movs	r3, #0
 800b99a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b9b2:	7afb      	ldrb	r3, [r7, #11]
 800b9b4:	10db      	asrs	r3, r3, #3
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	f003 030f 	and.w	r3, r3, #15
 800b9bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b9c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d017      	beq.n	800b9f8 <VL53L0X_get_pal_range_status+0x98>
 800b9c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9cc:	2b05      	cmp	r3, #5
 800b9ce:	d013      	beq.n	800b9f8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b9d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9d4:	2b07      	cmp	r3, #7
 800b9d6:	d00f      	beq.n	800b9f8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b9d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9dc:	2b0c      	cmp	r3, #12
 800b9de:	d00b      	beq.n	800b9f8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b9e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9e4:	2b0d      	cmp	r3, #13
 800b9e6:	d007      	beq.n	800b9f8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b9e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9ec:	2b0e      	cmp	r3, #14
 800b9ee:	d003      	beq.n	800b9f8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b9f0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b9f4:	2b0f      	cmp	r3, #15
 800b9f6:	d103      	bne.n	800ba00 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b9fe:	e002      	b.n	800ba06 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800ba00:	2300      	movs	r3, #0
 800ba02:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 800ba06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d107      	bne.n	800ba1e <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ba0e:	2201      	movs	r2, #1
 800ba10:	21ff      	movs	r1, #255	; 0xff
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f000 fc60 	bl	800c2d8 <VL53L0X_WrByte>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 800ba1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d109      	bne.n	800ba3a <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 800ba26:	f107 0316 	add.w	r3, r7, #22
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	21b6      	movs	r1, #182	; 0xb6
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f000 fbde 	bl	800c1f0 <VL53L0X_RdWord>
 800ba34:	4603      	mov	r3, r0
 800ba36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800ba3a:	8afb      	ldrh	r3, [r7, #22]
 800ba3c:	025b      	lsls	r3, r3, #9
 800ba3e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 800ba40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d107      	bne.n	800ba58 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ba48:	2200      	movs	r2, #0
 800ba4a:	21ff      	movs	r1, #255	; 0xff
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f000 fc43 	bl	800c2d8 <VL53L0X_WrByte>
 800ba52:	4603      	mov	r3, r0
 800ba54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba5c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ba60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d109      	bne.n	800ba7c <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ba68:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	2100      	movs	r1, #0
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f7fc fcd3 	bl	800841c <VL53L0X_GetLimitCheckEnable>
 800ba76:	4603      	mov	r3, r0
 800ba78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800ba7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d02e      	beq.n	800bae2 <VL53L0X_get_pal_range_status+0x182>
 800ba84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d12a      	bne.n	800bae2 <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800ba8c:	f107 0310 	add.w	r3, r7, #16
 800ba90:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ba94:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f7ff fd52 	bl	800b540 <VL53L0X_calc_sigma_estimate>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800baa2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d103      	bne.n	800bab2 <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	b29a      	uxth	r2, r3
 800baae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bab0:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800bab2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d113      	bne.n	800bae2 <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800baba:	f107 0320 	add.w	r3, r7, #32
 800babe:	461a      	mov	r2, r3
 800bac0:	2100      	movs	r1, #0
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f7fc fd2e 	bl	8008524 <VL53L0X_GetLimitCheckValue>
 800bac8:	4603      	mov	r3, r0
 800baca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800bace:	6a3b      	ldr	r3, [r7, #32]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d006      	beq.n	800bae2 <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 800bad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad6:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800bad8:	429a      	cmp	r2, r3
 800bada:	d902      	bls.n	800bae2 <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800badc:	2301      	movs	r3, #1
 800bade:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bae2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d109      	bne.n	800bafe <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800baea:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800baee:	461a      	mov	r2, r3
 800baf0:	2102      	movs	r1, #2
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f7fc fc92 	bl	800841c <VL53L0X_GetLimitCheckEnable>
 800baf8:	4603      	mov	r3, r0
 800bafa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800bafe:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d017      	beq.n	800bb36 <VL53L0X_get_pal_range_status+0x1d6>
 800bb06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d113      	bne.n	800bb36 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800bb0e:	f107 031c 	add.w	r3, r7, #28
 800bb12:	461a      	mov	r2, r3
 800bb14:	2102      	movs	r1, #2
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f7fc fd04 	bl	8008524 <VL53L0X_GetLimitCheckValue>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d006      	beq.n	800bb36 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800bb28:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800bb2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d902      	bls.n	800bb36 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800bb30:	2301      	movs	r3, #1
 800bb32:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bb36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d109      	bne.n	800bb52 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bb3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb42:	461a      	mov	r2, r3
 800bb44:	2103      	movs	r1, #3
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f7fc fc68 	bl	800841c <VL53L0X_GetLimitCheckEnable>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800bb52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d023      	beq.n	800bba2 <VL53L0X_get_pal_range_status+0x242>
 800bb5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d11f      	bne.n	800bba2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800bb62:	893b      	ldrh	r3, [r7, #8]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d102      	bne.n	800bb6e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	637b      	str	r3, [r7, #52]	; 0x34
 800bb6c:	e005      	b.n	800bb7a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	021a      	lsls	r2, r3, #8
 800bb72:	893b      	ldrh	r3, [r7, #8]
 800bb74:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb78:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800bb7a:	f107 0318 	add.w	r3, r7, #24
 800bb7e:	461a      	mov	r2, r3
 800bb80:	2103      	movs	r1, #3
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f7fc fcce 	bl	8008524 <VL53L0X_GetLimitCheckValue>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d006      	beq.n	800bba2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800bb94:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800bb96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d202      	bcs.n	800bba2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bba2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d14a      	bne.n	800bc40 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800bbaa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d103      	bne.n	800bbba <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800bbb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb4:	22ff      	movs	r2, #255	; 0xff
 800bbb6:	701a      	strb	r2, [r3, #0]
 800bbb8:	e042      	b.n	800bc40 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800bbba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d007      	beq.n	800bbd2 <VL53L0X_get_pal_range_status+0x272>
 800bbc2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d003      	beq.n	800bbd2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800bbca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbce:	2b03      	cmp	r3, #3
 800bbd0:	d103      	bne.n	800bbda <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800bbd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbd4:	2205      	movs	r2, #5
 800bbd6:	701a      	strb	r2, [r3, #0]
 800bbd8:	e032      	b.n	800bc40 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800bbda:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbde:	2b06      	cmp	r3, #6
 800bbe0:	d003      	beq.n	800bbea <VL53L0X_get_pal_range_status+0x28a>
 800bbe2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbe6:	2b09      	cmp	r3, #9
 800bbe8:	d103      	bne.n	800bbf2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800bbea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbec:	2204      	movs	r2, #4
 800bbee:	701a      	strb	r2, [r3, #0]
 800bbf0:	e026      	b.n	800bc40 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800bbf2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbf6:	2b08      	cmp	r3, #8
 800bbf8:	d007      	beq.n	800bc0a <VL53L0X_get_pal_range_status+0x2aa>
 800bbfa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bbfe:	2b0a      	cmp	r3, #10
 800bc00:	d003      	beq.n	800bc0a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800bc02:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d103      	bne.n	800bc12 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800bc0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc0c:	2203      	movs	r2, #3
 800bc0e:	701a      	strb	r2, [r3, #0]
 800bc10:	e016      	b.n	800bc40 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800bc12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc16:	2b04      	cmp	r3, #4
 800bc18:	d003      	beq.n	800bc22 <VL53L0X_get_pal_range_status+0x2c2>
 800bc1a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d103      	bne.n	800bc2a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800bc22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc24:	2202      	movs	r2, #2
 800bc26:	701a      	strb	r2, [r3, #0]
 800bc28:	e00a      	b.n	800bc40 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800bc2a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d103      	bne.n	800bc3a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800bc32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc34:	2201      	movs	r2, #1
 800bc36:	701a      	strb	r2, [r3, #0]
 800bc38:	e002      	b.n	800bc40 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800bc3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800bc40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d102      	bne.n	800bc4e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800bc48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bc4e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800bc52:	461a      	mov	r2, r3
 800bc54:	2101      	movs	r1, #1
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f7fc fbe0 	bl	800841c <VL53L0X_GetLimitCheckEnable>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800bc62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d14f      	bne.n	800bd0a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800bc6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d003      	beq.n	800bc7a <VL53L0X_get_pal_range_status+0x31a>
 800bc72:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d103      	bne.n	800bc82 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc80:	e002      	b.n	800bc88 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800bc82:	2300      	movs	r3, #0
 800bc84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bc8e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800bc92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bc96:	2b04      	cmp	r3, #4
 800bc98:	d003      	beq.n	800bca2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800bc9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d103      	bne.n	800bcaa <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800bca2:	2301      	movs	r3, #1
 800bca4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca8:	e002      	b.n	800bcb0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bcb6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800bcba:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <VL53L0X_get_pal_range_status+0x36a>
 800bcc2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d103      	bne.n	800bcd2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800bcca:	2301      	movs	r3, #1
 800bccc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcd0:	e002      	b.n	800bcd8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bcde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800bce2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d003      	beq.n	800bcf2 <VL53L0X_get_pal_range_status+0x392>
 800bcea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d103      	bne.n	800bcfa <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcf8:	e002      	b.n	800bd00 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bd06:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3740      	adds	r7, #64	; 0x40
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b086      	sub	sp, #24
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	60f8      	str	r0, [r7, #12]
 800bd1e:	60b9      	str	r1, [r7, #8]
 800bd20:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd22:	2300      	movs	r3, #0
 800bd24:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800bd26:	2102      	movs	r1, #2
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f7fe f899 	bl	8009e60 <VL53L0X_get_info_from_device>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800bd32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d11c      	bne.n	800bd74 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800bd40:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 800bd42:	7dbb      	ldrb	r3, [r7, #22]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d107      	bne.n	800bd58 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	3340      	adds	r3, #64	; 0x40
 800bd52:	2200      	movs	r2, #0
 800bd54:	701a      	strb	r2, [r3, #0]
 800bd56:	e00d      	b.n	800bd74 <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	33f3      	adds	r3, #243	; 0xf3
 800bd66:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	3340      	adds	r3, #64	; 0x40
 800bd6c:	6939      	ldr	r1, [r7, #16]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f000 fbca 	bl	800c508 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3718      	adds	r7, #24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800bd80:	b5b0      	push	{r4, r5, r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800bd8e:	f107 030d 	add.w	r3, r7, #13
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	4619      	mov	r1, r3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7ff ffbd 	bl	800bd16 <VL53L0X_check_part_used>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800bda0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d13b      	bne.n	800be20 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 800bda8:	7b7b      	ldrb	r3, [r7, #13]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d108      	bne.n	800bdc0 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	4a30      	ldr	r2, [pc, #192]	; (800be74 <VL53L0X_get_device_info+0xf4>)
 800bdb2:	461c      	mov	r4, r3
 800bdb4:	4613      	mov	r3, r2
 800bdb6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bdb8:	6020      	str	r0, [r4, #0]
 800bdba:	6061      	str	r1, [r4, #4]
 800bdbc:	60a2      	str	r2, [r4, #8]
 800bdbe:	e027      	b.n	800be10 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 800bdc0:	7b7b      	ldrb	r3, [r7, #13]
 800bdc2:	2b22      	cmp	r3, #34	; 0x22
 800bdc4:	d80b      	bhi.n	800bdde <VL53L0X_get_device_info+0x5e>
 800bdc6:	7b7b      	ldrb	r3, [r7, #13]
 800bdc8:	2b20      	cmp	r3, #32
 800bdca:	d008      	beq.n	800bdde <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	4a2a      	ldr	r2, [pc, #168]	; (800be78 <VL53L0X_get_device_info+0xf8>)
 800bdd0:	461c      	mov	r4, r3
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bdd6:	6020      	str	r0, [r4, #0]
 800bdd8:	6061      	str	r1, [r4, #4]
 800bdda:	60a2      	str	r2, [r4, #8]
 800bddc:	e018      	b.n	800be10 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800bdde:	7b7b      	ldrb	r3, [r7, #13]
 800bde0:	2b26      	cmp	r3, #38	; 0x26
 800bde2:	d808      	bhi.n	800bdf6 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	4a25      	ldr	r2, [pc, #148]	; (800be7c <VL53L0X_get_device_info+0xfc>)
 800bde8:	461c      	mov	r4, r3
 800bdea:	4613      	mov	r3, r2
 800bdec:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bdee:	6020      	str	r0, [r4, #0]
 800bdf0:	6061      	str	r1, [r4, #4]
 800bdf2:	60a2      	str	r2, [r4, #8]
 800bdf4:	e00c      	b.n	800be10 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	4a21      	ldr	r2, [pc, #132]	; (800be80 <VL53L0X_get_device_info+0x100>)
 800bdfa:	461d      	mov	r5, r3
 800bdfc:	4614      	mov	r4, r2
 800bdfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be00:	6028      	str	r0, [r5, #0]
 800be02:	6069      	str	r1, [r5, #4]
 800be04:	60aa      	str	r2, [r5, #8]
 800be06:	60eb      	str	r3, [r5, #12]
 800be08:	6820      	ldr	r0, [r4, #0]
 800be0a:	6128      	str	r0, [r5, #16]
 800be0c:	7923      	ldrb	r3, [r4, #4]
 800be0e:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	3320      	adds	r3, #32
 800be14:	491b      	ldr	r1, [pc, #108]	; (800be84 <VL53L0X_get_device_info+0x104>)
 800be16:	461a      	mov	r2, r3
 800be18:	460b      	mov	r3, r1
 800be1a:	cb03      	ldmia	r3!, {r0, r1}
 800be1c:	6010      	str	r0, [r2, #0]
 800be1e:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800be20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d108      	bne.n	800be3a <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	3360      	adds	r3, #96	; 0x60
 800be2c:	461a      	mov	r2, r3
 800be2e:	21c0      	movs	r1, #192	; 0xc0
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 f956 	bl	800c0e2 <VL53L0X_RdByte>
 800be36:	4603      	mov	r3, r0
 800be38:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800be3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d112      	bne.n	800be68 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800be42:	f107 030e 	add.w	r3, r7, #14
 800be46:	461a      	mov	r2, r3
 800be48:	21c2      	movs	r1, #194	; 0xc2
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f949 	bl	800c0e2 <VL53L0X_RdByte>
 800be50:	4603      	mov	r3, r0
 800be52:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	2201      	movs	r2, #1
 800be58:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800be5c:	7bbb      	ldrb	r3, [r7, #14]
 800be5e:	091b      	lsrs	r3, r3, #4
 800be60:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 800be68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bdb0      	pop	{r4, r5, r7, pc}
 800be74:	0800c530 	.word	0x0800c530
 800be78:	0800c53c 	.word	0x0800c53c
 800be7c:	0800c548 	.word	0x0800c548
 800be80:	0800c554 	.word	0x0800c554
 800be84:	0800c56c 	.word	0x0800c56c

0800be88 <vl53l0x_init>:
#include "vl53l0x_init.h"

//ContinuousRanging
VL53L0X_Error vl53l0x_init(VL53L0X_DEV pMyDevice, VL53L0X_Version_t *pVersion, VL53L0X_DeviceInfo_t *pDeviceInfo, uint8_t address){
 800be88:	b580      	push	{r7, lr}
 800be8a:	b088      	sub	sp, #32
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	607a      	str	r2, [r7, #4]
 800be94:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be96:	2300      	movs	r3, #0
 800be98:	77fb      	strb	r3, [r7, #31]
    
	int32_t status_int;

    status_int = VL53L0X_GetVersion(pVersion);
 800be9a:	68b8      	ldr	r0, [r7, #8]
 800be9c:	f7fb fc1e 	bl	80076dc <VL53L0X_GetVersion>
 800bea0:	4603      	mov	r3, r0
 800bea2:	61bb      	str	r3, [r7, #24]
    if (status_int != 0){
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d001      	beq.n	800beae <vl53l0x_init+0x26>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800beaa:	23ec      	movs	r3, #236	; 0xec
 800beac:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800beae:	200a      	movs	r0, #10
 800beb0:	f7f8 fae0 	bl	8004474 <HAL_Delay>


    if(Status == VL53L0X_ERROR_NONE){
 800beb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d104      	bne.n	800bec6 <vl53l0x_init+0x3e>
    	Status = VL53L0X_DataInit(pMyDevice); // Data initialization
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f7fb fc65 	bl	800778c <VL53L0X_DataInit>
 800bec2:	4603      	mov	r3, r0
 800bec4:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800bec6:	200a      	movs	r0, #10
 800bec8:	f7f8 fad4 	bl	8004474 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800becc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10d      	bne.n	800bef0 <vl53l0x_init+0x68>
    	HAL_Delay(10);
 800bed4:	200a      	movs	r0, #10
 800bed6:	f7f8 facd 	bl	8004474 <HAL_Delay>
    	Status = VL53L0X_SetDeviceAddress(pMyDevice, address);
 800beda:	78fb      	ldrb	r3, [r7, #3]
 800bedc:	4619      	mov	r1, r3
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f7fb fc3c 	bl	800775c <VL53L0X_SetDeviceAddress>
 800bee4:	4603      	mov	r3, r0
 800bee6:	77fb      	strb	r3, [r7, #31]
    	pMyDevice->I2cDevAddr = address;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	78fa      	ldrb	r2, [r7, #3]
 800beec:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    }
    HAL_Delay(10);
 800bef0:	200a      	movs	r0, #10
 800bef2:	f7f8 fabf 	bl	8004474 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800bef6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d105      	bne.n	800bf0a <vl53l0x_init+0x82>
    	Status = VL53L0X_GetDeviceInfo(pMyDevice, pDeviceInfo);
 800befe:	6879      	ldr	r1, [r7, #4]
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	f7fb fc05 	bl	8007710 <VL53L0X_GetDeviceInfo>
 800bf06:	4603      	mov	r3, r0
 800bf08:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800bf0a:	200a      	movs	r0, #10
 800bf0c:	f7f8 fab2 	bl	8004474 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800bf10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d104      	bne.n	800bf22 <vl53l0x_init+0x9a>
        Status = VL53L0X_StaticInit(pMyDevice); // Device Initialization
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f7fb fd41 	bl	80079a0 <VL53L0X_StaticInit>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800bf22:	200a      	movs	r0, #10
 800bf24:	f7f8 faa6 	bl	8004474 <HAL_Delay>
    uint32_t refSpadCount;
    uint8_t isApertureSpads;
    uint8_t VhvSettings;
    uint8_t PhaseCal;

    if(Status == VL53L0X_ERROR_NONE){
 800bf28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d109      	bne.n	800bf44 <vl53l0x_init+0xbc>
    	Status = VL53L0X_PerformRefCalibration(pMyDevice, &VhvSettings, &PhaseCal); // Device Initialization
 800bf30:	f107 0211 	add.w	r2, r7, #17
 800bf34:	f107 0312 	add.w	r3, r7, #18
 800bf38:	4619      	mov	r1, r3
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f7fc fbe6 	bl	800870c <VL53L0X_PerformRefCalibration>
 800bf40:	4603      	mov	r3, r0
 800bf42:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800bf44:	200a      	movs	r0, #10
 800bf46:	f7f8 fa95 	bl	8004474 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800bf4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d109      	bne.n	800bf66 <vl53l0x_init+0xde>
    	Status = VL53L0X_PerformRefSpadManagement(pMyDevice, &refSpadCount, &isApertureSpads); // Device Initialization
 800bf52:	f107 0213 	add.w	r2, r7, #19
 800bf56:	f107 0314 	add.w	r3, r7, #20
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f7fd f82d 	bl	8008fbc <VL53L0X_PerformRefSpadManagement>
 800bf62:	4603      	mov	r3, r0
 800bf64:	77fb      	strb	r3, [r7, #31]
    }
    HAL_Delay(10);
 800bf66:	200a      	movs	r0, #10
 800bf68:	f7f8 fa84 	bl	8004474 <HAL_Delay>

    if(Status == VL53L0X_ERROR_NONE){
 800bf6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d105      	bne.n	800bf80 <vl53l0x_init+0xf8>
        Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING); // Setup in single ranging mode
 800bf74:	2101      	movs	r1, #1
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f7fb ff24 	bl	8007dc4 <VL53L0X_SetDeviceMode>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	77fb      	strb	r3, [r7, #31]
    }
    if(Status == VL53L0X_ERROR_NONE){
    	//Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pMyDevice, 30000);
    }
    HAL_Delay(10);
 800bf80:	200a      	movs	r0, #10
 800bf82:	f7f8 fa77 	bl	8004474 <HAL_Delay>
    if(Status == VL53L0X_ERROR_NONE){
 800bf86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d104      	bne.n	800bf98 <vl53l0x_init+0x110>
    	Status = VL53L0X_StartMeasurement(pMyDevice);
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	f7fc fc38 	bl	8008804 <VL53L0X_StartMeasurement>
 800bf94:	4603      	mov	r3, r0
 800bf96:	77fb      	strb	r3, [r7, #31]
    }
    return Status;
 800bf98:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3720      	adds	r7, #32
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <vl53l0x_GetRanging_now>:

VL53L0X_Error vl53l0x_GetRanging_now(VL53L0X_DEV pMyDevice, uint16_t *result) {
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b08c      	sub	sp, #48	; 0x30
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
	VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData = &RangingMeasurementData;
 800bfae:	f107 030c 	add.w	r3, r7, #12
 800bfb2:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	Status = WaitMeasurementDataReady(pMyDevice);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f81f 	bl	800bffe <WaitMeasurementDataReady>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(Status == VL53L0X_ERROR_NONE){
 800bfc6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d111      	bne.n	800bff2 <vl53l0x_GetRanging_now+0x4e>
		Status = VL53L0X_GetRangingMeasurementData(pMyDevice, pRangingMeasurementData);
 800bfce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f7fc fce3 	bl	800899c <VL53L0X_GetRangingMeasurementData>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    *result = pRangingMeasurementData->RangeMilliMeter;
 800bfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfde:	891a      	ldrh	r2, [r3, #8]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	801a      	strh	r2, [r3, #0]
		VL53L0X_ClearInterruptMask(pMyDevice, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 800bfe4:	2104      	movs	r1, #4
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7fc ff86 	bl	8008ef8 <VL53L0X_ClearInterruptMask>
	    VL53L0X_PollingDelay(pMyDevice);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 f9f5 	bl	800c3dc <VL53L0X_PollingDelay>
	}
	return Status;
 800bff2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3730      	adds	r7, #48	; 0x30
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <WaitMeasurementDataReady>:
    }

    return Status;
}

VL53L0X_Error WaitMeasurementDataReady(VL53L0X_DEV Dev) {
 800bffe:	b580      	push	{r7, lr}
 800c000:	b086      	sub	sp, #24
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c006:	2300      	movs	r3, #0
 800c008:	75fb      	strb	r3, [r7, #23]
    uint8_t NewDatReady=0;
 800c00a:	2300      	movs	r3, #0
 800c00c:	73fb      	strb	r3, [r7, #15]
    uint32_t LoopNb;

    // Wait until it finished
    // use timeout to avoid deadlock
    if (Status == VL53L0X_ERROR_NONE) {
 800c00e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d11e      	bne.n	800c054 <WaitMeasurementDataReady+0x56>
        LoopNb = 0;
 800c016:	2300      	movs	r3, #0
 800c018:	613b      	str	r3, [r7, #16]
        do {
            Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDatReady);
 800c01a:	f107 030f 	add.w	r3, r7, #15
 800c01e:	4619      	mov	r1, r3
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f7fc fc7b 	bl	800891c <VL53L0X_GetMeasurementDataReady>
 800c026:	4603      	mov	r3, r0
 800c028:	75fb      	strb	r3, [r7, #23]
            if ((NewDatReady == 0x01) || Status != VL53L0X_ERROR_NONE) {
 800c02a:	7bfb      	ldrb	r3, [r7, #15]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d00c      	beq.n	800c04a <WaitMeasurementDataReady+0x4c>
 800c030:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d108      	bne.n	800c04a <WaitMeasurementDataReady+0x4c>
                break;
            }
            LoopNb = LoopNb + 1;
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	3301      	adds	r3, #1
 800c03c:	613b      	str	r3, [r7, #16]
            VL53L0X_PollingDelay(Dev);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f9cc 	bl	800c3dc <VL53L0X_PollingDelay>
        } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	2bc7      	cmp	r3, #199	; 0xc7
 800c048:	d9e7      	bls.n	800c01a <WaitMeasurementDataReady+0x1c>

        if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	2bc7      	cmp	r3, #199	; 0xc7
 800c04e:	d901      	bls.n	800c054 <WaitMeasurementDataReady+0x56>
            Status = VL53L0X_ERROR_TIME_OUT;
 800c050:	23f9      	movs	r3, #249	; 0xf9
 800c052:	75fb      	strb	r3, [r7, #23]
        }
    }

    return Status;
 800c054:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3718      	adds	r7, #24
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800c060:	b580      	push	{r7, lr}
 800c062:	b088      	sub	sp, #32
 800c064:	af02      	add	r7, sp, #8
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	330a      	adds	r3, #10
 800c070:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800c07e:	b299      	uxth	r1, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	b29a      	uxth	r2, r3
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	4613      	mov	r3, r2
 800c08a:	68ba      	ldr	r2, [r7, #8]
 800c08c:	f7f8 fe58 	bl	8004d40 <HAL_I2C_Master_Transmit>
 800c090:	4603      	mov	r3, r0
 800c092:	613b      	str	r3, [r7, #16]
    
    return status;
 800c094:	693b      	ldr	r3, [r7, #16]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3718      	adds	r7, #24
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b088      	sub	sp, #32
 800c0a2:	af02      	add	r7, sp, #8
 800c0a4:	60f8      	str	r0, [r7, #12]
 800c0a6:	60b9      	str	r1, [r7, #8]
 800c0a8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	330a      	adds	r3, #10
 800c0ae:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800c0bc:	f043 0301 	orr.w	r3, r3, #1
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	b299      	uxth	r1, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	9300      	str	r3, [sp, #0]
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	68ba      	ldr	r2, [r7, #8]
 800c0d0:	f7f8 ff34 	bl	8004f3c <HAL_I2C_Master_Receive>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	613b      	str	r3, [r7, #16]
    
    return status;
 800c0d8:	693b      	ldr	r3, [r7, #16]
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3718      	adds	r7, #24
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b086      	sub	sp, #24
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	60f8      	str	r0, [r7, #12]
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	607a      	str	r2, [r7, #4]
 800c0ee:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800c0f4:	f107 030b 	add.w	r3, r7, #11
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f7ff ffaf 	bl	800c060 <_I2CWrite>
 800c102:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d002      	beq.n	800c110 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c10a:	23ec      	movs	r3, #236	; 0xec
 800c10c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c10e:	e00c      	b.n	800c12a <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 800c110:	2201      	movs	r2, #1
 800c112:	6879      	ldr	r1, [r7, #4]
 800c114:	68f8      	ldr	r0, [r7, #12]
 800c116:	f7ff ffc2 	bl	800c09e <_I2CRead>
 800c11a:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d002      	beq.n	800c128 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c122:	23ec      	movs	r3, #236	; 0xec
 800c124:	75fb      	strb	r3, [r7, #23]
 800c126:	e000      	b.n	800c12a <VL53L0X_RdByte+0x48>
    }
done:
 800c128:	bf00      	nop
    return Status;
 800c12a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3718      	adds	r7, #24
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
	...

0800c138 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	607a      	str	r2, [r7, #4]
 800c142:	603b      	str	r3, [r7, #0]
 800c144:	460b      	mov	r3, r1
 800c146:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c148:	2300      	movs	r3, #0
 800c14a:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	2b3f      	cmp	r3, #63	; 0x3f
 800c150:	d902      	bls.n	800c158 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800c152:	f06f 0303 	mvn.w	r3, #3
 800c156:	e016      	b.n	800c186 <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 800c158:	4a0d      	ldr	r2, [pc, #52]	; (800c190 <VL53L0X_WriteMulti+0x58>)
 800c15a:	7afb      	ldrb	r3, [r7, #11]
 800c15c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	6879      	ldr	r1, [r7, #4]
 800c162:	480c      	ldr	r0, [pc, #48]	; (800c194 <VL53L0X_WriteMulti+0x5c>)
 800c164:	f000 f9ba 	bl	800c4dc <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	3301      	adds	r3, #1
 800c16c:	461a      	mov	r2, r3
 800c16e:	4908      	ldr	r1, [pc, #32]	; (800c190 <VL53L0X_WriteMulti+0x58>)
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f7ff ff75 	bl	800c060 <_I2CWrite>
 800c176:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d001      	beq.n	800c182 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c17e:	23ec      	movs	r3, #236	; 0xec
 800c180:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 800c182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3718      	adds	r7, #24
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	2000124c 	.word	0x2000124c
 800c194:	2000124d 	.word	0x2000124d

0800c198 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800c198:	b580      	push	{r7, lr}
 800c19a:	b086      	sub	sp, #24
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	607a      	str	r2, [r7, #4]
 800c1a2:	603b      	str	r3, [r7, #0]
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 800c1ac:	f107 030b 	add.w	r3, r7, #11
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f7ff ff53 	bl	800c060 <_I2CWrite>
 800c1ba:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d002      	beq.n	800c1c8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c1c2:	23ec      	movs	r3, #236	; 0xec
 800c1c4:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c1c6:	e00c      	b.n	800c1e2 <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 800c1c8:	683a      	ldr	r2, [r7, #0]
 800c1ca:	6879      	ldr	r1, [r7, #4]
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f7ff ff66 	bl	800c09e <_I2CRead>
 800c1d2:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d002      	beq.n	800c1e0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c1da:	23ec      	movs	r3, #236	; 0xec
 800c1dc:	75fb      	strb	r3, [r7, #23]
 800c1de:	e000      	b.n	800c1e2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800c1e0:	bf00      	nop
    return Status;
 800c1e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3718      	adds	r7, #24
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
	...

0800c1f0 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	607a      	str	r2, [r7, #4]
 800c1fc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1fe:	2300      	movs	r3, #0
 800c200:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800c202:	f107 030b 	add.w	r3, r7, #11
 800c206:	2201      	movs	r2, #1
 800c208:	4619      	mov	r1, r3
 800c20a:	68f8      	ldr	r0, [r7, #12]
 800c20c:	f7ff ff28 	bl	800c060 <_I2CWrite>
 800c210:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c218:	23ec      	movs	r3, #236	; 0xec
 800c21a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c21c:	e017      	b.n	800c24e <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800c21e:	2202      	movs	r2, #2
 800c220:	490e      	ldr	r1, [pc, #56]	; (800c25c <VL53L0X_RdWord+0x6c>)
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f7ff ff3b 	bl	800c09e <_I2CRead>
 800c228:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d002      	beq.n	800c236 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c230:	23ec      	movs	r3, #236	; 0xec
 800c232:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c234:	e00b      	b.n	800c24e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800c236:	4b09      	ldr	r3, [pc, #36]	; (800c25c <VL53L0X_RdWord+0x6c>)
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	021b      	lsls	r3, r3, #8
 800c23e:	b29a      	uxth	r2, r3
 800c240:	4b06      	ldr	r3, [pc, #24]	; (800c25c <VL53L0X_RdWord+0x6c>)
 800c242:	785b      	ldrb	r3, [r3, #1]
 800c244:	b29b      	uxth	r3, r3
 800c246:	4413      	add	r3, r2
 800c248:	b29a      	uxth	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 800c24e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3718      	adds	r7, #24
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	2000124c 	.word	0x2000124c

0800c260 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af00      	add	r7, sp, #0
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	460b      	mov	r3, r1
 800c26a:	607a      	str	r2, [r7, #4]
 800c26c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c26e:	2300      	movs	r3, #0
 800c270:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800c272:	f107 030b 	add.w	r3, r7, #11
 800c276:	2201      	movs	r2, #1
 800c278:	4619      	mov	r1, r3
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f7ff fef0 	bl	800c060 <_I2CWrite>
 800c280:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d002      	beq.n	800c28e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c288:	23ec      	movs	r3, #236	; 0xec
 800c28a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c28c:	e01b      	b.n	800c2c6 <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800c28e:	2204      	movs	r2, #4
 800c290:	4910      	ldr	r1, [pc, #64]	; (800c2d4 <VL53L0X_RdDWord+0x74>)
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f7ff ff03 	bl	800c09e <_I2CRead>
 800c298:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d002      	beq.n	800c2a6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c2a0:	23ec      	movs	r3, #236	; 0xec
 800c2a2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c2a4:	e00f      	b.n	800c2c6 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800c2a6:	4b0b      	ldr	r3, [pc, #44]	; (800c2d4 <VL53L0X_RdDWord+0x74>)
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	061a      	lsls	r2, r3, #24
 800c2ac:	4b09      	ldr	r3, [pc, #36]	; (800c2d4 <VL53L0X_RdDWord+0x74>)
 800c2ae:	785b      	ldrb	r3, [r3, #1]
 800c2b0:	041b      	lsls	r3, r3, #16
 800c2b2:	441a      	add	r2, r3
 800c2b4:	4b07      	ldr	r3, [pc, #28]	; (800c2d4 <VL53L0X_RdDWord+0x74>)
 800c2b6:	789b      	ldrb	r3, [r3, #2]
 800c2b8:	021b      	lsls	r3, r3, #8
 800c2ba:	4413      	add	r3, r2
 800c2bc:	4a05      	ldr	r2, [pc, #20]	; (800c2d4 <VL53L0X_RdDWord+0x74>)
 800c2be:	78d2      	ldrb	r2, [r2, #3]
 800c2c0:	441a      	add	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	601a      	str	r2, [r3, #0]

done:
    return Status;
 800c2c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3718      	adds	r7, #24
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	2000124c 	.word	0x2000124c

0800c2d8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	70fb      	strb	r3, [r7, #3]
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800c2ec:	4a0b      	ldr	r2, [pc, #44]	; (800c31c <VL53L0X_WrByte+0x44>)
 800c2ee:	78fb      	ldrb	r3, [r7, #3]
 800c2f0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800c2f2:	4a0a      	ldr	r2, [pc, #40]	; (800c31c <VL53L0X_WrByte+0x44>)
 800c2f4:	78bb      	ldrb	r3, [r7, #2]
 800c2f6:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800c2f8:	2202      	movs	r2, #2
 800c2fa:	4908      	ldr	r1, [pc, #32]	; (800c31c <VL53L0X_WrByte+0x44>)
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f7ff feaf 	bl	800c060 <_I2CWrite>
 800c302:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d001      	beq.n	800c30e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c30a:	23ec      	movs	r3, #236	; 0xec
 800c30c:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800c30e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	2000124c 	.word	0x2000124c

0800c320 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	460b      	mov	r3, r1
 800c32a:	70fb      	strb	r3, [r7, #3]
 800c32c:	4613      	mov	r3, r2
 800c32e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c330:	2300      	movs	r3, #0
 800c332:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800c334:	4a0e      	ldr	r2, [pc, #56]	; (800c370 <VL53L0X_WrWord+0x50>)
 800c336:	78fb      	ldrb	r3, [r7, #3]
 800c338:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800c33a:	883b      	ldrh	r3, [r7, #0]
 800c33c:	0a1b      	lsrs	r3, r3, #8
 800c33e:	b29b      	uxth	r3, r3
 800c340:	b2da      	uxtb	r2, r3
 800c342:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <VL53L0X_WrWord+0x50>)
 800c344:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800c346:	883b      	ldrh	r3, [r7, #0]
 800c348:	b2da      	uxtb	r2, r3
 800c34a:	4b09      	ldr	r3, [pc, #36]	; (800c370 <VL53L0X_WrWord+0x50>)
 800c34c:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800c34e:	2203      	movs	r2, #3
 800c350:	4907      	ldr	r1, [pc, #28]	; (800c370 <VL53L0X_WrWord+0x50>)
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f7ff fe84 	bl	800c060 <_I2CWrite>
 800c358:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d001      	beq.n	800c364 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c360:	23ec      	movs	r3, #236	; 0xec
 800c362:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800c364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	2000124c 	.word	0x2000124c

0800c374 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	4608      	mov	r0, r1
 800c37e:	4611      	mov	r1, r2
 800c380:	461a      	mov	r2, r3
 800c382:	4603      	mov	r3, r0
 800c384:	70fb      	strb	r3, [r7, #3]
 800c386:	460b      	mov	r3, r1
 800c388:	70bb      	strb	r3, [r7, #2]
 800c38a:	4613      	mov	r3, r2
 800c38c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c38e:	2300      	movs	r3, #0
 800c390:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800c392:	f107 020e 	add.w	r2, r7, #14
 800c396:	78fb      	ldrb	r3, [r7, #3]
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7ff fea1 	bl	800c0e2 <VL53L0X_RdByte>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 800c3a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d110      	bne.n	800c3ce <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 800c3ac:	7bba      	ldrb	r2, [r7, #14]
 800c3ae:	78bb      	ldrb	r3, [r7, #2]
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	787b      	ldrb	r3, [r7, #1]
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800c3bc:	7bba      	ldrb	r2, [r7, #14]
 800c3be:	78fb      	ldrb	r3, [r7, #3]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7ff ff88 	bl	800c2d8 <VL53L0X_WrByte>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	73fb      	strb	r3, [r7, #15]
 800c3cc:	e000      	b.n	800c3d0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800c3ce:	bf00      	nop
done:
    return Status;
 800c3d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800c3e8:	2002      	movs	r0, #2
 800c3ea:	f7f8 f843 	bl	8004474 <HAL_Delay>
    return status;
 800c3ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3710      	adds	r7, #16
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
	...

0800c3fc <round>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c402:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800c406:	2a13      	cmp	r2, #19
 800c408:	460b      	mov	r3, r1
 800c40a:	4684      	mov	ip, r0
 800c40c:	468e      	mov	lr, r1
 800c40e:	4604      	mov	r4, r0
 800c410:	dc20      	bgt.n	800c454 <round+0x58>
 800c412:	2a00      	cmp	r2, #0
 800c414:	db0e      	blt.n	800c434 <round+0x38>
 800c416:	491e      	ldr	r1, [pc, #120]	; (800c490 <round+0x94>)
 800c418:	4111      	asrs	r1, r2
 800c41a:	ea03 0001 	and.w	r0, r3, r1
 800c41e:	4320      	orrs	r0, r4
 800c420:	d015      	beq.n	800c44e <round+0x52>
 800c422:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c426:	fa43 f202 	asr.w	r2, r3, r2
 800c42a:	4496      	add	lr, r2
 800c42c:	2400      	movs	r4, #0
 800c42e:	ea2e 0e01 	bic.w	lr, lr, r1
 800c432:	e00a      	b.n	800c44a <round+0x4e>
 800c434:	3201      	adds	r2, #1
 800c436:	bf14      	ite	ne
 800c438:	2400      	movne	r4, #0
 800c43a:	2400      	moveq	r4, #0
 800c43c:	f001 4e00 	and.w	lr, r1, #2147483648	; 0x80000000
 800c440:	bf04      	itt	eq
 800c442:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
 800c446:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
 800c44a:	4673      	mov	r3, lr
 800c44c:	46a4      	mov	ip, r4
 800c44e:	4660      	mov	r0, ip
 800c450:	4619      	mov	r1, r3
 800c452:	bd38      	pop	{r3, r4, r5, pc}
 800c454:	2a33      	cmp	r2, #51	; 0x33
 800c456:	dd08      	ble.n	800c46a <round+0x6e>
 800c458:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c45c:	d1f7      	bne.n	800c44e <round+0x52>
 800c45e:	4602      	mov	r2, r0
 800c460:	f7f3 ffa6 	bl	80003b0 <__adddf3>
 800c464:	4684      	mov	ip, r0
 800c466:	460b      	mov	r3, r1
 800c468:	e7f1      	b.n	800c44e <round+0x52>
 800c46a:	f04f 31ff 	mov.w	r1, #4294967295
 800c46e:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 800c472:	fa21 f505 	lsr.w	r5, r1, r5
 800c476:	4228      	tst	r0, r5
 800c478:	d0e9      	beq.n	800c44e <round+0x52>
 800c47a:	2301      	movs	r3, #1
 800c47c:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800c480:	fa03 f202 	lsl.w	r2, r3, r2
 800c484:	1884      	adds	r4, r0, r2
 800c486:	bf28      	it	cs
 800c488:	449e      	addcs	lr, r3
 800c48a:	ea24 0405 	bic.w	r4, r4, r5
 800c48e:	e7dc      	b.n	800c44a <round+0x4e>
 800c490:	000fffff 	.word	0x000fffff

0800c494 <__libc_init_array>:
 800c494:	b570      	push	{r4, r5, r6, lr}
 800c496:	2600      	movs	r6, #0
 800c498:	4d0c      	ldr	r5, [pc, #48]	; (800c4cc <__libc_init_array+0x38>)
 800c49a:	4c0d      	ldr	r4, [pc, #52]	; (800c4d0 <__libc_init_array+0x3c>)
 800c49c:	1b64      	subs	r4, r4, r5
 800c49e:	10a4      	asrs	r4, r4, #2
 800c4a0:	42a6      	cmp	r6, r4
 800c4a2:	d109      	bne.n	800c4b8 <__libc_init_array+0x24>
 800c4a4:	f000 f838 	bl	800c518 <_init>
 800c4a8:	2600      	movs	r6, #0
 800c4aa:	4d0a      	ldr	r5, [pc, #40]	; (800c4d4 <__libc_init_array+0x40>)
 800c4ac:	4c0a      	ldr	r4, [pc, #40]	; (800c4d8 <__libc_init_array+0x44>)
 800c4ae:	1b64      	subs	r4, r4, r5
 800c4b0:	10a4      	asrs	r4, r4, #2
 800c4b2:	42a6      	cmp	r6, r4
 800c4b4:	d105      	bne.n	800c4c2 <__libc_init_array+0x2e>
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
 800c4b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4bc:	4798      	blx	r3
 800c4be:	3601      	adds	r6, #1
 800c4c0:	e7ee      	b.n	800c4a0 <__libc_init_array+0xc>
 800c4c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4c6:	4798      	blx	r3
 800c4c8:	3601      	adds	r6, #1
 800c4ca:	e7f2      	b.n	800c4b2 <__libc_init_array+0x1e>
 800c4cc:	0800ca14 	.word	0x0800ca14
 800c4d0:	0800ca14 	.word	0x0800ca14
 800c4d4:	0800ca14 	.word	0x0800ca14
 800c4d8:	0800ca18 	.word	0x0800ca18

0800c4dc <memcpy>:
 800c4dc:	440a      	add	r2, r1
 800c4de:	4291      	cmp	r1, r2
 800c4e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4e4:	d100      	bne.n	800c4e8 <memcpy+0xc>
 800c4e6:	4770      	bx	lr
 800c4e8:	b510      	push	{r4, lr}
 800c4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4ee:	4291      	cmp	r1, r2
 800c4f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4f4:	d1f9      	bne.n	800c4ea <memcpy+0xe>
 800c4f6:	bd10      	pop	{r4, pc}

0800c4f8 <memset>:
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	4402      	add	r2, r0
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d100      	bne.n	800c502 <memset+0xa>
 800c500:	4770      	bx	lr
 800c502:	f803 1b01 	strb.w	r1, [r3], #1
 800c506:	e7f9      	b.n	800c4fc <memset+0x4>

0800c508 <strcpy>:
 800c508:	4603      	mov	r3, r0
 800c50a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c50e:	f803 2b01 	strb.w	r2, [r3], #1
 800c512:	2a00      	cmp	r2, #0
 800c514:	d1f9      	bne.n	800c50a <strcpy+0x2>
 800c516:	4770      	bx	lr

0800c518 <_init>:
 800c518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51a:	bf00      	nop
 800c51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c51e:	bc08      	pop	{r3}
 800c520:	469e      	mov	lr, r3
 800c522:	4770      	bx	lr

0800c524 <_fini>:
 800c524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c526:	bf00      	nop
 800c528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52a:	bc08      	pop	{r3}
 800c52c:	469e      	mov	lr, r3
 800c52e:	4770      	bx	lr
