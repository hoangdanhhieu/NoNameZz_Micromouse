
NoNameZz_MicroMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080079e4  080079e4  000179e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a24  08007a24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007a24  08007a24  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a24  08007a24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a24  08007a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c0c  2000000c  08007a38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c18  08007a38  00020c18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf93  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218c  00000000  00000000  0002bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002e158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  0002ed28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018688  00000000  00000000  0002f808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e99a  00000000  00000000  00047e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd2b  00000000  00000000  0005682a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3555  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003280  00000000  00000000  000e35a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080079cc 	.word	0x080079cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080079cc 	.word	0x080079cc

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_frsub>:
 8000a90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	e002      	b.n	8000a9c <__addsf3>
 8000a96:	bf00      	nop

08000a98 <__aeabi_fsub>:
 8000a98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a9c <__addsf3>:
 8000a9c:	0042      	lsls	r2, r0, #1
 8000a9e:	bf1f      	itttt	ne
 8000aa0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa4:	ea92 0f03 	teqne	r2, r3
 8000aa8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab0:	d06a      	beq.n	8000b88 <__addsf3+0xec>
 8000ab2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ab6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aba:	bfc1      	itttt	gt
 8000abc:	18d2      	addgt	r2, r2, r3
 8000abe:	4041      	eorgt	r1, r0
 8000ac0:	4048      	eorgt	r0, r1
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	bfb8      	it	lt
 8000ac6:	425b      	neglt	r3, r3
 8000ac8:	2b19      	cmp	r3, #25
 8000aca:	bf88      	it	hi
 8000acc:	4770      	bxhi	lr
 8000ace:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ae6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aea:	bf18      	it	ne
 8000aec:	4249      	negne	r1, r1
 8000aee:	ea92 0f03 	teq	r2, r3
 8000af2:	d03f      	beq.n	8000b74 <__addsf3+0xd8>
 8000af4:	f1a2 0201 	sub.w	r2, r2, #1
 8000af8:	fa41 fc03 	asr.w	ip, r1, r3
 8000afc:	eb10 000c 	adds.w	r0, r0, ip
 8000b00:	f1c3 0320 	rsb	r3, r3, #32
 8000b04:	fa01 f103 	lsl.w	r1, r1, r3
 8000b08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0c:	d502      	bpl.n	8000b14 <__addsf3+0x78>
 8000b0e:	4249      	negs	r1, r1
 8000b10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b18:	d313      	bcc.n	8000b42 <__addsf3+0xa6>
 8000b1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b1e:	d306      	bcc.n	8000b2e <__addsf3+0x92>
 8000b20:	0840      	lsrs	r0, r0, #1
 8000b22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b26:	f102 0201 	add.w	r2, r2, #1
 8000b2a:	2afe      	cmp	r2, #254	; 0xfe
 8000b2c:	d251      	bcs.n	8000bd2 <__addsf3+0x136>
 8000b2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b36:	bf08      	it	eq
 8000b38:	f020 0001 	biceq.w	r0, r0, #1
 8000b3c:	ea40 0003 	orr.w	r0, r0, r3
 8000b40:	4770      	bx	lr
 8000b42:	0049      	lsls	r1, r1, #1
 8000b44:	eb40 0000 	adc.w	r0, r0, r0
 8000b48:	3a01      	subs	r2, #1
 8000b4a:	bf28      	it	cs
 8000b4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b50:	d2ed      	bcs.n	8000b2e <__addsf3+0x92>
 8000b52:	fab0 fc80 	clz	ip, r0
 8000b56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b62:	bfaa      	itet	ge
 8000b64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b68:	4252      	neglt	r2, r2
 8000b6a:	4318      	orrge	r0, r3
 8000b6c:	bfbc      	itt	lt
 8000b6e:	40d0      	lsrlt	r0, r2
 8000b70:	4318      	orrlt	r0, r3
 8000b72:	4770      	bx	lr
 8000b74:	f092 0f00 	teq	r2, #0
 8000b78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b7c:	bf06      	itte	eq
 8000b7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b82:	3201      	addeq	r2, #1
 8000b84:	3b01      	subne	r3, #1
 8000b86:	e7b5      	b.n	8000af4 <__addsf3+0x58>
 8000b88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b90:	bf18      	it	ne
 8000b92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b96:	d021      	beq.n	8000bdc <__addsf3+0x140>
 8000b98:	ea92 0f03 	teq	r2, r3
 8000b9c:	d004      	beq.n	8000ba8 <__addsf3+0x10c>
 8000b9e:	f092 0f00 	teq	r2, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	4608      	moveq	r0, r1
 8000ba6:	4770      	bx	lr
 8000ba8:	ea90 0f01 	teq	r0, r1
 8000bac:	bf1c      	itt	ne
 8000bae:	2000      	movne	r0, #0
 8000bb0:	4770      	bxne	lr
 8000bb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bb6:	d104      	bne.n	8000bc2 <__addsf3+0x126>
 8000bb8:	0040      	lsls	r0, r0, #1
 8000bba:	bf28      	it	cs
 8000bbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc0:	4770      	bx	lr
 8000bc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bc6:	bf3c      	itt	cc
 8000bc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bxcc	lr
 8000bce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bda:	4770      	bx	lr
 8000bdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be0:	bf16      	itet	ne
 8000be2:	4608      	movne	r0, r1
 8000be4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be8:	4601      	movne	r1, r0
 8000bea:	0242      	lsls	r2, r0, #9
 8000bec:	bf06      	itte	eq
 8000bee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf2:	ea90 0f01 	teqeq	r0, r1
 8000bf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_ui2f>:
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e004      	b.n	8000c0c <__aeabi_i2f+0x8>
 8000c02:	bf00      	nop

08000c04 <__aeabi_i2f>:
 8000c04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c08:	bf48      	it	mi
 8000c0a:	4240      	negmi	r0, r0
 8000c0c:	ea5f 0c00 	movs.w	ip, r0
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c18:	4601      	mov	r1, r0
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	e01c      	b.n	8000c5a <__aeabi_l2f+0x2a>

08000c20 <__aeabi_ul2f>:
 8000c20:	ea50 0201 	orrs.w	r2, r0, r1
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e00a      	b.n	8000c44 <__aeabi_l2f+0x14>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_l2f>:
 8000c30:	ea50 0201 	orrs.w	r2, r0, r1
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c3c:	d502      	bpl.n	8000c44 <__aeabi_l2f+0x14>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	ea5f 0c01 	movs.w	ip, r1
 8000c48:	bf02      	ittt	eq
 8000c4a:	4684      	moveq	ip, r0
 8000c4c:	4601      	moveq	r1, r0
 8000c4e:	2000      	moveq	r0, #0
 8000c50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c54:	bf08      	it	eq
 8000c56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c5e:	fabc f28c 	clz	r2, ip
 8000c62:	3a08      	subs	r2, #8
 8000c64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c68:	db10      	blt.n	8000c8c <__aeabi_l2f+0x5c>
 8000c6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6e:	4463      	add	r3, ip
 8000c70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c74:	f1c2 0220 	rsb	r2, r2, #32
 8000c78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c80:	eb43 0002 	adc.w	r0, r3, r2
 8000c84:	bf08      	it	eq
 8000c86:	f020 0001 	biceq.w	r0, r0, #1
 8000c8a:	4770      	bx	lr
 8000c8c:	f102 0220 	add.w	r2, r2, #32
 8000c90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c94:	f1c2 0220 	rsb	r2, r2, #32
 8000c98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca0:	eb43 0002 	adc.w	r0, r3, r2
 8000ca4:	bf08      	it	eq
 8000ca6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000caa:	4770      	bx	lr

08000cac <__gesf2>:
 8000cac:	f04f 3cff 	mov.w	ip, #4294967295
 8000cb0:	e006      	b.n	8000cc0 <__cmpsf2+0x4>
 8000cb2:	bf00      	nop

08000cb4 <__lesf2>:
 8000cb4:	f04f 0c01 	mov.w	ip, #1
 8000cb8:	e002      	b.n	8000cc0 <__cmpsf2+0x4>
 8000cba:	bf00      	nop

08000cbc <__cmpsf2>:
 8000cbc:	f04f 0c01 	mov.w	ip, #1
 8000cc0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cc4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d011      	beq.n	8000cfc <__cmpsf2+0x40>
 8000cd8:	b001      	add	sp, #4
 8000cda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cde:	bf18      	it	ne
 8000ce0:	ea90 0f01 	teqne	r0, r1
 8000ce4:	bf58      	it	pl
 8000ce6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cea:	bf88      	it	hi
 8000cec:	17c8      	asrhi	r0, r1, #31
 8000cee:	bf38      	it	cc
 8000cf0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cf4:	bf18      	it	ne
 8000cf6:	f040 0001 	orrne.w	r0, r0, #1
 8000cfa:	4770      	bx	lr
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	d102      	bne.n	8000d08 <__cmpsf2+0x4c>
 8000d02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d06:	d105      	bne.n	8000d14 <__cmpsf2+0x58>
 8000d08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d0c:	d1e4      	bne.n	8000cd8 <__cmpsf2+0x1c>
 8000d0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d12:	d0e1      	beq.n	8000cd8 <__cmpsf2+0x1c>
 8000d14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <__aeabi_cfrcmple>:
 8000d1c:	4684      	mov	ip, r0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	4661      	mov	r1, ip
 8000d22:	e7ff      	b.n	8000d24 <__aeabi_cfcmpeq>

08000d24 <__aeabi_cfcmpeq>:
 8000d24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d26:	f7ff ffc9 	bl	8000cbc <__cmpsf2>
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	bf48      	it	mi
 8000d2e:	f110 0f00 	cmnmi.w	r0, #0
 8000d32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d34 <__aeabi_fcmpeq>:
 8000d34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d38:	f7ff fff4 	bl	8000d24 <__aeabi_cfcmpeq>
 8000d3c:	bf0c      	ite	eq
 8000d3e:	2001      	moveq	r0, #1
 8000d40:	2000      	movne	r0, #0
 8000d42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d46:	bf00      	nop

08000d48 <__aeabi_fcmplt>:
 8000d48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d4c:	f7ff ffea 	bl	8000d24 <__aeabi_cfcmpeq>
 8000d50:	bf34      	ite	cc
 8000d52:	2001      	movcc	r0, #1
 8000d54:	2000      	movcs	r0, #0
 8000d56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5a:	bf00      	nop

08000d5c <__aeabi_fcmple>:
 8000d5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d60:	f7ff ffe0 	bl	8000d24 <__aeabi_cfcmpeq>
 8000d64:	bf94      	ite	ls
 8000d66:	2001      	movls	r0, #1
 8000d68:	2000      	movhi	r0, #0
 8000d6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6e:	bf00      	nop

08000d70 <__aeabi_fcmpge>:
 8000d70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d74:	f7ff ffd2 	bl	8000d1c <__aeabi_cfrcmple>
 8000d78:	bf94      	ite	ls
 8000d7a:	2001      	movls	r0, #1
 8000d7c:	2000      	movhi	r0, #0
 8000d7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d82:	bf00      	nop

08000d84 <__aeabi_fcmpgt>:
 8000d84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d88:	f7ff ffc8 	bl	8000d1c <__aeabi_cfrcmple>
 8000d8c:	bf34      	ite	cc
 8000d8e:	2001      	movcc	r0, #1
 8000d90:	2000      	movcs	r0, #0
 8000d92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d96:	bf00      	nop

08000d98 <__aeabi_f2iz>:
 8000d98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000da0:	d30f      	bcc.n	8000dc2 <__aeabi_f2iz+0x2a>
 8000da2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000da6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000daa:	d90d      	bls.n	8000dc8 <__aeabi_f2iz+0x30>
 8000dac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000db0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000db4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000db8:	fa23 f002 	lsr.w	r0, r3, r2
 8000dbc:	bf18      	it	ne
 8000dbe:	4240      	negne	r0, r0
 8000dc0:	4770      	bx	lr
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	4770      	bx	lr
 8000dc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000dcc:	d101      	bne.n	8000dd2 <__aeabi_f2iz+0x3a>
 8000dce:	0242      	lsls	r2, r0, #9
 8000dd0:	d105      	bne.n	8000dde <__aeabi_f2iz+0x46>
 8000dd2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000dd6:	bf08      	it	eq
 8000dd8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ddc:	4770      	bx	lr
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	4770      	bx	lr

08000de4 <start_fill>:
const float d2 = (float)(square_size - (halfSize_MicroMouse * 2))/2;

void found(int16_t index);
void set_wall(bool rbl, bool rbr, bool rbf);

void start_fill() {
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
	memset(visited, false, sizeof(visited));
 8000dea:	2264      	movs	r2, #100	; 0x64
 8000dec:	2100      	movs	r1, #0
 8000dee:	48b7      	ldr	r0, [pc, #732]	; (80010cc <start_fill+0x2e8>)
 8000df0:	f006 fd9c 	bl	800792c <memset>
	memset(maze, 0, sizeof(maze));
 8000df4:	2264      	movs	r2, #100	; 0x64
 8000df6:	2100      	movs	r1, #0
 8000df8:	48b5      	ldr	r0, [pc, #724]	; (80010d0 <start_fill+0x2ec>)
 8000dfa:	f006 fd97 	bl	800792c <memset>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000dfe:	4bb5      	ldr	r3, [pc, #724]	; (80010d4 <start_fill+0x2f0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000e06:	4bb4      	ldr	r3, [pc, #720]	; (80010d8 <start_fill+0x2f4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
	current_speed = 0;
 8000e0e:	4bb3      	ldr	r3, [pc, #716]	; (80010dc <start_fill+0x2f8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
	visited[starting_coordinates[1]][starting_coordinates[0]] = true;
 8000e14:	4bb2      	ldr	r3, [pc, #712]	; (80010e0 <start_fill+0x2fc>)
 8000e16:	785b      	ldrb	r3, [r3, #1]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4bb1      	ldr	r3, [pc, #708]	; (80010e0 <start_fill+0x2fc>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	4aaa      	ldr	r2, [pc, #680]	; (80010cc <start_fill+0x2e8>)
 8000e22:	460b      	mov	r3, r1
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	440b      	add	r3, r1
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4403      	add	r3, r0
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
	int16_t i = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	81fb      	strh	r3, [r7, #14]
	x = starting_coordinates[0];
 8000e36:	4baa      	ldr	r3, [pc, #680]	; (80010e0 <start_fill+0x2fc>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b25a      	sxtb	r2, r3
 8000e3c:	4ba9      	ldr	r3, [pc, #676]	; (80010e4 <start_fill+0x300>)
 8000e3e:	701a      	strb	r2, [r3, #0]
	y = starting_coordinates[1] + 1;
 8000e40:	4ba7      	ldr	r3, [pc, #668]	; (80010e0 <start_fill+0x2fc>)
 8000e42:	785b      	ldrb	r3, [r3, #1]
 8000e44:	3301      	adds	r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	b25a      	sxtb	r2, r3
 8000e4a:	4ba7      	ldr	r3, [pc, #668]	; (80010e8 <start_fill+0x304>)
 8000e4c:	701a      	strb	r2, [r3, #0]
	maze[y - 1][x] |= bottom_wall;
 8000e4e:	4ba6      	ldr	r3, [pc, #664]	; (80010e8 <start_fill+0x304>)
 8000e50:	f993 3000 	ldrsb.w	r3, [r3]
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	4ba3      	ldr	r3, [pc, #652]	; (80010e4 <start_fill+0x300>)
 8000e58:	f993 3000 	ldrsb.w	r3, [r3]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	499c      	ldr	r1, [pc, #624]	; (80010d0 <start_fill+0x2ec>)
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	440b      	add	r3, r1
 8000e6a:	4403      	add	r3, r0
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4a9e      	ldr	r2, [pc, #632]	; (80010e8 <start_fill+0x304>)
 8000e70:	f992 2000 	ldrsb.w	r2, [r2]
 8000e74:	3a01      	subs	r2, #1
 8000e76:	499b      	ldr	r1, [pc, #620]	; (80010e4 <start_fill+0x300>)
 8000e78:	f991 1000 	ldrsb.w	r1, [r1]
 8000e7c:	460c      	mov	r4, r1
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	b2d8      	uxtb	r0, r3
 8000e84:	4992      	ldr	r1, [pc, #584]	; (80010d0 <start_fill+0x2ec>)
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	440b      	add	r3, r1
 8000e90:	4423      	add	r3, r4
 8000e92:	4602      	mov	r2, r0
 8000e94:	701a      	strb	r2, [r3, #0]
	direction = north;
 8000e96:	4b95      	ldr	r3, [pc, #596]	; (80010ec <start_fill+0x308>)
 8000e98:	2202      	movs	r2, #2
 8000e9a:	701a      	strb	r2, [r3, #0]
	bool frontfree, leftfree, rightfree;
	while(1){
		frontfree = adc_value[0] < frontWallValue;
 8000e9c:	4b94      	ldr	r3, [pc, #592]	; (80010f0 <start_fill+0x30c>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	2b63      	cmp	r3, #99	; 0x63
 8000ea4:	bf94      	ite	ls
 8000ea6:	2301      	movls	r3, #1
 8000ea8:	2300      	movhi	r3, #0
 8000eaa:	737b      	strb	r3, [r7, #13]
		rightfree = adc_value[1] < rightWallValue;
 8000eac:	4b90      	ldr	r3, [pc, #576]	; (80010f0 <start_fill+0x30c>)
 8000eae:	885b      	ldrh	r3, [r3, #2]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	2b63      	cmp	r3, #99	; 0x63
 8000eb4:	bf94      	ite	ls
 8000eb6:	2301      	movls	r3, #1
 8000eb8:	2300      	movhi	r3, #0
 8000eba:	72fb      	strb	r3, [r7, #11]
		leftfree  = adc_value[2] < leftWallValue;
 8000ebc:	4b8c      	ldr	r3, [pc, #560]	; (80010f0 <start_fill+0x30c>)
 8000ebe:	889b      	ldrh	r3, [r3, #4]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	2b63      	cmp	r3, #99	; 0x63
 8000ec4:	bf94      	ite	ls
 8000ec6:	2301      	movls	r3, #1
 8000ec8:	2300      	movhi	r3, #0
 8000eca:	733b      	strb	r3, [r7, #12]
		set_wall(!leftfree, !rightfree, !frontfree);
 8000ecc:	7b3b      	ldrb	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf14      	ite	ne
 8000ed2:	2301      	movne	r3, #1
 8000ed4:	2300      	moveq	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	f083 0301 	eor.w	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	b2d8      	uxtb	r0, r3
 8000ee4:	7afb      	ldrb	r3, [r7, #11]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf14      	ite	ne
 8000eea:	2301      	movne	r3, #1
 8000eec:	2300      	moveq	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	f083 0301 	eor.w	r3, r3, #1
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	b2d9      	uxtb	r1, r3
 8000efc:	7b7b      	ldrb	r3, [r7, #13]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf14      	ite	ne
 8000f02:	2301      	movne	r3, #1
 8000f04:	2300      	moveq	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f083 0301 	eor.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	461a      	mov	r2, r3
 8000f16:	f001 fb5d 	bl	80025d4 <set_wall>
		visited[y][x] = true;
 8000f1a:	4b73      	ldr	r3, [pc, #460]	; (80010e8 <start_fill+0x304>)
 8000f1c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4b70      	ldr	r3, [pc, #448]	; (80010e4 <start_fill+0x300>)
 8000f24:	f993 3000 	ldrsb.w	r3, [r3]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	4a68      	ldr	r2, [pc, #416]	; (80010cc <start_fill+0x2e8>)
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	4403      	add	r3, r0
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
		if(x == ending_coordinates[0] && y == ending_coordinates[1]){
 8000f3c:	4b69      	ldr	r3, [pc, #420]	; (80010e4 <start_fill+0x300>)
 8000f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <start_fill+0x310>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d132      	bne.n	8000fb2 <start_fill+0x1ce>
 8000f4c:	4b66      	ldr	r3, [pc, #408]	; (80010e8 <start_fill+0x304>)
 8000f4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b67      	ldr	r3, [pc, #412]	; (80010f4 <start_fill+0x310>)
 8000f56:	785b      	ldrb	r3, [r3, #1]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d12a      	bne.n	8000fb2 <start_fill+0x1ce>
			found(i);
 8000f5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 faef 	bl	8002544 <found>
			maze[y][x] |= top_wall;
 8000f66:	4b60      	ldr	r3, [pc, #384]	; (80010e8 <start_fill+0x304>)
 8000f68:	f993 3000 	ldrsb.w	r3, [r3]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4b5d      	ldr	r3, [pc, #372]	; (80010e4 <start_fill+0x300>)
 8000f70:	f993 3000 	ldrsb.w	r3, [r3]
 8000f74:	4618      	mov	r0, r3
 8000f76:	4a56      	ldr	r2, [pc, #344]	; (80010d0 <start_fill+0x2ec>)
 8000f78:	460b      	mov	r3, r1
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	4403      	add	r3, r0
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4a58      	ldr	r2, [pc, #352]	; (80010e8 <start_fill+0x304>)
 8000f88:	f992 2000 	ldrsb.w	r2, [r2]
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4a55      	ldr	r2, [pc, #340]	; (80010e4 <start_fill+0x300>)
 8000f90:	f992 2000 	ldrsb.w	r2, [r2]
 8000f94:	4614      	mov	r4, r2
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	b2d8      	uxtb	r0, r3
 8000f9c:	4a4c      	ldr	r2, [pc, #304]	; (80010d0 <start_fill+0x2ec>)
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4423      	add	r3, r4
 8000faa:	4602      	mov	r2, r0
 8000fac:	701a      	strb	r2, [r3, #0]
			break;
 8000fae:	f001 bab5 	b.w	800251c <start_fill+0x1738>
		}
		switch(direction){
 8000fb2:	4b4e      	ldr	r3, [pc, #312]	; (80010ec <start_fill+0x308>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	f200 81a7 	bhi.w	800130a <start_fill+0x526>
 8000fbc:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <start_fill+0x1e0>)
 8000fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc2:	bf00      	nop
 8000fc4:	08000fd5 	.word	0x08000fd5
 8000fc8:	08001097 	.word	0x08001097
 8000fcc:	08001187 	.word	0x08001187
 8000fd0:	08001249 	.word	0x08001249
			case west:
				frontfree = frontfree && !visited[y][x - 1];
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d016      	beq.n	8001008 <start_fill+0x224>
 8000fda:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <start_fill+0x304>)
 8000fdc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <start_fill+0x300>)
 8000fe4:	f993 3000 	ldrsb.w	r3, [r3]
 8000fe8:	1e5a      	subs	r2, r3, #1
 8000fea:	4938      	ldr	r1, [pc, #224]	; (80010cc <start_fill+0x2e8>)
 8000fec:	4603      	mov	r3, r0
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4403      	add	r3, r0
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	440b      	add	r3, r1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	f083 0301 	eor.w	r3, r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <start_fill+0x224>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <start_fill+0x226>
 8001008:	2300      	movs	r3, #0
 800100a:	737b      	strb	r3, [r7, #13]
 800100c:	7b7b      	ldrb	r3, [r7, #13]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y + 1][x];
 8001014:	7b3b      	ldrb	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d016      	beq.n	8001048 <start_fill+0x264>
 800101a:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <start_fill+0x304>)
 800101c:	f993 3000 	ldrsb.w	r3, [r3]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <start_fill+0x300>)
 8001024:	f993 3000 	ldrsb.w	r3, [r3]
 8001028:	4618      	mov	r0, r3
 800102a:	4928      	ldr	r1, [pc, #160]	; (80010cc <start_fill+0x2e8>)
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	440b      	add	r3, r1
 8001036:	4403      	add	r3, r0
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	f083 0301 	eor.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <start_fill+0x264>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <start_fill+0x266>
 8001048:	2300      	movs	r3, #0
 800104a:	733b      	strb	r3, [r7, #12]
 800104c:	7b3b      	ldrb	r3, [r7, #12]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y - 1][x];
 8001054:	7afb      	ldrb	r3, [r7, #11]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d016      	beq.n	8001088 <start_fill+0x2a4>
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <start_fill+0x304>)
 800105c:	f993 3000 	ldrsb.w	r3, [r3]
 8001060:	1e5a      	subs	r2, r3, #1
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <start_fill+0x300>)
 8001064:	f993 3000 	ldrsb.w	r3, [r3]
 8001068:	4618      	mov	r0, r3
 800106a:	4918      	ldr	r1, [pc, #96]	; (80010cc <start_fill+0x2e8>)
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	440b      	add	r3, r1
 8001076:	4403      	add	r3, r0
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	f083 0301 	eor.w	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <start_fill+0x2a4>
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <start_fill+0x2a6>
 8001088:	2300      	movs	r3, #0
 800108a:	72fb      	strb	r3, [r7, #11]
 800108c:	7afb      	ldrb	r3, [r7, #11]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	72fb      	strb	r3, [r7, #11]
				break;
 8001094:	e139      	b.n	800130a <start_fill+0x526>
			case east:
				frontfree = frontfree && !visited[y][x + 1];
 8001096:	7b7b      	ldrb	r3, [r7, #13]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d02d      	beq.n	80010f8 <start_fill+0x314>
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <start_fill+0x304>)
 800109e:	f993 3000 	ldrsb.w	r3, [r3]
 80010a2:	4618      	mov	r0, r3
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <start_fill+0x300>)
 80010a6:	f993 3000 	ldrsb.w	r3, [r3]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <start_fill+0x2e8>)
 80010ae:	4603      	mov	r3, r0
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4403      	add	r3, r0
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	440b      	add	r3, r1
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	f083 0301 	eor.w	r3, r3, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d018      	beq.n	80010f8 <start_fill+0x314>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e017      	b.n	80010fa <start_fill+0x316>
 80010ca:	bf00      	nop
 80010cc:	20000308 	.word	0x20000308
 80010d0:	200002a4 	.word	0x200002a4
 80010d4:	200001cc 	.word	0x200001cc
 80010d8:	2000025c 	.word	0x2000025c
 80010dc:	20000374 	.word	0x20000374
 80010e0:	080079e4 	.word	0x080079e4
 80010e4:	20000154 	.word	0x20000154
 80010e8:	20000155 	.word	0x20000155
 80010ec:	20000156 	.word	0x20000156
 80010f0:	2000036c 	.word	0x2000036c
 80010f4:	080079e8 	.word	0x080079e8
 80010f8:	2300      	movs	r3, #0
 80010fa:	737b      	strb	r3, [r7, #13]
 80010fc:	7b7b      	ldrb	r3, [r7, #13]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y - 1][x];
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d016      	beq.n	8001138 <start_fill+0x354>
 800110a:	4bb1      	ldr	r3, [pc, #708]	; (80013d0 <start_fill+0x5ec>)
 800110c:	f993 3000 	ldrsb.w	r3, [r3]
 8001110:	1e5a      	subs	r2, r3, #1
 8001112:	4bb0      	ldr	r3, [pc, #704]	; (80013d4 <start_fill+0x5f0>)
 8001114:	f993 3000 	ldrsb.w	r3, [r3]
 8001118:	4618      	mov	r0, r3
 800111a:	49af      	ldr	r1, [pc, #700]	; (80013d8 <start_fill+0x5f4>)
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	440b      	add	r3, r1
 8001126:	4403      	add	r3, r0
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	f083 0301 	eor.w	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <start_fill+0x354>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <start_fill+0x356>
 8001138:	2300      	movs	r3, #0
 800113a:	733b      	strb	r3, [r7, #12]
 800113c:	7b3b      	ldrb	r3, [r7, #12]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y + 1][x];
 8001144:	7afb      	ldrb	r3, [r7, #11]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d016      	beq.n	8001178 <start_fill+0x394>
 800114a:	4ba1      	ldr	r3, [pc, #644]	; (80013d0 <start_fill+0x5ec>)
 800114c:	f993 3000 	ldrsb.w	r3, [r3]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	4ba0      	ldr	r3, [pc, #640]	; (80013d4 <start_fill+0x5f0>)
 8001154:	f993 3000 	ldrsb.w	r3, [r3]
 8001158:	4618      	mov	r0, r3
 800115a:	499f      	ldr	r1, [pc, #636]	; (80013d8 <start_fill+0x5f4>)
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	440b      	add	r3, r1
 8001166:	4403      	add	r3, r0
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	f083 0301 	eor.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <start_fill+0x394>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <start_fill+0x396>
 8001178:	2300      	movs	r3, #0
 800117a:	72fb      	strb	r3, [r7, #11]
 800117c:	7afb      	ldrb	r3, [r7, #11]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	72fb      	strb	r3, [r7, #11]
				break;
 8001184:	e0c1      	b.n	800130a <start_fill+0x526>
			case north:
				frontfree = frontfree && !visited[y - 1][x];
 8001186:	7b7b      	ldrb	r3, [r7, #13]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d016      	beq.n	80011ba <start_fill+0x3d6>
 800118c:	4b90      	ldr	r3, [pc, #576]	; (80013d0 <start_fill+0x5ec>)
 800118e:	f993 3000 	ldrsb.w	r3, [r3]
 8001192:	1e5a      	subs	r2, r3, #1
 8001194:	4b8f      	ldr	r3, [pc, #572]	; (80013d4 <start_fill+0x5f0>)
 8001196:	f993 3000 	ldrsb.w	r3, [r3]
 800119a:	4618      	mov	r0, r3
 800119c:	498e      	ldr	r1, [pc, #568]	; (80013d8 <start_fill+0x5f4>)
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	440b      	add	r3, r1
 80011a8:	4403      	add	r3, r0
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	f083 0301 	eor.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <start_fill+0x3d6>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <start_fill+0x3d8>
 80011ba:	2300      	movs	r3, #0
 80011bc:	737b      	strb	r3, [r7, #13]
 80011be:	7b7b      	ldrb	r3, [r7, #13]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y][x - 1];
 80011c6:	7b3b      	ldrb	r3, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d016      	beq.n	80011fa <start_fill+0x416>
 80011cc:	4b80      	ldr	r3, [pc, #512]	; (80013d0 <start_fill+0x5ec>)
 80011ce:	f993 3000 	ldrsb.w	r3, [r3]
 80011d2:	4618      	mov	r0, r3
 80011d4:	4b7f      	ldr	r3, [pc, #508]	; (80013d4 <start_fill+0x5f0>)
 80011d6:	f993 3000 	ldrsb.w	r3, [r3]
 80011da:	1e5a      	subs	r2, r3, #1
 80011dc:	497e      	ldr	r1, [pc, #504]	; (80013d8 <start_fill+0x5f4>)
 80011de:	4603      	mov	r3, r0
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4403      	add	r3, r0
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	440b      	add	r3, r1
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f083 0301 	eor.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <start_fill+0x416>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <start_fill+0x418>
 80011fa:	2300      	movs	r3, #0
 80011fc:	733b      	strb	r3, [r7, #12]
 80011fe:	7b3b      	ldrb	r3, [r7, #12]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y][x + 1];
 8001206:	7afb      	ldrb	r3, [r7, #11]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d016      	beq.n	800123a <start_fill+0x456>
 800120c:	4b70      	ldr	r3, [pc, #448]	; (80013d0 <start_fill+0x5ec>)
 800120e:	f993 3000 	ldrsb.w	r3, [r3]
 8001212:	4618      	mov	r0, r3
 8001214:	4b6f      	ldr	r3, [pc, #444]	; (80013d4 <start_fill+0x5f0>)
 8001216:	f993 3000 	ldrsb.w	r3, [r3]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	496e      	ldr	r1, [pc, #440]	; (80013d8 <start_fill+0x5f4>)
 800121e:	4603      	mov	r3, r0
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4403      	add	r3, r0
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	440b      	add	r3, r1
 8001228:	4413      	add	r3, r2
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f083 0301 	eor.w	r3, r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <start_fill+0x456>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <start_fill+0x458>
 800123a:	2300      	movs	r3, #0
 800123c:	72fb      	strb	r3, [r7, #11]
 800123e:	7afb      	ldrb	r3, [r7, #11]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	72fb      	strb	r3, [r7, #11]
				break;
 8001246:	e060      	b.n	800130a <start_fill+0x526>
			case south:
				frontfree = frontfree && !visited[y + 1][x];
 8001248:	7b7b      	ldrb	r3, [r7, #13]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d016      	beq.n	800127c <start_fill+0x498>
 800124e:	4b60      	ldr	r3, [pc, #384]	; (80013d0 <start_fill+0x5ec>)
 8001250:	f993 3000 	ldrsb.w	r3, [r3]
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <start_fill+0x5f0>)
 8001258:	f993 3000 	ldrsb.w	r3, [r3]
 800125c:	4618      	mov	r0, r3
 800125e:	495e      	ldr	r1, [pc, #376]	; (80013d8 <start_fill+0x5f4>)
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	440b      	add	r3, r1
 800126a:	4403      	add	r3, r0
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f083 0301 	eor.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <start_fill+0x498>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <start_fill+0x49a>
 800127c:	2300      	movs	r3, #0
 800127e:	737b      	strb	r3, [r7, #13]
 8001280:	7b7b      	ldrb	r3, [r7, #13]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y][x + 1];
 8001288:	7b3b      	ldrb	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d016      	beq.n	80012bc <start_fill+0x4d8>
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <start_fill+0x5ec>)
 8001290:	f993 3000 	ldrsb.w	r3, [r3]
 8001294:	4618      	mov	r0, r3
 8001296:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <start_fill+0x5f0>)
 8001298:	f993 3000 	ldrsb.w	r3, [r3]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	494e      	ldr	r1, [pc, #312]	; (80013d8 <start_fill+0x5f4>)
 80012a0:	4603      	mov	r3, r0
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4403      	add	r3, r0
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	440b      	add	r3, r1
 80012aa:	4413      	add	r3, r2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	f083 0301 	eor.w	r3, r3, #1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <start_fill+0x4d8>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <start_fill+0x4da>
 80012bc:	2300      	movs	r3, #0
 80012be:	733b      	strb	r3, [r7, #12]
 80012c0:	7b3b      	ldrb	r3, [r7, #12]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y][x - 1];
 80012c8:	7afb      	ldrb	r3, [r7, #11]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d016      	beq.n	80012fc <start_fill+0x518>
 80012ce:	4b40      	ldr	r3, [pc, #256]	; (80013d0 <start_fill+0x5ec>)
 80012d0:	f993 3000 	ldrsb.w	r3, [r3]
 80012d4:	4618      	mov	r0, r3
 80012d6:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <start_fill+0x5f0>)
 80012d8:	f993 3000 	ldrsb.w	r3, [r3]
 80012dc:	1e5a      	subs	r2, r3, #1
 80012de:	493e      	ldr	r1, [pc, #248]	; (80013d8 <start_fill+0x5f4>)
 80012e0:	4603      	mov	r3, r0
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4403      	add	r3, r0
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	440b      	add	r3, r1
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	f083 0301 	eor.w	r3, r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <start_fill+0x518>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <start_fill+0x51a>
 80012fc:	2300      	movs	r3, #0
 80012fe:	72fb      	strb	r3, [r7, #11]
 8001300:	7afb      	ldrb	r3, [r7, #11]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	72fb      	strb	r3, [r7, #11]
				break;
 8001308:	bf00      	nop
		}
		if((leftfree && rightfree) || (leftfree && frontfree) || (rightfree && frontfree)){
 800130a:	7b3b      	ldrb	r3, [r7, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <start_fill+0x532>
 8001310:	7afb      	ldrb	r3, [r7, #11]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10d      	bne.n	8001332 <start_fill+0x54e>
 8001316:	7b3b      	ldrb	r3, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <start_fill+0x53e>
 800131c:	7b7b      	ldrb	r3, [r7, #13]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d107      	bne.n	8001332 <start_fill+0x54e>
 8001322:	7afb      	ldrb	r3, [r7, #11]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80b9 	beq.w	800149c <start_fill+0x6b8>
 800132a:	7b7b      	ldrb	r3, [r7, #13]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80b5 	beq.w	800149c <start_fill+0x6b8>
			i++;
 8001332:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001336:	b29b      	uxth	r3, r3
 8001338:	3301      	adds	r3, #1
 800133a:	b29b      	uxth	r3, r3
 800133c:	81fb      	strh	r3, [r7, #14]
			stack[i][1] = x;
 800133e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <start_fill+0x5f0>)
 8001344:	f993 0000 	ldrsb.w	r0, [r3]
 8001348:	4924      	ldr	r1, [pc, #144]	; (80013dc <start_fill+0x5f8>)
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	440b      	add	r3, r1
 8001352:	3301      	adds	r3, #1
 8001354:	4602      	mov	r2, r0
 8001356:	701a      	strb	r2, [r3, #0]
			stack[i][2] = y;
 8001358:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <start_fill+0x5ec>)
 800135e:	f993 0000 	ldrsb.w	r0, [r3]
 8001362:	491e      	ldr	r1, [pc, #120]	; (80013dc <start_fill+0x5f8>)
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	440b      	add	r3, r1
 800136c:	3302      	adds	r3, #2
 800136e:	4602      	mov	r2, r0
 8001370:	701a      	strb	r2, [r3, #0]
			if(direction == west){
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <start_fill+0x5fc>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d138      	bne.n	80013ec <start_fill+0x608>
				if(rightfree){
 800137a:	7afb      	ldrb	r3, [r7, #11]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d017      	beq.n	80013b0 <start_fill+0x5cc>
					stack[i][0] = turn_right_90;
 8001380:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001384:	4915      	ldr	r1, [pc, #84]	; (80013dc <start_fill+0x5f8>)
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	440b      	add	r3, r1
 800138e:	22ff      	movs	r2, #255	; 0xff
 8001390:	701a      	strb	r2, [r3, #0]
					go_straight(d2, 1);
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <start_fill+0x600>)
 8001394:	2101      	movs	r1, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fc10 	bl	8004bbc <go_straight>
					turn_right90(&direction);
 800139c:	4810      	ldr	r0, [pc, #64]	; (80013e0 <start_fill+0x5fc>)
 800139e:	f003 fb35 	bl	8004a0c <turn_right90>
					go_straight(d2, 0);
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <start_fill+0x600>)
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 fc08 	bl	8004bbc <go_straight>
			if(direction == west){
 80013ac:	f001 b804 	b.w	80023b8 <start_fill+0x15d4>
				} else {
					stack[i][0] = straight;
 80013b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013b4:	4909      	ldr	r1, [pc, #36]	; (80013dc <start_fill+0x5f8>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	440b      	add	r3, r1
 80013be:	22fa      	movs	r2, #250	; 0xfa
 80013c0:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 80013c2:	2100      	movs	r1, #0
 80013c4:	4808      	ldr	r0, [pc, #32]	; (80013e8 <start_fill+0x604>)
 80013c6:	f003 fbf9 	bl	8004bbc <go_straight>
			if(direction == west){
 80013ca:	f000 bff5 	b.w	80023b8 <start_fill+0x15d4>
 80013ce:	bf00      	nop
 80013d0:	20000155 	.word	0x20000155
 80013d4:	20000154 	.word	0x20000154
 80013d8:	20000308 	.word	0x20000308
 80013dc:	20000028 	.word	0x20000028
 80013e0:	20000156 	.word	0x20000156
 80013e4:	42e80000 	.word	0x42e80000
 80013e8:	43960000 	.word	0x43960000
				}
			} else if(direction == east){
 80013ec:	4b8a      	ldr	r3, [pc, #552]	; (8001618 <start_fill+0x834>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d129      	bne.n	8001448 <start_fill+0x664>
				if(leftfree){
 80013f4:	7b3b      	ldrb	r3, [r7, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d017      	beq.n	800142a <start_fill+0x646>
					stack[i][0] = turn_left_90;
 80013fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013fe:	4987      	ldr	r1, [pc, #540]	; (800161c <start_fill+0x838>)
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	440b      	add	r3, r1
 8001408:	22fc      	movs	r2, #252	; 0xfc
 800140a:	701a      	strb	r2, [r3, #0]
					go_straight(d2, 1);
 800140c:	4b84      	ldr	r3, [pc, #528]	; (8001620 <start_fill+0x83c>)
 800140e:	2101      	movs	r1, #1
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fbd3 	bl	8004bbc <go_straight>
					turn_left90(&direction);
 8001416:	4880      	ldr	r0, [pc, #512]	; (8001618 <start_fill+0x834>)
 8001418:	f003 fa20 	bl	800485c <turn_left90>
					go_straight(d2, 0);
 800141c:	4b80      	ldr	r3, [pc, #512]	; (8001620 <start_fill+0x83c>)
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f003 fbcb 	bl	8004bbc <go_straight>
			if(direction == west){
 8001426:	f000 bfc7 	b.w	80023b8 <start_fill+0x15d4>
				} else {
					stack[i][0] = straight;
 800142a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800142e:	497b      	ldr	r1, [pc, #492]	; (800161c <start_fill+0x838>)
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	440b      	add	r3, r1
 8001438:	22fa      	movs	r2, #250	; 0xfa
 800143a:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 800143c:	2100      	movs	r1, #0
 800143e:	4879      	ldr	r0, [pc, #484]	; (8001624 <start_fill+0x840>)
 8001440:	f003 fbbc 	bl	8004bbc <go_straight>
			if(direction == west){
 8001444:	f000 bfb8 	b.w	80023b8 <start_fill+0x15d4>
				}
			} else {
				if(frontfree){
 8001448:	7b7b      	ldrb	r3, [r7, #13]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00e      	beq.n	800146c <start_fill+0x688>
					stack[i][0] = straight;
 800144e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001452:	4972      	ldr	r1, [pc, #456]	; (800161c <start_fill+0x838>)
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	440b      	add	r3, r1
 800145c:	22fa      	movs	r2, #250	; 0xfa
 800145e:	701a      	strb	r2, [r3, #0]
					go_straight(square_size, 0);
 8001460:	2100      	movs	r1, #0
 8001462:	4870      	ldr	r0, [pc, #448]	; (8001624 <start_fill+0x840>)
 8001464:	f003 fbaa 	bl	8004bbc <go_straight>
			if(direction == west){
 8001468:	f000 bfa6 	b.w	80023b8 <start_fill+0x15d4>
				} else {
					stack[i][0] = turn_left_90;
 800146c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001470:	496a      	ldr	r1, [pc, #424]	; (800161c <start_fill+0x838>)
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	440b      	add	r3, r1
 800147a:	22fc      	movs	r2, #252	; 0xfc
 800147c:	701a      	strb	r2, [r3, #0]
					go_straight(d2, 1);
 800147e:	4b68      	ldr	r3, [pc, #416]	; (8001620 <start_fill+0x83c>)
 8001480:	2101      	movs	r1, #1
 8001482:	4618      	mov	r0, r3
 8001484:	f003 fb9a 	bl	8004bbc <go_straight>
					turn_left90(&direction);
 8001488:	4863      	ldr	r0, [pc, #396]	; (8001618 <start_fill+0x834>)
 800148a:	f003 f9e7 	bl	800485c <turn_left90>
					go_straight(d2, 0);
 800148e:	4b64      	ldr	r3, [pc, #400]	; (8001620 <start_fill+0x83c>)
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f003 fb92 	bl	8004bbc <go_straight>
			if(direction == west){
 8001498:	f000 bf8e 	b.w	80023b8 <start_fill+0x15d4>
				}
			}
		} else if(leftfree || rightfree || frontfree){
 800149c:	7b3b      	ldrb	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <start_fill+0x6cc>
 80014a2:	7afb      	ldrb	r3, [r7, #11]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d103      	bne.n	80014b0 <start_fill+0x6cc>
 80014a8:	7b7b      	ldrb	r3, [r7, #13]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80bc 	beq.w	8001628 <start_fill+0x844>
			if(frontfree){
 80014b0:	7b7b      	ldrb	r3, [r7, #13]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d058      	beq.n	8001568 <start_fill+0x784>
				if(stack[i][0] == straight && stack[i][1] == -1){
 80014b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014ba:	4958      	ldr	r1, [pc, #352]	; (800161c <start_fill+0x838>)
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f993 3000 	ldrsb.w	r3, [r3]
 80014c8:	f113 0f06 	cmn.w	r3, #6
 80014cc:	d123      	bne.n	8001516 <start_fill+0x732>
 80014ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014d2:	4952      	ldr	r1, [pc, #328]	; (800161c <start_fill+0x838>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	440b      	add	r3, r1
 80014dc:	3301      	adds	r3, #1
 80014de:	f993 3000 	ldrsb.w	r3, [r3]
 80014e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e6:	d116      	bne.n	8001516 <start_fill+0x732>
					stack[i][2]++;
 80014e8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014ec:	494b      	ldr	r1, [pc, #300]	; (800161c <start_fill+0x838>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	3302      	adds	r3, #2
 80014f8:	f993 3000 	ldrsb.w	r3, [r3]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	b258      	sxtb	r0, r3
 8001504:	4945      	ldr	r1, [pc, #276]	; (800161c <start_fill+0x838>)
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	440b      	add	r3, r1
 800150e:	3302      	adds	r3, #2
 8001510:	4602      	mov	r2, r0
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	e022      	b.n	800155c <start_fill+0x778>
				} else {
					i++;
 8001516:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800151a:	b29b      	uxth	r3, r3
 800151c:	3301      	adds	r3, #1
 800151e:	b29b      	uxth	r3, r3
 8001520:	81fb      	strh	r3, [r7, #14]
					stack[i][0] = straight;
 8001522:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001526:	493d      	ldr	r1, [pc, #244]	; (800161c <start_fill+0x838>)
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	440b      	add	r3, r1
 8001530:	22fa      	movs	r2, #250	; 0xfa
 8001532:	701a      	strb	r2, [r3, #0]
					stack[i][1] = -1;
 8001534:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001538:	4938      	ldr	r1, [pc, #224]	; (800161c <start_fill+0x838>)
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	440b      	add	r3, r1
 8001542:	3301      	adds	r3, #1
 8001544:	22ff      	movs	r2, #255	; 0xff
 8001546:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 8001548:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800154c:	4933      	ldr	r1, [pc, #204]	; (800161c <start_fill+0x838>)
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	440b      	add	r3, r1
 8001556:	3302      	adds	r3, #2
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
				}
				go_straight(square_size, 0);
 800155c:	2100      	movs	r1, #0
 800155e:	4831      	ldr	r0, [pc, #196]	; (8001624 <start_fill+0x840>)
 8001560:	f003 fb2c 	bl	8004bbc <go_straight>
			if(frontfree){
 8001564:	f000 bf1f 	b.w	80023a6 <start_fill+0x15c2>
			} else if(leftfree){
 8001568:	7b3b      	ldrb	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d027      	beq.n	80015be <start_fill+0x7da>
				i++;
 800156e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001572:	b29b      	uxth	r3, r3
 8001574:	3301      	adds	r3, #1
 8001576:	b29b      	uxth	r3, r3
 8001578:	81fb      	strh	r3, [r7, #14]
				stack[i][0] = turn_left_90;
 800157a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800157e:	4927      	ldr	r1, [pc, #156]	; (800161c <start_fill+0x838>)
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	440b      	add	r3, r1
 8001588:	22fc      	movs	r2, #252	; 0xfc
 800158a:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 800158c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001590:	4922      	ldr	r1, [pc, #136]	; (800161c <start_fill+0x838>)
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	440b      	add	r3, r1
 800159a:	3301      	adds	r3, #1
 800159c:	22ff      	movs	r2, #255	; 0xff
 800159e:	701a      	strb	r2, [r3, #0]
				go_straight(d2, 1);
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <start_fill+0x83c>)
 80015a2:	2101      	movs	r1, #1
 80015a4:	4618      	mov	r0, r3
 80015a6:	f003 fb09 	bl	8004bbc <go_straight>
				turn_left90(&direction);
 80015aa:	481b      	ldr	r0, [pc, #108]	; (8001618 <start_fill+0x834>)
 80015ac:	f003 f956 	bl	800485c <turn_left90>
				go_straight(d2, 0);
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <start_fill+0x83c>)
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f003 fb01 	bl	8004bbc <go_straight>
			if(frontfree){
 80015ba:	f000 bef4 	b.w	80023a6 <start_fill+0x15c2>
			} else if(rightfree){
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 86f0 	beq.w	80023a6 <start_fill+0x15c2>
				i++;
 80015c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	3301      	adds	r3, #1
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	81fb      	strh	r3, [r7, #14]
				stack[i][0] = turn_right_90;
 80015d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015d6:	4911      	ldr	r1, [pc, #68]	; (800161c <start_fill+0x838>)
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	440b      	add	r3, r1
 80015e0:	22ff      	movs	r2, #255	; 0xff
 80015e2:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 80015e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015e8:	490c      	ldr	r1, [pc, #48]	; (800161c <start_fill+0x838>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	3301      	adds	r3, #1
 80015f4:	22ff      	movs	r2, #255	; 0xff
 80015f6:	701a      	strb	r2, [r3, #0]
				go_straight(d2, 1);
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <start_fill+0x83c>)
 80015fa:	2101      	movs	r1, #1
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 fadd 	bl	8004bbc <go_straight>
				turn_right90(&direction);
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <start_fill+0x834>)
 8001604:	f003 fa02 	bl	8004a0c <turn_right90>
				go_straight(d2, 0);
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <start_fill+0x83c>)
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f003 fad5 	bl	8004bbc <go_straight>
			if(frontfree){
 8001612:	f000 bec8 	b.w	80023a6 <start_fill+0x15c2>
 8001616:	bf00      	nop
 8001618:	20000156 	.word	0x20000156
 800161c:	20000028 	.word	0x20000028
 8001620:	42e80000 	.word	0x42e80000
 8001624:	43960000 	.word	0x43960000
			}
		} else {
			go_straight(d2, 1);
 8001628:	4bbb      	ldr	r3, [pc, #748]	; (8001918 <start_fill+0xb34>)
 800162a:	2101      	movs	r1, #1
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fac5 	bl	8004bbc <go_straight>
			u_turnf(&direction);
 8001632:	48ba      	ldr	r0, [pc, #744]	; (800191c <start_fill+0xb38>)
 8001634:	f002 fece 	bl	80043d4 <u_turnf>
			go_straight(d2, 0);
 8001638:	4bb7      	ldr	r3, [pc, #732]	; (8001918 <start_fill+0xb34>)
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fabd 	bl	8004bbc <go_straight>
			if(stack[i][1] != -1 &&
 8001642:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001646:	49b6      	ldr	r1, [pc, #728]	; (8001920 <start_fill+0xb3c>)
 8001648:	4613      	mov	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	440b      	add	r3, r1
 8001650:	3301      	adds	r3, #1
 8001652:	f993 3000 	ldrsb.w	r3, [r3]
 8001656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165a:	f000 82a9 	beq.w	8001bb0 <start_fill+0xdcc>
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 800165e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001662:	49af      	ldr	r1, [pc, #700]	; (8001920 <start_fill+0xb3c>)
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	440b      	add	r3, r1
 800166c:	3302      	adds	r3, #2
 800166e:	f993 3000 	ldrsb.w	r3, [r3]
 8001672:	4618      	mov	r0, r3
 8001674:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001678:	49a9      	ldr	r1, [pc, #676]	; (8001920 <start_fill+0xb3c>)
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	440b      	add	r3, r1
 8001682:	3301      	adds	r3, #1
 8001684:	f993 3000 	ldrsb.w	r3, [r3]
 8001688:	4619      	mov	r1, r3
 800168a:	4aa6      	ldr	r2, [pc, #664]	; (8001924 <start_fill+0xb40>)
 800168c:	4603      	mov	r3, r0
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4403      	add	r3, r0
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	440b      	add	r3, r1
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
			if(stack[i][1] != -1 &&
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d120      	bne.n	80016e4 <start_fill+0x900>
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 80016a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016a6:	499e      	ldr	r1, [pc, #632]	; (8001920 <start_fill+0xb3c>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	3302      	adds	r3, #2
 80016b2:	f993 3000 	ldrsb.w	r3, [r3]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016bc:	4998      	ldr	r1, [pc, #608]	; (8001920 <start_fill+0xb3c>)
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	3301      	adds	r3, #1
 80016c8:	f993 3000 	ldrsb.w	r3, [r3]
 80016cc:	1e5a      	subs	r2, r3, #1
 80016ce:	4996      	ldr	r1, [pc, #600]	; (8001928 <start_fill+0xb44>)
 80016d0:	4603      	mov	r3, r0
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4403      	add	r3, r0
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	440b      	add	r3, r1
 80016da:	4413      	add	r3, r2
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8266 	beq.w	8001bb0 <start_fill+0xdcc>
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80016e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016e8:	498d      	ldr	r1, [pc, #564]	; (8001920 <start_fill+0xb3c>)
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	3302      	adds	r3, #2
 80016f4:	f993 3000 	ldrsb.w	r3, [r3]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016fe:	4988      	ldr	r1, [pc, #544]	; (8001920 <start_fill+0xb3c>)
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	440b      	add	r3, r1
 8001708:	3301      	adds	r3, #1
 800170a:	f993 3000 	ldrsb.w	r3, [r3]
 800170e:	4619      	mov	r1, r3
 8001710:	4a84      	ldr	r2, [pc, #528]	; (8001924 <start_fill+0xb40>)
 8001712:	4603      	mov	r3, r0
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4403      	add	r3, r0
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	440b      	add	r3, r1
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
					((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001724:	2b00      	cmp	r3, #0
 8001726:	d120      	bne.n	800176a <start_fill+0x986>
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001728:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800172c:	497c      	ldr	r1, [pc, #496]	; (8001920 <start_fill+0xb3c>)
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	440b      	add	r3, r1
 8001736:	3302      	adds	r3, #2
 8001738:	f993 3000 	ldrsb.w	r3, [r3]
 800173c:	4618      	mov	r0, r3
 800173e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001742:	4977      	ldr	r1, [pc, #476]	; (8001920 <start_fill+0xb3c>)
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	440b      	add	r3, r1
 800174c:	3301      	adds	r3, #1
 800174e:	f993 3000 	ldrsb.w	r3, [r3]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	4974      	ldr	r1, [pc, #464]	; (8001928 <start_fill+0xb44>)
 8001756:	4603      	mov	r3, r0
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4403      	add	r3, r0
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	440b      	add	r3, r1
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 8223 	beq.w	8001bb0 <start_fill+0xdcc>
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 800176a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800176e:	496c      	ldr	r1, [pc, #432]	; (8001920 <start_fill+0xb3c>)
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	440b      	add	r3, r1
 8001778:	3302      	adds	r3, #2
 800177a:	f993 3000 	ldrsb.w	r3, [r3]
 800177e:	4618      	mov	r0, r3
 8001780:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001784:	4966      	ldr	r1, [pc, #408]	; (8001920 <start_fill+0xb3c>)
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	440b      	add	r3, r1
 800178e:	3301      	adds	r3, #1
 8001790:	f993 3000 	ldrsb.w	r3, [r3]
 8001794:	4619      	mov	r1, r3
 8001796:	4a63      	ldr	r2, [pc, #396]	; (8001924 <start_fill+0xb40>)
 8001798:	4603      	mov	r3, r0
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4403      	add	r3, r0
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
					((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d120      	bne.n	80017f0 <start_fill+0xa0c>
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 80017ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017b2:	495b      	ldr	r1, [pc, #364]	; (8001920 <start_fill+0xb3c>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	3302      	adds	r3, #2
 80017be:	f993 3000 	ldrsb.w	r3, [r3]
 80017c2:	1e5a      	subs	r2, r3, #1
 80017c4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80017c8:	4855      	ldr	r0, [pc, #340]	; (8001920 <start_fill+0xb3c>)
 80017ca:	460b      	mov	r3, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	440b      	add	r3, r1
 80017d0:	4403      	add	r3, r0
 80017d2:	3301      	adds	r3, #1
 80017d4:	f993 3000 	ldrsb.w	r3, [r3]
 80017d8:	4618      	mov	r0, r3
 80017da:	4953      	ldr	r1, [pc, #332]	; (8001928 <start_fill+0xb44>)
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	440b      	add	r3, r1
 80017e6:	4403      	add	r3, r0
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 81e0 	beq.w	8001bb0 <start_fill+0xdcc>
					((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 80017f0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017f4:	494a      	ldr	r1, [pc, #296]	; (8001920 <start_fill+0xb3c>)
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	440b      	add	r3, r1
 80017fe:	3302      	adds	r3, #2
 8001800:	f993 3000 	ldrsb.w	r3, [r3]
 8001804:	4618      	mov	r0, r3
 8001806:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800180a:	4945      	ldr	r1, [pc, #276]	; (8001920 <start_fill+0xb3c>)
 800180c:	4613      	mov	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	440b      	add	r3, r1
 8001814:	3301      	adds	r3, #1
 8001816:	f993 3000 	ldrsb.w	r3, [r3]
 800181a:	4619      	mov	r1, r3
 800181c:	4a41      	ldr	r2, [pc, #260]	; (8001924 <start_fill+0xb40>)
 800181e:	4603      	mov	r3, r0
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4403      	add	r3, r0
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	440b      	add	r3, r1
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
					((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001830:	2b00      	cmp	r3, #0
 8001832:	d120      	bne.n	8001876 <start_fill+0xa92>
					((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001834:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001838:	4939      	ldr	r1, [pc, #228]	; (8001920 <start_fill+0xb3c>)
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	440b      	add	r3, r1
 8001842:	3302      	adds	r3, #2
 8001844:	f993 3000 	ldrsb.w	r3, [r3]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800184e:	4834      	ldr	r0, [pc, #208]	; (8001920 <start_fill+0xb3c>)
 8001850:	460b      	mov	r3, r1
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	440b      	add	r3, r1
 8001856:	4403      	add	r3, r0
 8001858:	3301      	adds	r3, #1
 800185a:	f993 3000 	ldrsb.w	r3, [r3]
 800185e:	4618      	mov	r0, r3
 8001860:	4931      	ldr	r1, [pc, #196]	; (8001928 <start_fill+0xb44>)
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	440b      	add	r3, r1
 800186c:	4403      	add	r3, r0
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 819d 	beq.w	8001bb0 <start_fill+0xdcc>
				stack[i][1] = -1;
 8001876:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800187a:	4929      	ldr	r1, [pc, #164]	; (8001920 <start_fill+0xb3c>)
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	440b      	add	r3, r1
 8001884:	3301      	adds	r3, #1
 8001886:	22ff      	movs	r2, #255	; 0xff
 8001888:	701a      	strb	r2, [r3, #0]
				stack[i][2] = 1;
 800188a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800188e:	4924      	ldr	r1, [pc, #144]	; (8001920 <start_fill+0xb3c>)
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	440b      	add	r3, r1
 8001898:	3302      	adds	r3, #2
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
			}
			while(stack[i][1] == -1){
 800189e:	e187      	b.n	8001bb0 <start_fill+0xdcc>
				switch(stack[i][0]){
 80018a0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018a4:	491e      	ldr	r1, [pc, #120]	; (8001920 <start_fill+0xb3c>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	f993 3000 	ldrsb.w	r3, [r3]
 80018b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b6:	d03b      	beq.n	8001930 <start_fill+0xb4c>
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	da47      	bge.n	800194c <start_fill+0xb68>
 80018bc:	f113 0f06 	cmn.w	r3, #6
 80018c0:	d003      	beq.n	80018ca <start_fill+0xae6>
 80018c2:	f113 0f04 	cmn.w	r3, #4
 80018c6:	d018      	beq.n	80018fa <start_fill+0xb16>
 80018c8:	e040      	b.n	800194c <start_fill+0xb68>
					case straight:
						go_straight((float)stack[i][2] * square_size, 0);
 80018ca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018ce:	4914      	ldr	r1, [pc, #80]	; (8001920 <start_fill+0xb3c>)
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	3302      	adds	r3, #2
 80018da:	f993 3000 	ldrsb.w	r3, [r3]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f990 	bl	8000c04 <__aeabi_i2f>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4911      	ldr	r1, [pc, #68]	; (800192c <start_fill+0xb48>)
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fc2f 	bl	800014c <__aeabi_fmul>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 f962 	bl	8004bbc <go_straight>
						break;
 80018f8:	e028      	b.n	800194c <start_fill+0xb68>
					case turn_left_90:
						go_straight(d2, 1);
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <start_fill+0xb34>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 f95c 	bl	8004bbc <go_straight>
						turn_right90(&direction);
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <start_fill+0xb38>)
 8001906:	f003 f881 	bl	8004a0c <turn_right90>
						go_straight(d2, 0);
 800190a:	4b03      	ldr	r3, [pc, #12]	; (8001918 <start_fill+0xb34>)
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f003 f954 	bl	8004bbc <go_straight>
						break;
 8001914:	e01a      	b.n	800194c <start_fill+0xb68>
 8001916:	bf00      	nop
 8001918:	42e80000 	.word	0x42e80000
 800191c:	20000156 	.word	0x20000156
 8001920:	20000028 	.word	0x20000028
 8001924:	200002a4 	.word	0x200002a4
 8001928:	20000308 	.word	0x20000308
 800192c:	43960000 	.word	0x43960000
					case turn_right_90:
						go_straight(d2, 1);
 8001930:	4bba      	ldr	r3, [pc, #744]	; (8001c1c <start_fill+0xe38>)
 8001932:	2101      	movs	r1, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f003 f941 	bl	8004bbc <go_straight>
						turn_left90(&direction);
 800193a:	48b9      	ldr	r0, [pc, #740]	; (8001c20 <start_fill+0xe3c>)
 800193c:	f002 ff8e 	bl	800485c <turn_left90>
						go_straight(d2, 0);
 8001940:	4bb6      	ldr	r3, [pc, #728]	; (8001c1c <start_fill+0xe38>)
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f003 f939 	bl	8004bbc <go_straight>
						break;
 800194a:	bf00      	nop
				}
				i--;
 800194c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	81fb      	strh	r3, [r7, #14]
				if(stack[i][1] != -1 &&
 8001958:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800195c:	49b1      	ldr	r1, [pc, #708]	; (8001c24 <start_fill+0xe40>)
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	440b      	add	r3, r1
 8001966:	3301      	adds	r3, #1
 8001968:	f993 3000 	ldrsb.w	r3, [r3]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	f000 811e 	beq.w	8001bb0 <start_fill+0xdcc>
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001974:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001978:	49aa      	ldr	r1, [pc, #680]	; (8001c24 <start_fill+0xe40>)
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	440b      	add	r3, r1
 8001982:	3302      	adds	r3, #2
 8001984:	f993 3000 	ldrsb.w	r3, [r3]
 8001988:	4618      	mov	r0, r3
 800198a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800198e:	49a5      	ldr	r1, [pc, #660]	; (8001c24 <start_fill+0xe40>)
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	440b      	add	r3, r1
 8001998:	3301      	adds	r3, #1
 800199a:	f993 3000 	ldrsb.w	r3, [r3]
 800199e:	4619      	mov	r1, r3
 80019a0:	4aa1      	ldr	r2, [pc, #644]	; (8001c28 <start_fill+0xe44>)
 80019a2:	4603      	mov	r3, r0
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4403      	add	r3, r0
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
				if(stack[i][1] != -1 &&
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d120      	bne.n	80019fa <start_fill+0xc16>
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 80019b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019bc:	4999      	ldr	r1, [pc, #612]	; (8001c24 <start_fill+0xe40>)
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	3302      	adds	r3, #2
 80019c8:	f993 3000 	ldrsb.w	r3, [r3]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019d2:	4994      	ldr	r1, [pc, #592]	; (8001c24 <start_fill+0xe40>)
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	440b      	add	r3, r1
 80019dc:	3301      	adds	r3, #1
 80019de:	f993 3000 	ldrsb.w	r3, [r3]
 80019e2:	1e5a      	subs	r2, r3, #1
 80019e4:	4991      	ldr	r1, [pc, #580]	; (8001c2c <start_fill+0xe48>)
 80019e6:	4603      	mov	r3, r0
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4403      	add	r3, r0
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	440b      	add	r3, r1
 80019f0:	4413      	add	r3, r2
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80db 	beq.w	8001bb0 <start_fill+0xdcc>
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 80019fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019fe:	4989      	ldr	r1, [pc, #548]	; (8001c24 <start_fill+0xe40>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	3302      	adds	r3, #2
 8001a0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a14:	4983      	ldr	r1, [pc, #524]	; (8001c24 <start_fill+0xe40>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f993 3000 	ldrsb.w	r3, [r3]
 8001a24:	4619      	mov	r1, r3
 8001a26:	4a80      	ldr	r2, [pc, #512]	; (8001c28 <start_fill+0xe44>)
 8001a28:	4603      	mov	r3, r0
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4403      	add	r3, r0
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f003 0304 	and.w	r3, r3, #4
						((maze[stack[i][2]][stack[i][1]] & 8) != 0 || visited[stack[i][2]][stack[i][1] - 1]) &&
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d120      	bne.n	8001a80 <start_fill+0xc9c>
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001a3e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a42:	4978      	ldr	r1, [pc, #480]	; (8001c24 <start_fill+0xe40>)
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a58:	4972      	ldr	r1, [pc, #456]	; (8001c24 <start_fill+0xe40>)
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	3301      	adds	r3, #1
 8001a64:	f993 3000 	ldrsb.w	r3, [r3]
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	4970      	ldr	r1, [pc, #448]	; (8001c2c <start_fill+0xe48>)
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4403      	add	r3, r0
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	440b      	add	r3, r1
 8001a76:	4413      	add	r3, r2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8098 	beq.w	8001bb0 <start_fill+0xdcc>
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001a80:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a84:	4967      	ldr	r1, [pc, #412]	; (8001c24 <start_fill+0xe40>)
 8001a86:	4613      	mov	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3302      	adds	r3, #2
 8001a90:	f993 3000 	ldrsb.w	r3, [r3]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a9a:	4962      	ldr	r1, [pc, #392]	; (8001c24 <start_fill+0xe40>)
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f993 3000 	ldrsb.w	r3, [r3]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4a5e      	ldr	r2, [pc, #376]	; (8001c28 <start_fill+0xe44>)
 8001aae:	4603      	mov	r3, r0
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4403      	add	r3, r0
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
						((maze[stack[i][2]][stack[i][1]] & 4) != 0 || visited[stack[i][2]][stack[i][1] + 1]) &&
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d11f      	bne.n	8001b04 <start_fill+0xd20>
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001ac4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ac8:	4956      	ldr	r1, [pc, #344]	; (8001c24 <start_fill+0xe40>)
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ad8:	1e5a      	subs	r2, r3, #1
 8001ada:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001ade:	4851      	ldr	r0, [pc, #324]	; (8001c24 <start_fill+0xe40>)
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	440b      	add	r3, r1
 8001ae6:	4403      	add	r3, r0
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f993 3000 	ldrsb.w	r3, [r3]
 8001aee:	4618      	mov	r0, r3
 8001af0:	494e      	ldr	r1, [pc, #312]	; (8001c2c <start_fill+0xe48>)
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	440b      	add	r3, r1
 8001afc:	4403      	add	r3, r0
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d055      	beq.n	8001bb0 <start_fill+0xdcc>
						((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001b04:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b08:	4946      	ldr	r1, [pc, #280]	; (8001c24 <start_fill+0xe40>)
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	3302      	adds	r3, #2
 8001b14:	f993 3000 	ldrsb.w	r3, [r3]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b1e:	4941      	ldr	r1, [pc, #260]	; (8001c24 <start_fill+0xe40>)
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4a3d      	ldr	r2, [pc, #244]	; (8001c28 <start_fill+0xe44>)
 8001b32:	4603      	mov	r3, r0
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4403      	add	r3, r0
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
						((maze[stack[i][2]][stack[i][1]] & 2) != 0 || visited[stack[i][2] - 1][stack[i][1]]) &&
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d11f      	bne.n	8001b88 <start_fill+0xda4>
						((maze[stack[i][2]][stack[i][1]] & 1) != 0 || visited[stack[i][2] + 1][stack[i][1]])){
 8001b48:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b4c:	4935      	ldr	r1, [pc, #212]	; (8001c24 <start_fill+0xe40>)
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	3302      	adds	r3, #2
 8001b58:	f993 3000 	ldrsb.w	r3, [r3]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001b62:	4830      	ldr	r0, [pc, #192]	; (8001c24 <start_fill+0xe40>)
 8001b64:	460b      	mov	r3, r1
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	440b      	add	r3, r1
 8001b6a:	4403      	add	r3, r0
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b72:	4618      	mov	r0, r3
 8001b74:	492d      	ldr	r1, [pc, #180]	; (8001c2c <start_fill+0xe48>)
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	440b      	add	r3, r1
 8001b80:	4403      	add	r3, r0
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d013      	beq.n	8001bb0 <start_fill+0xdcc>
					stack[i][1] = -1;
 8001b88:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b8c:	4925      	ldr	r1, [pc, #148]	; (8001c24 <start_fill+0xe40>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	3301      	adds	r3, #1
 8001b98:	22ff      	movs	r2, #255	; 0xff
 8001b9a:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 8001b9c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ba0:	4920      	ldr	r1, [pc, #128]	; (8001c24 <start_fill+0xe40>)
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3302      	adds	r3, #2
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
			while(stack[i][1] == -1){
 8001bb0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bb4:	491b      	ldr	r1, [pc, #108]	; (8001c24 <start_fill+0xe40>)
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	f43f ae6a 	beq.w	80018a0 <start_fill+0xabc>
				}
			}
			x = stack[i][1];
 8001bcc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bd0:	4914      	ldr	r1, [pc, #80]	; (8001c24 <start_fill+0xe40>)
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f993 2000 	ldrsb.w	r2, [r3]
 8001be0:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <start_fill+0xe4c>)
 8001be2:	701a      	strb	r2, [r3, #0]
			y = stack[i][2];
 8001be4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001be8:	490e      	ldr	r1, [pc, #56]	; (8001c24 <start_fill+0xe40>)
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	f993 2000 	ldrsb.w	r2, [r3]
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <start_fill+0xe50>)
 8001bfa:	701a      	strb	r2, [r3, #0]
			switch(direction){
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <start_fill+0xe3c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	f200 83d9 	bhi.w	80023b8 <start_fill+0x15d4>
 8001c06:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <start_fill+0xe28>)
 8001c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0c:	08001c39 	.word	0x08001c39
 8001c10:	08001d95 	.word	0x08001d95
 8001c14:	08001f11 	.word	0x08001f11
 8001c18:	0800206d 	.word	0x0800206d
 8001c1c:	42e80000 	.word	0x42e80000
 8001c20:	20000156 	.word	0x20000156
 8001c24:	20000028 	.word	0x20000028
 8001c28:	200002a4 	.word	0x200002a4
 8001c2c:	20000308 	.word	0x20000308
 8001c30:	20000154 	.word	0x20000154
 8001c34:	20000155 	.word	0x20000155
				case west:
					if(stack[i][0] == straight){
 8001c38:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c3c:	49ac      	ldr	r1, [pc, #688]	; (8001ef0 <start_fill+0x110c>)
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	440b      	add	r3, r1
 8001c46:	f993 3000 	ldrsb.w	r3, [r3]
 8001c4a:	f113 0f06 	cmn.w	r3, #6
 8001c4e:	f040 8082 	bne.w	8001d56 <start_fill+0xf72>
						if((maze[y][x] & top_wall) == 0 && !visited[y - 1][x]){
 8001c52:	4ba8      	ldr	r3, [pc, #672]	; (8001ef4 <start_fill+0x1110>)
 8001c54:	f993 3000 	ldrsb.w	r3, [r3]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4ba7      	ldr	r3, [pc, #668]	; (8001ef8 <start_fill+0x1114>)
 8001c5c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c60:	4618      	mov	r0, r3
 8001c62:	4aa6      	ldr	r2, [pc, #664]	; (8001efc <start_fill+0x1118>)
 8001c64:	460b      	mov	r3, r1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4403      	add	r3, r0
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d12b      	bne.n	8001cd2 <start_fill+0xeee>
 8001c7a:	4b9e      	ldr	r3, [pc, #632]	; (8001ef4 <start_fill+0x1110>)
 8001c7c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c80:	1e5a      	subs	r2, r3, #1
 8001c82:	4b9d      	ldr	r3, [pc, #628]	; (8001ef8 <start_fill+0x1114>)
 8001c84:	f993 3000 	ldrsb.w	r3, [r3]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	499d      	ldr	r1, [pc, #628]	; (8001f00 <start_fill+0x111c>)
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	440b      	add	r3, r1
 8001c96:	4403      	add	r3, r0
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	f083 0301 	eor.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d016      	beq.n	8001cd2 <start_fill+0xeee>
							stack[i][0] = turn_left_90;
 8001ca4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ca8:	4991      	ldr	r1, [pc, #580]	; (8001ef0 <start_fill+0x110c>)
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	22fc      	movs	r2, #252	; 0xfc
 8001cb4:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001cb6:	4b93      	ldr	r3, [pc, #588]	; (8001f04 <start_fill+0x1120>)
 8001cb8:	2101      	movs	r1, #1
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f002 ff7e 	bl	8004bbc <go_straight>
							turn_right90(&direction);
 8001cc0:	4891      	ldr	r0, [pc, #580]	; (8001f08 <start_fill+0x1124>)
 8001cc2:	f002 fea3 	bl	8004a0c <turn_right90>
							go_straight(d2, 0);
 8001cc6:	4b8f      	ldr	r3, [pc, #572]	; (8001f04 <start_fill+0x1120>)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 ff76 	bl	8004bbc <go_straight>
						}
					} else {
						stack[i][0] = stack[i][0] == turn_left_90 ? turn_right_90 : turn_left_90;
						go_straight(square_size, 0);
					}
					break;
 8001cd0:	e36b      	b.n	80023aa <start_fill+0x15c6>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8001cd2:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <start_fill+0x1110>)
 8001cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4b87      	ldr	r3, [pc, #540]	; (8001ef8 <start_fill+0x1114>)
 8001cdc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	4a86      	ldr	r2, [pc, #536]	; (8001efc <start_fill+0x1118>)
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	4403      	add	r3, r0
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 8357 	bne.w	80023aa <start_fill+0x15c6>
 8001cfc:	4b7d      	ldr	r3, [pc, #500]	; (8001ef4 <start_fill+0x1110>)
 8001cfe:	f993 3000 	ldrsb.w	r3, [r3]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <start_fill+0x1114>)
 8001d06:	f993 3000 	ldrsb.w	r3, [r3]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	497c      	ldr	r1, [pc, #496]	; (8001f00 <start_fill+0x111c>)
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	440b      	add	r3, r1
 8001d18:	4403      	add	r3, r0
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	f083 0301 	eor.w	r3, r3, #1
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 8341 	beq.w	80023aa <start_fill+0x15c6>
							stack[i][0] = turn_right_90;
 8001d28:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d2c:	4970      	ldr	r1, [pc, #448]	; (8001ef0 <start_fill+0x110c>)
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	22ff      	movs	r2, #255	; 0xff
 8001d38:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001d3a:	4b72      	ldr	r3, [pc, #456]	; (8001f04 <start_fill+0x1120>)
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 ff3c 	bl	8004bbc <go_straight>
							turn_left90(&direction);
 8001d44:	4870      	ldr	r0, [pc, #448]	; (8001f08 <start_fill+0x1124>)
 8001d46:	f002 fd89 	bl	800485c <turn_left90>
							go_straight(d2, 0);
 8001d4a:	4b6e      	ldr	r3, [pc, #440]	; (8001f04 <start_fill+0x1120>)
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 ff34 	bl	8004bbc <go_straight>
					break;
 8001d54:	e329      	b.n	80023aa <start_fill+0x15c6>
						stack[i][0] = stack[i][0] == turn_left_90 ? turn_right_90 : turn_left_90;
 8001d56:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d5a:	4965      	ldr	r1, [pc, #404]	; (8001ef0 <start_fill+0x110c>)
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f993 3000 	ldrsb.w	r3, [r3]
 8001d68:	f113 0f04 	cmn.w	r3, #4
 8001d6c:	d102      	bne.n	8001d74 <start_fill+0xf90>
 8001d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d72:	e001      	b.n	8001d78 <start_fill+0xf94>
 8001d74:	f06f 0003 	mvn.w	r0, #3
 8001d78:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d7c:	495c      	ldr	r1, [pc, #368]	; (8001ef0 <start_fill+0x110c>)
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	4602      	mov	r2, r0
 8001d88:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	485f      	ldr	r0, [pc, #380]	; (8001f0c <start_fill+0x1128>)
 8001d8e:	f002 ff15 	bl	8004bbc <go_straight>
					break;
 8001d92:	e30a      	b.n	80023aa <start_fill+0x15c6>
				case east:
					if(stack[i][0] == straight){
 8001d94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d98:	4955      	ldr	r1, [pc, #340]	; (8001ef0 <start_fill+0x110c>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	f993 3000 	ldrsb.w	r3, [r3]
 8001da6:	f113 0f06 	cmn.w	r3, #6
 8001daa:	f040 8082 	bne.w	8001eb2 <start_fill+0x10ce>
						if(((maze[y][x] & top_wall) == 0) && !visited[y - 1][x]){
 8001dae:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <start_fill+0x1110>)
 8001db0:	f993 3000 	ldrsb.w	r3, [r3]
 8001db4:	4619      	mov	r1, r3
 8001db6:	4b50      	ldr	r3, [pc, #320]	; (8001ef8 <start_fill+0x1114>)
 8001db8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	4a4f      	ldr	r2, [pc, #316]	; (8001efc <start_fill+0x1118>)
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	4403      	add	r3, r0
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d12b      	bne.n	8001e2e <start_fill+0x104a>
 8001dd6:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <start_fill+0x1110>)
 8001dd8:	f993 3000 	ldrsb.w	r3, [r3]
 8001ddc:	1e5a      	subs	r2, r3, #1
 8001dde:	4b46      	ldr	r3, [pc, #280]	; (8001ef8 <start_fill+0x1114>)
 8001de0:	f993 3000 	ldrsb.w	r3, [r3]
 8001de4:	4618      	mov	r0, r3
 8001de6:	4946      	ldr	r1, [pc, #280]	; (8001f00 <start_fill+0x111c>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	440b      	add	r3, r1
 8001df2:	4403      	add	r3, r0
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	f083 0301 	eor.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d016      	beq.n	8001e2e <start_fill+0x104a>
							stack[i][0] = turn_right_90;
 8001e00:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e04:	493a      	ldr	r1, [pc, #232]	; (8001ef0 <start_fill+0x110c>)
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	22ff      	movs	r2, #255	; 0xff
 8001e10:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001e12:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <start_fill+0x1120>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 fed0 	bl	8004bbc <go_straight>
							turn_left90(&direction);
 8001e1c:	483a      	ldr	r0, [pc, #232]	; (8001f08 <start_fill+0x1124>)
 8001e1e:	f002 fd1d 	bl	800485c <turn_left90>
							go_straight(d2, 0);
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <start_fill+0x1120>)
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f002 fec8 	bl	8004bbc <go_straight>
						}
					} else {
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
						go_straight(square_size, 0);
					}
					break;
 8001e2c:	e2bf      	b.n	80023ae <start_fill+0x15ca>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8001e2e:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <start_fill+0x1110>)
 8001e30:	f993 3000 	ldrsb.w	r3, [r3]
 8001e34:	4619      	mov	r1, r3
 8001e36:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <start_fill+0x1114>)
 8001e38:	f993 3000 	ldrsb.w	r3, [r3]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	4a2f      	ldr	r2, [pc, #188]	; (8001efc <start_fill+0x1118>)
 8001e40:	460b      	mov	r3, r1
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	4403      	add	r3, r0
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 82ab 	bne.w	80023ae <start_fill+0x15ca>
 8001e58:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <start_fill+0x1110>)
 8001e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <start_fill+0x1114>)
 8001e62:	f993 3000 	ldrsb.w	r3, [r3]
 8001e66:	4618      	mov	r0, r3
 8001e68:	4925      	ldr	r1, [pc, #148]	; (8001f00 <start_fill+0x111c>)
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	440b      	add	r3, r1
 8001e74:	4403      	add	r3, r0
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	f083 0301 	eor.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8295 	beq.w	80023ae <start_fill+0x15ca>
							stack[i][0] = turn_left_90;
 8001e84:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e88:	4919      	ldr	r1, [pc, #100]	; (8001ef0 <start_fill+0x110c>)
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	440b      	add	r3, r1
 8001e92:	22fc      	movs	r2, #252	; 0xfc
 8001e94:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <start_fill+0x1120>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 fe8e 	bl	8004bbc <go_straight>
							turn_right90(&direction);
 8001ea0:	4819      	ldr	r0, [pc, #100]	; (8001f08 <start_fill+0x1124>)
 8001ea2:	f002 fdb3 	bl	8004a0c <turn_right90>
							go_straight(d2, 0);
 8001ea6:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <start_fill+0x1120>)
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 fe86 	bl	8004bbc <go_straight>
					break;
 8001eb0:	e27d      	b.n	80023ae <start_fill+0x15ca>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001eb2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001eb6:	490e      	ldr	r1, [pc, #56]	; (8001ef0 <start_fill+0x110c>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ec4:	f113 0f04 	cmn.w	r3, #4
 8001ec8:	d102      	bne.n	8001ed0 <start_fill+0x10ec>
 8001eca:	f04f 30ff 	mov.w	r0, #4294967295
 8001ece:	e001      	b.n	8001ed4 <start_fill+0x10f0>
 8001ed0:	f06f 0003 	mvn.w	r0, #3
 8001ed4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ed8:	4905      	ldr	r1, [pc, #20]	; (8001ef0 <start_fill+0x110c>)
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4808      	ldr	r0, [pc, #32]	; (8001f0c <start_fill+0x1128>)
 8001eea:	f002 fe67 	bl	8004bbc <go_straight>
					break;
 8001eee:	e25e      	b.n	80023ae <start_fill+0x15ca>
 8001ef0:	20000028 	.word	0x20000028
 8001ef4:	20000155 	.word	0x20000155
 8001ef8:	20000154 	.word	0x20000154
 8001efc:	200002a4 	.word	0x200002a4
 8001f00:	20000308 	.word	0x20000308
 8001f04:	42e80000 	.word	0x42e80000
 8001f08:	20000156 	.word	0x20000156
 8001f0c:	43960000 	.word	0x43960000
				case north:
					if(stack[i][0] == straight){
 8001f10:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f14:	49c3      	ldr	r1, [pc, #780]	; (8002224 <start_fill+0x1440>)
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f22:	f113 0f06 	cmn.w	r3, #6
 8001f26:	f040 8082 	bne.w	800202e <start_fill+0x124a>
						if((maze[y][x] & left_wall) == 0 && !visited[y][x - 1]){
 8001f2a:	4bbf      	ldr	r3, [pc, #764]	; (8002228 <start_fill+0x1444>)
 8001f2c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f30:	4619      	mov	r1, r3
 8001f32:	4bbe      	ldr	r3, [pc, #760]	; (800222c <start_fill+0x1448>)
 8001f34:	f993 3000 	ldrsb.w	r3, [r3]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	4abd      	ldr	r2, [pc, #756]	; (8002230 <start_fill+0x144c>)
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	4403      	add	r3, r0
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d12b      	bne.n	8001faa <start_fill+0x11c6>
 8001f52:	4bb5      	ldr	r3, [pc, #724]	; (8002228 <start_fill+0x1444>)
 8001f54:	f993 3000 	ldrsb.w	r3, [r3]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	4bb4      	ldr	r3, [pc, #720]	; (800222c <start_fill+0x1448>)
 8001f5c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f60:	1e5a      	subs	r2, r3, #1
 8001f62:	49b4      	ldr	r1, [pc, #720]	; (8002234 <start_fill+0x1450>)
 8001f64:	4603      	mov	r3, r0
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4403      	add	r3, r0
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	440b      	add	r3, r1
 8001f6e:	4413      	add	r3, r2
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	f083 0301 	eor.w	r3, r3, #1
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d016      	beq.n	8001faa <start_fill+0x11c6>
							stack[i][0] = turn_right_90;
 8001f7c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f80:	49a8      	ldr	r1, [pc, #672]	; (8002224 <start_fill+0x1440>)
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	22ff      	movs	r2, #255	; 0xff
 8001f8c:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001f8e:	4baa      	ldr	r3, [pc, #680]	; (8002238 <start_fill+0x1454>)
 8001f90:	2101      	movs	r1, #1
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 fe12 	bl	8004bbc <go_straight>
							turn_left90(&direction);
 8001f98:	48a8      	ldr	r0, [pc, #672]	; (800223c <start_fill+0x1458>)
 8001f9a:	f002 fc5f 	bl	800485c <turn_left90>
							go_straight(d2, 0);
 8001f9e:	4ba6      	ldr	r3, [pc, #664]	; (8002238 <start_fill+0x1454>)
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 fe0a 	bl	8004bbc <go_straight>
						}
					} else {
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
						go_straight(square_size, 0);
					}
					break;
 8001fa8:	e203      	b.n	80023b2 <start_fill+0x15ce>
						} else if((maze[y][x] & right_wall) == 0 && !visited[y][x + 1]) {
 8001faa:	4b9f      	ldr	r3, [pc, #636]	; (8002228 <start_fill+0x1444>)
 8001fac:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4b9e      	ldr	r3, [pc, #632]	; (800222c <start_fill+0x1448>)
 8001fb4:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	4a9d      	ldr	r2, [pc, #628]	; (8002230 <start_fill+0x144c>)
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4403      	add	r3, r0
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 81ef 	bne.w	80023b2 <start_fill+0x15ce>
 8001fd4:	4b94      	ldr	r3, [pc, #592]	; (8002228 <start_fill+0x1444>)
 8001fd6:	f993 3000 	ldrsb.w	r3, [r3]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	4b93      	ldr	r3, [pc, #588]	; (800222c <start_fill+0x1448>)
 8001fde:	f993 3000 	ldrsb.w	r3, [r3]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	4993      	ldr	r1, [pc, #588]	; (8002234 <start_fill+0x1450>)
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4403      	add	r3, r0
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	440b      	add	r3, r1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	f083 0301 	eor.w	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 81d9 	beq.w	80023b2 <start_fill+0x15ce>
							stack[i][0] = turn_left_90;
 8002000:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002004:	4987      	ldr	r1, [pc, #540]	; (8002224 <start_fill+0x1440>)
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	440b      	add	r3, r1
 800200e:	22fc      	movs	r2, #252	; 0xfc
 8002010:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8002012:	4b89      	ldr	r3, [pc, #548]	; (8002238 <start_fill+0x1454>)
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f002 fdd0 	bl	8004bbc <go_straight>
							turn_right90(&direction);
 800201c:	4887      	ldr	r0, [pc, #540]	; (800223c <start_fill+0x1458>)
 800201e:	f002 fcf5 	bl	8004a0c <turn_right90>
							go_straight(d2, 0);
 8002022:	4b85      	ldr	r3, [pc, #532]	; (8002238 <start_fill+0x1454>)
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f002 fdc8 	bl	8004bbc <go_straight>
					break;
 800202c:	e1c1      	b.n	80023b2 <start_fill+0x15ce>
						stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 800202e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002032:	497c      	ldr	r1, [pc, #496]	; (8002224 <start_fill+0x1440>)
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	440b      	add	r3, r1
 800203c:	f993 3000 	ldrsb.w	r3, [r3]
 8002040:	f113 0f04 	cmn.w	r3, #4
 8002044:	d102      	bne.n	800204c <start_fill+0x1268>
 8002046:	f04f 30ff 	mov.w	r0, #4294967295
 800204a:	e001      	b.n	8002050 <start_fill+0x126c>
 800204c:	f06f 0003 	mvn.w	r0, #3
 8002050:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002054:	4973      	ldr	r1, [pc, #460]	; (8002224 <start_fill+0x1440>)
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	440b      	add	r3, r1
 800205e:	4602      	mov	r2, r0
 8002060:	701a      	strb	r2, [r3, #0]
						go_straight(square_size, 0);
 8002062:	2100      	movs	r1, #0
 8002064:	4876      	ldr	r0, [pc, #472]	; (8002240 <start_fill+0x145c>)
 8002066:	f002 fda9 	bl	8004bbc <go_straight>
					break;
 800206a:	e1a2      	b.n	80023b2 <start_fill+0x15ce>
				case south:
					if(stack[i][0] == straight){
 800206c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002070:	496c      	ldr	r1, [pc, #432]	; (8002224 <start_fill+0x1440>)
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	440b      	add	r3, r1
 800207a:	f993 3000 	ldrsb.w	r3, [r3]
 800207e:	f113 0f06 	cmn.w	r3, #6
 8002082:	f040 8082 	bne.w	800218a <start_fill+0x13a6>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 8002086:	4b68      	ldr	r3, [pc, #416]	; (8002228 <start_fill+0x1444>)
 8002088:	f993 3000 	ldrsb.w	r3, [r3]
 800208c:	4619      	mov	r1, r3
 800208e:	4b67      	ldr	r3, [pc, #412]	; (800222c <start_fill+0x1448>)
 8002090:	f993 3000 	ldrsb.w	r3, [r3]
 8002094:	4618      	mov	r0, r3
 8002096:	4a66      	ldr	r2, [pc, #408]	; (8002230 <start_fill+0x144c>)
 8002098:	460b      	mov	r3, r1
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	4403      	add	r3, r0
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d12b      	bne.n	8002106 <start_fill+0x1322>
 80020ae:	4b5e      	ldr	r3, [pc, #376]	; (8002228 <start_fill+0x1444>)
 80020b0:	f993 3000 	ldrsb.w	r3, [r3]
 80020b4:	4618      	mov	r0, r3
 80020b6:	4b5d      	ldr	r3, [pc, #372]	; (800222c <start_fill+0x1448>)
 80020b8:	f993 3000 	ldrsb.w	r3, [r3]
 80020bc:	1e5a      	subs	r2, r3, #1
 80020be:	495d      	ldr	r1, [pc, #372]	; (8002234 <start_fill+0x1450>)
 80020c0:	4603      	mov	r3, r0
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4403      	add	r3, r0
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	440b      	add	r3, r1
 80020ca:	4413      	add	r3, r2
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	f083 0301 	eor.w	r3, r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d016      	beq.n	8002106 <start_fill+0x1322>
							stack[i][0] = turn_left_90;
 80020d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80020dc:	4951      	ldr	r1, [pc, #324]	; (8002224 <start_fill+0x1440>)
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	22fc      	movs	r2, #252	; 0xfc
 80020e8:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 80020ea:	4b53      	ldr	r3, [pc, #332]	; (8002238 <start_fill+0x1454>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	4618      	mov	r0, r3
 80020f0:	f002 fd64 	bl	8004bbc <go_straight>
							turn_right90(&direction);
 80020f4:	4851      	ldr	r0, [pc, #324]	; (800223c <start_fill+0x1458>)
 80020f6:	f002 fc89 	bl	8004a0c <turn_right90>
							go_straight(d2, 0);
 80020fa:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <start_fill+0x1454>)
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f002 fd5c 	bl	8004bbc <go_straight>
 8002104:	e14e      	b.n	80023a4 <start_fill+0x15c0>
						} else if(((maze[y][x] & right_wall) == 0) && !visited[y][x + 1]){
 8002106:	4b48      	ldr	r3, [pc, #288]	; (8002228 <start_fill+0x1444>)
 8002108:	f993 3000 	ldrsb.w	r3, [r3]
 800210c:	4619      	mov	r1, r3
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <start_fill+0x1448>)
 8002110:	f993 3000 	ldrsb.w	r3, [r3]
 8002114:	4618      	mov	r0, r3
 8002116:	4a46      	ldr	r2, [pc, #280]	; (8002230 <start_fill+0x144c>)
 8002118:	460b      	mov	r3, r1
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	4403      	add	r3, r0
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 8143 	bne.w	80023b6 <start_fill+0x15d2>
 8002130:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <start_fill+0x1444>)
 8002132:	f993 3000 	ldrsb.w	r3, [r3]
 8002136:	4618      	mov	r0, r3
 8002138:	4b3c      	ldr	r3, [pc, #240]	; (800222c <start_fill+0x1448>)
 800213a:	f993 3000 	ldrsb.w	r3, [r3]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	493c      	ldr	r1, [pc, #240]	; (8002234 <start_fill+0x1450>)
 8002142:	4603      	mov	r3, r0
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4403      	add	r3, r0
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	440b      	add	r3, r1
 800214c:	4413      	add	r3, r2
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f083 0301 	eor.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 812d 	beq.w	80023b6 <start_fill+0x15d2>
							stack[i][0] = turn_right_90;
 800215c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002160:	4930      	ldr	r1, [pc, #192]	; (8002224 <start_fill+0x1440>)
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	440b      	add	r3, r1
 800216a:	22ff      	movs	r2, #255	; 0xff
 800216c:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 800216e:	4b32      	ldr	r3, [pc, #200]	; (8002238 <start_fill+0x1454>)
 8002170:	2101      	movs	r1, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f002 fd22 	bl	8004bbc <go_straight>
							turn_left90(&direction);
 8002178:	4830      	ldr	r0, [pc, #192]	; (800223c <start_fill+0x1458>)
 800217a:	f002 fb6f 	bl	800485c <turn_left90>
							go_straight(d2, 0);
 800217e:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <start_fill+0x1454>)
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f002 fd1a 	bl	8004bbc <go_straight>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
							stack[i][0] = turn_left_90;
							go_straight(square_size, 0);
						}
					}
					break;
 8002188:	e115      	b.n	80023b6 <start_fill+0x15d2>
					} else if(stack[i][0] == turn_left_90){
 800218a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800218e:	4925      	ldr	r1, [pc, #148]	; (8002224 <start_fill+0x1440>)
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	440b      	add	r3, r1
 8002198:	f993 3000 	ldrsb.w	r3, [r3]
 800219c:	f113 0f04 	cmn.w	r3, #4
 80021a0:	f040 8089 	bne.w	80022b6 <start_fill+0x14d2>
						if(((maze[y][x] & right_wall) == 0) && !visited[y][x + 1]){
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <start_fill+0x1444>)
 80021a6:	f993 3000 	ldrsb.w	r3, [r3]
 80021aa:	4619      	mov	r1, r3
 80021ac:	4b1f      	ldr	r3, [pc, #124]	; (800222c <start_fill+0x1448>)
 80021ae:	f993 3000 	ldrsb.w	r3, [r3]
 80021b2:	4618      	mov	r0, r3
 80021b4:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <start_fill+0x144c>)
 80021b6:	460b      	mov	r3, r1
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	4403      	add	r3, r0
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d13b      	bne.n	8002244 <start_fill+0x1460>
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <start_fill+0x1444>)
 80021ce:	f993 3000 	ldrsb.w	r3, [r3]
 80021d2:	4618      	mov	r0, r3
 80021d4:	4b15      	ldr	r3, [pc, #84]	; (800222c <start_fill+0x1448>)
 80021d6:	f993 3000 	ldrsb.w	r3, [r3]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	4915      	ldr	r1, [pc, #84]	; (8002234 <start_fill+0x1450>)
 80021de:	4603      	mov	r3, r0
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4403      	add	r3, r0
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	440b      	add	r3, r1
 80021e8:	4413      	add	r3, r2
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	f083 0301 	eor.w	r3, r3, #1
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d026      	beq.n	8002244 <start_fill+0x1460>
							stack[i][0] = straight;
 80021f6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021fa:	490a      	ldr	r1, [pc, #40]	; (8002224 <start_fill+0x1440>)
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	440b      	add	r3, r1
 8002204:	22fa      	movs	r2, #250	; 0xfa
 8002206:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <start_fill+0x1454>)
 800220a:	2101      	movs	r1, #1
 800220c:	4618      	mov	r0, r3
 800220e:	f002 fcd5 	bl	8004bbc <go_straight>
							turn_left90(&direction);
 8002212:	480a      	ldr	r0, [pc, #40]	; (800223c <start_fill+0x1458>)
 8002214:	f002 fb22 	bl	800485c <turn_left90>
							go_straight(d2, 0);
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <start_fill+0x1454>)
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f002 fccd 	bl	8004bbc <go_straight>
 8002222:	e0bf      	b.n	80023a4 <start_fill+0x15c0>
 8002224:	20000028 	.word	0x20000028
 8002228:	20000155 	.word	0x20000155
 800222c:	20000154 	.word	0x20000154
 8002230:	200002a4 	.word	0x200002a4
 8002234:	20000308 	.word	0x20000308
 8002238:	42e80000 	.word	0x42e80000
 800223c:	20000156 	.word	0x20000156
 8002240:	43960000 	.word	0x43960000
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8002244:	4bb7      	ldr	r3, [pc, #732]	; (8002524 <start_fill+0x1740>)
 8002246:	f993 3000 	ldrsb.w	r3, [r3]
 800224a:	4619      	mov	r1, r3
 800224c:	4bb6      	ldr	r3, [pc, #728]	; (8002528 <start_fill+0x1744>)
 800224e:	f993 3000 	ldrsb.w	r3, [r3]
 8002252:	4618      	mov	r0, r3
 8002254:	4ab5      	ldr	r2, [pc, #724]	; (800252c <start_fill+0x1748>)
 8002256:	460b      	mov	r3, r1
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	4403      	add	r3, r0
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	f040 80a4 	bne.w	80023b6 <start_fill+0x15d2>
 800226e:	4bad      	ldr	r3, [pc, #692]	; (8002524 <start_fill+0x1740>)
 8002270:	f993 3000 	ldrsb.w	r3, [r3]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	4bac      	ldr	r3, [pc, #688]	; (8002528 <start_fill+0x1744>)
 8002278:	f993 3000 	ldrsb.w	r3, [r3]
 800227c:	4618      	mov	r0, r3
 800227e:	49ac      	ldr	r1, [pc, #688]	; (8002530 <start_fill+0x174c>)
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	440b      	add	r3, r1
 800228a:	4403      	add	r3, r0
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	f083 0301 	eor.w	r3, r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 808e 	beq.w	80023b6 <start_fill+0x15d2>
							stack[i][0] = turn_right_90;
 800229a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800229e:	49a5      	ldr	r1, [pc, #660]	; (8002534 <start_fill+0x1750>)
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	440b      	add	r3, r1
 80022a8:	22ff      	movs	r2, #255	; 0xff
 80022aa:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 80022ac:	2100      	movs	r1, #0
 80022ae:	48a2      	ldr	r0, [pc, #648]	; (8002538 <start_fill+0x1754>)
 80022b0:	f002 fc84 	bl	8004bbc <go_straight>
					break;
 80022b4:	e07f      	b.n	80023b6 <start_fill+0x15d2>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 80022b6:	4b9b      	ldr	r3, [pc, #620]	; (8002524 <start_fill+0x1740>)
 80022b8:	f993 3000 	ldrsb.w	r3, [r3]
 80022bc:	4619      	mov	r1, r3
 80022be:	4b9a      	ldr	r3, [pc, #616]	; (8002528 <start_fill+0x1744>)
 80022c0:	f993 3000 	ldrsb.w	r3, [r3]
 80022c4:	4618      	mov	r0, r3
 80022c6:	4a99      	ldr	r2, [pc, #612]	; (800252c <start_fill+0x1748>)
 80022c8:	460b      	mov	r3, r1
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	4403      	add	r3, r0
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d12b      	bne.n	8002336 <start_fill+0x1552>
 80022de:	4b91      	ldr	r3, [pc, #580]	; (8002524 <start_fill+0x1740>)
 80022e0:	f993 3000 	ldrsb.w	r3, [r3]
 80022e4:	4618      	mov	r0, r3
 80022e6:	4b90      	ldr	r3, [pc, #576]	; (8002528 <start_fill+0x1744>)
 80022e8:	f993 3000 	ldrsb.w	r3, [r3]
 80022ec:	1e5a      	subs	r2, r3, #1
 80022ee:	4990      	ldr	r1, [pc, #576]	; (8002530 <start_fill+0x174c>)
 80022f0:	4603      	mov	r3, r0
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4403      	add	r3, r0
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	440b      	add	r3, r1
 80022fa:	4413      	add	r3, r2
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f083 0301 	eor.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d016      	beq.n	8002336 <start_fill+0x1552>
							stack[i][0] = straight;
 8002308:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800230c:	4989      	ldr	r1, [pc, #548]	; (8002534 <start_fill+0x1750>)
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	440b      	add	r3, r1
 8002316:	22fa      	movs	r2, #250	; 0xfa
 8002318:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 800231a:	4b88      	ldr	r3, [pc, #544]	; (800253c <start_fill+0x1758>)
 800231c:	2101      	movs	r1, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f002 fc4c 	bl	8004bbc <go_straight>
							turn_right90(&direction);
 8002324:	4886      	ldr	r0, [pc, #536]	; (8002540 <start_fill+0x175c>)
 8002326:	f002 fb71 	bl	8004a0c <turn_right90>
							go_straight(d2, 0);
 800232a:	4b84      	ldr	r3, [pc, #528]	; (800253c <start_fill+0x1758>)
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f002 fc44 	bl	8004bbc <go_straight>
 8002334:	e036      	b.n	80023a4 <start_fill+0x15c0>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8002336:	4b7b      	ldr	r3, [pc, #492]	; (8002524 <start_fill+0x1740>)
 8002338:	f993 3000 	ldrsb.w	r3, [r3]
 800233c:	4619      	mov	r1, r3
 800233e:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <start_fill+0x1744>)
 8002340:	f993 3000 	ldrsb.w	r3, [r3]
 8002344:	4618      	mov	r0, r3
 8002346:	4a79      	ldr	r2, [pc, #484]	; (800252c <start_fill+0x1748>)
 8002348:	460b      	mov	r3, r1
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	4403      	add	r3, r0
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d12b      	bne.n	80023b6 <start_fill+0x15d2>
 800235e:	4b71      	ldr	r3, [pc, #452]	; (8002524 <start_fill+0x1740>)
 8002360:	f993 3000 	ldrsb.w	r3, [r3]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	4b70      	ldr	r3, [pc, #448]	; (8002528 <start_fill+0x1744>)
 8002368:	f993 3000 	ldrsb.w	r3, [r3]
 800236c:	4618      	mov	r0, r3
 800236e:	4970      	ldr	r1, [pc, #448]	; (8002530 <start_fill+0x174c>)
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	440b      	add	r3, r1
 800237a:	4403      	add	r3, r0
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	f083 0301 	eor.w	r3, r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d016      	beq.n	80023b6 <start_fill+0x15d2>
							stack[i][0] = turn_left_90;
 8002388:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800238c:	4969      	ldr	r1, [pc, #420]	; (8002534 <start_fill+0x1750>)
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	440b      	add	r3, r1
 8002396:	22fc      	movs	r2, #252	; 0xfc
 8002398:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 800239a:	2100      	movs	r1, #0
 800239c:	4866      	ldr	r0, [pc, #408]	; (8002538 <start_fill+0x1754>)
 800239e:	f002 fc0d 	bl	8004bbc <go_straight>
					break;
 80023a2:	e008      	b.n	80023b6 <start_fill+0x15d2>
 80023a4:	e007      	b.n	80023b6 <start_fill+0x15d2>
			if(frontfree){
 80023a6:	bf00      	nop
 80023a8:	e006      	b.n	80023b8 <start_fill+0x15d4>
					break;
 80023aa:	bf00      	nop
 80023ac:	e004      	b.n	80023b8 <start_fill+0x15d4>
					break;
 80023ae:	bf00      	nop
 80023b0:	e002      	b.n	80023b8 <start_fill+0x15d4>
					break;
 80023b2:	bf00      	nop
 80023b4:	e000      	b.n	80023b8 <start_fill+0x15d4>
					break;
 80023b6:	bf00      	nop
			}
		}
		for(int n = 0; n < grid_size; n++){
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	e0a8      	b.n	8002510 <start_fill+0x172c>
			for(int m = 0; m < grid_size; m++){
 80023be:	2300      	movs	r3, #0
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	e09e      	b.n	8002502 <start_fill+0x171e>
				if(!visited[n][m]){
 80023c4:	495a      	ldr	r1, [pc, #360]	; (8002530 <start_fill+0x174c>)
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	18ca      	adds	r2, r1, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	4413      	add	r3, r2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	f083 0301 	eor.w	r3, r3, #1
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 808c 	beq.w	80024fc <start_fill+0x1718>
					maze[n][m] |= 15;
 80023e4:	4951      	ldr	r1, [pc, #324]	; (800252c <start_fill+0x1748>)
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	18ca      	adds	r2, r1, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	4413      	add	r3, r2
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	f043 030f 	orr.w	r3, r3, #15
 80023fc:	b2d8      	uxtb	r0, r3
 80023fe:	494b      	ldr	r1, [pc, #300]	; (800252c <start_fill+0x1748>)
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	18ca      	adds	r2, r1, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4602      	mov	r2, r0
 8002412:	701a      	strb	r2, [r3, #0]
					if(n > 0){ maze[n - 1][m] |= bottom_wall; }
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	dd19      	ble.n	800244e <start_fill+0x166a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	4943      	ldr	r1, [pc, #268]	; (800252c <start_fill+0x1748>)
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	18ca      	adds	r2, r1, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	4413      	add	r3, r2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	3a01      	subs	r2, #1
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	b2d8      	uxtb	r0, r3
 800243a:	493c      	ldr	r1, [pc, #240]	; (800252c <start_fill+0x1748>)
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	18ca      	adds	r2, r1, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	4413      	add	r3, r2
 800244a:	4602      	mov	r2, r0
 800244c:	701a      	strb	r2, [r3, #0]
					if(n + 1 < grid_size){ maze[n + 1][m] |= top_wall; }
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b08      	cmp	r3, #8
 8002452:	dc19      	bgt.n	8002488 <start_fill+0x16a4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	4934      	ldr	r1, [pc, #208]	; (800252c <start_fill+0x1748>)
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	18ca      	adds	r2, r1, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4413      	add	r3, r2
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	3201      	adds	r2, #1
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	b2d8      	uxtb	r0, r3
 8002474:	492d      	ldr	r1, [pc, #180]	; (800252c <start_fill+0x1748>)
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	18ca      	adds	r2, r1, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4413      	add	r3, r2
 8002484:	4602      	mov	r2, r0
 8002486:	701a      	strb	r2, [r3, #0]
					if(m > 0){ maze[n][m - 1] |= right_wall; }
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	dd19      	ble.n	80024c2 <start_fill+0x16de>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	1e59      	subs	r1, r3, #1
 8002492:	4826      	ldr	r0, [pc, #152]	; (800252c <start_fill+0x1748>)
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4403      	add	r3, r0
 80024a0:	440b      	add	r3, r1
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	1e51      	subs	r1, r2, #1
 80024a8:	f043 0304 	orr.w	r3, r3, #4
 80024ac:	b2dc      	uxtb	r4, r3
 80024ae:	481f      	ldr	r0, [pc, #124]	; (800252c <start_fill+0x1748>)
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4403      	add	r3, r0
 80024bc:	440b      	add	r3, r1
 80024be:	4622      	mov	r2, r4
 80024c0:	701a      	strb	r2, [r3, #0]
					if(m + 1 < grid_size){ maze[n][m + 1] |= left_wall; }
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	dc19      	bgt.n	80024fc <start_fill+0x1718>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	1c59      	adds	r1, r3, #1
 80024cc:	4817      	ldr	r0, [pc, #92]	; (800252c <start_fill+0x1748>)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4403      	add	r3, r0
 80024da:	440b      	add	r3, r1
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	1c51      	adds	r1, r2, #1
 80024e2:	f043 0308 	orr.w	r3, r3, #8
 80024e6:	b2dc      	uxtb	r4, r3
 80024e8:	4810      	ldr	r0, [pc, #64]	; (800252c <start_fill+0x1748>)
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4403      	add	r3, r0
 80024f6:	440b      	add	r3, r1
 80024f8:	4622      	mov	r2, r4
 80024fa:	701a      	strb	r2, [r3, #0]
			for(int m = 0; m < grid_size; m++){
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b09      	cmp	r3, #9
 8002506:	f77f af5d 	ble.w	80023c4 <start_fill+0x15e0>
		for(int n = 0; n < grid_size; n++){
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3301      	adds	r3, #1
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b09      	cmp	r3, #9
 8002514:	f77f af53 	ble.w	80023be <start_fill+0x15da>
		frontfree = adc_value[0] < frontWallValue;
 8002518:	f7fe bcc0 	b.w	8000e9c <start_fill+0xb8>
				}
			}
		}
	}
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	bd90      	pop	{r4, r7, pc}
 8002524:	20000155 	.word	0x20000155
 8002528:	20000154 	.word	0x20000154
 800252c:	200002a4 	.word	0x200002a4
 8002530:	20000308 	.word	0x20000308
 8002534:	20000028 	.word	0x20000028
 8002538:	43960000 	.word	0x43960000
 800253c:	42e80000 	.word	0x42e80000
 8002540:	20000156 	.word	0x20000156

08002544 <found>:

void found(int16_t index){
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
	switch(direction){
 800254e:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <found+0x80>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d02c      	beq.n	80025b0 <found+0x6c>
 8002556:	2b02      	cmp	r3, #2
 8002558:	dc2f      	bgt.n	80025ba <found+0x76>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <found+0x20>
 800255e:	2b01      	cmp	r3, #1
 8002560:	d013      	beq.n	800258a <found+0x46>
			break;
		case north:
			go_straight(square_size * 2, 1);
			break;
	}
}
 8002562:	e02a      	b.n	80025ba <found+0x76>
			go_straight(d2, 1);
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <found+0x84>)
 8002566:	2101      	movs	r1, #1
 8002568:	4618      	mov	r0, r3
 800256a:	f002 fb27 	bl	8004bbc <go_straight>
			turn_right90(&direction);
 800256e:	4815      	ldr	r0, [pc, #84]	; (80025c4 <found+0x80>)
 8002570:	f002 fa4c 	bl	8004a0c <turn_right90>
			go_straight(d2 + square_size, 1);
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <found+0x84>)
 8002576:	4915      	ldr	r1, [pc, #84]	; (80025cc <found+0x88>)
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe fa8f 	bl	8000a9c <__addsf3>
 800257e:	4603      	mov	r3, r0
 8002580:	2101      	movs	r1, #1
 8002582:	4618      	mov	r0, r3
 8002584:	f002 fb1a 	bl	8004bbc <go_straight>
			break;
 8002588:	e017      	b.n	80025ba <found+0x76>
			go_straight(d2, 1);
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <found+0x84>)
 800258c:	2101      	movs	r1, #1
 800258e:	4618      	mov	r0, r3
 8002590:	f002 fb14 	bl	8004bbc <go_straight>
			turn_left90(&direction);
 8002594:	480b      	ldr	r0, [pc, #44]	; (80025c4 <found+0x80>)
 8002596:	f002 f961 	bl	800485c <turn_left90>
			go_straight(d2 + square_size, 1);
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <found+0x84>)
 800259c:	490b      	ldr	r1, [pc, #44]	; (80025cc <found+0x88>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fa7c 	bl	8000a9c <__addsf3>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2101      	movs	r1, #1
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 fb07 	bl	8004bbc <go_straight>
			break;
 80025ae:	e004      	b.n	80025ba <found+0x76>
			go_straight(square_size * 2, 1);
 80025b0:	2101      	movs	r1, #1
 80025b2:	4807      	ldr	r0, [pc, #28]	; (80025d0 <found+0x8c>)
 80025b4:	f002 fb02 	bl	8004bbc <go_straight>
			break;
 80025b8:	bf00      	nop
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000156 	.word	0x20000156
 80025c8:	42e80000 	.word	0x42e80000
 80025cc:	43960000 	.word	0x43960000
 80025d0:	44160000 	.word	0x44160000

080025d4 <set_wall>:

void set_wall(bool rbl, bool rbr, bool rbf){
 80025d4:	b490      	push	{r4, r7}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
 80025de:	460b      	mov	r3, r1
 80025e0:	71bb      	strb	r3, [r7, #6]
 80025e2:	4613      	mov	r3, r2
 80025e4:	717b      	strb	r3, [r7, #5]
	switch(direction){
 80025e6:	4b86      	ldr	r3, [pc, #536]	; (8002800 <set_wall+0x22c>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	f200 8415 	bhi.w	8002e1a <set_wall+0x846>
 80025f0:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <set_wall+0x24>)
 80025f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f6:	bf00      	nop
 80025f8:	08002609 	.word	0x08002609
 80025fc:	08002811 	.word	0x08002811
 8002600:	08002a15 	.word	0x08002a15
 8002604:	08002c19 	.word	0x08002c19
		case west:
			x--;
 8002608:	4b7e      	ldr	r3, [pc, #504]	; (8002804 <set_wall+0x230>)
 800260a:	f993 3000 	ldrsb.w	r3, [r3]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	b25a      	sxtb	r2, r3
 8002616:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <set_wall+0x230>)
 8002618:	701a      	strb	r2, [r3, #0]
			if(rbl){
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d04c      	beq.n	80026ba <set_wall+0xe6>
				maze[y][x] |= bottom_wall;
 8002620:	4b79      	ldr	r3, [pc, #484]	; (8002808 <set_wall+0x234>)
 8002622:	f993 3000 	ldrsb.w	r3, [r3]
 8002626:	4619      	mov	r1, r3
 8002628:	4b76      	ldr	r3, [pc, #472]	; (8002804 <set_wall+0x230>)
 800262a:	f993 3000 	ldrsb.w	r3, [r3]
 800262e:	4618      	mov	r0, r3
 8002630:	4a76      	ldr	r2, [pc, #472]	; (800280c <set_wall+0x238>)
 8002632:	460b      	mov	r3, r1
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	4403      	add	r3, r0
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4a71      	ldr	r2, [pc, #452]	; (8002808 <set_wall+0x234>)
 8002642:	f992 2000 	ldrsb.w	r2, [r2]
 8002646:	4611      	mov	r1, r2
 8002648:	4a6e      	ldr	r2, [pc, #440]	; (8002804 <set_wall+0x230>)
 800264a:	f992 2000 	ldrsb.w	r2, [r2]
 800264e:	4614      	mov	r4, r2
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	b2d8      	uxtb	r0, r3
 8002656:	4a6d      	ldr	r2, [pc, #436]	; (800280c <set_wall+0x238>)
 8002658:	460b      	mov	r3, r1
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	4423      	add	r3, r4
 8002664:	4602      	mov	r2, r0
 8002666:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002668:	4b67      	ldr	r3, [pc, #412]	; (8002808 <set_wall+0x234>)
 800266a:	f993 3000 	ldrsb.w	r3, [r3]
 800266e:	2b08      	cmp	r3, #8
 8002670:	dc23      	bgt.n	80026ba <set_wall+0xe6>
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <set_wall+0x234>)
 8002674:	f993 3000 	ldrsb.w	r3, [r3]
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	4b62      	ldr	r3, [pc, #392]	; (8002804 <set_wall+0x230>)
 800267c:	f993 3000 	ldrsb.w	r3, [r3]
 8002680:	4618      	mov	r0, r3
 8002682:	4962      	ldr	r1, [pc, #392]	; (800280c <set_wall+0x238>)
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	440b      	add	r3, r1
 800268e:	4403      	add	r3, r0
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	4a5d      	ldr	r2, [pc, #372]	; (8002808 <set_wall+0x234>)
 8002694:	f992 2000 	ldrsb.w	r2, [r2]
 8002698:	3201      	adds	r2, #1
 800269a:	495a      	ldr	r1, [pc, #360]	; (8002804 <set_wall+0x230>)
 800269c:	f991 1000 	ldrsb.w	r1, [r1]
 80026a0:	460c      	mov	r4, r1
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	b2d8      	uxtb	r0, r3
 80026a8:	4958      	ldr	r1, [pc, #352]	; (800280c <set_wall+0x238>)
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	440b      	add	r3, r1
 80026b4:	4423      	add	r3, r4
 80026b6:	4602      	mov	r2, r0
 80026b8:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 80026ba:	79bb      	ldrb	r3, [r7, #6]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d04c      	beq.n	800275a <set_wall+0x186>
				maze[y][x] |= top_wall;
 80026c0:	4b51      	ldr	r3, [pc, #324]	; (8002808 <set_wall+0x234>)
 80026c2:	f993 3000 	ldrsb.w	r3, [r3]
 80026c6:	4619      	mov	r1, r3
 80026c8:	4b4e      	ldr	r3, [pc, #312]	; (8002804 <set_wall+0x230>)
 80026ca:	f993 3000 	ldrsb.w	r3, [r3]
 80026ce:	4618      	mov	r0, r3
 80026d0:	4a4e      	ldr	r2, [pc, #312]	; (800280c <set_wall+0x238>)
 80026d2:	460b      	mov	r3, r1
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	4403      	add	r3, r0
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4a49      	ldr	r2, [pc, #292]	; (8002808 <set_wall+0x234>)
 80026e2:	f992 2000 	ldrsb.w	r2, [r2]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4a46      	ldr	r2, [pc, #280]	; (8002804 <set_wall+0x230>)
 80026ea:	f992 2000 	ldrsb.w	r2, [r2]
 80026ee:	4614      	mov	r4, r2
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	b2d8      	uxtb	r0, r3
 80026f6:	4a45      	ldr	r2, [pc, #276]	; (800280c <set_wall+0x238>)
 80026f8:	460b      	mov	r3, r1
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	4423      	add	r3, r4
 8002704:	4602      	mov	r2, r0
 8002706:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002708:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <set_wall+0x234>)
 800270a:	f993 3000 	ldrsb.w	r3, [r3]
 800270e:	2b00      	cmp	r3, #0
 8002710:	dd23      	ble.n	800275a <set_wall+0x186>
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <set_wall+0x234>)
 8002714:	f993 3000 	ldrsb.w	r3, [r3]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <set_wall+0x230>)
 800271c:	f993 3000 	ldrsb.w	r3, [r3]
 8002720:	4618      	mov	r0, r3
 8002722:	493a      	ldr	r1, [pc, #232]	; (800280c <set_wall+0x238>)
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	440b      	add	r3, r1
 800272e:	4403      	add	r3, r0
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	4a35      	ldr	r2, [pc, #212]	; (8002808 <set_wall+0x234>)
 8002734:	f992 2000 	ldrsb.w	r2, [r2]
 8002738:	3a01      	subs	r2, #1
 800273a:	4932      	ldr	r1, [pc, #200]	; (8002804 <set_wall+0x230>)
 800273c:	f991 1000 	ldrsb.w	r1, [r1]
 8002740:	460c      	mov	r4, r1
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	b2d8      	uxtb	r0, r3
 8002748:	4930      	ldr	r1, [pc, #192]	; (800280c <set_wall+0x238>)
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	440b      	add	r3, r1
 8002754:	4423      	add	r3, r4
 8002756:	4602      	mov	r2, r0
 8002758:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 800275a:	797b      	ldrb	r3, [r7, #5]
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8355 	beq.w	8002e0c <set_wall+0x838>
				maze[y][x] |= left_wall;
 8002762:	4b29      	ldr	r3, [pc, #164]	; (8002808 <set_wall+0x234>)
 8002764:	f993 3000 	ldrsb.w	r3, [r3]
 8002768:	4619      	mov	r1, r3
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <set_wall+0x230>)
 800276c:	f993 3000 	ldrsb.w	r3, [r3]
 8002770:	4618      	mov	r0, r3
 8002772:	4a26      	ldr	r2, [pc, #152]	; (800280c <set_wall+0x238>)
 8002774:	460b      	mov	r3, r1
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	4403      	add	r3, r0
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	4a21      	ldr	r2, [pc, #132]	; (8002808 <set_wall+0x234>)
 8002784:	f992 2000 	ldrsb.w	r2, [r2]
 8002788:	4611      	mov	r1, r2
 800278a:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <set_wall+0x230>)
 800278c:	f992 2000 	ldrsb.w	r2, [r2]
 8002790:	4614      	mov	r4, r2
 8002792:	f043 0308 	orr.w	r3, r3, #8
 8002796:	b2d8      	uxtb	r0, r3
 8002798:	4a1c      	ldr	r2, [pc, #112]	; (800280c <set_wall+0x238>)
 800279a:	460b      	mov	r3, r1
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	4423      	add	r3, r4
 80027a6:	4602      	mov	r2, r0
 80027a8:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <set_wall+0x230>)
 80027ac:	f993 3000 	ldrsb.w	r3, [r3]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f340 832b 	ble.w	8002e0c <set_wall+0x838>
 80027b6:	4b14      	ldr	r3, [pc, #80]	; (8002808 <set_wall+0x234>)
 80027b8:	f993 3000 	ldrsb.w	r3, [r3]
 80027bc:	4618      	mov	r0, r3
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <set_wall+0x230>)
 80027c0:	f993 3000 	ldrsb.w	r3, [r3]
 80027c4:	1e5a      	subs	r2, r3, #1
 80027c6:	4911      	ldr	r1, [pc, #68]	; (800280c <set_wall+0x238>)
 80027c8:	4603      	mov	r3, r0
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4403      	add	r3, r0
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	440b      	add	r3, r1
 80027d2:	4413      	add	r3, r2
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <set_wall+0x234>)
 80027d8:	f992 2000 	ldrsb.w	r2, [r2]
 80027dc:	4610      	mov	r0, r2
 80027de:	4a09      	ldr	r2, [pc, #36]	; (8002804 <set_wall+0x230>)
 80027e0:	f992 2000 	ldrsb.w	r2, [r2]
 80027e4:	3a01      	subs	r2, #1
 80027e6:	f043 0304 	orr.w	r3, r3, #4
 80027ea:	b2dc      	uxtb	r4, r3
 80027ec:	4907      	ldr	r1, [pc, #28]	; (800280c <set_wall+0x238>)
 80027ee:	4603      	mov	r3, r0
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4403      	add	r3, r0
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	440b      	add	r3, r1
 80027f8:	4413      	add	r3, r2
 80027fa:	4622      	mov	r2, r4
 80027fc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80027fe:	e305      	b.n	8002e0c <set_wall+0x838>
 8002800:	20000156 	.word	0x20000156
 8002804:	20000154 	.word	0x20000154
 8002808:	20000155 	.word	0x20000155
 800280c:	200002a4 	.word	0x200002a4
		case east:
			x++;
 8002810:	4b7d      	ldr	r3, [pc, #500]	; (8002a08 <set_wall+0x434>)
 8002812:	f993 3000 	ldrsb.w	r3, [r3]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	3301      	adds	r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	b25a      	sxtb	r2, r3
 800281e:	4b7a      	ldr	r3, [pc, #488]	; (8002a08 <set_wall+0x434>)
 8002820:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d04c      	beq.n	80028c2 <set_wall+0x2ee>
				maze[y][x] |= top_wall;
 8002828:	4b78      	ldr	r3, [pc, #480]	; (8002a0c <set_wall+0x438>)
 800282a:	f993 3000 	ldrsb.w	r3, [r3]
 800282e:	4619      	mov	r1, r3
 8002830:	4b75      	ldr	r3, [pc, #468]	; (8002a08 <set_wall+0x434>)
 8002832:	f993 3000 	ldrsb.w	r3, [r3]
 8002836:	4618      	mov	r0, r3
 8002838:	4a75      	ldr	r2, [pc, #468]	; (8002a10 <set_wall+0x43c>)
 800283a:	460b      	mov	r3, r1
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	4403      	add	r3, r0
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4a70      	ldr	r2, [pc, #448]	; (8002a0c <set_wall+0x438>)
 800284a:	f992 2000 	ldrsb.w	r2, [r2]
 800284e:	4611      	mov	r1, r2
 8002850:	4a6d      	ldr	r2, [pc, #436]	; (8002a08 <set_wall+0x434>)
 8002852:	f992 2000 	ldrsb.w	r2, [r2]
 8002856:	4614      	mov	r4, r2
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	b2d8      	uxtb	r0, r3
 800285e:	4a6c      	ldr	r2, [pc, #432]	; (8002a10 <set_wall+0x43c>)
 8002860:	460b      	mov	r3, r1
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	4423      	add	r3, r4
 800286c:	4602      	mov	r2, r0
 800286e:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002870:	4b66      	ldr	r3, [pc, #408]	; (8002a0c <set_wall+0x438>)
 8002872:	f993 3000 	ldrsb.w	r3, [r3]
 8002876:	2b00      	cmp	r3, #0
 8002878:	dd23      	ble.n	80028c2 <set_wall+0x2ee>
 800287a:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <set_wall+0x438>)
 800287c:	f993 3000 	ldrsb.w	r3, [r3]
 8002880:	1e5a      	subs	r2, r3, #1
 8002882:	4b61      	ldr	r3, [pc, #388]	; (8002a08 <set_wall+0x434>)
 8002884:	f993 3000 	ldrsb.w	r3, [r3]
 8002888:	4618      	mov	r0, r3
 800288a:	4961      	ldr	r1, [pc, #388]	; (8002a10 <set_wall+0x43c>)
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	440b      	add	r3, r1
 8002896:	4403      	add	r3, r0
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	4a5c      	ldr	r2, [pc, #368]	; (8002a0c <set_wall+0x438>)
 800289c:	f992 2000 	ldrsb.w	r2, [r2]
 80028a0:	3a01      	subs	r2, #1
 80028a2:	4959      	ldr	r1, [pc, #356]	; (8002a08 <set_wall+0x434>)
 80028a4:	f991 1000 	ldrsb.w	r1, [r1]
 80028a8:	460c      	mov	r4, r1
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	b2d8      	uxtb	r0, r3
 80028b0:	4957      	ldr	r1, [pc, #348]	; (8002a10 <set_wall+0x43c>)
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	440b      	add	r3, r1
 80028bc:	4423      	add	r3, r4
 80028be:	4602      	mov	r2, r0
 80028c0:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 80028c2:	79bb      	ldrb	r3, [r7, #6]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d04c      	beq.n	8002962 <set_wall+0x38e>
				maze[y][x] |= bottom_wall;
 80028c8:	4b50      	ldr	r3, [pc, #320]	; (8002a0c <set_wall+0x438>)
 80028ca:	f993 3000 	ldrsb.w	r3, [r3]
 80028ce:	4619      	mov	r1, r3
 80028d0:	4b4d      	ldr	r3, [pc, #308]	; (8002a08 <set_wall+0x434>)
 80028d2:	f993 3000 	ldrsb.w	r3, [r3]
 80028d6:	4618      	mov	r0, r3
 80028d8:	4a4d      	ldr	r2, [pc, #308]	; (8002a10 <set_wall+0x43c>)
 80028da:	460b      	mov	r3, r1
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	4403      	add	r3, r0
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4a48      	ldr	r2, [pc, #288]	; (8002a0c <set_wall+0x438>)
 80028ea:	f992 2000 	ldrsb.w	r2, [r2]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4a45      	ldr	r2, [pc, #276]	; (8002a08 <set_wall+0x434>)
 80028f2:	f992 2000 	ldrsb.w	r2, [r2]
 80028f6:	4614      	mov	r4, r2
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b2d8      	uxtb	r0, r3
 80028fe:	4a44      	ldr	r2, [pc, #272]	; (8002a10 <set_wall+0x43c>)
 8002900:	460b      	mov	r3, r1
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	4423      	add	r3, r4
 800290c:	4602      	mov	r2, r0
 800290e:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002910:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <set_wall+0x438>)
 8002912:	f993 3000 	ldrsb.w	r3, [r3]
 8002916:	2b08      	cmp	r3, #8
 8002918:	dc23      	bgt.n	8002962 <set_wall+0x38e>
 800291a:	4b3c      	ldr	r3, [pc, #240]	; (8002a0c <set_wall+0x438>)
 800291c:	f993 3000 	ldrsb.w	r3, [r3]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <set_wall+0x434>)
 8002924:	f993 3000 	ldrsb.w	r3, [r3]
 8002928:	4618      	mov	r0, r3
 800292a:	4939      	ldr	r1, [pc, #228]	; (8002a10 <set_wall+0x43c>)
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	440b      	add	r3, r1
 8002936:	4403      	add	r3, r0
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	4a34      	ldr	r2, [pc, #208]	; (8002a0c <set_wall+0x438>)
 800293c:	f992 2000 	ldrsb.w	r2, [r2]
 8002940:	3201      	adds	r2, #1
 8002942:	4931      	ldr	r1, [pc, #196]	; (8002a08 <set_wall+0x434>)
 8002944:	f991 1000 	ldrsb.w	r1, [r1]
 8002948:	460c      	mov	r4, r1
 800294a:	f043 0302 	orr.w	r3, r3, #2
 800294e:	b2d8      	uxtb	r0, r3
 8002950:	492f      	ldr	r1, [pc, #188]	; (8002a10 <set_wall+0x43c>)
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	440b      	add	r3, r1
 800295c:	4423      	add	r3, r4
 800295e:	4602      	mov	r2, r0
 8002960:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002962:	797b      	ldrb	r3, [r7, #5]
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8253 	beq.w	8002e10 <set_wall+0x83c>
				maze[y][x] |= right_wall;
 800296a:	4b28      	ldr	r3, [pc, #160]	; (8002a0c <set_wall+0x438>)
 800296c:	f993 3000 	ldrsb.w	r3, [r3]
 8002970:	4619      	mov	r1, r3
 8002972:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <set_wall+0x434>)
 8002974:	f993 3000 	ldrsb.w	r3, [r3]
 8002978:	4618      	mov	r0, r3
 800297a:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <set_wall+0x43c>)
 800297c:	460b      	mov	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	4403      	add	r3, r0
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	4a20      	ldr	r2, [pc, #128]	; (8002a0c <set_wall+0x438>)
 800298c:	f992 2000 	ldrsb.w	r2, [r2]
 8002990:	4611      	mov	r1, r2
 8002992:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <set_wall+0x434>)
 8002994:	f992 2000 	ldrsb.w	r2, [r2]
 8002998:	4614      	mov	r4, r2
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	b2d8      	uxtb	r0, r3
 80029a0:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <set_wall+0x43c>)
 80029a2:	460b      	mov	r3, r1
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	4423      	add	r3, r4
 80029ae:	4602      	mov	r2, r0
 80029b0:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <set_wall+0x434>)
 80029b4:	f993 3000 	ldrsb.w	r3, [r3]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	f300 8229 	bgt.w	8002e10 <set_wall+0x83c>
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <set_wall+0x438>)
 80029c0:	f993 3000 	ldrsb.w	r3, [r3]
 80029c4:	4618      	mov	r0, r3
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <set_wall+0x434>)
 80029c8:	f993 3000 	ldrsb.w	r3, [r3]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	4910      	ldr	r1, [pc, #64]	; (8002a10 <set_wall+0x43c>)
 80029d0:	4603      	mov	r3, r0
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4403      	add	r3, r0
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	440b      	add	r3, r1
 80029da:	4413      	add	r3, r2
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <set_wall+0x438>)
 80029e0:	f992 2000 	ldrsb.w	r2, [r2]
 80029e4:	4610      	mov	r0, r2
 80029e6:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <set_wall+0x434>)
 80029e8:	f992 2000 	ldrsb.w	r2, [r2]
 80029ec:	3201      	adds	r2, #1
 80029ee:	f043 0308 	orr.w	r3, r3, #8
 80029f2:	b2dc      	uxtb	r4, r3
 80029f4:	4906      	ldr	r1, [pc, #24]	; (8002a10 <set_wall+0x43c>)
 80029f6:	4603      	mov	r3, r0
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4403      	add	r3, r0
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	440b      	add	r3, r1
 8002a00:	4413      	add	r3, r2
 8002a02:	4622      	mov	r2, r4
 8002a04:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a06:	e203      	b.n	8002e10 <set_wall+0x83c>
 8002a08:	20000154 	.word	0x20000154
 8002a0c:	20000155 	.word	0x20000155
 8002a10:	200002a4 	.word	0x200002a4
		case north:
			y--;
 8002a14:	4b7d      	ldr	r3, [pc, #500]	; (8002c0c <set_wall+0x638>)
 8002a16:	f993 3000 	ldrsb.w	r3, [r3]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	b25a      	sxtb	r2, r3
 8002a22:	4b7a      	ldr	r3, [pc, #488]	; (8002c0c <set_wall+0x638>)
 8002a24:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d04c      	beq.n	8002ac6 <set_wall+0x4f2>
				maze[y][x] |= left_wall;
 8002a2c:	4b77      	ldr	r3, [pc, #476]	; (8002c0c <set_wall+0x638>)
 8002a2e:	f993 3000 	ldrsb.w	r3, [r3]
 8002a32:	4619      	mov	r1, r3
 8002a34:	4b76      	ldr	r3, [pc, #472]	; (8002c10 <set_wall+0x63c>)
 8002a36:	f993 3000 	ldrsb.w	r3, [r3]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	4a75      	ldr	r2, [pc, #468]	; (8002c14 <set_wall+0x640>)
 8002a3e:	460b      	mov	r3, r1
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	4403      	add	r3, r0
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4a6f      	ldr	r2, [pc, #444]	; (8002c0c <set_wall+0x638>)
 8002a4e:	f992 2000 	ldrsb.w	r2, [r2]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4a6e      	ldr	r2, [pc, #440]	; (8002c10 <set_wall+0x63c>)
 8002a56:	f992 2000 	ldrsb.w	r2, [r2]
 8002a5a:	4614      	mov	r4, r2
 8002a5c:	f043 0308 	orr.w	r3, r3, #8
 8002a60:	b2d8      	uxtb	r0, r3
 8002a62:	4a6c      	ldr	r2, [pc, #432]	; (8002c14 <set_wall+0x640>)
 8002a64:	460b      	mov	r3, r1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	4423      	add	r3, r4
 8002a70:	4602      	mov	r2, r0
 8002a72:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002a74:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <set_wall+0x63c>)
 8002a76:	f993 3000 	ldrsb.w	r3, [r3]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	dd23      	ble.n	8002ac6 <set_wall+0x4f2>
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <set_wall+0x638>)
 8002a80:	f993 3000 	ldrsb.w	r3, [r3]
 8002a84:	4618      	mov	r0, r3
 8002a86:	4b62      	ldr	r3, [pc, #392]	; (8002c10 <set_wall+0x63c>)
 8002a88:	f993 3000 	ldrsb.w	r3, [r3]
 8002a8c:	1e5a      	subs	r2, r3, #1
 8002a8e:	4961      	ldr	r1, [pc, #388]	; (8002c14 <set_wall+0x640>)
 8002a90:	4603      	mov	r3, r0
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4403      	add	r3, r0
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	440b      	add	r3, r1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	4a5b      	ldr	r2, [pc, #364]	; (8002c0c <set_wall+0x638>)
 8002aa0:	f992 2000 	ldrsb.w	r2, [r2]
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4a5a      	ldr	r2, [pc, #360]	; (8002c10 <set_wall+0x63c>)
 8002aa8:	f992 2000 	ldrsb.w	r2, [r2]
 8002aac:	3a01      	subs	r2, #1
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	b2dc      	uxtb	r4, r3
 8002ab4:	4957      	ldr	r1, [pc, #348]	; (8002c14 <set_wall+0x640>)
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4403      	add	r3, r0
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	440b      	add	r3, r1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	4622      	mov	r2, r4
 8002ac4:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002ac6:	79bb      	ldrb	r3, [r7, #6]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d04c      	beq.n	8002b66 <set_wall+0x592>
				maze[y][x] |= right_wall;
 8002acc:	4b4f      	ldr	r3, [pc, #316]	; (8002c0c <set_wall+0x638>)
 8002ace:	f993 3000 	ldrsb.w	r3, [r3]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4b4e      	ldr	r3, [pc, #312]	; (8002c10 <set_wall+0x63c>)
 8002ad6:	f993 3000 	ldrsb.w	r3, [r3]
 8002ada:	4618      	mov	r0, r3
 8002adc:	4a4d      	ldr	r2, [pc, #308]	; (8002c14 <set_wall+0x640>)
 8002ade:	460b      	mov	r3, r1
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4403      	add	r3, r0
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4a47      	ldr	r2, [pc, #284]	; (8002c0c <set_wall+0x638>)
 8002aee:	f992 2000 	ldrsb.w	r2, [r2]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4a46      	ldr	r2, [pc, #280]	; (8002c10 <set_wall+0x63c>)
 8002af6:	f992 2000 	ldrsb.w	r2, [r2]
 8002afa:	4614      	mov	r4, r2
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	b2d8      	uxtb	r0, r3
 8002b02:	4a44      	ldr	r2, [pc, #272]	; (8002c14 <set_wall+0x640>)
 8002b04:	460b      	mov	r3, r1
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	4423      	add	r3, r4
 8002b10:	4602      	mov	r2, r0
 8002b12:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002b14:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <set_wall+0x63c>)
 8002b16:	f993 3000 	ldrsb.w	r3, [r3]
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	dc23      	bgt.n	8002b66 <set_wall+0x592>
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <set_wall+0x638>)
 8002b20:	f993 3000 	ldrsb.w	r3, [r3]
 8002b24:	4618      	mov	r0, r3
 8002b26:	4b3a      	ldr	r3, [pc, #232]	; (8002c10 <set_wall+0x63c>)
 8002b28:	f993 3000 	ldrsb.w	r3, [r3]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	4939      	ldr	r1, [pc, #228]	; (8002c14 <set_wall+0x640>)
 8002b30:	4603      	mov	r3, r0
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4403      	add	r3, r0
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	440b      	add	r3, r1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	4a33      	ldr	r2, [pc, #204]	; (8002c0c <set_wall+0x638>)
 8002b40:	f992 2000 	ldrsb.w	r2, [r2]
 8002b44:	4610      	mov	r0, r2
 8002b46:	4a32      	ldr	r2, [pc, #200]	; (8002c10 <set_wall+0x63c>)
 8002b48:	f992 2000 	ldrsb.w	r2, [r2]
 8002b4c:	3201      	adds	r2, #1
 8002b4e:	f043 0308 	orr.w	r3, r3, #8
 8002b52:	b2dc      	uxtb	r4, r3
 8002b54:	492f      	ldr	r1, [pc, #188]	; (8002c14 <set_wall+0x640>)
 8002b56:	4603      	mov	r3, r0
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4403      	add	r3, r0
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	440b      	add	r3, r1
 8002b60:	4413      	add	r3, r2
 8002b62:	4622      	mov	r2, r4
 8002b64:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002b66:	797b      	ldrb	r3, [r7, #5]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8153 	beq.w	8002e14 <set_wall+0x840>
				maze[y][x] |= top_wall;
 8002b6e:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <set_wall+0x638>)
 8002b70:	f993 3000 	ldrsb.w	r3, [r3]
 8002b74:	4619      	mov	r1, r3
 8002b76:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <set_wall+0x63c>)
 8002b78:	f993 3000 	ldrsb.w	r3, [r3]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	4a25      	ldr	r2, [pc, #148]	; (8002c14 <set_wall+0x640>)
 8002b80:	460b      	mov	r3, r1
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	4403      	add	r3, r0
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <set_wall+0x638>)
 8002b90:	f992 2000 	ldrsb.w	r2, [r2]
 8002b94:	4611      	mov	r1, r2
 8002b96:	4a1e      	ldr	r2, [pc, #120]	; (8002c10 <set_wall+0x63c>)
 8002b98:	f992 2000 	ldrsb.w	r2, [r2]
 8002b9c:	4614      	mov	r4, r2
 8002b9e:	f043 0302 	orr.w	r3, r3, #2
 8002ba2:	b2d8      	uxtb	r0, r3
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <set_wall+0x640>)
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	4423      	add	r3, r4
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <set_wall+0x638>)
 8002bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f340 8129 	ble.w	8002e14 <set_wall+0x840>
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <set_wall+0x638>)
 8002bc4:	f993 3000 	ldrsb.w	r3, [r3]
 8002bc8:	1e5a      	subs	r2, r3, #1
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <set_wall+0x63c>)
 8002bcc:	f993 3000 	ldrsb.w	r3, [r3]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	4910      	ldr	r1, [pc, #64]	; (8002c14 <set_wall+0x640>)
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	440b      	add	r3, r1
 8002bde:	4403      	add	r3, r0
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <set_wall+0x638>)
 8002be4:	f992 2000 	ldrsb.w	r2, [r2]
 8002be8:	3a01      	subs	r2, #1
 8002bea:	4909      	ldr	r1, [pc, #36]	; (8002c10 <set_wall+0x63c>)
 8002bec:	f991 1000 	ldrsb.w	r1, [r1]
 8002bf0:	460c      	mov	r4, r1
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	b2d8      	uxtb	r0, r3
 8002bf8:	4906      	ldr	r1, [pc, #24]	; (8002c14 <set_wall+0x640>)
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	440b      	add	r3, r1
 8002c04:	4423      	add	r3, r4
 8002c06:	4602      	mov	r2, r0
 8002c08:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002c0a:	e103      	b.n	8002e14 <set_wall+0x840>
 8002c0c:	20000155 	.word	0x20000155
 8002c10:	20000154 	.word	0x20000154
 8002c14:	200002a4 	.word	0x200002a4
		case south:
			y++;
 8002c18:	4b82      	ldr	r3, [pc, #520]	; (8002e24 <set_wall+0x850>)
 8002c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	b25a      	sxtb	r2, r3
 8002c26:	4b7f      	ldr	r3, [pc, #508]	; (8002e24 <set_wall+0x850>)
 8002c28:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d04c      	beq.n	8002cca <set_wall+0x6f6>
				maze[y][x] |= right_wall;
 8002c30:	4b7c      	ldr	r3, [pc, #496]	; (8002e24 <set_wall+0x850>)
 8002c32:	f993 3000 	ldrsb.w	r3, [r3]
 8002c36:	4619      	mov	r1, r3
 8002c38:	4b7b      	ldr	r3, [pc, #492]	; (8002e28 <set_wall+0x854>)
 8002c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	4a7a      	ldr	r2, [pc, #488]	; (8002e2c <set_wall+0x858>)
 8002c42:	460b      	mov	r3, r1
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4403      	add	r3, r0
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4a74      	ldr	r2, [pc, #464]	; (8002e24 <set_wall+0x850>)
 8002c52:	f992 2000 	ldrsb.w	r2, [r2]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4a73      	ldr	r2, [pc, #460]	; (8002e28 <set_wall+0x854>)
 8002c5a:	f992 2000 	ldrsb.w	r2, [r2]
 8002c5e:	4614      	mov	r4, r2
 8002c60:	f043 0304 	orr.w	r3, r3, #4
 8002c64:	b2d8      	uxtb	r0, r3
 8002c66:	4a71      	ldr	r2, [pc, #452]	; (8002e2c <set_wall+0x858>)
 8002c68:	460b      	mov	r3, r1
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	4423      	add	r3, r4
 8002c74:	4602      	mov	r2, r0
 8002c76:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002c78:	4b6b      	ldr	r3, [pc, #428]	; (8002e28 <set_wall+0x854>)
 8002c7a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	dc23      	bgt.n	8002cca <set_wall+0x6f6>
 8002c82:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <set_wall+0x850>)
 8002c84:	f993 3000 	ldrsb.w	r3, [r3]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	4b67      	ldr	r3, [pc, #412]	; (8002e28 <set_wall+0x854>)
 8002c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	4966      	ldr	r1, [pc, #408]	; (8002e2c <set_wall+0x858>)
 8002c94:	4603      	mov	r3, r0
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4403      	add	r3, r0
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	440b      	add	r3, r1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	4a60      	ldr	r2, [pc, #384]	; (8002e24 <set_wall+0x850>)
 8002ca4:	f992 2000 	ldrsb.w	r2, [r2]
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4a5f      	ldr	r2, [pc, #380]	; (8002e28 <set_wall+0x854>)
 8002cac:	f992 2000 	ldrsb.w	r2, [r2]
 8002cb0:	3201      	adds	r2, #1
 8002cb2:	f043 0308 	orr.w	r3, r3, #8
 8002cb6:	b2dc      	uxtb	r4, r3
 8002cb8:	495c      	ldr	r1, [pc, #368]	; (8002e2c <set_wall+0x858>)
 8002cba:	4603      	mov	r3, r0
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4403      	add	r3, r0
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	440b      	add	r3, r1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 8002cca:	79bb      	ldrb	r3, [r7, #6]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d04c      	beq.n	8002d6a <set_wall+0x796>
				maze[y][x] |= left_wall;
 8002cd0:	4b54      	ldr	r3, [pc, #336]	; (8002e24 <set_wall+0x850>)
 8002cd2:	f993 3000 	ldrsb.w	r3, [r3]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <set_wall+0x854>)
 8002cda:	f993 3000 	ldrsb.w	r3, [r3]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	4a52      	ldr	r2, [pc, #328]	; (8002e2c <set_wall+0x858>)
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	4403      	add	r3, r0
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	4a4c      	ldr	r2, [pc, #304]	; (8002e24 <set_wall+0x850>)
 8002cf2:	f992 2000 	ldrsb.w	r2, [r2]
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4a4b      	ldr	r2, [pc, #300]	; (8002e28 <set_wall+0x854>)
 8002cfa:	f992 2000 	ldrsb.w	r2, [r2]
 8002cfe:	4614      	mov	r4, r2
 8002d00:	f043 0308 	orr.w	r3, r3, #8
 8002d04:	b2d8      	uxtb	r0, r3
 8002d06:	4a49      	ldr	r2, [pc, #292]	; (8002e2c <set_wall+0x858>)
 8002d08:	460b      	mov	r3, r1
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	4423      	add	r3, r4
 8002d14:	4602      	mov	r2, r0
 8002d16:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002d18:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <set_wall+0x854>)
 8002d1a:	f993 3000 	ldrsb.w	r3, [r3]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	dd23      	ble.n	8002d6a <set_wall+0x796>
 8002d22:	4b40      	ldr	r3, [pc, #256]	; (8002e24 <set_wall+0x850>)
 8002d24:	f993 3000 	ldrsb.w	r3, [r3]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <set_wall+0x854>)
 8002d2c:	f993 3000 	ldrsb.w	r3, [r3]
 8002d30:	1e5a      	subs	r2, r3, #1
 8002d32:	493e      	ldr	r1, [pc, #248]	; (8002e2c <set_wall+0x858>)
 8002d34:	4603      	mov	r3, r0
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4403      	add	r3, r0
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	440b      	add	r3, r1
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	4a38      	ldr	r2, [pc, #224]	; (8002e24 <set_wall+0x850>)
 8002d44:	f992 2000 	ldrsb.w	r2, [r2]
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4a37      	ldr	r2, [pc, #220]	; (8002e28 <set_wall+0x854>)
 8002d4c:	f992 2000 	ldrsb.w	r2, [r2]
 8002d50:	3a01      	subs	r2, #1
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	b2dc      	uxtb	r4, r3
 8002d58:	4934      	ldr	r1, [pc, #208]	; (8002e2c <set_wall+0x858>)
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4403      	add	r3, r0
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	440b      	add	r3, r1
 8002d64:	4413      	add	r3, r2
 8002d66:	4622      	mov	r2, r4
 8002d68:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002d6a:	797b      	ldrb	r3, [r7, #5]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d053      	beq.n	8002e18 <set_wall+0x844>
				maze[y][x] |= bottom_wall;
 8002d70:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <set_wall+0x850>)
 8002d72:	f993 3000 	ldrsb.w	r3, [r3]
 8002d76:	4619      	mov	r1, r3
 8002d78:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <set_wall+0x854>)
 8002d7a:	f993 3000 	ldrsb.w	r3, [r3]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	4a2a      	ldr	r2, [pc, #168]	; (8002e2c <set_wall+0x858>)
 8002d82:	460b      	mov	r3, r1
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4403      	add	r3, r0
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4a24      	ldr	r2, [pc, #144]	; (8002e24 <set_wall+0x850>)
 8002d92:	f992 2000 	ldrsb.w	r2, [r2]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4a23      	ldr	r2, [pc, #140]	; (8002e28 <set_wall+0x854>)
 8002d9a:	f992 2000 	ldrsb.w	r2, [r2]
 8002d9e:	4614      	mov	r4, r2
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	b2d8      	uxtb	r0, r3
 8002da6:	4a21      	ldr	r2, [pc, #132]	; (8002e2c <set_wall+0x858>)
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	4423      	add	r3, r4
 8002db4:	4602      	mov	r2, r0
 8002db6:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002db8:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <set_wall+0x850>)
 8002dba:	f993 3000 	ldrsb.w	r3, [r3]
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	dc2a      	bgt.n	8002e18 <set_wall+0x844>
 8002dc2:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <set_wall+0x850>)
 8002dc4:	f993 3000 	ldrsb.w	r3, [r3]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <set_wall+0x854>)
 8002dcc:	f993 3000 	ldrsb.w	r3, [r3]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	4916      	ldr	r1, [pc, #88]	; (8002e2c <set_wall+0x858>)
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	440b      	add	r3, r1
 8002dde:	4403      	add	r3, r0
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	4a10      	ldr	r2, [pc, #64]	; (8002e24 <set_wall+0x850>)
 8002de4:	f992 2000 	ldrsb.w	r2, [r2]
 8002de8:	3201      	adds	r2, #1
 8002dea:	490f      	ldr	r1, [pc, #60]	; (8002e28 <set_wall+0x854>)
 8002dec:	f991 1000 	ldrsb.w	r1, [r1]
 8002df0:	460c      	mov	r4, r1
 8002df2:	f043 0302 	orr.w	r3, r3, #2
 8002df6:	b2d8      	uxtb	r0, r3
 8002df8:	490c      	ldr	r1, [pc, #48]	; (8002e2c <set_wall+0x858>)
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	440b      	add	r3, r1
 8002e04:	4423      	add	r3, r4
 8002e06:	4602      	mov	r2, r0
 8002e08:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002e0a:	e005      	b.n	8002e18 <set_wall+0x844>
			break;
 8002e0c:	bf00      	nop
 8002e0e:	e004      	b.n	8002e1a <set_wall+0x846>
			break;
 8002e10:	bf00      	nop
 8002e12:	e002      	b.n	8002e1a <set_wall+0x846>
			break;
 8002e14:	bf00      	nop
 8002e16:	e000      	b.n	8002e1a <set_wall+0x846>
			break;
 8002e18:	bf00      	nop
	}
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc90      	pop	{r4, r7}
 8002e22:	4770      	bx	lr
 8002e24:	20000155 	.word	0x20000155
 8002e28:	20000154 	.word	0x20000154
 8002e2c:	200002a4 	.word	0x200002a4

08002e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e36:	f002 f891 	bl	8004f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e3a:	f000 f8c9 	bl	8002fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e3e:	f000 fadf 	bl	8003400 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e42:	f000 fac7 	bl	80033d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8002e46:	f000 f91f 	bl	8003088 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002e4a:	f000 f987 	bl	800315c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002e4e:	f000 f9d9 	bl	8003204 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002e52:	f000 fa6d 	bl	8003330 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002e56:	2100      	movs	r1, #0
 8002e58:	4853      	ldr	r0, [pc, #332]	; (8002fa8 <main+0x178>)
 8002e5a:	f003 fdfb 	bl	8006a54 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002e5e:	2104      	movs	r1, #4
 8002e60:	4851      	ldr	r0, [pc, #324]	; (8002fa8 <main+0x178>)
 8002e62:	f003 fdf7 	bl	8006a54 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002e66:	2108      	movs	r1, #8
 8002e68:	484f      	ldr	r0, [pc, #316]	; (8002fa8 <main+0x178>)
 8002e6a:	f003 fdf3 	bl	8006a54 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002e6e:	210c      	movs	r1, #12
 8002e70:	484d      	ldr	r0, [pc, #308]	; (8002fa8 <main+0x178>)
 8002e72:	f003 fdef 	bl	8006a54 <HAL_TIM_PWM_Start>
  	HAL_TIM_Base_Start_IT(&htim1);
 8002e76:	484d      	ldr	r0, [pc, #308]	; (8002fac <main+0x17c>)
 8002e78:	f003 fd42 	bl	8006900 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim3);
 8002e7c:	484c      	ldr	r0, [pc, #304]	; (8002fb0 <main+0x180>)
 8002e7e:	f003 fd3f 	bl	8006900 <HAL_TIM_Base_Start_IT>
	HAL_Delay(2000);
 8002e82:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e86:	f002 f8cb 	bl	8005020 <HAL_Delay>
	mmode = 0;
 8002e8a:	4b4a      	ldr	r3, [pc, #296]	; (8002fb4 <main+0x184>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
	status = 0;
 8002e90:	4b49      	ldr	r3, [pc, #292]	; (8002fb8 <main+0x188>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
	current_speed = 0;
 8002e96:	4b49      	ldr	r3, [pc, #292]	; (8002fbc <main+0x18c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, 4);
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	4948      	ldr	r1, [pc, #288]	; (8002fc0 <main+0x190>)
 8002ea0:	4848      	ldr	r0, [pc, #288]	; (8002fc4 <main+0x194>)
 8002ea2:	f002 f9b9 	bl	8005218 <HAL_ADC_Start_DMA>

	__HAL_TIM_SET_COMPARE(&htim2, R_Motor1, htim2.Init.Period);
 8002ea6:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <main+0x178>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a3f      	ldr	r2, [pc, #252]	; (8002fa8 <main+0x178>)
 8002eac:	68d2      	ldr	r2, [r2, #12]
 8002eae:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor2, 0);
 8002eb0:	4b3d      	ldr	r3, [pc, #244]	; (8002fa8 <main+0x178>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, htim2.Init.Period);
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <main+0x178>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a3a      	ldr	r2, [pc, #232]	; (8002fa8 <main+0x178>)
 8002ebe:	68d2      	ldr	r2, [r2, #12]
 8002ec0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, 0);
 8002ec2:	4b39      	ldr	r3, [pc, #228]	; (8002fa8 <main+0x178>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (mmode == 1) {
 8002eca:	4b3a      	ldr	r3, [pc, #232]	; (8002fb4 <main+0x184>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d10a      	bne.n	8002eea <main+0xba>
			HAL_Delay(5000);
 8002ed4:	f241 3088 	movw	r0, #5000	; 0x1388
 8002ed8:	f002 f8a2 	bl	8005020 <HAL_Delay>
			start_fill();
 8002edc:	f7fd ff82 	bl	8000de4 <start_fill>
			findShortestPath();
 8002ee0:	f000 fae8 	bl	80034b4 <findShortestPath>
			mmode = 0;
 8002ee4:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <main+0x184>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
		}
		if (mmode == 2) {
 8002eea:	4b32      	ldr	r3, [pc, #200]	; (8002fb4 <main+0x184>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d1ea      	bne.n	8002eca <main+0x9a>
			uint8_t d = north;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	717b      	strb	r3, [r7, #5]
			for(uint16_t i = 0; i <= path_index; i++){
 8002ef8:	2300      	movs	r3, #0
 8002efa:	80fb      	strh	r3, [r7, #6]
 8002efc:	e04a      	b.n	8002f94 <main+0x164>
				switch((int32_t)shortestPath[i]){
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	4a31      	ldr	r2, [pc, #196]	; (8002fc8 <main+0x198>)
 8002f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd ff46 	bl	8000d98 <__aeabi_f2iz>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	3304      	adds	r3, #4
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d81f      	bhi.n	8002f54 <main+0x124>
 8002f14:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <main+0xec>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f2d 	.word	0x08002f2d
 8002f20:	08002f41 	.word	0x08002f41
 8002f24:	08002f4b 	.word	0x08002f4b
 8002f28:	08002f37 	.word	0x08002f37
					case turn_left_90:
						turn_left90(&d);
 8002f2c:	1d7b      	adds	r3, r7, #5
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 fc94 	bl	800485c <turn_left90>
						break;
 8002f34:	e02b      	b.n	8002f8e <main+0x15e>
					case turn_right_90:
						turn_right90(&d);
 8002f36:	1d7b      	adds	r3, r7, #5
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f001 fd67 	bl	8004a0c <turn_right90>
						break;
 8002f3e:	e026      	b.n	8002f8e <main+0x15e>
					case turn_left_45:
						turn_left45(&d);
 8002f40:	1d7b      	adds	r3, r7, #5
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 fb22 	bl	800458c <turn_left45>
						break;
 8002f48:	e021      	b.n	8002f8e <main+0x15e>
					case turn_right_45:
						turn_right45(&d);
 8002f4a:	1d7b      	adds	r3, r7, #5
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f001 fbd1 	bl	80046f4 <turn_right45>
						break;
 8002f52:	e01c      	b.n	8002f8e <main+0x15e>
					default:
						if(shortestPath[i] < 0){
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <main+0x198>)
 8002f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f5c:	f04f 0100 	mov.w	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd fef1 	bl	8000d48 <__aeabi_fcmplt>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <main+0x14e>
							backwards(shortestPath[i], true);
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <main+0x198>)
 8002f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f74:	2101      	movs	r1, #1
 8002f76:	4618      	mov	r0, r3
 8002f78:	f001 fe9c 	bl	8004cb4 <backwards>
 8002f7c:	e007      	b.n	8002f8e <main+0x15e>
						} else {
							go_straight(shortestPath[i], true);
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	4a11      	ldr	r2, [pc, #68]	; (8002fc8 <main+0x198>)
 8002f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f86:	2101      	movs	r1, #1
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 fe17 	bl	8004bbc <go_straight>
			for(uint16_t i = 0; i <= path_index; i++){
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	3301      	adds	r3, #1
 8002f92:	80fb      	strh	r3, [r7, #6]
 8002f94:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <main+0x19c>)
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	88fa      	ldrh	r2, [r7, #6]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d9af      	bls.n	8002efe <main+0xce>
						}
				}
			}
			mmode = 0;
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <main+0x184>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
		if (mmode == 1) {
 8002fa4:	e791      	b.n	8002eca <main+0x9a>
 8002fa6:	bf00      	nop
 8002fa8:	20000214 	.word	0x20000214
 8002fac:	200001cc 	.word	0x200001cc
 8002fb0:	2000025c 	.word	0x2000025c
 8002fb4:	20000375 	.word	0x20000375
 8002fb8:	20000376 	.word	0x20000376
 8002fbc:	20000374 	.word	0x20000374
 8002fc0:	2000036c 	.word	0x2000036c
 8002fc4:	20000158 	.word	0x20000158
 8002fc8:	200005d0 	.word	0x200005d0
 8002fcc:	20000c12 	.word	0x20000c12

08002fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b094      	sub	sp, #80	; 0x50
 8002fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fda:	2228      	movs	r2, #40	; 0x28
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f004 fca4 	bl	800792c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	609a      	str	r2, [r3, #8]
 8002ffe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003000:	2301      	movs	r3, #1
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800300a:	2300      	movs	r3, #0
 800300c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800300e:	2301      	movs	r3, #1
 8003010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003012:	2302      	movs	r3, #2
 8003014:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800301a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800301c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003020:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003026:	4618      	mov	r0, r3
 8003028:	f002 ff86 	bl	8005f38 <HAL_RCC_OscConfig>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003032:	f000 fa39 	bl	80034a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003036:	230f      	movs	r3, #15
 8003038:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800303a:	2302      	movs	r3, #2
 800303c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003046:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	2102      	movs	r1, #2
 8003052:	4618      	mov	r0, r3
 8003054:	f003 f9f2 	bl	800643c <HAL_RCC_ClockConfig>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800305e:	f000 fa23 	bl	80034a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003062:	2302      	movs	r3, #2
 8003064:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800306a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800306c:	1d3b      	adds	r3, r7, #4
 800306e:	4618      	mov	r0, r3
 8003070:	f003 fb40 	bl	80066f4 <HAL_RCCEx_PeriphCLKConfig>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800307a:	f000 fa15 	bl	80034a8 <Error_Handler>
  }
}
 800307e:	bf00      	nop
 8003080:	3750      	adds	r7, #80	; 0x50
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003098:	4b2e      	ldr	r3, [pc, #184]	; (8003154 <MX_ADC1_Init+0xcc>)
 800309a:	4a2f      	ldr	r2, [pc, #188]	; (8003158 <MX_ADC1_Init+0xd0>)
 800309c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800309e:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <MX_ADC1_Init+0xcc>)
 80030a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80030a6:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <MX_ADC1_Init+0xcc>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030ac:	4b29      	ldr	r3, [pc, #164]	; (8003154 <MX_ADC1_Init+0xcc>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030b2:	4b28      	ldr	r3, [pc, #160]	; (8003154 <MX_ADC1_Init+0xcc>)
 80030b4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80030b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030ba:	4b26      	ldr	r3, [pc, #152]	; (8003154 <MX_ADC1_Init+0xcc>)
 80030bc:	2200      	movs	r2, #0
 80030be:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80030c0:	4b24      	ldr	r3, [pc, #144]	; (8003154 <MX_ADC1_Init+0xcc>)
 80030c2:	2204      	movs	r2, #4
 80030c4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80030c6:	4823      	ldr	r0, [pc, #140]	; (8003154 <MX_ADC1_Init+0xcc>)
 80030c8:	f001 ffce 	bl	8005068 <HAL_ADC_Init>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80030d2:	f000 f9e9 	bl	80034a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80030d6:	2302      	movs	r3, #2
 80030d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030da:	2301      	movs	r3, #1
 80030dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80030de:	2304      	movs	r3, #4
 80030e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030e2:	1d3b      	adds	r3, r7, #4
 80030e4:	4619      	mov	r1, r3
 80030e6:	481b      	ldr	r0, [pc, #108]	; (8003154 <MX_ADC1_Init+0xcc>)
 80030e8:	f002 f990 	bl	800540c <HAL_ADC_ConfigChannel>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80030f2:	f000 f9d9 	bl	80034a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80030f6:	2303      	movs	r3, #3
 80030f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80030fa:	2302      	movs	r3, #2
 80030fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	4619      	mov	r1, r3
 8003102:	4814      	ldr	r0, [pc, #80]	; (8003154 <MX_ADC1_Init+0xcc>)
 8003104:	f002 f982 	bl	800540c <HAL_ADC_ConfigChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800310e:	f000 f9cb 	bl	80034a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003112:	2304      	movs	r3, #4
 8003114:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003116:	2303      	movs	r3, #3
 8003118:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800311a:	1d3b      	adds	r3, r7, #4
 800311c:	4619      	mov	r1, r3
 800311e:	480d      	ldr	r0, [pc, #52]	; (8003154 <MX_ADC1_Init+0xcc>)
 8003120:	f002 f974 	bl	800540c <HAL_ADC_ConfigChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800312a:	f000 f9bd 	bl	80034a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800312e:	2305      	movs	r3, #5
 8003130:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003132:	2304      	movs	r3, #4
 8003134:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	4619      	mov	r1, r3
 800313a:	4806      	ldr	r0, [pc, #24]	; (8003154 <MX_ADC1_Init+0xcc>)
 800313c:	f002 f966 	bl	800540c <HAL_ADC_ConfigChannel>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8003146:	f000 f9af 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000158 	.word	0x20000158
 8003158:	40012400 	.word	0x40012400

0800315c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003162:	f107 030c 	add.w	r3, r7, #12
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	609a      	str	r2, [r3, #8]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800317a:	4b20      	ldr	r3, [pc, #128]	; (80031fc <MX_TIM1_Init+0xa0>)
 800317c:	4a20      	ldr	r2, [pc, #128]	; (8003200 <MX_TIM1_Init+0xa4>)
 800317e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003180:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <MX_TIM1_Init+0xa0>)
 8003182:	2200      	movs	r2, #0
 8003184:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003186:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <MX_TIM1_Init+0xa0>)
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <MX_TIM1_Init+0xa0>)
 800318e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003192:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <MX_TIM1_Init+0xa0>)
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800319a:	4b18      	ldr	r3, [pc, #96]	; (80031fc <MX_TIM1_Init+0xa0>)
 800319c:	2200      	movs	r2, #0
 800319e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a0:	4b16      	ldr	r3, [pc, #88]	; (80031fc <MX_TIM1_Init+0xa0>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031a6:	4815      	ldr	r0, [pc, #84]	; (80031fc <MX_TIM1_Init+0xa0>)
 80031a8:	f003 fb5a 	bl	8006860 <HAL_TIM_Base_Init>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80031b2:	f000 f979 	bl	80034a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80031b6:	2307      	movs	r3, #7
 80031b8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80031ba:	2340      	movs	r3, #64	; 0x40
 80031bc:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 12;
 80031be:	230c      	movs	r3, #12
 80031c0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80031c2:	f107 030c 	add.w	r3, r7, #12
 80031c6:	4619      	mov	r1, r3
 80031c8:	480c      	ldr	r0, [pc, #48]	; (80031fc <MX_TIM1_Init+0xa0>)
 80031ca:	f003 ff76 	bl	80070ba <HAL_TIM_SlaveConfigSynchro>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80031d4:	f000 f968 	bl	80034a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031d8:	2300      	movs	r3, #0
 80031da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031e0:	1d3b      	adds	r3, r7, #4
 80031e2:	4619      	mov	r1, r3
 80031e4:	4805      	ldr	r0, [pc, #20]	; (80031fc <MX_TIM1_Init+0xa0>)
 80031e6:	f004 fb0d 	bl	8007804 <HAL_TIMEx_MasterConfigSynchronization>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80031f0:	f000 f95a 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80031f4:	bf00      	nop
 80031f6:	3720      	adds	r7, #32
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	200001cc 	.word	0x200001cc
 8003200:	40012c00 	.word	0x40012c00

08003204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08e      	sub	sp, #56	; 0x38
 8003208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800320a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	609a      	str	r2, [r3, #8]
 8003216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003218:	f107 0320 	add.w	r3, r7, #32
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
 8003230:	615a      	str	r2, [r3, #20]
 8003232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003234:	4b3d      	ldr	r3, [pc, #244]	; (800332c <MX_TIM2_Init+0x128>)
 8003236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800323a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 800323c:	4b3b      	ldr	r3, [pc, #236]	; (800332c <MX_TIM2_Init+0x128>)
 800323e:	2250      	movs	r2, #80	; 0x50
 8003240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003242:	4b3a      	ldr	r3, [pc, #232]	; (800332c <MX_TIM2_Init+0x128>)
 8003244:	2200      	movs	r2, #0
 8003246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8003248:	4b38      	ldr	r3, [pc, #224]	; (800332c <MX_TIM2_Init+0x128>)
 800324a:	f242 720f 	movw	r2, #9999	; 0x270f
 800324e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003250:	4b36      	ldr	r3, [pc, #216]	; (800332c <MX_TIM2_Init+0x128>)
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003256:	4b35      	ldr	r3, [pc, #212]	; (800332c <MX_TIM2_Init+0x128>)
 8003258:	2280      	movs	r2, #128	; 0x80
 800325a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800325c:	4833      	ldr	r0, [pc, #204]	; (800332c <MX_TIM2_Init+0x128>)
 800325e:	f003 faff 	bl	8006860 <HAL_TIM_Base_Init>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003268:	f000 f91e 	bl	80034a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800326c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003270:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003276:	4619      	mov	r1, r3
 8003278:	482c      	ldr	r0, [pc, #176]	; (800332c <MX_TIM2_Init+0x128>)
 800327a:	f003 fe57 	bl	8006f2c <HAL_TIM_ConfigClockSource>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003284:	f000 f910 	bl	80034a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003288:	4828      	ldr	r0, [pc, #160]	; (800332c <MX_TIM2_Init+0x128>)
 800328a:	f003 fb8b 	bl	80069a4 <HAL_TIM_PWM_Init>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003294:	f000 f908 	bl	80034a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003298:	2300      	movs	r3, #0
 800329a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800329c:	2300      	movs	r3, #0
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032a0:	f107 0320 	add.w	r3, r7, #32
 80032a4:	4619      	mov	r1, r3
 80032a6:	4821      	ldr	r0, [pc, #132]	; (800332c <MX_TIM2_Init+0x128>)
 80032a8:	f004 faac 	bl	8007804 <HAL_TIMEx_MasterConfigSynchronization>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80032b2:	f000 f8f9 	bl	80034a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032b6:	2360      	movs	r3, #96	; 0x60
 80032b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	2200      	movs	r2, #0
 80032ca:	4619      	mov	r1, r3
 80032cc:	4817      	ldr	r0, [pc, #92]	; (800332c <MX_TIM2_Init+0x128>)
 80032ce:	f003 fd6b 	bl	8006da8 <HAL_TIM_PWM_ConfigChannel>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80032d8:	f000 f8e6 	bl	80034a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	2204      	movs	r2, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4812      	ldr	r0, [pc, #72]	; (800332c <MX_TIM2_Init+0x128>)
 80032e4:	f003 fd60 	bl	8006da8 <HAL_TIM_PWM_ConfigChannel>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80032ee:	f000 f8db 	bl	80034a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032f2:	1d3b      	adds	r3, r7, #4
 80032f4:	2208      	movs	r2, #8
 80032f6:	4619      	mov	r1, r3
 80032f8:	480c      	ldr	r0, [pc, #48]	; (800332c <MX_TIM2_Init+0x128>)
 80032fa:	f003 fd55 	bl	8006da8 <HAL_TIM_PWM_ConfigChannel>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8003304:	f000 f8d0 	bl	80034a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	220c      	movs	r2, #12
 800330c:	4619      	mov	r1, r3
 800330e:	4807      	ldr	r0, [pc, #28]	; (800332c <MX_TIM2_Init+0x128>)
 8003310:	f003 fd4a 	bl	8006da8 <HAL_TIM_PWM_ConfigChannel>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800331a:	f000 f8c5 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800331e:	4803      	ldr	r0, [pc, #12]	; (800332c <MX_TIM2_Init+0x128>)
 8003320:	f000 ff0e 	bl	8004140 <HAL_TIM_MspPostInit>

}
 8003324:	bf00      	nop
 8003326:	3738      	adds	r7, #56	; 0x38
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000214 	.word	0x20000214

08003330 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003336:	f107 030c 	add.w	r3, r7, #12
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003346:	1d3b      	adds	r3, r7, #4
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800334e:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <MX_TIM3_Init+0x9c>)
 8003350:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <MX_TIM3_Init+0xa0>)
 8003352:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003354:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <MX_TIM3_Init+0x9c>)
 8003356:	2200      	movs	r2, #0
 8003358:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800335a:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <MX_TIM3_Init+0x9c>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003360:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <MX_TIM3_Init+0x9c>)
 8003362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003366:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003368:	4b18      	ldr	r3, [pc, #96]	; (80033cc <MX_TIM3_Init+0x9c>)
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800336e:	4b17      	ldr	r3, [pc, #92]	; (80033cc <MX_TIM3_Init+0x9c>)
 8003370:	2200      	movs	r2, #0
 8003372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003374:	4815      	ldr	r0, [pc, #84]	; (80033cc <MX_TIM3_Init+0x9c>)
 8003376:	f003 fa73 	bl	8006860 <HAL_TIM_Base_Init>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003380:	f000 f892 	bl	80034a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003384:	2307      	movs	r3, #7
 8003386:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8003388:	2340      	movs	r3, #64	; 0x40
 800338a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 12;
 800338c:	230c      	movs	r3, #12
 800338e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003390:	f107 030c 	add.w	r3, r7, #12
 8003394:	4619      	mov	r1, r3
 8003396:	480d      	ldr	r0, [pc, #52]	; (80033cc <MX_TIM3_Init+0x9c>)
 8003398:	f003 fe8f 	bl	80070ba <HAL_TIM_SlaveConfigSynchro>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80033a2:	f000 f881 	bl	80034a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	4619      	mov	r1, r3
 80033b2:	4806      	ldr	r0, [pc, #24]	; (80033cc <MX_TIM3_Init+0x9c>)
 80033b4:	f004 fa26 	bl	8007804 <HAL_TIMEx_MasterConfigSynchronization>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80033be:	f000 f873 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80033c2:	bf00      	nop
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	2000025c 	.word	0x2000025c
 80033d0:	40000400 	.word	0x40000400

080033d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <MX_DMA_Init+0x28>)
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	4a07      	ldr	r2, [pc, #28]	; (80033fc <MX_DMA_Init+0x28>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6153      	str	r3, [r2, #20]
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <MX_DMA_Init+0x28>)
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	607b      	str	r3, [r7, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]

}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	40021000 	.word	0x40021000

08003400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003406:	f107 0310 	add.w	r3, r7, #16
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003414:	4b21      	ldr	r3, [pc, #132]	; (800349c <MX_GPIO_Init+0x9c>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	4a20      	ldr	r2, [pc, #128]	; (800349c <MX_GPIO_Init+0x9c>)
 800341a:	f043 0320 	orr.w	r3, r3, #32
 800341e:	6193      	str	r3, [r2, #24]
 8003420:	4b1e      	ldr	r3, [pc, #120]	; (800349c <MX_GPIO_Init+0x9c>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <MX_GPIO_Init+0x9c>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	4a1a      	ldr	r2, [pc, #104]	; (800349c <MX_GPIO_Init+0x9c>)
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	6193      	str	r3, [r2, #24]
 8003438:	4b18      	ldr	r3, [pc, #96]	; (800349c <MX_GPIO_Init+0x9c>)
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <MX_GPIO_Init+0x9c>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	4a14      	ldr	r2, [pc, #80]	; (800349c <MX_GPIO_Init+0x9c>)
 800344a:	f043 0308 	orr.w	r3, r3, #8
 800344e:	6193      	str	r3, [r2, #24]
 8003450:	4b12      	ldr	r3, [pc, #72]	; (800349c <MX_GPIO_Init+0x9c>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800345c:	2303      	movs	r3, #3
 800345e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <MX_GPIO_Init+0xa0>)
 8003462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003464:	2301      	movs	r3, #1
 8003466:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003468:	f107 0310 	add.w	r3, r7, #16
 800346c:	4619      	mov	r1, r3
 800346e:	480d      	ldr	r0, [pc, #52]	; (80034a4 <MX_GPIO_Init+0xa4>)
 8003470:	f002 fbbc 	bl	8005bec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003474:	2200      	movs	r2, #0
 8003476:	2100      	movs	r1, #0
 8003478:	2006      	movs	r0, #6
 800347a:	f002 fa98 	bl	80059ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800347e:	2006      	movs	r0, #6
 8003480:	f002 fab1 	bl	80059e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003484:	2200      	movs	r2, #0
 8003486:	2100      	movs	r1, #0
 8003488:	2007      	movs	r0, #7
 800348a:	f002 fa90 	bl	80059ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800348e:	2007      	movs	r0, #7
 8003490:	f002 faa9 	bl	80059e6 <HAL_NVIC_EnableIRQ>

}
 8003494:	bf00      	nop
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	10210000 	.word	0x10210000
 80034a4:	40010c00 	.word	0x40010c00

080034a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034ac:	b672      	cpsid	i
}
 80034ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80034b0:	e7fe      	b.n	80034b0 <Error_Handler+0x8>
	...

080034b4 <findShortestPath>:
uint16_t path_index;


void add_path(float pram1, float param2, float param3, uint8_t param4);

void findShortestPath(){
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
    memset(visited, false, sizeof(visited));
 80034ba:	2264      	movs	r2, #100	; 0x64
 80034bc:	2100      	movs	r1, #0
 80034be:	48ae      	ldr	r0, [pc, #696]	; (8003778 <findShortestPath+0x2c4>)
 80034c0:	f004 fa34 	bl	800792c <memset>
    for(uint16_t i = 0; i < grid_size * grid_size; i++)
 80034c4:	2300      	movs	r3, #0
 80034c6:	81fb      	strh	r3, [r7, #14]
 80034c8:	e008      	b.n	80034dc <findShortestPath+0x28>
    	shortestPath[i] = 0;
 80034ca:	89fb      	ldrh	r3, [r7, #14]
 80034cc:	4aab      	ldr	r2, [pc, #684]	; (800377c <findShortestPath+0x2c8>)
 80034ce:	f04f 0100 	mov.w	r1, #0
 80034d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(uint16_t i = 0; i < grid_size * grid_size; i++)
 80034d6:	89fb      	ldrh	r3, [r7, #14]
 80034d8:	3301      	adds	r3, #1
 80034da:	81fb      	strh	r3, [r7, #14]
 80034dc:	89fb      	ldrh	r3, [r7, #14]
 80034de:	2b63      	cmp	r3, #99	; 0x63
 80034e0:	d9f3      	bls.n	80034ca <findShortestPath+0x16>

    int16_t len = 3;
 80034e2:	2303      	movs	r3, #3
 80034e4:	81bb      	strh	r3, [r7, #12]
    int16_t curr = 2;
 80034e6:	2302      	movs	r3, #2
 80034e8:	817b      	strh	r3, [r7, #10]

    temp[0][0] = ending_coordinates[0];
 80034ea:	4ba5      	ldr	r3, [pc, #660]	; (8003780 <findShortestPath+0x2cc>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b21a      	sxth	r2, r3
 80034f0:	4ba4      	ldr	r3, [pc, #656]	; (8003784 <findShortestPath+0x2d0>)
 80034f2:	801a      	strh	r2, [r3, #0]
    temp[0][1] = ending_coordinates[1] - 2;
 80034f4:	4ba2      	ldr	r3, [pc, #648]	; (8003780 <findShortestPath+0x2cc>)
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b02      	subs	r3, #2
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	b21a      	sxth	r2, r3
 8003500:	4ba0      	ldr	r3, [pc, #640]	; (8003784 <findShortestPath+0x2d0>)
 8003502:	805a      	strh	r2, [r3, #2]
    temp[0][2] = -1;
 8003504:	4b9f      	ldr	r3, [pc, #636]	; (8003784 <findShortestPath+0x2d0>)
 8003506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800350a:	809a      	strh	r2, [r3, #4]

    temp[1][0] = ending_coordinates[0];
 800350c:	4b9c      	ldr	r3, [pc, #624]	; (8003780 <findShortestPath+0x2cc>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b21a      	sxth	r2, r3
 8003512:	4b9c      	ldr	r3, [pc, #624]	; (8003784 <findShortestPath+0x2d0>)
 8003514:	80da      	strh	r2, [r3, #6]
    temp[1][1] = ending_coordinates[1] - 1;
 8003516:	4b9a      	ldr	r3, [pc, #616]	; (8003780 <findShortestPath+0x2cc>)
 8003518:	785b      	ldrb	r3, [r3, #1]
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29b      	uxth	r3, r3
 8003520:	b21a      	sxth	r2, r3
 8003522:	4b98      	ldr	r3, [pc, #608]	; (8003784 <findShortestPath+0x2d0>)
 8003524:	811a      	strh	r2, [r3, #8]
    temp[1][2] = 0;
 8003526:	4b97      	ldr	r3, [pc, #604]	; (8003784 <findShortestPath+0x2d0>)
 8003528:	2200      	movs	r2, #0
 800352a:	815a      	strh	r2, [r3, #10]

    temp[2][0] = ending_coordinates[0];
 800352c:	4b94      	ldr	r3, [pc, #592]	; (8003780 <findShortestPath+0x2cc>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b21a      	sxth	r2, r3
 8003532:	4b94      	ldr	r3, [pc, #592]	; (8003784 <findShortestPath+0x2d0>)
 8003534:	819a      	strh	r2, [r3, #12]
    temp[2][1] = ending_coordinates[1];
 8003536:	4b92      	ldr	r3, [pc, #584]	; (8003780 <findShortestPath+0x2cc>)
 8003538:	785b      	ldrb	r3, [r3, #1]
 800353a:	b21a      	sxth	r2, r3
 800353c:	4b91      	ldr	r3, [pc, #580]	; (8003784 <findShortestPath+0x2d0>)
 800353e:	81da      	strh	r2, [r3, #14]
    temp[2][2] = 1;
 8003540:	4b90      	ldr	r3, [pc, #576]	; (8003784 <findShortestPath+0x2d0>)
 8003542:	2201      	movs	r2, #1
 8003544:	821a      	strh	r2, [r3, #16]

    visited[temp[2][1]][temp[2][0]] = true;
 8003546:	4b8f      	ldr	r3, [pc, #572]	; (8003784 <findShortestPath+0x2d0>)
 8003548:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800354c:	4619      	mov	r1, r3
 800354e:	4b8d      	ldr	r3, [pc, #564]	; (8003784 <findShortestPath+0x2d0>)
 8003550:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003554:	4618      	mov	r0, r3
 8003556:	4a88      	ldr	r2, [pc, #544]	; (8003778 <findShortestPath+0x2c4>)
 8003558:	460b      	mov	r3, r1
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	4403      	add	r3, r0
 8003564:	2201      	movs	r2, #1
 8003566:	701a      	strb	r2, [r3, #0]
    int16_t x, y;
    while(curr != len){
 8003568:	e0cf      	b.n	800370a <findShortestPath+0x256>
        x = temp[curr][0];
 800356a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800356e:	4985      	ldr	r1, [pc, #532]	; (8003784 <findShortestPath+0x2d0>)
 8003570:	4613      	mov	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	440b      	add	r3, r1
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	80bb      	strh	r3, [r7, #4]
        y = temp[curr][1];
 800357e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003582:	4980      	ldr	r1, [pc, #512]	; (8003784 <findShortestPath+0x2d0>)
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	440b      	add	r3, r1
 800358e:	3302      	adds	r3, #2
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	807b      	strh	r3, [r7, #2]
        if(x == starting_coordinates[0] && y == starting_coordinates[1]){
 8003594:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003598:	4a7b      	ldr	r2, [pc, #492]	; (8003788 <findShortestPath+0x2d4>)
 800359a:	7812      	ldrb	r2, [r2, #0]
 800359c:	4293      	cmp	r3, r2
 800359e:	d106      	bne.n	80035ae <findShortestPath+0xfa>
 80035a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035a4:	4a78      	ldr	r2, [pc, #480]	; (8003788 <findShortestPath+0x2d4>)
 80035a6:	7852      	ldrb	r2, [r2, #1]
 80035a8:	4293      	cmp	r3, r2
 80035aa:	f000 80b6 	beq.w	800371a <findShortestPath+0x266>
            break;
        }
        uint8_t wall = maze[y][x];
 80035ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80035b2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80035b6:	4875      	ldr	r0, [pc, #468]	; (800378c <findShortestPath+0x2d8>)
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4403      	add	r3, r0
 80035c2:	440b      	add	r3, r1
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	707b      	strb	r3, [r7, #1]
        for(uint8_t _ = 0; _ < 4; _++){
 80035c8:	2300      	movs	r3, #0
 80035ca:	727b      	strb	r3, [r7, #9]
 80035cc:	e093      	b.n	80036f6 <findShortestPath+0x242>
            if(!visited[y + move[_][0]][x + move[_][1]] && !(wall & move[_][2])){
 80035ce:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80035d2:	7a7a      	ldrb	r2, [r7, #9]
 80035d4:	486e      	ldr	r0, [pc, #440]	; (8003790 <findShortestPath+0x2dc>)
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	4403      	add	r3, r0
 80035de:	f993 3000 	ldrsb.w	r3, [r3]
 80035e2:	18ca      	adds	r2, r1, r3
 80035e4:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80035e8:	7a79      	ldrb	r1, [r7, #9]
 80035ea:	4c69      	ldr	r4, [pc, #420]	; (8003790 <findShortestPath+0x2dc>)
 80035ec:	460b      	mov	r3, r1
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	440b      	add	r3, r1
 80035f2:	4423      	add	r3, r4
 80035f4:	3301      	adds	r3, #1
 80035f6:	f993 3000 	ldrsb.w	r3, [r3]
 80035fa:	18c1      	adds	r1, r0, r3
 80035fc:	485e      	ldr	r0, [pc, #376]	; (8003778 <findShortestPath+0x2c4>)
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4403      	add	r3, r0
 8003608:	440b      	add	r3, r1
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	f083 0301 	eor.w	r3, r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d06c      	beq.n	80036f0 <findShortestPath+0x23c>
 8003616:	7879      	ldrb	r1, [r7, #1]
 8003618:	7a7a      	ldrb	r2, [r7, #9]
 800361a:	485d      	ldr	r0, [pc, #372]	; (8003790 <findShortestPath+0x2dc>)
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	4403      	add	r3, r0
 8003624:	3302      	adds	r3, #2
 8003626:	f993 3000 	ldrsb.w	r3, [r3]
 800362a:	400b      	ands	r3, r1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d15f      	bne.n	80036f0 <findShortestPath+0x23c>
                temp[len][0] = x + move[_][1];
 8003630:	7a7a      	ldrb	r2, [r7, #9]
 8003632:	4957      	ldr	r1, [pc, #348]	; (8003790 <findShortestPath+0x2dc>)
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	440b      	add	r3, r1
 800363c:	3301      	adds	r3, #1
 800363e:	f993 3000 	ldrsb.w	r3, [r3]
 8003642:	b29a      	uxth	r2, r3
 8003644:	88bb      	ldrh	r3, [r7, #4]
 8003646:	4413      	add	r3, r2
 8003648:	b29b      	uxth	r3, r3
 800364a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800364e:	b218      	sxth	r0, r3
 8003650:	494c      	ldr	r1, [pc, #304]	; (8003784 <findShortestPath+0x2d0>)
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	440b      	add	r3, r1
 800365c:	4602      	mov	r2, r0
 800365e:	801a      	strh	r2, [r3, #0]
                temp[len][1] = y + move[_][0];
 8003660:	7a7a      	ldrb	r2, [r7, #9]
 8003662:	494b      	ldr	r1, [pc, #300]	; (8003790 <findShortestPath+0x2dc>)
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	440b      	add	r3, r1
 800366c:	f993 3000 	ldrsb.w	r3, [r3]
 8003670:	b29a      	uxth	r2, r3
 8003672:	887b      	ldrh	r3, [r7, #2]
 8003674:	4413      	add	r3, r2
 8003676:	b29b      	uxth	r3, r3
 8003678:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800367c:	b218      	sxth	r0, r3
 800367e:	4941      	ldr	r1, [pc, #260]	; (8003784 <findShortestPath+0x2d0>)
 8003680:	4613      	mov	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	440b      	add	r3, r1
 800368a:	3302      	adds	r3, #2
 800368c:	4602      	mov	r2, r0
 800368e:	801a      	strh	r2, [r3, #0]
                visited[temp[len][1]][temp[len][0]] = true;
 8003690:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003694:	493b      	ldr	r1, [pc, #236]	; (8003784 <findShortestPath+0x2d0>)
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	440b      	add	r3, r1
 80036a0:	3302      	adds	r3, #2
 80036a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80036ac:	4935      	ldr	r1, [pc, #212]	; (8003784 <findShortestPath+0x2d0>)
 80036ae:	4613      	mov	r3, r2
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4413      	add	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	440b      	add	r3, r1
 80036b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036bc:	4619      	mov	r1, r3
 80036be:	4a2e      	ldr	r2, [pc, #184]	; (8003778 <findShortestPath+0x2c4>)
 80036c0:	4603      	mov	r3, r0
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4403      	add	r3, r0
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	440b      	add	r3, r1
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
                temp[len++][2] = curr;
 80036d0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80036d4:	b293      	uxth	r3, r2
 80036d6:	3301      	adds	r3, #1
 80036d8:	b29b      	uxth	r3, r3
 80036da:	81bb      	strh	r3, [r7, #12]
 80036dc:	4611      	mov	r1, r2
 80036de:	4a29      	ldr	r2, [pc, #164]	; (8003784 <findShortestPath+0x2d0>)
 80036e0:	460b      	mov	r3, r1
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	440b      	add	r3, r1
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	3304      	adds	r3, #4
 80036ec:	897a      	ldrh	r2, [r7, #10]
 80036ee:	801a      	strh	r2, [r3, #0]
        for(uint8_t _ = 0; _ < 4; _++){
 80036f0:	7a7b      	ldrb	r3, [r7, #9]
 80036f2:	3301      	adds	r3, #1
 80036f4:	727b      	strb	r3, [r7, #9]
 80036f6:	7a7b      	ldrb	r3, [r7, #9]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	f67f af68 	bls.w	80035ce <findShortestPath+0x11a>
            }
        }
        curr++;
 80036fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003702:	b29b      	uxth	r3, r3
 8003704:	3301      	adds	r3, #1
 8003706:	b29b      	uxth	r3, r3
 8003708:	817b      	strh	r3, [r7, #10]
    while(curr != len){
 800370a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800370e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003712:	429a      	cmp	r2, r3
 8003714:	f47f af29 	bne.w	800356a <findShortestPath+0xb6>
 8003718:	e000      	b.n	800371c <findShortestPath+0x268>
            break;
 800371a:	bf00      	nop
    }

    direction = north;
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <findShortestPath+0x2e0>)
 800371e:	2202      	movs	r2, #2
 8003720:	701a      	strb	r2, [r3, #0]
    uint8_t lastt_x;
    uint8_t last_x = temp[curr][0];
 8003722:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003726:	4917      	ldr	r1, [pc, #92]	; (8003784 <findShortestPath+0x2d0>)
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	440b      	add	r3, r1
 8003732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003736:	71fb      	strb	r3, [r7, #7]
    uint8_t last_y = temp[curr][1];
 8003738:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800373c:	4911      	ldr	r1, [pc, #68]	; (8003784 <findShortestPath+0x2d0>)
 800373e:	4613      	mov	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	440b      	add	r3, r1
 8003748:	3302      	adds	r3, #2
 800374a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800374e:	71bb      	strb	r3, [r7, #6]
    curr = temp[curr][2];
 8003750:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003754:	490b      	ldr	r1, [pc, #44]	; (8003784 <findShortestPath+0x2d0>)
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	440b      	add	r3, r1
 8003760:	3304      	adds	r3, #4
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	817b      	strh	r3, [r7, #10]
    path_index = 0;
 8003766:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <findShortestPath+0x2e4>)
 8003768:	2200      	movs	r2, #0
 800376a:	801a      	strh	r2, [r3, #0]
    shortestPath[0] = 0;
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <findShortestPath+0x2c8>)
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
    while(curr != -1){
 8003774:	e35d      	b.n	8003e32 <findShortestPath+0x97e>
 8003776:	bf00      	nop
 8003778:	20000308 	.word	0x20000308
 800377c:	200005d0 	.word	0x200005d0
 8003780:	080079e8 	.word	0x080079e8
 8003784:	20000378 	.word	0x20000378
 8003788:	080079e4 	.word	0x080079e4
 800378c:	200002a4 	.word	0x200002a4
 8003790:	080079f4 	.word	0x080079f4
 8003794:	20000c10 	.word	0x20000c10
 8003798:	20000c12 	.word	0x20000c12
        if(temp[curr][1] > last_y){
 800379c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80037a0:	499c      	ldr	r1, [pc, #624]	; (8003a14 <findShortestPath+0x560>)
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	440b      	add	r3, r1
 80037ac:	3302      	adds	r3, #2
 80037ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b2:	461a      	mov	r2, r3
 80037b4:	79bb      	ldrb	r3, [r7, #6]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	f340 80b3 	ble.w	8003922 <findShortestPath+0x46e>
            switch(direction){
 80037bc:	4b96      	ldr	r3, [pc, #600]	; (8003a18 <findShortestPath+0x564>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b07      	cmp	r3, #7
 80037c2:	f200 8312 	bhi.w	8003dea <findShortestPath+0x936>
 80037c6:	a201      	add	r2, pc, #4	; (adr r2, 80037cc <findShortestPath+0x318>)
 80037c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037cc:	080037ed 	.word	0x080037ed
 80037d0:	0800380b 	.word	0x0800380b
 80037d4:	08003deb 	.word	0x08003deb
 80037d8:	0800382b 	.word	0x0800382b
 80037dc:	08003851 	.word	0x08003851
 80037e0:	0800386f 	.word	0x0800386f
 80037e4:	080038d9 	.word	0x080038d9
 80037e8:	0800388d 	.word	0x0800388d
                case west:
                    add_path(offset45, turn_left_45, half_diagonal - offset45, south_west);
 80037ec:	4c8b      	ldr	r4, [pc, #556]	; (8003a1c <findShortestPath+0x568>)
 80037ee:	4b8c      	ldr	r3, [pc, #560]	; (8003a20 <findShortestPath+0x56c>)
 80037f0:	4a8a      	ldr	r2, [pc, #552]	; (8003a1c <findShortestPath+0x568>)
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fd f94f 	bl	8000a98 <__aeabi_fsub>
 80037fa:	4603      	mov	r3, r0
 80037fc:	461a      	mov	r2, r3
 80037fe:	2306      	movs	r3, #6
 8003800:	4988      	ldr	r1, [pc, #544]	; (8003a24 <findShortestPath+0x570>)
 8003802:	4620      	mov	r0, r4
 8003804:	f000 fb34 	bl	8003e70 <add_path>
                    break;
 8003808:	e2ef      	b.n	8003dea <findShortestPath+0x936>
                case east:
                    add_path(offset45, turn_right_45, half_diagonal - offset45, south_east);
 800380a:	4c84      	ldr	r4, [pc, #528]	; (8003a1c <findShortestPath+0x568>)
 800380c:	4b84      	ldr	r3, [pc, #528]	; (8003a20 <findShortestPath+0x56c>)
 800380e:	4a83      	ldr	r2, [pc, #524]	; (8003a1c <findShortestPath+0x568>)
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd f940 	bl	8000a98 <__aeabi_fsub>
 8003818:	4603      	mov	r3, r0
 800381a:	461a      	mov	r2, r3
 800381c:	2307      	movs	r3, #7
 800381e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003822:	4620      	mov	r0, r4
 8003824:	f000 fb24 	bl	8003e70 <add_path>
                    break;
 8003828:	e2df      	b.n	8003dea <findShortestPath+0x936>
                case south:
                    shortestPath[path_index]+=square_size;
 800382a:	4b7f      	ldr	r3, [pc, #508]	; (8003a28 <findShortestPath+0x574>)
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	4b7e      	ldr	r3, [pc, #504]	; (8003a2c <findShortestPath+0x578>)
 8003832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003836:	4a7c      	ldr	r2, [pc, #496]	; (8003a28 <findShortestPath+0x574>)
 8003838:	8812      	ldrh	r2, [r2, #0]
 800383a:	4614      	mov	r4, r2
 800383c:	497c      	ldr	r1, [pc, #496]	; (8003a30 <findShortestPath+0x57c>)
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd f92c 	bl	8000a9c <__addsf3>
 8003844:	4603      	mov	r3, r0
 8003846:	461a      	mov	r2, r3
 8003848:	4b78      	ldr	r3, [pc, #480]	; (8003a2c <findShortestPath+0x578>)
 800384a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    break;
 800384e:	e2cc      	b.n	8003dea <findShortestPath+0x936>
                case north_west:
                    add_path(offset90, turn_left_90, half_diagonal - offset90, south_west);
 8003850:	4c78      	ldr	r4, [pc, #480]	; (8003a34 <findShortestPath+0x580>)
 8003852:	4b73      	ldr	r3, [pc, #460]	; (8003a20 <findShortestPath+0x56c>)
 8003854:	4a77      	ldr	r2, [pc, #476]	; (8003a34 <findShortestPath+0x580>)
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f7fd f91d 	bl	8000a98 <__aeabi_fsub>
 800385e:	4603      	mov	r3, r0
 8003860:	461a      	mov	r2, r3
 8003862:	2306      	movs	r3, #6
 8003864:	4974      	ldr	r1, [pc, #464]	; (8003a38 <findShortestPath+0x584>)
 8003866:	4620      	mov	r0, r4
 8003868:	f000 fb02 	bl	8003e70 <add_path>
                    break;
 800386c:	e2bd      	b.n	8003dea <findShortestPath+0x936>
                case north_east:
                    add_path(offset90, turn_right_90, half_diagonal - offset90, south_east);
 800386e:	4c71      	ldr	r4, [pc, #452]	; (8003a34 <findShortestPath+0x580>)
 8003870:	4b6b      	ldr	r3, [pc, #428]	; (8003a20 <findShortestPath+0x56c>)
 8003872:	4a70      	ldr	r2, [pc, #448]	; (8003a34 <findShortestPath+0x580>)
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f7fd f90e 	bl	8000a98 <__aeabi_fsub>
 800387c:	4603      	mov	r3, r0
 800387e:	461a      	mov	r2, r3
 8003880:	2307      	movs	r3, #7
 8003882:	496e      	ldr	r1, [pc, #440]	; (8003a3c <findShortestPath+0x588>)
 8003884:	4620      	mov	r0, r4
 8003886:	f000 faf3 	bl	8003e70 <add_path>
                    break;
 800388a:	e2ae      	b.n	8003dea <findShortestPath+0x936>
                case south_east:
                    if(lastt_x < last_x){
 800388c:	7a3a      	ldrb	r2, [r7, #8]
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	429a      	cmp	r2, r3
 8003892:	d212      	bcs.n	80038ba <findShortestPath+0x406>
                        shortestPath[path_index]+=half_diagonal;
 8003894:	4b64      	ldr	r3, [pc, #400]	; (8003a28 <findShortestPath+0x574>)
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	4b64      	ldr	r3, [pc, #400]	; (8003a2c <findShortestPath+0x578>)
 800389c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a0:	495f      	ldr	r1, [pc, #380]	; (8003a20 <findShortestPath+0x56c>)
 80038a2:	4a61      	ldr	r2, [pc, #388]	; (8003a28 <findShortestPath+0x574>)
 80038a4:	8812      	ldrh	r2, [r2, #0]
 80038a6:	4614      	mov	r4, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fd f8f7 	bl	8000a9c <__addsf3>
 80038ae:	4603      	mov	r3, r0
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b5e      	ldr	r3, [pc, #376]	; (8003a2c <findShortestPath+0x578>)
 80038b4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    } else {
                        add_path(offset45, turn_right_45, square_size - offset45, south);
                    }
                    break;
 80038b8:	e297      	b.n	8003dea <findShortestPath+0x936>
                        add_path(offset45, turn_right_45, square_size - offset45, south);
 80038ba:	4c58      	ldr	r4, [pc, #352]	; (8003a1c <findShortestPath+0x568>)
 80038bc:	4b57      	ldr	r3, [pc, #348]	; (8003a1c <findShortestPath+0x568>)
 80038be:	4619      	mov	r1, r3
 80038c0:	485b      	ldr	r0, [pc, #364]	; (8003a30 <findShortestPath+0x57c>)
 80038c2:	f7fd f8e9 	bl	8000a98 <__aeabi_fsub>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461a      	mov	r2, r3
 80038ca:	2303      	movs	r3, #3
 80038cc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80038d0:	4620      	mov	r0, r4
 80038d2:	f000 facd 	bl	8003e70 <add_path>
                    break;
 80038d6:	e288      	b.n	8003dea <findShortestPath+0x936>
                case south_west:
                    if(lastt_x > last_x){
 80038d8:	7a3a      	ldrb	r2, [r7, #8]
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d912      	bls.n	8003906 <findShortestPath+0x452>
                        shortestPath[path_index]+=half_diagonal;
 80038e0:	4b51      	ldr	r3, [pc, #324]	; (8003a28 <findShortestPath+0x574>)
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	4b51      	ldr	r3, [pc, #324]	; (8003a2c <findShortestPath+0x578>)
 80038e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ec:	494c      	ldr	r1, [pc, #304]	; (8003a20 <findShortestPath+0x56c>)
 80038ee:	4a4e      	ldr	r2, [pc, #312]	; (8003a28 <findShortestPath+0x574>)
 80038f0:	8812      	ldrh	r2, [r2, #0]
 80038f2:	4614      	mov	r4, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fd f8d1 	bl	8000a9c <__addsf3>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b4b      	ldr	r3, [pc, #300]	; (8003a2c <findShortestPath+0x578>)
 8003900:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8003904:	e271      	b.n	8003dea <findShortestPath+0x936>
                    } else {
                        add_path(offset45, turn_left_45, square_size - offset45, south);
 8003906:	4c45      	ldr	r4, [pc, #276]	; (8003a1c <findShortestPath+0x568>)
 8003908:	4b44      	ldr	r3, [pc, #272]	; (8003a1c <findShortestPath+0x568>)
 800390a:	4619      	mov	r1, r3
 800390c:	4848      	ldr	r0, [pc, #288]	; (8003a30 <findShortestPath+0x57c>)
 800390e:	f7fd f8c3 	bl	8000a98 <__aeabi_fsub>
 8003912:	4603      	mov	r3, r0
 8003914:	461a      	mov	r2, r3
 8003916:	2303      	movs	r3, #3
 8003918:	4942      	ldr	r1, [pc, #264]	; (8003a24 <findShortestPath+0x570>)
 800391a:	4620      	mov	r0, r4
 800391c:	f000 faa8 	bl	8003e70 <add_path>
 8003920:	e263      	b.n	8003dea <findShortestPath+0x936>
                    }
            }
        } else if(temp[curr][1] < last_y){
 8003922:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003926:	493b      	ldr	r1, [pc, #236]	; (8003a14 <findShortestPath+0x560>)
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	440b      	add	r3, r1
 8003932:	3302      	adds	r3, #2
 8003934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003938:	461a      	mov	r2, r3
 800393a:	79bb      	ldrb	r3, [r7, #6]
 800393c:	429a      	cmp	r2, r3
 800393e:	f280 80ca 	bge.w	8003ad6 <findShortestPath+0x622>
            switch(direction){
 8003942:	4b35      	ldr	r3, [pc, #212]	; (8003a18 <findShortestPath+0x564>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b07      	cmp	r3, #7
 8003948:	f200 824f 	bhi.w	8003dea <findShortestPath+0x936>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <findShortestPath+0x4a0>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003975 	.word	0x08003975
 8003958:	08003995 	.word	0x08003995
 800395c:	080039b3 	.word	0x080039b3
 8003960:	08003deb 	.word	0x08003deb
 8003964:	08003a41 	.word	0x08003a41
 8003968:	08003a8d 	.word	0x08003a8d
 800396c:	080039d9 	.word	0x080039d9
 8003970:	080039f7 	.word	0x080039f7
                case west:
                    add_path(offset45, turn_right_45, half_diagonal - offset45, north_west);
 8003974:	4c29      	ldr	r4, [pc, #164]	; (8003a1c <findShortestPath+0x568>)
 8003976:	4b2a      	ldr	r3, [pc, #168]	; (8003a20 <findShortestPath+0x56c>)
 8003978:	4a28      	ldr	r2, [pc, #160]	; (8003a1c <findShortestPath+0x568>)
 800397a:	4611      	mov	r1, r2
 800397c:	4618      	mov	r0, r3
 800397e:	f7fd f88b 	bl	8000a98 <__aeabi_fsub>
 8003982:	4603      	mov	r3, r0
 8003984:	461a      	mov	r2, r3
 8003986:	2304      	movs	r3, #4
 8003988:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800398c:	4620      	mov	r0, r4
 800398e:	f000 fa6f 	bl	8003e70 <add_path>
                    break;
 8003992:	e22a      	b.n	8003dea <findShortestPath+0x936>
                case east:
                    add_path(offset45, turn_left_45, half_diagonal - offset45, north_east);
 8003994:	4c21      	ldr	r4, [pc, #132]	; (8003a1c <findShortestPath+0x568>)
 8003996:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <findShortestPath+0x56c>)
 8003998:	4a20      	ldr	r2, [pc, #128]	; (8003a1c <findShortestPath+0x568>)
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f7fd f87b 	bl	8000a98 <__aeabi_fsub>
 80039a2:	4603      	mov	r3, r0
 80039a4:	461a      	mov	r2, r3
 80039a6:	2305      	movs	r3, #5
 80039a8:	491e      	ldr	r1, [pc, #120]	; (8003a24 <findShortestPath+0x570>)
 80039aa:	4620      	mov	r0, r4
 80039ac:	f000 fa60 	bl	8003e70 <add_path>
                    break;
 80039b0:	e21b      	b.n	8003dea <findShortestPath+0x936>
                case north:
                    shortestPath[path_index]+=square_size;
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <findShortestPath+0x574>)
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <findShortestPath+0x578>)
 80039ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039be:	4a1a      	ldr	r2, [pc, #104]	; (8003a28 <findShortestPath+0x574>)
 80039c0:	8812      	ldrh	r2, [r2, #0]
 80039c2:	4614      	mov	r4, r2
 80039c4:	491a      	ldr	r1, [pc, #104]	; (8003a30 <findShortestPath+0x57c>)
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fd f868 	bl	8000a9c <__addsf3>
 80039cc:	4603      	mov	r3, r0
 80039ce:	461a      	mov	r2, r3
 80039d0:	4b16      	ldr	r3, [pc, #88]	; (8003a2c <findShortestPath+0x578>)
 80039d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    break;
 80039d6:	e208      	b.n	8003dea <findShortestPath+0x936>
                case south_west:
                    add_path(offset90, turn_right_90, half_diagonal - offset90, north_west);
 80039d8:	4c16      	ldr	r4, [pc, #88]	; (8003a34 <findShortestPath+0x580>)
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <findShortestPath+0x56c>)
 80039dc:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <findShortestPath+0x580>)
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd f859 	bl	8000a98 <__aeabi_fsub>
 80039e6:	4603      	mov	r3, r0
 80039e8:	461a      	mov	r2, r3
 80039ea:	2304      	movs	r3, #4
 80039ec:	4913      	ldr	r1, [pc, #76]	; (8003a3c <findShortestPath+0x588>)
 80039ee:	4620      	mov	r0, r4
 80039f0:	f000 fa3e 	bl	8003e70 <add_path>
                    break;
 80039f4:	e1f9      	b.n	8003dea <findShortestPath+0x936>
                case south_east:
                    add_path(offset90, turn_left_90, half_diagonal - offset90, north_east);
 80039f6:	4c0f      	ldr	r4, [pc, #60]	; (8003a34 <findShortestPath+0x580>)
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <findShortestPath+0x56c>)
 80039fa:	4a0e      	ldr	r2, [pc, #56]	; (8003a34 <findShortestPath+0x580>)
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd f84a 	bl	8000a98 <__aeabi_fsub>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	2305      	movs	r3, #5
 8003a0a:	490b      	ldr	r1, [pc, #44]	; (8003a38 <findShortestPath+0x584>)
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	f000 fa2f 	bl	8003e70 <add_path>
                    break;
 8003a12:	e1ea      	b.n	8003dea <findShortestPath+0x936>
 8003a14:	20000378 	.word	0x20000378
 8003a18:	20000c10 	.word	0x20000c10
 8003a1c:	4161550a 	.word	0x4161550a
 8003a20:	435421cd 	.word	0x435421cd
 8003a24:	c0400000 	.word	0xc0400000
 8003a28:	20000c12 	.word	0x20000c12
 8003a2c:	200005d0 	.word	0x200005d0
 8003a30:	43960000 	.word	0x43960000
 8003a34:	42080000 	.word	0x42080000
 8003a38:	c0800000 	.word	0xc0800000
 8003a3c:	bf800000 	.word	0xbf800000
                case north_west:
                    if(lastt_x > last_x){
 8003a40:	7a3a      	ldrb	r2, [r7, #8]
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d912      	bls.n	8003a6e <findShortestPath+0x5ba>
                        shortestPath[path_index]+=half_diagonal;
 8003a48:	4ba1      	ldr	r3, [pc, #644]	; (8003cd0 <findShortestPath+0x81c>)
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4ba1      	ldr	r3, [pc, #644]	; (8003cd4 <findShortestPath+0x820>)
 8003a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a54:	49a0      	ldr	r1, [pc, #640]	; (8003cd8 <findShortestPath+0x824>)
 8003a56:	4a9e      	ldr	r2, [pc, #632]	; (8003cd0 <findShortestPath+0x81c>)
 8003a58:	8812      	ldrh	r2, [r2, #0]
 8003a5a:	4614      	mov	r4, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fd f81d 	bl	8000a9c <__addsf3>
 8003a62:	4603      	mov	r3, r0
 8003a64:	461a      	mov	r2, r3
 8003a66:	4b9b      	ldr	r3, [pc, #620]	; (8003cd4 <findShortestPath+0x820>)
 8003a68:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    } else {
                        add_path(offset45, turn_right_45, square_size - offset45, north);
                    }
                    break;
 8003a6c:	e1bd      	b.n	8003dea <findShortestPath+0x936>
                        add_path(offset45, turn_right_45, square_size - offset45, north);
 8003a6e:	4c9b      	ldr	r4, [pc, #620]	; (8003cdc <findShortestPath+0x828>)
 8003a70:	4b9a      	ldr	r3, [pc, #616]	; (8003cdc <findShortestPath+0x828>)
 8003a72:	4619      	mov	r1, r3
 8003a74:	489a      	ldr	r0, [pc, #616]	; (8003ce0 <findShortestPath+0x82c>)
 8003a76:	f7fd f80f 	bl	8000a98 <__aeabi_fsub>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2302      	movs	r3, #2
 8003a80:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003a84:	4620      	mov	r0, r4
 8003a86:	f000 f9f3 	bl	8003e70 <add_path>
                    break;
 8003a8a:	e1ae      	b.n	8003dea <findShortestPath+0x936>
                case north_east:
                    if(lastt_x < last_x){
 8003a8c:	7a3a      	ldrb	r2, [r7, #8]
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d212      	bcs.n	8003aba <findShortestPath+0x606>
                        shortestPath[path_index]+=half_diagonal;
 8003a94:	4b8e      	ldr	r3, [pc, #568]	; (8003cd0 <findShortestPath+0x81c>)
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b8e      	ldr	r3, [pc, #568]	; (8003cd4 <findShortestPath+0x820>)
 8003a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa0:	498d      	ldr	r1, [pc, #564]	; (8003cd8 <findShortestPath+0x824>)
 8003aa2:	4a8b      	ldr	r2, [pc, #556]	; (8003cd0 <findShortestPath+0x81c>)
 8003aa4:	8812      	ldrh	r2, [r2, #0]
 8003aa6:	4614      	mov	r4, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fc fff7 	bl	8000a9c <__addsf3>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b88      	ldr	r3, [pc, #544]	; (8003cd4 <findShortestPath+0x820>)
 8003ab4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8003ab8:	e197      	b.n	8003dea <findShortestPath+0x936>
                    } else {
                        add_path(offset45, turn_left_45, square_size - offset45, north);
 8003aba:	4c88      	ldr	r4, [pc, #544]	; (8003cdc <findShortestPath+0x828>)
 8003abc:	4b87      	ldr	r3, [pc, #540]	; (8003cdc <findShortestPath+0x828>)
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4887      	ldr	r0, [pc, #540]	; (8003ce0 <findShortestPath+0x82c>)
 8003ac2:	f7fc ffe9 	bl	8000a98 <__aeabi_fsub>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2302      	movs	r3, #2
 8003acc:	4985      	ldr	r1, [pc, #532]	; (8003ce4 <findShortestPath+0x830>)
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f000 f9ce 	bl	8003e70 <add_path>
 8003ad4:	e189      	b.n	8003dea <findShortestPath+0x936>
                    }
            }
        } else if(temp[curr][0] < last_x){
 8003ad6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003ada:	4983      	ldr	r1, [pc, #524]	; (8003ce8 <findShortestPath+0x834>)
 8003adc:	4613      	mov	r3, r2
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	4413      	add	r3, r2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	440b      	add	r3, r1
 8003ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aea:	461a      	mov	r2, r3
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	f280 80b3 	bge.w	8003c5a <findShortestPath+0x7a6>
            switch(direction){
 8003af4:	4b7d      	ldr	r3, [pc, #500]	; (8003cec <findShortestPath+0x838>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b07      	cmp	r3, #7
 8003afa:	f200 8176 	bhi.w	8003dea <findShortestPath+0x936>
 8003afe:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <findShortestPath+0x650>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003b25 	.word	0x08003b25
 8003b08:	08003deb 	.word	0x08003deb
 8003b0c:	08003b4b 	.word	0x08003b4b
 8003b10:	08003b69 	.word	0x08003b69
 8003b14:	08003bc5 	.word	0x08003bc5
 8003b18:	08003b89 	.word	0x08003b89
 8003b1c:	08003c0f 	.word	0x08003c0f
 8003b20:	08003ba7 	.word	0x08003ba7
                case west:
                    shortestPath[path_index]+=square_size;
 8003b24:	4b6a      	ldr	r3, [pc, #424]	; (8003cd0 <findShortestPath+0x81c>)
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4b6a      	ldr	r3, [pc, #424]	; (8003cd4 <findShortestPath+0x820>)
 8003b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b30:	4a67      	ldr	r2, [pc, #412]	; (8003cd0 <findShortestPath+0x81c>)
 8003b32:	8812      	ldrh	r2, [r2, #0]
 8003b34:	4614      	mov	r4, r2
 8003b36:	496a      	ldr	r1, [pc, #424]	; (8003ce0 <findShortestPath+0x82c>)
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fc ffaf 	bl	8000a9c <__addsf3>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	461a      	mov	r2, r3
 8003b42:	4b64      	ldr	r3, [pc, #400]	; (8003cd4 <findShortestPath+0x820>)
 8003b44:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    break;
 8003b48:	e14f      	b.n	8003dea <findShortestPath+0x936>
                case north:
                    add_path(offset45, turn_left_45, half_diagonal - offset45, north_west);
 8003b4a:	4c64      	ldr	r4, [pc, #400]	; (8003cdc <findShortestPath+0x828>)
 8003b4c:	4b62      	ldr	r3, [pc, #392]	; (8003cd8 <findShortestPath+0x824>)
 8003b4e:	4a63      	ldr	r2, [pc, #396]	; (8003cdc <findShortestPath+0x828>)
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc ffa0 	bl	8000a98 <__aeabi_fsub>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	4961      	ldr	r1, [pc, #388]	; (8003ce4 <findShortestPath+0x830>)
 8003b60:	4620      	mov	r0, r4
 8003b62:	f000 f985 	bl	8003e70 <add_path>
                    break;
 8003b66:	e140      	b.n	8003dea <findShortestPath+0x936>
                case south:
                    add_path(offset45, turn_right_45, half_diagonal - offset45, south_west);
 8003b68:	4c5c      	ldr	r4, [pc, #368]	; (8003cdc <findShortestPath+0x828>)
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	; (8003cd8 <findShortestPath+0x824>)
 8003b6c:	4a5b      	ldr	r2, [pc, #364]	; (8003cdc <findShortestPath+0x828>)
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fc ff91 	bl	8000a98 <__aeabi_fsub>
 8003b76:	4603      	mov	r3, r0
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2306      	movs	r3, #6
 8003b7c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003b80:	4620      	mov	r0, r4
 8003b82:	f000 f975 	bl	8003e70 <add_path>
                    break;
 8003b86:	e130      	b.n	8003dea <findShortestPath+0x936>
                case north_east:
                    add_path(offset90, turn_left_90, half_diagonal - offset90, north_west);
 8003b88:	4c59      	ldr	r4, [pc, #356]	; (8003cf0 <findShortestPath+0x83c>)
 8003b8a:	4b53      	ldr	r3, [pc, #332]	; (8003cd8 <findShortestPath+0x824>)
 8003b8c:	4a58      	ldr	r2, [pc, #352]	; (8003cf0 <findShortestPath+0x83c>)
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fc ff81 	bl	8000a98 <__aeabi_fsub>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	4955      	ldr	r1, [pc, #340]	; (8003cf4 <findShortestPath+0x840>)
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f000 f966 	bl	8003e70 <add_path>
                    break;
 8003ba4:	e121      	b.n	8003dea <findShortestPath+0x936>
                case south_east:
                    add_path(offset90, turn_right_90, half_diagonal - offset90, south_west);
 8003ba6:	4c52      	ldr	r4, [pc, #328]	; (8003cf0 <findShortestPath+0x83c>)
 8003ba8:	4b4b      	ldr	r3, [pc, #300]	; (8003cd8 <findShortestPath+0x824>)
 8003baa:	4a51      	ldr	r2, [pc, #324]	; (8003cf0 <findShortestPath+0x83c>)
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fc ff72 	bl	8000a98 <__aeabi_fsub>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	2306      	movs	r3, #6
 8003bba:	494f      	ldr	r1, [pc, #316]	; (8003cf8 <findShortestPath+0x844>)
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f000 f957 	bl	8003e70 <add_path>
                    break;
 8003bc2:	e112      	b.n	8003dea <findShortestPath+0x936>
                case north_west:
                    if(lastt_x > last_x){
 8003bc4:	7a3a      	ldrb	r2, [r7, #8]
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d90d      	bls.n	8003be8 <findShortestPath+0x734>
                        add_path(offset45, turn_left_45, square_size - offset45, west);
 8003bcc:	4c43      	ldr	r4, [pc, #268]	; (8003cdc <findShortestPath+0x828>)
 8003bce:	4b43      	ldr	r3, [pc, #268]	; (8003cdc <findShortestPath+0x828>)
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4843      	ldr	r0, [pc, #268]	; (8003ce0 <findShortestPath+0x82c>)
 8003bd4:	f7fc ff60 	bl	8000a98 <__aeabi_fsub>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2300      	movs	r3, #0
 8003bde:	4941      	ldr	r1, [pc, #260]	; (8003ce4 <findShortestPath+0x830>)
 8003be0:	4620      	mov	r0, r4
 8003be2:	f000 f945 	bl	8003e70 <add_path>
                    } else {
                        shortestPath[path_index]+=half_diagonal;
                    }
                    break;
 8003be6:	e100      	b.n	8003dea <findShortestPath+0x936>
                        shortestPath[path_index]+=half_diagonal;
 8003be8:	4b39      	ldr	r3, [pc, #228]	; (8003cd0 <findShortestPath+0x81c>)
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	4b39      	ldr	r3, [pc, #228]	; (8003cd4 <findShortestPath+0x820>)
 8003bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf4:	4938      	ldr	r1, [pc, #224]	; (8003cd8 <findShortestPath+0x824>)
 8003bf6:	4a36      	ldr	r2, [pc, #216]	; (8003cd0 <findShortestPath+0x81c>)
 8003bf8:	8812      	ldrh	r2, [r2, #0]
 8003bfa:	4614      	mov	r4, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fc ff4d 	bl	8000a9c <__addsf3>
 8003c02:	4603      	mov	r3, r0
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b33      	ldr	r3, [pc, #204]	; (8003cd4 <findShortestPath+0x820>)
 8003c08:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    break;
 8003c0c:	e0ed      	b.n	8003dea <findShortestPath+0x936>
                case south_west:
                    if(lastt_x > last_x){
 8003c0e:	7a3a      	ldrb	r2, [r7, #8]
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d90e      	bls.n	8003c34 <findShortestPath+0x780>
                        add_path(offset45, turn_right_45, square_size - offset45, west);
 8003c16:	4c31      	ldr	r4, [pc, #196]	; (8003cdc <findShortestPath+0x828>)
 8003c18:	4b30      	ldr	r3, [pc, #192]	; (8003cdc <findShortestPath+0x828>)
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4830      	ldr	r0, [pc, #192]	; (8003ce0 <findShortestPath+0x82c>)
 8003c1e:	f7fc ff3b 	bl	8000a98 <__aeabi_fsub>
 8003c22:	4603      	mov	r3, r0
 8003c24:	461a      	mov	r2, r3
 8003c26:	2300      	movs	r3, #0
 8003c28:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f000 f91f 	bl	8003e70 <add_path>
 8003c32:	e0da      	b.n	8003dea <findShortestPath+0x936>
                    } else {
                        shortestPath[path_index]+=half_diagonal;
 8003c34:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <findShortestPath+0x81c>)
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b26      	ldr	r3, [pc, #152]	; (8003cd4 <findShortestPath+0x820>)
 8003c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c40:	4925      	ldr	r1, [pc, #148]	; (8003cd8 <findShortestPath+0x824>)
 8003c42:	4a23      	ldr	r2, [pc, #140]	; (8003cd0 <findShortestPath+0x81c>)
 8003c44:	8812      	ldrh	r2, [r2, #0]
 8003c46:	4614      	mov	r4, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fc ff27 	bl	8000a9c <__addsf3>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <findShortestPath+0x820>)
 8003c54:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8003c58:	e0c7      	b.n	8003dea <findShortestPath+0x936>
                    }
            }
        } else {
            switch(direction){
 8003c5a:	4b24      	ldr	r3, [pc, #144]	; (8003cec <findShortestPath+0x838>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	2b06      	cmp	r3, #6
 8003c62:	f200 80c2 	bhi.w	8003dea <findShortestPath+0x936>
 8003c66:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <findShortestPath+0x7b8>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003c89 	.word	0x08003c89
 8003c70:	08003caf 	.word	0x08003caf
 8003c74:	08003cfd 	.word	0x08003cfd
 8003c78:	08003d1b 	.word	0x08003d1b
 8003c7c:	08003d57 	.word	0x08003d57
 8003c80:	08003d39 	.word	0x08003d39
 8003c84:	08003da3 	.word	0x08003da3
                case east:
                    shortestPath[path_index]+=square_size;
 8003c88:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <findShortestPath+0x81c>)
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <findShortestPath+0x820>)
 8003c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c94:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <findShortestPath+0x81c>)
 8003c96:	8812      	ldrh	r2, [r2, #0]
 8003c98:	4614      	mov	r4, r2
 8003c9a:	4911      	ldr	r1, [pc, #68]	; (8003ce0 <findShortestPath+0x82c>)
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fc fefd 	bl	8000a9c <__addsf3>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <findShortestPath+0x820>)
 8003ca8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    break;
 8003cac:	e09d      	b.n	8003dea <findShortestPath+0x936>
                case north:
                    add_path(offset45, turn_right_45, half_diagonal - offset45, north_east);
 8003cae:	4c0b      	ldr	r4, [pc, #44]	; (8003cdc <findShortestPath+0x828>)
 8003cb0:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <findShortestPath+0x824>)
 8003cb2:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <findShortestPath+0x828>)
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fc feee 	bl	8000a98 <__aeabi_fsub>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	2305      	movs	r3, #5
 8003cc2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f000 f8d2 	bl	8003e70 <add_path>
                    break;
 8003ccc:	e08d      	b.n	8003dea <findShortestPath+0x936>
 8003cce:	bf00      	nop
 8003cd0:	20000c12 	.word	0x20000c12
 8003cd4:	200005d0 	.word	0x200005d0
 8003cd8:	435421cd 	.word	0x435421cd
 8003cdc:	4161550a 	.word	0x4161550a
 8003ce0:	43960000 	.word	0x43960000
 8003ce4:	c0400000 	.word	0xc0400000
 8003ce8:	20000378 	.word	0x20000378
 8003cec:	20000c10 	.word	0x20000c10
 8003cf0:	42080000 	.word	0x42080000
 8003cf4:	c0800000 	.word	0xc0800000
 8003cf8:	bf800000 	.word	0xbf800000
                case south:
                    add_path(offset45, turn_left_45, half_diagonal - offset45, south_east);
 8003cfc:	4c52      	ldr	r4, [pc, #328]	; (8003e48 <findShortestPath+0x994>)
 8003cfe:	4b53      	ldr	r3, [pc, #332]	; (8003e4c <findShortestPath+0x998>)
 8003d00:	4a51      	ldr	r2, [pc, #324]	; (8003e48 <findShortestPath+0x994>)
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fc fec7 	bl	8000a98 <__aeabi_fsub>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2307      	movs	r3, #7
 8003d10:	494f      	ldr	r1, [pc, #316]	; (8003e50 <findShortestPath+0x99c>)
 8003d12:	4620      	mov	r0, r4
 8003d14:	f000 f8ac 	bl	8003e70 <add_path>
                    break;
 8003d18:	e067      	b.n	8003dea <findShortestPath+0x936>
                case north_west:
                    add_path(offset90, turn_right_90, half_diagonal - offset90, north_east);
 8003d1a:	4c4e      	ldr	r4, [pc, #312]	; (8003e54 <findShortestPath+0x9a0>)
 8003d1c:	4b4b      	ldr	r3, [pc, #300]	; (8003e4c <findShortestPath+0x998>)
 8003d1e:	4a4d      	ldr	r2, [pc, #308]	; (8003e54 <findShortestPath+0x9a0>)
 8003d20:	4611      	mov	r1, r2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc feb8 	bl	8000a98 <__aeabi_fsub>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	494a      	ldr	r1, [pc, #296]	; (8003e58 <findShortestPath+0x9a4>)
 8003d30:	4620      	mov	r0, r4
 8003d32:	f000 f89d 	bl	8003e70 <add_path>
                    break;
 8003d36:	e058      	b.n	8003dea <findShortestPath+0x936>
                case south_west:
                    add_path(offset90, turn_left_90, half_diagonal - offset90, south_east);
 8003d38:	4c46      	ldr	r4, [pc, #280]	; (8003e54 <findShortestPath+0x9a0>)
 8003d3a:	4b44      	ldr	r3, [pc, #272]	; (8003e4c <findShortestPath+0x998>)
 8003d3c:	4a45      	ldr	r2, [pc, #276]	; (8003e54 <findShortestPath+0x9a0>)
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fc fea9 	bl	8000a98 <__aeabi_fsub>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2307      	movs	r3, #7
 8003d4c:	4943      	ldr	r1, [pc, #268]	; (8003e5c <findShortestPath+0x9a8>)
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f000 f88e 	bl	8003e70 <add_path>
                    break;
 8003d54:	e049      	b.n	8003dea <findShortestPath+0x936>
                case north_east:
                    if(lastt_x < last_x){
 8003d56:	7a3a      	ldrb	r2, [r7, #8]
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d20e      	bcs.n	8003d7c <findShortestPath+0x8c8>
                        add_path(offset45, turn_right_45, square_size - offset45, east);
 8003d5e:	4c3a      	ldr	r4, [pc, #232]	; (8003e48 <findShortestPath+0x994>)
 8003d60:	4b39      	ldr	r3, [pc, #228]	; (8003e48 <findShortestPath+0x994>)
 8003d62:	4619      	mov	r1, r3
 8003d64:	483e      	ldr	r0, [pc, #248]	; (8003e60 <findShortestPath+0x9ac>)
 8003d66:	f7fc fe97 	bl	8000a98 <__aeabi_fsub>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003d74:	4620      	mov	r0, r4
 8003d76:	f000 f87b 	bl	8003e70 <add_path>
                    } else {
                        shortestPath[path_index]+=half_diagonal;
                    }
                    break;
 8003d7a:	e036      	b.n	8003dea <findShortestPath+0x936>
                        shortestPath[path_index]+=half_diagonal;
 8003d7c:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <findShortestPath+0x9b0>)
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <findShortestPath+0x9b4>)
 8003d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d88:	4930      	ldr	r1, [pc, #192]	; (8003e4c <findShortestPath+0x998>)
 8003d8a:	4a36      	ldr	r2, [pc, #216]	; (8003e64 <findShortestPath+0x9b0>)
 8003d8c:	8812      	ldrh	r2, [r2, #0]
 8003d8e:	4614      	mov	r4, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fc fe83 	bl	8000a9c <__addsf3>
 8003d96:	4603      	mov	r3, r0
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4b33      	ldr	r3, [pc, #204]	; (8003e68 <findShortestPath+0x9b4>)
 8003d9c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    break;
 8003da0:	e023      	b.n	8003dea <findShortestPath+0x936>
                case south_east:
                    if(lastt_x < last_x){
 8003da2:	7a3a      	ldrb	r2, [r7, #8]
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d20d      	bcs.n	8003dc6 <findShortestPath+0x912>
                        add_path(offset45, turn_left_45, square_size - offset45, east);
 8003daa:	4c27      	ldr	r4, [pc, #156]	; (8003e48 <findShortestPath+0x994>)
 8003dac:	4b26      	ldr	r3, [pc, #152]	; (8003e48 <findShortestPath+0x994>)
 8003dae:	4619      	mov	r1, r3
 8003db0:	482b      	ldr	r0, [pc, #172]	; (8003e60 <findShortestPath+0x9ac>)
 8003db2:	f7fc fe71 	bl	8000a98 <__aeabi_fsub>
 8003db6:	4603      	mov	r3, r0
 8003db8:	461a      	mov	r2, r3
 8003dba:	2301      	movs	r3, #1
 8003dbc:	4924      	ldr	r1, [pc, #144]	; (8003e50 <findShortestPath+0x99c>)
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	f000 f856 	bl	8003e70 <add_path>
 8003dc4:	e011      	b.n	8003dea <findShortestPath+0x936>
                    } else {
                        shortestPath[path_index]+=half_diagonal;
 8003dc6:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <findShortestPath+0x9b0>)
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4b26      	ldr	r3, [pc, #152]	; (8003e68 <findShortestPath+0x9b4>)
 8003dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd2:	491e      	ldr	r1, [pc, #120]	; (8003e4c <findShortestPath+0x998>)
 8003dd4:	4a23      	ldr	r2, [pc, #140]	; (8003e64 <findShortestPath+0x9b0>)
 8003dd6:	8812      	ldrh	r2, [r2, #0]
 8003dd8:	4614      	mov	r4, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fc fe5e 	bl	8000a9c <__addsf3>
 8003de0:	4603      	mov	r3, r0
 8003de2:	461a      	mov	r2, r3
 8003de4:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <findShortestPath+0x9b4>)
 8003de6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
                    }
            }
        }
        lastt_x = last_x;
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	723b      	strb	r3, [r7, #8]
        last_x = temp[curr][0];
 8003dee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003df2:	491e      	ldr	r1, [pc, #120]	; (8003e6c <findShortestPath+0x9b8>)
 8003df4:	4613      	mov	r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	4413      	add	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	440b      	add	r3, r1
 8003dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e02:	71fb      	strb	r3, [r7, #7]
        last_y = temp[curr][1];
 8003e04:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003e08:	4918      	ldr	r1, [pc, #96]	; (8003e6c <findShortestPath+0x9b8>)
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4413      	add	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	440b      	add	r3, r1
 8003e14:	3302      	adds	r3, #2
 8003e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e1a:	71bb      	strb	r3, [r7, #6]
        curr = temp[curr][2];
 8003e1c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003e20:	4912      	ldr	r1, [pc, #72]	; (8003e6c <findShortestPath+0x9b8>)
 8003e22:	4613      	mov	r3, r2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	440b      	add	r3, r1
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	817b      	strh	r3, [r7, #10]
    while(curr != -1){
 8003e32:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	f47f acaf 	bne.w	800379c <findShortestPath+0x2e8>
    }
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd90      	pop	{r4, r7, pc}
 8003e48:	4161550a 	.word	0x4161550a
 8003e4c:	435421cd 	.word	0x435421cd
 8003e50:	c0400000 	.word	0xc0400000
 8003e54:	42080000 	.word	0x42080000
 8003e58:	bf800000 	.word	0xbf800000
 8003e5c:	c0800000 	.word	0xc0800000
 8003e60:	43960000 	.word	0x43960000
 8003e64:	20000c12 	.word	0x20000c12
 8003e68:	200005d0 	.word	0x200005d0
 8003e6c:	20000378 	.word	0x20000378

08003e70 <add_path>:

void add_path(float param1, float param2, float param3, uint8_t param4){
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	70fb      	strb	r3, [r7, #3]
	shortestPath[path_index]-=param1;
 8003e7e:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <add_path+0x74>)
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	4b18      	ldr	r3, [pc, #96]	; (8003ee8 <add_path+0x78>)
 8003e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e8a:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <add_path+0x74>)
 8003e8c:	8812      	ldrh	r2, [r2, #0]
 8003e8e:	4614      	mov	r4, r2
 8003e90:	68f9      	ldr	r1, [r7, #12]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fe00 	bl	8000a98 <__aeabi_fsub>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <add_path+0x78>)
 8003e9e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	shortestPath[++path_index] = param2;
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <add_path+0x74>)
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <add_path+0x74>)
 8003eac:	801a      	strh	r2, [r3, #0]
 8003eae:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <add_path+0x74>)
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4a0c      	ldr	r2, [pc, #48]	; (8003ee8 <add_path+0x78>)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	shortestPath[++path_index] = param3;
 8003ebc:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <add_path+0x74>)
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <add_path+0x74>)
 8003ec6:	801a      	strh	r2, [r3, #0]
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <add_path+0x74>)
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4a06      	ldr	r2, [pc, #24]	; (8003ee8 <add_path+0x78>)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	direction = param4;
 8003ed6:	4a05      	ldr	r2, [pc, #20]	; (8003eec <add_path+0x7c>)
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	7013      	strb	r3, [r2, #0]
}
 8003edc:	bf00      	nop
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd90      	pop	{r4, r7, pc}
 8003ee4:	20000c12 	.word	0x20000c12
 8003ee8:	200005d0 	.word	0x200005d0
 8003eec:	20000c10 	.word	0x20000c10

08003ef0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <HAL_MspInit+0x5c>)
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <HAL_MspInit+0x5c>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6193      	str	r3, [r2, #24]
 8003f02:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <HAL_MspInit+0x5c>)
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <HAL_MspInit+0x5c>)
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	4a0e      	ldr	r2, [pc, #56]	; (8003f4c <HAL_MspInit+0x5c>)
 8003f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f18:	61d3      	str	r3, [r2, #28]
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <HAL_MspInit+0x5c>)
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f22:	607b      	str	r3, [r7, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <HAL_MspInit+0x60>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	4a04      	ldr	r2, [pc, #16]	; (8003f50 <HAL_MspInit+0x60>)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40010000 	.word	0x40010000

08003f54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f5c:	f107 0310 	add.w	r3, r7, #16
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a28      	ldr	r2, [pc, #160]	; (8004010 <HAL_ADC_MspInit+0xbc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d149      	bne.n	8004008 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f74:	4b27      	ldr	r3, [pc, #156]	; (8004014 <HAL_ADC_MspInit+0xc0>)
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	4a26      	ldr	r2, [pc, #152]	; (8004014 <HAL_ADC_MspInit+0xc0>)
 8003f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f7e:	6193      	str	r3, [r2, #24]
 8003f80:	4b24      	ldr	r3, [pc, #144]	; (8004014 <HAL_ADC_MspInit+0xc0>)
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8c:	4b21      	ldr	r3, [pc, #132]	; (8004014 <HAL_ADC_MspInit+0xc0>)
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	4a20      	ldr	r2, [pc, #128]	; (8004014 <HAL_ADC_MspInit+0xc0>)
 8003f92:	f043 0304 	orr.w	r3, r3, #4
 8003f96:	6193      	str	r3, [r2, #24]
 8003f98:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <HAL_ADC_MspInit+0xc0>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003fa4:	233c      	movs	r3, #60	; 0x3c
 8003fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fac:	f107 0310 	add.w	r3, r7, #16
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4819      	ldr	r0, [pc, #100]	; (8004018 <HAL_ADC_MspInit+0xc4>)
 8003fb4:	f001 fe1a 	bl	8005bec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003fb8:	4b18      	ldr	r3, [pc, #96]	; (800401c <HAL_ADC_MspInit+0xc8>)
 8003fba:	4a19      	ldr	r2, [pc, #100]	; (8004020 <HAL_ADC_MspInit+0xcc>)
 8003fbc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fbe:	4b17      	ldr	r3, [pc, #92]	; (800401c <HAL_ADC_MspInit+0xc8>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fc4:	4b15      	ldr	r3, [pc, #84]	; (800401c <HAL_ADC_MspInit+0xc8>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fca:	4b14      	ldr	r3, [pc, #80]	; (800401c <HAL_ADC_MspInit+0xc8>)
 8003fcc:	2280      	movs	r2, #128	; 0x80
 8003fce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fd0:	4b12      	ldr	r3, [pc, #72]	; (800401c <HAL_ADC_MspInit+0xc8>)
 8003fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fd8:	4b10      	ldr	r3, [pc, #64]	; (800401c <HAL_ADC_MspInit+0xc8>)
 8003fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fde:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003fe0:	4b0e      	ldr	r3, [pc, #56]	; (800401c <HAL_ADC_MspInit+0xc8>)
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	; (800401c <HAL_ADC_MspInit+0xc8>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003fec:	480b      	ldr	r0, [pc, #44]	; (800401c <HAL_ADC_MspInit+0xc8>)
 8003fee:	f001 fd15 	bl	8005a1c <HAL_DMA_Init>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8003ff8:	f7ff fa56 	bl	80034a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a07      	ldr	r2, [pc, #28]	; (800401c <HAL_ADC_MspInit+0xc8>)
 8004000:	621a      	str	r2, [r3, #32]
 8004002:	4a06      	ldr	r2, [pc, #24]	; (800401c <HAL_ADC_MspInit+0xc8>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004008:	bf00      	nop
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40012400 	.word	0x40012400
 8004014:	40021000 	.word	0x40021000
 8004018:	40010800 	.word	0x40010800
 800401c:	20000188 	.word	0x20000188
 8004020:	40020008 	.word	0x40020008

08004024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08c      	sub	sp, #48	; 0x30
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	f107 0320 	add.w	r3, r7, #32
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a3c      	ldr	r2, [pc, #240]	; (8004130 <HAL_TIM_Base_MspInit+0x10c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d12d      	bne.n	80040a0 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004044:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	4a3a      	ldr	r2, [pc, #232]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 800404a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800404e:	6193      	str	r3, [r2, #24]
 8004050:	4b38      	ldr	r3, [pc, #224]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800405c:	4b35      	ldr	r3, [pc, #212]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	4a34      	ldr	r2, [pc, #208]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 8004062:	f043 0304 	orr.w	r3, r3, #4
 8004066:	6193      	str	r3, [r2, #24]
 8004068:	4b32      	ldr	r3, [pc, #200]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407e:	2300      	movs	r3, #0
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004082:	f107 0320 	add.w	r3, r7, #32
 8004086:	4619      	mov	r1, r3
 8004088:	482b      	ldr	r0, [pc, #172]	; (8004138 <HAL_TIM_Base_MspInit+0x114>)
 800408a:	f001 fdaf 	bl	8005bec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800408e:	2200      	movs	r2, #0
 8004090:	2100      	movs	r1, #0
 8004092:	2019      	movs	r0, #25
 8004094:	f001 fc8b 	bl	80059ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004098:	2019      	movs	r0, #25
 800409a:	f001 fca4 	bl	80059e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800409e:	e042      	b.n	8004126 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a8:	d10c      	bne.n	80040c4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040aa:	4b22      	ldr	r3, [pc, #136]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4a21      	ldr	r2, [pc, #132]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	61d3      	str	r3, [r2, #28]
 80040b6:	4b1f      	ldr	r3, [pc, #124]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	697b      	ldr	r3, [r7, #20]
}
 80040c2:	e030      	b.n	8004126 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1c      	ldr	r2, [pc, #112]	; (800413c <HAL_TIM_Base_MspInit+0x118>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d12b      	bne.n	8004126 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80040ce:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	4a18      	ldr	r2, [pc, #96]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 80040d4:	f043 0302 	orr.w	r3, r3, #2
 80040d8:	61d3      	str	r3, [r2, #28]
 80040da:	4b16      	ldr	r3, [pc, #88]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e6:	4b13      	ldr	r3, [pc, #76]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	4a12      	ldr	r2, [pc, #72]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 80040ec:	f043 0304 	orr.w	r3, r3, #4
 80040f0:	6193      	str	r3, [r2, #24]
 80040f2:	4b10      	ldr	r3, [pc, #64]	; (8004134 <HAL_TIM_Base_MspInit+0x110>)
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80040fe:	2340      	movs	r3, #64	; 0x40
 8004100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004102:	2300      	movs	r3, #0
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004106:	2300      	movs	r3, #0
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800410a:	f107 0320 	add.w	r3, r7, #32
 800410e:	4619      	mov	r1, r3
 8004110:	4809      	ldr	r0, [pc, #36]	; (8004138 <HAL_TIM_Base_MspInit+0x114>)
 8004112:	f001 fd6b 	bl	8005bec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004116:	2200      	movs	r2, #0
 8004118:	2100      	movs	r1, #0
 800411a:	201d      	movs	r0, #29
 800411c:	f001 fc47 	bl	80059ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004120:	201d      	movs	r0, #29
 8004122:	f001 fc60 	bl	80059e6 <HAL_NVIC_EnableIRQ>
}
 8004126:	bf00      	nop
 8004128:	3730      	adds	r7, #48	; 0x30
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40021000 	.word	0x40021000
 8004138:	40010800 	.word	0x40010800
 800413c:	40000400 	.word	0x40000400

08004140 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004148:	f107 0314 	add.w	r3, r7, #20
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415e:	d142      	bne.n	80041e6 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004160:	4b23      	ldr	r3, [pc, #140]	; (80041f0 <HAL_TIM_MspPostInit+0xb0>)
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	4a22      	ldr	r2, [pc, #136]	; (80041f0 <HAL_TIM_MspPostInit+0xb0>)
 8004166:	f043 0304 	orr.w	r3, r3, #4
 800416a:	6193      	str	r3, [r2, #24]
 800416c:	4b20      	ldr	r3, [pc, #128]	; (80041f0 <HAL_TIM_MspPostInit+0xb0>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004178:	4b1d      	ldr	r3, [pc, #116]	; (80041f0 <HAL_TIM_MspPostInit+0xb0>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	4a1c      	ldr	r2, [pc, #112]	; (80041f0 <HAL_TIM_MspPostInit+0xb0>)
 800417e:	f043 0308 	orr.w	r3, r3, #8
 8004182:	6193      	str	r3, [r2, #24]
 8004184:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <HAL_TIM_MspPostInit+0xb0>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004190:	2303      	movs	r3, #3
 8004192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004194:	2302      	movs	r3, #2
 8004196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004198:	2302      	movs	r3, #2
 800419a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	4619      	mov	r1, r3
 80041a2:	4814      	ldr	r0, [pc, #80]	; (80041f4 <HAL_TIM_MspPostInit+0xb4>)
 80041a4:	f001 fd22 	bl	8005bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80041a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80041ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ae:	2302      	movs	r3, #2
 80041b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b2:	2302      	movs	r3, #2
 80041b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b6:	f107 0314 	add.w	r3, r7, #20
 80041ba:	4619      	mov	r1, r3
 80041bc:	480e      	ldr	r0, [pc, #56]	; (80041f8 <HAL_TIM_MspPostInit+0xb8>)
 80041be:	f001 fd15 	bl	8005bec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <HAL_TIM_MspPostInit+0xbc>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
 80041e0:	4a06      	ldr	r2, [pc, #24]	; (80041fc <HAL_TIM_MspPostInit+0xbc>)
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80041e6:	bf00      	nop
 80041e8:	3728      	adds	r7, #40	; 0x28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40010800 	.word	0x40010800
 80041f8:	40010c00 	.word	0x40010c00
 80041fc:	40010000 	.word	0x40010000

08004200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004204:	e7fe      	b.n	8004204 <NMI_Handler+0x4>

08004206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004206:	b480      	push	{r7}
 8004208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800420a:	e7fe      	b.n	800420a <HardFault_Handler+0x4>

0800420c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004210:	e7fe      	b.n	8004210 <MemManage_Handler+0x4>

08004212 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004212:	b480      	push	{r7}
 8004214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004216:	e7fe      	b.n	8004216 <BusFault_Handler+0x4>

08004218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800421c:	e7fe      	b.n	800421c <UsageFault_Handler+0x4>

0800421e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800421e:	b480      	push	{r7}
 8004220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004222:	bf00      	nop
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr

0800422a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800422a:	b480      	push	{r7}
 800422c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr

08004236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004236:	b480      	push	{r7}
 8004238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004246:	f000 fecf 	bl	8004fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004254:	2001      	movs	r0, #1
 8004256:	f001 fe4d 	bl	8005ef4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	mmode = 1;
 800425a:	4b02      	ldr	r3, [pc, #8]	; (8004264 <EXTI0_IRQHandler+0x14>)
 800425c:	2201      	movs	r2, #1
 800425e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20000375 	.word	0x20000375

08004268 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800426c:	2002      	movs	r0, #2
 800426e:	f001 fe41 	bl	8005ef4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	mmode = 2;
 8004272:	4b02      	ldr	r3, [pc, #8]	; (800427c <EXTI1_IRQHandler+0x14>)
 8004274:	2202      	movs	r2, #2
 8004276:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 8004278:	bf00      	nop
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000375 	.word	0x20000375

08004280 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if(status == u_turn || status == turn_right_90 || status == turn_right_45 || status == straight){
 8004284:	4b1f      	ldr	r3, [pc, #124]	; (8004304 <TIM1_UP_IRQHandler+0x84>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	b25b      	sxtb	r3, r3
 800428a:	f113 0f05 	cmn.w	r3, #5
 800428e:	d011      	beq.n	80042b4 <TIM1_UP_IRQHandler+0x34>
 8004290:	4b1c      	ldr	r3, [pc, #112]	; (8004304 <TIM1_UP_IRQHandler+0x84>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	b25b      	sxtb	r3, r3
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d00b      	beq.n	80042b4 <TIM1_UP_IRQHandler+0x34>
 800429c:	4b19      	ldr	r3, [pc, #100]	; (8004304 <TIM1_UP_IRQHandler+0x84>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	f113 0f02 	cmn.w	r3, #2
 80042a6:	d005      	beq.n	80042b4 <TIM1_UP_IRQHandler+0x34>
 80042a8:	4b16      	ldr	r3, [pc, #88]	; (8004304 <TIM1_UP_IRQHandler+0x84>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b25b      	sxtb	r3, r3
 80042ae:	f113 0f06 	cmn.w	r3, #6
 80042b2:	d103      	bne.n	80042bc <TIM1_UP_IRQHandler+0x3c>
		status = 0;
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <TIM1_UP_IRQHandler+0x84>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	e01d      	b.n	80042f8 <TIM1_UP_IRQHandler+0x78>
	} else {
		switch(status){
 80042bc:	4b11      	ldr	r3, [pc, #68]	; (8004304 <TIM1_UP_IRQHandler+0x84>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b25b      	sxtb	r3, r3
 80042c2:	f113 0f04 	cmn.w	r3, #4
 80042c6:	d003      	beq.n	80042d0 <TIM1_UP_IRQHandler+0x50>
 80042c8:	f113 0f03 	cmn.w	r3, #3
 80042cc:	d00a      	beq.n	80042e4 <TIM1_UP_IRQHandler+0x64>
 80042ce:	e013      	b.n	80042f8 <TIM1_UP_IRQHandler+0x78>
			case turn_left_90:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 80042d0:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <TIM1_UP_IRQHandler+0x88>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <TIM1_UP_IRQHandler+0x88>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2200      	movs	r2, #0
 80042e0:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80042e2:	e009      	b.n	80042f8 <TIM1_UP_IRQHandler+0x78>
			case turn_left_45:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 80042e4:	4b08      	ldr	r3, [pc, #32]	; (8004308 <TIM1_UP_IRQHandler+0x88>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <TIM1_UP_IRQHandler+0x88>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80042f6:	bf00      	nop
		}
	}
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042f8:	4804      	ldr	r0, [pc, #16]	; (800430c <TIM1_UP_IRQHandler+0x8c>)
 80042fa:	f002 fc4d 	bl	8006b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000376 	.word	0x20000376
 8004308:	20000214 	.word	0x20000214
 800430c:	200001cc 	.word	0x200001cc

08004310 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(status == turn_left_90 || status == turn_left_45){
 8004314:	4b29      	ldr	r3, [pc, #164]	; (80043bc <TIM3_IRQHandler+0xac>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	b25b      	sxtb	r3, r3
 800431a:	f113 0f04 	cmn.w	r3, #4
 800431e:	d005      	beq.n	800432c <TIM3_IRQHandler+0x1c>
 8004320:	4b26      	ldr	r3, [pc, #152]	; (80043bc <TIM3_IRQHandler+0xac>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	b25b      	sxtb	r3, r3
 8004326:	f113 0f03 	cmn.w	r3, #3
 800432a:	d103      	bne.n	8004334 <TIM3_IRQHandler+0x24>
		status = 0;
 800432c:	4b23      	ldr	r3, [pc, #140]	; (80043bc <TIM3_IRQHandler+0xac>)
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	e03e      	b.n	80043b2 <TIM3_IRQHandler+0xa2>
	} else  {
		switch(status){
 8004334:	4b21      	ldr	r3, [pc, #132]	; (80043bc <TIM3_IRQHandler+0xac>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	b25b      	sxtb	r3, r3
 800433a:	3306      	adds	r3, #6
 800433c:	2b05      	cmp	r3, #5
 800433e:	d838      	bhi.n	80043b2 <TIM3_IRQHandler+0xa2>
 8004340:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <TIM3_IRQHandler+0x38>)
 8004342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004346:	bf00      	nop
 8004348:	0800439d 	.word	0x0800439d
 800434c:	08004361 	.word	0x08004361
 8004350:	080043b3 	.word	0x080043b3
 8004354:	080043b3 	.word	0x080043b3
 8004358:	08004389 	.word	0x08004389
 800435c:	08004375 	.word	0x08004375
			case u_turn:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 8004360:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <TIM3_IRQHandler+0xb0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004368:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 500);
 800436a:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <TIM3_IRQHandler+0xb0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004372:	63da      	str	r2, [r3, #60]	; 0x3c
			case turn_right_90:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 8004374:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <TIM3_IRQHandler+0xb0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800437c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800437e:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <TIM3_IRQHandler+0xb0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8004386:	e014      	b.n	80043b2 <TIM3_IRQHandler+0xa2>
			case turn_right_45:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 8004388:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <TIM3_IRQHandler+0xb0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004390:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <TIM3_IRQHandler+0xb0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2200      	movs	r2, #0
 8004398:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 800439a:	e00a      	b.n	80043b2 <TIM3_IRQHandler+0xa2>
			case straight:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 800439c:	4b08      	ldr	r3, [pc, #32]	; (80043c0 <TIM3_IRQHandler+0xb0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80043a4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <TIM3_IRQHandler+0xb0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 80043b0:	bf00      	nop
		}
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80043b2:	4804      	ldr	r0, [pc, #16]	; (80043c4 <TIM3_IRQHandler+0xb4>)
 80043b4:	f002 fbf0 	bl	8006b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80043b8:	bf00      	nop
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000376 	.word	0x20000376
 80043c0:	20000214 	.word	0x20000214
 80043c4:	2000025c 	.word	0x2000025c

080043c8 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <u_turnf>:
const float turn90_arc_en = (float)halfSize_MicroMouse * M_PI * 4 * (90.0/360) * counts_per_1mm;
const float turn45_arc_en = (float)halfSize_MicroMouse * M_PI * 4 * (45.0/360) * counts_per_1mm;
const uint16_t kp = 3;
const uint16_t kd = 3;

void u_turnf(uint8_t *direction) {
 80043d4:	b590      	push	{r4, r7, lr}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	switch(*direction){
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d81b      	bhi.n	800441c <u_turnf+0x48>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <u_turnf+0x18>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	08004405 	.word	0x08004405
 80043f4:	0800440d 	.word	0x0800440d
 80043f8:	08004415 	.word	0x08004415
		case west:  *direction = east;   break;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	e00b      	b.n	800441c <u_turnf+0x48>
		case east:  *direction = west;   break;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e007      	b.n	800441c <u_turnf+0x48>
		case north: *direction = south;  break;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2203      	movs	r2, #3
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	e003      	b.n	800441c <u_turnf+0x48>
		case south: *direction = north;  break;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	701a      	strb	r2, [r3, #0]
 800441a:	bf00      	nop
	}
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(uturn_arc_en));
 800441c:	4b52      	ldr	r3, [pc, #328]	; (8004568 <u_turnf+0x194>)
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc f8ac 	bl	800057c <__aeabi_f2d>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4610      	mov	r0, r2
 800442a:	4619      	mov	r1, r3
 800442c:	f003 fa86 	bl	800793c <round>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	494d      	ldr	r1, [pc, #308]	; (800456c <u_turnf+0x198>)
 8004436:	680c      	ldr	r4, [r1, #0]
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	f7fc fb08 	bl	8000a50 <__aeabi_d2uiz>
 8004440:	4603      	mov	r3, r0
 8004442:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004444:	4b48      	ldr	r3, [pc, #288]	; (8004568 <u_turnf+0x194>)
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc f898 	bl	800057c <__aeabi_f2d>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4610      	mov	r0, r2
 8004452:	4619      	mov	r1, r3
 8004454:	f003 fa72 	bl	800793c <round>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4610      	mov	r0, r2
 800445e:	4619      	mov	r1, r3
 8004460:	f7fc faf6 	bl	8000a50 <__aeabi_d2uiz>
 8004464:	4603      	mov	r3, r0
 8004466:	4a41      	ldr	r2, [pc, #260]	; (800456c <u_turnf+0x198>)
 8004468:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(uturn_arc_en) * 5 / 10);
 800446a:	4b3f      	ldr	r3, [pc, #252]	; (8004568 <u_turnf+0x194>)
 800446c:	4618      	mov	r0, r3
 800446e:	f7fc f885 	bl	800057c <__aeabi_f2d>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4610      	mov	r0, r2
 8004478:	4619      	mov	r1, r3
 800447a:	f003 fa5f 	bl	800793c <round>
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	4b3b      	ldr	r3, [pc, #236]	; (8004570 <u_turnf+0x19c>)
 8004484:	f7fc f8d2 	bl	800062c <__aeabi_dmul>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4610      	mov	r0, r2
 800448e:	4619      	mov	r1, r3
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	4b37      	ldr	r3, [pc, #220]	; (8004574 <u_turnf+0x1a0>)
 8004496:	f7fc f9f3 	bl	8000880 <__aeabi_ddiv>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4936      	ldr	r1, [pc, #216]	; (8004578 <u_turnf+0x1a4>)
 80044a0:	680c      	ldr	r4, [r1, #0]
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	f7fc fad3 	bl	8000a50 <__aeabi_d2uiz>
 80044aa:	4603      	mov	r3, r0
 80044ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044ae:	4b2e      	ldr	r3, [pc, #184]	; (8004568 <u_turnf+0x194>)
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fc f863 	bl	800057c <__aeabi_f2d>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4610      	mov	r0, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	f003 fa3d 	bl	800793c <round>
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <u_turnf+0x19c>)
 80044c8:	f7fc f8b0 	bl	800062c <__aeabi_dmul>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4610      	mov	r0, r2
 80044d2:	4619      	mov	r1, r3
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	4b26      	ldr	r3, [pc, #152]	; (8004574 <u_turnf+0x1a0>)
 80044da:	f7fc f9d1 	bl	8000880 <__aeabi_ddiv>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4610      	mov	r0, r2
 80044e4:	4619      	mov	r1, r3
 80044e6:	f7fc fab3 	bl	8000a50 <__aeabi_d2uiz>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4a22      	ldr	r2, [pc, #136]	; (8004578 <u_turnf+0x1a4>)
 80044ee:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <u_turnf+0x198>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2200      	movs	r2, #0
 80044f6:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80044f8:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <u_turnf+0x1a4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2200      	movs	r2, #0
 80044fe:	625a      	str	r2, [r3, #36]	; 0x24
	status = u_turn;
 8004500:	4b1e      	ldr	r3, [pc, #120]	; (800457c <u_turnf+0x1a8>)
 8004502:	22fb      	movs	r2, #251	; 0xfb
 8004504:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, speed_levels[current_speed][0]);
 8004506:	4b1e      	ldr	r3, [pc, #120]	; (8004580 <u_turnf+0x1ac>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <u_turnf+0x1b0>)
 8004510:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8004514:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <u_turnf+0x1b4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, 0);
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <u_turnf+0x1b4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2200      	movs	r2, #0
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor1, 0);
 8004522:	4b19      	ldr	r3, [pc, #100]	; (8004588 <u_turnf+0x1b4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2200      	movs	r2, #0
 8004528:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor2, speed_levels[current_speed][1]);
 800452a:	4b15      	ldr	r3, [pc, #84]	; (8004580 <u_turnf+0x1ac>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	4a14      	ldr	r2, [pc, #80]	; (8004584 <u_turnf+0x1b0>)
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	885a      	ldrh	r2, [r3, #2]
 8004538:	4b13      	ldr	r3, [pc, #76]	; (8004588 <u_turnf+0x1b4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	639a      	str	r2, [r3, #56]	; 0x38
	while(status != 0);
 800453e:	bf00      	nop
 8004540:	4b0e      	ldr	r3, [pc, #56]	; (800457c <u_turnf+0x1a8>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	b25b      	sxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1fa      	bne.n	8004540 <u_turnf+0x16c>
	brake();
 800454a:	f000 fc2f 	bl	8004dac <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <u_turnf+0x198>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2200      	movs	r2, #0
 8004554:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004556:	4b08      	ldr	r3, [pc, #32]	; (8004578 <u_turnf+0x1a4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2200      	movs	r2, #0
 800455c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bd90      	pop	{r4, r7, pc}
 8004566:	bf00      	nop
 8004568:	422a0000 	.word	0x422a0000
 800456c:	200001cc 	.word	0x200001cc
 8004570:	40140000 	.word	0x40140000
 8004574:	40240000 	.word	0x40240000
 8004578:	2000025c 	.word	0x2000025c
 800457c:	20000376 	.word	0x20000376
 8004580:	20000374 	.word	0x20000374
 8004584:	080079ec 	.word	0x080079ec
 8004588:	20000214 	.word	0x20000214

0800458c <turn_left45>:

void turn_left45() {
 800458c:	b598      	push	{r3, r4, r7, lr}
 800458e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn45_arc_en));
 8004590:	4b4f      	ldr	r3, [pc, #316]	; (80046d0 <turn_left45+0x144>)
 8004592:	4618      	mov	r0, r3
 8004594:	f7fb fff2 	bl	800057c <__aeabi_f2d>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4610      	mov	r0, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	f003 f9cc 	bl	800793c <round>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	494a      	ldr	r1, [pc, #296]	; (80046d4 <turn_left45+0x148>)
 80045aa:	680c      	ldr	r4, [r1, #0]
 80045ac:	4610      	mov	r0, r2
 80045ae:	4619      	mov	r1, r3
 80045b0:	f7fc fa4e 	bl	8000a50 <__aeabi_d2uiz>
 80045b4:	4603      	mov	r3, r0
 80045b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045b8:	4b45      	ldr	r3, [pc, #276]	; (80046d0 <turn_left45+0x144>)
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fb ffde 	bl	800057c <__aeabi_f2d>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4610      	mov	r0, r2
 80045c6:	4619      	mov	r1, r3
 80045c8:	f003 f9b8 	bl	800793c <round>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	f7fc fa3c 	bl	8000a50 <__aeabi_d2uiz>
 80045d8:	4603      	mov	r3, r0
 80045da:	4a3e      	ldr	r2, [pc, #248]	; (80046d4 <turn_left45+0x148>)
 80045dc:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(turn45_arc_en) * 5 / 10);
 80045de:	4b3c      	ldr	r3, [pc, #240]	; (80046d0 <turn_left45+0x144>)
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fb ffcb 	bl	800057c <__aeabi_f2d>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4610      	mov	r0, r2
 80045ec:	4619      	mov	r1, r3
 80045ee:	f003 f9a5 	bl	800793c <round>
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <turn_left45+0x14c>)
 80045f8:	f7fc f818 	bl	800062c <__aeabi_dmul>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4610      	mov	r0, r2
 8004602:	4619      	mov	r1, r3
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	4b34      	ldr	r3, [pc, #208]	; (80046dc <turn_left45+0x150>)
 800460a:	f7fc f939 	bl	8000880 <__aeabi_ddiv>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4933      	ldr	r1, [pc, #204]	; (80046e0 <turn_left45+0x154>)
 8004614:	680c      	ldr	r4, [r1, #0]
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	f7fc fa19 	bl	8000a50 <__aeabi_d2uiz>
 800461e:	4603      	mov	r3, r0
 8004620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004622:	4b2b      	ldr	r3, [pc, #172]	; (80046d0 <turn_left45+0x144>)
 8004624:	4618      	mov	r0, r3
 8004626:	f7fb ffa9 	bl	800057c <__aeabi_f2d>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4610      	mov	r0, r2
 8004630:	4619      	mov	r1, r3
 8004632:	f003 f983 	bl	800793c <round>
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <turn_left45+0x14c>)
 800463c:	f7fb fff6 	bl	800062c <__aeabi_dmul>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4610      	mov	r0, r2
 8004646:	4619      	mov	r1, r3
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	4b23      	ldr	r3, [pc, #140]	; (80046dc <turn_left45+0x150>)
 800464e:	f7fc f917 	bl	8000880 <__aeabi_ddiv>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	f7fc f9f9 	bl	8000a50 <__aeabi_d2uiz>
 800465e:	4603      	mov	r3, r0
 8004660:	4a1f      	ldr	r2, [pc, #124]	; (80046e0 <turn_left45+0x154>)
 8004662:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004664:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <turn_left45+0x154>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2200      	movs	r2, #0
 800466a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800466c:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <turn_left45+0x148>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2200      	movs	r2, #0
 8004672:	625a      	str	r2, [r3, #36]	; 0x24
	status = turn_left_45;
 8004674:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <turn_left45+0x158>)
 8004676:	22fd      	movs	r2, #253	; 0xfd
 8004678:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, htim2.Init.Period);
 800467a:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <turn_left45+0x15c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1a      	ldr	r2, [pc, #104]	; (80046e8 <turn_left45+0x15c>)
 8004680:	68d2      	ldr	r2, [r2, #12]
 8004682:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, htim2.Init.Period);
 8004684:	4b18      	ldr	r3, [pc, #96]	; (80046e8 <turn_left45+0x15c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a17      	ldr	r2, [pc, #92]	; (80046e8 <turn_left45+0x15c>)
 800468a:	68d2      	ldr	r2, [r2, #12]
 800468c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor1, speed_levels[current_speed][1]);
 800468e:	4b17      	ldr	r3, [pc, #92]	; (80046ec <turn_left45+0x160>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <turn_left45+0x164>)
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	885a      	ldrh	r2, [r3, #2]
 800469c:	4b12      	ldr	r3, [pc, #72]	; (80046e8 <turn_left45+0x15c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor2, 0);
 80046a2:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <turn_left45+0x15c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2200      	movs	r2, #0
 80046a8:	639a      	str	r2, [r3, #56]	; 0x38
	while(status != 0);
 80046aa:	bf00      	nop
 80046ac:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <turn_left45+0x158>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	b25b      	sxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1fa      	bne.n	80046ac <turn_left45+0x120>
	brake();
 80046b6:	f000 fb79 	bl	8004dac <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80046ba:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <turn_left45+0x154>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2200      	movs	r2, #0
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80046c2:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <turn_left45+0x148>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2200      	movs	r2, #0
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80046ca:	bf00      	nop
 80046cc:	bd98      	pop	{r3, r4, r7, pc}
 80046ce:	bf00      	nop
 80046d0:	41aa0000 	.word	0x41aa0000
 80046d4:	2000025c 	.word	0x2000025c
 80046d8:	40140000 	.word	0x40140000
 80046dc:	40240000 	.word	0x40240000
 80046e0:	200001cc 	.word	0x200001cc
 80046e4:	20000376 	.word	0x20000376
 80046e8:	20000214 	.word	0x20000214
 80046ec:	20000374 	.word	0x20000374
 80046f0:	080079ec 	.word	0x080079ec

080046f4 <turn_right45>:

void turn_right45() {
 80046f4:	b598      	push	{r3, r4, r7, lr}
 80046f6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(turn45_arc_en));
 80046f8:	4b4f      	ldr	r3, [pc, #316]	; (8004838 <turn_right45+0x144>)
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fb ff3e 	bl	800057c <__aeabi_f2d>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4610      	mov	r0, r2
 8004706:	4619      	mov	r1, r3
 8004708:	f003 f918 	bl	800793c <round>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	494a      	ldr	r1, [pc, #296]	; (800483c <turn_right45+0x148>)
 8004712:	680c      	ldr	r4, [r1, #0]
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	f7fc f99a 	bl	8000a50 <__aeabi_d2uiz>
 800471c:	4603      	mov	r3, r0
 800471e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004720:	4b45      	ldr	r3, [pc, #276]	; (8004838 <turn_right45+0x144>)
 8004722:	4618      	mov	r0, r3
 8004724:	f7fb ff2a 	bl	800057c <__aeabi_f2d>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4610      	mov	r0, r2
 800472e:	4619      	mov	r1, r3
 8004730:	f003 f904 	bl	800793c <round>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4610      	mov	r0, r2
 800473a:	4619      	mov	r1, r3
 800473c:	f7fc f988 	bl	8000a50 <__aeabi_d2uiz>
 8004740:	4603      	mov	r3, r0
 8004742:	4a3e      	ldr	r2, [pc, #248]	; (800483c <turn_right45+0x148>)
 8004744:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn45_arc_en) * 5 / 10);
 8004746:	4b3c      	ldr	r3, [pc, #240]	; (8004838 <turn_right45+0x144>)
 8004748:	4618      	mov	r0, r3
 800474a:	f7fb ff17 	bl	800057c <__aeabi_f2d>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	4610      	mov	r0, r2
 8004754:	4619      	mov	r1, r3
 8004756:	f003 f8f1 	bl	800793c <round>
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	4b38      	ldr	r3, [pc, #224]	; (8004840 <turn_right45+0x14c>)
 8004760:	f7fb ff64 	bl	800062c <__aeabi_dmul>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4610      	mov	r0, r2
 800476a:	4619      	mov	r1, r3
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	4b34      	ldr	r3, [pc, #208]	; (8004844 <turn_right45+0x150>)
 8004772:	f7fc f885 	bl	8000880 <__aeabi_ddiv>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4933      	ldr	r1, [pc, #204]	; (8004848 <turn_right45+0x154>)
 800477c:	680c      	ldr	r4, [r1, #0]
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	f7fc f965 	bl	8000a50 <__aeabi_d2uiz>
 8004786:	4603      	mov	r3, r0
 8004788:	62e3      	str	r3, [r4, #44]	; 0x2c
 800478a:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <turn_right45+0x144>)
 800478c:	4618      	mov	r0, r3
 800478e:	f7fb fef5 	bl	800057c <__aeabi_f2d>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	f003 f8cf 	bl	800793c <round>
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	4b27      	ldr	r3, [pc, #156]	; (8004840 <turn_right45+0x14c>)
 80047a4:	f7fb ff42 	bl	800062c <__aeabi_dmul>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4610      	mov	r0, r2
 80047ae:	4619      	mov	r1, r3
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	4b23      	ldr	r3, [pc, #140]	; (8004844 <turn_right45+0x150>)
 80047b6:	f7fc f863 	bl	8000880 <__aeabi_ddiv>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4610      	mov	r0, r2
 80047c0:	4619      	mov	r1, r3
 80047c2:	f7fc f945 	bl	8000a50 <__aeabi_d2uiz>
 80047c6:	4603      	mov	r3, r0
 80047c8:	4a1f      	ldr	r2, [pc, #124]	; (8004848 <turn_right45+0x154>)
 80047ca:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80047cc:	4b1b      	ldr	r3, [pc, #108]	; (800483c <turn_right45+0x148>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2200      	movs	r2, #0
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80047d4:	4b1c      	ldr	r3, [pc, #112]	; (8004848 <turn_right45+0x154>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2200      	movs	r2, #0
 80047da:	625a      	str	r2, [r3, #36]	; 0x24
	status = turn_right_45;
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <turn_right45+0x158>)
 80047de:	22fe      	movs	r2, #254	; 0xfe
 80047e0:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, speed_levels[current_speed][0]);
 80047e2:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <turn_right45+0x15c>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	4b1a      	ldr	r3, [pc, #104]	; (8004854 <turn_right45+0x160>)
 80047ec:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 80047f0:	4b19      	ldr	r3, [pc, #100]	; (8004858 <turn_right45+0x164>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, 0);
 80047f6:	4b18      	ldr	r3, [pc, #96]	; (8004858 <turn_right45+0x164>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor1, htim2.Init.Period);
 80047fe:	4b16      	ldr	r3, [pc, #88]	; (8004858 <turn_right45+0x164>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a15      	ldr	r2, [pc, #84]	; (8004858 <turn_right45+0x164>)
 8004804:	68d2      	ldr	r2, [r2, #12]
 8004806:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor2, htim2.Init.Period);
 8004808:	4b13      	ldr	r3, [pc, #76]	; (8004858 <turn_right45+0x164>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a12      	ldr	r2, [pc, #72]	; (8004858 <turn_right45+0x164>)
 800480e:	68d2      	ldr	r2, [r2, #12]
 8004810:	639a      	str	r2, [r3, #56]	; 0x38
	while(status != 0);
 8004812:	bf00      	nop
 8004814:	4b0d      	ldr	r3, [pc, #52]	; (800484c <turn_right45+0x158>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	b25b      	sxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1fa      	bne.n	8004814 <turn_right45+0x120>
	brake();
 800481e:	f000 fac5 	bl	8004dac <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <turn_right45+0x148>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2200      	movs	r2, #0
 8004828:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800482a:	4b07      	ldr	r3, [pc, #28]	; (8004848 <turn_right45+0x154>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2200      	movs	r2, #0
 8004830:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004832:	bf00      	nop
 8004834:	bd98      	pop	{r3, r4, r7, pc}
 8004836:	bf00      	nop
 8004838:	41aa0000 	.word	0x41aa0000
 800483c:	200001cc 	.word	0x200001cc
 8004840:	40140000 	.word	0x40140000
 8004844:	40240000 	.word	0x40240000
 8004848:	2000025c 	.word	0x2000025c
 800484c:	20000376 	.word	0x20000376
 8004850:	20000374 	.word	0x20000374
 8004854:	080079ec 	.word	0x080079ec
 8004858:	20000214 	.word	0x20000214

0800485c <turn_left90>:

void turn_left90(uint8_t *direction) {
 800485c:	b590      	push	{r4, r7, lr}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b03      	cmp	r3, #3
 800486a:	d81b      	bhi.n	80048a4 <turn_left90+0x48>
 800486c:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <turn_left90+0x18>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004885 	.word	0x08004885
 8004878:	0800488d 	.word	0x0800488d
 800487c:	08004895 	.word	0x08004895
 8004880:	0800489d 	.word	0x0800489d
		case west:  *direction = south; break;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2203      	movs	r2, #3
 8004888:	701a      	strb	r2, [r3, #0]
 800488a:	e00b      	b.n	80048a4 <turn_left90+0x48>
		case east:  *direction = north; break;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e007      	b.n	80048a4 <turn_left90+0x48>
		case north: *direction = west;  break;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	e003      	b.n	80048a4 <turn_left90+0x48>
		case south: *direction = east;  break;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	bf00      	nop
	}
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn90_arc_en));
 80048a4:	4b50      	ldr	r3, [pc, #320]	; (80049e8 <turn_left90+0x18c>)
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fb fe68 	bl	800057c <__aeabi_f2d>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4610      	mov	r0, r2
 80048b2:	4619      	mov	r1, r3
 80048b4:	f003 f842 	bl	800793c <round>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	494b      	ldr	r1, [pc, #300]	; (80049ec <turn_left90+0x190>)
 80048be:	680c      	ldr	r4, [r1, #0]
 80048c0:	4610      	mov	r0, r2
 80048c2:	4619      	mov	r1, r3
 80048c4:	f7fc f8c4 	bl	8000a50 <__aeabi_d2uiz>
 80048c8:	4603      	mov	r3, r0
 80048ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048cc:	4b46      	ldr	r3, [pc, #280]	; (80049e8 <turn_left90+0x18c>)
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fb fe54 	bl	800057c <__aeabi_f2d>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4610      	mov	r0, r2
 80048da:	4619      	mov	r1, r3
 80048dc:	f003 f82e 	bl	800793c <round>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4610      	mov	r0, r2
 80048e6:	4619      	mov	r1, r3
 80048e8:	f7fc f8b2 	bl	8000a50 <__aeabi_d2uiz>
 80048ec:	4603      	mov	r3, r0
 80048ee:	4a3f      	ldr	r2, [pc, #252]	; (80049ec <turn_left90+0x190>)
 80048f0:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(turn90_arc_en) * 5 / 10);
 80048f2:	4b3d      	ldr	r3, [pc, #244]	; (80049e8 <turn_left90+0x18c>)
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fb fe41 	bl	800057c <__aeabi_f2d>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4610      	mov	r0, r2
 8004900:	4619      	mov	r1, r3
 8004902:	f003 f81b 	bl	800793c <round>
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	4b39      	ldr	r3, [pc, #228]	; (80049f0 <turn_left90+0x194>)
 800490c:	f7fb fe8e 	bl	800062c <__aeabi_dmul>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4610      	mov	r0, r2
 8004916:	4619      	mov	r1, r3
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	4b35      	ldr	r3, [pc, #212]	; (80049f4 <turn_left90+0x198>)
 800491e:	f7fb ffaf 	bl	8000880 <__aeabi_ddiv>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4934      	ldr	r1, [pc, #208]	; (80049f8 <turn_left90+0x19c>)
 8004928:	680c      	ldr	r4, [r1, #0]
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	f7fc f88f 	bl	8000a50 <__aeabi_d2uiz>
 8004932:	4603      	mov	r3, r0
 8004934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004936:	4b2c      	ldr	r3, [pc, #176]	; (80049e8 <turn_left90+0x18c>)
 8004938:	4618      	mov	r0, r3
 800493a:	f7fb fe1f 	bl	800057c <__aeabi_f2d>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4610      	mov	r0, r2
 8004944:	4619      	mov	r1, r3
 8004946:	f002 fff9 	bl	800793c <round>
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	4b28      	ldr	r3, [pc, #160]	; (80049f0 <turn_left90+0x194>)
 8004950:	f7fb fe6c 	bl	800062c <__aeabi_dmul>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4610      	mov	r0, r2
 800495a:	4619      	mov	r1, r3
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	4b24      	ldr	r3, [pc, #144]	; (80049f4 <turn_left90+0x198>)
 8004962:	f7fb ff8d 	bl	8000880 <__aeabi_ddiv>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	f7fc f86f 	bl	8000a50 <__aeabi_d2uiz>
 8004972:	4603      	mov	r3, r0
 8004974:	4a20      	ldr	r2, [pc, #128]	; (80049f8 <turn_left90+0x19c>)
 8004976:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004978:	4b1f      	ldr	r3, [pc, #124]	; (80049f8 <turn_left90+0x19c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2200      	movs	r2, #0
 800497e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004980:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <turn_left90+0x190>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2200      	movs	r2, #0
 8004986:	625a      	str	r2, [r3, #36]	; 0x24
	status = turn_left_90;
 8004988:	4b1c      	ldr	r3, [pc, #112]	; (80049fc <turn_left90+0x1a0>)
 800498a:	22fc      	movs	r2, #252	; 0xfc
 800498c:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, htim2.Init.Period);
 800498e:	4b1c      	ldr	r3, [pc, #112]	; (8004a00 <turn_left90+0x1a4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1b      	ldr	r2, [pc, #108]	; (8004a00 <turn_left90+0x1a4>)
 8004994:	68d2      	ldr	r2, [r2, #12]
 8004996:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, htim2.Init.Period);
 8004998:	4b19      	ldr	r3, [pc, #100]	; (8004a00 <turn_left90+0x1a4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a18      	ldr	r2, [pc, #96]	; (8004a00 <turn_left90+0x1a4>)
 800499e:	68d2      	ldr	r2, [r2, #12]
 80049a0:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor1, speed_levels[current_speed][1]);
 80049a2:	4b18      	ldr	r3, [pc, #96]	; (8004a04 <turn_left90+0x1a8>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <turn_left90+0x1ac>)
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	885a      	ldrh	r2, [r3, #2]
 80049b0:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <turn_left90+0x1a4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor2, 0);
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <turn_left90+0x1a4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2200      	movs	r2, #0
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38
	while(status != 0);
 80049be:	bf00      	nop
 80049c0:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <turn_left90+0x1a0>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	b25b      	sxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1fa      	bne.n	80049c0 <turn_left90+0x164>
	brake();
 80049ca:	f000 f9ef 	bl	8004dac <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80049ce:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <turn_left90+0x19c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2200      	movs	r2, #0
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <turn_left90+0x190>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2200      	movs	r2, #0
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd90      	pop	{r4, r7, pc}
 80049e6:	bf00      	nop
 80049e8:	422a0000 	.word	0x422a0000
 80049ec:	2000025c 	.word	0x2000025c
 80049f0:	40140000 	.word	0x40140000
 80049f4:	40240000 	.word	0x40240000
 80049f8:	200001cc 	.word	0x200001cc
 80049fc:	20000376 	.word	0x20000376
 8004a00:	20000214 	.word	0x20000214
 8004a04:	20000374 	.word	0x20000374
 8004a08:	080079ec 	.word	0x080079ec

08004a0c <turn_right90>:

void turn_right90(uint8_t *direction) {
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d81b      	bhi.n	8004a54 <turn_right90+0x48>
 8004a1c:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <turn_right90+0x18>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004a35 	.word	0x08004a35
 8004a28:	08004a3d 	.word	0x08004a3d
 8004a2c:	08004a45 	.word	0x08004a45
 8004a30:	08004a4d 	.word	0x08004a4d
		case west:  *direction = north; break;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	e00b      	b.n	8004a54 <turn_right90+0x48>
		case east:  *direction = south; break;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	e007      	b.n	8004a54 <turn_right90+0x48>
		case north: *direction = east;  break;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e003      	b.n	8004a54 <turn_right90+0x48>
		case south: *direction = west;  break;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	bf00      	nop
	}
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(turn90_arc_en));
 8004a54:	4b50      	ldr	r3, [pc, #320]	; (8004b98 <turn_right90+0x18c>)
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fb fd90 	bl	800057c <__aeabi_f2d>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	f002 ff6a 	bl	800793c <round>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	494b      	ldr	r1, [pc, #300]	; (8004b9c <turn_right90+0x190>)
 8004a6e:	680c      	ldr	r4, [r1, #0]
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	f7fb ffec 	bl	8000a50 <__aeabi_d2uiz>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a7c:	4b46      	ldr	r3, [pc, #280]	; (8004b98 <turn_right90+0x18c>)
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fb fd7c 	bl	800057c <__aeabi_f2d>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	f002 ff56 	bl	800793c <round>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4610      	mov	r0, r2
 8004a96:	4619      	mov	r1, r3
 8004a98:	f7fb ffda 	bl	8000a50 <__aeabi_d2uiz>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4a3f      	ldr	r2, [pc, #252]	; (8004b9c <turn_right90+0x190>)
 8004aa0:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn90_arc_en) * 5 / 10);
 8004aa2:	4b3d      	ldr	r3, [pc, #244]	; (8004b98 <turn_right90+0x18c>)
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fb fd69 	bl	800057c <__aeabi_f2d>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4610      	mov	r0, r2
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	f002 ff43 	bl	800793c <round>
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	4b39      	ldr	r3, [pc, #228]	; (8004ba0 <turn_right90+0x194>)
 8004abc:	f7fb fdb6 	bl	800062c <__aeabi_dmul>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	4b35      	ldr	r3, [pc, #212]	; (8004ba4 <turn_right90+0x198>)
 8004ace:	f7fb fed7 	bl	8000880 <__aeabi_ddiv>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4934      	ldr	r1, [pc, #208]	; (8004ba8 <turn_right90+0x19c>)
 8004ad8:	680c      	ldr	r4, [r1, #0]
 8004ada:	4610      	mov	r0, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	f7fb ffb7 	bl	8000a50 <__aeabi_d2uiz>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ae6:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <turn_right90+0x18c>)
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fb fd47 	bl	800057c <__aeabi_f2d>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4610      	mov	r0, r2
 8004af4:	4619      	mov	r1, r3
 8004af6:	f002 ff21 	bl	800793c <round>
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	4b28      	ldr	r3, [pc, #160]	; (8004ba0 <turn_right90+0x194>)
 8004b00:	f7fb fd94 	bl	800062c <__aeabi_dmul>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4610      	mov	r0, r2
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <turn_right90+0x198>)
 8004b12:	f7fb feb5 	bl	8000880 <__aeabi_ddiv>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	f7fb ff97 	bl	8000a50 <__aeabi_d2uiz>
 8004b22:	4603      	mov	r3, r0
 8004b24:	4a20      	ldr	r2, [pc, #128]	; (8004ba8 <turn_right90+0x19c>)
 8004b26:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004b28:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <turn_right90+0x190>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004b30:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <turn_right90+0x19c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2200      	movs	r2, #0
 8004b36:	625a      	str	r2, [r3, #36]	; 0x24
	status = turn_right_90;
 8004b38:	4b1c      	ldr	r3, [pc, #112]	; (8004bac <turn_right90+0x1a0>)
 8004b3a:	22ff      	movs	r2, #255	; 0xff
 8004b3c:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, speed_levels[current_speed][0]);
 8004b3e:	4b1c      	ldr	r3, [pc, #112]	; (8004bb0 <turn_right90+0x1a4>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	461a      	mov	r2, r3
 8004b46:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <turn_right90+0x1a8>)
 8004b48:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8004b4c:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <turn_right90+0x1ac>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, 0);
 8004b52:	4b19      	ldr	r3, [pc, #100]	; (8004bb8 <turn_right90+0x1ac>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2200      	movs	r2, #0
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor1, htim2.Init.Period);
 8004b5a:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <turn_right90+0x1ac>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a16      	ldr	r2, [pc, #88]	; (8004bb8 <turn_right90+0x1ac>)
 8004b60:	68d2      	ldr	r2, [r2, #12]
 8004b62:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor2, htim2.Init.Period);
 8004b64:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <turn_right90+0x1ac>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <turn_right90+0x1ac>)
 8004b6a:	68d2      	ldr	r2, [r2, #12]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38

	while(status != 0);
 8004b6e:	bf00      	nop
 8004b70:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <turn_right90+0x1a0>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	b25b      	sxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1fa      	bne.n	8004b70 <turn_right90+0x164>
	brake();
 8004b7a:	f000 f917 	bl	8004dac <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004b7e:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <turn_right90+0x190>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2200      	movs	r2, #0
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004b86:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <turn_right90+0x19c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd90      	pop	{r4, r7, pc}
 8004b96:	bf00      	nop
 8004b98:	422a0000 	.word	0x422a0000
 8004b9c:	200001cc 	.word	0x200001cc
 8004ba0:	40140000 	.word	0x40140000
 8004ba4:	40240000 	.word	0x40240000
 8004ba8:	2000025c 	.word	0x2000025c
 8004bac:	20000376 	.word	0x20000376
 8004bb0:	20000374 	.word	0x20000374
 8004bb4:	080079ec 	.word	0x080079ec
 8004bb8:	20000214 	.word	0x20000214

08004bbc <go_straight>:

void go_straight(float distance, bool brakee) { //millimeter
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	70fb      	strb	r3, [r7, #3]
	uint16_t en = round(distance * counts_per_1mm);
 8004bc8:	4b32      	ldr	r3, [pc, #200]	; (8004c94 <go_straight+0xd8>)
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fb fabd 	bl	800014c <__aeabi_fmul>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fb fcd1 	bl	800057c <__aeabi_f2d>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	f002 feab 	bl	800793c <round>
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4610      	mov	r0, r2
 8004bec:	4619      	mov	r1, r3
 8004bee:	f7fb ff2f 	bl	8000a50 <__aeabi_d2uiz>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_AUTORELOAD(&htim1, en);
 8004bf6:	4b28      	ldr	r3, [pc, #160]	; (8004c98 <go_straight+0xdc>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	89fa      	ldrh	r2, [r7, #14]
 8004bfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bfe:	89fb      	ldrh	r3, [r7, #14]
 8004c00:	4a25      	ldr	r2, [pc, #148]	; (8004c98 <go_straight+0xdc>)
 8004c02:	60d3      	str	r3, [r2, #12]
	if(brakee){
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d019      	beq.n	8004c3e <go_straight+0x82>
		__HAL_TIM_SET_AUTORELOAD(&htim3, en * 7 / 10);
 8004c0a:	89fa      	ldrh	r2, [r7, #14]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	4a22      	ldr	r2, [pc, #136]	; (8004c9c <go_straight+0xe0>)
 8004c14:	fb82 1203 	smull	r1, r2, r2, r3
 8004c18:	1092      	asrs	r2, r2, #2
 8004c1a:	17db      	asrs	r3, r3, #31
 8004c1c:	1ad2      	subs	r2, r2, r3
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <go_straight+0xe4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c24:	89fa      	ldrh	r2, [r7, #14]
 8004c26:	4613      	mov	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <go_straight+0xe0>)
 8004c2e:	fb82 1203 	smull	r1, r2, r2, r3
 8004c32:	1092      	asrs	r2, r2, #2
 8004c34:	17db      	asrs	r3, r3, #31
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4b19      	ldr	r3, [pc, #100]	; (8004ca0 <go_straight+0xe4>)
 8004c3c:	60da      	str	r2, [r3, #12]
	}
	status = straight;
 8004c3e:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <go_straight+0xe8>)
 8004c40:	22fa      	movs	r2, #250	; 0xfa
 8004c42:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, speed_levels[current_speed][0]);
 8004c44:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <go_straight+0xec>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	4b17      	ldr	r3, [pc, #92]	; (8004cac <go_straight+0xf0>)
 8004c4e:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8004c52:	4b17      	ldr	r3, [pc, #92]	; (8004cb0 <go_straight+0xf4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, 0);
 8004c58:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <go_straight+0xf4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor1, speed_levels[current_speed][1]);
 8004c60:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <go_straight+0xec>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	4a11      	ldr	r2, [pc, #68]	; (8004cac <go_straight+0xf0>)
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	885a      	ldrh	r2, [r3, #2]
 8004c6e:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <go_straight+0xf4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor2, 0);
 8004c74:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <go_straight+0xf4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	639a      	str	r2, [r3, #56]	; 0x38
	PID();
 8004c7c:	f000 f8b2 	bl	8004de4 <PID>
	if(brakee){
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <go_straight+0xce>
		brake();
 8004c86:	f000 f891 	bl	8004dac <brake>
	}
}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	3ecbb7e4 	.word	0x3ecbb7e4
 8004c98:	200001cc 	.word	0x200001cc
 8004c9c:	66666667 	.word	0x66666667
 8004ca0:	2000025c 	.word	0x2000025c
 8004ca4:	20000376 	.word	0x20000376
 8004ca8:	20000374 	.word	0x20000374
 8004cac:	080079ec 	.word	0x080079ec
 8004cb0:	20000214 	.word	0x20000214

08004cb4 <backwards>:

void backwards(float distance, bool brakee){
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	70fb      	strb	r3, [r7, #3]
	uint16_t en = round(distance * counts_per_1mm);
 8004cc0:	4b32      	ldr	r3, [pc, #200]	; (8004d8c <backwards+0xd8>)
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fb fa41 	bl	800014c <__aeabi_fmul>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fb fc55 	bl	800057c <__aeabi_f2d>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	f002 fe2f 	bl	800793c <round>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	f7fb feb3 	bl	8000a50 <__aeabi_d2uiz>
 8004cea:	4603      	mov	r3, r0
 8004cec:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_AUTORELOAD(&htim1, en);
 8004cee:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <backwards+0xdc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	89fa      	ldrh	r2, [r7, #14]
 8004cf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cf6:	89fb      	ldrh	r3, [r7, #14]
 8004cf8:	4a25      	ldr	r2, [pc, #148]	; (8004d90 <backwards+0xdc>)
 8004cfa:	60d3      	str	r3, [r2, #12]
	if(brakee){
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d019      	beq.n	8004d36 <backwards+0x82>
		__HAL_TIM_SET_AUTORELOAD(&htim3, en * 7 / 10);
 8004d02:	89fa      	ldrh	r2, [r7, #14]
 8004d04:	4613      	mov	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	4a22      	ldr	r2, [pc, #136]	; (8004d94 <backwards+0xe0>)
 8004d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8004d10:	1092      	asrs	r2, r2, #2
 8004d12:	17db      	asrs	r3, r3, #31
 8004d14:	1ad2      	subs	r2, r2, r3
 8004d16:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <backwards+0xe4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d1c:	89fa      	ldrh	r2, [r7, #14]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	4a1b      	ldr	r2, [pc, #108]	; (8004d94 <backwards+0xe0>)
 8004d26:	fb82 1203 	smull	r1, r2, r2, r3
 8004d2a:	1092      	asrs	r2, r2, #2
 8004d2c:	17db      	asrs	r3, r3, #31
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <backwards+0xe4>)
 8004d34:	60da      	str	r2, [r3, #12]
	}
	status = straight;
 8004d36:	4b19      	ldr	r3, [pc, #100]	; (8004d9c <backwards+0xe8>)
 8004d38:	22fa      	movs	r2, #250	; 0xfa
 8004d3a:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, 0);
 8004d3c:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <backwards+0xec>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2200      	movs	r2, #0
 8004d42:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, speed_levels[current_speed][0]);
 8004d44:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <backwards+0xf0>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	4b16      	ldr	r3, [pc, #88]	; (8004da8 <backwards+0xf4>)
 8004d4e:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 8004d52:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <backwards+0xec>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor1, 0);
 8004d58:	4b11      	ldr	r3, [pc, #68]	; (8004da0 <backwards+0xec>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor2, speed_levels[current_speed][1]);
 8004d60:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <backwards+0xf0>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	4a10      	ldr	r2, [pc, #64]	; (8004da8 <backwards+0xf4>)
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	885a      	ldrh	r2, [r3, #2]
 8004d6e:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <backwards+0xec>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38
	PID();
 8004d74:	f000 f836 	bl	8004de4 <PID>
	if(brakee){
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <backwards+0xce>
		brake();
 8004d7e:	f000 f815 	bl	8004dac <brake>
	}
}
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	3ecbb7e4 	.word	0x3ecbb7e4
 8004d90:	200001cc 	.word	0x200001cc
 8004d94:	66666667 	.word	0x66666667
 8004d98:	2000025c 	.word	0x2000025c
 8004d9c:	20000376 	.word	0x20000376
 8004da0:	20000214 	.word	0x20000214
 8004da4:	20000374 	.word	0x20000374
 8004da8:	080079ec 	.word	0x080079ec

08004dac <brake>:

void brake(){
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, htim2.Init.Period);
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <brake+0x34>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a0a      	ldr	r2, [pc, #40]	; (8004de0 <brake+0x34>)
 8004db6:	68d2      	ldr	r2, [r2, #12]
 8004db8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, htim2.Init.Period);
 8004dba:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <brake+0x34>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <brake+0x34>)
 8004dc0:	68d2      	ldr	r2, [r2, #12]
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor1, htim2.Init.Period);
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <brake+0x34>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a05      	ldr	r2, [pc, #20]	; (8004de0 <brake+0x34>)
 8004dca:	68d2      	ldr	r2, [r2, #12]
 8004dcc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, R_Motor2, htim2.Init.Period);
 8004dce:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <brake+0x34>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a03      	ldr	r2, [pc, #12]	; (8004de0 <brake+0x34>)
 8004dd4:	68d2      	ldr	r2, [r2, #12]
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr
 8004de0:	20000214 	.word	0x20000214

08004de4 <PID>:

void PID(){
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
	int16_t Err, pErr = 0, P, D, total;
 8004dea:	2300      	movs	r3, #0
 8004dec:	81bb      	strh	r3, [r7, #12]
	while(status != 0){
 8004dee:	e075      	b.n	8004edc <PID+0xf8>
		if(left_sensor45 > leftWallValue && right_sensor45 > rightWallValue){
 8004df0:	4b40      	ldr	r3, [pc, #256]	; (8004ef4 <PID+0x110>)
 8004df2:	889b      	ldrh	r3, [r3, #4]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b64      	cmp	r3, #100	; 0x64
 8004df8:	d910      	bls.n	8004e1c <PID+0x38>
 8004dfa:	4b3e      	ldr	r3, [pc, #248]	; (8004ef4 <PID+0x110>)
 8004dfc:	885b      	ldrh	r3, [r3, #2]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b64      	cmp	r3, #100	; 0x64
 8004e02:	d90b      	bls.n	8004e1c <PID+0x38>
			Err = left_sensor45 - right_sensor45 - 10;
 8004e04:	4b3b      	ldr	r3, [pc, #236]	; (8004ef4 <PID+0x110>)
 8004e06:	889b      	ldrh	r3, [r3, #4]
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	4b3a      	ldr	r3, [pc, #232]	; (8004ef4 <PID+0x110>)
 8004e0c:	885b      	ldrh	r3, [r3, #2]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b0a      	subs	r3, #10
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	81fb      	strh	r3, [r7, #14]
 8004e1a:	e023      	b.n	8004e64 <PID+0x80>
		} else if(left_sensor45 > leftWallValue){
 8004e1c:	4b35      	ldr	r3, [pc, #212]	; (8004ef4 <PID+0x110>)
 8004e1e:	889b      	ldrh	r3, [r3, #4]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b64      	cmp	r3, #100	; 0x64
 8004e24:	d906      	bls.n	8004e34 <PID+0x50>
			Err = left_sensor45 - leftWallValue;
 8004e26:	4b33      	ldr	r3, [pc, #204]	; (8004ef4 <PID+0x110>)
 8004e28:	889b      	ldrh	r3, [r3, #4]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b64      	subs	r3, #100	; 0x64
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	81fb      	strh	r3, [r7, #14]
 8004e32:	e017      	b.n	8004e64 <PID+0x80>
		} else if(right_sensor45 > rightWallValue){
 8004e34:	4b2f      	ldr	r3, [pc, #188]	; (8004ef4 <PID+0x110>)
 8004e36:	885b      	ldrh	r3, [r3, #2]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b64      	cmp	r3, #100	; 0x64
 8004e3c:	d907      	bls.n	8004e4e <PID+0x6a>
			Err = rightWallValue - right_sensor45;
 8004e3e:	4b2d      	ldr	r3, [pc, #180]	; (8004ef4 <PID+0x110>)
 8004e40:	885b      	ldrh	r3, [r3, #2]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	81fb      	strh	r3, [r7, #14]
 8004e4c:	e00a      	b.n	8004e64 <PID+0x80>
		} else {
			Err = TIM3->CNT - TIM1->CNT;
 8004e4e:	4b2a      	ldr	r3, [pc, #168]	; (8004ef8 <PID+0x114>)
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	4b29      	ldr	r3, [pc, #164]	; (8004efc <PID+0x118>)
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	81fb      	strh	r3, [r7, #14]
			pErr = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	81bb      	strh	r3, [r7, #12]
		}
		P = kp * Err;
 8004e64:	2203      	movs	r2, #3
 8004e66:	89fb      	ldrh	r3, [r7, #14]
 8004e68:	fb02 f303 	mul.w	r3, r2, r3
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	817b      	strh	r3, [r7, #10]
		D = kd * (Err - pErr);
 8004e70:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004e74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	fb02 f303 	mul.w	r3, r2, r3
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	813b      	strh	r3, [r7, #8]
		pErr = Err;
 8004e86:	89fb      	ldrh	r3, [r7, #14]
 8004e88:	81bb      	strh	r3, [r7, #12]
		total = P + D;
 8004e8a:	897a      	ldrh	r2, [r7, #10]
 8004e8c:	893b      	ldrh	r3, [r7, #8]
 8004e8e:	4413      	add	r3, r2
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8004e94:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <PID+0x11c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8004e9c:	4b18      	ldr	r3, [pc, #96]	; (8004f00 <PID+0x11c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed_levels[current_speed][0] + total);
 8004ea4:	4b17      	ldr	r3, [pc, #92]	; (8004f04 <PID+0x120>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	4b16      	ldr	r3, [pc, #88]	; (8004f08 <PID+0x124>)
 8004eae:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eb8:	441a      	add	r2, r3
 8004eba:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <PID+0x11c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, speed_levels[current_speed][1] - total);
 8004ec0:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <PID+0x120>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	4a10      	ldr	r2, [pc, #64]	; (8004f08 <PID+0x124>)
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	885b      	ldrh	r3, [r3, #2]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ed4:	1ad2      	subs	r2, r2, r3
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <PID+0x11c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40
	while(status != 0){
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <PID+0x128>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	b25b      	sxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d184      	bne.n	8004df0 <PID+0xc>
	}
}
 8004ee6:	bf00      	nop
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	2000036c 	.word	0x2000036c
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40012c00 	.word	0x40012c00
 8004f00:	20000214 	.word	0x20000214
 8004f04:	20000374 	.word	0x20000374
 8004f08:	080079ec 	.word	0x080079ec
 8004f0c:	20000376 	.word	0x20000376

08004f10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004f10:	f7ff fa5a 	bl	80043c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f14:	480b      	ldr	r0, [pc, #44]	; (8004f44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004f16:	490c      	ldr	r1, [pc, #48]	; (8004f48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004f18:	4a0c      	ldr	r2, [pc, #48]	; (8004f4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8004f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f1c:	e002      	b.n	8004f24 <LoopCopyDataInit>

08004f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f22:	3304      	adds	r3, #4

08004f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f28:	d3f9      	bcc.n	8004f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f2a:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004f2c:	4c09      	ldr	r4, [pc, #36]	; (8004f54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f30:	e001      	b.n	8004f36 <LoopFillZerobss>

08004f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f34:	3204      	adds	r2, #4

08004f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f38:	d3fb      	bcc.n	8004f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004f3a:	f002 fcd3 	bl	80078e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004f3e:	f7fd ff77 	bl	8002e30 <main>
  bx lr
 8004f42:	4770      	bx	lr
  ldr r0, =_sdata
 8004f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004f4c:	08007a2c 	.word	0x08007a2c
  ldr r2, =_sbss
 8004f50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004f54:	20000c18 	.word	0x20000c18

08004f58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f58:	e7fe      	b.n	8004f58 <ADC1_2_IRQHandler>
	...

08004f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f60:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <HAL_Init+0x28>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <HAL_Init+0x28>)
 8004f66:	f043 0310 	orr.w	r3, r3, #16
 8004f6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f6c:	2003      	movs	r0, #3
 8004f6e:	f000 fd13 	bl	8005998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f72:	200f      	movs	r0, #15
 8004f74:	f000 f808 	bl	8004f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f78:	f7fe ffba 	bl	8003ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40022000 	.word	0x40022000

08004f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f90:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <HAL_InitTick+0x54>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <HAL_InitTick+0x58>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fd2b 	bl	8005a02 <HAL_SYSTICK_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e00e      	b.n	8004fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b0f      	cmp	r3, #15
 8004fba:	d80a      	bhi.n	8004fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc4:	f000 fcf3 	bl	80059ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fc8:	4a06      	ldr	r2, [pc, #24]	; (8004fe4 <HAL_InitTick+0x5c>)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e000      	b.n	8004fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	20000000 	.word	0x20000000
 8004fe0:	20000008 	.word	0x20000008
 8004fe4:	20000004 	.word	0x20000004

08004fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_IncTick+0x1c>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4b05      	ldr	r3, [pc, #20]	; (8005008 <HAL_IncTick+0x20>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	4a03      	ldr	r2, [pc, #12]	; (8005008 <HAL_IncTick+0x20>)
 8004ffa:	6013      	str	r3, [r2, #0]
}
 8004ffc:	bf00      	nop
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr
 8005004:	20000008 	.word	0x20000008
 8005008:	20000c14 	.word	0x20000c14

0800500c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  return uwTick;
 8005010:	4b02      	ldr	r3, [pc, #8]	; (800501c <HAL_GetTick+0x10>)
 8005012:	681b      	ldr	r3, [r3, #0]
}
 8005014:	4618      	mov	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr
 800501c:	20000c14 	.word	0x20000c14

08005020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005028:	f7ff fff0 	bl	800500c <HAL_GetTick>
 800502c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d005      	beq.n	8005046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <HAL_Delay+0x44>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005046:	bf00      	nop
 8005048:	f7ff ffe0 	bl	800500c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	429a      	cmp	r2, r3
 8005056:	d8f7      	bhi.n	8005048 <HAL_Delay+0x28>
  {
  }
}
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000008 	.word	0x20000008

08005068 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e0be      	b.n	8005208 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005094:	2b00      	cmp	r3, #0
 8005096:	d109      	bne.n	80050ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fe ff54 	bl	8003f54 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 faff 	bl	80056b0 <ADC_ConversionStop_Disable>
 80050b2:	4603      	mov	r3, r0
 80050b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f040 8099 	bne.w	80051f6 <HAL_ADC_Init+0x18e>
 80050c4:	7dfb      	ldrb	r3, [r7, #23]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f040 8095 	bne.w	80051f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80050d4:	f023 0302 	bic.w	r3, r3, #2
 80050d8:	f043 0202 	orr.w	r2, r3, #2
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80050e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	7b1b      	ldrb	r3, [r3, #12]
 80050ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80050f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005100:	d003      	beq.n	800510a <HAL_ADC_Init+0xa2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d102      	bne.n	8005110 <HAL_ADC_Init+0xa8>
 800510a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800510e:	e000      	b.n	8005112 <HAL_ADC_Init+0xaa>
 8005110:	2300      	movs	r3, #0
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	7d1b      	ldrb	r3, [r3, #20]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d119      	bne.n	8005154 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7b1b      	ldrb	r3, [r3, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d109      	bne.n	800513c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	3b01      	subs	r3, #1
 800512e:	035a      	lsls	r2, r3, #13
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	e00b      	b.n	8005154 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	f043 0201 	orr.w	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	430a      	orrs	r2, r1
 8005166:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	4b28      	ldr	r3, [pc, #160]	; (8005210 <HAL_ADC_Init+0x1a8>)
 8005170:	4013      	ands	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	430b      	orrs	r3, r1
 800517a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005184:	d003      	beq.n	800518e <HAL_ADC_Init+0x126>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d104      	bne.n	8005198 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	3b01      	subs	r3, #1
 8005194:	051b      	lsls	r3, r3, #20
 8005196:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	4b18      	ldr	r3, [pc, #96]	; (8005214 <HAL_ADC_Init+0x1ac>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d10b      	bne.n	80051d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	f023 0303 	bic.w	r3, r3, #3
 80051ca:	f043 0201 	orr.w	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80051d2:	e018      	b.n	8005206 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	f023 0312 	bic.w	r3, r3, #18
 80051dc:	f043 0210 	orr.w	r2, r3, #16
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	f043 0201 	orr.w	r2, r3, #1
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80051f4:	e007      	b.n	8005206 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	f043 0210 	orr.w	r2, r3, #16
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005206:	7dfb      	ldrb	r3, [r7, #23]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	ffe1f7fd 	.word	0xffe1f7fd
 8005214:	ff1f0efe 	.word	0xff1f0efe

08005218 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a64      	ldr	r2, [pc, #400]	; (80053c0 <HAL_ADC_Start_DMA+0x1a8>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_ADC_Start_DMA+0x24>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a63      	ldr	r2, [pc, #396]	; (80053c4 <HAL_ADC_Start_DMA+0x1ac>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d106      	bne.n	800524a <HAL_ADC_Start_DMA+0x32>
 800523c:	4b60      	ldr	r3, [pc, #384]	; (80053c0 <HAL_ADC_Start_DMA+0x1a8>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005244:	2b00      	cmp	r3, #0
 8005246:	f040 80b3 	bne.w	80053b0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_ADC_Start_DMA+0x40>
 8005254:	2302      	movs	r3, #2
 8005256:	e0ae      	b.n	80053b6 <HAL_ADC_Start_DMA+0x19e>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f9cb 	bl	80055fc <ADC_Enable>
 8005266:	4603      	mov	r3, r0
 8005268:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800526a:	7dfb      	ldrb	r3, [r7, #23]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f040 809a 	bne.w	80053a6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a4e      	ldr	r2, [pc, #312]	; (80053c4 <HAL_ADC_Start_DMA+0x1ac>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d105      	bne.n	800529c <HAL_ADC_Start_DMA+0x84>
 8005290:	4b4b      	ldr	r3, [pc, #300]	; (80053c0 <HAL_ADC_Start_DMA+0x1a8>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d115      	bne.n	80052c8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d026      	beq.n	8005304 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80052c6:	e01d      	b.n	8005304 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a39      	ldr	r2, [pc, #228]	; (80053c0 <HAL_ADC_Start_DMA+0x1a8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <HAL_ADC_Start_DMA+0xd0>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a38      	ldr	r2, [pc, #224]	; (80053c4 <HAL_ADC_Start_DMA+0x1ac>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d10d      	bne.n	8005304 <HAL_ADC_Start_DMA+0xec>
 80052e8:	4b35      	ldr	r3, [pc, #212]	; (80053c0 <HAL_ADC_Start_DMA+0x1a8>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d006      	beq.n	800531e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	f023 0206 	bic.w	r2, r3, #6
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	62da      	str	r2, [r3, #44]	; 0x2c
 800531c:	e002      	b.n	8005324 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	4a25      	ldr	r2, [pc, #148]	; (80053c8 <HAL_ADC_Start_DMA+0x1b0>)
 8005332:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	4a24      	ldr	r2, [pc, #144]	; (80053cc <HAL_ADC_Start_DMA+0x1b4>)
 800533a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	4a23      	ldr	r2, [pc, #140]	; (80053d0 <HAL_ADC_Start_DMA+0x1b8>)
 8005342:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0202 	mvn.w	r2, #2
 800534c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800535c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a18      	ldr	r0, [r3, #32]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	334c      	adds	r3, #76	; 0x4c
 8005368:	4619      	mov	r1, r3
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f000 fbaf 	bl	8005ad0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800537c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005380:	d108      	bne.n	8005394 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005390:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005392:	e00f      	b.n	80053b4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80053a2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80053a4:	e006      	b.n	80053b4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80053ae:	e001      	b.n	80053b4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	40012400 	.word	0x40012400
 80053c4:	40012800 	.word	0x40012800
 80053c8:	08005733 	.word	0x08005733
 80053cc:	080057af 	.word	0x080057af
 80053d0:	080057cb 	.word	0x080057cb

080053d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr
	...

0800540c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800541a:	2300      	movs	r3, #0
 800541c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_ADC_ConfigChannel+0x20>
 8005428:	2302      	movs	r3, #2
 800542a:	e0dc      	b.n	80055e6 <HAL_ADC_ConfigChannel+0x1da>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b06      	cmp	r3, #6
 800543a:	d81c      	bhi.n	8005476 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	3b05      	subs	r3, #5
 800544e:	221f      	movs	r2, #31
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	43db      	mvns	r3, r3
 8005456:	4019      	ands	r1, r3
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	3b05      	subs	r3, #5
 8005468:	fa00 f203 	lsl.w	r2, r0, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	635a      	str	r2, [r3, #52]	; 0x34
 8005474:	e03c      	b.n	80054f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b0c      	cmp	r3, #12
 800547c:	d81c      	bhi.n	80054b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	3b23      	subs	r3, #35	; 0x23
 8005490:	221f      	movs	r2, #31
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	43db      	mvns	r3, r3
 8005498:	4019      	ands	r1, r3
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	3b23      	subs	r3, #35	; 0x23
 80054aa:	fa00 f203 	lsl.w	r2, r0, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30
 80054b6:	e01b      	b.n	80054f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	3b41      	subs	r3, #65	; 0x41
 80054ca:	221f      	movs	r2, #31
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	43db      	mvns	r3, r3
 80054d2:	4019      	ands	r1, r3
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	4613      	mov	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	3b41      	subs	r3, #65	; 0x41
 80054e4:	fa00 f203 	lsl.w	r2, r0, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b09      	cmp	r3, #9
 80054f6:	d91c      	bls.n	8005532 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68d9      	ldr	r1, [r3, #12]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4613      	mov	r3, r2
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4413      	add	r3, r2
 8005508:	3b1e      	subs	r3, #30
 800550a:	2207      	movs	r2, #7
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	43db      	mvns	r3, r3
 8005512:	4019      	ands	r1, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	6898      	ldr	r0, [r3, #8]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	4613      	mov	r3, r2
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	4413      	add	r3, r2
 8005522:	3b1e      	subs	r3, #30
 8005524:	fa00 f203 	lsl.w	r2, r0, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	60da      	str	r2, [r3, #12]
 8005530:	e019      	b.n	8005566 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6919      	ldr	r1, [r3, #16]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	4613      	mov	r3, r2
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	4413      	add	r3, r2
 8005542:	2207      	movs	r2, #7
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	43db      	mvns	r3, r3
 800554a:	4019      	ands	r1, r3
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	6898      	ldr	r0, [r3, #8]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	4613      	mov	r3, r2
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	4413      	add	r3, r2
 800555a:	fa00 f203 	lsl.w	r2, r0, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b10      	cmp	r3, #16
 800556c:	d003      	beq.n	8005576 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005572:	2b11      	cmp	r3, #17
 8005574:	d132      	bne.n	80055dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1d      	ldr	r2, [pc, #116]	; (80055f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d125      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d126      	bne.n	80055dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800559c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d11a      	bne.n	80055dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80055a6:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a13      	ldr	r2, [pc, #76]	; (80055f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	0c9a      	lsrs	r2, r3, #18
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80055bc:	e002      	b.n	80055c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f9      	bne.n	80055be <HAL_ADC_ConfigChannel+0x1b2>
 80055ca:	e007      	b.n	80055dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	f043 0220 	orr.w	r2, r3, #32
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr
 80055f0:	40012400 	.word	0x40012400
 80055f4:	20000000 	.word	0x20000000
 80055f8:	431bde83 	.word	0x431bde83

080055fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b01      	cmp	r3, #1
 8005618:	d040      	beq.n	800569c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0201 	orr.w	r2, r2, #1
 8005628:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800562a:	4b1f      	ldr	r3, [pc, #124]	; (80056a8 <ADC_Enable+0xac>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1f      	ldr	r2, [pc, #124]	; (80056ac <ADC_Enable+0xb0>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	0c9b      	lsrs	r3, r3, #18
 8005636:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005638:	e002      	b.n	8005640 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	3b01      	subs	r3, #1
 800563e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f9      	bne.n	800563a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005646:	f7ff fce1 	bl	800500c <HAL_GetTick>
 800564a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800564c:	e01f      	b.n	800568e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800564e:	f7ff fcdd 	bl	800500c <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d918      	bls.n	800568e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b01      	cmp	r3, #1
 8005668:	d011      	beq.n	800568e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	f043 0210 	orr.w	r2, r3, #16
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	f043 0201 	orr.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e007      	b.n	800569e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	d1d8      	bne.n	800564e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000000 	.word	0x20000000
 80056ac:	431bde83 	.word	0x431bde83

080056b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d12e      	bne.n	8005728 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0201 	bic.w	r2, r2, #1
 80056d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80056da:	f7ff fc97 	bl	800500c <HAL_GetTick>
 80056de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80056e0:	e01b      	b.n	800571a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80056e2:	f7ff fc93 	bl	800500c <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d914      	bls.n	800571a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d10d      	bne.n	800571a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	f043 0210 	orr.w	r2, r3, #16
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	f043 0201 	orr.w	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e007      	b.n	800572a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	d0dc      	beq.n	80056e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005748:	2b00      	cmp	r3, #0
 800574a:	d127      	bne.n	800579c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005750:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005762:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005766:	d115      	bne.n	8005794 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800576c:	2b00      	cmp	r3, #0
 800576e:	d111      	bne.n	8005794 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d105      	bne.n	8005794 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	f043 0201 	orr.w	r2, r3, #1
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7ff fe1d 	bl	80053d4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800579a:	e004      	b.n	80057a6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	4798      	blx	r3
}
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b084      	sub	sp, #16
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f7ff fe12 	bl	80053e6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057c2:	bf00      	nop
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	f043 0204 	orr.w	r2, r3, #4
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7ff fe01 	bl	80053f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005810:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <__NVIC_SetPriorityGrouping+0x44>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800581c:	4013      	ands	r3, r2
 800581e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800582c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005832:	4a04      	ldr	r2, [pc, #16]	; (8005844 <__NVIC_SetPriorityGrouping+0x44>)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	60d3      	str	r3, [r2, #12]
}
 8005838:	bf00      	nop
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	e000ed00 	.word	0xe000ed00

08005848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <__NVIC_GetPriorityGrouping+0x18>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	0a1b      	lsrs	r3, r3, #8
 8005852:	f003 0307 	and.w	r3, r3, #7
}
 8005856:	4618      	mov	r0, r3
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	e000ed00 	.word	0xe000ed00

08005864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800586e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005872:	2b00      	cmp	r3, #0
 8005874:	db0b      	blt.n	800588e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	f003 021f 	and.w	r2, r3, #31
 800587c:	4906      	ldr	r1, [pc, #24]	; (8005898 <__NVIC_EnableIRQ+0x34>)
 800587e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	2001      	movs	r0, #1
 8005886:	fa00 f202 	lsl.w	r2, r0, r2
 800588a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr
 8005898:	e000e100 	.word	0xe000e100

0800589c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	4603      	mov	r3, r0
 80058a4:	6039      	str	r1, [r7, #0]
 80058a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	db0a      	blt.n	80058c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	490c      	ldr	r1, [pc, #48]	; (80058e8 <__NVIC_SetPriority+0x4c>)
 80058b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ba:	0112      	lsls	r2, r2, #4
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	440b      	add	r3, r1
 80058c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058c4:	e00a      	b.n	80058dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	4908      	ldr	r1, [pc, #32]	; (80058ec <__NVIC_SetPriority+0x50>)
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	f003 030f 	and.w	r3, r3, #15
 80058d2:	3b04      	subs	r3, #4
 80058d4:	0112      	lsls	r2, r2, #4
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	440b      	add	r3, r1
 80058da:	761a      	strb	r2, [r3, #24]
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bc80      	pop	{r7}
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	e000e100 	.word	0xe000e100
 80058ec:	e000ed00 	.word	0xe000ed00

080058f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b089      	sub	sp, #36	; 0x24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f1c3 0307 	rsb	r3, r3, #7
 800590a:	2b04      	cmp	r3, #4
 800590c:	bf28      	it	cs
 800590e:	2304      	movcs	r3, #4
 8005910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	3304      	adds	r3, #4
 8005916:	2b06      	cmp	r3, #6
 8005918:	d902      	bls.n	8005920 <NVIC_EncodePriority+0x30>
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	3b03      	subs	r3, #3
 800591e:	e000      	b.n	8005922 <NVIC_EncodePriority+0x32>
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005924:	f04f 32ff 	mov.w	r2, #4294967295
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	43da      	mvns	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	401a      	ands	r2, r3
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005938:	f04f 31ff 	mov.w	r1, #4294967295
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	fa01 f303 	lsl.w	r3, r1, r3
 8005942:	43d9      	mvns	r1, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005948:	4313      	orrs	r3, r2
         );
}
 800594a:	4618      	mov	r0, r3
 800594c:	3724      	adds	r7, #36	; 0x24
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr

08005954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3b01      	subs	r3, #1
 8005960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005964:	d301      	bcc.n	800596a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005966:	2301      	movs	r3, #1
 8005968:	e00f      	b.n	800598a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800596a:	4a0a      	ldr	r2, [pc, #40]	; (8005994 <SysTick_Config+0x40>)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3b01      	subs	r3, #1
 8005970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005972:	210f      	movs	r1, #15
 8005974:	f04f 30ff 	mov.w	r0, #4294967295
 8005978:	f7ff ff90 	bl	800589c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <SysTick_Config+0x40>)
 800597e:	2200      	movs	r2, #0
 8005980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005982:	4b04      	ldr	r3, [pc, #16]	; (8005994 <SysTick_Config+0x40>)
 8005984:	2207      	movs	r2, #7
 8005986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	e000e010 	.word	0xe000e010

08005998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff ff2d 	bl	8005800 <__NVIC_SetPriorityGrouping>
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b086      	sub	sp, #24
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	4603      	mov	r3, r0
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
 80059ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059c0:	f7ff ff42 	bl	8005848 <__NVIC_GetPriorityGrouping>
 80059c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	6978      	ldr	r0, [r7, #20]
 80059cc:	f7ff ff90 	bl	80058f0 <NVIC_EncodePriority>
 80059d0:	4602      	mov	r2, r0
 80059d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059d6:	4611      	mov	r1, r2
 80059d8:	4618      	mov	r0, r3
 80059da:	f7ff ff5f 	bl	800589c <__NVIC_SetPriority>
}
 80059de:	bf00      	nop
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	4603      	mov	r3, r0
 80059ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff ff35 	bl	8005864 <__NVIC_EnableIRQ>
}
 80059fa:	bf00      	nop
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff ffa2 	bl	8005954 <SysTick_Config>
 8005a10:	4603      	mov	r3, r0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e043      	b.n	8005aba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	4b22      	ldr	r3, [pc, #136]	; (8005ac4 <HAL_DMA_Init+0xa8>)
 8005a3a:	4413      	add	r3, r2
 8005a3c:	4a22      	ldr	r2, [pc, #136]	; (8005ac8 <HAL_DMA_Init+0xac>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	091b      	lsrs	r3, r3, #4
 8005a44:	009a      	lsls	r2, r3, #2
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a1f      	ldr	r2, [pc, #124]	; (8005acc <HAL_DMA_Init+0xb0>)
 8005a4e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005a66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005a6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bc80      	pop	{r7}
 8005ac2:	4770      	bx	lr
 8005ac4:	bffdfff8 	.word	0xbffdfff8
 8005ac8:	cccccccd 	.word	0xcccccccd
 8005acc:	40020000 	.word	0x40020000

08005ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_DMA_Start_IT+0x20>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e04b      	b.n	8005b88 <HAL_DMA_Start_IT+0xb8>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d13a      	bne.n	8005b7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0201 	bic.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f831 	bl	8005b90 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d008      	beq.n	8005b48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 020e 	orr.w	r2, r2, #14
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	e00f      	b.n	8005b68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0204 	bic.w	r2, r2, #4
 8005b56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 020a 	orr.w	r2, r2, #10
 8005b66:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0201 	orr.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	e005      	b.n	8005b86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
 8005b84:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8005bac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b10      	cmp	r3, #16
 8005bbc:	d108      	bne.n	8005bd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005bce:	e007      	b.n	8005be0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	60da      	str	r2, [r3, #12]
}
 8005be0:	bf00      	nop
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr
	...

08005bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b08b      	sub	sp, #44	; 0x2c
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bfe:	e169      	b.n	8005ed4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005c00:	2201      	movs	r2, #1
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	4013      	ands	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	f040 8158 	bne.w	8005ece <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	4a9a      	ldr	r2, [pc, #616]	; (8005e8c <HAL_GPIO_Init+0x2a0>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d05e      	beq.n	8005ce6 <HAL_GPIO_Init+0xfa>
 8005c28:	4a98      	ldr	r2, [pc, #608]	; (8005e8c <HAL_GPIO_Init+0x2a0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d875      	bhi.n	8005d1a <HAL_GPIO_Init+0x12e>
 8005c2e:	4a98      	ldr	r2, [pc, #608]	; (8005e90 <HAL_GPIO_Init+0x2a4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d058      	beq.n	8005ce6 <HAL_GPIO_Init+0xfa>
 8005c34:	4a96      	ldr	r2, [pc, #600]	; (8005e90 <HAL_GPIO_Init+0x2a4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d86f      	bhi.n	8005d1a <HAL_GPIO_Init+0x12e>
 8005c3a:	4a96      	ldr	r2, [pc, #600]	; (8005e94 <HAL_GPIO_Init+0x2a8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d052      	beq.n	8005ce6 <HAL_GPIO_Init+0xfa>
 8005c40:	4a94      	ldr	r2, [pc, #592]	; (8005e94 <HAL_GPIO_Init+0x2a8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d869      	bhi.n	8005d1a <HAL_GPIO_Init+0x12e>
 8005c46:	4a94      	ldr	r2, [pc, #592]	; (8005e98 <HAL_GPIO_Init+0x2ac>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d04c      	beq.n	8005ce6 <HAL_GPIO_Init+0xfa>
 8005c4c:	4a92      	ldr	r2, [pc, #584]	; (8005e98 <HAL_GPIO_Init+0x2ac>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d863      	bhi.n	8005d1a <HAL_GPIO_Init+0x12e>
 8005c52:	4a92      	ldr	r2, [pc, #584]	; (8005e9c <HAL_GPIO_Init+0x2b0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d046      	beq.n	8005ce6 <HAL_GPIO_Init+0xfa>
 8005c58:	4a90      	ldr	r2, [pc, #576]	; (8005e9c <HAL_GPIO_Init+0x2b0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d85d      	bhi.n	8005d1a <HAL_GPIO_Init+0x12e>
 8005c5e:	2b12      	cmp	r3, #18
 8005c60:	d82a      	bhi.n	8005cb8 <HAL_GPIO_Init+0xcc>
 8005c62:	2b12      	cmp	r3, #18
 8005c64:	d859      	bhi.n	8005d1a <HAL_GPIO_Init+0x12e>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <HAL_GPIO_Init+0x80>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005ce7 	.word	0x08005ce7
 8005c70:	08005cc1 	.word	0x08005cc1
 8005c74:	08005cd3 	.word	0x08005cd3
 8005c78:	08005d15 	.word	0x08005d15
 8005c7c:	08005d1b 	.word	0x08005d1b
 8005c80:	08005d1b 	.word	0x08005d1b
 8005c84:	08005d1b 	.word	0x08005d1b
 8005c88:	08005d1b 	.word	0x08005d1b
 8005c8c:	08005d1b 	.word	0x08005d1b
 8005c90:	08005d1b 	.word	0x08005d1b
 8005c94:	08005d1b 	.word	0x08005d1b
 8005c98:	08005d1b 	.word	0x08005d1b
 8005c9c:	08005d1b 	.word	0x08005d1b
 8005ca0:	08005d1b 	.word	0x08005d1b
 8005ca4:	08005d1b 	.word	0x08005d1b
 8005ca8:	08005d1b 	.word	0x08005d1b
 8005cac:	08005d1b 	.word	0x08005d1b
 8005cb0:	08005cc9 	.word	0x08005cc9
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	4a79      	ldr	r2, [pc, #484]	; (8005ea0 <HAL_GPIO_Init+0x2b4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d013      	beq.n	8005ce6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005cbe:	e02c      	b.n	8005d1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	623b      	str	r3, [r7, #32]
          break;
 8005cc6:	e029      	b.n	8005d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	623b      	str	r3, [r7, #32]
          break;
 8005cd0:	e024      	b.n	8005d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	623b      	str	r3, [r7, #32]
          break;
 8005cda:	e01f      	b.n	8005d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	623b      	str	r3, [r7, #32]
          break;
 8005ce4:	e01a      	b.n	8005d1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d102      	bne.n	8005cf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005cee:	2304      	movs	r3, #4
 8005cf0:	623b      	str	r3, [r7, #32]
          break;
 8005cf2:	e013      	b.n	8005d1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d105      	bne.n	8005d08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005cfc:	2308      	movs	r3, #8
 8005cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	611a      	str	r2, [r3, #16]
          break;
 8005d06:	e009      	b.n	8005d1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005d08:	2308      	movs	r3, #8
 8005d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	615a      	str	r2, [r3, #20]
          break;
 8005d12:	e003      	b.n	8005d1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005d14:	2300      	movs	r3, #0
 8005d16:	623b      	str	r3, [r7, #32]
          break;
 8005d18:	e000      	b.n	8005d1c <HAL_GPIO_Init+0x130>
          break;
 8005d1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	2bff      	cmp	r3, #255	; 0xff
 8005d20:	d801      	bhi.n	8005d26 <HAL_GPIO_Init+0x13a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	e001      	b.n	8005d2a <HAL_GPIO_Init+0x13e>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	2bff      	cmp	r3, #255	; 0xff
 8005d30:	d802      	bhi.n	8005d38 <HAL_GPIO_Init+0x14c>
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	e002      	b.n	8005d3e <HAL_GPIO_Init+0x152>
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	3b08      	subs	r3, #8
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	210f      	movs	r1, #15
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	401a      	ands	r2, r3
 8005d50:	6a39      	ldr	r1, [r7, #32]
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	fa01 f303 	lsl.w	r3, r1, r3
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 80b1 	beq.w	8005ece <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005d6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ea4 <HAL_GPIO_Init+0x2b8>)
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	4a4c      	ldr	r2, [pc, #304]	; (8005ea4 <HAL_GPIO_Init+0x2b8>)
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	6193      	str	r3, [r2, #24]
 8005d78:	4b4a      	ldr	r3, [pc, #296]	; (8005ea4 <HAL_GPIO_Init+0x2b8>)
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	60bb      	str	r3, [r7, #8]
 8005d82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005d84:	4a48      	ldr	r2, [pc, #288]	; (8005ea8 <HAL_GPIO_Init+0x2bc>)
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	089b      	lsrs	r3, r3, #2
 8005d8a:	3302      	adds	r3, #2
 8005d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	220f      	movs	r2, #15
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	43db      	mvns	r3, r3
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4013      	ands	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a40      	ldr	r2, [pc, #256]	; (8005eac <HAL_GPIO_Init+0x2c0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d013      	beq.n	8005dd8 <HAL_GPIO_Init+0x1ec>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a3f      	ldr	r2, [pc, #252]	; (8005eb0 <HAL_GPIO_Init+0x2c4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00d      	beq.n	8005dd4 <HAL_GPIO_Init+0x1e8>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a3e      	ldr	r2, [pc, #248]	; (8005eb4 <HAL_GPIO_Init+0x2c8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d007      	beq.n	8005dd0 <HAL_GPIO_Init+0x1e4>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a3d      	ldr	r2, [pc, #244]	; (8005eb8 <HAL_GPIO_Init+0x2cc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d101      	bne.n	8005dcc <HAL_GPIO_Init+0x1e0>
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e006      	b.n	8005dda <HAL_GPIO_Init+0x1ee>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	e004      	b.n	8005dda <HAL_GPIO_Init+0x1ee>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e002      	b.n	8005dda <HAL_GPIO_Init+0x1ee>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <HAL_GPIO_Init+0x1ee>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ddc:	f002 0203 	and.w	r2, r2, #3
 8005de0:	0092      	lsls	r2, r2, #2
 8005de2:	4093      	lsls	r3, r2
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005dea:	492f      	ldr	r1, [pc, #188]	; (8005ea8 <HAL_GPIO_Init+0x2bc>)
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	089b      	lsrs	r3, r3, #2
 8005df0:	3302      	adds	r3, #2
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d006      	beq.n	8005e12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005e04:	4b2d      	ldr	r3, [pc, #180]	; (8005ebc <HAL_GPIO_Init+0x2d0>)
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	492c      	ldr	r1, [pc, #176]	; (8005ebc <HAL_GPIO_Init+0x2d0>)
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	608b      	str	r3, [r1, #8]
 8005e10:	e006      	b.n	8005e20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005e12:	4b2a      	ldr	r3, [pc, #168]	; (8005ebc <HAL_GPIO_Init+0x2d0>)
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	4928      	ldr	r1, [pc, #160]	; (8005ebc <HAL_GPIO_Init+0x2d0>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d006      	beq.n	8005e3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005e2c:	4b23      	ldr	r3, [pc, #140]	; (8005ebc <HAL_GPIO_Init+0x2d0>)
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	4922      	ldr	r1, [pc, #136]	; (8005ebc <HAL_GPIO_Init+0x2d0>)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60cb      	str	r3, [r1, #12]
 8005e38:	e006      	b.n	8005e48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005e3a:	4b20      	ldr	r3, [pc, #128]	; (8005ebc <HAL_GPIO_Init+0x2d0>)
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	43db      	mvns	r3, r3
 8005e42:	491e      	ldr	r1, [pc, #120]	; (8005ebc <HAL_GPIO_Init+0x2d0>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d006      	beq.n	8005e62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005e54:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <HAL_GPIO_Init+0x2d0>)
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	4918      	ldr	r1, [pc, #96]	; (8005ebc <HAL_GPIO_Init+0x2d0>)
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	604b      	str	r3, [r1, #4]
 8005e60:	e006      	b.n	8005e70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005e62:	4b16      	ldr	r3, [pc, #88]	; (8005ebc <HAL_GPIO_Init+0x2d0>)
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	4914      	ldr	r1, [pc, #80]	; (8005ebc <HAL_GPIO_Init+0x2d0>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d021      	beq.n	8005ec0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005e7c:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <HAL_GPIO_Init+0x2d0>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	490e      	ldr	r1, [pc, #56]	; (8005ebc <HAL_GPIO_Init+0x2d0>)
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	600b      	str	r3, [r1, #0]
 8005e88:	e021      	b.n	8005ece <HAL_GPIO_Init+0x2e2>
 8005e8a:	bf00      	nop
 8005e8c:	10320000 	.word	0x10320000
 8005e90:	10310000 	.word	0x10310000
 8005e94:	10220000 	.word	0x10220000
 8005e98:	10210000 	.word	0x10210000
 8005e9c:	10120000 	.word	0x10120000
 8005ea0:	10110000 	.word	0x10110000
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	40010000 	.word	0x40010000
 8005eac:	40010800 	.word	0x40010800
 8005eb0:	40010c00 	.word	0x40010c00
 8005eb4:	40011000 	.word	0x40011000
 8005eb8:	40011400 	.word	0x40011400
 8005ebc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005ec0:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <HAL_GPIO_Init+0x304>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	4909      	ldr	r1, [pc, #36]	; (8005ef0 <HAL_GPIO_Init+0x304>)
 8005eca:	4013      	ands	r3, r2
 8005ecc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	fa22 f303 	lsr.w	r3, r2, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f47f ae8e 	bne.w	8005c00 <HAL_GPIO_Init+0x14>
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop
 8005ee8:	372c      	adds	r7, #44	; 0x2c
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr
 8005ef0:	40010400 	.word	0x40010400

08005ef4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4603      	mov	r3, r0
 8005efc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005efe:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f00:	695a      	ldr	r2, [r3, #20]
 8005f02:	88fb      	ldrh	r3, [r7, #6]
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d006      	beq.n	8005f18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f0a:	4a05      	ldr	r2, [pc, #20]	; (8005f20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 f806 	bl	8005f24 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f18:	bf00      	nop
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	40010400 	.word	0x40010400

08005f24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr

08005f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e272      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 8087 	beq.w	8006066 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f58:	4b92      	ldr	r3, [pc, #584]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f003 030c 	and.w	r3, r3, #12
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d00c      	beq.n	8005f7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f64:	4b8f      	ldr	r3, [pc, #572]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f003 030c 	and.w	r3, r3, #12
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d112      	bne.n	8005f96 <HAL_RCC_OscConfig+0x5e>
 8005f70:	4b8c      	ldr	r3, [pc, #560]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f7c:	d10b      	bne.n	8005f96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f7e:	4b89      	ldr	r3, [pc, #548]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d06c      	beq.n	8006064 <HAL_RCC_OscConfig+0x12c>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d168      	bne.n	8006064 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e24c      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f9e:	d106      	bne.n	8005fae <HAL_RCC_OscConfig+0x76>
 8005fa0:	4b80      	ldr	r3, [pc, #512]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a7f      	ldr	r2, [pc, #508]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	e02e      	b.n	800600c <HAL_RCC_OscConfig+0xd4>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10c      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x98>
 8005fb6:	4b7b      	ldr	r3, [pc, #492]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a7a      	ldr	r2, [pc, #488]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc0:	6013      	str	r3, [r2, #0]
 8005fc2:	4b78      	ldr	r3, [pc, #480]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a77      	ldr	r2, [pc, #476]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	e01d      	b.n	800600c <HAL_RCC_OscConfig+0xd4>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fd8:	d10c      	bne.n	8005ff4 <HAL_RCC_OscConfig+0xbc>
 8005fda:	4b72      	ldr	r3, [pc, #456]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a71      	ldr	r2, [pc, #452]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	4b6f      	ldr	r3, [pc, #444]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a6e      	ldr	r2, [pc, #440]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	e00b      	b.n	800600c <HAL_RCC_OscConfig+0xd4>
 8005ff4:	4b6b      	ldr	r3, [pc, #428]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a6a      	ldr	r2, [pc, #424]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8005ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	4b68      	ldr	r3, [pc, #416]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a67      	ldr	r2, [pc, #412]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8006006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800600a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d013      	beq.n	800603c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006014:	f7fe fffa 	bl	800500c <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800601c:	f7fe fff6 	bl	800500c <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b64      	cmp	r3, #100	; 0x64
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e200      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800602e:	4b5d      	ldr	r3, [pc, #372]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0f0      	beq.n	800601c <HAL_RCC_OscConfig+0xe4>
 800603a:	e014      	b.n	8006066 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603c:	f7fe ffe6 	bl	800500c <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006044:	f7fe ffe2 	bl	800500c <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b64      	cmp	r3, #100	; 0x64
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e1ec      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006056:	4b53      	ldr	r3, [pc, #332]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f0      	bne.n	8006044 <HAL_RCC_OscConfig+0x10c>
 8006062:	e000      	b.n	8006066 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d063      	beq.n	800613a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006072:	4b4c      	ldr	r3, [pc, #304]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f003 030c 	and.w	r3, r3, #12
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800607e:	4b49      	ldr	r3, [pc, #292]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f003 030c 	and.w	r3, r3, #12
 8006086:	2b08      	cmp	r3, #8
 8006088:	d11c      	bne.n	80060c4 <HAL_RCC_OscConfig+0x18c>
 800608a:	4b46      	ldr	r3, [pc, #280]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d116      	bne.n	80060c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006096:	4b43      	ldr	r3, [pc, #268]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d005      	beq.n	80060ae <HAL_RCC_OscConfig+0x176>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d001      	beq.n	80060ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e1c0      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ae:	4b3d      	ldr	r3, [pc, #244]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	4939      	ldr	r1, [pc, #228]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060c2:	e03a      	b.n	800613a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d020      	beq.n	800610e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060cc:	4b36      	ldr	r3, [pc, #216]	; (80061a8 <HAL_RCC_OscConfig+0x270>)
 80060ce:	2201      	movs	r2, #1
 80060d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d2:	f7fe ff9b 	bl	800500c <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060da:	f7fe ff97 	bl	800500c <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e1a1      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ec:	4b2d      	ldr	r3, [pc, #180]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0f0      	beq.n	80060da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f8:	4b2a      	ldr	r3, [pc, #168]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	4927      	ldr	r1, [pc, #156]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8006108:	4313      	orrs	r3, r2
 800610a:	600b      	str	r3, [r1, #0]
 800610c:	e015      	b.n	800613a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800610e:	4b26      	ldr	r3, [pc, #152]	; (80061a8 <HAL_RCC_OscConfig+0x270>)
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006114:	f7fe ff7a 	bl	800500c <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800611a:	e008      	b.n	800612e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800611c:	f7fe ff76 	bl	800500c <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e180      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800612e:	4b1d      	ldr	r3, [pc, #116]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1f0      	bne.n	800611c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0308 	and.w	r3, r3, #8
 8006142:	2b00      	cmp	r3, #0
 8006144:	d03a      	beq.n	80061bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d019      	beq.n	8006182 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800614e:	4b17      	ldr	r3, [pc, #92]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8006150:	2201      	movs	r2, #1
 8006152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006154:	f7fe ff5a 	bl	800500c <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800615c:	f7fe ff56 	bl	800500c <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e160      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800616e:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <HAL_RCC_OscConfig+0x26c>)
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0f0      	beq.n	800615c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800617a:	2001      	movs	r0, #1
 800617c:	f000 fa9c 	bl	80066b8 <RCC_Delay>
 8006180:	e01c      	b.n	80061bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006182:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <HAL_RCC_OscConfig+0x274>)
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006188:	f7fe ff40 	bl	800500c <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800618e:	e00f      	b.n	80061b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006190:	f7fe ff3c 	bl	800500c <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d908      	bls.n	80061b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e146      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
 80061a2:	bf00      	nop
 80061a4:	40021000 	.word	0x40021000
 80061a8:	42420000 	.word	0x42420000
 80061ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061b0:	4b92      	ldr	r3, [pc, #584]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1e9      	bne.n	8006190 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80a6 	beq.w	8006316 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061ca:	2300      	movs	r3, #0
 80061cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ce:	4b8b      	ldr	r3, [pc, #556]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10d      	bne.n	80061f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061da:	4b88      	ldr	r3, [pc, #544]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	4a87      	ldr	r2, [pc, #540]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 80061e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061e4:	61d3      	str	r3, [r2, #28]
 80061e6:	4b85      	ldr	r3, [pc, #532]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ee:	60bb      	str	r3, [r7, #8]
 80061f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061f2:	2301      	movs	r3, #1
 80061f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f6:	4b82      	ldr	r3, [pc, #520]	; (8006400 <HAL_RCC_OscConfig+0x4c8>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d118      	bne.n	8006234 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006202:	4b7f      	ldr	r3, [pc, #508]	; (8006400 <HAL_RCC_OscConfig+0x4c8>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a7e      	ldr	r2, [pc, #504]	; (8006400 <HAL_RCC_OscConfig+0x4c8>)
 8006208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800620c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800620e:	f7fe fefd 	bl	800500c <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006214:	e008      	b.n	8006228 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006216:	f7fe fef9 	bl	800500c <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b64      	cmp	r3, #100	; 0x64
 8006222:	d901      	bls.n	8006228 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e103      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006228:	4b75      	ldr	r3, [pc, #468]	; (8006400 <HAL_RCC_OscConfig+0x4c8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0f0      	beq.n	8006216 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d106      	bne.n	800624a <HAL_RCC_OscConfig+0x312>
 800623c:	4b6f      	ldr	r3, [pc, #444]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	4a6e      	ldr	r2, [pc, #440]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006242:	f043 0301 	orr.w	r3, r3, #1
 8006246:	6213      	str	r3, [r2, #32]
 8006248:	e02d      	b.n	80062a6 <HAL_RCC_OscConfig+0x36e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10c      	bne.n	800626c <HAL_RCC_OscConfig+0x334>
 8006252:	4b6a      	ldr	r3, [pc, #424]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	4a69      	ldr	r2, [pc, #420]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006258:	f023 0301 	bic.w	r3, r3, #1
 800625c:	6213      	str	r3, [r2, #32]
 800625e:	4b67      	ldr	r3, [pc, #412]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	4a66      	ldr	r2, [pc, #408]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006264:	f023 0304 	bic.w	r3, r3, #4
 8006268:	6213      	str	r3, [r2, #32]
 800626a:	e01c      	b.n	80062a6 <HAL_RCC_OscConfig+0x36e>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	2b05      	cmp	r3, #5
 8006272:	d10c      	bne.n	800628e <HAL_RCC_OscConfig+0x356>
 8006274:	4b61      	ldr	r3, [pc, #388]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	4a60      	ldr	r2, [pc, #384]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 800627a:	f043 0304 	orr.w	r3, r3, #4
 800627e:	6213      	str	r3, [r2, #32]
 8006280:	4b5e      	ldr	r3, [pc, #376]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	4a5d      	ldr	r2, [pc, #372]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006286:	f043 0301 	orr.w	r3, r3, #1
 800628a:	6213      	str	r3, [r2, #32]
 800628c:	e00b      	b.n	80062a6 <HAL_RCC_OscConfig+0x36e>
 800628e:	4b5b      	ldr	r3, [pc, #364]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	4a5a      	ldr	r2, [pc, #360]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006294:	f023 0301 	bic.w	r3, r3, #1
 8006298:	6213      	str	r3, [r2, #32]
 800629a:	4b58      	ldr	r3, [pc, #352]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	4a57      	ldr	r2, [pc, #348]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 80062a0:	f023 0304 	bic.w	r3, r3, #4
 80062a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d015      	beq.n	80062da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062ae:	f7fe fead 	bl	800500c <HAL_GetTick>
 80062b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b4:	e00a      	b.n	80062cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062b6:	f7fe fea9 	bl	800500c <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d901      	bls.n	80062cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e0b1      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062cc:	4b4b      	ldr	r3, [pc, #300]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0ee      	beq.n	80062b6 <HAL_RCC_OscConfig+0x37e>
 80062d8:	e014      	b.n	8006304 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062da:	f7fe fe97 	bl	800500c <HAL_GetTick>
 80062de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062e0:	e00a      	b.n	80062f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e2:	f7fe fe93 	bl	800500c <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e09b      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062f8:	4b40      	ldr	r3, [pc, #256]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1ee      	bne.n	80062e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d105      	bne.n	8006316 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800630a:	4b3c      	ldr	r3, [pc, #240]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	4a3b      	ldr	r2, [pc, #236]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006314:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 8087 	beq.w	800642e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006320:	4b36      	ldr	r3, [pc, #216]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f003 030c 	and.w	r3, r3, #12
 8006328:	2b08      	cmp	r3, #8
 800632a:	d061      	beq.n	80063f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	2b02      	cmp	r3, #2
 8006332:	d146      	bne.n	80063c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006334:	4b33      	ldr	r3, [pc, #204]	; (8006404 <HAL_RCC_OscConfig+0x4cc>)
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800633a:	f7fe fe67 	bl	800500c <HAL_GetTick>
 800633e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006340:	e008      	b.n	8006354 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006342:	f7fe fe63 	bl	800500c <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d901      	bls.n	8006354 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e06d      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006354:	4b29      	ldr	r3, [pc, #164]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1f0      	bne.n	8006342 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006368:	d108      	bne.n	800637c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800636a:	4b24      	ldr	r3, [pc, #144]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	4921      	ldr	r1, [pc, #132]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006378:	4313      	orrs	r3, r2
 800637a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800637c:	4b1f      	ldr	r3, [pc, #124]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a19      	ldr	r1, [r3, #32]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	430b      	orrs	r3, r1
 800638e:	491b      	ldr	r1, [pc, #108]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 8006390:	4313      	orrs	r3, r2
 8006392:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006394:	4b1b      	ldr	r3, [pc, #108]	; (8006404 <HAL_RCC_OscConfig+0x4cc>)
 8006396:	2201      	movs	r2, #1
 8006398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800639a:	f7fe fe37 	bl	800500c <HAL_GetTick>
 800639e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063a0:	e008      	b.n	80063b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063a2:	f7fe fe33 	bl	800500c <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e03d      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063b4:	4b11      	ldr	r3, [pc, #68]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0f0      	beq.n	80063a2 <HAL_RCC_OscConfig+0x46a>
 80063c0:	e035      	b.n	800642e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c2:	4b10      	ldr	r3, [pc, #64]	; (8006404 <HAL_RCC_OscConfig+0x4cc>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c8:	f7fe fe20 	bl	800500c <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d0:	f7fe fe1c 	bl	800500c <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e026      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063e2:	4b06      	ldr	r3, [pc, #24]	; (80063fc <HAL_RCC_OscConfig+0x4c4>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1f0      	bne.n	80063d0 <HAL_RCC_OscConfig+0x498>
 80063ee:	e01e      	b.n	800642e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d107      	bne.n	8006408 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e019      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
 80063fc:	40021000 	.word	0x40021000
 8006400:	40007000 	.word	0x40007000
 8006404:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006408:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <HAL_RCC_OscConfig+0x500>)
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	429a      	cmp	r2, r3
 800641a:	d106      	bne.n	800642a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006426:	429a      	cmp	r2, r3
 8006428:	d001      	beq.n	800642e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40021000 	.word	0x40021000

0800643c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e0d0      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006450:	4b6a      	ldr	r3, [pc, #424]	; (80065fc <HAL_RCC_ClockConfig+0x1c0>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	429a      	cmp	r2, r3
 800645c:	d910      	bls.n	8006480 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800645e:	4b67      	ldr	r3, [pc, #412]	; (80065fc <HAL_RCC_ClockConfig+0x1c0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f023 0207 	bic.w	r2, r3, #7
 8006466:	4965      	ldr	r1, [pc, #404]	; (80065fc <HAL_RCC_ClockConfig+0x1c0>)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	4313      	orrs	r3, r2
 800646c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800646e:	4b63      	ldr	r3, [pc, #396]	; (80065fc <HAL_RCC_ClockConfig+0x1c0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	429a      	cmp	r2, r3
 800647a:	d001      	beq.n	8006480 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e0b8      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d020      	beq.n	80064ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006498:	4b59      	ldr	r3, [pc, #356]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	4a58      	ldr	r2, [pc, #352]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 800649e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80064a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064b0:	4b53      	ldr	r3, [pc, #332]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	4a52      	ldr	r2, [pc, #328]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 80064b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80064ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064bc:	4b50      	ldr	r3, [pc, #320]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	494d      	ldr	r1, [pc, #308]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d040      	beq.n	800655c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d107      	bne.n	80064f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064e2:	4b47      	ldr	r3, [pc, #284]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d115      	bne.n	800651a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e07f      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d107      	bne.n	800650a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064fa:	4b41      	ldr	r3, [pc, #260]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e073      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800650a:	4b3d      	ldr	r3, [pc, #244]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e06b      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800651a:	4b39      	ldr	r3, [pc, #228]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f023 0203 	bic.w	r2, r3, #3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	4936      	ldr	r1, [pc, #216]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 8006528:	4313      	orrs	r3, r2
 800652a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800652c:	f7fe fd6e 	bl	800500c <HAL_GetTick>
 8006530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006532:	e00a      	b.n	800654a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006534:	f7fe fd6a 	bl	800500c <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006542:	4293      	cmp	r3, r2
 8006544:	d901      	bls.n	800654a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e053      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654a:	4b2d      	ldr	r3, [pc, #180]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f003 020c 	and.w	r2, r3, #12
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	429a      	cmp	r2, r3
 800655a:	d1eb      	bne.n	8006534 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800655c:	4b27      	ldr	r3, [pc, #156]	; (80065fc <HAL_RCC_ClockConfig+0x1c0>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	429a      	cmp	r2, r3
 8006568:	d210      	bcs.n	800658c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800656a:	4b24      	ldr	r3, [pc, #144]	; (80065fc <HAL_RCC_ClockConfig+0x1c0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f023 0207 	bic.w	r2, r3, #7
 8006572:	4922      	ldr	r1, [pc, #136]	; (80065fc <HAL_RCC_ClockConfig+0x1c0>)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	4313      	orrs	r3, r2
 8006578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800657a:	4b20      	ldr	r3, [pc, #128]	; (80065fc <HAL_RCC_ClockConfig+0x1c0>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	d001      	beq.n	800658c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e032      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	d008      	beq.n	80065aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006598:	4b19      	ldr	r3, [pc, #100]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	4916      	ldr	r1, [pc, #88]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0308 	and.w	r3, r3, #8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80065b6:	4b12      	ldr	r3, [pc, #72]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	490e      	ldr	r1, [pc, #56]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065ca:	f000 f821 	bl	8006610 <HAL_RCC_GetSysClockFreq>
 80065ce:	4602      	mov	r2, r0
 80065d0:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <HAL_RCC_ClockConfig+0x1c4>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	091b      	lsrs	r3, r3, #4
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	490a      	ldr	r1, [pc, #40]	; (8006604 <HAL_RCC_ClockConfig+0x1c8>)
 80065dc:	5ccb      	ldrb	r3, [r1, r3]
 80065de:	fa22 f303 	lsr.w	r3, r2, r3
 80065e2:	4a09      	ldr	r2, [pc, #36]	; (8006608 <HAL_RCC_ClockConfig+0x1cc>)
 80065e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80065e6:	4b09      	ldr	r3, [pc, #36]	; (800660c <HAL_RCC_ClockConfig+0x1d0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe fccc 	bl	8004f88 <HAL_InitTick>

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40022000 	.word	0x40022000
 8006600:	40021000 	.word	0x40021000
 8006604:	08007a00 	.word	0x08007a00
 8006608:	20000000 	.word	0x20000000
 800660c:	20000004 	.word	0x20000004

08006610 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	2300      	movs	r3, #0
 800661c:	60bb      	str	r3, [r7, #8]
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800662a:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f003 030c 	and.w	r3, r3, #12
 8006636:	2b04      	cmp	r3, #4
 8006638:	d002      	beq.n	8006640 <HAL_RCC_GetSysClockFreq+0x30>
 800663a:	2b08      	cmp	r3, #8
 800663c:	d003      	beq.n	8006646 <HAL_RCC_GetSysClockFreq+0x36>
 800663e:	e027      	b.n	8006690 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006640:	4b19      	ldr	r3, [pc, #100]	; (80066a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006642:	613b      	str	r3, [r7, #16]
      break;
 8006644:	e027      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	0c9b      	lsrs	r3, r3, #18
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	4a17      	ldr	r2, [pc, #92]	; (80066ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8006650:	5cd3      	ldrb	r3, [r2, r3]
 8006652:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d010      	beq.n	8006680 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800665e:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	0c5b      	lsrs	r3, r3, #17
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	4a11      	ldr	r2, [pc, #68]	; (80066b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800666a:	5cd3      	ldrb	r3, [r2, r3]
 800666c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a0d      	ldr	r2, [pc, #52]	; (80066a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006672:	fb03 f202 	mul.w	r2, r3, r2
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	fbb2 f3f3 	udiv	r3, r2, r3
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	e004      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a0c      	ldr	r2, [pc, #48]	; (80066b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006684:	fb02 f303 	mul.w	r3, r2, r3
 8006688:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	613b      	str	r3, [r7, #16]
      break;
 800668e:	e002      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006690:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006692:	613b      	str	r3, [r7, #16]
      break;
 8006694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006696:	693b      	ldr	r3, [r7, #16]
}
 8006698:	4618      	mov	r0, r3
 800669a:	371c      	adds	r7, #28
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40021000 	.word	0x40021000
 80066a8:	007a1200 	.word	0x007a1200
 80066ac:	08007a10 	.word	0x08007a10
 80066b0:	08007a20 	.word	0x08007a20
 80066b4:	003d0900 	.word	0x003d0900

080066b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80066c0:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <RCC_Delay+0x34>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a0a      	ldr	r2, [pc, #40]	; (80066f0 <RCC_Delay+0x38>)
 80066c6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ca:	0a5b      	lsrs	r3, r3, #9
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	fb02 f303 	mul.w	r3, r2, r3
 80066d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80066d4:	bf00      	nop
  }
  while (Delay --);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	1e5a      	subs	r2, r3, #1
 80066da:	60fa      	str	r2, [r7, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f9      	bne.n	80066d4 <RCC_Delay+0x1c>
}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr
 80066ec:	20000000 	.word	0x20000000
 80066f0:	10624dd3 	.word	0x10624dd3

080066f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	613b      	str	r3, [r7, #16]
 8006700:	2300      	movs	r3, #0
 8006702:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d07d      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006710:	2300      	movs	r3, #0
 8006712:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006714:	4b4f      	ldr	r3, [pc, #316]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10d      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006720:	4b4c      	ldr	r3, [pc, #304]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	4a4b      	ldr	r2, [pc, #300]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800672a:	61d3      	str	r3, [r2, #28]
 800672c:	4b49      	ldr	r3, [pc, #292]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006734:	60bb      	str	r3, [r7, #8]
 8006736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006738:	2301      	movs	r3, #1
 800673a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800673c:	4b46      	ldr	r3, [pc, #280]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006744:	2b00      	cmp	r3, #0
 8006746:	d118      	bne.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006748:	4b43      	ldr	r3, [pc, #268]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a42      	ldr	r2, [pc, #264]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800674e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006752:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006754:	f7fe fc5a 	bl	800500c <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800675a:	e008      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800675c:	f7fe fc56 	bl	800500c <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b64      	cmp	r3, #100	; 0x64
 8006768:	d901      	bls.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e06d      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800676e:	4b3a      	ldr	r3, [pc, #232]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0f0      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800677a:	4b36      	ldr	r3, [pc, #216]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006782:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d02e      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	429a      	cmp	r2, r3
 8006796:	d027      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006798:	4b2e      	ldr	r3, [pc, #184]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067a2:	4b2e      	ldr	r3, [pc, #184]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067a8:	4b2c      	ldr	r3, [pc, #176]	; (800685c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80067ae:	4a29      	ldr	r2, [pc, #164]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d014      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067be:	f7fe fc25 	bl	800500c <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c4:	e00a      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067c6:	f7fe fc21 	bl	800500c <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d901      	bls.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e036      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067dc:	4b1d      	ldr	r3, [pc, #116]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d0ee      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067e8:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	4917      	ldr	r1, [pc, #92]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d105      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006800:	4b14      	ldr	r3, [pc, #80]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	4a13      	ldr	r2, [pc, #76]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800680a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d008      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006818:	4b0e      	ldr	r3, [pc, #56]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	490b      	ldr	r1, [pc, #44]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006826:	4313      	orrs	r3, r2
 8006828:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b00      	cmp	r3, #0
 8006834:	d008      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006836:	4b07      	ldr	r3, [pc, #28]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	4904      	ldr	r1, [pc, #16]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006844:	4313      	orrs	r3, r2
 8006846:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	40021000 	.word	0x40021000
 8006858:	40007000 	.word	0x40007000
 800685c:	42420440 	.word	0x42420440

08006860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e041      	b.n	80068f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d106      	bne.n	800688c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fd fbcc 	bl	8004024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3304      	adds	r3, #4
 800689c:	4619      	mov	r1, r3
 800689e:	4610      	mov	r0, r2
 80068a0:	f000 fc7a 	bl	8007198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b01      	cmp	r3, #1
 8006912:	d001      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e03a      	b.n	800698e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0201 	orr.w	r2, r2, #1
 800692e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a18      	ldr	r2, [pc, #96]	; (8006998 <HAL_TIM_Base_Start_IT+0x98>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00e      	beq.n	8006958 <HAL_TIM_Base_Start_IT+0x58>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006942:	d009      	beq.n	8006958 <HAL_TIM_Base_Start_IT+0x58>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a14      	ldr	r2, [pc, #80]	; (800699c <HAL_TIM_Base_Start_IT+0x9c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d004      	beq.n	8006958 <HAL_TIM_Base_Start_IT+0x58>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a13      	ldr	r2, [pc, #76]	; (80069a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d111      	bne.n	800697c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b06      	cmp	r3, #6
 8006968:	d010      	beq.n	800698c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f042 0201 	orr.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800697a:	e007      	b.n	800698c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	bc80      	pop	{r7}
 8006996:	4770      	bx	lr
 8006998:	40012c00 	.word	0x40012c00
 800699c:	40000400 	.word	0x40000400
 80069a0:	40000800 	.word	0x40000800

080069a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e041      	b.n	8006a3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d106      	bne.n	80069d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f839 	bl	8006a42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3304      	adds	r3, #4
 80069e0:	4619      	mov	r1, r3
 80069e2:	4610      	mov	r0, r2
 80069e4:	f000 fbd8 	bl	8007198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a4a:	bf00      	nop
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bc80      	pop	{r7}
 8006a52:	4770      	bx	lr

08006a54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d109      	bne.n	8006a78 <HAL_TIM_PWM_Start+0x24>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	bf14      	ite	ne
 8006a70:	2301      	movne	r3, #1
 8006a72:	2300      	moveq	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	e022      	b.n	8006abe <HAL_TIM_PWM_Start+0x6a>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d109      	bne.n	8006a92 <HAL_TIM_PWM_Start+0x3e>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	bf14      	ite	ne
 8006a8a:	2301      	movne	r3, #1
 8006a8c:	2300      	moveq	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	e015      	b.n	8006abe <HAL_TIM_PWM_Start+0x6a>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d109      	bne.n	8006aac <HAL_TIM_PWM_Start+0x58>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	bf14      	ite	ne
 8006aa4:	2301      	movne	r3, #1
 8006aa6:	2300      	moveq	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	e008      	b.n	8006abe <HAL_TIM_PWM_Start+0x6a>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	bf14      	ite	ne
 8006ab8:	2301      	movne	r3, #1
 8006aba:	2300      	moveq	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e05e      	b.n	8006b84 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d104      	bne.n	8006ad6 <HAL_TIM_PWM_Start+0x82>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ad4:	e013      	b.n	8006afe <HAL_TIM_PWM_Start+0xaa>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b04      	cmp	r3, #4
 8006ada:	d104      	bne.n	8006ae6 <HAL_TIM_PWM_Start+0x92>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ae4:	e00b      	b.n	8006afe <HAL_TIM_PWM_Start+0xaa>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d104      	bne.n	8006af6 <HAL_TIM_PWM_Start+0xa2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006af4:	e003      	b.n	8006afe <HAL_TIM_PWM_Start+0xaa>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2202      	movs	r2, #2
 8006afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2201      	movs	r2, #1
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fe57 	bl	80077ba <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a1e      	ldr	r2, [pc, #120]	; (8006b8c <HAL_TIM_PWM_Start+0x138>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d107      	bne.n	8006b26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a18      	ldr	r2, [pc, #96]	; (8006b8c <HAL_TIM_PWM_Start+0x138>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00e      	beq.n	8006b4e <HAL_TIM_PWM_Start+0xfa>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b38:	d009      	beq.n	8006b4e <HAL_TIM_PWM_Start+0xfa>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a14      	ldr	r2, [pc, #80]	; (8006b90 <HAL_TIM_PWM_Start+0x13c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_TIM_PWM_Start+0xfa>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a12      	ldr	r2, [pc, #72]	; (8006b94 <HAL_TIM_PWM_Start+0x140>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d111      	bne.n	8006b72 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b06      	cmp	r3, #6
 8006b5e:	d010      	beq.n	8006b82 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0201 	orr.w	r2, r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b70:	e007      	b.n	8006b82 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0201 	orr.w	r2, r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40012c00 	.word	0x40012c00
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40000800 	.word	0x40000800

08006b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d122      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d11b      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f06f 0202 	mvn.w	r2, #2
 8006bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fac1 	bl	8007162 <HAL_TIM_IC_CaptureCallback>
 8006be0:	e005      	b.n	8006bee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fab4 	bl	8007150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fac3 	bl	8007174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f003 0304 	and.w	r3, r3, #4
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d122      	bne.n	8006c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d11b      	bne.n	8006c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f06f 0204 	mvn.w	r2, #4
 8006c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fa97 	bl	8007162 <HAL_TIM_IC_CaptureCallback>
 8006c34:	e005      	b.n	8006c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fa8a 	bl	8007150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fa99 	bl	8007174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0308 	and.w	r3, r3, #8
 8006c52:	2b08      	cmp	r3, #8
 8006c54:	d122      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d11b      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f06f 0208 	mvn.w	r2, #8
 8006c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2204      	movs	r2, #4
 8006c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f003 0303 	and.w	r3, r3, #3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fa6d 	bl	8007162 <HAL_TIM_IC_CaptureCallback>
 8006c88:	e005      	b.n	8006c96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fa60 	bl	8007150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fa6f 	bl	8007174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0310 	and.w	r3, r3, #16
 8006ca6:	2b10      	cmp	r3, #16
 8006ca8:	d122      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f003 0310 	and.w	r3, r3, #16
 8006cb4:	2b10      	cmp	r3, #16
 8006cb6:	d11b      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f06f 0210 	mvn.w	r2, #16
 8006cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fa43 	bl	8007162 <HAL_TIM_IC_CaptureCallback>
 8006cdc:	e005      	b.n	8006cea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa36 	bl	8007150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fa45 	bl	8007174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d10e      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d107      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f06f 0201 	mvn.w	r2, #1
 8006d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fa11 	bl	800713e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d26:	2b80      	cmp	r3, #128	; 0x80
 8006d28:	d10e      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d34:	2b80      	cmp	r3, #128	; 0x80
 8006d36:	d107      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fdc5 	bl	80078d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d52:	2b40      	cmp	r3, #64	; 0x40
 8006d54:	d10e      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d60:	2b40      	cmp	r3, #64	; 0x40
 8006d62:	d107      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fa09 	bl	8007186 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	d10e      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0320 	and.w	r3, r3, #32
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	d107      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f06f 0220 	mvn.w	r2, #32
 8006d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fd90 	bl	80078c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d101      	bne.n	8006dc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	e0ae      	b.n	8006f24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b0c      	cmp	r3, #12
 8006dd2:	f200 809f 	bhi.w	8006f14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006dd6:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ddc:	08006e11 	.word	0x08006e11
 8006de0:	08006f15 	.word	0x08006f15
 8006de4:	08006f15 	.word	0x08006f15
 8006de8:	08006f15 	.word	0x08006f15
 8006dec:	08006e51 	.word	0x08006e51
 8006df0:	08006f15 	.word	0x08006f15
 8006df4:	08006f15 	.word	0x08006f15
 8006df8:	08006f15 	.word	0x08006f15
 8006dfc:	08006e93 	.word	0x08006e93
 8006e00:	08006f15 	.word	0x08006f15
 8006e04:	08006f15 	.word	0x08006f15
 8006e08:	08006f15 	.word	0x08006f15
 8006e0c:	08006ed3 	.word	0x08006ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 fa20 	bl	800725c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699a      	ldr	r2, [r3, #24]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 0208 	orr.w	r2, r2, #8
 8006e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	699a      	ldr	r2, [r3, #24]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 0204 	bic.w	r2, r2, #4
 8006e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6999      	ldr	r1, [r3, #24]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	691a      	ldr	r2, [r3, #16]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	619a      	str	r2, [r3, #24]
      break;
 8006e4e:	e064      	b.n	8006f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fa66 	bl	8007328 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699a      	ldr	r2, [r3, #24]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6999      	ldr	r1, [r3, #24]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	021a      	lsls	r2, r3, #8
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	619a      	str	r2, [r3, #24]
      break;
 8006e90:	e043      	b.n	8006f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68b9      	ldr	r1, [r7, #8]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 faaf 	bl	80073fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f042 0208 	orr.w	r2, r2, #8
 8006eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69da      	ldr	r2, [r3, #28]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0204 	bic.w	r2, r2, #4
 8006ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69d9      	ldr	r1, [r3, #28]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	61da      	str	r2, [r3, #28]
      break;
 8006ed0:	e023      	b.n	8006f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68b9      	ldr	r1, [r7, #8]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 faf9 	bl	80074d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69da      	ldr	r2, [r3, #28]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69da      	ldr	r2, [r3, #28]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69d9      	ldr	r1, [r3, #28]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	021a      	lsls	r2, r3, #8
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	61da      	str	r2, [r3, #28]
      break;
 8006f12:	e002      	b.n	8006f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	75fb      	strb	r3, [r7, #23]
      break;
 8006f18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_TIM_ConfigClockSource+0x1c>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e0b4      	b.n	80070b2 <HAL_TIM_ConfigClockSource+0x186>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f80:	d03e      	beq.n	8007000 <HAL_TIM_ConfigClockSource+0xd4>
 8006f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f86:	f200 8087 	bhi.w	8007098 <HAL_TIM_ConfigClockSource+0x16c>
 8006f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f8e:	f000 8086 	beq.w	800709e <HAL_TIM_ConfigClockSource+0x172>
 8006f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f96:	d87f      	bhi.n	8007098 <HAL_TIM_ConfigClockSource+0x16c>
 8006f98:	2b70      	cmp	r3, #112	; 0x70
 8006f9a:	d01a      	beq.n	8006fd2 <HAL_TIM_ConfigClockSource+0xa6>
 8006f9c:	2b70      	cmp	r3, #112	; 0x70
 8006f9e:	d87b      	bhi.n	8007098 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa0:	2b60      	cmp	r3, #96	; 0x60
 8006fa2:	d050      	beq.n	8007046 <HAL_TIM_ConfigClockSource+0x11a>
 8006fa4:	2b60      	cmp	r3, #96	; 0x60
 8006fa6:	d877      	bhi.n	8007098 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa8:	2b50      	cmp	r3, #80	; 0x50
 8006faa:	d03c      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0xfa>
 8006fac:	2b50      	cmp	r3, #80	; 0x50
 8006fae:	d873      	bhi.n	8007098 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb0:	2b40      	cmp	r3, #64	; 0x40
 8006fb2:	d058      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x13a>
 8006fb4:	2b40      	cmp	r3, #64	; 0x40
 8006fb6:	d86f      	bhi.n	8007098 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb8:	2b30      	cmp	r3, #48	; 0x30
 8006fba:	d064      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x15a>
 8006fbc:	2b30      	cmp	r3, #48	; 0x30
 8006fbe:	d86b      	bhi.n	8007098 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	d060      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x15a>
 8006fc4:	2b20      	cmp	r3, #32
 8006fc6:	d867      	bhi.n	8007098 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d05c      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x15a>
 8006fcc:	2b10      	cmp	r3, #16
 8006fce:	d05a      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x15a>
 8006fd0:	e062      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6818      	ldr	r0, [r3, #0]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	6899      	ldr	r1, [r3, #8]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	f000 fbcb 	bl	800777c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	609a      	str	r2, [r3, #8]
      break;
 8006ffe:	e04f      	b.n	80070a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	6899      	ldr	r1, [r3, #8]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f000 fbb4 	bl	800777c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007022:	609a      	str	r2, [r3, #8]
      break;
 8007024:	e03c      	b.n	80070a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6859      	ldr	r1, [r3, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	461a      	mov	r2, r3
 8007034:	f000 fb2b 	bl	800768e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2150      	movs	r1, #80	; 0x50
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fb82 	bl	8007748 <TIM_ITRx_SetConfig>
      break;
 8007044:	e02c      	b.n	80070a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6859      	ldr	r1, [r3, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	461a      	mov	r2, r3
 8007054:	f000 fb49 	bl	80076ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2160      	movs	r1, #96	; 0x60
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fb72 	bl	8007748 <TIM_ITRx_SetConfig>
      break;
 8007064:	e01c      	b.n	80070a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6818      	ldr	r0, [r3, #0]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	6859      	ldr	r1, [r3, #4]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	461a      	mov	r2, r3
 8007074:	f000 fb0b 	bl	800768e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2140      	movs	r1, #64	; 0x40
 800707e:	4618      	mov	r0, r3
 8007080:	f000 fb62 	bl	8007748 <TIM_ITRx_SetConfig>
      break;
 8007084:	e00c      	b.n	80070a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4619      	mov	r1, r3
 8007090:	4610      	mov	r0, r2
 8007092:	f000 fb59 	bl	8007748 <TIM_ITRx_SetConfig>
      break;
 8007096:	e003      	b.n	80070a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	73fb      	strb	r3, [r7, #15]
      break;
 800709c:	e000      	b.n	80070a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800709e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80070ce:	2302      	movs	r3, #2
 80070d0:	e031      	b.n	8007136 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2202      	movs	r2, #2
 80070de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fa41 	bl	800756c <TIM_SlaveTimer_SetConfig>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d009      	beq.n	8007104 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e018      	b.n	8007136 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007112:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007122:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	bc80      	pop	{r7}
 800714e:	4770      	bx	lr

08007150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	bc80      	pop	{r7}
 8007160:	4770      	bx	lr

08007162 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	bc80      	pop	{r7}
 8007172:	4770      	bx	lr

08007174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	bc80      	pop	{r7}
 8007184:	4770      	bx	lr

08007186 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800718e:	bf00      	nop
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	bc80      	pop	{r7}
 8007196:	4770      	bx	lr

08007198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a29      	ldr	r2, [pc, #164]	; (8007250 <TIM_Base_SetConfig+0xb8>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00b      	beq.n	80071c8 <TIM_Base_SetConfig+0x30>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b6:	d007      	beq.n	80071c8 <TIM_Base_SetConfig+0x30>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a26      	ldr	r2, [pc, #152]	; (8007254 <TIM_Base_SetConfig+0xbc>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_Base_SetConfig+0x30>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a25      	ldr	r2, [pc, #148]	; (8007258 <TIM_Base_SetConfig+0xc0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d108      	bne.n	80071da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a1c      	ldr	r2, [pc, #112]	; (8007250 <TIM_Base_SetConfig+0xb8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00b      	beq.n	80071fa <TIM_Base_SetConfig+0x62>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e8:	d007      	beq.n	80071fa <TIM_Base_SetConfig+0x62>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a19      	ldr	r2, [pc, #100]	; (8007254 <TIM_Base_SetConfig+0xbc>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d003      	beq.n	80071fa <TIM_Base_SetConfig+0x62>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a18      	ldr	r2, [pc, #96]	; (8007258 <TIM_Base_SetConfig+0xc0>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d108      	bne.n	800720c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a07      	ldr	r2, [pc, #28]	; (8007250 <TIM_Base_SetConfig+0xb8>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d103      	bne.n	8007240 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	615a      	str	r2, [r3, #20]
}
 8007246:	bf00      	nop
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr
 8007250:	40012c00 	.word	0x40012c00
 8007254:	40000400 	.word	0x40000400
 8007258:	40000800 	.word	0x40000800

0800725c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f023 0201 	bic.w	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0303 	bic.w	r3, r3, #3
 8007292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f023 0302 	bic.w	r3, r3, #2
 80072a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a1c      	ldr	r2, [pc, #112]	; (8007324 <TIM_OC1_SetConfig+0xc8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d10c      	bne.n	80072d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f023 0308 	bic.w	r3, r3, #8
 80072be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f023 0304 	bic.w	r3, r3, #4
 80072d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a13      	ldr	r2, [pc, #76]	; (8007324 <TIM_OC1_SetConfig+0xc8>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d111      	bne.n	80072fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	621a      	str	r2, [r3, #32]
}
 8007318:	bf00      	nop
 800731a:	371c      	adds	r7, #28
 800731c:	46bd      	mov	sp, r7
 800731e:	bc80      	pop	{r7}
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	40012c00 	.word	0x40012c00

08007328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	f023 0210 	bic.w	r2, r3, #16
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800735e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	021b      	lsls	r3, r3, #8
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	4313      	orrs	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f023 0320 	bic.w	r3, r3, #32
 8007372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	4313      	orrs	r3, r2
 800737e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a1d      	ldr	r2, [pc, #116]	; (80073f8 <TIM_OC2_SetConfig+0xd0>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d10d      	bne.n	80073a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800738e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	011b      	lsls	r3, r3, #4
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	4313      	orrs	r3, r2
 800739a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a14      	ldr	r2, [pc, #80]	; (80073f8 <TIM_OC2_SetConfig+0xd0>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d113      	bne.n	80073d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	621a      	str	r2, [r3, #32]
}
 80073ee:	bf00      	nop
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr
 80073f8:	40012c00 	.word	0x40012c00

080073fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0303 	bic.w	r3, r3, #3
 8007432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	021b      	lsls	r3, r3, #8
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	4313      	orrs	r3, r2
 8007450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a1d      	ldr	r2, [pc, #116]	; (80074cc <TIM_OC3_SetConfig+0xd0>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d10d      	bne.n	8007476 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	4313      	orrs	r3, r2
 800746c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a14      	ldr	r2, [pc, #80]	; (80074cc <TIM_OC3_SetConfig+0xd0>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d113      	bne.n	80074a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800748c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	621a      	str	r2, [r3, #32]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	40012c00 	.word	0x40012c00

080074d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800751a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	031b      	lsls	r3, r3, #12
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	4313      	orrs	r3, r2
 8007526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a0f      	ldr	r2, [pc, #60]	; (8007568 <TIM_OC4_SetConfig+0x98>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d109      	bne.n	8007544 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	019b      	lsls	r3, r3, #6
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	4313      	orrs	r3, r2
 8007542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	621a      	str	r2, [r3, #32]
}
 800755e:	bf00      	nop
 8007560:	371c      	adds	r7, #28
 8007562:	46bd      	mov	sp, r7
 8007564:	bc80      	pop	{r7}
 8007566:	4770      	bx	lr
 8007568:	40012c00 	.word	0x40012c00

0800756c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007588:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	4313      	orrs	r3, r2
 8007592:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f023 0307 	bic.w	r3, r3, #7
 800759a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	2b70      	cmp	r3, #112	; 0x70
 80075b4:	d01a      	beq.n	80075ec <TIM_SlaveTimer_SetConfig+0x80>
 80075b6:	2b70      	cmp	r3, #112	; 0x70
 80075b8:	d860      	bhi.n	800767c <TIM_SlaveTimer_SetConfig+0x110>
 80075ba:	2b60      	cmp	r3, #96	; 0x60
 80075bc:	d054      	beq.n	8007668 <TIM_SlaveTimer_SetConfig+0xfc>
 80075be:	2b60      	cmp	r3, #96	; 0x60
 80075c0:	d85c      	bhi.n	800767c <TIM_SlaveTimer_SetConfig+0x110>
 80075c2:	2b50      	cmp	r3, #80	; 0x50
 80075c4:	d046      	beq.n	8007654 <TIM_SlaveTimer_SetConfig+0xe8>
 80075c6:	2b50      	cmp	r3, #80	; 0x50
 80075c8:	d858      	bhi.n	800767c <TIM_SlaveTimer_SetConfig+0x110>
 80075ca:	2b40      	cmp	r3, #64	; 0x40
 80075cc:	d019      	beq.n	8007602 <TIM_SlaveTimer_SetConfig+0x96>
 80075ce:	2b40      	cmp	r3, #64	; 0x40
 80075d0:	d854      	bhi.n	800767c <TIM_SlaveTimer_SetConfig+0x110>
 80075d2:	2b30      	cmp	r3, #48	; 0x30
 80075d4:	d055      	beq.n	8007682 <TIM_SlaveTimer_SetConfig+0x116>
 80075d6:	2b30      	cmp	r3, #48	; 0x30
 80075d8:	d850      	bhi.n	800767c <TIM_SlaveTimer_SetConfig+0x110>
 80075da:	2b20      	cmp	r3, #32
 80075dc:	d051      	beq.n	8007682 <TIM_SlaveTimer_SetConfig+0x116>
 80075de:	2b20      	cmp	r3, #32
 80075e0:	d84c      	bhi.n	800767c <TIM_SlaveTimer_SetConfig+0x110>
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d04d      	beq.n	8007682 <TIM_SlaveTimer_SetConfig+0x116>
 80075e6:	2b10      	cmp	r3, #16
 80075e8:	d04b      	beq.n	8007682 <TIM_SlaveTimer_SetConfig+0x116>
 80075ea:	e047      	b.n	800767c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6818      	ldr	r0, [r3, #0]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	68d9      	ldr	r1, [r3, #12]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	f000 f8be 	bl	800777c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007600:	e040      	b.n	8007684 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b05      	cmp	r3, #5
 8007608:	d101      	bne.n	800760e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e03b      	b.n	8007686 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6a1a      	ldr	r2, [r3, #32]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0201 	bic.w	r2, r2, #1
 8007624:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007634:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	011b      	lsls	r3, r3, #4
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	4313      	orrs	r3, r2
 8007640:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	621a      	str	r2, [r3, #32]
      break;
 8007652:	e017      	b.n	8007684 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	6899      	ldr	r1, [r3, #8]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	461a      	mov	r2, r3
 8007662:	f000 f814 	bl	800768e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007666:	e00d      	b.n	8007684 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	6899      	ldr	r1, [r3, #8]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	461a      	mov	r2, r3
 8007676:	f000 f838 	bl	80076ea <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800767a:	e003      	b.n	8007684 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	75fb      	strb	r3, [r7, #23]
      break;
 8007680:	e000      	b.n	8007684 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007682:	bf00      	nop
  }

  return status;
 8007684:	7dfb      	ldrb	r3, [r7, #23]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800768e:	b480      	push	{r7}
 8007690:	b087      	sub	sp, #28
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	f023 0201 	bic.w	r2, r3, #1
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f023 030a 	bic.w	r3, r3, #10
 80076ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	621a      	str	r2, [r3, #32]
}
 80076e0:	bf00      	nop
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bc80      	pop	{r7}
 80076e8:	4770      	bx	lr

080076ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b087      	sub	sp, #28
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	f023 0210 	bic.w	r2, r3, #16
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	031b      	lsls	r3, r3, #12
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007726:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	011b      	lsls	r3, r3, #4
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	4313      	orrs	r3, r2
 8007730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	621a      	str	r2, [r3, #32]
}
 800773e:	bf00      	nop
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	bc80      	pop	{r7}
 8007746:	4770      	bx	lr

08007748 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4313      	orrs	r3, r2
 8007766:	f043 0307 	orr.w	r3, r3, #7
 800776a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	609a      	str	r2, [r3, #8]
}
 8007772:	bf00      	nop
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	bc80      	pop	{r7}
 800777a:	4770      	bx	lr

0800777c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	021a      	lsls	r2, r3, #8
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	431a      	orrs	r2, r3
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	609a      	str	r2, [r3, #8]
}
 80077b0:	bf00      	nop
 80077b2:	371c      	adds	r7, #28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bc80      	pop	{r7}
 80077b8:	4770      	bx	lr

080077ba <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b087      	sub	sp, #28
 80077be:	af00      	add	r7, sp, #0
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f003 031f 	and.w	r3, r3, #31
 80077cc:	2201      	movs	r2, #1
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6a1a      	ldr	r2, [r3, #32]
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	43db      	mvns	r3, r3
 80077dc:	401a      	ands	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a1a      	ldr	r2, [r3, #32]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f003 031f 	and.w	r3, r3, #31
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	fa01 f303 	lsl.w	r3, r1, r3
 80077f2:	431a      	orrs	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	621a      	str	r2, [r3, #32]
}
 80077f8:	bf00      	nop
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bc80      	pop	{r7}
 8007800:	4770      	bx	lr
	...

08007804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007818:	2302      	movs	r3, #2
 800781a:	e046      	b.n	80078aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a16      	ldr	r2, [pc, #88]	; (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d00e      	beq.n	800787e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007868:	d009      	beq.n	800787e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a12      	ldr	r2, [pc, #72]	; (80078b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d004      	beq.n	800787e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a10      	ldr	r2, [pc, #64]	; (80078bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d10c      	bne.n	8007898 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	4313      	orrs	r3, r2
 800788e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bc80      	pop	{r7}
 80078b2:	4770      	bx	lr
 80078b4:	40012c00 	.word	0x40012c00
 80078b8:	40000400 	.word	0x40000400
 80078bc:	40000800 	.word	0x40000800

080078c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bc80      	pop	{r7}
 80078d0:	4770      	bx	lr

080078d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078da:	bf00      	nop
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	bc80      	pop	{r7}
 80078e2:	4770      	bx	lr

080078e4 <__libc_init_array>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	2600      	movs	r6, #0
 80078e8:	4d0c      	ldr	r5, [pc, #48]	; (800791c <__libc_init_array+0x38>)
 80078ea:	4c0d      	ldr	r4, [pc, #52]	; (8007920 <__libc_init_array+0x3c>)
 80078ec:	1b64      	subs	r4, r4, r5
 80078ee:	10a4      	asrs	r4, r4, #2
 80078f0:	42a6      	cmp	r6, r4
 80078f2:	d109      	bne.n	8007908 <__libc_init_array+0x24>
 80078f4:	f000 f86a 	bl	80079cc <_init>
 80078f8:	2600      	movs	r6, #0
 80078fa:	4d0a      	ldr	r5, [pc, #40]	; (8007924 <__libc_init_array+0x40>)
 80078fc:	4c0a      	ldr	r4, [pc, #40]	; (8007928 <__libc_init_array+0x44>)
 80078fe:	1b64      	subs	r4, r4, r5
 8007900:	10a4      	asrs	r4, r4, #2
 8007902:	42a6      	cmp	r6, r4
 8007904:	d105      	bne.n	8007912 <__libc_init_array+0x2e>
 8007906:	bd70      	pop	{r4, r5, r6, pc}
 8007908:	f855 3b04 	ldr.w	r3, [r5], #4
 800790c:	4798      	blx	r3
 800790e:	3601      	adds	r6, #1
 8007910:	e7ee      	b.n	80078f0 <__libc_init_array+0xc>
 8007912:	f855 3b04 	ldr.w	r3, [r5], #4
 8007916:	4798      	blx	r3
 8007918:	3601      	adds	r6, #1
 800791a:	e7f2      	b.n	8007902 <__libc_init_array+0x1e>
 800791c:	08007a24 	.word	0x08007a24
 8007920:	08007a24 	.word	0x08007a24
 8007924:	08007a24 	.word	0x08007a24
 8007928:	08007a28 	.word	0x08007a28

0800792c <memset>:
 800792c:	4603      	mov	r3, r0
 800792e:	4402      	add	r2, r0
 8007930:	4293      	cmp	r3, r2
 8007932:	d100      	bne.n	8007936 <memset+0xa>
 8007934:	4770      	bx	lr
 8007936:	f803 1b01 	strb.w	r1, [r3], #1
 800793a:	e7f9      	b.n	8007930 <memset+0x4>

0800793c <round>:
 800793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007942:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8007946:	2c13      	cmp	r4, #19
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4606      	mov	r6, r0
 800794e:	460d      	mov	r5, r1
 8007950:	dc19      	bgt.n	8007986 <round+0x4a>
 8007952:	2c00      	cmp	r4, #0
 8007954:	da09      	bge.n	800796a <round+0x2e>
 8007956:	3401      	adds	r4, #1
 8007958:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800795c:	d103      	bne.n	8007966 <round+0x2a>
 800795e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007962:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007966:	2200      	movs	r2, #0
 8007968:	e02a      	b.n	80079c0 <round+0x84>
 800796a:	4917      	ldr	r1, [pc, #92]	; (80079c8 <round+0x8c>)
 800796c:	4121      	asrs	r1, r4
 800796e:	ea03 0001 	and.w	r0, r3, r1
 8007972:	4302      	orrs	r2, r0
 8007974:	d010      	beq.n	8007998 <round+0x5c>
 8007976:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800797a:	fa42 f404 	asr.w	r4, r2, r4
 800797e:	4423      	add	r3, r4
 8007980:	ea23 0301 	bic.w	r3, r3, r1
 8007984:	e7ef      	b.n	8007966 <round+0x2a>
 8007986:	2c33      	cmp	r4, #51	; 0x33
 8007988:	dd09      	ble.n	800799e <round+0x62>
 800798a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800798e:	d103      	bne.n	8007998 <round+0x5c>
 8007990:	f7f8 fc96 	bl	80002c0 <__adddf3>
 8007994:	4606      	mov	r6, r0
 8007996:	460d      	mov	r5, r1
 8007998:	4630      	mov	r0, r6
 800799a:	4629      	mov	r1, r5
 800799c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800799e:	f04f 31ff 	mov.w	r1, #4294967295
 80079a2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80079a6:	40f9      	lsrs	r1, r7
 80079a8:	4208      	tst	r0, r1
 80079aa:	d0f5      	beq.n	8007998 <round+0x5c>
 80079ac:	2001      	movs	r0, #1
 80079ae:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80079b2:	fa00 f404 	lsl.w	r4, r0, r4
 80079b6:	1912      	adds	r2, r2, r4
 80079b8:	bf28      	it	cs
 80079ba:	181b      	addcs	r3, r3, r0
 80079bc:	ea22 0201 	bic.w	r2, r2, r1
 80079c0:	4619      	mov	r1, r3
 80079c2:	4610      	mov	r0, r2
 80079c4:	e7e6      	b.n	8007994 <round+0x58>
 80079c6:	bf00      	nop
 80079c8:	000fffff 	.word	0x000fffff

080079cc <_init>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	bf00      	nop
 80079d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d2:	bc08      	pop	{r3}
 80079d4:	469e      	mov	lr, r3
 80079d6:	4770      	bx	lr

080079d8 <_fini>:
 80079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079da:	bf00      	nop
 80079dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079de:	bc08      	pop	{r3}
 80079e0:	469e      	mov	lr, r3
 80079e2:	4770      	bx	lr
