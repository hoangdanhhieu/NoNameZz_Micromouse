
NoNameZz_MicroMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004a0c  08004a0c  00014a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a38  08004a38  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08004a38  08004a38  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a38  08004a38  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a3c  08004a3c  00014a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08004a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000030  08004a70  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08004a70  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adcb  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bab  00000000  00000000  0002ae24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002c9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002d548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c7a  00000000  00000000  0002dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9bd  00000000  00000000  0002fc52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cc2d  00000000  00000000  0003b60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  000c823c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030cc  00000000  00000000  000c8288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000030 	.word	0x20000030
 800012c:	00000000 	.word	0x00000000
 8000130:	080049f4 	.word	0x080049f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000034 	.word	0x20000034
 800014c:	080049f4 	.word	0x080049f4

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_frsub>:
 800075c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000760:	e002      	b.n	8000768 <__addsf3>
 8000762:	bf00      	nop

08000764 <__aeabi_fsub>:
 8000764:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000768 <__addsf3>:
 8000768:	0042      	lsls	r2, r0, #1
 800076a:	bf1f      	itttt	ne
 800076c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000770:	ea92 0f03 	teqne	r2, r3
 8000774:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000778:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077c:	d06a      	beq.n	8000854 <__addsf3+0xec>
 800077e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000782:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000786:	bfc1      	itttt	gt
 8000788:	18d2      	addgt	r2, r2, r3
 800078a:	4041      	eorgt	r1, r0
 800078c:	4048      	eorgt	r0, r1
 800078e:	4041      	eorgt	r1, r0
 8000790:	bfb8      	it	lt
 8000792:	425b      	neglt	r3, r3
 8000794:	2b19      	cmp	r3, #25
 8000796:	bf88      	it	hi
 8000798:	4770      	bxhi	lr
 800079a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800079e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007a6:	bf18      	it	ne
 80007a8:	4240      	negne	r0, r0
 80007aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4249      	negne	r1, r1
 80007ba:	ea92 0f03 	teq	r2, r3
 80007be:	d03f      	beq.n	8000840 <__addsf3+0xd8>
 80007c0:	f1a2 0201 	sub.w	r2, r2, #1
 80007c4:	fa41 fc03 	asr.w	ip, r1, r3
 80007c8:	eb10 000c 	adds.w	r0, r0, ip
 80007cc:	f1c3 0320 	rsb	r3, r3, #32
 80007d0:	fa01 f103 	lsl.w	r1, r1, r3
 80007d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	d502      	bpl.n	80007e0 <__addsf3+0x78>
 80007da:	4249      	negs	r1, r1
 80007dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80007e4:	d313      	bcc.n	800080e <__addsf3+0xa6>
 80007e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007ea:	d306      	bcc.n	80007fa <__addsf3+0x92>
 80007ec:	0840      	lsrs	r0, r0, #1
 80007ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f2:	f102 0201 	add.w	r2, r2, #1
 80007f6:	2afe      	cmp	r2, #254	; 0xfe
 80007f8:	d251      	bcs.n	800089e <__addsf3+0x136>
 80007fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000802:	bf08      	it	eq
 8000804:	f020 0001 	biceq.w	r0, r0, #1
 8000808:	ea40 0003 	orr.w	r0, r0, r3
 800080c:	4770      	bx	lr
 800080e:	0049      	lsls	r1, r1, #1
 8000810:	eb40 0000 	adc.w	r0, r0, r0
 8000814:	3a01      	subs	r2, #1
 8000816:	bf28      	it	cs
 8000818:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800081c:	d2ed      	bcs.n	80007fa <__addsf3+0x92>
 800081e:	fab0 fc80 	clz	ip, r0
 8000822:	f1ac 0c08 	sub.w	ip, ip, #8
 8000826:	ebb2 020c 	subs.w	r2, r2, ip
 800082a:	fa00 f00c 	lsl.w	r0, r0, ip
 800082e:	bfaa      	itet	ge
 8000830:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000834:	4252      	neglt	r2, r2
 8000836:	4318      	orrge	r0, r3
 8000838:	bfbc      	itt	lt
 800083a:	40d0      	lsrlt	r0, r2
 800083c:	4318      	orrlt	r0, r3
 800083e:	4770      	bx	lr
 8000840:	f092 0f00 	teq	r2, #0
 8000844:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000848:	bf06      	itte	eq
 800084a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800084e:	3201      	addeq	r2, #1
 8000850:	3b01      	subne	r3, #1
 8000852:	e7b5      	b.n	80007c0 <__addsf3+0x58>
 8000854:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000858:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800085c:	bf18      	it	ne
 800085e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000862:	d021      	beq.n	80008a8 <__addsf3+0x140>
 8000864:	ea92 0f03 	teq	r2, r3
 8000868:	d004      	beq.n	8000874 <__addsf3+0x10c>
 800086a:	f092 0f00 	teq	r2, #0
 800086e:	bf08      	it	eq
 8000870:	4608      	moveq	r0, r1
 8000872:	4770      	bx	lr
 8000874:	ea90 0f01 	teq	r0, r1
 8000878:	bf1c      	itt	ne
 800087a:	2000      	movne	r0, #0
 800087c:	4770      	bxne	lr
 800087e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000882:	d104      	bne.n	800088e <__addsf3+0x126>
 8000884:	0040      	lsls	r0, r0, #1
 8000886:	bf28      	it	cs
 8000888:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000892:	bf3c      	itt	cc
 8000894:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000898:	4770      	bxcc	lr
 800089a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800089e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008a6:	4770      	bx	lr
 80008a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008ac:	bf16      	itet	ne
 80008ae:	4608      	movne	r0, r1
 80008b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008b4:	4601      	movne	r1, r0
 80008b6:	0242      	lsls	r2, r0, #9
 80008b8:	bf06      	itte	eq
 80008ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008be:	ea90 0f01 	teqeq	r0, r1
 80008c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_ui2f>:
 80008c8:	f04f 0300 	mov.w	r3, #0
 80008cc:	e004      	b.n	80008d8 <__aeabi_i2f+0x8>
 80008ce:	bf00      	nop

080008d0 <__aeabi_i2f>:
 80008d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80008d4:	bf48      	it	mi
 80008d6:	4240      	negmi	r0, r0
 80008d8:	ea5f 0c00 	movs.w	ip, r0
 80008dc:	bf08      	it	eq
 80008de:	4770      	bxeq	lr
 80008e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80008e4:	4601      	mov	r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	e01c      	b.n	8000926 <__aeabi_l2f+0x2a>

080008ec <__aeabi_ul2f>:
 80008ec:	ea50 0201 	orrs.w	r2, r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	e00a      	b.n	8000910 <__aeabi_l2f+0x14>
 80008fa:	bf00      	nop

080008fc <__aeabi_l2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000908:	d502      	bpl.n	8000910 <__aeabi_l2f+0x14>
 800090a:	4240      	negs	r0, r0
 800090c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000910:	ea5f 0c01 	movs.w	ip, r1
 8000914:	bf02      	ittt	eq
 8000916:	4684      	moveq	ip, r0
 8000918:	4601      	moveq	r1, r0
 800091a:	2000      	moveq	r0, #0
 800091c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000920:	bf08      	it	eq
 8000922:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000926:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800092a:	fabc f28c 	clz	r2, ip
 800092e:	3a08      	subs	r2, #8
 8000930:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000934:	db10      	blt.n	8000958 <__aeabi_l2f+0x5c>
 8000936:	fa01 fc02 	lsl.w	ip, r1, r2
 800093a:	4463      	add	r3, ip
 800093c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000940:	f1c2 0220 	rsb	r2, r2, #32
 8000944:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	eb43 0002 	adc.w	r0, r3, r2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f102 0220 	add.w	r2, r2, #32
 800095c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000960:	f1c2 0220 	rsb	r2, r2, #32
 8000964:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000968:	fa21 f202 	lsr.w	r2, r1, r2
 800096c:	eb43 0002 	adc.w	r0, r3, r2
 8000970:	bf08      	it	eq
 8000972:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000976:	4770      	bx	lr

08000978 <__aeabi_fmul>:
 8000978:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800097c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000980:	bf1e      	ittt	ne
 8000982:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000986:	ea92 0f0c 	teqne	r2, ip
 800098a:	ea93 0f0c 	teqne	r3, ip
 800098e:	d06f      	beq.n	8000a70 <__aeabi_fmul+0xf8>
 8000990:	441a      	add	r2, r3
 8000992:	ea80 0c01 	eor.w	ip, r0, r1
 8000996:	0240      	lsls	r0, r0, #9
 8000998:	bf18      	it	ne
 800099a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800099e:	d01e      	beq.n	80009de <__aeabi_fmul+0x66>
 80009a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009ac:	fba0 3101 	umull	r3, r1, r0, r1
 80009b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009b8:	bf3e      	ittt	cc
 80009ba:	0049      	lslcc	r1, r1, #1
 80009bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009c0:	005b      	lslcc	r3, r3, #1
 80009c2:	ea40 0001 	orr.w	r0, r0, r1
 80009c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009ca:	2afd      	cmp	r2, #253	; 0xfd
 80009cc:	d81d      	bhi.n	8000a0a <__aeabi_fmul+0x92>
 80009ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d6:	bf08      	it	eq
 80009d8:	f020 0001 	biceq.w	r0, r0, #1
 80009dc:	4770      	bx	lr
 80009de:	f090 0f00 	teq	r0, #0
 80009e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009e6:	bf08      	it	eq
 80009e8:	0249      	lsleq	r1, r1, #9
 80009ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009f2:	3a7f      	subs	r2, #127	; 0x7f
 80009f4:	bfc2      	ittt	gt
 80009f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009fe:	4770      	bxgt	lr
 8000a00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a04:	f04f 0300 	mov.w	r3, #0
 8000a08:	3a01      	subs	r2, #1
 8000a0a:	dc5d      	bgt.n	8000ac8 <__aeabi_fmul+0x150>
 8000a0c:	f112 0f19 	cmn.w	r2, #25
 8000a10:	bfdc      	itt	le
 8000a12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a16:	4770      	bxle	lr
 8000a18:	f1c2 0200 	rsb	r2, r2, #0
 8000a1c:	0041      	lsls	r1, r0, #1
 8000a1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a22:	f1c2 0220 	rsb	r2, r2, #32
 8000a26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a2e:	f140 0000 	adc.w	r0, r0, #0
 8000a32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a36:	bf08      	it	eq
 8000a38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a3c:	4770      	bx	lr
 8000a3e:	f092 0f00 	teq	r2, #0
 8000a42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a46:	bf02      	ittt	eq
 8000a48:	0040      	lsleq	r0, r0, #1
 8000a4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a4e:	3a01      	subeq	r2, #1
 8000a50:	d0f9      	beq.n	8000a46 <__aeabi_fmul+0xce>
 8000a52:	ea40 000c 	orr.w	r0, r0, ip
 8000a56:	f093 0f00 	teq	r3, #0
 8000a5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a5e:	bf02      	ittt	eq
 8000a60:	0049      	lsleq	r1, r1, #1
 8000a62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a66:	3b01      	subeq	r3, #1
 8000a68:	d0f9      	beq.n	8000a5e <__aeabi_fmul+0xe6>
 8000a6a:	ea41 010c 	orr.w	r1, r1, ip
 8000a6e:	e78f      	b.n	8000990 <__aeabi_fmul+0x18>
 8000a70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a74:	ea92 0f0c 	teq	r2, ip
 8000a78:	bf18      	it	ne
 8000a7a:	ea93 0f0c 	teqne	r3, ip
 8000a7e:	d00a      	beq.n	8000a96 <__aeabi_fmul+0x11e>
 8000a80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a84:	bf18      	it	ne
 8000a86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a8a:	d1d8      	bne.n	8000a3e <__aeabi_fmul+0xc6>
 8000a8c:	ea80 0001 	eor.w	r0, r0, r1
 8000a90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	4770      	bx	lr
 8000a96:	f090 0f00 	teq	r0, #0
 8000a9a:	bf17      	itett	ne
 8000a9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	f091 0f00 	teqne	r1, #0
 8000aa6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000aaa:	d014      	beq.n	8000ad6 <__aeabi_fmul+0x15e>
 8000aac:	ea92 0f0c 	teq	r2, ip
 8000ab0:	d101      	bne.n	8000ab6 <__aeabi_fmul+0x13e>
 8000ab2:	0242      	lsls	r2, r0, #9
 8000ab4:	d10f      	bne.n	8000ad6 <__aeabi_fmul+0x15e>
 8000ab6:	ea93 0f0c 	teq	r3, ip
 8000aba:	d103      	bne.n	8000ac4 <__aeabi_fmul+0x14c>
 8000abc:	024b      	lsls	r3, r1, #9
 8000abe:	bf18      	it	ne
 8000ac0:	4608      	movne	r0, r1
 8000ac2:	d108      	bne.n	8000ad6 <__aeabi_fmul+0x15e>
 8000ac4:	ea80 0001 	eor.w	r0, r0, r1
 8000ac8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ada:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_fdiv>:
 8000ae0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ae4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ae8:	bf1e      	ittt	ne
 8000aea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aee:	ea92 0f0c 	teqne	r2, ip
 8000af2:	ea93 0f0c 	teqne	r3, ip
 8000af6:	d069      	beq.n	8000bcc <__aeabi_fdiv+0xec>
 8000af8:	eba2 0203 	sub.w	r2, r2, r3
 8000afc:	ea80 0c01 	eor.w	ip, r0, r1
 8000b00:	0249      	lsls	r1, r1, #9
 8000b02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b06:	d037      	beq.n	8000b78 <__aeabi_fdiv+0x98>
 8000b08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	bf38      	it	cc
 8000b1c:	005b      	lslcc	r3, r3, #1
 8000b1e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b22:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b26:	428b      	cmp	r3, r1
 8000b28:	bf24      	itt	cs
 8000b2a:	1a5b      	subcs	r3, r3, r1
 8000b2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b34:	bf24      	itt	cs
 8000b36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b42:	bf24      	itt	cs
 8000b44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b50:	bf24      	itt	cs
 8000b52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	bf18      	it	ne
 8000b5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b62:	d1e0      	bne.n	8000b26 <__aeabi_fdiv+0x46>
 8000b64:	2afd      	cmp	r2, #253	; 0xfd
 8000b66:	f63f af50 	bhi.w	8000a0a <__aeabi_fmul+0x92>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b80:	327f      	adds	r2, #127	; 0x7f
 8000b82:	bfc2      	ittt	gt
 8000b84:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b8c:	4770      	bxgt	lr
 8000b8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b92:	f04f 0300 	mov.w	r3, #0
 8000b96:	3a01      	subs	r2, #1
 8000b98:	e737      	b.n	8000a0a <__aeabi_fmul+0x92>
 8000b9a:	f092 0f00 	teq	r2, #0
 8000b9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ba2:	bf02      	ittt	eq
 8000ba4:	0040      	lsleq	r0, r0, #1
 8000ba6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000baa:	3a01      	subeq	r2, #1
 8000bac:	d0f9      	beq.n	8000ba2 <__aeabi_fdiv+0xc2>
 8000bae:	ea40 000c 	orr.w	r0, r0, ip
 8000bb2:	f093 0f00 	teq	r3, #0
 8000bb6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bba:	bf02      	ittt	eq
 8000bbc:	0049      	lsleq	r1, r1, #1
 8000bbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bc2:	3b01      	subeq	r3, #1
 8000bc4:	d0f9      	beq.n	8000bba <__aeabi_fdiv+0xda>
 8000bc6:	ea41 010c 	orr.w	r1, r1, ip
 8000bca:	e795      	b.n	8000af8 <__aeabi_fdiv+0x18>
 8000bcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bd0:	ea92 0f0c 	teq	r2, ip
 8000bd4:	d108      	bne.n	8000be8 <__aeabi_fdiv+0x108>
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	f47f af7d 	bne.w	8000ad6 <__aeabi_fmul+0x15e>
 8000bdc:	ea93 0f0c 	teq	r3, ip
 8000be0:	f47f af70 	bne.w	8000ac4 <__aeabi_fmul+0x14c>
 8000be4:	4608      	mov	r0, r1
 8000be6:	e776      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000be8:	ea93 0f0c 	teq	r3, ip
 8000bec:	d104      	bne.n	8000bf8 <__aeabi_fdiv+0x118>
 8000bee:	024b      	lsls	r3, r1, #9
 8000bf0:	f43f af4c 	beq.w	8000a8c <__aeabi_fmul+0x114>
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e76e      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000bf8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000bfc:	bf18      	it	ne
 8000bfe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c02:	d1ca      	bne.n	8000b9a <__aeabi_fdiv+0xba>
 8000c04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c08:	f47f af5c 	bne.w	8000ac4 <__aeabi_fmul+0x14c>
 8000c0c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c10:	f47f af3c 	bne.w	8000a8c <__aeabi_fmul+0x114>
 8000c14:	e75f      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000c16:	bf00      	nop

08000c18 <__aeabi_f2uiz>:
 8000c18:	0042      	lsls	r2, r0, #1
 8000c1a:	d20e      	bcs.n	8000c3a <__aeabi_f2uiz+0x22>
 8000c1c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c20:	d30b      	bcc.n	8000c3a <__aeabi_f2uiz+0x22>
 8000c22:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c26:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c2a:	d409      	bmi.n	8000c40 <__aeabi_f2uiz+0x28>
 8000c2c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c34:	fa23 f002 	lsr.w	r0, r3, r2
 8000c38:	4770      	bx	lr
 8000c3a:	f04f 0000 	mov.w	r0, #0
 8000c3e:	4770      	bx	lr
 8000c40:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c44:	d101      	bne.n	8000c4a <__aeabi_f2uiz+0x32>
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	d102      	bne.n	8000c50 <__aeabi_f2uiz+0x38>
 8000c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5e:	f001 f95b 	bl	8001f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c62:	f000 f8f1 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c66:	f000 fb73 	bl	8001350 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6a:	f000 fb5b 	bl	8001324 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c6e:	f000 f947 	bl	8000f00 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000c72:	f000 f9af 	bl	8000fd4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c76:	f000 fa01 	bl	800107c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c7a:	f000 fa7f 	bl	800117c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c7e:	f000 facf 	bl	8001220 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c82:	2100      	movs	r1, #0
 8000c84:	485a      	ldr	r0, [pc, #360]	; (8000df0 <main+0x198>)
 8000c86:	f002 fef5 	bl	8003a74 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	4858      	ldr	r0, [pc, #352]	; (8000df0 <main+0x198>)
 8000c8e:	f002 fef1 	bl	8003a74 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c92:	2100      	movs	r1, #0
 8000c94:	4857      	ldr	r0, [pc, #348]	; (8000df4 <main+0x19c>)
 8000c96:	f002 feed 	bl	8003a74 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	4855      	ldr	r0, [pc, #340]	; (8000df4 <main+0x19c>)
 8000c9e:	f002 fee9 	bl	8003a74 <HAL_TIM_PWM_Start>
  	HAL_TIM_Base_Start_IT(&htim1);
 8000ca2:	4855      	ldr	r0, [pc, #340]	; (8000df8 <main+0x1a0>)
 8000ca4:	f002 fe3c 	bl	8003920 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim3);
 8000ca8:	4854      	ldr	r0, [pc, #336]	; (8000dfc <main+0x1a4>)
 8000caa:	f002 fe39 	bl	8003920 <HAL_TIM_Base_Start_IT>
	HAL_Delay(2000);
 8000cae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cb2:	f001 f993 	bl	8001fdc <HAL_Delay>
	mmode = 0;
 8000cb6:	4b52      	ldr	r3, [pc, #328]	; (8000e00 <main+0x1a8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
	status = 0;
 8000cbc:	4b51      	ldr	r3, [pc, #324]	; (8000e04 <main+0x1ac>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
	current_speed = 0;
 8000cc2:	4b51      	ldr	r3, [pc, #324]	; (8000e08 <main+0x1b0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, 200);
 8000cc8:	22c8      	movs	r2, #200	; 0xc8
 8000cca:	4950      	ldr	r1, [pc, #320]	; (8000e0c <main+0x1b4>)
 8000ccc:	4850      	ldr	r0, [pc, #320]	; (8000e10 <main+0x1b8>)
 8000cce:	f001 fa81 	bl	80021d4 <HAL_ADC_Start_DMA>
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, htim2.Init.Period);
 8000cd2:	4b47      	ldr	r3, [pc, #284]	; (8000df0 <main+0x198>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a46      	ldr	r2, [pc, #280]	; (8000df0 <main+0x198>)
 8000cd8:	68d2      	ldr	r2, [r2, #12]
 8000cda:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, htim2.Init.Period);
 8000cdc:	4b44      	ldr	r3, [pc, #272]	; (8000df0 <main+0x198>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a43      	ldr	r2, [pc, #268]	; (8000df0 <main+0x198>)
 8000ce2:	68d2      	ldr	r2, [r2, #12]
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor1, htim4.Init.Period);
 8000ce6:	4b43      	ldr	r3, [pc, #268]	; (8000df4 <main+0x19c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a42      	ldr	r2, [pc, #264]	; (8000df4 <main+0x19c>)
 8000cec:	68d2      	ldr	r2, [r2, #12]
 8000cee:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, htim4.Init.Period);
 8000cf0:	4b40      	ldr	r3, [pc, #256]	; (8000df4 <main+0x19c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a3f      	ldr	r2, [pc, #252]	; (8000df4 <main+0x19c>)
 8000cf6:	68d2      	ldr	r2, [r2, #12]
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		average_adc();
 8000cfa:	f000 fda1 	bl	8001840 <average_adc>
		t1 = adc_average_value[0];
 8000cfe:	4b45      	ldr	r3, [pc, #276]	; (8000e14 <main+0x1bc>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b44      	ldr	r3, [pc, #272]	; (8000e18 <main+0x1c0>)
 8000d06:	601a      	str	r2, [r3, #0]
		t2 = adc_average_value[1];
 8000d08:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <main+0x1bc>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b43      	ldr	r3, [pc, #268]	; (8000e1c <main+0x1c4>)
 8000d10:	601a      	str	r2, [r3, #0]
		t3 = adc_average_value[2];
 8000d12:	4b40      	ldr	r3, [pc, #256]	; (8000e14 <main+0x1bc>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b41      	ldr	r3, [pc, #260]	; (8000e20 <main+0x1c8>)
 8000d1a:	601a      	str	r2, [r3, #0]
		t4 = adc_average_value[3];
 8000d1c:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <main+0x1bc>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b40      	ldr	r3, [pc, #256]	; (8000e24 <main+0x1cc>)
 8000d24:	601a      	str	r2, [r3, #0]
		a = TIM1->CNT;
 8000d26:	4b40      	ldr	r3, [pc, #256]	; (8000e28 <main+0x1d0>)
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <main+0x1d4>)
 8000d2e:	601a      	str	r2, [r3, #0]
		b = TIM3->CNT;
 8000d30:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <main+0x1d8>)
 8000d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <main+0x1dc>)
 8000d38:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (mmode == 1) {
 8000d3a:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <main+0x1a8>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d11e      	bne.n	8000d82 <main+0x12a>
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000d44:	2006      	movs	r0, #6
 8000d46:	f001 fe5e 	bl	8002a06 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000d4a:	2007      	movs	r0, #7
 8000d4c:	f001 fe5b 	bl	8002a06 <HAL_NVIC_DisableIRQ>
			uint8_t d;

			HAL_Delay(2000);
 8000d50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d54:	f001 f942 	bl	8001fdc <HAL_Delay>
			go_straight(300, true);
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4837      	ldr	r0, [pc, #220]	; (8000e38 <main+0x1e0>)
 8000d5c:	f000 feac 	bl	8001ab8 <go_straight>
			turn_right90(&d);
 8000d60:	1cfb      	adds	r3, r7, #3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fde4 	bl	8001930 <turn_right90>

			/*
			start_fill();
			findShortestPath();
			*/
			HAL_Delay(500);
 8000d68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d6c:	f001 f936 	bl	8001fdc <HAL_Delay>
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d70:	2006      	movs	r0, #6
 8000d72:	f001 fe3a 	bl	80029ea <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d76:	2007      	movs	r0, #7
 8000d78:	f001 fe37 	bl	80029ea <HAL_NVIC_EnableIRQ>
			mmode = 0;
 8000d7c:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <main+0x1a8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
		}
		if (mmode == 2) {
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <main+0x1a8>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d1b6      	bne.n	8000cfa <main+0xa2>
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000d8c:	2006      	movs	r0, #6
 8000d8e:	f001 fe3a 	bl	8002a06 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000d92:	2007      	movs	r0, #7
 8000d94:	f001 fe37 	bl	8002a06 <HAL_NVIC_DisableIRQ>
			for(int i = 0; i <= 60; i+=5){
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	e020      	b.n	8000de0 <main+0x188>
				HAL_Delay(2000);
 8000d9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000da2:	f001 f91b 	bl	8001fdc <HAL_Delay>
				PID_params[current_speed][2] = i;
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <main+0x1b0>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4619      	mov	r1, r3
 8000dae:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <main+0x1e4>)
 8000db0:	460b      	mov	r3, r1
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	440b      	add	r3, r1
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	3308      	adds	r3, #8
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	601a      	str	r2, [r3, #0]
				c = i;
 8000dc0:	4a1f      	ldr	r2, [pc, #124]	; (8000e40 <main+0x1e8>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
				TIM1->CNT = 0;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <main+0x1d0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	625a      	str	r2, [r3, #36]	; 0x24
				TIM3->CNT = 0;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <main+0x1d8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
				go_straight(5000, true);
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	481b      	ldr	r0, [pc, #108]	; (8000e44 <main+0x1ec>)
 8000dd6:	f000 fe6f 	bl	8001ab8 <go_straight>
			for(int i = 0; i <= 60; i+=5){
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3305      	adds	r3, #5
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b3c      	cmp	r3, #60	; 0x3c
 8000de4:	dddb      	ble.n	8000d9e <main+0x146>
			HAL_Delay(500);
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
			*/

			mmode = 0;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <main+0x1a8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
		average_adc();
 8000dec:	e785      	b.n	8000cfa <main+0xa2>
 8000dee:	bf00      	nop
 8000df0:	20000108 	.word	0x20000108
 8000df4:	20000198 	.word	0x20000198
 8000df8:	200000c0 	.word	0x200000c0
 8000dfc:	20000150 	.word	0x20000150
 8000e00:	20000381 	.word	0x20000381
 8000e04:	20000382 	.word	0x20000382
 8000e08:	20000380 	.word	0x20000380
 8000e0c:	200001e0 	.word	0x200001e0
 8000e10:	2000004c 	.word	0x2000004c
 8000e14:	20000370 	.word	0x20000370
 8000e18:	20000390 	.word	0x20000390
 8000e1c:	20000394 	.word	0x20000394
 8000e20:	20000398 	.word	0x20000398
 8000e24:	2000039c 	.word	0x2000039c
 8000e28:	40012c00 	.word	0x40012c00
 8000e2c:	20000384 	.word	0x20000384
 8000e30:	40000400 	.word	0x40000400
 8000e34:	20000388 	.word	0x20000388
 8000e38:	43960000 	.word	0x43960000
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	2000038c 	.word	0x2000038c
 8000e44:	459c4000 	.word	0x459c4000

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	; 0x50
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e52:	2228      	movs	r2, #40	; 0x28
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 fd78 	bl	800494c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e86:	2301      	movs	r3, #1
 8000e88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e94:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 f85a 	bl	8002f58 <HAL_RCC_OscConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000eaa:	f000 faa5 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eae:	230f      	movs	r3, #15
 8000eb0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ebe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2102      	movs	r1, #2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 fac6 	bl	800345c <HAL_RCC_ClockConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ed6:	f000 fa8f 	bl	80013f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eda:	2302      	movs	r3, #2
 8000edc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ee2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 fc14 	bl	8003714 <HAL_RCCEx_PeriphCLKConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ef2:	f000 fa81 	bl	80013f8 <Error_Handler>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3750      	adds	r7, #80	; 0x50
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f10:	4b2e      	ldr	r3, [pc, #184]	; (8000fcc <MX_ADC1_Init+0xcc>)
 8000f12:	4a2f      	ldr	r2, [pc, #188]	; (8000fd0 <MX_ADC1_Init+0xd0>)
 8000f14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <MX_ADC1_Init+0xcc>)
 8000f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <MX_ADC1_Init+0xcc>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <MX_ADC1_Init+0xcc>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <MX_ADC1_Init+0xcc>)
 8000f2c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <MX_ADC1_Init+0xcc>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <MX_ADC1_Init+0xcc>)
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3e:	4823      	ldr	r0, [pc, #140]	; (8000fcc <MX_ADC1_Init+0xcc>)
 8000f40:	f001 f870 	bl	8002024 <HAL_ADC_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000f4a:	f000 fa55 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f52:	2301      	movs	r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000f56:	2304      	movs	r3, #4
 8000f58:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481b      	ldr	r0, [pc, #108]	; (8000fcc <MX_ADC1_Init+0xcc>)
 8000f60:	f001 fa32 	bl	80023c8 <HAL_ADC_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f6a:	f000 fa45 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f72:	2302      	movs	r3, #2
 8000f74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4814      	ldr	r0, [pc, #80]	; (8000fcc <MX_ADC1_Init+0xcc>)
 8000f7c:	f001 fa24 	bl	80023c8 <HAL_ADC_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000f86:	f000 fa37 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4619      	mov	r1, r3
 8000f96:	480d      	ldr	r0, [pc, #52]	; (8000fcc <MX_ADC1_Init+0xcc>)
 8000f98:	f001 fa16 	bl	80023c8 <HAL_ADC_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000fa2:	f000 fa29 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000faa:	2304      	movs	r3, #4
 8000fac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <MX_ADC1_Init+0xcc>)
 8000fb4:	f001 fa08 	bl	80023c8 <HAL_ADC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000fbe:	f000 fa1b 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000004c 	.word	0x2000004c
 8000fd0:	40012400 	.word	0x40012400

08000fd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <MX_TIM1_Init+0xa0>)
 8000ff4:	4a20      	ldr	r2, [pc, #128]	; (8001078 <MX_TIM1_Init+0xa4>)
 8000ff6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <MX_TIM1_Init+0xa0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <MX_TIM1_Init+0xa0>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <MX_TIM1_Init+0xa0>)
 8001006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800100a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <MX_TIM1_Init+0xa0>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <MX_TIM1_Init+0xa0>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <MX_TIM1_Init+0xa0>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800101e:	4815      	ldr	r0, [pc, #84]	; (8001074 <MX_TIM1_Init+0xa0>)
 8001020:	f002 fc2e 	bl	8003880 <HAL_TIM_Base_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800102a:	f000 f9e5 	bl	80013f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800102e:	2307      	movs	r3, #7
 8001030:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001032:	2340      	movs	r3, #64	; 0x40
 8001034:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 15;
 8001036:	230f      	movs	r3, #15
 8001038:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_TIM1_Init+0xa0>)
 8001042:	f003 f84a 	bl	80040da <HAL_TIM_SlaveConfigSynchro>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800104c:	f000 f9d4 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_TIM1_Init+0xa0>)
 800105e:	f003 fbe1 	bl	8004824 <HAL_TIMEx_MasterConfigSynchronization>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001068:	f000 f9c6 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200000c0 	.word	0x200000c0
 8001078:	40012c00 	.word	0x40012c00

0800107c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08e      	sub	sp, #56	; 0x38
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	f107 0320 	add.w	r3, r7, #32
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ac:	4b32      	ldr	r3, [pc, #200]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010b6:	220e      	movs	r2, #14
 80010b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010c2:	f241 3287 	movw	r2, #4999	; 0x1387
 80010c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ce:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010d4:	4828      	ldr	r0, [pc, #160]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010d6:	f002 fbd3 	bl	8003880 <HAL_TIM_Base_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80010e0:	f000 f98a 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4821      	ldr	r0, [pc, #132]	; (8001178 <MX_TIM2_Init+0xfc>)
 80010f2:	f002 ff2b 	bl	8003f4c <HAL_TIM_ConfigClockSource>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010fc:	f000 f97c 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001100:	481d      	ldr	r0, [pc, #116]	; (8001178 <MX_TIM2_Init+0xfc>)
 8001102:	f002 fc5f 	bl	80039c4 <HAL_TIM_PWM_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800110c:	f000 f974 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4619      	mov	r1, r3
 800111e:	4816      	ldr	r0, [pc, #88]	; (8001178 <MX_TIM2_Init+0xfc>)
 8001120:	f003 fb80 	bl	8004824 <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800112a:	f000 f965 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112e:	2360      	movs	r3, #96	; 0x60
 8001130:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	480c      	ldr	r0, [pc, #48]	; (8001178 <MX_TIM2_Init+0xfc>)
 8001146:	f002 fe3f 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001150:	f000 f952 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2204      	movs	r2, #4
 8001158:	4619      	mov	r1, r3
 800115a:	4807      	ldr	r0, [pc, #28]	; (8001178 <MX_TIM2_Init+0xfc>)
 800115c:	f002 fe34 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001166:	f000 f947 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <MX_TIM2_Init+0xfc>)
 800116c:	f000 fa86 	bl	800167c <HAL_TIM_MspPostInit>

}
 8001170:	bf00      	nop
 8001172:	3738      	adds	r7, #56	; 0x38
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000108 	.word	0x20000108

0800117c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800119a:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_TIM3_Init+0x9c>)
 800119c:	4a1f      	ldr	r2, [pc, #124]	; (800121c <MX_TIM3_Init+0xa0>)
 800119e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_TIM3_Init+0x9c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_TIM3_Init+0x9c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_TIM3_Init+0x9c>)
 80011ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <MX_TIM3_Init+0x9c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_TIM3_Init+0x9c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c0:	4815      	ldr	r0, [pc, #84]	; (8001218 <MX_TIM3_Init+0x9c>)
 80011c2:	f002 fb5d 	bl	8003880 <HAL_TIM_Base_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011cc:	f000 f914 	bl	80013f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80011d0:	2307      	movs	r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80011d4:	2340      	movs	r3, #64	; 0x40
 80011d6:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 15;
 80011d8:	230f      	movs	r3, #15
 80011da:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <MX_TIM3_Init+0x9c>)
 80011e4:	f002 ff79 	bl	80040da <HAL_TIM_SlaveConfigSynchro>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011ee:	f000 f903 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_TIM3_Init+0x9c>)
 8001200:	f003 fb10 	bl	8004824 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800120a:	f000 f8f5 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3720      	adds	r7, #32
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000150 	.word	0x20000150
 800121c:	40000400 	.word	0x40000400

08001220 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	; 0x38
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	615a      	str	r2, [r3, #20]
 800124e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001250:	4b32      	ldr	r3, [pc, #200]	; (800131c <MX_TIM4_Init+0xfc>)
 8001252:	4a33      	ldr	r2, [pc, #204]	; (8001320 <MX_TIM4_Init+0x100>)
 8001254:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 14;
 8001256:	4b31      	ldr	r3, [pc, #196]	; (800131c <MX_TIM4_Init+0xfc>)
 8001258:	220e      	movs	r2, #14
 800125a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125c:	4b2f      	ldr	r3, [pc, #188]	; (800131c <MX_TIM4_Init+0xfc>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <MX_TIM4_Init+0xfc>)
 8001264:	f241 3287 	movw	r2, #4999	; 0x1387
 8001268:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126a:	4b2c      	ldr	r3, [pc, #176]	; (800131c <MX_TIM4_Init+0xfc>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001270:	4b2a      	ldr	r3, [pc, #168]	; (800131c <MX_TIM4_Init+0xfc>)
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001276:	4829      	ldr	r0, [pc, #164]	; (800131c <MX_TIM4_Init+0xfc>)
 8001278:	f002 fb02 	bl	8003880 <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001282:	f000 f8b9 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800128c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001290:	4619      	mov	r1, r3
 8001292:	4822      	ldr	r0, [pc, #136]	; (800131c <MX_TIM4_Init+0xfc>)
 8001294:	f002 fe5a 	bl	8003f4c <HAL_TIM_ConfigClockSource>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800129e:	f000 f8ab 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012a2:	481e      	ldr	r0, [pc, #120]	; (800131c <MX_TIM4_Init+0xfc>)
 80012a4:	f002 fb8e 	bl	80039c4 <HAL_TIM_PWM_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80012ae:	f000 f8a3 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	4619      	mov	r1, r3
 80012c0:	4816      	ldr	r0, [pc, #88]	; (800131c <MX_TIM4_Init+0xfc>)
 80012c2:	f003 faaf 	bl	8004824 <HAL_TIMEx_MasterConfigSynchronization>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80012cc:	f000 f894 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d0:	2360      	movs	r3, #96	; 0x60
 80012d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2200      	movs	r2, #0
 80012e4:	4619      	mov	r1, r3
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <MX_TIM4_Init+0xfc>)
 80012e8:	f002 fd6e 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80012f2:	f000 f881 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2204      	movs	r2, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_TIM4_Init+0xfc>)
 80012fe:	f002 fd63 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001308:	f000 f876 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <MX_TIM4_Init+0xfc>)
 800130e:	f000 f9b5 	bl	800167c <HAL_TIM_MspPostInit>

}
 8001312:	bf00      	nop
 8001314:	3738      	adds	r7, #56	; 0x38
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000198 	.word	0x20000198
 8001320:	40000800 	.word	0x40000800

08001324 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_DMA_Init+0x28>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a07      	ldr	r2, [pc, #28]	; (800134c <MX_DMA_Init+0x28>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6153      	str	r3, [r2, #20]
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <MX_DMA_Init+0x28>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_GPIO_Init+0x9c>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a20      	ldr	r2, [pc, #128]	; (80013ec <MX_GPIO_Init+0x9c>)
 800136a:	f043 0320 	orr.w	r3, r3, #32
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_GPIO_Init+0x9c>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0320 	and.w	r3, r3, #32
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_GPIO_Init+0x9c>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a1a      	ldr	r2, [pc, #104]	; (80013ec <MX_GPIO_Init+0x9c>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_GPIO_Init+0x9c>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_GPIO_Init+0x9c>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <MX_GPIO_Init+0x9c>)
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_GPIO_Init+0x9c>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013ac:	2303      	movs	r3, #3
 80013ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_GPIO_Init+0xa0>)
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <MX_GPIO_Init+0xa4>)
 80013c0:	f001 fc24 	bl	8002c0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	2006      	movs	r0, #6
 80013ca:	f001 faf2 	bl	80029b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ce:	2006      	movs	r0, #6
 80013d0:	f001 fb0b 	bl	80029ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2100      	movs	r1, #0
 80013d8:	2007      	movs	r0, #7
 80013da:	f001 faea 	bl	80029b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013de:	2007      	movs	r0, #7
 80013e0:	f001 fb03 	bl	80029ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	10210000 	.word	0x10210000
 80013f4:	40010c00 	.word	0x40010c00

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001400:	e7fe      	b.n	8001400 <Error_Handler+0x8>
	...

08001404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_MspInit+0x5c>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a14      	ldr	r2, [pc, #80]	; (8001460 <HAL_MspInit+0x5c>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_MspInit+0x5c>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_MspInit+0x5c>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_MspInit+0x5c>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_MspInit+0x5c>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_MspInit+0x60>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_MspInit+0x60>)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000

08001468 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a28      	ldr	r2, [pc, #160]	; (8001524 <HAL_ADC_MspInit+0xbc>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d149      	bne.n	800151c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001488:	4b27      	ldr	r3, [pc, #156]	; (8001528 <HAL_ADC_MspInit+0xc0>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a26      	ldr	r2, [pc, #152]	; (8001528 <HAL_ADC_MspInit+0xc0>)
 800148e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <HAL_ADC_MspInit+0xc0>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <HAL_ADC_MspInit+0xc0>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a20      	ldr	r2, [pc, #128]	; (8001528 <HAL_ADC_MspInit+0xc0>)
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <HAL_ADC_MspInit+0xc0>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80014b8:	233c      	movs	r3, #60	; 0x3c
 80014ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014bc:	2303      	movs	r3, #3
 80014be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4619      	mov	r1, r3
 80014c6:	4819      	ldr	r0, [pc, #100]	; (800152c <HAL_ADC_MspInit+0xc4>)
 80014c8:	f001 fba0 	bl	8002c0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_ADC_MspInit+0xc8>)
 80014ce:	4a19      	ldr	r2, [pc, #100]	; (8001534 <HAL_ADC_MspInit+0xcc>)
 80014d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_ADC_MspInit+0xc8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_ADC_MspInit+0xc8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_ADC_MspInit+0xc8>)
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_ADC_MspInit+0xc8>)
 80014e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_ADC_MspInit+0xc8>)
 80014ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_ADC_MspInit+0xc8>)
 80014f6:	2220      	movs	r2, #32
 80014f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_ADC_MspInit+0xc8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001500:	480b      	ldr	r0, [pc, #44]	; (8001530 <HAL_ADC_MspInit+0xc8>)
 8001502:	f001 fa9b 	bl	8002a3c <HAL_DMA_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800150c:	f7ff ff74 	bl	80013f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_ADC_MspInit+0xc8>)
 8001514:	621a      	str	r2, [r3, #32]
 8001516:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_ADC_MspInit+0xc8>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40012400 	.word	0x40012400
 8001528:	40021000 	.word	0x40021000
 800152c:	40010800 	.word	0x40010800
 8001530:	2000007c 	.word	0x2000007c
 8001534:	40020008 	.word	0x40020008

08001538 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	; 0x30
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a45      	ldr	r2, [pc, #276]	; (8001668 <HAL_TIM_Base_MspInit+0x130>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d12d      	bne.n	80015b4 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001558:	4b44      	ldr	r3, [pc, #272]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a43      	ldr	r2, [pc, #268]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 800155e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b41      	ldr	r3, [pc, #260]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001570:	4b3e      	ldr	r3, [pc, #248]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a3d      	ldr	r2, [pc, #244]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b3b      	ldr	r3, [pc, #236]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 0320 	add.w	r3, r7, #32
 800159a:	4619      	mov	r1, r3
 800159c:	4834      	ldr	r0, [pc, #208]	; (8001670 <HAL_TIM_Base_MspInit+0x138>)
 800159e:	f001 fb35 	bl	8002c0c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	2019      	movs	r0, #25
 80015a8:	f001 fa03 	bl	80029b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80015ac:	2019      	movs	r0, #25
 80015ae:	f001 fa1c 	bl	80029ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015b2:	e054      	b.n	800165e <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015bc:	d10c      	bne.n	80015d8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a2a      	ldr	r2, [pc, #168]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	61d3      	str	r3, [r2, #28]
 80015ca:	4b28      	ldr	r3, [pc, #160]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697b      	ldr	r3, [r7, #20]
}
 80015d6:	e042      	b.n	800165e <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a25      	ldr	r2, [pc, #148]	; (8001674 <HAL_TIM_Base_MspInit+0x13c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12c      	bne.n	800163c <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015e2:	4b22      	ldr	r3, [pc, #136]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4a21      	ldr	r2, [pc, #132]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	61d3      	str	r3, [r2, #28]
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	4a1b      	ldr	r2, [pc, #108]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6193      	str	r3, [r2, #24]
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001612:	2340      	movs	r3, #64	; 0x40
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0320 	add.w	r3, r7, #32
 8001622:	4619      	mov	r1, r3
 8001624:	4812      	ldr	r0, [pc, #72]	; (8001670 <HAL_TIM_Base_MspInit+0x138>)
 8001626:	f001 faf1 	bl	8002c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	201d      	movs	r0, #29
 8001630:	f001 f9bf 	bl	80029b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001634:	201d      	movs	r0, #29
 8001636:	f001 f9d8 	bl	80029ea <HAL_NVIC_EnableIRQ>
}
 800163a:	e010      	b.n	800165e <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_TIM_Base_MspInit+0x140>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d10b      	bne.n	800165e <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	61d3      	str	r3, [r2, #28]
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_TIM_Base_MspInit+0x134>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
}
 800165e:	bf00      	nop
 8001660:	3730      	adds	r7, #48	; 0x30
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40012c00 	.word	0x40012c00
 800166c:	40021000 	.word	0x40021000
 8001670:	40010800 	.word	0x40010800
 8001674:	40000400 	.word	0x40000400
 8001678:	40000800 	.word	0x40000800

0800167c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800169a:	d143      	bne.n	8001724 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b32      	ldr	r3, [pc, #200]	; (8001768 <HAL_TIM_MspPostInit+0xec>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a31      	ldr	r2, [pc, #196]	; (8001768 <HAL_TIM_MspPostInit+0xec>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <HAL_TIM_MspPostInit+0xec>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b4:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <HAL_TIM_MspPostInit+0xec>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a2b      	ldr	r2, [pc, #172]	; (8001768 <HAL_TIM_MspPostInit+0xec>)
 80016ba:	f043 0308 	orr.w	r3, r3, #8
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b29      	ldr	r3, [pc, #164]	; (8001768 <HAL_TIM_MspPostInit+0xec>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2302      	movs	r3, #2
 80016d8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4822      	ldr	r0, [pc, #136]	; (800176c <HAL_TIM_MspPostInit+0xf0>)
 80016e2:	f001 fa93 	bl	8002c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016e6:	2308      	movs	r3, #8
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2302      	movs	r3, #2
 80016f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	481d      	ldr	r0, [pc, #116]	; (8001770 <HAL_TIM_MspPostInit+0xf4>)
 80016fa:	f001 fa87 	bl	8002c0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_TIM_MspPostInit+0xf8>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
 800171c:	4a15      	ldr	r2, [pc, #84]	; (8001774 <HAL_TIM_MspPostInit+0xf8>)
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001722:	e01c      	b.n	800175e <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM4)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a13      	ldr	r2, [pc, #76]	; (8001778 <HAL_TIM_MspPostInit+0xfc>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d117      	bne.n	800175e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_TIM_MspPostInit+0xec>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <HAL_TIM_MspPostInit+0xec>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	6193      	str	r3, [r2, #24]
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_TIM_MspPostInit+0xec>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001746:	23c0      	movs	r3, #192	; 0xc0
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2302      	movs	r3, #2
 8001750:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <HAL_TIM_MspPostInit+0xf4>)
 800175a:	f001 fa57 	bl	8002c0c <HAL_GPIO_Init>
}
 800175e:	bf00      	nop
 8001760:	3728      	adds	r7, #40	; 0x28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	40010800 	.word	0x40010800
 8001770:	40010c00 	.word	0x40010c00
 8001774:	40010000 	.word	0x40010000
 8001778:	40000800 	.word	0x40000800

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001780:	e7fe      	b.n	8001780 <NMI_Handler+0x4>

08001782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <MemManage_Handler+0x4>

0800178e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <UsageFault_Handler+0x4>

0800179a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c2:	f000 fbef 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80017d0:	2001      	movs	r0, #1
 80017d2:	f001 fb9f 	bl	8002f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	mmode = 2;
 80017d6:	4b02      	ldr	r3, [pc, #8]	; (80017e0 <EXTI0_IRQHandler+0x14>)
 80017d8:	2202      	movs	r2, #2
 80017da:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000381 	.word	0x20000381

080017e4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80017e8:	2002      	movs	r0, #2
 80017ea:	f001 fb93 	bl	8002f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	mmode = 1;
 80017ee:	4b02      	ldr	r3, [pc, #8]	; (80017f8 <EXTI1_IRQHandler+0x14>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000381 	.word	0x20000381

080017fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	status = 0;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <TIM1_UP_IRQHandler+0x14>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001806:	4803      	ldr	r0, [pc, #12]	; (8001814 <TIM1_UP_IRQHandler+0x18>)
 8001808:	f002 f9d6 	bl	8003bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000382 	.word	0x20000382
 8001814:	200000c0 	.word	0x200000c0

08001818 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	status = 0;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <TIM3_IRQHandler+0x14>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001822:	4803      	ldr	r0, [pc, #12]	; (8001830 <TIM3_IRQHandler+0x18>)
 8001824:	f002 f9c8 	bl	8003bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000382 	.word	0x20000382
 8001830:	20000150 	.word	0x20000150

08001834 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <average_adc>:

const float uturn_arc_en = (float)halfSize_MicroMouse * M_PI * 2 * (180.0/360) * counts_per_1mm;
const float turn90_arc_en = (float)halfSize_MicroMouse * M_PI * 4 * (90.0/360) * counts_per_1mm;
const float turn45_arc_en = (float)halfSize_MicroMouse * M_PI * 4 * (45.0/360) * counts_per_1mm;

void average_adc(){
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
	adc_average_value[0] = adc_average_value[1] = adc_average_value[2] = adc_average_value[3] = 0;
 8001846:	4b36      	ldr	r3, [pc, #216]	; (8001920 <average_adc+0xe0>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	4b34      	ldr	r3, [pc, #208]	; (8001920 <average_adc+0xe0>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4a33      	ldr	r2, [pc, #204]	; (8001920 <average_adc+0xe0>)
 8001852:	6093      	str	r3, [r2, #8]
 8001854:	4b32      	ldr	r3, [pc, #200]	; (8001920 <average_adc+0xe0>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a31      	ldr	r2, [pc, #196]	; (8001920 <average_adc+0xe0>)
 800185a:	6053      	str	r3, [r2, #4]
 800185c:	4b30      	ldr	r3, [pc, #192]	; (8001920 <average_adc+0xe0>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a2f      	ldr	r2, [pc, #188]	; (8001920 <average_adc+0xe0>)
 8001862:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 50; i++){
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	e031      	b.n	80018ce <average_adc+0x8e>
		adc_average_value[0]+=adc_value[4 * i];
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4a2d      	ldr	r2, [pc, #180]	; (8001924 <average_adc+0xe4>)
 8001870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001874:	b29a      	uxth	r2, r3
 8001876:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <average_adc+0xe0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a28      	ldr	r2, [pc, #160]	; (8001920 <average_adc+0xe0>)
 800187e:	6013      	str	r3, [r2, #0]
		adc_average_value[1]+=adc_value[4 * i + 1];
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	3301      	adds	r3, #1
 8001886:	4a27      	ldr	r2, [pc, #156]	; (8001924 <average_adc+0xe4>)
 8001888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <average_adc+0xe0>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4413      	add	r3, r2
 8001894:	4a22      	ldr	r2, [pc, #136]	; (8001920 <average_adc+0xe0>)
 8001896:	6053      	str	r3, [r2, #4]
		adc_average_value[2]+=adc_value[4 * i + 2];
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	4a21      	ldr	r2, [pc, #132]	; (8001924 <average_adc+0xe4>)
 80018a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <average_adc+0xe0>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a1c      	ldr	r2, [pc, #112]	; (8001920 <average_adc+0xe0>)
 80018ae:	6093      	str	r3, [r2, #8]
		adc_average_value[3]+=adc_value[4 * i + 3];
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	3303      	adds	r3, #3
 80018b6:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <average_adc+0xe4>)
 80018b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <average_adc+0xe0>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a16      	ldr	r2, [pc, #88]	; (8001920 <average_adc+0xe0>)
 80018c6:	60d3      	str	r3, [r2, #12]
	for(int i = 0; i < 50; i++){
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3301      	adds	r3, #1
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b31      	cmp	r3, #49	; 0x31
 80018d2:	ddca      	ble.n	800186a <average_adc+0x2a>
	}
	adc_average_value[0]/=50;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <average_adc+0xe0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a13      	ldr	r2, [pc, #76]	; (8001928 <average_adc+0xe8>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <average_adc+0xe0>)
 80018e2:	6013      	str	r3, [r2, #0]
	adc_average_value[1]/=50;
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <average_adc+0xe0>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <average_adc+0xe8>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <average_adc+0xe0>)
 80018f2:	6053      	str	r3, [r2, #4]
	adc_average_value[2]/=50;
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <average_adc+0xe0>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <average_adc+0xe8>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	4a07      	ldr	r2, [pc, #28]	; (8001920 <average_adc+0xe0>)
 8001902:	6093      	str	r3, [r2, #8]
	adc_average_value[3]/=50;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <average_adc+0xe0>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <average_adc+0xe8>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	4a03      	ldr	r2, [pc, #12]	; (8001920 <average_adc+0xe0>)
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000370 	.word	0x20000370
 8001924:	200001e0 	.word	0x200001e0
 8001928:	51eb851f 	.word	0x51eb851f
 800192c:	00000000 	.word	0x00000000

08001930 <turn_right90>:
		__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, htim4.Init.Period - (2100 - 1000 * round((TIM3->CNT)/turn90_arc_en)));
	}
	brake();
}

void turn_right90(uint8_t *direction) {
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	HAL_Delay(200);
 8001938:	20c8      	movs	r0, #200	; 0xc8
 800193a:	f000 fb4f 	bl	8001fdc <HAL_Delay>
	switch(*direction){
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b03      	cmp	r3, #3
 8001944:	d81a      	bhi.n	800197c <turn_right90+0x4c>
 8001946:	a201      	add	r2, pc, #4	; (adr r2, 800194c <turn_right90+0x1c>)
 8001948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194c:	0800195d 	.word	0x0800195d
 8001950:	08001965 	.word	0x08001965
 8001954:	0800196d 	.word	0x0800196d
 8001958:	08001975 	.word	0x08001975
		case west:  *direction = north; break;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	e00b      	b.n	800197c <turn_right90+0x4c>
		case east:  *direction = south; break;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2203      	movs	r2, #3
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	e007      	b.n	800197c <turn_right90+0x4c>
		case north: *direction = east;  break;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	e003      	b.n	800197c <turn_right90+0x4c>
		case south: *direction = west;  break;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	bf00      	nop
	}
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(turn90_arc_en));
 800197c:	4b46      	ldr	r3, [pc, #280]	; (8001a98 <turn_right90+0x168>)
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fe74 	bl	800066c <__aeabi_f2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f002 ffe6 	bl	800495c <round>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4941      	ldr	r1, [pc, #260]	; (8001a9c <turn_right90+0x16c>)
 8001996:	680c      	ldr	r4, [r1, #0]
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7fe febe 	bl	800071c <__aeabi_d2uiz>
 80019a0:	4603      	mov	r3, r0
 80019a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80019a4:	4b3c      	ldr	r3, [pc, #240]	; (8001a98 <turn_right90+0x168>)
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fe60 	bl	800066c <__aeabi_f2d>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f002 ffd2 	bl	800495c <round>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7fe feac 	bl	800071c <__aeabi_d2uiz>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4a35      	ldr	r2, [pc, #212]	; (8001a9c <turn_right90+0x16c>)
 80019c8:	60d3      	str	r3, [r2, #12]
	TIM1->CNT = 0;
 80019ca:	4b35      	ldr	r3, [pc, #212]	; (8001aa0 <turn_right90+0x170>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = 0;
 80019d0:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <turn_right90+0x174>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24
	status = turn_right_90;
 80019d6:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <turn_right90+0x178>)
 80019d8:	22ff      	movs	r2, #255	; 0xff
 80019da:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, htim2.Init.Period);
 80019dc:	4b33      	ldr	r3, [pc, #204]	; (8001aac <turn_right90+0x17c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a32      	ldr	r2, [pc, #200]	; (8001aac <turn_right90+0x17c>)
 80019e2:	68d2      	ldr	r2, [r2, #12]
 80019e4:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, htim2.Init.Period);
 80019e6:	4b31      	ldr	r3, [pc, #196]	; (8001aac <turn_right90+0x17c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a30      	ldr	r2, [pc, #192]	; (8001aac <turn_right90+0x17c>)
 80019ec:	68d2      	ldr	r2, [r2, #12]
 80019ee:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor1, htim4.Init.Period);
 80019f0:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <turn_right90+0x180>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a2e      	ldr	r2, [pc, #184]	; (8001ab0 <turn_right90+0x180>)
 80019f6:	68d2      	ldr	r2, [r2, #12]
 80019f8:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, htim4.Init.Period);
 80019fa:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <turn_right90+0x180>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a2c      	ldr	r2, [pc, #176]	; (8001ab0 <turn_right90+0x180>)
 8001a00:	68d2      	ldr	r2, [r2, #12]
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34

	while(status != 0){
 8001a04:	e037      	b.n	8001a76 <turn_right90+0x146>
		__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, htim2.Init.Period - (2100 - 1000 * round((TIM1->CNT)/turn90_arc_en)));
 8001a06:	4b29      	ldr	r3, [pc, #164]	; (8001aac <turn_right90+0x17c>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fe0c 	bl	8000628 <__aeabi_ui2d>
 8001a10:	4604      	mov	r4, r0
 8001a12:	460d      	mov	r5, r1
 8001a14:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <turn_right90+0x170>)
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe ff55 	bl	80008c8 <__aeabi_ui2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <turn_right90+0x168>)
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f85b 	bl	8000ae0 <__aeabi_fdiv>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fe1d 	bl	800066c <__aeabi_f2d>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f002 ff8f 	bl	800495c <round>
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <turn_right90+0x184>)
 8001a44:	f7fe fb84 	bl	8000150 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	a110      	add	r1, pc, #64	; (adr r1, 8001a90 <turn_right90+0x160>)
 8001a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a52:	f7fe fcab 	bl	80003ac <__aeabi_dsub>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	f7fe fca5 	bl	80003ac <__aeabi_dsub>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4911      	ldr	r1, [pc, #68]	; (8001aac <turn_right90+0x17c>)
 8001a68:	680c      	ldr	r4, [r1, #0]
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f7fe fe55 	bl	800071c <__aeabi_d2uiz>
 8001a72:	4603      	mov	r3, r0
 8001a74:	6363      	str	r3, [r4, #52]	; 0x34
	while(status != 0){
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <turn_right90+0x178>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1c2      	bne.n	8001a06 <turn_right90+0xd6>
	}
	brake();
 8001a80:	f000 f9fc 	bl	8001e7c <brake>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8c:	f3af 8000 	nop.w
 8001a90:	00000000 	.word	0x00000000
 8001a94:	40a06800 	.word	0x40a06800
 8001a98:	4232d2d3 	.word	0x4232d2d3
 8001a9c:	200000c0 	.word	0x200000c0
 8001aa0:	40012c00 	.word	0x40012c00
 8001aa4:	40000400 	.word	0x40000400
 8001aa8:	20000382 	.word	0x20000382
 8001aac:	20000108 	.word	0x20000108
 8001ab0:	20000198 	.word	0x20000198
 8001ab4:	408f4000 	.word	0x408f4000

08001ab8 <go_straight>:

void go_straight(float distance, bool brakee) { //millimeter
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b08c      	sub	sp, #48	; 0x30
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(200);
 8001ac4:	20c8      	movs	r0, #200	; 0xc8
 8001ac6:	f000 fa89 	bl	8001fdc <HAL_Delay>
	uint16_t en = round(distance * counts_per_1mm);
 8001aca:	4b68      	ldr	r3, [pc, #416]	; (8001c6c <go_straight+0x1b4>)
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe ff52 	bl	8000978 <__aeabi_fmul>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fdc8 	bl	800066c <__aeabi_f2d>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f002 ff3a 	bl	800495c <round>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	f7fe fe14 	bl	800071c <__aeabi_d2uiz>
 8001af4:	4603      	mov	r3, r0
 8001af6:	837b      	strh	r3, [r7, #26]
	__HAL_TIM_SET_AUTORELOAD(&htim1, en);
 8001af8:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <go_straight+0x1b8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	8b7a      	ldrh	r2, [r7, #26]
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b00:	8b7b      	ldrh	r3, [r7, #26]
 8001b02:	4a5b      	ldr	r2, [pc, #364]	; (8001c70 <go_straight+0x1b8>)
 8001b04:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, UINT16_MAX);
 8001b06:	4b5b      	ldr	r3, [pc, #364]	; (8001c74 <go_straight+0x1bc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b10:	4b58      	ldr	r3, [pc, #352]	; (8001c74 <go_straight+0x1bc>)
 8001b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b16:	60da      	str	r2, [r3, #12]
	status = straight;
 8001b18:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <go_straight+0x1c0>)
 8001b1a:	22fa      	movs	r2, #250	; 0xfa
 8001b1c:	701a      	strb	r2, [r3, #0]
	TIM1 -> CNT = 0;
 8001b1e:	4b57      	ldr	r3, [pc, #348]	; (8001c7c <go_straight+0x1c4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3 -> CNT = 0;
 8001b24:	4b56      	ldr	r3, [pc, #344]	; (8001c80 <go_straight+0x1c8>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
	int32_t Err, pErr, P, D, It, total;
	int32_t temp_1, temp_3;
	bool useIRSensor = true;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	77fb      	strb	r3, [r7, #31]
	while(status != 0){
 8001b2e:	e186      	b.n	8001e3e <go_straight+0x386>
		average_adc();
 8001b30:	f7ff fe86 	bl	8001840 <average_adc>
		if(left_sensor45 > leftWallValue && right_sensor45 > rightWallValue){
 8001b34:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <go_straight+0x1cc>)
 8001b36:	889b      	ldrh	r3, [r3, #4]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b64      	cmp	r3, #100	; 0x64
 8001b3c:	d91b      	bls.n	8001b76 <go_straight+0xbe>
 8001b3e:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <go_straight+0x1cc>)
 8001b40:	885b      	ldrh	r3, [r3, #2]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b64      	cmp	r3, #100	; 0x64
 8001b46:	d916      	bls.n	8001b76 <go_straight+0xbe>
			Err = left_sensor45 - right_sensor45 - 10;
 8001b48:	4b4e      	ldr	r3, [pc, #312]	; (8001c84 <go_straight+0x1cc>)
 8001b4a:	889b      	ldrh	r3, [r3, #4]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <go_straight+0x1cc>)
 8001b52:	885b      	ldrh	r3, [r3, #2]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	3b0a      	subs	r3, #10
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(!useIRSensor){
 8001b5c:	7ffb      	ldrb	r3, [r7, #31]
 8001b5e:	f083 0301 	eor.w	r3, r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d052      	beq.n	8001c0e <go_straight+0x156>
				pErr = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
				It = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
				useIRSensor = true;
 8001b70:	2301      	movs	r3, #1
 8001b72:	77fb      	strb	r3, [r7, #31]
			if(!useIRSensor){
 8001b74:	e04b      	b.n	8001c0e <go_straight+0x156>
			}
		} else if(left_sensor45 > leftWallValue){
 8001b76:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <go_straight+0x1cc>)
 8001b78:	889b      	ldrh	r3, [r3, #4]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	2b64      	cmp	r3, #100	; 0x64
 8001b7e:	d911      	bls.n	8001ba4 <go_straight+0xec>
			Err = left_sensor45 - leftWallValue;
 8001b80:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <go_straight+0x1cc>)
 8001b82:	889b      	ldrh	r3, [r3, #4]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	3b64      	subs	r3, #100	; 0x64
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(!useIRSensor){
 8001b8a:	7ffb      	ldrb	r3, [r7, #31]
 8001b8c:	f083 0301 	eor.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d03b      	beq.n	8001c0e <go_straight+0x156>
				pErr = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
				It = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
				useIRSensor = true;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	77fb      	strb	r3, [r7, #31]
 8001ba2:	e034      	b.n	8001c0e <go_straight+0x156>
			}
		} else if(right_sensor45 > rightWallValue){
 8001ba4:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <go_straight+0x1cc>)
 8001ba6:	885b      	ldrh	r3, [r3, #2]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d912      	bls.n	8001bd4 <go_straight+0x11c>
			Err = rightWallValue - right_sensor45;
 8001bae:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <go_straight+0x1cc>)
 8001bb0:	885b      	ldrh	r3, [r3, #2]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(!useIRSensor){
 8001bba:	7ffb      	ldrb	r3, [r7, #31]
 8001bbc:	f083 0301 	eor.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d023      	beq.n	8001c0e <go_straight+0x156>
				pErr = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
				It = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
				useIRSensor = true;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	77fb      	strb	r3, [r7, #31]
 8001bd2:	e01c      	b.n	8001c0e <go_straight+0x156>
			}
		} else {
			temp_1 = TIM1->CNT;
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <go_straight+0x1c4>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	617b      	str	r3, [r7, #20]
			temp_3 = TIM3->CNT;
 8001bda:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <go_straight+0x1c8>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	613b      	str	r3, [r7, #16]
			Err = temp_3 - temp_1;
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(useIRSensor){
 8001be8:	7ffb      	ldrb	r3, [r7, #31]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <go_straight+0x142>
				pErr = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
				It = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
				useIRSensor = false;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	77fb      	strb	r3, [r7, #31]
			}
			a = TIM1->CNT;
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <go_straight+0x1c4>)
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <go_straight+0x1d0>)
 8001c02:	601a      	str	r2, [r3, #0]
			b = TIM3->CNT;
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <go_straight+0x1c8>)
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <go_straight+0x1d4>)
 8001c0c:	601a      	str	r2, [r3, #0]
		}
		if(useIRSensor){
 8001c0e:	7ffb      	ldrb	r3, [r7, #31]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d03f      	beq.n	8001c94 <go_straight+0x1dc>
			P = PID_params[2][0] * Err;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <go_straight+0x1d8>)
 8001c16:	699a      	ldr	r2, [r3, #24]
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	60fb      	str	r3, [r7, #12]
			It = It + (Err * PID_params[2][1]);
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <go_straight+0x1d8>)
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c26:	fb02 f303 	mul.w	r3, r2, r3
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2c:	4413      	add	r3, r2
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
			if(It > 200){ It = 200; }
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	2bc8      	cmp	r3, #200	; 0xc8
 8001c34:	dd01      	ble.n	8001c3a <go_straight+0x182>
 8001c36:	23c8      	movs	r3, #200	; 0xc8
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
			if(It < -200){ It = -200; }
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8001c40:	da02      	bge.n	8001c48 <go_straight+0x190>
 8001c42:	f06f 03c7 	mvn.w	r3, #199	; 0xc7
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
			D = PID_params[2][2] * (Err - pErr);
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <go_straight+0x1d8>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c50:	1a8a      	subs	r2, r1, r2
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
 8001c56:	60bb      	str	r3, [r7, #8]
			pErr = Err;
 8001c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
			total = P + It + D;
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	4413      	add	r3, r2
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	4413      	add	r3, r2
 8001c66:	623b      	str	r3, [r7, #32]
 8001c68:	e05b      	b.n	8001d22 <go_straight+0x26a>
 8001c6a:	bf00      	nop
 8001c6c:	3ebfbc22 	.word	0x3ebfbc22
 8001c70:	200000c0 	.word	0x200000c0
 8001c74:	20000150 	.word	0x20000150
 8001c78:	20000382 	.word	0x20000382
 8001c7c:	40012c00 	.word	0x40012c00
 8001c80:	40000400 	.word	0x40000400
 8001c84:	200001e0 	.word	0x200001e0
 8001c88:	20000384 	.word	0x20000384
 8001c8c:	20000388 	.word	0x20000388
 8001c90:	20000000 	.word	0x20000000
		} else {
			P = PID_params[current_speed][0] * Err;
 8001c94:	4b71      	ldr	r3, [pc, #452]	; (8001e5c <go_straight+0x3a4>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4a70      	ldr	r2, [pc, #448]	; (8001e60 <go_straight+0x3a8>)
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	440b      	add	r3, r1
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	60fb      	str	r3, [r7, #12]
			It = It + (Err * PID_params[current_speed][1]);
 8001cb2:	4b6a      	ldr	r3, [pc, #424]	; (8001e5c <go_straight+0x3a4>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4a69      	ldr	r2, [pc, #420]	; (8001e60 <go_straight+0x3a8>)
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	440b      	add	r3, r1
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd2:	4413      	add	r3, r2
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
			if(It > 200){ It = 200; }
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	2bc8      	cmp	r3, #200	; 0xc8
 8001cda:	dd01      	ble.n	8001ce0 <go_straight+0x228>
 8001cdc:	23c8      	movs	r3, #200	; 0xc8
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
			if(It < -200){ It = -200; }
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8001ce6:	da02      	bge.n	8001cee <go_straight+0x236>
 8001ce8:	f06f 03c7 	mvn.w	r3, #199	; 0xc7
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
			D = PID_params[current_speed][2] * (Err - pErr);
 8001cee:	4b5b      	ldr	r3, [pc, #364]	; (8001e5c <go_straight+0x3a4>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4a5a      	ldr	r2, [pc, #360]	; (8001e60 <go_straight+0x3a8>)
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	440b      	add	r3, r1
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	3308      	adds	r3, #8
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d0a:	1a8a      	subs	r2, r1, r2
 8001d0c:	fb02 f303 	mul.w	r3, r2, r3
 8001d10:	60bb      	str	r3, [r7, #8]
			pErr = Err;
 8001d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
			total = P + It + D;
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	4413      	add	r3, r2
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	4413      	add	r3, r2
 8001d20:	623b      	str	r3, [r7, #32]
		}
		uint16_t speed = speed_levels[current_speed];
 8001d22:	4b4e      	ldr	r3, [pc, #312]	; (8001e5c <go_straight+0x3a4>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b4e      	ldr	r3, [pc, #312]	; (8001e64 <go_straight+0x3ac>)
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d30:	83bb      	strh	r3, [r7, #28]
		if(current_speed == 1){
 8001d32:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <go_straight+0x3a4>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d164      	bne.n	8001e06 <go_straight+0x34e>
			if(TIM1->CNT < en/2){
 8001d3c:	4b4a      	ldr	r3, [pc, #296]	; (8001e68 <go_straight+0x3b0>)
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	8b7a      	ldrh	r2, [r7, #26]
 8001d42:	0852      	lsrs	r2, r2, #1
 8001d44:	b292      	uxth	r2, r2
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d22d      	bcs.n	8001da6 <go_straight+0x2ee>
				speed = speed_levels[1] - 500*(1 - (float)TIM1->CNT/(en/2));
 8001d4a:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <go_straight+0x3ac>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fdbe 	bl	80008d0 <__aeabi_i2f>
 8001d54:	4604      	mov	r4, r0
 8001d56:	4b44      	ldr	r3, [pc, #272]	; (8001e68 <go_straight+0x3b0>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fdb4 	bl	80008c8 <__aeabi_ui2f>
 8001d60:	4605      	mov	r5, r0
 8001d62:	8b7b      	ldrh	r3, [r7, #26]
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fdb1 	bl	80008d0 <__aeabi_i2f>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4619      	mov	r1, r3
 8001d72:	4628      	mov	r0, r5
 8001d74:	f7fe feb4 	bl	8000ae0 <__aeabi_fdiv>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001d80:	f7fe fcf0 	bl	8000764 <__aeabi_fsub>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4939      	ldr	r1, [pc, #228]	; (8001e6c <go_straight+0x3b4>)
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fdf5 	bl	8000978 <__aeabi_fmul>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4619      	mov	r1, r3
 8001d92:	4620      	mov	r0, r4
 8001d94:	f7fe fce6 	bl	8000764 <__aeabi_fsub>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ff3c 	bl	8000c18 <__aeabi_f2uiz>
 8001da0:	4603      	mov	r3, r0
 8001da2:	83bb      	strh	r3, [r7, #28]
 8001da4:	e02f      	b.n	8001e06 <go_straight+0x34e>
			} else{
				speed = speed_levels[1] - 500*((float)TIM1->CNT/en * 2 - 1);
 8001da6:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <go_straight+0x3ac>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fd90 	bl	80008d0 <__aeabi_i2f>
 8001db0:	4604      	mov	r4, r0
 8001db2:	4b2d      	ldr	r3, [pc, #180]	; (8001e68 <go_straight+0x3b0>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fd86 	bl	80008c8 <__aeabi_ui2f>
 8001dbc:	4605      	mov	r5, r0
 8001dbe:	8b7b      	ldrh	r3, [r7, #26]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fd85 	bl	80008d0 <__aeabi_i2f>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4628      	mov	r0, r5
 8001dcc:	f7fe fe88 	bl	8000ae0 <__aeabi_fdiv>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fcc7 	bl	8000768 <__addsf3>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fcbf 	bl	8000764 <__aeabi_fsub>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4920      	ldr	r1, [pc, #128]	; (8001e6c <go_straight+0x3b4>)
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fdc4 	bl	8000978 <__aeabi_fmul>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4619      	mov	r1, r3
 8001df4:	4620      	mov	r0, r4
 8001df6:	f7fe fcb5 	bl	8000764 <__aeabi_fsub>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe ff0b 	bl	8000c18 <__aeabi_f2uiz>
 8001e02:	4603      	mov	r3, r0
 8001e04:	83bb      	strh	r3, [r7, #28]
			}
		}
		__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, htim2.Init.Period);
 8001e06:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <go_straight+0x3b8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <go_straight+0x3b8>)
 8001e0c:	68d2      	ldr	r2, [r2, #12]
 8001e0e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, htim2.Init.Period - speed - total);
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <go_straight+0x3b8>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	8bbb      	ldrh	r3, [r7, #28]
 8001e16:	1ad1      	subs	r1, r2, r3
 8001e18:	6a3a      	ldr	r2, [r7, #32]
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <go_straight+0x3b8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	1a8a      	subs	r2, r1, r2
 8001e20:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, R_Motor1, htim4.Init.Period);
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <go_straight+0x3bc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <go_straight+0x3bc>)
 8001e28:	68d2      	ldr	r2, [r2, #12]
 8001e2a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, htim4.Init.Period - speed + total);
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <go_straight+0x3bc>)
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	8bbb      	ldrh	r3, [r7, #28]
 8001e32:	1ad1      	subs	r1, r2, r3
 8001e34:	6a3a      	ldr	r2, [r7, #32]
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <go_straight+0x3bc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	440a      	add	r2, r1
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34
	while(status != 0){
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <go_straight+0x3c0>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	b25b      	sxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f47f ae73 	bne.w	8001b30 <go_straight+0x78>
	}
	if(brakee){
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <go_straight+0x39c>
		brake();
 8001e50:	f000 f814 	bl	8001e7c <brake>
	}
}
 8001e54:	bf00      	nop
 8001e56:	3730      	adds	r7, #48	; 0x30
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e5c:	20000380 	.word	0x20000380
 8001e60:	20000000 	.word	0x20000000
 8001e64:	08004a0c 	.word	0x08004a0c
 8001e68:	40012c00 	.word	0x40012c00
 8001e6c:	43fa0000 	.word	0x43fa0000
 8001e70:	20000108 	.word	0x20000108
 8001e74:	20000198 	.word	0x20000198
 8001e78:	20000382 	.word	0x20000382

08001e7c <brake>:

void brake(){
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor1, htim2.Init.Period);
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <brake+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <brake+0x40>)
 8001e86:	68d2      	ldr	r2, [r2, #12]
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, L_Motor2, htim2.Init.Period);
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <brake+0x40>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <brake+0x40>)
 8001e90:	68d2      	ldr	r2, [r2, #12]
 8001e92:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor1, htim4.Init.Period);
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <brake+0x44>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <brake+0x44>)
 8001e9a:	68d2      	ldr	r2, [r2, #12]
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, R_Motor2, htim4.Init.Period);
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <brake+0x44>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <brake+0x44>)
 8001ea4:	68d2      	ldr	r2, [r2, #12]
 8001ea6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CNT = 0;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <brake+0x48>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = 0;
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <brake+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	20000108 	.word	0x20000108
 8001ec0:	20000198 	.word	0x20000198
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	40000400 	.word	0x40000400

08001ecc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ecc:	f7ff fcb2 	bl	8001834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed0:	480b      	ldr	r0, [pc, #44]	; (8001f00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ed2:	490c      	ldr	r1, [pc, #48]	; (8001f04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ee8:	4c09      	ldr	r4, [pc, #36]	; (8001f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f002 fd05 	bl	8004904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001efa:	f7fe fead 	bl	8000c58 <main>
  bx lr
 8001efe:	4770      	bx	lr
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001f08:	08004a40 	.word	0x08004a40
  ldr r2, =_sbss
 8001f0c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001f10:	200003a4 	.word	0x200003a4

08001f14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC1_2_IRQHandler>
	...

08001f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_Init+0x28>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_Init+0x28>)
 8001f22:	f043 0310 	orr.w	r3, r3, #16
 8001f26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f000 fd37 	bl	800299c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2e:	200f      	movs	r0, #15
 8001f30:	f000 f808 	bl	8001f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f34:	f7ff fa66 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40022000 	.word	0x40022000

08001f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_InitTick+0x54>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_InitTick+0x58>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4619      	mov	r1, r3
 8001f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fd5d 	bl	8002a22 <HAL_SYSTICK_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00e      	b.n	8001f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b0f      	cmp	r3, #15
 8001f76:	d80a      	bhi.n	8001f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f000 fd17 	bl	80029b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f84:	4a06      	ldr	r2, [pc, #24]	; (8001fa0 <HAL_InitTick+0x5c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000024 	.word	0x20000024
 8001f9c:	2000002c 	.word	0x2000002c
 8001fa0:	20000028 	.word	0x20000028

08001fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_IncTick+0x1c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_IncTick+0x20>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <HAL_IncTick+0x20>)
 8001fb6:	6013      	str	r3, [r2, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	2000002c 	.word	0x2000002c
 8001fc4:	200003a0 	.word	0x200003a0

08001fc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b02      	ldr	r3, [pc, #8]	; (8001fd8 <HAL_GetTick+0x10>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	200003a0 	.word	0x200003a0

08001fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff fff0 	bl	8001fc8 <HAL_GetTick>
 8001fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d005      	beq.n	8002002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_Delay+0x44>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002002:	bf00      	nop
 8002004:	f7ff ffe0 	bl	8001fc8 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d8f7      	bhi.n	8002004 <HAL_Delay+0x28>
  {
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	2000002c 	.word	0x2000002c

08002024 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e0be      	b.n	80021c4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	d109      	bne.n	8002068 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fa00 	bl	8001468 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 faff 	bl	800266c <ADC_ConversionStop_Disable>
 800206e:	4603      	mov	r3, r0
 8002070:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 8099 	bne.w	80021b2 <HAL_ADC_Init+0x18e>
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 8095 	bne.w	80021b2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002090:	f023 0302 	bic.w	r3, r3, #2
 8002094:	f043 0202 	orr.w	r2, r3, #2
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7b1b      	ldrb	r3, [r3, #12]
 80020aa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020ac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020bc:	d003      	beq.n	80020c6 <HAL_ADC_Init+0xa2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d102      	bne.n	80020cc <HAL_ADC_Init+0xa8>
 80020c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ca:	e000      	b.n	80020ce <HAL_ADC_Init+0xaa>
 80020cc:	2300      	movs	r3, #0
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7d1b      	ldrb	r3, [r3, #20]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d119      	bne.n	8002110 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7b1b      	ldrb	r3, [r3, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	035a      	lsls	r2, r3, #13
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	e00b      	b.n	8002110 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	f043 0220 	orr.w	r2, r3, #32
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	f043 0201 	orr.w	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	430a      	orrs	r2, r1
 8002122:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	4b28      	ldr	r3, [pc, #160]	; (80021cc <HAL_ADC_Init+0x1a8>)
 800212c:	4013      	ands	r3, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	68b9      	ldr	r1, [r7, #8]
 8002134:	430b      	orrs	r3, r1
 8002136:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002140:	d003      	beq.n	800214a <HAL_ADC_Init+0x126>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d104      	bne.n	8002154 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	3b01      	subs	r3, #1
 8002150:	051b      	lsls	r3, r3, #20
 8002152:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	430a      	orrs	r2, r1
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <HAL_ADC_Init+0x1ac>)
 8002170:	4013      	ands	r3, r2
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	429a      	cmp	r2, r3
 8002176:	d10b      	bne.n	8002190 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	f023 0303 	bic.w	r3, r3, #3
 8002186:	f043 0201 	orr.w	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800218e:	e018      	b.n	80021c2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	f023 0312 	bic.w	r3, r3, #18
 8002198:	f043 0210 	orr.w	r2, r3, #16
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	f043 0201 	orr.w	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021b0:	e007      	b.n	80021c2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	f043 0210 	orr.w	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	ffe1f7fd 	.word	0xffe1f7fd
 80021d0:	ff1f0efe 	.word	0xff1f0efe

080021d4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a64      	ldr	r2, [pc, #400]	; (800237c <HAL_ADC_Start_DMA+0x1a8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d004      	beq.n	80021f8 <HAL_ADC_Start_DMA+0x24>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a63      	ldr	r2, [pc, #396]	; (8002380 <HAL_ADC_Start_DMA+0x1ac>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d106      	bne.n	8002206 <HAL_ADC_Start_DMA+0x32>
 80021f8:	4b60      	ldr	r3, [pc, #384]	; (800237c <HAL_ADC_Start_DMA+0x1a8>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 80b3 	bne.w	800236c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_ADC_Start_DMA+0x40>
 8002210:	2302      	movs	r3, #2
 8002212:	e0ae      	b.n	8002372 <HAL_ADC_Start_DMA+0x19e>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f9cb 	bl	80025b8 <ADC_Enable>
 8002222:	4603      	mov	r3, r0
 8002224:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002226:	7dfb      	ldrb	r3, [r7, #23]
 8002228:	2b00      	cmp	r3, #0
 800222a:	f040 809a 	bne.w	8002362 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002236:	f023 0301 	bic.w	r3, r3, #1
 800223a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a4e      	ldr	r2, [pc, #312]	; (8002380 <HAL_ADC_Start_DMA+0x1ac>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d105      	bne.n	8002258 <HAL_ADC_Start_DMA+0x84>
 800224c:	4b4b      	ldr	r3, [pc, #300]	; (800237c <HAL_ADC_Start_DMA+0x1a8>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d115      	bne.n	8002284 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226e:	2b00      	cmp	r3, #0
 8002270:	d026      	beq.n	80022c0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800227a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002282:	e01d      	b.n	80022c0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a39      	ldr	r2, [pc, #228]	; (800237c <HAL_ADC_Start_DMA+0x1a8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d004      	beq.n	80022a4 <HAL_ADC_Start_DMA+0xd0>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a38      	ldr	r2, [pc, #224]	; (8002380 <HAL_ADC_Start_DMA+0x1ac>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d10d      	bne.n	80022c0 <HAL_ADC_Start_DMA+0xec>
 80022a4:	4b35      	ldr	r3, [pc, #212]	; (800237c <HAL_ADC_Start_DMA+0x1a8>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d006      	beq.n	80022da <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	f023 0206 	bic.w	r2, r3, #6
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80022d8:	e002      	b.n	80022e0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4a25      	ldr	r2, [pc, #148]	; (8002384 <HAL_ADC_Start_DMA+0x1b0>)
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4a24      	ldr	r2, [pc, #144]	; (8002388 <HAL_ADC_Start_DMA+0x1b4>)
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4a23      	ldr	r2, [pc, #140]	; (800238c <HAL_ADC_Start_DMA+0x1b8>)
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0202 	mvn.w	r2, #2
 8002308:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002318:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a18      	ldr	r0, [r3, #32]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	334c      	adds	r3, #76	; 0x4c
 8002324:	4619      	mov	r1, r3
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f000 fbe1 	bl	8002af0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002338:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800233c:	d108      	bne.n	8002350 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800234c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800234e:	e00f      	b.n	8002370 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800235e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002360:	e006      	b.n	8002370 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800236a:	e001      	b.n	8002370 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002370:	7dfb      	ldrb	r3, [r7, #23]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40012400 	.word	0x40012400
 8002380:	40012800 	.word	0x40012800
 8002384:	080026ef 	.word	0x080026ef
 8002388:	0800276b 	.word	0x0800276b
 800238c:	08002787 	.word	0x08002787

08002390 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x20>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e0dc      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x1da>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b06      	cmp	r3, #6
 80023f6:	d81c      	bhi.n	8002432 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	3b05      	subs	r3, #5
 800240a:	221f      	movs	r2, #31
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	4019      	ands	r1, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	3b05      	subs	r3, #5
 8002424:	fa00 f203 	lsl.w	r2, r0, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	635a      	str	r2, [r3, #52]	; 0x34
 8002430:	e03c      	b.n	80024ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d81c      	bhi.n	8002474 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	3b23      	subs	r3, #35	; 0x23
 800244c:	221f      	movs	r2, #31
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	4019      	ands	r1, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	3b23      	subs	r3, #35	; 0x23
 8002466:	fa00 f203 	lsl.w	r2, r0, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
 8002472:	e01b      	b.n	80024ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	3b41      	subs	r3, #65	; 0x41
 8002486:	221f      	movs	r2, #31
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	4019      	ands	r1, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	3b41      	subs	r3, #65	; 0x41
 80024a0:	fa00 f203 	lsl.w	r2, r0, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b09      	cmp	r3, #9
 80024b2:	d91c      	bls.n	80024ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68d9      	ldr	r1, [r3, #12]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	3b1e      	subs	r3, #30
 80024c6:	2207      	movs	r2, #7
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	4019      	ands	r1, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6898      	ldr	r0, [r3, #8]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	3b1e      	subs	r3, #30
 80024e0:	fa00 f203 	lsl.w	r2, r0, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	60da      	str	r2, [r3, #12]
 80024ec:	e019      	b.n	8002522 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6919      	ldr	r1, [r3, #16]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	2207      	movs	r2, #7
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	4019      	ands	r1, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6898      	ldr	r0, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	fa00 f203 	lsl.w	r2, r0, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b10      	cmp	r3, #16
 8002528:	d003      	beq.n	8002532 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800252e:	2b11      	cmp	r3, #17
 8002530:	d132      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <HAL_ADC_ConfigChannel+0x1e4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d125      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d126      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002558:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b10      	cmp	r3, #16
 8002560:	d11a      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a13      	ldr	r2, [pc, #76]	; (80025b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	0c9a      	lsrs	r2, r3, #18
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002578:	e002      	b.n	8002580 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	3b01      	subs	r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f9      	bne.n	800257a <HAL_ADC_ConfigChannel+0x1b2>
 8002586:	e007      	b.n	8002598 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	40012400 	.word	0x40012400
 80025b0:	20000024 	.word	0x20000024
 80025b4:	431bde83 	.word	0x431bde83

080025b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d040      	beq.n	8002658 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025e6:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <ADC_Enable+0xac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1f      	ldr	r2, [pc, #124]	; (8002668 <ADC_Enable+0xb0>)
 80025ec:	fba2 2303 	umull	r2, r3, r2, r3
 80025f0:	0c9b      	lsrs	r3, r3, #18
 80025f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025f4:	e002      	b.n	80025fc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f9      	bne.n	80025f6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002602:	f7ff fce1 	bl	8001fc8 <HAL_GetTick>
 8002606:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002608:	e01f      	b.n	800264a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800260a:	f7ff fcdd 	bl	8001fc8 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d918      	bls.n	800264a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d011      	beq.n	800264a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	f043 0210 	orr.w	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e007      	b.n	800265a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d1d8      	bne.n	800260a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000024 	.word	0x20000024
 8002668:	431bde83 	.word	0x431bde83

0800266c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b01      	cmp	r3, #1
 8002684:	d12e      	bne.n	80026e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002696:	f7ff fc97 	bl	8001fc8 <HAL_GetTick>
 800269a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800269c:	e01b      	b.n	80026d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800269e:	f7ff fc93 	bl	8001fc8 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d914      	bls.n	80026d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10d      	bne.n	80026d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	f043 0210 	orr.w	r2, r3, #16
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	f043 0201 	orr.w	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e007      	b.n	80026e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d0dc      	beq.n	800269e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002704:	2b00      	cmp	r3, #0
 8002706:	d127      	bne.n	8002758 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800271e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002722:	d115      	bne.n	8002750 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002728:	2b00      	cmp	r3, #0
 800272a:	d111      	bne.n	8002750 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d105      	bne.n	8002750 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7ff fe1d 	bl	8002390 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002756:	e004      	b.n	8002762 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	4798      	blx	r3
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff fe12 	bl	80023a2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff fe01 	bl	80023b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027d8:	4013      	ands	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ee:	4a04      	ldr	r2, [pc, #16]	; (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	60d3      	str	r3, [r2, #12]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <__NVIC_GetPriorityGrouping+0x18>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	f003 0307 	and.w	r3, r3, #7
}
 8002812:	4618      	mov	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	2b00      	cmp	r3, #0
 8002830:	db0b      	blt.n	800284a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	f003 021f 	and.w	r2, r3, #31
 8002838:	4906      	ldr	r1, [pc, #24]	; (8002854 <__NVIC_EnableIRQ+0x34>)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	2001      	movs	r0, #1
 8002842:	fa00 f202 	lsl.w	r2, r0, r2
 8002846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	e000e100 	.word	0xe000e100

08002858 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db12      	blt.n	8002890 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	490a      	ldr	r1, [pc, #40]	; (800289c <__NVIC_DisableIRQ+0x44>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2001      	movs	r0, #1
 800287a:	fa00 f202 	lsl.w	r2, r0, r2
 800287e:	3320      	adds	r3, #32
 8002880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002884:	f3bf 8f4f 	dsb	sy
}
 8002888:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800288a:	f3bf 8f6f 	isb	sy
}
 800288e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000e100 	.word	0xe000e100

080028a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	6039      	str	r1, [r7, #0]
 80028aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	db0a      	blt.n	80028ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	490c      	ldr	r1, [pc, #48]	; (80028ec <__NVIC_SetPriority+0x4c>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	0112      	lsls	r2, r2, #4
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	440b      	add	r3, r1
 80028c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c8:	e00a      	b.n	80028e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4908      	ldr	r1, [pc, #32]	; (80028f0 <__NVIC_SetPriority+0x50>)
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	3b04      	subs	r3, #4
 80028d8:	0112      	lsls	r2, r2, #4
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	440b      	add	r3, r1
 80028de:	761a      	strb	r2, [r3, #24]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	e000e100 	.word	0xe000e100
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	; 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f1c3 0307 	rsb	r3, r3, #7
 800290e:	2b04      	cmp	r3, #4
 8002910:	bf28      	it	cs
 8002912:	2304      	movcs	r3, #4
 8002914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3304      	adds	r3, #4
 800291a:	2b06      	cmp	r3, #6
 800291c:	d902      	bls.n	8002924 <NVIC_EncodePriority+0x30>
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3b03      	subs	r3, #3
 8002922:	e000      	b.n	8002926 <NVIC_EncodePriority+0x32>
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	f04f 32ff 	mov.w	r2, #4294967295
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	401a      	ands	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800293c:	f04f 31ff 	mov.w	r1, #4294967295
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43d9      	mvns	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	4313      	orrs	r3, r2
         );
}
 800294e:	4618      	mov	r0, r3
 8002950:	3724      	adds	r7, #36	; 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002968:	d301      	bcc.n	800296e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800296a:	2301      	movs	r3, #1
 800296c:	e00f      	b.n	800298e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <SysTick_Config+0x40>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002976:	210f      	movs	r1, #15
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	f7ff ff90 	bl	80028a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <SysTick_Config+0x40>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <SysTick_Config+0x40>)
 8002988:	2207      	movs	r2, #7
 800298a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	e000e010 	.word	0xe000e010

0800299c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ff09 	bl	80027bc <__NVIC_SetPriorityGrouping>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c4:	f7ff ff1e 	bl	8002804 <__NVIC_GetPriorityGrouping>
 80029c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	6978      	ldr	r0, [r7, #20]
 80029d0:	f7ff ff90 	bl	80028f4 <NVIC_EncodePriority>
 80029d4:	4602      	mov	r2, r0
 80029d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff5f 	bl	80028a0 <__NVIC_SetPriority>
}
 80029e2:	bf00      	nop
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff11 	bl	8002820 <__NVIC_EnableIRQ>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff1f 	bl	8002858 <__NVIC_DisableIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ff94 	bl	8002958 <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e043      	b.n	8002ada <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <HAL_DMA_Init+0xa8>)
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <HAL_DMA_Init+0xac>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	009a      	lsls	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <HAL_DMA_Init+0xb0>)
 8002a6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	bffdfff8 	.word	0xbffdfff8
 8002ae8:	cccccccd 	.word	0xcccccccd
 8002aec:	40020000 	.word	0x40020000

08002af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_DMA_Start_IT+0x20>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e04b      	b.n	8002ba8 <HAL_DMA_Start_IT+0xb8>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d13a      	bne.n	8002b9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 f831 	bl	8002bb0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 020e 	orr.w	r2, r2, #14
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	e00f      	b.n	8002b88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0204 	bic.w	r2, r2, #4
 8002b76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 020a 	orr.w	r2, r2, #10
 8002b86:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	e005      	b.n	8002ba6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bcc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b10      	cmp	r3, #16
 8002bdc:	d108      	bne.n	8002bf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bee:	e007      	b.n	8002c00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	60da      	str	r2, [r3, #12]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr
	...

08002c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b08b      	sub	sp, #44	; 0x2c
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c16:	2300      	movs	r3, #0
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c1e:	e169      	b.n	8002ef4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c20:	2201      	movs	r2, #1
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	f040 8158 	bne.w	8002eee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4a9a      	ldr	r2, [pc, #616]	; (8002eac <HAL_GPIO_Init+0x2a0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d05e      	beq.n	8002d06 <HAL_GPIO_Init+0xfa>
 8002c48:	4a98      	ldr	r2, [pc, #608]	; (8002eac <HAL_GPIO_Init+0x2a0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d875      	bhi.n	8002d3a <HAL_GPIO_Init+0x12e>
 8002c4e:	4a98      	ldr	r2, [pc, #608]	; (8002eb0 <HAL_GPIO_Init+0x2a4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d058      	beq.n	8002d06 <HAL_GPIO_Init+0xfa>
 8002c54:	4a96      	ldr	r2, [pc, #600]	; (8002eb0 <HAL_GPIO_Init+0x2a4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d86f      	bhi.n	8002d3a <HAL_GPIO_Init+0x12e>
 8002c5a:	4a96      	ldr	r2, [pc, #600]	; (8002eb4 <HAL_GPIO_Init+0x2a8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d052      	beq.n	8002d06 <HAL_GPIO_Init+0xfa>
 8002c60:	4a94      	ldr	r2, [pc, #592]	; (8002eb4 <HAL_GPIO_Init+0x2a8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d869      	bhi.n	8002d3a <HAL_GPIO_Init+0x12e>
 8002c66:	4a94      	ldr	r2, [pc, #592]	; (8002eb8 <HAL_GPIO_Init+0x2ac>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d04c      	beq.n	8002d06 <HAL_GPIO_Init+0xfa>
 8002c6c:	4a92      	ldr	r2, [pc, #584]	; (8002eb8 <HAL_GPIO_Init+0x2ac>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d863      	bhi.n	8002d3a <HAL_GPIO_Init+0x12e>
 8002c72:	4a92      	ldr	r2, [pc, #584]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d046      	beq.n	8002d06 <HAL_GPIO_Init+0xfa>
 8002c78:	4a90      	ldr	r2, [pc, #576]	; (8002ebc <HAL_GPIO_Init+0x2b0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d85d      	bhi.n	8002d3a <HAL_GPIO_Init+0x12e>
 8002c7e:	2b12      	cmp	r3, #18
 8002c80:	d82a      	bhi.n	8002cd8 <HAL_GPIO_Init+0xcc>
 8002c82:	2b12      	cmp	r3, #18
 8002c84:	d859      	bhi.n	8002d3a <HAL_GPIO_Init+0x12e>
 8002c86:	a201      	add	r2, pc, #4	; (adr r2, 8002c8c <HAL_GPIO_Init+0x80>)
 8002c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8c:	08002d07 	.word	0x08002d07
 8002c90:	08002ce1 	.word	0x08002ce1
 8002c94:	08002cf3 	.word	0x08002cf3
 8002c98:	08002d35 	.word	0x08002d35
 8002c9c:	08002d3b 	.word	0x08002d3b
 8002ca0:	08002d3b 	.word	0x08002d3b
 8002ca4:	08002d3b 	.word	0x08002d3b
 8002ca8:	08002d3b 	.word	0x08002d3b
 8002cac:	08002d3b 	.word	0x08002d3b
 8002cb0:	08002d3b 	.word	0x08002d3b
 8002cb4:	08002d3b 	.word	0x08002d3b
 8002cb8:	08002d3b 	.word	0x08002d3b
 8002cbc:	08002d3b 	.word	0x08002d3b
 8002cc0:	08002d3b 	.word	0x08002d3b
 8002cc4:	08002d3b 	.word	0x08002d3b
 8002cc8:	08002d3b 	.word	0x08002d3b
 8002ccc:	08002d3b 	.word	0x08002d3b
 8002cd0:	08002ce9 	.word	0x08002ce9
 8002cd4:	08002cfd 	.word	0x08002cfd
 8002cd8:	4a79      	ldr	r2, [pc, #484]	; (8002ec0 <HAL_GPIO_Init+0x2b4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cde:	e02c      	b.n	8002d3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	623b      	str	r3, [r7, #32]
          break;
 8002ce6:	e029      	b.n	8002d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	3304      	adds	r3, #4
 8002cee:	623b      	str	r3, [r7, #32]
          break;
 8002cf0:	e024      	b.n	8002d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	3308      	adds	r3, #8
 8002cf8:	623b      	str	r3, [r7, #32]
          break;
 8002cfa:	e01f      	b.n	8002d3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	330c      	adds	r3, #12
 8002d02:	623b      	str	r3, [r7, #32]
          break;
 8002d04:	e01a      	b.n	8002d3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d102      	bne.n	8002d14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d0e:	2304      	movs	r3, #4
 8002d10:	623b      	str	r3, [r7, #32]
          break;
 8002d12:	e013      	b.n	8002d3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d105      	bne.n	8002d28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d1c:	2308      	movs	r3, #8
 8002d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	611a      	str	r2, [r3, #16]
          break;
 8002d26:	e009      	b.n	8002d3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d28:	2308      	movs	r3, #8
 8002d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69fa      	ldr	r2, [r7, #28]
 8002d30:	615a      	str	r2, [r3, #20]
          break;
 8002d32:	e003      	b.n	8002d3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d34:	2300      	movs	r3, #0
 8002d36:	623b      	str	r3, [r7, #32]
          break;
 8002d38:	e000      	b.n	8002d3c <HAL_GPIO_Init+0x130>
          break;
 8002d3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2bff      	cmp	r3, #255	; 0xff
 8002d40:	d801      	bhi.n	8002d46 <HAL_GPIO_Init+0x13a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	e001      	b.n	8002d4a <HAL_GPIO_Init+0x13e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2bff      	cmp	r3, #255	; 0xff
 8002d50:	d802      	bhi.n	8002d58 <HAL_GPIO_Init+0x14c>
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	e002      	b.n	8002d5e <HAL_GPIO_Init+0x152>
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	3b08      	subs	r3, #8
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	210f      	movs	r1, #15
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	401a      	ands	r2, r3
 8002d70:	6a39      	ldr	r1, [r7, #32]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80b1 	beq.w	8002eee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d8c:	4b4d      	ldr	r3, [pc, #308]	; (8002ec4 <HAL_GPIO_Init+0x2b8>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	4a4c      	ldr	r2, [pc, #304]	; (8002ec4 <HAL_GPIO_Init+0x2b8>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6193      	str	r3, [r2, #24]
 8002d98:	4b4a      	ldr	r3, [pc, #296]	; (8002ec4 <HAL_GPIO_Init+0x2b8>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002da4:	4a48      	ldr	r2, [pc, #288]	; (8002ec8 <HAL_GPIO_Init+0x2bc>)
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	089b      	lsrs	r3, r3, #2
 8002daa:	3302      	adds	r3, #2
 8002dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a40      	ldr	r2, [pc, #256]	; (8002ecc <HAL_GPIO_Init+0x2c0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d013      	beq.n	8002df8 <HAL_GPIO_Init+0x1ec>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a3f      	ldr	r2, [pc, #252]	; (8002ed0 <HAL_GPIO_Init+0x2c4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00d      	beq.n	8002df4 <HAL_GPIO_Init+0x1e8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a3e      	ldr	r2, [pc, #248]	; (8002ed4 <HAL_GPIO_Init+0x2c8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d007      	beq.n	8002df0 <HAL_GPIO_Init+0x1e4>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a3d      	ldr	r2, [pc, #244]	; (8002ed8 <HAL_GPIO_Init+0x2cc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_GPIO_Init+0x1e0>
 8002de8:	2303      	movs	r3, #3
 8002dea:	e006      	b.n	8002dfa <HAL_GPIO_Init+0x1ee>
 8002dec:	2304      	movs	r3, #4
 8002dee:	e004      	b.n	8002dfa <HAL_GPIO_Init+0x1ee>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e002      	b.n	8002dfa <HAL_GPIO_Init+0x1ee>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <HAL_GPIO_Init+0x1ee>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfc:	f002 0203 	and.w	r2, r2, #3
 8002e00:	0092      	lsls	r2, r2, #2
 8002e02:	4093      	lsls	r3, r2
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e0a:	492f      	ldr	r1, [pc, #188]	; (8002ec8 <HAL_GPIO_Init+0x2bc>)
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	3302      	adds	r3, #2
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d006      	beq.n	8002e32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e24:	4b2d      	ldr	r3, [pc, #180]	; (8002edc <HAL_GPIO_Init+0x2d0>)
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	492c      	ldr	r1, [pc, #176]	; (8002edc <HAL_GPIO_Init+0x2d0>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	608b      	str	r3, [r1, #8]
 8002e30:	e006      	b.n	8002e40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e32:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <HAL_GPIO_Init+0x2d0>)
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	4928      	ldr	r1, [pc, #160]	; (8002edc <HAL_GPIO_Init+0x2d0>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d006      	beq.n	8002e5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e4c:	4b23      	ldr	r3, [pc, #140]	; (8002edc <HAL_GPIO_Init+0x2d0>)
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	4922      	ldr	r1, [pc, #136]	; (8002edc <HAL_GPIO_Init+0x2d0>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60cb      	str	r3, [r1, #12]
 8002e58:	e006      	b.n	8002e68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <HAL_GPIO_Init+0x2d0>)
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	491e      	ldr	r1, [pc, #120]	; (8002edc <HAL_GPIO_Init+0x2d0>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d006      	beq.n	8002e82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <HAL_GPIO_Init+0x2d0>)
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4918      	ldr	r1, [pc, #96]	; (8002edc <HAL_GPIO_Init+0x2d0>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
 8002e80:	e006      	b.n	8002e90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e82:	4b16      	ldr	r3, [pc, #88]	; (8002edc <HAL_GPIO_Init+0x2d0>)
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	4914      	ldr	r1, [pc, #80]	; (8002edc <HAL_GPIO_Init+0x2d0>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d021      	beq.n	8002ee0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_GPIO_Init+0x2d0>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	490e      	ldr	r1, [pc, #56]	; (8002edc <HAL_GPIO_Init+0x2d0>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]
 8002ea8:	e021      	b.n	8002eee <HAL_GPIO_Init+0x2e2>
 8002eaa:	bf00      	nop
 8002eac:	10320000 	.word	0x10320000
 8002eb0:	10310000 	.word	0x10310000
 8002eb4:	10220000 	.word	0x10220000
 8002eb8:	10210000 	.word	0x10210000
 8002ebc:	10120000 	.word	0x10120000
 8002ec0:	10110000 	.word	0x10110000
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	40010800 	.word	0x40010800
 8002ed0:	40010c00 	.word	0x40010c00
 8002ed4:	40011000 	.word	0x40011000
 8002ed8:	40011400 	.word	0x40011400
 8002edc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_GPIO_Init+0x304>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	4909      	ldr	r1, [pc, #36]	; (8002f10 <HAL_GPIO_Init+0x304>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	fa22 f303 	lsr.w	r3, r2, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f47f ae8e 	bne.w	8002c20 <HAL_GPIO_Init+0x14>
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	372c      	adds	r7, #44	; 0x2c
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	40010400 	.word	0x40010400

08002f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f2a:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f806 	bl	8002f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40010400 	.word	0x40010400

08002f44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e272      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8087 	beq.w	8003086 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f78:	4b92      	ldr	r3, [pc, #584]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d00c      	beq.n	8002f9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f84:	4b8f      	ldr	r3, [pc, #572]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d112      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x5e>
 8002f90:	4b8c      	ldr	r3, [pc, #560]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9e:	4b89      	ldr	r3, [pc, #548]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d06c      	beq.n	8003084 <HAL_RCC_OscConfig+0x12c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d168      	bne.n	8003084 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e24c      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x76>
 8002fc0:	4b80      	ldr	r3, [pc, #512]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a7f      	ldr	r2, [pc, #508]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	e02e      	b.n	800302c <HAL_RCC_OscConfig+0xd4>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x98>
 8002fd6:	4b7b      	ldr	r3, [pc, #492]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a7a      	ldr	r2, [pc, #488]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	4b78      	ldr	r3, [pc, #480]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a77      	ldr	r2, [pc, #476]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e01d      	b.n	800302c <HAL_RCC_OscConfig+0xd4>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0xbc>
 8002ffa:	4b72      	ldr	r3, [pc, #456]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a71      	ldr	r2, [pc, #452]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	4b6f      	ldr	r3, [pc, #444]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a6e      	ldr	r2, [pc, #440]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0xd4>
 8003014:	4b6b      	ldr	r3, [pc, #428]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a6a      	ldr	r2, [pc, #424]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 800301a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b68      	ldr	r3, [pc, #416]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a67      	ldr	r2, [pc, #412]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d013      	beq.n	800305c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fe ffc8 	bl	8001fc8 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303c:	f7fe ffc4 	bl	8001fc8 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e200      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4b5d      	ldr	r3, [pc, #372]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0xe4>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe ffb4 	bl	8001fc8 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003064:	f7fe ffb0 	bl	8001fc8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e1ec      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003076:	4b53      	ldr	r3, [pc, #332]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x10c>
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d063      	beq.n	800315a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003092:	4b4c      	ldr	r3, [pc, #304]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800309e:	4b49      	ldr	r3, [pc, #292]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d11c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x18c>
 80030aa:	4b46      	ldr	r3, [pc, #280]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d116      	bne.n	80030e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	4b43      	ldr	r3, [pc, #268]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_RCC_OscConfig+0x176>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e1c0      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ce:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4939      	ldr	r1, [pc, #228]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	e03a      	b.n	800315a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ec:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <HAL_RCC_OscConfig+0x270>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f2:	f7fe ff69 	bl	8001fc8 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fe ff65 	bl	8001fc8 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e1a1      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310c:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	4b2a      	ldr	r3, [pc, #168]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4927      	ldr	r1, [pc, #156]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]
 800312c:	e015      	b.n	800315a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <HAL_RCC_OscConfig+0x270>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fe ff48 	bl	8001fc8 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313c:	f7fe ff44 	bl	8001fc8 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e180      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314e:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d03a      	beq.n	80031dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d019      	beq.n	80031a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003174:	f7fe ff28 	bl	8001fc8 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317c:	f7fe ff24 	bl	8001fc8 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e160      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318e:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <HAL_RCC_OscConfig+0x26c>)
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800319a:	2001      	movs	r0, #1
 800319c:	f000 fa9c 	bl	80036d8 <RCC_Delay>
 80031a0:	e01c      	b.n	80031dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_RCC_OscConfig+0x274>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a8:	f7fe ff0e 	bl	8001fc8 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ae:	e00f      	b.n	80031d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b0:	f7fe ff0a 	bl	8001fc8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d908      	bls.n	80031d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e146      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	42420000 	.word	0x42420000
 80031cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d0:	4b92      	ldr	r3, [pc, #584]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e9      	bne.n	80031b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80a6 	beq.w	8003336 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ea:	2300      	movs	r3, #0
 80031ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ee:	4b8b      	ldr	r3, [pc, #556]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10d      	bne.n	8003216 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	4b88      	ldr	r3, [pc, #544]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4a87      	ldr	r2, [pc, #540]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003204:	61d3      	str	r3, [r2, #28]
 8003206:	4b85      	ldr	r3, [pc, #532]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003216:	4b82      	ldr	r3, [pc, #520]	; (8003420 <HAL_RCC_OscConfig+0x4c8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d118      	bne.n	8003254 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003222:	4b7f      	ldr	r3, [pc, #508]	; (8003420 <HAL_RCC_OscConfig+0x4c8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7e      	ldr	r2, [pc, #504]	; (8003420 <HAL_RCC_OscConfig+0x4c8>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322e:	f7fe fecb 	bl	8001fc8 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003236:	f7fe fec7 	bl	8001fc8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b64      	cmp	r3, #100	; 0x64
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e103      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003248:	4b75      	ldr	r3, [pc, #468]	; (8003420 <HAL_RCC_OscConfig+0x4c8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d106      	bne.n	800326a <HAL_RCC_OscConfig+0x312>
 800325c:	4b6f      	ldr	r3, [pc, #444]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	4a6e      	ldr	r2, [pc, #440]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6213      	str	r3, [r2, #32]
 8003268:	e02d      	b.n	80032c6 <HAL_RCC_OscConfig+0x36e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10c      	bne.n	800328c <HAL_RCC_OscConfig+0x334>
 8003272:	4b6a      	ldr	r3, [pc, #424]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	4a69      	ldr	r2, [pc, #420]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6213      	str	r3, [r2, #32]
 800327e:	4b67      	ldr	r3, [pc, #412]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	4a66      	ldr	r2, [pc, #408]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003284:	f023 0304 	bic.w	r3, r3, #4
 8003288:	6213      	str	r3, [r2, #32]
 800328a:	e01c      	b.n	80032c6 <HAL_RCC_OscConfig+0x36e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b05      	cmp	r3, #5
 8003292:	d10c      	bne.n	80032ae <HAL_RCC_OscConfig+0x356>
 8003294:	4b61      	ldr	r3, [pc, #388]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	4a60      	ldr	r2, [pc, #384]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	6213      	str	r3, [r2, #32]
 80032a0:	4b5e      	ldr	r3, [pc, #376]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4a5d      	ldr	r2, [pc, #372]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6213      	str	r3, [r2, #32]
 80032ac:	e00b      	b.n	80032c6 <HAL_RCC_OscConfig+0x36e>
 80032ae:	4b5b      	ldr	r3, [pc, #364]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	4a5a      	ldr	r2, [pc, #360]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	6213      	str	r3, [r2, #32]
 80032ba:	4b58      	ldr	r3, [pc, #352]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	4a57      	ldr	r2, [pc, #348]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	f023 0304 	bic.w	r3, r3, #4
 80032c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d015      	beq.n	80032fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ce:	f7fe fe7b 	bl	8001fc8 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fe fe77 	bl	8001fc8 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e0b1      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ec:	4b4b      	ldr	r3, [pc, #300]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ee      	beq.n	80032d6 <HAL_RCC_OscConfig+0x37e>
 80032f8:	e014      	b.n	8003324 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fa:	f7fe fe65 	bl	8001fc8 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7fe fe61 	bl	8001fc8 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e09b      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003318:	4b40      	ldr	r3, [pc, #256]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ee      	bne.n	8003302 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332a:	4b3c      	ldr	r3, [pc, #240]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4a3b      	ldr	r2, [pc, #236]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003334:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 8087 	beq.w	800344e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003340:	4b36      	ldr	r3, [pc, #216]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 030c 	and.w	r3, r3, #12
 8003348:	2b08      	cmp	r3, #8
 800334a:	d061      	beq.n	8003410 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d146      	bne.n	80033e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003354:	4b33      	ldr	r3, [pc, #204]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fe fe35 	bl	8001fc8 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003362:	f7fe fe31 	bl	8001fc8 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e06d      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003374:	4b29      	ldr	r3, [pc, #164]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f0      	bne.n	8003362 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d108      	bne.n	800339c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800338a:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	4921      	ldr	r1, [pc, #132]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800339c:	4b1f      	ldr	r3, [pc, #124]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a19      	ldr	r1, [r3, #32]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	430b      	orrs	r3, r1
 80033ae:	491b      	ldr	r1, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fe fe05 	bl	8001fc8 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c2:	f7fe fe01 	bl	8001fc8 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e03d      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x46a>
 80033e0:	e035      	b.n	800344e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCC_OscConfig+0x4cc>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fe fdee 	bl	8001fc8 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fe fdea 	bl	8001fc8 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e026      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_RCC_OscConfig+0x4c4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x498>
 800340e:	e01e      	b.n	800344e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e019      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
 800341c:	40021000 	.word	0x40021000
 8003420:	40007000 	.word	0x40007000
 8003424:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_RCC_OscConfig+0x500>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	429a      	cmp	r2, r3
 800343a:	d106      	bne.n	800344a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000

0800345c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0d0      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003470:	4b6a      	ldr	r3, [pc, #424]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d910      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b67      	ldr	r3, [pc, #412]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 0207 	bic.w	r2, r3, #7
 8003486:	4965      	ldr	r1, [pc, #404]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0b8      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d020      	beq.n	80034ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b8:	4b59      	ldr	r3, [pc, #356]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4a58      	ldr	r2, [pc, #352]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d0:	4b53      	ldr	r3, [pc, #332]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a52      	ldr	r2, [pc, #328]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	494d      	ldr	r1, [pc, #308]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d040      	beq.n	800357c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b47      	ldr	r3, [pc, #284]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d115      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e07f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351a:	4b41      	ldr	r3, [pc, #260]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e073      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352a:	4b3d      	ldr	r3, [pc, #244]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e06b      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353a:	4b39      	ldr	r3, [pc, #228]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4936      	ldr	r1, [pc, #216]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800354c:	f7fe fd3c 	bl	8001fc8 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	e00a      	b.n	800356a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7fe fd38 	bl	8001fc8 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e053      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 020c 	and.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	429a      	cmp	r2, r3
 800357a:	d1eb      	bne.n	8003554 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800357c:	4b27      	ldr	r3, [pc, #156]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d210      	bcs.n	80035ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 0207 	bic.w	r2, r3, #7
 8003592:	4922      	ldr	r1, [pc, #136]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e032      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4916      	ldr	r1, [pc, #88]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	490e      	ldr	r1, [pc, #56]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ea:	f000 f821 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035ee:	4602      	mov	r2, r0
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	490a      	ldr	r1, [pc, #40]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80035fc:	5ccb      	ldrb	r3, [r1, r3]
 80035fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003602:	4a09      	ldr	r2, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x1cc>)
 8003604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_ClockConfig+0x1d0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fc9a 	bl	8001f44 <HAL_InitTick>

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40022000 	.word	0x40022000
 8003620:	40021000 	.word	0x40021000
 8003624:	08004a14 	.word	0x08004a14
 8003628:	20000024 	.word	0x20000024
 800362c:	20000028 	.word	0x20000028

08003630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	2300      	movs	r3, #0
 8003644:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b04      	cmp	r3, #4
 8003658:	d002      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x30>
 800365a:	2b08      	cmp	r3, #8
 800365c:	d003      	beq.n	8003666 <HAL_RCC_GetSysClockFreq+0x36>
 800365e:	e027      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003660:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003662:	613b      	str	r3, [r7, #16]
      break;
 8003664:	e027      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	0c9b      	lsrs	r3, r3, #18
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	4a17      	ldr	r2, [pc, #92]	; (80036cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003670:	5cd3      	ldrb	r3, [r2, r3]
 8003672:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d010      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	0c5b      	lsrs	r3, r3, #17
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800368a:	5cd3      	ldrb	r3, [r2, r3]
 800368c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003692:	fb03 f202 	mul.w	r2, r3, r2
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	e004      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a0c      	ldr	r2, [pc, #48]	; (80036d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036a4:	fb02 f303 	mul.w	r3, r2, r3
 80036a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	613b      	str	r3, [r7, #16]
      break;
 80036ae:	e002      	b.n	80036b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80036b2:	613b      	str	r3, [r7, #16]
      break;
 80036b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b6:	693b      	ldr	r3, [r7, #16]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000
 80036c8:	007a1200 	.word	0x007a1200
 80036cc:	08004a24 	.word	0x08004a24
 80036d0:	08004a34 	.word	0x08004a34
 80036d4:	003d0900 	.word	0x003d0900

080036d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <RCC_Delay+0x34>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <RCC_Delay+0x38>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0a5b      	lsrs	r3, r3, #9
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036f4:	bf00      	nop
  }
  while (Delay --);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1e5a      	subs	r2, r3, #1
 80036fa:	60fa      	str	r2, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f9      	bne.n	80036f4 <RCC_Delay+0x1c>
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	20000024 	.word	0x20000024
 8003710:	10624dd3 	.word	0x10624dd3

08003714 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d07d      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003730:	2300      	movs	r3, #0
 8003732:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003734:	4b4f      	ldr	r3, [pc, #316]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10d      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003740:	4b4c      	ldr	r3, [pc, #304]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	4a4b      	ldr	r2, [pc, #300]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374a:	61d3      	str	r3, [r2, #28]
 800374c:	4b49      	ldr	r3, [pc, #292]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003758:	2301      	movs	r3, #1
 800375a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375c:	4b46      	ldr	r3, [pc, #280]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d118      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003768:	4b43      	ldr	r3, [pc, #268]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a42      	ldr	r2, [pc, #264]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800376e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003772:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003774:	f7fe fc28 	bl	8001fc8 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377a:	e008      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fe fc24 	bl	8001fc8 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	; 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e06d      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	4b3a      	ldr	r3, [pc, #232]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800379a:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d02e      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d027      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b8:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037c2:	4b2e      	ldr	r3, [pc, #184]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037c8:	4b2c      	ldr	r3, [pc, #176]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ce:	4a29      	ldr	r2, [pc, #164]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d014      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fe fbf3 	bl	8001fc8 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e4:	e00a      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fe fbef 	bl	8001fc8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e036      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0ee      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003808:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4917      	ldr	r1, [pc, #92]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	4313      	orrs	r3, r2
 8003818:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800381a:	7dfb      	ldrb	r3, [r7, #23]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d105      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003820:	4b14      	ldr	r3, [pc, #80]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	4a13      	ldr	r2, [pc, #76]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003838:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	490b      	ldr	r1, [pc, #44]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0310 	and.w	r3, r3, #16
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	4904      	ldr	r1, [pc, #16]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
 800387c:	42420440 	.word	0x42420440

08003880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e041      	b.n	8003916 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fd fe46 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f000 fc7a 	bl	80041b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d001      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e03a      	b.n	80039ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <HAL_TIM_Base_Start_IT+0x98>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00e      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x58>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003962:	d009      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x58>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a14      	ldr	r2, [pc, #80]	; (80039bc <HAL_TIM_Base_Start_IT+0x9c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d004      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x58>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a13      	ldr	r2, [pc, #76]	; (80039c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d111      	bne.n	800399c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b06      	cmp	r3, #6
 8003988:	d010      	beq.n	80039ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0201 	orr.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800399a:	e007      	b.n	80039ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800

080039c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e041      	b.n	8003a5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f839 	bl	8003a62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 fbd8 	bl	80041b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d109      	bne.n	8003a98 <HAL_TIM_PWM_Start+0x24>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	e022      	b.n	8003ade <HAL_TIM_PWM_Start+0x6a>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d109      	bne.n	8003ab2 <HAL_TIM_PWM_Start+0x3e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	bf14      	ite	ne
 8003aaa:	2301      	movne	r3, #1
 8003aac:	2300      	moveq	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	e015      	b.n	8003ade <HAL_TIM_PWM_Start+0x6a>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d109      	bne.n	8003acc <HAL_TIM_PWM_Start+0x58>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	bf14      	ite	ne
 8003ac4:	2301      	movne	r3, #1
 8003ac6:	2300      	moveq	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	e008      	b.n	8003ade <HAL_TIM_PWM_Start+0x6a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	bf14      	ite	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	2300      	moveq	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e05e      	b.n	8003ba4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d104      	bne.n	8003af6 <HAL_TIM_PWM_Start+0x82>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af4:	e013      	b.n	8003b1e <HAL_TIM_PWM_Start+0xaa>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d104      	bne.n	8003b06 <HAL_TIM_PWM_Start+0x92>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b04:	e00b      	b.n	8003b1e <HAL_TIM_PWM_Start+0xaa>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d104      	bne.n	8003b16 <HAL_TIM_PWM_Start+0xa2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b14:	e003      	b.n	8003b1e <HAL_TIM_PWM_Start+0xaa>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2201      	movs	r2, #1
 8003b24:	6839      	ldr	r1, [r7, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fe57 	bl	80047da <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <HAL_TIM_PWM_Start+0x138>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d107      	bne.n	8003b46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_TIM_PWM_Start+0x138>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00e      	beq.n	8003b6e <HAL_TIM_PWM_Start+0xfa>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b58:	d009      	beq.n	8003b6e <HAL_TIM_PWM_Start+0xfa>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a14      	ldr	r2, [pc, #80]	; (8003bb0 <HAL_TIM_PWM_Start+0x13c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_TIM_PWM_Start+0xfa>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <HAL_TIM_PWM_Start+0x140>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d111      	bne.n	8003b92 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b06      	cmp	r3, #6
 8003b7e:	d010      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	e007      	b.n	8003ba2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40012c00 	.word	0x40012c00
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800

08003bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d122      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d11b      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0202 	mvn.w	r2, #2
 8003be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fac1 	bl	8004182 <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fab4 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fac3 	bl	8004194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0204 	mvn.w	r2, #4
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa97 	bl	8004182 <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa8a 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fa99 	bl	8004194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0208 	mvn.w	r2, #8
 8003c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2204      	movs	r2, #4
 8003c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fa6d 	bl	8004182 <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fa60 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fa6f 	bl	8004194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d122      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d11b      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0210 	mvn.w	r2, #16
 8003ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fa43 	bl	8004182 <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fa36 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fa45 	bl	8004194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d10e      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0201 	mvn.w	r2, #1
 8003d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa11 	bl	800415e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b80      	cmp	r3, #128	; 0x80
 8003d48:	d10e      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d54:	2b80      	cmp	r3, #128	; 0x80
 8003d56:	d107      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fdc5 	bl	80048f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d10e      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d107      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fa09 	bl	80041a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d10e      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d107      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0220 	mvn.w	r2, #32
 8003db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fd90 	bl	80048e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e0ae      	b.n	8003f44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b0c      	cmp	r3, #12
 8003df2:	f200 809f 	bhi.w	8003f34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003df6:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfc:	08003e31 	.word	0x08003e31
 8003e00:	08003f35 	.word	0x08003f35
 8003e04:	08003f35 	.word	0x08003f35
 8003e08:	08003f35 	.word	0x08003f35
 8003e0c:	08003e71 	.word	0x08003e71
 8003e10:	08003f35 	.word	0x08003f35
 8003e14:	08003f35 	.word	0x08003f35
 8003e18:	08003f35 	.word	0x08003f35
 8003e1c:	08003eb3 	.word	0x08003eb3
 8003e20:	08003f35 	.word	0x08003f35
 8003e24:	08003f35 	.word	0x08003f35
 8003e28:	08003f35 	.word	0x08003f35
 8003e2c:	08003ef3 	.word	0x08003ef3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fa20 	bl	800427c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0208 	orr.w	r2, r2, #8
 8003e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0204 	bic.w	r2, r2, #4
 8003e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6999      	ldr	r1, [r3, #24]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	619a      	str	r2, [r3, #24]
      break;
 8003e6e:	e064      	b.n	8003f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fa66 	bl	8004348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6999      	ldr	r1, [r3, #24]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	021a      	lsls	r2, r3, #8
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	619a      	str	r2, [r3, #24]
      break;
 8003eb0:	e043      	b.n	8003f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 faaf 	bl	800441c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 0208 	orr.w	r2, r2, #8
 8003ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0204 	bic.w	r2, r2, #4
 8003edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69d9      	ldr	r1, [r3, #28]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	61da      	str	r2, [r3, #28]
      break;
 8003ef0:	e023      	b.n	8003f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 faf9 	bl	80044f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69d9      	ldr	r1, [r3, #28]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	021a      	lsls	r2, r3, #8
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	61da      	str	r2, [r3, #28]
      break;
 8003f32:	e002      	b.n	8003f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
      break;
 8003f38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_TIM_ConfigClockSource+0x1c>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e0b4      	b.n	80040d2 <HAL_TIM_ConfigClockSource+0x186>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa0:	d03e      	beq.n	8004020 <HAL_TIM_ConfigClockSource+0xd4>
 8003fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa6:	f200 8087 	bhi.w	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fae:	f000 8086 	beq.w	80040be <HAL_TIM_ConfigClockSource+0x172>
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb6:	d87f      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb8:	2b70      	cmp	r3, #112	; 0x70
 8003fba:	d01a      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0xa6>
 8003fbc:	2b70      	cmp	r3, #112	; 0x70
 8003fbe:	d87b      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc0:	2b60      	cmp	r3, #96	; 0x60
 8003fc2:	d050      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0x11a>
 8003fc4:	2b60      	cmp	r3, #96	; 0x60
 8003fc6:	d877      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc8:	2b50      	cmp	r3, #80	; 0x50
 8003fca:	d03c      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0xfa>
 8003fcc:	2b50      	cmp	r3, #80	; 0x50
 8003fce:	d873      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd0:	2b40      	cmp	r3, #64	; 0x40
 8003fd2:	d058      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x13a>
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d86f      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd8:	2b30      	cmp	r3, #48	; 0x30
 8003fda:	d064      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x15a>
 8003fdc:	2b30      	cmp	r3, #48	; 0x30
 8003fde:	d86b      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d060      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x15a>
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d867      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d05c      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x15a>
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d05a      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ff0:	e062      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6899      	ldr	r1, [r3, #8]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f000 fbcb 	bl	800479c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004014:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	609a      	str	r2, [r3, #8]
      break;
 800401e:	e04f      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	6899      	ldr	r1, [r3, #8]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f000 fbb4 	bl	800479c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004042:	609a      	str	r2, [r3, #8]
      break;
 8004044:	e03c      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6859      	ldr	r1, [r3, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	461a      	mov	r2, r3
 8004054:	f000 fb2b 	bl	80046ae <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2150      	movs	r1, #80	; 0x50
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fb82 	bl	8004768 <TIM_ITRx_SetConfig>
      break;
 8004064:	e02c      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6859      	ldr	r1, [r3, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	461a      	mov	r2, r3
 8004074:	f000 fb49 	bl	800470a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2160      	movs	r1, #96	; 0x60
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fb72 	bl	8004768 <TIM_ITRx_SetConfig>
      break;
 8004084:	e01c      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6859      	ldr	r1, [r3, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	461a      	mov	r2, r3
 8004094:	f000 fb0b 	bl	80046ae <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2140      	movs	r1, #64	; 0x40
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fb62 	bl	8004768 <TIM_ITRx_SetConfig>
      break;
 80040a4:	e00c      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f000 fb59 	bl	8004768 <TIM_ITRx_SetConfig>
      break;
 80040b6:	e003      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
      break;
 80040bc:	e000      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e031      	b.n	8004156 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2202      	movs	r2, #2
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004102:	6839      	ldr	r1, [r7, #0]
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fa41 	bl	800458c <TIM_SlaveTimer_SetConfig>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d009      	beq.n	8004124 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e018      	b.n	8004156 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004132:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004142:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a29      	ldr	r2, [pc, #164]	; (8004270 <TIM_Base_SetConfig+0xb8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00b      	beq.n	80041e8 <TIM_Base_SetConfig+0x30>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d6:	d007      	beq.n	80041e8 <TIM_Base_SetConfig+0x30>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a26      	ldr	r2, [pc, #152]	; (8004274 <TIM_Base_SetConfig+0xbc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d003      	beq.n	80041e8 <TIM_Base_SetConfig+0x30>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a25      	ldr	r2, [pc, #148]	; (8004278 <TIM_Base_SetConfig+0xc0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d108      	bne.n	80041fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <TIM_Base_SetConfig+0xb8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00b      	beq.n	800421a <TIM_Base_SetConfig+0x62>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004208:	d007      	beq.n	800421a <TIM_Base_SetConfig+0x62>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a19      	ldr	r2, [pc, #100]	; (8004274 <TIM_Base_SetConfig+0xbc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_Base_SetConfig+0x62>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a18      	ldr	r2, [pc, #96]	; (8004278 <TIM_Base_SetConfig+0xc0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d108      	bne.n	800422c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a07      	ldr	r2, [pc, #28]	; (8004270 <TIM_Base_SetConfig+0xb8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d103      	bne.n	8004260 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	615a      	str	r2, [r3, #20]
}
 8004266:	bf00      	nop
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40000400 	.word	0x40000400
 8004278:	40000800 	.word	0x40000800

0800427c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f023 0201 	bic.w	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0303 	bic.w	r3, r3, #3
 80042b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f023 0302 	bic.w	r3, r3, #2
 80042c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a1c      	ldr	r2, [pc, #112]	; (8004344 <TIM_OC1_SetConfig+0xc8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d10c      	bne.n	80042f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f023 0308 	bic.w	r3, r3, #8
 80042de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f023 0304 	bic.w	r3, r3, #4
 80042f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a13      	ldr	r2, [pc, #76]	; (8004344 <TIM_OC1_SetConfig+0xc8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d111      	bne.n	800431e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	621a      	str	r2, [r3, #32]
}
 8004338:	bf00      	nop
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40012c00 	.word	0x40012c00

08004348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f023 0210 	bic.w	r2, r3, #16
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f023 0320 	bic.w	r3, r3, #32
 8004392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a1d      	ldr	r2, [pc, #116]	; (8004418 <TIM_OC2_SetConfig+0xd0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d10d      	bne.n	80043c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a14      	ldr	r2, [pc, #80]	; (8004418 <TIM_OC2_SetConfig+0xd0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d113      	bne.n	80043f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr
 8004418:	40012c00 	.word	0x40012c00

0800441c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0303 	bic.w	r3, r3, #3
 8004452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <TIM_OC3_SetConfig+0xd0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d10d      	bne.n	8004496 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a14      	ldr	r2, [pc, #80]	; (80044ec <TIM_OC3_SetConfig+0xd0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d113      	bne.n	80044c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	621a      	str	r2, [r3, #32]
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40012c00 	.word	0x40012c00

080044f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800453a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	031b      	lsls	r3, r3, #12
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a0f      	ldr	r2, [pc, #60]	; (8004588 <TIM_OC4_SetConfig+0x98>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d109      	bne.n	8004564 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004556:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	019b      	lsls	r3, r3, #6
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	40012c00 	.word	0x40012c00

0800458c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f023 0307 	bic.w	r3, r3, #7
 80045ba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b70      	cmp	r3, #112	; 0x70
 80045d4:	d01a      	beq.n	800460c <TIM_SlaveTimer_SetConfig+0x80>
 80045d6:	2b70      	cmp	r3, #112	; 0x70
 80045d8:	d860      	bhi.n	800469c <TIM_SlaveTimer_SetConfig+0x110>
 80045da:	2b60      	cmp	r3, #96	; 0x60
 80045dc:	d054      	beq.n	8004688 <TIM_SlaveTimer_SetConfig+0xfc>
 80045de:	2b60      	cmp	r3, #96	; 0x60
 80045e0:	d85c      	bhi.n	800469c <TIM_SlaveTimer_SetConfig+0x110>
 80045e2:	2b50      	cmp	r3, #80	; 0x50
 80045e4:	d046      	beq.n	8004674 <TIM_SlaveTimer_SetConfig+0xe8>
 80045e6:	2b50      	cmp	r3, #80	; 0x50
 80045e8:	d858      	bhi.n	800469c <TIM_SlaveTimer_SetConfig+0x110>
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d019      	beq.n	8004622 <TIM_SlaveTimer_SetConfig+0x96>
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d854      	bhi.n	800469c <TIM_SlaveTimer_SetConfig+0x110>
 80045f2:	2b30      	cmp	r3, #48	; 0x30
 80045f4:	d055      	beq.n	80046a2 <TIM_SlaveTimer_SetConfig+0x116>
 80045f6:	2b30      	cmp	r3, #48	; 0x30
 80045f8:	d850      	bhi.n	800469c <TIM_SlaveTimer_SetConfig+0x110>
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d051      	beq.n	80046a2 <TIM_SlaveTimer_SetConfig+0x116>
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d84c      	bhi.n	800469c <TIM_SlaveTimer_SetConfig+0x110>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d04d      	beq.n	80046a2 <TIM_SlaveTimer_SetConfig+0x116>
 8004606:	2b10      	cmp	r3, #16
 8004608:	d04b      	beq.n	80046a2 <TIM_SlaveTimer_SetConfig+0x116>
 800460a:	e047      	b.n	800469c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68d9      	ldr	r1, [r3, #12]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f000 f8be 	bl	800479c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004620:	e040      	b.n	80046a4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b05      	cmp	r3, #5
 8004628:	d101      	bne.n	800462e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e03b      	b.n	80046a6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6a1a      	ldr	r2, [r3, #32]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0201 	bic.w	r2, r2, #1
 8004644:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004654:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	4313      	orrs	r3, r2
 8004660:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	621a      	str	r2, [r3, #32]
      break;
 8004672:	e017      	b.n	80046a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6899      	ldr	r1, [r3, #8]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	461a      	mov	r2, r3
 8004682:	f000 f814 	bl	80046ae <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004686:	e00d      	b.n	80046a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6899      	ldr	r1, [r3, #8]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	461a      	mov	r2, r3
 8004696:	f000 f838 	bl	800470a <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800469a:	e003      	b.n	80046a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	75fb      	strb	r3, [r7, #23]
      break;
 80046a0:	e000      	b.n	80046a4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80046a2:	bf00      	nop
  }

  return status;
 80046a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b087      	sub	sp, #28
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f023 0201 	bic.w	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f023 030a 	bic.w	r3, r3, #10
 80046ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	621a      	str	r2, [r3, #32]
}
 8004700:	bf00      	nop
 8004702:	371c      	adds	r7, #28
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr

0800470a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800470a:	b480      	push	{r7}
 800470c:	b087      	sub	sp, #28
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f023 0210 	bic.w	r2, r3, #16
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004734:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	031b      	lsls	r3, r3, #12
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004746:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	f043 0307 	orr.w	r3, r3, #7
 800478a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	609a      	str	r2, [r3, #8]
}
 8004792:	bf00      	nop
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr

0800479c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	021a      	lsls	r2, r3, #8
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	431a      	orrs	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	609a      	str	r2, [r3, #8]
}
 80047d0:	bf00      	nop
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr

080047da <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047da:	b480      	push	{r7}
 80047dc:	b087      	sub	sp, #28
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	2201      	movs	r2, #1
 80047ee:	fa02 f303 	lsl.w	r3, r2, r3
 80047f2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1a      	ldr	r2, [r3, #32]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	43db      	mvns	r3, r3
 80047fc:	401a      	ands	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1a      	ldr	r2, [r3, #32]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	fa01 f303 	lsl.w	r3, r1, r3
 8004812:	431a      	orrs	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	621a      	str	r2, [r3, #32]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr
	...

08004824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004838:	2302      	movs	r3, #2
 800483a:	e046      	b.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a16      	ldr	r2, [pc, #88]	; (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00e      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004888:	d009      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a12      	ldr	r2, [pc, #72]	; (80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a10      	ldr	r2, [pc, #64]	; (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d10c      	bne.n	80048b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr
 80048d4:	40012c00 	.word	0x40012c00
 80048d8:	40000400 	.word	0x40000400
 80048dc:	40000800 	.word	0x40000800

080048e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr

080048f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <__libc_init_array>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	2600      	movs	r6, #0
 8004908:	4d0c      	ldr	r5, [pc, #48]	; (800493c <__libc_init_array+0x38>)
 800490a:	4c0d      	ldr	r4, [pc, #52]	; (8004940 <__libc_init_array+0x3c>)
 800490c:	1b64      	subs	r4, r4, r5
 800490e:	10a4      	asrs	r4, r4, #2
 8004910:	42a6      	cmp	r6, r4
 8004912:	d109      	bne.n	8004928 <__libc_init_array+0x24>
 8004914:	f000 f86e 	bl	80049f4 <_init>
 8004918:	2600      	movs	r6, #0
 800491a:	4d0a      	ldr	r5, [pc, #40]	; (8004944 <__libc_init_array+0x40>)
 800491c:	4c0a      	ldr	r4, [pc, #40]	; (8004948 <__libc_init_array+0x44>)
 800491e:	1b64      	subs	r4, r4, r5
 8004920:	10a4      	asrs	r4, r4, #2
 8004922:	42a6      	cmp	r6, r4
 8004924:	d105      	bne.n	8004932 <__libc_init_array+0x2e>
 8004926:	bd70      	pop	{r4, r5, r6, pc}
 8004928:	f855 3b04 	ldr.w	r3, [r5], #4
 800492c:	4798      	blx	r3
 800492e:	3601      	adds	r6, #1
 8004930:	e7ee      	b.n	8004910 <__libc_init_array+0xc>
 8004932:	f855 3b04 	ldr.w	r3, [r5], #4
 8004936:	4798      	blx	r3
 8004938:	3601      	adds	r6, #1
 800493a:	e7f2      	b.n	8004922 <__libc_init_array+0x1e>
 800493c:	08004a38 	.word	0x08004a38
 8004940:	08004a38 	.word	0x08004a38
 8004944:	08004a38 	.word	0x08004a38
 8004948:	08004a3c 	.word	0x08004a3c

0800494c <memset>:
 800494c:	4603      	mov	r3, r0
 800494e:	4402      	add	r2, r0
 8004950:	4293      	cmp	r3, r2
 8004952:	d100      	bne.n	8004956 <memset+0xa>
 8004954:	4770      	bx	lr
 8004956:	f803 1b01 	strb.w	r1, [r3], #1
 800495a:	e7f9      	b.n	8004950 <memset+0x4>

0800495c <round>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8004962:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 8004966:	2a13      	cmp	r2, #19
 8004968:	460b      	mov	r3, r1
 800496a:	4684      	mov	ip, r0
 800496c:	468e      	mov	lr, r1
 800496e:	4604      	mov	r4, r0
 8004970:	dc20      	bgt.n	80049b4 <round+0x58>
 8004972:	2a00      	cmp	r2, #0
 8004974:	db0e      	blt.n	8004994 <round+0x38>
 8004976:	491e      	ldr	r1, [pc, #120]	; (80049f0 <round+0x94>)
 8004978:	4111      	asrs	r1, r2
 800497a:	ea03 0001 	and.w	r0, r3, r1
 800497e:	4320      	orrs	r0, r4
 8004980:	d015      	beq.n	80049ae <round+0x52>
 8004982:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004986:	fa43 f202 	asr.w	r2, r3, r2
 800498a:	4496      	add	lr, r2
 800498c:	2400      	movs	r4, #0
 800498e:	ea2e 0e01 	bic.w	lr, lr, r1
 8004992:	e00a      	b.n	80049aa <round+0x4e>
 8004994:	3201      	adds	r2, #1
 8004996:	bf14      	ite	ne
 8004998:	2400      	movne	r4, #0
 800499a:	2400      	moveq	r4, #0
 800499c:	f001 4e00 	and.w	lr, r1, #2147483648	; 0x80000000
 80049a0:	bf04      	itt	eq
 80049a2:	f04e 5e7f 	orreq.w	lr, lr, #1069547520	; 0x3fc00000
 80049a6:	f44e 1e40 	orreq.w	lr, lr, #3145728	; 0x300000
 80049aa:	4673      	mov	r3, lr
 80049ac:	46a4      	mov	ip, r4
 80049ae:	4660      	mov	r0, ip
 80049b0:	4619      	mov	r1, r3
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	2a33      	cmp	r2, #51	; 0x33
 80049b6:	dd08      	ble.n	80049ca <round+0x6e>
 80049b8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80049bc:	d1f7      	bne.n	80049ae <round+0x52>
 80049be:	4602      	mov	r2, r0
 80049c0:	f7fb fcf6 	bl	80003b0 <__adddf3>
 80049c4:	4684      	mov	ip, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	e7f1      	b.n	80049ae <round+0x52>
 80049ca:	f04f 31ff 	mov.w	r1, #4294967295
 80049ce:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80049d2:	fa21 f505 	lsr.w	r5, r1, r5
 80049d6:	4228      	tst	r0, r5
 80049d8:	d0e9      	beq.n	80049ae <round+0x52>
 80049da:	2301      	movs	r3, #1
 80049dc:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 80049e0:	fa03 f202 	lsl.w	r2, r3, r2
 80049e4:	1884      	adds	r4, r0, r2
 80049e6:	bf28      	it	cs
 80049e8:	449e      	addcs	lr, r3
 80049ea:	ea24 0405 	bic.w	r4, r4, r5
 80049ee:	e7dc      	b.n	80049aa <round+0x4e>
 80049f0:	000fffff 	.word	0x000fffff

080049f4 <_init>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	bf00      	nop
 80049f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fa:	bc08      	pop	{r3}
 80049fc:	469e      	mov	lr, r3
 80049fe:	4770      	bx	lr

08004a00 <_fini>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	bf00      	nop
 8004a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a06:	bc08      	pop	{r3}
 8004a08:	469e      	mov	lr, r3
 8004a0a:	4770      	bx	lr
