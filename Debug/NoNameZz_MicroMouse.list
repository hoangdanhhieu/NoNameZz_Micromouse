
NoNameZz_MicroMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006624  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08006730  08006730  00016730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006764  08006764  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006764  08006764  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006764  08006764  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006764  08006764  00016764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006768  08006768  00016768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800676c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  2000000c  08006778  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08006778  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baf7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204d  00000000  00000000  0002bb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002db80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  0002e728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183e6  00000000  00000000  0002f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e127  00000000  00000000  000475be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cc21  00000000  00000000  000556e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2306  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003128  00000000  00000000  000e2358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006718 	.word	0x08006718

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08006718 	.word	0x08006718

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_frsub>:
 8000a90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a94:	e002      	b.n	8000a9c <__addsf3>
 8000a96:	bf00      	nop

08000a98 <__aeabi_fsub>:
 8000a98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a9c <__addsf3>:
 8000a9c:	0042      	lsls	r2, r0, #1
 8000a9e:	bf1f      	itttt	ne
 8000aa0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa4:	ea92 0f03 	teqne	r2, r3
 8000aa8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab0:	d06a      	beq.n	8000b88 <__addsf3+0xec>
 8000ab2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ab6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aba:	bfc1      	itttt	gt
 8000abc:	18d2      	addgt	r2, r2, r3
 8000abe:	4041      	eorgt	r1, r0
 8000ac0:	4048      	eorgt	r0, r1
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	bfb8      	it	lt
 8000ac6:	425b      	neglt	r3, r3
 8000ac8:	2b19      	cmp	r3, #25
 8000aca:	bf88      	it	hi
 8000acc:	4770      	bxhi	lr
 8000ace:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ae6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aea:	bf18      	it	ne
 8000aec:	4249      	negne	r1, r1
 8000aee:	ea92 0f03 	teq	r2, r3
 8000af2:	d03f      	beq.n	8000b74 <__addsf3+0xd8>
 8000af4:	f1a2 0201 	sub.w	r2, r2, #1
 8000af8:	fa41 fc03 	asr.w	ip, r1, r3
 8000afc:	eb10 000c 	adds.w	r0, r0, ip
 8000b00:	f1c3 0320 	rsb	r3, r3, #32
 8000b04:	fa01 f103 	lsl.w	r1, r1, r3
 8000b08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0c:	d502      	bpl.n	8000b14 <__addsf3+0x78>
 8000b0e:	4249      	negs	r1, r1
 8000b10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b18:	d313      	bcc.n	8000b42 <__addsf3+0xa6>
 8000b1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b1e:	d306      	bcc.n	8000b2e <__addsf3+0x92>
 8000b20:	0840      	lsrs	r0, r0, #1
 8000b22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b26:	f102 0201 	add.w	r2, r2, #1
 8000b2a:	2afe      	cmp	r2, #254	; 0xfe
 8000b2c:	d251      	bcs.n	8000bd2 <__addsf3+0x136>
 8000b2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b36:	bf08      	it	eq
 8000b38:	f020 0001 	biceq.w	r0, r0, #1
 8000b3c:	ea40 0003 	orr.w	r0, r0, r3
 8000b40:	4770      	bx	lr
 8000b42:	0049      	lsls	r1, r1, #1
 8000b44:	eb40 0000 	adc.w	r0, r0, r0
 8000b48:	3a01      	subs	r2, #1
 8000b4a:	bf28      	it	cs
 8000b4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b50:	d2ed      	bcs.n	8000b2e <__addsf3+0x92>
 8000b52:	fab0 fc80 	clz	ip, r0
 8000b56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b62:	bfaa      	itet	ge
 8000b64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b68:	4252      	neglt	r2, r2
 8000b6a:	4318      	orrge	r0, r3
 8000b6c:	bfbc      	itt	lt
 8000b6e:	40d0      	lsrlt	r0, r2
 8000b70:	4318      	orrlt	r0, r3
 8000b72:	4770      	bx	lr
 8000b74:	f092 0f00 	teq	r2, #0
 8000b78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b7c:	bf06      	itte	eq
 8000b7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b82:	3201      	addeq	r2, #1
 8000b84:	3b01      	subne	r3, #1
 8000b86:	e7b5      	b.n	8000af4 <__addsf3+0x58>
 8000b88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b90:	bf18      	it	ne
 8000b92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b96:	d021      	beq.n	8000bdc <__addsf3+0x140>
 8000b98:	ea92 0f03 	teq	r2, r3
 8000b9c:	d004      	beq.n	8000ba8 <__addsf3+0x10c>
 8000b9e:	f092 0f00 	teq	r2, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	4608      	moveq	r0, r1
 8000ba6:	4770      	bx	lr
 8000ba8:	ea90 0f01 	teq	r0, r1
 8000bac:	bf1c      	itt	ne
 8000bae:	2000      	movne	r0, #0
 8000bb0:	4770      	bxne	lr
 8000bb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bb6:	d104      	bne.n	8000bc2 <__addsf3+0x126>
 8000bb8:	0040      	lsls	r0, r0, #1
 8000bba:	bf28      	it	cs
 8000bbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc0:	4770      	bx	lr
 8000bc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bc6:	bf3c      	itt	cc
 8000bc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bxcc	lr
 8000bce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bda:	4770      	bx	lr
 8000bdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be0:	bf16      	itet	ne
 8000be2:	4608      	movne	r0, r1
 8000be4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be8:	4601      	movne	r1, r0
 8000bea:	0242      	lsls	r2, r0, #9
 8000bec:	bf06      	itte	eq
 8000bee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf2:	ea90 0f01 	teqeq	r0, r1
 8000bf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_ui2f>:
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e004      	b.n	8000c0c <__aeabi_i2f+0x8>
 8000c02:	bf00      	nop

08000c04 <__aeabi_i2f>:
 8000c04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c08:	bf48      	it	mi
 8000c0a:	4240      	negmi	r0, r0
 8000c0c:	ea5f 0c00 	movs.w	ip, r0
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c18:	4601      	mov	r1, r0
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	e01c      	b.n	8000c5a <__aeabi_l2f+0x2a>

08000c20 <__aeabi_ul2f>:
 8000c20:	ea50 0201 	orrs.w	r2, r0, r1
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e00a      	b.n	8000c44 <__aeabi_l2f+0x14>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_l2f>:
 8000c30:	ea50 0201 	orrs.w	r2, r0, r1
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c3c:	d502      	bpl.n	8000c44 <__aeabi_l2f+0x14>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	ea5f 0c01 	movs.w	ip, r1
 8000c48:	bf02      	ittt	eq
 8000c4a:	4684      	moveq	ip, r0
 8000c4c:	4601      	moveq	r1, r0
 8000c4e:	2000      	moveq	r0, #0
 8000c50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c54:	bf08      	it	eq
 8000c56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c5e:	fabc f28c 	clz	r2, ip
 8000c62:	3a08      	subs	r2, #8
 8000c64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c68:	db10      	blt.n	8000c8c <__aeabi_l2f+0x5c>
 8000c6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6e:	4463      	add	r3, ip
 8000c70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c74:	f1c2 0220 	rsb	r2, r2, #32
 8000c78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c80:	eb43 0002 	adc.w	r0, r3, r2
 8000c84:	bf08      	it	eq
 8000c86:	f020 0001 	biceq.w	r0, r0, #1
 8000c8a:	4770      	bx	lr
 8000c8c:	f102 0220 	add.w	r2, r2, #32
 8000c90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c94:	f1c2 0220 	rsb	r2, r2, #32
 8000c98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca0:	eb43 0002 	adc.w	r0, r3, r2
 8000ca4:	bf08      	it	eq
 8000ca6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000caa:	4770      	bx	lr

08000cac <start_fill>:
const float d2 = (float)(square_size - (halfSize_MicroMouse * 2))/2;

void found(int16_t index);
void set_wall(uint8_t rbl, uint8_t rbr, uint8_t rbf);

void start_fill() {
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
	memset(visited, false, sizeof(visited));
 8000cb2:	2264      	movs	r2, #100	; 0x64
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	48b1      	ldr	r0, [pc, #708]	; (8000f7c <start_fill+0x2d0>)
 8000cb8:	f005 fcde 	bl	8006678 <memset>
	memset(maze, 0, sizeof(maze));
 8000cbc:	2264      	movs	r2, #100	; 0x64
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	48af      	ldr	r0, [pc, #700]	; (8000f80 <start_fill+0x2d4>)
 8000cc2:	f005 fcd9 	bl	8006678 <memset>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000cc6:	4baf      	ldr	r3, [pc, #700]	; (8000f84 <start_fill+0x2d8>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000cce:	4bae      	ldr	r3, [pc, #696]	; (8000f88 <start_fill+0x2dc>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
	current_speed = 0;
 8000cd6:	4bad      	ldr	r3, [pc, #692]	; (8000f8c <start_fill+0x2e0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
	stack[0][0] = straight;
 8000cdc:	4bac      	ldr	r3, [pc, #688]	; (8000f90 <start_fill+0x2e4>)
 8000cde:	22fa      	movs	r2, #250	; 0xfa
 8000ce0:	701a      	strb	r2, [r3, #0]
	stack[0][1] = starting_coordinates[0];
 8000ce2:	4bac      	ldr	r3, [pc, #688]	; (8000f94 <start_fill+0x2e8>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b25a      	sxtb	r2, r3
 8000ce8:	4ba9      	ldr	r3, [pc, #676]	; (8000f90 <start_fill+0x2e4>)
 8000cea:	705a      	strb	r2, [r3, #1]
	stack[0][2] = starting_coordinates[1];
 8000cec:	4ba9      	ldr	r3, [pc, #676]	; (8000f94 <start_fill+0x2e8>)
 8000cee:	785b      	ldrb	r3, [r3, #1]
 8000cf0:	b25a      	sxtb	r2, r3
 8000cf2:	4ba7      	ldr	r3, [pc, #668]	; (8000f90 <start_fill+0x2e4>)
 8000cf4:	709a      	strb	r2, [r3, #2]
	visited[starting_coordinates[0]][starting_coordinates[1]] = true;
 8000cf6:	4ba7      	ldr	r3, [pc, #668]	; (8000f94 <start_fill+0x2e8>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4ba5      	ldr	r3, [pc, #660]	; (8000f94 <start_fill+0x2e8>)
 8000cfe:	785b      	ldrb	r3, [r3, #1]
 8000d00:	4618      	mov	r0, r3
 8000d02:	4a9e      	ldr	r2, [pc, #632]	; (8000f7c <start_fill+0x2d0>)
 8000d04:	460b      	mov	r3, r1
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	440b      	add	r3, r1
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4403      	add	r3, r0
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
	int16_t i = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	81fb      	strh	r3, [r7, #14]
	x = starting_coordinates[0] - 1;
 8000d18:	4b9e      	ldr	r3, [pc, #632]	; (8000f94 <start_fill+0x2e8>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	b25a      	sxtb	r2, r3
 8000d22:	4b9d      	ldr	r3, [pc, #628]	; (8000f98 <start_fill+0x2ec>)
 8000d24:	701a      	strb	r2, [r3, #0]
	y = starting_coordinates[1] - 1;
 8000d26:	4b9b      	ldr	r3, [pc, #620]	; (8000f94 <start_fill+0x2e8>)
 8000d28:	785b      	ldrb	r3, [r3, #1]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	b25a      	sxtb	r2, r3
 8000d30:	4b9a      	ldr	r3, [pc, #616]	; (8000f9c <start_fill+0x2f0>)
 8000d32:	701a      	strb	r2, [r3, #0]
	maze[y][x] |= bottom_wall;
 8000d34:	4b99      	ldr	r3, [pc, #612]	; (8000f9c <start_fill+0x2f0>)
 8000d36:	f993 3000 	ldrsb.w	r3, [r3]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4b96      	ldr	r3, [pc, #600]	; (8000f98 <start_fill+0x2ec>)
 8000d3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d42:	4618      	mov	r0, r3
 8000d44:	4a8e      	ldr	r2, [pc, #568]	; (8000f80 <start_fill+0x2d4>)
 8000d46:	460b      	mov	r3, r1
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4413      	add	r3, r2
 8000d50:	4403      	add	r3, r0
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4a91      	ldr	r2, [pc, #580]	; (8000f9c <start_fill+0x2f0>)
 8000d56:	f992 2000 	ldrsb.w	r2, [r2]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4a8e      	ldr	r2, [pc, #568]	; (8000f98 <start_fill+0x2ec>)
 8000d5e:	f992 2000 	ldrsb.w	r2, [r2]
 8000d62:	4614      	mov	r4, r2
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	b2d8      	uxtb	r0, r3
 8000d6a:	4a85      	ldr	r2, [pc, #532]	; (8000f80 <start_fill+0x2d4>)
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	4423      	add	r3, r4
 8000d78:	4602      	mov	r2, r0
 8000d7a:	701a      	strb	r2, [r3, #0]
	direction = west;
 8000d7c:	4b88      	ldr	r3, [pc, #544]	; (8000fa0 <start_fill+0x2f4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
	bool frontfree, leftfree, rightfree;
	while(i > 0){
 8000d82:	f001 b933 	b.w	8001fec <start_fill+0x1340>
		frontfree = leftfree = rightfree = true;
 8000d86:	2301      	movs	r3, #1
 8000d88:	72fb      	strb	r3, [r7, #11]
 8000d8a:	7afb      	ldrb	r3, [r7, #11]
 8000d8c:	733b      	strb	r3, [r7, #12]
 8000d8e:	7b3b      	ldrb	r3, [r7, #12]
 8000d90:	737b      	strb	r3, [r7, #13]
		frontfree = adc_value[0] < frontWallValue;
 8000d92:	4b84      	ldr	r3, [pc, #528]	; (8000fa4 <start_fill+0x2f8>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	2b63      	cmp	r3, #99	; 0x63
 8000d9a:	bf94      	ite	ls
 8000d9c:	2301      	movls	r3, #1
 8000d9e:	2300      	movhi	r3, #0
 8000da0:	737b      	strb	r3, [r7, #13]
		rightfree = adc_value[1] < rightWallValue;
 8000da2:	4b80      	ldr	r3, [pc, #512]	; (8000fa4 <start_fill+0x2f8>)
 8000da4:	885b      	ldrh	r3, [r3, #2]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	2b63      	cmp	r3, #99	; 0x63
 8000daa:	bf94      	ite	ls
 8000dac:	2301      	movls	r3, #1
 8000dae:	2300      	movhi	r3, #0
 8000db0:	72fb      	strb	r3, [r7, #11]
		leftfree  = adc_value[2] < leftWallValue;
 8000db2:	4b7c      	ldr	r3, [pc, #496]	; (8000fa4 <start_fill+0x2f8>)
 8000db4:	889b      	ldrh	r3, [r3, #4]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	2b63      	cmp	r3, #99	; 0x63
 8000dba:	bf94      	ite	ls
 8000dbc:	2301      	movls	r3, #1
 8000dbe:	2300      	movhi	r3, #0
 8000dc0:	733b      	strb	r3, [r7, #12]
		set_wall(!leftfree, !rightfree, !frontfree);
 8000dc2:	7b3b      	ldrb	r3, [r7, #12]
 8000dc4:	f083 0301 	eor.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	7afb      	ldrb	r3, [r7, #11]
 8000dce:	f083 0301 	eor.w	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	7b7b      	ldrb	r3, [r7, #13]
 8000dd8:	f083 0301 	eor.w	r3, r3, #1
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	461a      	mov	r2, r3
 8000de0:	f001 f9f4 	bl	80021cc <set_wall>
		if(x == ending_coordinates[0] && y == ending_coordinates[1]){
 8000de4:	4b6c      	ldr	r3, [pc, #432]	; (8000f98 <start_fill+0x2ec>)
 8000de6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b6e      	ldr	r3, [pc, #440]	; (8000fa8 <start_fill+0x2fc>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d136      	bne.n	8000e62 <start_fill+0x1b6>
 8000df4:	4b69      	ldr	r3, [pc, #420]	; (8000f9c <start_fill+0x2f0>)
 8000df6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b6a      	ldr	r3, [pc, #424]	; (8000fa8 <start_fill+0x2fc>)
 8000dfe:	785b      	ldrb	r3, [r3, #1]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d12e      	bne.n	8000e62 <start_fill+0x1b6>
			found(i);
 8000e04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 f909 	bl	8002020 <found>
			maze[y][x] |= top_wall;
 8000e0e:	4b63      	ldr	r3, [pc, #396]	; (8000f9c <start_fill+0x2f0>)
 8000e10:	f993 3000 	ldrsb.w	r3, [r3]
 8000e14:	4619      	mov	r1, r3
 8000e16:	4b60      	ldr	r3, [pc, #384]	; (8000f98 <start_fill+0x2ec>)
 8000e18:	f993 3000 	ldrsb.w	r3, [r3]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	4a58      	ldr	r2, [pc, #352]	; (8000f80 <start_fill+0x2d4>)
 8000e20:	460b      	mov	r3, r1
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	440b      	add	r3, r1
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	4403      	add	r3, r0
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	4a5b      	ldr	r2, [pc, #364]	; (8000f9c <start_fill+0x2f0>)
 8000e30:	f992 2000 	ldrsb.w	r2, [r2]
 8000e34:	4611      	mov	r1, r2
 8000e36:	4a58      	ldr	r2, [pc, #352]	; (8000f98 <start_fill+0x2ec>)
 8000e38:	f992 2000 	ldrsb.w	r2, [r2]
 8000e3c:	4614      	mov	r4, r2
 8000e3e:	f043 0302 	orr.w	r3, r3, #2
 8000e42:	b2d8      	uxtb	r0, r3
 8000e44:	4a4e      	ldr	r2, [pc, #312]	; (8000f80 <start_fill+0x2d4>)
 8000e46:	460b      	mov	r3, r1
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	4423      	add	r3, r4
 8000e52:	4602      	mov	r2, r0
 8000e54:	701a      	strb	r2, [r3, #0]
			frontfree = rightfree = leftfree = false;
 8000e56:	2300      	movs	r3, #0
 8000e58:	733b      	strb	r3, [r7, #12]
 8000e5a:	7b3b      	ldrb	r3, [r7, #12]
 8000e5c:	72fb      	strb	r3, [r7, #11]
 8000e5e:	7afb      	ldrb	r3, [r7, #11]
 8000e60:	737b      	strb	r3, [r7, #13]
		}
		switch(direction){
 8000e62:	4b4f      	ldr	r3, [pc, #316]	; (8000fa0 <start_fill+0x2f4>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	f200 81a9 	bhi.w	80011be <start_fill+0x512>
 8000e6c:	a201      	add	r2, pc, #4	; (adr r2, 8000e74 <start_fill+0x1c8>)
 8000e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e72:	bf00      	nop
 8000e74:	08000e85 	.word	0x08000e85
 8000e78:	08000f47 	.word	0x08000f47
 8000e7c:	0800103b 	.word	0x0800103b
 8000e80:	080010fd 	.word	0x080010fd
			case west:
				frontfree = frontfree && !visited[y][x - 1];
 8000e84:	7b7b      	ldrb	r3, [r7, #13]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d016      	beq.n	8000eb8 <start_fill+0x20c>
 8000e8a:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <start_fill+0x2f0>)
 8000e8c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e90:	4618      	mov	r0, r3
 8000e92:	4b41      	ldr	r3, [pc, #260]	; (8000f98 <start_fill+0x2ec>)
 8000e94:	f993 3000 	ldrsb.w	r3, [r3]
 8000e98:	1e5a      	subs	r2, r3, #1
 8000e9a:	4938      	ldr	r1, [pc, #224]	; (8000f7c <start_fill+0x2d0>)
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4403      	add	r3, r0
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	440b      	add	r3, r1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	f083 0301 	eor.w	r3, r3, #1
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <start_fill+0x20c>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e000      	b.n	8000eba <start_fill+0x20e>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	737b      	strb	r3, [r7, #13]
 8000ebc:	7b7b      	ldrb	r3, [r7, #13]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y + 1][x];
 8000ec4:	7b3b      	ldrb	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d016      	beq.n	8000ef8 <start_fill+0x24c>
 8000eca:	4b34      	ldr	r3, [pc, #208]	; (8000f9c <start_fill+0x2f0>)
 8000ecc:	f993 3000 	ldrsb.w	r3, [r3]
 8000ed0:	1c5a      	adds	r2, r3, #1
 8000ed2:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <start_fill+0x2ec>)
 8000ed4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	4928      	ldr	r1, [pc, #160]	; (8000f7c <start_fill+0x2d0>)
 8000edc:	4613      	mov	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	440b      	add	r3, r1
 8000ee6:	4403      	add	r3, r0
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	f083 0301 	eor.w	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <start_fill+0x24c>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <start_fill+0x24e>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	733b      	strb	r3, [r7, #12]
 8000efc:	7b3b      	ldrb	r3, [r7, #12]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y - 1][x];
 8000f04:	7afb      	ldrb	r3, [r7, #11]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d016      	beq.n	8000f38 <start_fill+0x28c>
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <start_fill+0x2f0>)
 8000f0c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f10:	1e5a      	subs	r2, r3, #1
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <start_fill+0x2ec>)
 8000f14:	f993 3000 	ldrsb.w	r3, [r3]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	4918      	ldr	r1, [pc, #96]	; (8000f7c <start_fill+0x2d0>)
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	440b      	add	r3, r1
 8000f26:	4403      	add	r3, r0
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	f083 0301 	eor.w	r3, r3, #1
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <start_fill+0x28c>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <start_fill+0x28e>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	72fb      	strb	r3, [r7, #11]
 8000f3c:	7afb      	ldrb	r3, [r7, #11]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	72fb      	strb	r3, [r7, #11]
				break;
 8000f44:	e13b      	b.n	80011be <start_fill+0x512>
			case east:
				frontfree = frontfree && !visited[y][x + 1];
 8000f46:	7b7b      	ldrb	r3, [r7, #13]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d02f      	beq.n	8000fac <start_fill+0x300>
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <start_fill+0x2f0>)
 8000f4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f52:	4618      	mov	r0, r3
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <start_fill+0x2ec>)
 8000f56:	f993 3000 	ldrsb.w	r3, [r3]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <start_fill+0x2d0>)
 8000f5e:	4603      	mov	r3, r0
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4403      	add	r3, r0
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	440b      	add	r3, r1
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	f083 0301 	eor.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d01a      	beq.n	8000fac <start_fill+0x300>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e019      	b.n	8000fae <start_fill+0x302>
 8000f7a:	bf00      	nop
 8000f7c:	20000308 	.word	0x20000308
 8000f80:	200002a4 	.word	0x200002a4
 8000f84:	200001cc 	.word	0x200001cc
 8000f88:	2000025c 	.word	0x2000025c
 8000f8c:	20000374 	.word	0x20000374
 8000f90:	20000028 	.word	0x20000028
 8000f94:	08006730 	.word	0x08006730
 8000f98:	20000154 	.word	0x20000154
 8000f9c:	20000155 	.word	0x20000155
 8000fa0:	20000156 	.word	0x20000156
 8000fa4:	2000036c 	.word	0x2000036c
 8000fa8:	08006734 	.word	0x08006734
 8000fac:	2300      	movs	r3, #0
 8000fae:	737b      	strb	r3, [r7, #13]
 8000fb0:	7b7b      	ldrb	r3, [r7, #13]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y - 1][x];
 8000fb8:	7b3b      	ldrb	r3, [r7, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d016      	beq.n	8000fec <start_fill+0x340>
 8000fbe:	4bb8      	ldr	r3, [pc, #736]	; (80012a0 <start_fill+0x5f4>)
 8000fc0:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc4:	1e5a      	subs	r2, r3, #1
 8000fc6:	4bb7      	ldr	r3, [pc, #732]	; (80012a4 <start_fill+0x5f8>)
 8000fc8:	f993 3000 	ldrsb.w	r3, [r3]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	49b6      	ldr	r1, [pc, #728]	; (80012a8 <start_fill+0x5fc>)
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	440b      	add	r3, r1
 8000fda:	4403      	add	r3, r0
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	f083 0301 	eor.w	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <start_fill+0x340>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <start_fill+0x342>
 8000fec:	2300      	movs	r3, #0
 8000fee:	733b      	strb	r3, [r7, #12]
 8000ff0:	7b3b      	ldrb	r3, [r7, #12]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y + 1][x];
 8000ff8:	7afb      	ldrb	r3, [r7, #11]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d016      	beq.n	800102c <start_fill+0x380>
 8000ffe:	4ba8      	ldr	r3, [pc, #672]	; (80012a0 <start_fill+0x5f4>)
 8001000:	f993 3000 	ldrsb.w	r3, [r3]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	4ba7      	ldr	r3, [pc, #668]	; (80012a4 <start_fill+0x5f8>)
 8001008:	f993 3000 	ldrsb.w	r3, [r3]
 800100c:	4618      	mov	r0, r3
 800100e:	49a6      	ldr	r1, [pc, #664]	; (80012a8 <start_fill+0x5fc>)
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	440b      	add	r3, r1
 800101a:	4403      	add	r3, r0
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	f083 0301 	eor.w	r3, r3, #1
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <start_fill+0x380>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <start_fill+0x382>
 800102c:	2300      	movs	r3, #0
 800102e:	72fb      	strb	r3, [r7, #11]
 8001030:	7afb      	ldrb	r3, [r7, #11]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	72fb      	strb	r3, [r7, #11]
				break;
 8001038:	e0c1      	b.n	80011be <start_fill+0x512>
			case north:
				frontfree = frontfree && !visited[y - 1][x];
 800103a:	7b7b      	ldrb	r3, [r7, #13]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d016      	beq.n	800106e <start_fill+0x3c2>
 8001040:	4b97      	ldr	r3, [pc, #604]	; (80012a0 <start_fill+0x5f4>)
 8001042:	f993 3000 	ldrsb.w	r3, [r3]
 8001046:	1e5a      	subs	r2, r3, #1
 8001048:	4b96      	ldr	r3, [pc, #600]	; (80012a4 <start_fill+0x5f8>)
 800104a:	f993 3000 	ldrsb.w	r3, [r3]
 800104e:	4618      	mov	r0, r3
 8001050:	4995      	ldr	r1, [pc, #596]	; (80012a8 <start_fill+0x5fc>)
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	440b      	add	r3, r1
 800105c:	4403      	add	r3, r0
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	f083 0301 	eor.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <start_fill+0x3c2>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <start_fill+0x3c4>
 800106e:	2300      	movs	r3, #0
 8001070:	737b      	strb	r3, [r7, #13]
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y][x - 1];
 800107a:	7b3b      	ldrb	r3, [r7, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d016      	beq.n	80010ae <start_fill+0x402>
 8001080:	4b87      	ldr	r3, [pc, #540]	; (80012a0 <start_fill+0x5f4>)
 8001082:	f993 3000 	ldrsb.w	r3, [r3]
 8001086:	4618      	mov	r0, r3
 8001088:	4b86      	ldr	r3, [pc, #536]	; (80012a4 <start_fill+0x5f8>)
 800108a:	f993 3000 	ldrsb.w	r3, [r3]
 800108e:	1e5a      	subs	r2, r3, #1
 8001090:	4985      	ldr	r1, [pc, #532]	; (80012a8 <start_fill+0x5fc>)
 8001092:	4603      	mov	r3, r0
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4403      	add	r3, r0
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	440b      	add	r3, r1
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	f083 0301 	eor.w	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <start_fill+0x402>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <start_fill+0x404>
 80010ae:	2300      	movs	r3, #0
 80010b0:	733b      	strb	r3, [r7, #12]
 80010b2:	7b3b      	ldrb	r3, [r7, #12]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y][x + 1];
 80010ba:	7afb      	ldrb	r3, [r7, #11]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d016      	beq.n	80010ee <start_fill+0x442>
 80010c0:	4b77      	ldr	r3, [pc, #476]	; (80012a0 <start_fill+0x5f4>)
 80010c2:	f993 3000 	ldrsb.w	r3, [r3]
 80010c6:	4618      	mov	r0, r3
 80010c8:	4b76      	ldr	r3, [pc, #472]	; (80012a4 <start_fill+0x5f8>)
 80010ca:	f993 3000 	ldrsb.w	r3, [r3]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	4975      	ldr	r1, [pc, #468]	; (80012a8 <start_fill+0x5fc>)
 80010d2:	4603      	mov	r3, r0
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4403      	add	r3, r0
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	440b      	add	r3, r1
 80010dc:	4413      	add	r3, r2
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	f083 0301 	eor.w	r3, r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <start_fill+0x442>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <start_fill+0x444>
 80010ee:	2300      	movs	r3, #0
 80010f0:	72fb      	strb	r3, [r7, #11]
 80010f2:	7afb      	ldrb	r3, [r7, #11]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	72fb      	strb	r3, [r7, #11]
				break;
 80010fa:	e060      	b.n	80011be <start_fill+0x512>
			case south:
				frontfree = frontfree && !visited[y + 1][x];
 80010fc:	7b7b      	ldrb	r3, [r7, #13]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d016      	beq.n	8001130 <start_fill+0x484>
 8001102:	4b67      	ldr	r3, [pc, #412]	; (80012a0 <start_fill+0x5f4>)
 8001104:	f993 3000 	ldrsb.w	r3, [r3]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	4b66      	ldr	r3, [pc, #408]	; (80012a4 <start_fill+0x5f8>)
 800110c:	f993 3000 	ldrsb.w	r3, [r3]
 8001110:	4618      	mov	r0, r3
 8001112:	4965      	ldr	r1, [pc, #404]	; (80012a8 <start_fill+0x5fc>)
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	440b      	add	r3, r1
 800111e:	4403      	add	r3, r0
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f083 0301 	eor.w	r3, r3, #1
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <start_fill+0x484>
 800112c:	2301      	movs	r3, #1
 800112e:	e000      	b.n	8001132 <start_fill+0x486>
 8001130:	2300      	movs	r3, #0
 8001132:	737b      	strb	r3, [r7, #13]
 8001134:	7b7b      	ldrb	r3, [r7, #13]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	737b      	strb	r3, [r7, #13]
				leftfree  = leftfree && !visited[y][x + 1];
 800113c:	7b3b      	ldrb	r3, [r7, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d016      	beq.n	8001170 <start_fill+0x4c4>
 8001142:	4b57      	ldr	r3, [pc, #348]	; (80012a0 <start_fill+0x5f4>)
 8001144:	f993 3000 	ldrsb.w	r3, [r3]
 8001148:	4618      	mov	r0, r3
 800114a:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <start_fill+0x5f8>)
 800114c:	f993 3000 	ldrsb.w	r3, [r3]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	4955      	ldr	r1, [pc, #340]	; (80012a8 <start_fill+0x5fc>)
 8001154:	4603      	mov	r3, r0
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4403      	add	r3, r0
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	440b      	add	r3, r1
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	f083 0301 	eor.w	r3, r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <start_fill+0x4c4>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <start_fill+0x4c6>
 8001170:	2300      	movs	r3, #0
 8001172:	733b      	strb	r3, [r7, #12]
 8001174:	7b3b      	ldrb	r3, [r7, #12]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	733b      	strb	r3, [r7, #12]
				rightfree  = rightfree && !visited[y][x - 1];
 800117c:	7afb      	ldrb	r3, [r7, #11]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d016      	beq.n	80011b0 <start_fill+0x504>
 8001182:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <start_fill+0x5f4>)
 8001184:	f993 3000 	ldrsb.w	r3, [r3]
 8001188:	4618      	mov	r0, r3
 800118a:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <start_fill+0x5f8>)
 800118c:	f993 3000 	ldrsb.w	r3, [r3]
 8001190:	1e5a      	subs	r2, r3, #1
 8001192:	4945      	ldr	r1, [pc, #276]	; (80012a8 <start_fill+0x5fc>)
 8001194:	4603      	mov	r3, r0
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4403      	add	r3, r0
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	440b      	add	r3, r1
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	f083 0301 	eor.w	r3, r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <start_fill+0x504>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e000      	b.n	80011b2 <start_fill+0x506>
 80011b0:	2300      	movs	r3, #0
 80011b2:	72fb      	strb	r3, [r7, #11]
 80011b4:	7afb      	ldrb	r3, [r7, #11]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	72fb      	strb	r3, [r7, #11]
				break;
 80011bc:	bf00      	nop
		}
		visited[y][x] = true;
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <start_fill+0x5f4>)
 80011c0:	f993 3000 	ldrsb.w	r3, [r3]
 80011c4:	4619      	mov	r1, r3
 80011c6:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <start_fill+0x5f8>)
 80011c8:	f993 3000 	ldrsb.w	r3, [r3]
 80011cc:	4618      	mov	r0, r3
 80011ce:	4a36      	ldr	r2, [pc, #216]	; (80012a8 <start_fill+0x5fc>)
 80011d0:	460b      	mov	r3, r1
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	4403      	add	r3, r0
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
		if((leftfree && rightfree) || (leftfree && frontfree) || (rightfree && frontfree)){
 80011e0:	7b3b      	ldrb	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <start_fill+0x540>
 80011e6:	7afb      	ldrb	r3, [r7, #11]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10b      	bne.n	8001204 <start_fill+0x558>
 80011ec:	7b3b      	ldrb	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <start_fill+0x54c>
 80011f2:	7b7b      	ldrb	r3, [r7, #13]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d105      	bne.n	8001204 <start_fill+0x558>
 80011f8:	7afb      	ldrb	r3, [r7, #11]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d07a      	beq.n	80012f4 <start_fill+0x648>
 80011fe:	7b7b      	ldrb	r3, [r7, #13]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d077      	beq.n	80012f4 <start_fill+0x648>
			i++;
 8001204:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001208:	b29b      	uxth	r3, r3
 800120a:	3301      	adds	r3, #1
 800120c:	b29b      	uxth	r3, r3
 800120e:	81fb      	strh	r3, [r7, #14]
			stack[i][1] = x;
 8001210:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001214:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <start_fill+0x5f8>)
 8001216:	f993 0000 	ldrsb.w	r0, [r3]
 800121a:	4924      	ldr	r1, [pc, #144]	; (80012ac <start_fill+0x600>)
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	440b      	add	r3, r1
 8001224:	3301      	adds	r3, #1
 8001226:	4602      	mov	r2, r0
 8001228:	701a      	strb	r2, [r3, #0]
			stack[i][2] = y;
 800122a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <start_fill+0x5f4>)
 8001230:	f993 0000 	ldrsb.w	r0, [r3]
 8001234:	491d      	ldr	r1, [pc, #116]	; (80012ac <start_fill+0x600>)
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	440b      	add	r3, r1
 800123e:	3302      	adds	r3, #2
 8001240:	4602      	mov	r2, r0
 8001242:	701a      	strb	r2, [r3, #0]
			if(frontfree){
 8001244:	7b7b      	ldrb	r3, [r7, #13]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00e      	beq.n	8001268 <start_fill+0x5bc>
				stack[i][0] = straight;
 800124a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800124e:	4917      	ldr	r1, [pc, #92]	; (80012ac <start_fill+0x600>)
 8001250:	4613      	mov	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4413      	add	r3, r2
 8001256:	440b      	add	r3, r1
 8001258:	22fa      	movs	r2, #250	; 0xfa
 800125a:	701a      	strb	r2, [r3, #0]
				go_straight(square_size, 0);
 800125c:	2100      	movs	r1, #0
 800125e:	4814      	ldr	r0, [pc, #80]	; (80012b0 <start_fill+0x604>)
 8001260:	f002 fbe0 	bl	8003a24 <go_straight>
			if(frontfree){
 8001264:	f000 be6c 	b.w	8001f40 <start_fill+0x1294>
			} else if(leftfree){
 8001268:	7b3b      	ldrb	r3, [r7, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d026      	beq.n	80012bc <start_fill+0x610>
				stack[i][0] = turn_left_90;
 800126e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001272:	490e      	ldr	r1, [pc, #56]	; (80012ac <start_fill+0x600>)
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	440b      	add	r3, r1
 800127c:	22fc      	movs	r2, #252	; 0xfc
 800127e:	701a      	strb	r2, [r3, #0]
				go_straight(d2, 1);
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <start_fill+0x608>)
 8001282:	2101      	movs	r1, #1
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fbcd 	bl	8003a24 <go_straight>
				turn_left90(&direction);
 800128a:	480b      	ldr	r0, [pc, #44]	; (80012b8 <start_fill+0x60c>)
 800128c:	f002 fa1a 	bl	80036c4 <turn_left90>
				go_straight(d2, 0);
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <start_fill+0x608>)
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f002 fbc5 	bl	8003a24 <go_straight>
			if(frontfree){
 800129a:	f000 be51 	b.w	8001f40 <start_fill+0x1294>
 800129e:	bf00      	nop
 80012a0:	20000155 	.word	0x20000155
 80012a4:	20000154 	.word	0x20000154
 80012a8:	20000308 	.word	0x20000308
 80012ac:	20000028 	.word	0x20000028
 80012b0:	43960000 	.word	0x43960000
 80012b4:	42e80000 	.word	0x42e80000
 80012b8:	20000156 	.word	0x20000156
			} else if(rightfree){
 80012bc:	7afb      	ldrb	r3, [r7, #11]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 863e 	beq.w	8001f40 <start_fill+0x1294>
				stack[i][0] = turn_right_90;
 80012c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80012c8:	4987      	ldr	r1, [pc, #540]	; (80014e8 <start_fill+0x83c>)
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	22ff      	movs	r2, #255	; 0xff
 80012d4:	701a      	strb	r2, [r3, #0]
				go_straight(d2, 1);
 80012d6:	4b85      	ldr	r3, [pc, #532]	; (80014ec <start_fill+0x840>)
 80012d8:	2101      	movs	r1, #1
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 fba2 	bl	8003a24 <go_straight>
				turn_right90(&direction);
 80012e0:	4883      	ldr	r0, [pc, #524]	; (80014f0 <start_fill+0x844>)
 80012e2:	f002 fac7 	bl	8003874 <turn_right90>
				go_straight(d2, 0);
 80012e6:	4b81      	ldr	r3, [pc, #516]	; (80014ec <start_fill+0x840>)
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fb9a 	bl	8003a24 <go_straight>
			if(frontfree){
 80012f0:	f000 be26 	b.w	8001f40 <start_fill+0x1294>
			}
		} else if(leftfree || rightfree || frontfree){
 80012f4:	7b3b      	ldrb	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d106      	bne.n	8001308 <start_fill+0x65c>
 80012fa:	7afb      	ldrb	r3, [r7, #11]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d103      	bne.n	8001308 <start_fill+0x65c>
 8001300:	7b7b      	ldrb	r3, [r7, #13]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 80a6 	beq.w	8001454 <start_fill+0x7a8>
			if(frontfree){
 8001308:	7b7b      	ldrb	r3, [r7, #13]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d04b      	beq.n	80013a6 <start_fill+0x6fa>
				if(stack[i][0] == straight){
 800130e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001312:	4975      	ldr	r1, [pc, #468]	; (80014e8 <start_fill+0x83c>)
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	440b      	add	r3, r1
 800131c:	f993 3000 	ldrsb.w	r3, [r3]
 8001320:	f113 0f06 	cmn.w	r3, #6
 8001324:	d116      	bne.n	8001354 <start_fill+0x6a8>
					stack[i][2]++;
 8001326:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800132a:	496f      	ldr	r1, [pc, #444]	; (80014e8 <start_fill+0x83c>)
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	440b      	add	r3, r1
 8001334:	3302      	adds	r3, #2
 8001336:	f993 3000 	ldrsb.w	r3, [r3]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	3301      	adds	r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	b258      	sxtb	r0, r3
 8001342:	4969      	ldr	r1, [pc, #420]	; (80014e8 <start_fill+0x83c>)
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	440b      	add	r3, r1
 800134c:	3302      	adds	r3, #2
 800134e:	4602      	mov	r2, r0
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e022      	b.n	800139a <start_fill+0x6ee>
				} else {
					i++;
 8001354:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001358:	b29b      	uxth	r3, r3
 800135a:	3301      	adds	r3, #1
 800135c:	b29b      	uxth	r3, r3
 800135e:	81fb      	strh	r3, [r7, #14]
					stack[i][0] = straight;
 8001360:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001364:	4960      	ldr	r1, [pc, #384]	; (80014e8 <start_fill+0x83c>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	440b      	add	r3, r1
 800136e:	22fa      	movs	r2, #250	; 0xfa
 8001370:	701a      	strb	r2, [r3, #0]
					stack[i][1] = -1;
 8001372:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001376:	495c      	ldr	r1, [pc, #368]	; (80014e8 <start_fill+0x83c>)
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	440b      	add	r3, r1
 8001380:	3301      	adds	r3, #1
 8001382:	22ff      	movs	r2, #255	; 0xff
 8001384:	701a      	strb	r2, [r3, #0]
					stack[i][2] = 1;
 8001386:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800138a:	4957      	ldr	r1, [pc, #348]	; (80014e8 <start_fill+0x83c>)
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	440b      	add	r3, r1
 8001394:	3302      	adds	r3, #2
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
				}
				go_straight(square_size, 0);
 800139a:	2100      	movs	r1, #0
 800139c:	4855      	ldr	r0, [pc, #340]	; (80014f4 <start_fill+0x848>)
 800139e:	f002 fb41 	bl	8003a24 <go_straight>
			if(frontfree){
 80013a2:	f000 bdcf 	b.w	8001f44 <start_fill+0x1298>
			} else if(leftfree){
 80013a6:	7b3b      	ldrb	r3, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d027      	beq.n	80013fc <start_fill+0x750>
				i++;
 80013ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	3301      	adds	r3, #1
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	81fb      	strh	r3, [r7, #14]
				stack[i][0] = turn_left_90;
 80013b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013bc:	494a      	ldr	r1, [pc, #296]	; (80014e8 <start_fill+0x83c>)
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	22fc      	movs	r2, #252	; 0xfc
 80013c8:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 80013ca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013ce:	4946      	ldr	r1, [pc, #280]	; (80014e8 <start_fill+0x83c>)
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	3301      	adds	r3, #1
 80013da:	22ff      	movs	r2, #255	; 0xff
 80013dc:	701a      	strb	r2, [r3, #0]
				go_straight(d2, 1);
 80013de:	4b43      	ldr	r3, [pc, #268]	; (80014ec <start_fill+0x840>)
 80013e0:	2101      	movs	r1, #1
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 fb1e 	bl	8003a24 <go_straight>
				turn_left90(&direction);
 80013e8:	4841      	ldr	r0, [pc, #260]	; (80014f0 <start_fill+0x844>)
 80013ea:	f002 f96b 	bl	80036c4 <turn_left90>
				go_straight(d2, 0);
 80013ee:	4b3f      	ldr	r3, [pc, #252]	; (80014ec <start_fill+0x840>)
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fb16 	bl	8003a24 <go_straight>
			if(frontfree){
 80013f8:	f000 bda4 	b.w	8001f44 <start_fill+0x1298>
			} else if(rightfree){
 80013fc:	7afb      	ldrb	r3, [r7, #11]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 85a0 	beq.w	8001f44 <start_fill+0x1298>
				i++;
 8001404:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001408:	b29b      	uxth	r3, r3
 800140a:	3301      	adds	r3, #1
 800140c:	b29b      	uxth	r3, r3
 800140e:	81fb      	strh	r3, [r7, #14]
				stack[i][0] = turn_right_90;
 8001410:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001414:	4934      	ldr	r1, [pc, #208]	; (80014e8 <start_fill+0x83c>)
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	440b      	add	r3, r1
 800141e:	22ff      	movs	r2, #255	; 0xff
 8001420:	701a      	strb	r2, [r3, #0]
				stack[i][1] = -1;
 8001422:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001426:	4930      	ldr	r1, [pc, #192]	; (80014e8 <start_fill+0x83c>)
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	440b      	add	r3, r1
 8001430:	3301      	adds	r3, #1
 8001432:	22ff      	movs	r2, #255	; 0xff
 8001434:	701a      	strb	r2, [r3, #0]
				go_straight(d2, 1);
 8001436:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <start_fill+0x840>)
 8001438:	2101      	movs	r1, #1
 800143a:	4618      	mov	r0, r3
 800143c:	f002 faf2 	bl	8003a24 <go_straight>
				turn_right90(&direction);
 8001440:	482b      	ldr	r0, [pc, #172]	; (80014f0 <start_fill+0x844>)
 8001442:	f002 fa17 	bl	8003874 <turn_right90>
				go_straight(d2, 0);
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <start_fill+0x840>)
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f002 faea 	bl	8003a24 <go_straight>
			if(frontfree){
 8001450:	f000 bd78 	b.w	8001f44 <start_fill+0x1298>
			}
		} else {
			go_straight(d2, 1);
 8001454:	4b25      	ldr	r3, [pc, #148]	; (80014ec <start_fill+0x840>)
 8001456:	2101      	movs	r1, #1
 8001458:	4618      	mov	r0, r3
 800145a:	f002 fae3 	bl	8003a24 <go_straight>
			u_turnf(&direction);
 800145e:	4824      	ldr	r0, [pc, #144]	; (80014f0 <start_fill+0x844>)
 8001460:	f002 f854 	bl	800350c <u_turnf>
			go_straight(d2, 0);
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <start_fill+0x840>)
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fadb 	bl	8003a24 <go_straight>
			while(i != 0 && stack[i][1] == -1){
 800146e:	e195      	b.n	800179c <start_fill+0xaf0>
				switch(stack[i][0]){
 8001470:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001474:	491c      	ldr	r1, [pc, #112]	; (80014e8 <start_fill+0x83c>)
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	440b      	add	r3, r1
 800147e:	f993 3000 	ldrsb.w	r3, [r3]
 8001482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001486:	d037      	beq.n	80014f8 <start_fill+0x84c>
 8001488:	2b00      	cmp	r3, #0
 800148a:	da43      	bge.n	8001514 <start_fill+0x868>
 800148c:	f113 0f06 	cmn.w	r3, #6
 8001490:	d003      	beq.n	800149a <start_fill+0x7ee>
 8001492:	f113 0f04 	cmn.w	r3, #4
 8001496:	d018      	beq.n	80014ca <start_fill+0x81e>
 8001498:	e03c      	b.n	8001514 <start_fill+0x868>
					case straight:
						go_straight((float)stack[i][2] * square_size, 0);
 800149a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800149e:	4912      	ldr	r1, [pc, #72]	; (80014e8 <start_fill+0x83c>)
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	3302      	adds	r3, #2
 80014aa:	f993 3000 	ldrsb.w	r3, [r3]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fba8 	bl	8000c04 <__aeabi_i2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	490f      	ldr	r1, [pc, #60]	; (80014f4 <start_fill+0x848>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe fe47 	bl	800014c <__aeabi_fmul>
 80014be:	4603      	mov	r3, r0
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 faae 	bl	8003a24 <go_straight>
						break;
 80014c8:	e024      	b.n	8001514 <start_fill+0x868>
					case turn_left_90:
						go_straight(d2, 1);
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <start_fill+0x840>)
 80014cc:	2101      	movs	r1, #1
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 faa8 	bl	8003a24 <go_straight>
						turn_right90(&direction);
 80014d4:	4806      	ldr	r0, [pc, #24]	; (80014f0 <start_fill+0x844>)
 80014d6:	f002 f9cd 	bl	8003874 <turn_right90>
						go_straight(d2, 0);
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <start_fill+0x840>)
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 faa0 	bl	8003a24 <go_straight>
						break;
 80014e4:	e016      	b.n	8001514 <start_fill+0x868>
 80014e6:	bf00      	nop
 80014e8:	20000028 	.word	0x20000028
 80014ec:	42e80000 	.word	0x42e80000
 80014f0:	20000156 	.word	0x20000156
 80014f4:	43960000 	.word	0x43960000
					case turn_right_90:
						go_straight(d2, 1);
 80014f8:	4bca      	ldr	r3, [pc, #808]	; (8001824 <start_fill+0xb78>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 fa91 	bl	8003a24 <go_straight>
						turn_left90(&direction);
 8001502:	48c9      	ldr	r0, [pc, #804]	; (8001828 <start_fill+0xb7c>)
 8001504:	f002 f8de 	bl	80036c4 <turn_left90>
						go_straight(d2, 0);
 8001508:	4bc6      	ldr	r3, [pc, #792]	; (8001824 <start_fill+0xb78>)
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fa89 	bl	8003a24 <go_straight>
						break;
 8001512:	bf00      	nop
				}
				i--;
 8001514:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001518:	b29b      	uxth	r3, r3
 800151a:	3b01      	subs	r3, #1
 800151c:	b29b      	uxth	r3, r3
 800151e:	81fb      	strh	r3, [r7, #14]
				if((i != 0 && stack[i][1] != -1) &&
 8001520:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 8138 	beq.w	800179a <start_fill+0xaee>
 800152a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800152e:	49bf      	ldr	r1, [pc, #764]	; (800182c <start_fill+0xb80>)
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	440b      	add	r3, r1
 8001538:	3301      	adds	r3, #1
 800153a:	f993 3000 	ldrsb.w	r3, [r3]
 800153e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001542:	f000 812a 	beq.w	800179a <start_fill+0xaee>
						((maze[stack[i][1]][stack[i][0]] & 8) != 0 || visited[y][x - 1]) &&
 8001546:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800154a:	49b8      	ldr	r1, [pc, #736]	; (800182c <start_fill+0xb80>)
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	440b      	add	r3, r1
 8001554:	3301      	adds	r3, #1
 8001556:	f993 3000 	ldrsb.w	r3, [r3]
 800155a:	4618      	mov	r0, r3
 800155c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001560:	49b2      	ldr	r1, [pc, #712]	; (800182c <start_fill+0xb80>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	440b      	add	r3, r1
 800156a:	f993 3000 	ldrsb.w	r3, [r3]
 800156e:	4619      	mov	r1, r3
 8001570:	4aaf      	ldr	r2, [pc, #700]	; (8001830 <start_fill+0xb84>)
 8001572:	4603      	mov	r3, r0
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4403      	add	r3, r0
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	440b      	add	r3, r1
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
				if((i != 0 && stack[i][1] != -1) &&
 8001584:	2b00      	cmp	r3, #0
 8001586:	d112      	bne.n	80015ae <start_fill+0x902>
						((maze[stack[i][1]][stack[i][0]] & 8) != 0 || visited[y][x - 1]) &&
 8001588:	4baa      	ldr	r3, [pc, #680]	; (8001834 <start_fill+0xb88>)
 800158a:	f993 3000 	ldrsb.w	r3, [r3]
 800158e:	4618      	mov	r0, r3
 8001590:	4ba9      	ldr	r3, [pc, #676]	; (8001838 <start_fill+0xb8c>)
 8001592:	f993 3000 	ldrsb.w	r3, [r3]
 8001596:	1e5a      	subs	r2, r3, #1
 8001598:	49a8      	ldr	r1, [pc, #672]	; (800183c <start_fill+0xb90>)
 800159a:	4603      	mov	r3, r0
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4403      	add	r3, r0
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	440b      	add	r3, r1
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80f6 	beq.w	800179a <start_fill+0xaee>
						((maze[stack[i][1]][stack[i][0]] & 4) != 0 || visited[y][x + 1]) &&
 80015ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015b2:	499e      	ldr	r1, [pc, #632]	; (800182c <start_fill+0xb80>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	3301      	adds	r3, #1
 80015be:	f993 3000 	ldrsb.w	r3, [r3]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015c8:	4998      	ldr	r1, [pc, #608]	; (800182c <start_fill+0xb80>)
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	f993 3000 	ldrsb.w	r3, [r3]
 80015d6:	4619      	mov	r1, r3
 80015d8:	4a95      	ldr	r2, [pc, #596]	; (8001830 <start_fill+0xb84>)
 80015da:	4603      	mov	r3, r0
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4403      	add	r3, r0
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
						((maze[stack[i][1]][stack[i][0]] & 8) != 0 || visited[y][x - 1]) &&
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d112      	bne.n	8001616 <start_fill+0x96a>
						((maze[stack[i][1]][stack[i][0]] & 4) != 0 || visited[y][x + 1]) &&
 80015f0:	4b90      	ldr	r3, [pc, #576]	; (8001834 <start_fill+0xb88>)
 80015f2:	f993 3000 	ldrsb.w	r3, [r3]
 80015f6:	4618      	mov	r0, r3
 80015f8:	4b8f      	ldr	r3, [pc, #572]	; (8001838 <start_fill+0xb8c>)
 80015fa:	f993 3000 	ldrsb.w	r3, [r3]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	498e      	ldr	r1, [pc, #568]	; (800183c <start_fill+0xb90>)
 8001602:	4603      	mov	r3, r0
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4403      	add	r3, r0
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	440b      	add	r3, r1
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80c2 	beq.w	800179a <start_fill+0xaee>
						((maze[stack[i][1]][stack[i][0]] & 2) != 0 || visited[y - 1][x]) &&
 8001616:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800161a:	4984      	ldr	r1, [pc, #528]	; (800182c <start_fill+0xb80>)
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	440b      	add	r3, r1
 8001624:	3301      	adds	r3, #1
 8001626:	f993 3000 	ldrsb.w	r3, [r3]
 800162a:	4618      	mov	r0, r3
 800162c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001630:	497e      	ldr	r1, [pc, #504]	; (800182c <start_fill+0xb80>)
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	440b      	add	r3, r1
 800163a:	f993 3000 	ldrsb.w	r3, [r3]
 800163e:	4619      	mov	r1, r3
 8001640:	4a7b      	ldr	r2, [pc, #492]	; (8001830 <start_fill+0xb84>)
 8001642:	4603      	mov	r3, r0
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4403      	add	r3, r0
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	440b      	add	r3, r1
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
						((maze[stack[i][1]][stack[i][0]] & 4) != 0 || visited[y][x + 1]) &&
 8001654:	2b00      	cmp	r3, #0
 8001656:	d112      	bne.n	800167e <start_fill+0x9d2>
						((maze[stack[i][1]][stack[i][0]] & 2) != 0 || visited[y - 1][x]) &&
 8001658:	4b76      	ldr	r3, [pc, #472]	; (8001834 <start_fill+0xb88>)
 800165a:	f993 3000 	ldrsb.w	r3, [r3]
 800165e:	1e5a      	subs	r2, r3, #1
 8001660:	4b75      	ldr	r3, [pc, #468]	; (8001838 <start_fill+0xb8c>)
 8001662:	f993 3000 	ldrsb.w	r3, [r3]
 8001666:	4618      	mov	r0, r3
 8001668:	4974      	ldr	r1, [pc, #464]	; (800183c <start_fill+0xb90>)
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	440b      	add	r3, r1
 8001674:	4403      	add	r3, r0
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 808e 	beq.w	800179a <start_fill+0xaee>
						((maze[stack[i][1]][stack[i][0]] & 1) != 0 || visited[y + 1][x])){
 800167e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001682:	496a      	ldr	r1, [pc, #424]	; (800182c <start_fill+0xb80>)
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	440b      	add	r3, r1
 800168c:	3301      	adds	r3, #1
 800168e:	f993 3000 	ldrsb.w	r3, [r3]
 8001692:	4618      	mov	r0, r3
 8001694:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001698:	4964      	ldr	r1, [pc, #400]	; (800182c <start_fill+0xb80>)
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	440b      	add	r3, r1
 80016a2:	f993 3000 	ldrsb.w	r3, [r3]
 80016a6:	4619      	mov	r1, r3
 80016a8:	4a61      	ldr	r2, [pc, #388]	; (8001830 <start_fill+0xb84>)
 80016aa:	4603      	mov	r3, r0
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4403      	add	r3, r0
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	f003 0301 	and.w	r3, r3, #1
						((maze[stack[i][1]][stack[i][0]] & 2) != 0 || visited[y - 1][x]) &&
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d111      	bne.n	80016e4 <start_fill+0xa38>
						((maze[stack[i][1]][stack[i][0]] & 1) != 0 || visited[y + 1][x])){
 80016c0:	4b5c      	ldr	r3, [pc, #368]	; (8001834 <start_fill+0xb88>)
 80016c2:	f993 3000 	ldrsb.w	r3, [r3]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <start_fill+0xb8c>)
 80016ca:	f993 3000 	ldrsb.w	r3, [r3]
 80016ce:	4618      	mov	r0, r3
 80016d0:	495a      	ldr	r1, [pc, #360]	; (800183c <start_fill+0xb90>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	440b      	add	r3, r1
 80016dc:	4403      	add	r3, r0
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d05a      	beq.n	800179a <start_fill+0xaee>
					switch(stack[i][0]){
 80016e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016e8:	4950      	ldr	r1, [pc, #320]	; (800182c <start_fill+0xb80>)
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	f993 3000 	ldrsb.w	r3, [r3]
 80016f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fa:	d03a      	beq.n	8001772 <start_fill+0xac6>
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	da4d      	bge.n	800179c <start_fill+0xaf0>
 8001700:	f113 0f06 	cmn.w	r3, #6
 8001704:	d003      	beq.n	800170e <start_fill+0xa62>
 8001706:	f113 0f04 	cmn.w	r3, #4
 800170a:	d01e      	beq.n	800174a <start_fill+0xa9e>
 800170c:	e046      	b.n	800179c <start_fill+0xaf0>
						case(straight):
							stack[i][0] = straight;
 800170e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001712:	4946      	ldr	r1, [pc, #280]	; (800182c <start_fill+0xb80>)
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	440b      	add	r3, r1
 800171c:	22fa      	movs	r2, #250	; 0xfa
 800171e:	701a      	strb	r2, [r3, #0]
							stack[i][1] = -1;
 8001720:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001724:	4941      	ldr	r1, [pc, #260]	; (800182c <start_fill+0xb80>)
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	440b      	add	r3, r1
 800172e:	3301      	adds	r3, #1
 8001730:	22ff      	movs	r2, #255	; 0xff
 8001732:	701a      	strb	r2, [r3, #0]
							stack[i][2] = 1;
 8001734:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001738:	493c      	ldr	r1, [pc, #240]	; (800182c <start_fill+0xb80>)
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	440b      	add	r3, r1
 8001742:	3302      	adds	r3, #2
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]
							break;
 8001748:	e028      	b.n	800179c <start_fill+0xaf0>
						case(turn_left_90):
							stack[i][0] = turn_right_90;
 800174a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800174e:	4937      	ldr	r1, [pc, #220]	; (800182c <start_fill+0xb80>)
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	440b      	add	r3, r1
 8001758:	22ff      	movs	r2, #255	; 0xff
 800175a:	701a      	strb	r2, [r3, #0]
							stack[i][1] = -1;
 800175c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001760:	4932      	ldr	r1, [pc, #200]	; (800182c <start_fill+0xb80>)
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	440b      	add	r3, r1
 800176a:	3301      	adds	r3, #1
 800176c:	22ff      	movs	r2, #255	; 0xff
 800176e:	701a      	strb	r2, [r3, #0]
							break;
 8001770:	e014      	b.n	800179c <start_fill+0xaf0>
						case(turn_right_90):
							stack[i][0] = turn_left_90;
 8001772:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001776:	492d      	ldr	r1, [pc, #180]	; (800182c <start_fill+0xb80>)
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	440b      	add	r3, r1
 8001780:	22fc      	movs	r2, #252	; 0xfc
 8001782:	701a      	strb	r2, [r3, #0]
							stack[i][1] = -1;
 8001784:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001788:	4928      	ldr	r1, [pc, #160]	; (800182c <start_fill+0xb80>)
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	440b      	add	r3, r1
 8001792:	3301      	adds	r3, #1
 8001794:	22ff      	movs	r2, #255	; 0xff
 8001796:	701a      	strb	r2, [r3, #0]
							break;
 8001798:	e000      	b.n	800179c <start_fill+0xaf0>
					}
				}
 800179a:	bf00      	nop
			while(i != 0 && stack[i][1] == -1){
 800179c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00d      	beq.n	80017c0 <start_fill+0xb14>
 80017a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017a8:	4920      	ldr	r1, [pc, #128]	; (800182c <start_fill+0xb80>)
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	3301      	adds	r3, #1
 80017b4:	f993 3000 	ldrsb.w	r3, [r3]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	f43f ae58 	beq.w	8001470 <start_fill+0x7c4>
			}
			if(i == 0){
 80017c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d104      	bne.n	80017d2 <start_fill+0xb26>
				u_turnf(&direction);
 80017c8:	4817      	ldr	r0, [pc, #92]	; (8001828 <start_fill+0xb7c>)
 80017ca:	f001 fe9f 	bl	800350c <u_turnf>
				break;
 80017ce:	f000 bc13 	b.w	8001ff8 <start_fill+0x134c>
			}
			x = stack[i][1];
 80017d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017d6:	4915      	ldr	r1, [pc, #84]	; (800182c <start_fill+0xb80>)
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	440b      	add	r3, r1
 80017e0:	3301      	adds	r3, #1
 80017e2:	f993 2000 	ldrsb.w	r2, [r3]
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <start_fill+0xb8c>)
 80017e8:	701a      	strb	r2, [r3, #0]
			y = stack[i][2];
 80017ea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017ee:	490f      	ldr	r1, [pc, #60]	; (800182c <start_fill+0xb80>)
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	3302      	adds	r3, #2
 80017fa:	f993 2000 	ldrsb.w	r2, [r3]
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <start_fill+0xb88>)
 8001800:	701a      	strb	r2, [r3, #0]
			switch(direction){
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <start_fill+0xb7c>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b03      	cmp	r3, #3
 8001808:	f200 83a5 	bhi.w	8001f56 <start_fill+0x12aa>
 800180c:	a201      	add	r2, pc, #4	; (adr r2, 8001814 <start_fill+0xb68>)
 800180e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001812:	bf00      	nop
 8001814:	08001841 	.word	0x08001841
 8001818:	080019f3 	.word	0x080019f3
 800181c:	08001bc5 	.word	0x08001bc5
 8001820:	08001d77 	.word	0x08001d77
 8001824:	42e80000 	.word	0x42e80000
 8001828:	20000156 	.word	0x20000156
 800182c:	20000028 	.word	0x20000028
 8001830:	200002a4 	.word	0x200002a4
 8001834:	20000155 	.word	0x20000155
 8001838:	20000154 	.word	0x20000154
 800183c:	20000308 	.word	0x20000308
				case west:
					if(stack[i][0] == straight){
 8001840:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001844:	49b2      	ldr	r1, [pc, #712]	; (8001b10 <start_fill+0xe64>)
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	440b      	add	r3, r1
 800184e:	f993 3000 	ldrsb.w	r3, [r3]
 8001852:	f113 0f06 	cmn.w	r3, #6
 8001856:	f040 8082 	bne.w	800195e <start_fill+0xcb2>
						if((maze[y][x] & top_wall) == 0 && !visited[y - 1][x]){
 800185a:	4bae      	ldr	r3, [pc, #696]	; (8001b14 <start_fill+0xe68>)
 800185c:	f993 3000 	ldrsb.w	r3, [r3]
 8001860:	4619      	mov	r1, r3
 8001862:	4bad      	ldr	r3, [pc, #692]	; (8001b18 <start_fill+0xe6c>)
 8001864:	f993 3000 	ldrsb.w	r3, [r3]
 8001868:	4618      	mov	r0, r3
 800186a:	4aac      	ldr	r2, [pc, #688]	; (8001b1c <start_fill+0xe70>)
 800186c:	460b      	mov	r3, r1
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	4403      	add	r3, r0
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d12b      	bne.n	80018da <start_fill+0xc2e>
 8001882:	4ba4      	ldr	r3, [pc, #656]	; (8001b14 <start_fill+0xe68>)
 8001884:	f993 3000 	ldrsb.w	r3, [r3]
 8001888:	1e5a      	subs	r2, r3, #1
 800188a:	4ba3      	ldr	r3, [pc, #652]	; (8001b18 <start_fill+0xe6c>)
 800188c:	f993 3000 	ldrsb.w	r3, [r3]
 8001890:	4618      	mov	r0, r3
 8001892:	49a3      	ldr	r1, [pc, #652]	; (8001b20 <start_fill+0xe74>)
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	440b      	add	r3, r1
 800189e:	4403      	add	r3, r0
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	f083 0301 	eor.w	r3, r3, #1
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d016      	beq.n	80018da <start_fill+0xc2e>
							stack[i][0] = turn_left_90;
 80018ac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018b0:	4997      	ldr	r1, [pc, #604]	; (8001b10 <start_fill+0xe64>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	22fc      	movs	r2, #252	; 0xfc
 80018bc:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 80018be:	4b99      	ldr	r3, [pc, #612]	; (8001b24 <start_fill+0xe78>)
 80018c0:	2101      	movs	r1, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 f8ae 	bl	8003a24 <go_straight>
							turn_right90(&direction);
 80018c8:	4897      	ldr	r0, [pc, #604]	; (8001b28 <start_fill+0xe7c>)
 80018ca:	f001 ffd3 	bl	8003874 <turn_right90>
							go_straight(d2, 0);
 80018ce:	4b95      	ldr	r3, [pc, #596]	; (8001b24 <start_fill+0xe78>)
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 f8a6 	bl	8003a24 <go_straight>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
							go_straight(square_size, 0);
						}
					}
					break;
 80018d8:	e336      	b.n	8001f48 <start_fill+0x129c>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 80018da:	4b8e      	ldr	r3, [pc, #568]	; (8001b14 <start_fill+0xe68>)
 80018dc:	f993 3000 	ldrsb.w	r3, [r3]
 80018e0:	4619      	mov	r1, r3
 80018e2:	4b8d      	ldr	r3, [pc, #564]	; (8001b18 <start_fill+0xe6c>)
 80018e4:	f993 3000 	ldrsb.w	r3, [r3]
 80018e8:	4618      	mov	r0, r3
 80018ea:	4a8c      	ldr	r2, [pc, #560]	; (8001b1c <start_fill+0xe70>)
 80018ec:	460b      	mov	r3, r1
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	4403      	add	r3, r0
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 8322 	bne.w	8001f48 <start_fill+0x129c>
 8001904:	4b83      	ldr	r3, [pc, #524]	; (8001b14 <start_fill+0xe68>)
 8001906:	f993 3000 	ldrsb.w	r3, [r3]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	4b82      	ldr	r3, [pc, #520]	; (8001b18 <start_fill+0xe6c>)
 800190e:	f993 3000 	ldrsb.w	r3, [r3]
 8001912:	4618      	mov	r0, r3
 8001914:	4982      	ldr	r1, [pc, #520]	; (8001b20 <start_fill+0xe74>)
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	440b      	add	r3, r1
 8001920:	4403      	add	r3, r0
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	f083 0301 	eor.w	r3, r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 830c 	beq.w	8001f48 <start_fill+0x129c>
							stack[i][0] = turn_right_90;
 8001930:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001934:	4976      	ldr	r1, [pc, #472]	; (8001b10 <start_fill+0xe64>)
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	440b      	add	r3, r1
 800193e:	22ff      	movs	r2, #255	; 0xff
 8001940:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001942:	4b78      	ldr	r3, [pc, #480]	; (8001b24 <start_fill+0xe78>)
 8001944:	2101      	movs	r1, #1
 8001946:	4618      	mov	r0, r3
 8001948:	f002 f86c 	bl	8003a24 <go_straight>
							turn_left90(&direction);
 800194c:	4876      	ldr	r0, [pc, #472]	; (8001b28 <start_fill+0xe7c>)
 800194e:	f001 feb9 	bl	80036c4 <turn_left90>
							go_straight(d2, 0);
 8001952:	4b74      	ldr	r3, [pc, #464]	; (8001b24 <start_fill+0xe78>)
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f002 f864 	bl	8003a24 <go_straight>
					break;
 800195c:	e2f4      	b.n	8001f48 <start_fill+0x129c>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 800195e:	4b6d      	ldr	r3, [pc, #436]	; (8001b14 <start_fill+0xe68>)
 8001960:	f993 3000 	ldrsb.w	r3, [r3]
 8001964:	4619      	mov	r1, r3
 8001966:	4b6c      	ldr	r3, [pc, #432]	; (8001b18 <start_fill+0xe6c>)
 8001968:	f993 3000 	ldrsb.w	r3, [r3]
 800196c:	4618      	mov	r0, r3
 800196e:	4a6b      	ldr	r2, [pc, #428]	; (8001b1c <start_fill+0xe70>)
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	4403      	add	r3, r0
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	f040 82e0 	bne.w	8001f48 <start_fill+0x129c>
 8001988:	4b62      	ldr	r3, [pc, #392]	; (8001b14 <start_fill+0xe68>)
 800198a:	f993 3000 	ldrsb.w	r3, [r3]
 800198e:	4618      	mov	r0, r3
 8001990:	4b61      	ldr	r3, [pc, #388]	; (8001b18 <start_fill+0xe6c>)
 8001992:	f993 3000 	ldrsb.w	r3, [r3]
 8001996:	1e5a      	subs	r2, r3, #1
 8001998:	4961      	ldr	r1, [pc, #388]	; (8001b20 <start_fill+0xe74>)
 800199a:	4603      	mov	r3, r0
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4403      	add	r3, r0
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	440b      	add	r3, r1
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	f083 0301 	eor.w	r3, r3, #1
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 82ca 	beq.w	8001f48 <start_fill+0x129c>
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 80019b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019b8:	4955      	ldr	r1, [pc, #340]	; (8001b10 <start_fill+0xe64>)
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	f993 3000 	ldrsb.w	r3, [r3]
 80019c6:	f113 0f04 	cmn.w	r3, #4
 80019ca:	d102      	bne.n	80019d2 <start_fill+0xd26>
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	e001      	b.n	80019d6 <start_fill+0xd2a>
 80019d2:	f06f 0003 	mvn.w	r0, #3
 80019d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019da:	494d      	ldr	r1, [pc, #308]	; (8001b10 <start_fill+0xe64>)
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	4602      	mov	r2, r0
 80019e6:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 80019e8:	2100      	movs	r1, #0
 80019ea:	4850      	ldr	r0, [pc, #320]	; (8001b2c <start_fill+0xe80>)
 80019ec:	f002 f81a 	bl	8003a24 <go_straight>
					break;
 80019f0:	e2aa      	b.n	8001f48 <start_fill+0x129c>
				case east:
					if(stack[i][0] == straight){
 80019f2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019f6:	4946      	ldr	r1, [pc, #280]	; (8001b10 <start_fill+0xe64>)
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f993 3000 	ldrsb.w	r3, [r3]
 8001a04:	f113 0f06 	cmn.w	r3, #6
 8001a08:	f040 8092 	bne.w	8001b30 <start_fill+0xe84>
						if(((maze[y][x] & top_wall) == 0) && !visited[y - 1][x]){
 8001a0c:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <start_fill+0xe68>)
 8001a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a12:	4619      	mov	r1, r3
 8001a14:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <start_fill+0xe6c>)
 8001a16:	f993 3000 	ldrsb.w	r3, [r3]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	4a3f      	ldr	r2, [pc, #252]	; (8001b1c <start_fill+0xe70>)
 8001a1e:	460b      	mov	r3, r1
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	4403      	add	r3, r0
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d12b      	bne.n	8001a8c <start_fill+0xde0>
 8001a34:	4b37      	ldr	r3, [pc, #220]	; (8001b14 <start_fill+0xe68>)
 8001a36:	f993 3000 	ldrsb.w	r3, [r3]
 8001a3a:	1e5a      	subs	r2, r3, #1
 8001a3c:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <start_fill+0xe6c>)
 8001a3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a42:	4618      	mov	r0, r3
 8001a44:	4936      	ldr	r1, [pc, #216]	; (8001b20 <start_fill+0xe74>)
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	440b      	add	r3, r1
 8001a50:	4403      	add	r3, r0
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	f083 0301 	eor.w	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d016      	beq.n	8001a8c <start_fill+0xde0>
							stack[i][0] = turn_right_90;
 8001a5e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a62:	492b      	ldr	r1, [pc, #172]	; (8001b10 <start_fill+0xe64>)
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	22ff      	movs	r2, #255	; 0xff
 8001a6e:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001a70:	4b2c      	ldr	r3, [pc, #176]	; (8001b24 <start_fill+0xe78>)
 8001a72:	2101      	movs	r1, #1
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 ffd5 	bl	8003a24 <go_straight>
							turn_left90(&direction);
 8001a7a:	482b      	ldr	r0, [pc, #172]	; (8001b28 <start_fill+0xe7c>)
 8001a7c:	f001 fe22 	bl	80036c4 <turn_left90>
							go_straight(d2, 0);
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <start_fill+0xe78>)
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 ffcd 	bl	8003a24 <go_straight>
						if((maze[y][x] & right_wall) == 0 && !visited[y][x + 1]){
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
							go_straight(square_size, 0);
						}
					}
					break;
 8001a8a:	e25f      	b.n	8001f4c <start_fill+0x12a0>
						} else if(((maze[y][x] & bottom_wall) == 0) && !visited[y + 1][x]){
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <start_fill+0xe68>)
 8001a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a92:	4619      	mov	r1, r3
 8001a94:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <start_fill+0xe6c>)
 8001a96:	f993 3000 	ldrsb.w	r3, [r3]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4a1f      	ldr	r2, [pc, #124]	; (8001b1c <start_fill+0xe70>)
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4403      	add	r3, r0
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f040 824b 	bne.w	8001f4c <start_fill+0x12a0>
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <start_fill+0xe68>)
 8001ab8:	f993 3000 	ldrsb.w	r3, [r3]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <start_fill+0xe6c>)
 8001ac0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	4916      	ldr	r1, [pc, #88]	; (8001b20 <start_fill+0xe74>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	440b      	add	r3, r1
 8001ad2:	4403      	add	r3, r0
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	f083 0301 	eor.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8235 	beq.w	8001f4c <start_fill+0x12a0>
							stack[i][0] = turn_left_90;
 8001ae2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ae6:	490a      	ldr	r1, [pc, #40]	; (8001b10 <start_fill+0xe64>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	22fc      	movs	r2, #252	; 0xfc
 8001af2:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <start_fill+0xe78>)
 8001af6:	2101      	movs	r1, #1
 8001af8:	4618      	mov	r0, r3
 8001afa:	f001 ff93 	bl	8003a24 <go_straight>
							turn_right90(&direction);
 8001afe:	480a      	ldr	r0, [pc, #40]	; (8001b28 <start_fill+0xe7c>)
 8001b00:	f001 feb8 	bl	8003874 <turn_right90>
							go_straight(d2, 0);
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <start_fill+0xe78>)
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 ff8b 	bl	8003a24 <go_straight>
					break;
 8001b0e:	e21d      	b.n	8001f4c <start_fill+0x12a0>
 8001b10:	20000028 	.word	0x20000028
 8001b14:	20000155 	.word	0x20000155
 8001b18:	20000154 	.word	0x20000154
 8001b1c:	200002a4 	.word	0x200002a4
 8001b20:	20000308 	.word	0x20000308
 8001b24:	42e80000 	.word	0x42e80000
 8001b28:	20000156 	.word	0x20000156
 8001b2c:	43960000 	.word	0x43960000
						if((maze[y][x] & right_wall) == 0 && !visited[y][x + 1]){
 8001b30:	4bb7      	ldr	r3, [pc, #732]	; (8001e10 <start_fill+0x1164>)
 8001b32:	f993 3000 	ldrsb.w	r3, [r3]
 8001b36:	4619      	mov	r1, r3
 8001b38:	4bb6      	ldr	r3, [pc, #728]	; (8001e14 <start_fill+0x1168>)
 8001b3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	4ab5      	ldr	r2, [pc, #724]	; (8001e18 <start_fill+0x116c>)
 8001b42:	460b      	mov	r3, r1
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4403      	add	r3, r0
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f040 81f9 	bne.w	8001f4c <start_fill+0x12a0>
 8001b5a:	4bad      	ldr	r3, [pc, #692]	; (8001e10 <start_fill+0x1164>)
 8001b5c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b60:	4618      	mov	r0, r3
 8001b62:	4bac      	ldr	r3, [pc, #688]	; (8001e14 <start_fill+0x1168>)
 8001b64:	f993 3000 	ldrsb.w	r3, [r3]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	49ac      	ldr	r1, [pc, #688]	; (8001e1c <start_fill+0x1170>)
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4403      	add	r3, r0
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	440b      	add	r3, r1
 8001b76:	4413      	add	r3, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	f083 0301 	eor.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 81e3 	beq.w	8001f4c <start_fill+0x12a0>
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001b86:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b8a:	49a5      	ldr	r1, [pc, #660]	; (8001e20 <start_fill+0x1174>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f993 3000 	ldrsb.w	r3, [r3]
 8001b98:	f113 0f04 	cmn.w	r3, #4
 8001b9c:	d102      	bne.n	8001ba4 <start_fill+0xef8>
 8001b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba2:	e001      	b.n	8001ba8 <start_fill+0xefc>
 8001ba4:	f06f 0003 	mvn.w	r0, #3
 8001ba8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bac:	499c      	ldr	r1, [pc, #624]	; (8001e20 <start_fill+0x1174>)
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4899      	ldr	r0, [pc, #612]	; (8001e24 <start_fill+0x1178>)
 8001bbe:	f001 ff31 	bl	8003a24 <go_straight>
					break;
 8001bc2:	e1c3      	b.n	8001f4c <start_fill+0x12a0>
				case north:
					if(stack[i][0] == straight){
 8001bc4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bc8:	4995      	ldr	r1, [pc, #596]	; (8001e20 <start_fill+0x1174>)
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8001bd6:	f113 0f06 	cmn.w	r3, #6
 8001bda:	f040 8082 	bne.w	8001ce2 <start_fill+0x1036>
						if((maze[y][x] & left_wall) == 0 && !visited[y][x - 1]){
 8001bde:	4b8c      	ldr	r3, [pc, #560]	; (8001e10 <start_fill+0x1164>)
 8001be0:	f993 3000 	ldrsb.w	r3, [r3]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4b8b      	ldr	r3, [pc, #556]	; (8001e14 <start_fill+0x1168>)
 8001be8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bec:	4618      	mov	r0, r3
 8001bee:	4a8a      	ldr	r2, [pc, #552]	; (8001e18 <start_fill+0x116c>)
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4403      	add	r3, r0
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d12b      	bne.n	8001c5e <start_fill+0xfb2>
 8001c06:	4b82      	ldr	r3, [pc, #520]	; (8001e10 <start_fill+0x1164>)
 8001c08:	f993 3000 	ldrsb.w	r3, [r3]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	4b81      	ldr	r3, [pc, #516]	; (8001e14 <start_fill+0x1168>)
 8001c10:	f993 3000 	ldrsb.w	r3, [r3]
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	4981      	ldr	r1, [pc, #516]	; (8001e1c <start_fill+0x1170>)
 8001c18:	4603      	mov	r3, r0
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4403      	add	r3, r0
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	440b      	add	r3, r1
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	f083 0301 	eor.w	r3, r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d016      	beq.n	8001c5e <start_fill+0xfb2>
							stack[i][0] = turn_right_90;
 8001c30:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c34:	497a      	ldr	r1, [pc, #488]	; (8001e20 <start_fill+0x1174>)
 8001c36:	4613      	mov	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	22ff      	movs	r2, #255	; 0xff
 8001c40:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001c42:	4b79      	ldr	r3, [pc, #484]	; (8001e28 <start_fill+0x117c>)
 8001c44:	2101      	movs	r1, #1
 8001c46:	4618      	mov	r0, r3
 8001c48:	f001 feec 	bl	8003a24 <go_straight>
							turn_left90(&direction);
 8001c4c:	4877      	ldr	r0, [pc, #476]	; (8001e2c <start_fill+0x1180>)
 8001c4e:	f001 fd39 	bl	80036c4 <turn_left90>
							go_straight(d2, 0);
 8001c52:	4b75      	ldr	r3, [pc, #468]	; (8001e28 <start_fill+0x117c>)
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 fee4 	bl	8003a24 <go_straight>
						if((maze[y][x] & top_wall) == 0 && !visited[y - 1][x]){
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
							go_straight(square_size, 0);
						}
					}
					break;
 8001c5c:	e178      	b.n	8001f50 <start_fill+0x12a4>
						} else if((maze[y][x] & right_wall) == 0 && !visited[y][x + 1]) {
 8001c5e:	4b6c      	ldr	r3, [pc, #432]	; (8001e10 <start_fill+0x1164>)
 8001c60:	f993 3000 	ldrsb.w	r3, [r3]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4b6b      	ldr	r3, [pc, #428]	; (8001e14 <start_fill+0x1168>)
 8001c68:	f993 3000 	ldrsb.w	r3, [r3]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	4a6a      	ldr	r2, [pc, #424]	; (8001e18 <start_fill+0x116c>)
 8001c70:	460b      	mov	r3, r1
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	4403      	add	r3, r0
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 8164 	bne.w	8001f50 <start_fill+0x12a4>
 8001c88:	4b61      	ldr	r3, [pc, #388]	; (8001e10 <start_fill+0x1164>)
 8001c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	4b60      	ldr	r3, [pc, #384]	; (8001e14 <start_fill+0x1168>)
 8001c92:	f993 3000 	ldrsb.w	r3, [r3]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	4960      	ldr	r1, [pc, #384]	; (8001e1c <start_fill+0x1170>)
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4403      	add	r3, r0
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	440b      	add	r3, r1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	f083 0301 	eor.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 814e 	beq.w	8001f50 <start_fill+0x12a4>
							stack[i][0] = turn_left_90;
 8001cb4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001cb8:	4959      	ldr	r1, [pc, #356]	; (8001e20 <start_fill+0x1174>)
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	22fc      	movs	r2, #252	; 0xfc
 8001cc4:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001cc6:	4b58      	ldr	r3, [pc, #352]	; (8001e28 <start_fill+0x117c>)
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 feaa 	bl	8003a24 <go_straight>
							turn_right90(&direction);
 8001cd0:	4856      	ldr	r0, [pc, #344]	; (8001e2c <start_fill+0x1180>)
 8001cd2:	f001 fdcf 	bl	8003874 <turn_right90>
							go_straight(d2, 0);
 8001cd6:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <start_fill+0x117c>)
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 fea2 	bl	8003a24 <go_straight>
					break;
 8001ce0:	e136      	b.n	8001f50 <start_fill+0x12a4>
						if((maze[y][x] & top_wall) == 0 && !visited[y - 1][x]){
 8001ce2:	4b4b      	ldr	r3, [pc, #300]	; (8001e10 <start_fill+0x1164>)
 8001ce4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4b4a      	ldr	r3, [pc, #296]	; (8001e14 <start_fill+0x1168>)
 8001cec:	f993 3000 	ldrsb.w	r3, [r3]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	4a49      	ldr	r2, [pc, #292]	; (8001e18 <start_fill+0x116c>)
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4403      	add	r3, r0
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 8122 	bne.w	8001f50 <start_fill+0x12a4>
 8001d0c:	4b40      	ldr	r3, [pc, #256]	; (8001e10 <start_fill+0x1164>)
 8001d0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d12:	1e5a      	subs	r2, r3, #1
 8001d14:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <start_fill+0x1168>)
 8001d16:	f993 3000 	ldrsb.w	r3, [r3]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	493f      	ldr	r1, [pc, #252]	; (8001e1c <start_fill+0x1170>)
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	440b      	add	r3, r1
 8001d28:	4403      	add	r3, r0
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f083 0301 	eor.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 810c 	beq.w	8001f50 <start_fill+0x12a4>
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001d38:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d3c:	4938      	ldr	r1, [pc, #224]	; (8001e20 <start_fill+0x1174>)
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	f993 3000 	ldrsb.w	r3, [r3]
 8001d4a:	f113 0f04 	cmn.w	r3, #4
 8001d4e:	d102      	bne.n	8001d56 <start_fill+0x10aa>
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	e001      	b.n	8001d5a <start_fill+0x10ae>
 8001d56:	f06f 0003 	mvn.w	r0, #3
 8001d5a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d5e:	4930      	ldr	r1, [pc, #192]	; (8001e20 <start_fill+0x1174>)
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	4602      	mov	r2, r0
 8001d6a:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	482d      	ldr	r0, [pc, #180]	; (8001e24 <start_fill+0x1178>)
 8001d70:	f001 fe58 	bl	8003a24 <go_straight>
					break;
 8001d74:	e0ec      	b.n	8001f50 <start_fill+0x12a4>
				case south:
					if(stack[i][0] == straight){
 8001d76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d7a:	4929      	ldr	r1, [pc, #164]	; (8001e20 <start_fill+0x1174>)
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f993 3000 	ldrsb.w	r3, [r3]
 8001d88:	f113 0f06 	cmn.w	r3, #6
 8001d8c:	f040 8090 	bne.w	8001eb0 <start_fill+0x1204>
						if(((maze[y][x] & left_wall) == 0) && !visited[y][x - 1]){
 8001d90:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <start_fill+0x1164>)
 8001d92:	f993 3000 	ldrsb.w	r3, [r3]
 8001d96:	4619      	mov	r1, r3
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <start_fill+0x1168>)
 8001d9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <start_fill+0x116c>)
 8001da2:	460b      	mov	r3, r1
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	4403      	add	r3, r0
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d13b      	bne.n	8001e30 <start_fill+0x1184>
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <start_fill+0x1164>)
 8001dba:	f993 3000 	ldrsb.w	r3, [r3]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <start_fill+0x1168>)
 8001dc2:	f993 3000 	ldrsb.w	r3, [r3]
 8001dc6:	1e5a      	subs	r2, r3, #1
 8001dc8:	4914      	ldr	r1, [pc, #80]	; (8001e1c <start_fill+0x1170>)
 8001dca:	4603      	mov	r3, r0
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4403      	add	r3, r0
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	440b      	add	r3, r1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	f083 0301 	eor.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d026      	beq.n	8001e30 <start_fill+0x1184>
							stack[i][0] = turn_left_90;
 8001de2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001de6:	490e      	ldr	r1, [pc, #56]	; (8001e20 <start_fill+0x1174>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	22fc      	movs	r2, #252	; 0xfc
 8001df2:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <start_fill+0x117c>)
 8001df6:	2101      	movs	r1, #1
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f001 fe13 	bl	8003a24 <go_straight>
							turn_right90(&direction);
 8001dfe:	480b      	ldr	r0, [pc, #44]	; (8001e2c <start_fill+0x1180>)
 8001e00:	f001 fd38 	bl	8003874 <turn_right90>
							go_straight(d2, 0);
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <start_fill+0x117c>)
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f001 fe0b 	bl	8003a24 <go_straight>
						if((maze[y][x] & bottom_wall) == 0 && !visited[y + 1][x]){
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
							go_straight(square_size, 0);
						}
					}
					break;
 8001e0e:	e0a1      	b.n	8001f54 <start_fill+0x12a8>
 8001e10:	20000155 	.word	0x20000155
 8001e14:	20000154 	.word	0x20000154
 8001e18:	200002a4 	.word	0x200002a4
 8001e1c:	20000308 	.word	0x20000308
 8001e20:	20000028 	.word	0x20000028
 8001e24:	43960000 	.word	0x43960000
 8001e28:	42e80000 	.word	0x42e80000
 8001e2c:	20000156 	.word	0x20000156
						} else if(((maze[y][x] & right_wall) == 0) && !visited[y][x + 1]){
 8001e30:	4b73      	ldr	r3, [pc, #460]	; (8002000 <start_fill+0x1354>)
 8001e32:	f993 3000 	ldrsb.w	r3, [r3]
 8001e36:	4619      	mov	r1, r3
 8001e38:	4b72      	ldr	r3, [pc, #456]	; (8002004 <start_fill+0x1358>)
 8001e3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	4a71      	ldr	r2, [pc, #452]	; (8002008 <start_fill+0x135c>)
 8001e42:	460b      	mov	r3, r1
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4403      	add	r3, r0
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d17d      	bne.n	8001f54 <start_fill+0x12a8>
 8001e58:	4b69      	ldr	r3, [pc, #420]	; (8002000 <start_fill+0x1354>)
 8001e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	4b68      	ldr	r3, [pc, #416]	; (8002004 <start_fill+0x1358>)
 8001e62:	f993 3000 	ldrsb.w	r3, [r3]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	4968      	ldr	r1, [pc, #416]	; (800200c <start_fill+0x1360>)
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4403      	add	r3, r0
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	440b      	add	r3, r1
 8001e74:	4413      	add	r3, r2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	f083 0301 	eor.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d068      	beq.n	8001f54 <start_fill+0x12a8>
							stack[i][0] = turn_right_90;
 8001e82:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e86:	4962      	ldr	r1, [pc, #392]	; (8002010 <start_fill+0x1364>)
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	22ff      	movs	r2, #255	; 0xff
 8001e92:	701a      	strb	r2, [r3, #0]
							go_straight(d2, 1);
 8001e94:	4b5f      	ldr	r3, [pc, #380]	; (8002014 <start_fill+0x1368>)
 8001e96:	2101      	movs	r1, #1
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f001 fdc3 	bl	8003a24 <go_straight>
							turn_left90(&direction);
 8001e9e:	485e      	ldr	r0, [pc, #376]	; (8002018 <start_fill+0x136c>)
 8001ea0:	f001 fc10 	bl	80036c4 <turn_left90>
							go_straight(d2, 0);
 8001ea4:	4b5b      	ldr	r3, [pc, #364]	; (8002014 <start_fill+0x1368>)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f001 fdbb 	bl	8003a24 <go_straight>
					break;
 8001eae:	e051      	b.n	8001f54 <start_fill+0x12a8>
						if((maze[y][x] & bottom_wall) == 0 && !visited[y + 1][x]){
 8001eb0:	4b53      	ldr	r3, [pc, #332]	; (8002000 <start_fill+0x1354>)
 8001eb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4b52      	ldr	r3, [pc, #328]	; (8002004 <start_fill+0x1358>)
 8001eba:	f993 3000 	ldrsb.w	r3, [r3]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	4a51      	ldr	r2, [pc, #324]	; (8002008 <start_fill+0x135c>)
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	4403      	add	r3, r0
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d13d      	bne.n	8001f54 <start_fill+0x12a8>
 8001ed8:	4b49      	ldr	r3, [pc, #292]	; (8002000 <start_fill+0x1354>)
 8001eda:	f993 3000 	ldrsb.w	r3, [r3]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	4b48      	ldr	r3, [pc, #288]	; (8002004 <start_fill+0x1358>)
 8001ee2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	4948      	ldr	r1, [pc, #288]	; (800200c <start_fill+0x1360>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	440b      	add	r3, r1
 8001ef4:	4403      	add	r3, r0
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	f083 0301 	eor.w	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d028      	beq.n	8001f54 <start_fill+0x12a8>
							stack[i][0] = (stack[i][0] == turn_left_90) ? turn_right_90 : turn_left_90;
 8001f02:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f06:	4942      	ldr	r1, [pc, #264]	; (8002010 <start_fill+0x1364>)
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f993 3000 	ldrsb.w	r3, [r3]
 8001f14:	f113 0f04 	cmn.w	r3, #4
 8001f18:	d102      	bne.n	8001f20 <start_fill+0x1274>
 8001f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1e:	e001      	b.n	8001f24 <start_fill+0x1278>
 8001f20:	f06f 0003 	mvn.w	r0, #3
 8001f24:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f28:	4939      	ldr	r1, [pc, #228]	; (8002010 <start_fill+0x1364>)
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	4602      	mov	r2, r0
 8001f34:	701a      	strb	r2, [r3, #0]
							go_straight(square_size, 0);
 8001f36:	2100      	movs	r1, #0
 8001f38:	4838      	ldr	r0, [pc, #224]	; (800201c <start_fill+0x1370>)
 8001f3a:	f001 fd73 	bl	8003a24 <go_straight>
					break;
 8001f3e:	e009      	b.n	8001f54 <start_fill+0x12a8>
			if(frontfree){
 8001f40:	bf00      	nop
 8001f42:	e008      	b.n	8001f56 <start_fill+0x12aa>
			if(frontfree){
 8001f44:	bf00      	nop
 8001f46:	e006      	b.n	8001f56 <start_fill+0x12aa>
					break;
 8001f48:	bf00      	nop
 8001f4a:	e004      	b.n	8001f56 <start_fill+0x12aa>
					break;
 8001f4c:	bf00      	nop
 8001f4e:	e002      	b.n	8001f56 <start_fill+0x12aa>
					break;
 8001f50:	bf00      	nop
 8001f52:	e000      	b.n	8001f56 <start_fill+0x12aa>
					break;
 8001f54:	bf00      	nop
			}
		}
		for(int n = 0; n < grid_size; n++){
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	e044      	b.n	8001fe6 <start_fill+0x133a>
			for(int m = 0; m < grid_size; m++){
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	e03b      	b.n	8001fda <start_fill+0x132e>
				if(!visited[y][x]){
 8001f62:	4b27      	ldr	r3, [pc, #156]	; (8002000 <start_fill+0x1354>)
 8001f64:	f993 3000 	ldrsb.w	r3, [r3]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <start_fill+0x1358>)
 8001f6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f70:	4618      	mov	r0, r3
 8001f72:	4a26      	ldr	r2, [pc, #152]	; (800200c <start_fill+0x1360>)
 8001f74:	460b      	mov	r3, r1
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4403      	add	r3, r0
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	f083 0301 	eor.w	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d023      	beq.n	8001fd4 <start_fill+0x1328>
					maze[x][y] |= 15;
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <start_fill+0x1358>)
 8001f8e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f92:	4619      	mov	r1, r3
 8001f94:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <start_fill+0x1354>)
 8001f96:	f993 3000 	ldrsb.w	r3, [r3]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <start_fill+0x135c>)
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4403      	add	r3, r0
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4a15      	ldr	r2, [pc, #84]	; (8002004 <start_fill+0x1358>)
 8001fae:	f992 2000 	ldrsb.w	r2, [r2]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4a12      	ldr	r2, [pc, #72]	; (8002000 <start_fill+0x1354>)
 8001fb6:	f992 2000 	ldrsb.w	r2, [r2]
 8001fba:	4614      	mov	r4, r2
 8001fbc:	f043 030f 	orr.w	r3, r3, #15
 8001fc0:	b2d8      	uxtb	r0, r3
 8001fc2:	4a11      	ldr	r2, [pc, #68]	; (8002008 <start_fill+0x135c>)
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	4423      	add	r3, r4
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	701a      	strb	r2, [r3, #0]
			for(int m = 0; m < grid_size; m++){
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b09      	cmp	r3, #9
 8001fde:	ddc0      	ble.n	8001f62 <start_fill+0x12b6>
		for(int n = 0; n < grid_size; n++){
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b09      	cmp	r3, #9
 8001fea:	ddb7      	ble.n	8001f5c <start_fill+0x12b0>
	while(i > 0){
 8001fec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f73e aec8 	bgt.w	8000d86 <start_fill+0xda>
				}
			}
		}
	}
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd90      	pop	{r4, r7, pc}
 8002000:	20000155 	.word	0x20000155
 8002004:	20000154 	.word	0x20000154
 8002008:	200002a4 	.word	0x200002a4
 800200c:	20000308 	.word	0x20000308
 8002010:	20000028 	.word	0x20000028
 8002014:	42e80000 	.word	0x42e80000
 8002018:	20000156 	.word	0x20000156
 800201c:	43960000 	.word	0x43960000

08002020 <found>:

void found(int16_t index){
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
	switch(direction){
 800202a:	4b62      	ldr	r3, [pc, #392]	; (80021b4 <found+0x194>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d071      	beq.n	8002116 <found+0xf6>
 8002032:	2b02      	cmp	r3, #2
 8002034:	f300 80b0 	bgt.w	8002198 <found+0x178>
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <found+0x22>
 800203c:	2b01      	cmp	r3, #1
 800203e:	d035      	beq.n	80020ac <found+0x8c>
 8002040:	e095      	b.n	800216e <found+0x14e>
		case west:
			go_straight(d2, 1);
 8002042:	4b5d      	ldr	r3, [pc, #372]	; (80021b8 <found+0x198>)
 8002044:	2101      	movs	r1, #1
 8002046:	4618      	mov	r0, r3
 8002048:	f001 fcec 	bl	8003a24 <go_straight>
			turn_right90(&direction);
 800204c:	4859      	ldr	r0, [pc, #356]	; (80021b4 <found+0x194>)
 800204e:	f001 fc11 	bl	8003874 <turn_right90>
			go_straight(d2, 1);
 8002052:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <found+0x198>)
 8002054:	2101      	movs	r1, #1
 8002056:	4618      	mov	r0, r3
 8002058:	f001 fce4 	bl	8003a24 <go_straight>
			stack[++index][0] = turn_right_90;
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	3301      	adds	r3, #1
 8002060:	b29b      	uxth	r3, r3
 8002062:	80fb      	strh	r3, [r7, #6]
 8002064:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002068:	4954      	ldr	r1, [pc, #336]	; (80021bc <found+0x19c>)
 800206a:	4613      	mov	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	440b      	add	r3, r1
 8002072:	22ff      	movs	r2, #255	; 0xff
 8002074:	701a      	strb	r2, [r3, #0]
			stack[index][1] = x;
 8002076:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800207a:	4b51      	ldr	r3, [pc, #324]	; (80021c0 <found+0x1a0>)
 800207c:	f993 0000 	ldrsb.w	r0, [r3]
 8002080:	494e      	ldr	r1, [pc, #312]	; (80021bc <found+0x19c>)
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	440b      	add	r3, r1
 800208a:	3301      	adds	r3, #1
 800208c:	4602      	mov	r2, r0
 800208e:	701a      	strb	r2, [r3, #0]
			stack[index][2] = y;
 8002090:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002094:	4b4b      	ldr	r3, [pc, #300]	; (80021c4 <found+0x1a4>)
 8002096:	f993 0000 	ldrsb.w	r0, [r3]
 800209a:	4948      	ldr	r1, [pc, #288]	; (80021bc <found+0x19c>)
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	440b      	add	r3, r1
 80020a4:	3302      	adds	r3, #2
 80020a6:	4602      	mov	r2, r0
 80020a8:	701a      	strb	r2, [r3, #0]
			break;
 80020aa:	e060      	b.n	800216e <found+0x14e>
		case east:
			go_straight(d2, 1);
 80020ac:	4b42      	ldr	r3, [pc, #264]	; (80021b8 <found+0x198>)
 80020ae:	2101      	movs	r1, #1
 80020b0:	4618      	mov	r0, r3
 80020b2:	f001 fcb7 	bl	8003a24 <go_straight>
			turn_left90(&direction);
 80020b6:	483f      	ldr	r0, [pc, #252]	; (80021b4 <found+0x194>)
 80020b8:	f001 fb04 	bl	80036c4 <turn_left90>
			go_straight(d2, 1);
 80020bc:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <found+0x198>)
 80020be:	2101      	movs	r1, #1
 80020c0:	4618      	mov	r0, r3
 80020c2:	f001 fcaf 	bl	8003a24 <go_straight>
			stack[++index][0] = turn_left_90;
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	3301      	adds	r3, #1
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	80fb      	strh	r3, [r7, #6]
 80020ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020d2:	493a      	ldr	r1, [pc, #232]	; (80021bc <found+0x19c>)
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	440b      	add	r3, r1
 80020dc:	22fc      	movs	r2, #252	; 0xfc
 80020de:	701a      	strb	r2, [r3, #0]
			stack[index][1] = x;
 80020e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020e4:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <found+0x1a0>)
 80020e6:	f993 0000 	ldrsb.w	r0, [r3]
 80020ea:	4934      	ldr	r1, [pc, #208]	; (80021bc <found+0x19c>)
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	440b      	add	r3, r1
 80020f4:	3301      	adds	r3, #1
 80020f6:	4602      	mov	r2, r0
 80020f8:	701a      	strb	r2, [r3, #0]
			stack[index][2] = y;
 80020fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <found+0x1a4>)
 8002100:	f993 0000 	ldrsb.w	r0, [r3]
 8002104:	492d      	ldr	r1, [pc, #180]	; (80021bc <found+0x19c>)
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	440b      	add	r3, r1
 800210e:	3302      	adds	r3, #2
 8002110:	4602      	mov	r2, r0
 8002112:	701a      	strb	r2, [r3, #0]
			break;
 8002114:	e02b      	b.n	800216e <found+0x14e>
		case north:
			go_straight(square_size, 1);
 8002116:	2101      	movs	r1, #1
 8002118:	482b      	ldr	r0, [pc, #172]	; (80021c8 <found+0x1a8>)
 800211a:	f001 fc83 	bl	8003a24 <go_straight>
			stack[++index][0] = straight;
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	3301      	adds	r3, #1
 8002122:	b29b      	uxth	r3, r3
 8002124:	80fb      	strh	r3, [r7, #6]
 8002126:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800212a:	4924      	ldr	r1, [pc, #144]	; (80021bc <found+0x19c>)
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	440b      	add	r3, r1
 8002134:	22fa      	movs	r2, #250	; 0xfa
 8002136:	701a      	strb	r2, [r3, #0]
			stack[index][1] = x;
 8002138:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <found+0x1a0>)
 800213e:	f993 0000 	ldrsb.w	r0, [r3]
 8002142:	491e      	ldr	r1, [pc, #120]	; (80021bc <found+0x19c>)
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	440b      	add	r3, r1
 800214c:	3301      	adds	r3, #1
 800214e:	4602      	mov	r2, r0
 8002150:	701a      	strb	r2, [r3, #0]
			stack[index][2] = y;
 8002152:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002156:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <found+0x1a4>)
 8002158:	f993 0000 	ldrsb.w	r0, [r3]
 800215c:	4917      	ldr	r1, [pc, #92]	; (80021bc <found+0x19c>)
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	440b      	add	r3, r1
 8002166:	3302      	adds	r3, #2
 8002168:	4602      	mov	r2, r0
 800216a:	701a      	strb	r2, [r3, #0]
			break;
 800216c:	bf00      	nop
	}
	while(--index > 0){
 800216e:	e013      	b.n	8002198 <found+0x178>
		stack[index][1] = -1;
 8002170:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002174:	4911      	ldr	r1, [pc, #68]	; (80021bc <found+0x19c>)
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	440b      	add	r3, r1
 800217e:	3301      	adds	r3, #1
 8002180:	22ff      	movs	r2, #255	; 0xff
 8002182:	701a      	strb	r2, [r3, #0]
		stack[index][2] = 1;
 8002184:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002188:	490c      	ldr	r1, [pc, #48]	; (80021bc <found+0x19c>)
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	440b      	add	r3, r1
 8002192:	3302      	adds	r3, #2
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
	while(--index > 0){
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	3b01      	subs	r3, #1
 800219c:	b29b      	uxth	r3, r3
 800219e:	80fb      	strh	r3, [r7, #6]
 80021a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	dce3      	bgt.n	8002170 <found+0x150>
	}
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000156 	.word	0x20000156
 80021b8:	42e80000 	.word	0x42e80000
 80021bc:	20000028 	.word	0x20000028
 80021c0:	20000154 	.word	0x20000154
 80021c4:	20000155 	.word	0x20000155
 80021c8:	43960000 	.word	0x43960000

080021cc <set_wall>:

void set_wall(uint8_t rbl, uint8_t rbr, uint8_t rbf){
 80021cc:	b490      	push	{r4, r7}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
 80021d6:	460b      	mov	r3, r1
 80021d8:	71bb      	strb	r3, [r7, #6]
 80021da:	4613      	mov	r3, r2
 80021dc:	717b      	strb	r3, [r7, #5]
	switch(direction){
 80021de:	4b86      	ldr	r3, [pc, #536]	; (80023f8 <set_wall+0x22c>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	f200 8415 	bhi.w	8002a12 <set_wall+0x846>
 80021e8:	a201      	add	r2, pc, #4	; (adr r2, 80021f0 <set_wall+0x24>)
 80021ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ee:	bf00      	nop
 80021f0:	08002201 	.word	0x08002201
 80021f4:	08002409 	.word	0x08002409
 80021f8:	0800260d 	.word	0x0800260d
 80021fc:	08002811 	.word	0x08002811
		case west:
			x--;
 8002200:	4b7e      	ldr	r3, [pc, #504]	; (80023fc <set_wall+0x230>)
 8002202:	f993 3000 	ldrsb.w	r3, [r3]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	b25a      	sxtb	r2, r3
 800220e:	4b7b      	ldr	r3, [pc, #492]	; (80023fc <set_wall+0x230>)
 8002210:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d04c      	beq.n	80022b2 <set_wall+0xe6>
				maze[y][x] |= bottom_wall;
 8002218:	4b79      	ldr	r3, [pc, #484]	; (8002400 <set_wall+0x234>)
 800221a:	f993 3000 	ldrsb.w	r3, [r3]
 800221e:	4619      	mov	r1, r3
 8002220:	4b76      	ldr	r3, [pc, #472]	; (80023fc <set_wall+0x230>)
 8002222:	f993 3000 	ldrsb.w	r3, [r3]
 8002226:	4618      	mov	r0, r3
 8002228:	4a76      	ldr	r2, [pc, #472]	; (8002404 <set_wall+0x238>)
 800222a:	460b      	mov	r3, r1
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4413      	add	r3, r2
 8002234:	4403      	add	r3, r0
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4a71      	ldr	r2, [pc, #452]	; (8002400 <set_wall+0x234>)
 800223a:	f992 2000 	ldrsb.w	r2, [r2]
 800223e:	4611      	mov	r1, r2
 8002240:	4a6e      	ldr	r2, [pc, #440]	; (80023fc <set_wall+0x230>)
 8002242:	f992 2000 	ldrsb.w	r2, [r2]
 8002246:	4614      	mov	r4, r2
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	b2d8      	uxtb	r0, r3
 800224e:	4a6d      	ldr	r2, [pc, #436]	; (8002404 <set_wall+0x238>)
 8002250:	460b      	mov	r3, r1
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	4423      	add	r3, r4
 800225c:	4602      	mov	r2, r0
 800225e:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002260:	4b67      	ldr	r3, [pc, #412]	; (8002400 <set_wall+0x234>)
 8002262:	f993 3000 	ldrsb.w	r3, [r3]
 8002266:	2b08      	cmp	r3, #8
 8002268:	dc23      	bgt.n	80022b2 <set_wall+0xe6>
 800226a:	4b65      	ldr	r3, [pc, #404]	; (8002400 <set_wall+0x234>)
 800226c:	f993 3000 	ldrsb.w	r3, [r3]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	4b62      	ldr	r3, [pc, #392]	; (80023fc <set_wall+0x230>)
 8002274:	f993 3000 	ldrsb.w	r3, [r3]
 8002278:	4618      	mov	r0, r3
 800227a:	4962      	ldr	r1, [pc, #392]	; (8002404 <set_wall+0x238>)
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	440b      	add	r3, r1
 8002286:	4403      	add	r3, r0
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4a5d      	ldr	r2, [pc, #372]	; (8002400 <set_wall+0x234>)
 800228c:	f992 2000 	ldrsb.w	r2, [r2]
 8002290:	3201      	adds	r2, #1
 8002292:	495a      	ldr	r1, [pc, #360]	; (80023fc <set_wall+0x230>)
 8002294:	f991 1000 	ldrsb.w	r1, [r1]
 8002298:	460c      	mov	r4, r1
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	b2d8      	uxtb	r0, r3
 80022a0:	4958      	ldr	r1, [pc, #352]	; (8002404 <set_wall+0x238>)
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	440b      	add	r3, r1
 80022ac:	4423      	add	r3, r4
 80022ae:	4602      	mov	r2, r0
 80022b0:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 80022b2:	79bb      	ldrb	r3, [r7, #6]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d04c      	beq.n	8002352 <set_wall+0x186>
				maze[y][x] |= top_wall;
 80022b8:	4b51      	ldr	r3, [pc, #324]	; (8002400 <set_wall+0x234>)
 80022ba:	f993 3000 	ldrsb.w	r3, [r3]
 80022be:	4619      	mov	r1, r3
 80022c0:	4b4e      	ldr	r3, [pc, #312]	; (80023fc <set_wall+0x230>)
 80022c2:	f993 3000 	ldrsb.w	r3, [r3]
 80022c6:	4618      	mov	r0, r3
 80022c8:	4a4e      	ldr	r2, [pc, #312]	; (8002404 <set_wall+0x238>)
 80022ca:	460b      	mov	r3, r1
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	4403      	add	r3, r0
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4a49      	ldr	r2, [pc, #292]	; (8002400 <set_wall+0x234>)
 80022da:	f992 2000 	ldrsb.w	r2, [r2]
 80022de:	4611      	mov	r1, r2
 80022e0:	4a46      	ldr	r2, [pc, #280]	; (80023fc <set_wall+0x230>)
 80022e2:	f992 2000 	ldrsb.w	r2, [r2]
 80022e6:	4614      	mov	r4, r2
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	b2d8      	uxtb	r0, r3
 80022ee:	4a45      	ldr	r2, [pc, #276]	; (8002404 <set_wall+0x238>)
 80022f0:	460b      	mov	r3, r1
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	4423      	add	r3, r4
 80022fc:	4602      	mov	r2, r0
 80022fe:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002300:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <set_wall+0x234>)
 8002302:	f993 3000 	ldrsb.w	r3, [r3]
 8002306:	2b00      	cmp	r3, #0
 8002308:	dd23      	ble.n	8002352 <set_wall+0x186>
 800230a:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <set_wall+0x234>)
 800230c:	f993 3000 	ldrsb.w	r3, [r3]
 8002310:	1e5a      	subs	r2, r3, #1
 8002312:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <set_wall+0x230>)
 8002314:	f993 3000 	ldrsb.w	r3, [r3]
 8002318:	4618      	mov	r0, r3
 800231a:	493a      	ldr	r1, [pc, #232]	; (8002404 <set_wall+0x238>)
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	440b      	add	r3, r1
 8002326:	4403      	add	r3, r0
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	4a35      	ldr	r2, [pc, #212]	; (8002400 <set_wall+0x234>)
 800232c:	f992 2000 	ldrsb.w	r2, [r2]
 8002330:	3a01      	subs	r2, #1
 8002332:	4932      	ldr	r1, [pc, #200]	; (80023fc <set_wall+0x230>)
 8002334:	f991 1000 	ldrsb.w	r1, [r1]
 8002338:	460c      	mov	r4, r1
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	b2d8      	uxtb	r0, r3
 8002340:	4930      	ldr	r1, [pc, #192]	; (8002404 <set_wall+0x238>)
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	440b      	add	r3, r1
 800234c:	4423      	add	r3, r4
 800234e:	4602      	mov	r2, r0
 8002350:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002352:	797b      	ldrb	r3, [r7, #5]
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 8355 	beq.w	8002a04 <set_wall+0x838>
				maze[y][x] |= left_wall;
 800235a:	4b29      	ldr	r3, [pc, #164]	; (8002400 <set_wall+0x234>)
 800235c:	f993 3000 	ldrsb.w	r3, [r3]
 8002360:	4619      	mov	r1, r3
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <set_wall+0x230>)
 8002364:	f993 3000 	ldrsb.w	r3, [r3]
 8002368:	4618      	mov	r0, r3
 800236a:	4a26      	ldr	r2, [pc, #152]	; (8002404 <set_wall+0x238>)
 800236c:	460b      	mov	r3, r1
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	4403      	add	r3, r0
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4a21      	ldr	r2, [pc, #132]	; (8002400 <set_wall+0x234>)
 800237c:	f992 2000 	ldrsb.w	r2, [r2]
 8002380:	4611      	mov	r1, r2
 8002382:	4a1e      	ldr	r2, [pc, #120]	; (80023fc <set_wall+0x230>)
 8002384:	f992 2000 	ldrsb.w	r2, [r2]
 8002388:	4614      	mov	r4, r2
 800238a:	f043 0308 	orr.w	r3, r3, #8
 800238e:	b2d8      	uxtb	r0, r3
 8002390:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <set_wall+0x238>)
 8002392:	460b      	mov	r3, r1
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	4423      	add	r3, r4
 800239e:	4602      	mov	r2, r0
 80023a0:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <set_wall+0x230>)
 80023a4:	f993 3000 	ldrsb.w	r3, [r3]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f340 832b 	ble.w	8002a04 <set_wall+0x838>
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <set_wall+0x234>)
 80023b0:	f993 3000 	ldrsb.w	r3, [r3]
 80023b4:	4618      	mov	r0, r3
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <set_wall+0x230>)
 80023b8:	f993 3000 	ldrsb.w	r3, [r3]
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	4911      	ldr	r1, [pc, #68]	; (8002404 <set_wall+0x238>)
 80023c0:	4603      	mov	r3, r0
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4403      	add	r3, r0
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	440b      	add	r3, r1
 80023ca:	4413      	add	r3, r2
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <set_wall+0x234>)
 80023d0:	f992 2000 	ldrsb.w	r2, [r2]
 80023d4:	4610      	mov	r0, r2
 80023d6:	4a09      	ldr	r2, [pc, #36]	; (80023fc <set_wall+0x230>)
 80023d8:	f992 2000 	ldrsb.w	r2, [r2]
 80023dc:	3a01      	subs	r2, #1
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	b2dc      	uxtb	r4, r3
 80023e4:	4907      	ldr	r1, [pc, #28]	; (8002404 <set_wall+0x238>)
 80023e6:	4603      	mov	r3, r0
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4403      	add	r3, r0
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	440b      	add	r3, r1
 80023f0:	4413      	add	r3, r2
 80023f2:	4622      	mov	r2, r4
 80023f4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80023f6:	e305      	b.n	8002a04 <set_wall+0x838>
 80023f8:	20000156 	.word	0x20000156
 80023fc:	20000154 	.word	0x20000154
 8002400:	20000155 	.word	0x20000155
 8002404:	200002a4 	.word	0x200002a4
		case east:
			x++;
 8002408:	4b7d      	ldr	r3, [pc, #500]	; (8002600 <set_wall+0x434>)
 800240a:	f993 3000 	ldrsb.w	r3, [r3]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3301      	adds	r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	b25a      	sxtb	r2, r3
 8002416:	4b7a      	ldr	r3, [pc, #488]	; (8002600 <set_wall+0x434>)
 8002418:	701a      	strb	r2, [r3, #0]
			if(rbl){
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d04c      	beq.n	80024ba <set_wall+0x2ee>
				maze[y][x] |= top_wall;
 8002420:	4b78      	ldr	r3, [pc, #480]	; (8002604 <set_wall+0x438>)
 8002422:	f993 3000 	ldrsb.w	r3, [r3]
 8002426:	4619      	mov	r1, r3
 8002428:	4b75      	ldr	r3, [pc, #468]	; (8002600 <set_wall+0x434>)
 800242a:	f993 3000 	ldrsb.w	r3, [r3]
 800242e:	4618      	mov	r0, r3
 8002430:	4a75      	ldr	r2, [pc, #468]	; (8002608 <set_wall+0x43c>)
 8002432:	460b      	mov	r3, r1
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	4403      	add	r3, r0
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4a70      	ldr	r2, [pc, #448]	; (8002604 <set_wall+0x438>)
 8002442:	f992 2000 	ldrsb.w	r2, [r2]
 8002446:	4611      	mov	r1, r2
 8002448:	4a6d      	ldr	r2, [pc, #436]	; (8002600 <set_wall+0x434>)
 800244a:	f992 2000 	ldrsb.w	r2, [r2]
 800244e:	4614      	mov	r4, r2
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	b2d8      	uxtb	r0, r3
 8002456:	4a6c      	ldr	r2, [pc, #432]	; (8002608 <set_wall+0x43c>)
 8002458:	460b      	mov	r3, r1
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	4423      	add	r3, r4
 8002464:	4602      	mov	r2, r0
 8002466:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 8002468:	4b66      	ldr	r3, [pc, #408]	; (8002604 <set_wall+0x438>)
 800246a:	f993 3000 	ldrsb.w	r3, [r3]
 800246e:	2b00      	cmp	r3, #0
 8002470:	dd23      	ble.n	80024ba <set_wall+0x2ee>
 8002472:	4b64      	ldr	r3, [pc, #400]	; (8002604 <set_wall+0x438>)
 8002474:	f993 3000 	ldrsb.w	r3, [r3]
 8002478:	1e5a      	subs	r2, r3, #1
 800247a:	4b61      	ldr	r3, [pc, #388]	; (8002600 <set_wall+0x434>)
 800247c:	f993 3000 	ldrsb.w	r3, [r3]
 8002480:	4618      	mov	r0, r3
 8002482:	4961      	ldr	r1, [pc, #388]	; (8002608 <set_wall+0x43c>)
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	440b      	add	r3, r1
 800248e:	4403      	add	r3, r0
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	4a5c      	ldr	r2, [pc, #368]	; (8002604 <set_wall+0x438>)
 8002494:	f992 2000 	ldrsb.w	r2, [r2]
 8002498:	3a01      	subs	r2, #1
 800249a:	4959      	ldr	r1, [pc, #356]	; (8002600 <set_wall+0x434>)
 800249c:	f991 1000 	ldrsb.w	r1, [r1]
 80024a0:	460c      	mov	r4, r1
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	b2d8      	uxtb	r0, r3
 80024a8:	4957      	ldr	r1, [pc, #348]	; (8002608 <set_wall+0x43c>)
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	440b      	add	r3, r1
 80024b4:	4423      	add	r3, r4
 80024b6:	4602      	mov	r2, r0
 80024b8:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 80024ba:	79bb      	ldrb	r3, [r7, #6]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d04c      	beq.n	800255a <set_wall+0x38e>
				maze[y][x] |= bottom_wall;
 80024c0:	4b50      	ldr	r3, [pc, #320]	; (8002604 <set_wall+0x438>)
 80024c2:	f993 3000 	ldrsb.w	r3, [r3]
 80024c6:	4619      	mov	r1, r3
 80024c8:	4b4d      	ldr	r3, [pc, #308]	; (8002600 <set_wall+0x434>)
 80024ca:	f993 3000 	ldrsb.w	r3, [r3]
 80024ce:	4618      	mov	r0, r3
 80024d0:	4a4d      	ldr	r2, [pc, #308]	; (8002608 <set_wall+0x43c>)
 80024d2:	460b      	mov	r3, r1
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4413      	add	r3, r2
 80024dc:	4403      	add	r3, r0
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4a48      	ldr	r2, [pc, #288]	; (8002604 <set_wall+0x438>)
 80024e2:	f992 2000 	ldrsb.w	r2, [r2]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4a45      	ldr	r2, [pc, #276]	; (8002600 <set_wall+0x434>)
 80024ea:	f992 2000 	ldrsb.w	r2, [r2]
 80024ee:	4614      	mov	r4, r2
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	b2d8      	uxtb	r0, r3
 80024f6:	4a44      	ldr	r2, [pc, #272]	; (8002608 <set_wall+0x43c>)
 80024f8:	460b      	mov	r3, r1
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	4423      	add	r3, r4
 8002504:	4602      	mov	r2, r0
 8002506:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 8002508:	4b3e      	ldr	r3, [pc, #248]	; (8002604 <set_wall+0x438>)
 800250a:	f993 3000 	ldrsb.w	r3, [r3]
 800250e:	2b08      	cmp	r3, #8
 8002510:	dc23      	bgt.n	800255a <set_wall+0x38e>
 8002512:	4b3c      	ldr	r3, [pc, #240]	; (8002604 <set_wall+0x438>)
 8002514:	f993 3000 	ldrsb.w	r3, [r3]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	4b39      	ldr	r3, [pc, #228]	; (8002600 <set_wall+0x434>)
 800251c:	f993 3000 	ldrsb.w	r3, [r3]
 8002520:	4618      	mov	r0, r3
 8002522:	4939      	ldr	r1, [pc, #228]	; (8002608 <set_wall+0x43c>)
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	440b      	add	r3, r1
 800252e:	4403      	add	r3, r0
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	4a34      	ldr	r2, [pc, #208]	; (8002604 <set_wall+0x438>)
 8002534:	f992 2000 	ldrsb.w	r2, [r2]
 8002538:	3201      	adds	r2, #1
 800253a:	4931      	ldr	r1, [pc, #196]	; (8002600 <set_wall+0x434>)
 800253c:	f991 1000 	ldrsb.w	r1, [r1]
 8002540:	460c      	mov	r4, r1
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	b2d8      	uxtb	r0, r3
 8002548:	492f      	ldr	r1, [pc, #188]	; (8002608 <set_wall+0x43c>)
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	440b      	add	r3, r1
 8002554:	4423      	add	r3, r4
 8002556:	4602      	mov	r2, r0
 8002558:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 800255a:	797b      	ldrb	r3, [r7, #5]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8253 	beq.w	8002a08 <set_wall+0x83c>
				maze[y][x] |= right_wall;
 8002562:	4b28      	ldr	r3, [pc, #160]	; (8002604 <set_wall+0x438>)
 8002564:	f993 3000 	ldrsb.w	r3, [r3]
 8002568:	4619      	mov	r1, r3
 800256a:	4b25      	ldr	r3, [pc, #148]	; (8002600 <set_wall+0x434>)
 800256c:	f993 3000 	ldrsb.w	r3, [r3]
 8002570:	4618      	mov	r0, r3
 8002572:	4a25      	ldr	r2, [pc, #148]	; (8002608 <set_wall+0x43c>)
 8002574:	460b      	mov	r3, r1
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	4403      	add	r3, r0
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	4a20      	ldr	r2, [pc, #128]	; (8002604 <set_wall+0x438>)
 8002584:	f992 2000 	ldrsb.w	r2, [r2]
 8002588:	4611      	mov	r1, r2
 800258a:	4a1d      	ldr	r2, [pc, #116]	; (8002600 <set_wall+0x434>)
 800258c:	f992 2000 	ldrsb.w	r2, [r2]
 8002590:	4614      	mov	r4, r2
 8002592:	f043 0304 	orr.w	r3, r3, #4
 8002596:	b2d8      	uxtb	r0, r3
 8002598:	4a1b      	ldr	r2, [pc, #108]	; (8002608 <set_wall+0x43c>)
 800259a:	460b      	mov	r3, r1
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	4423      	add	r3, r4
 80025a6:	4602      	mov	r2, r0
 80025a8:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <set_wall+0x434>)
 80025ac:	f993 3000 	ldrsb.w	r3, [r3]
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	f300 8229 	bgt.w	8002a08 <set_wall+0x83c>
 80025b6:	4b13      	ldr	r3, [pc, #76]	; (8002604 <set_wall+0x438>)
 80025b8:	f993 3000 	ldrsb.w	r3, [r3]
 80025bc:	4618      	mov	r0, r3
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <set_wall+0x434>)
 80025c0:	f993 3000 	ldrsb.w	r3, [r3]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	4910      	ldr	r1, [pc, #64]	; (8002608 <set_wall+0x43c>)
 80025c8:	4603      	mov	r3, r0
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4403      	add	r3, r0
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	440b      	add	r3, r1
 80025d2:	4413      	add	r3, r2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <set_wall+0x438>)
 80025d8:	f992 2000 	ldrsb.w	r2, [r2]
 80025dc:	4610      	mov	r0, r2
 80025de:	4a08      	ldr	r2, [pc, #32]	; (8002600 <set_wall+0x434>)
 80025e0:	f992 2000 	ldrsb.w	r2, [r2]
 80025e4:	3201      	adds	r2, #1
 80025e6:	f043 0308 	orr.w	r3, r3, #8
 80025ea:	b2dc      	uxtb	r4, r3
 80025ec:	4906      	ldr	r1, [pc, #24]	; (8002608 <set_wall+0x43c>)
 80025ee:	4603      	mov	r3, r0
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4403      	add	r3, r0
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	440b      	add	r3, r1
 80025f8:	4413      	add	r3, r2
 80025fa:	4622      	mov	r2, r4
 80025fc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80025fe:	e203      	b.n	8002a08 <set_wall+0x83c>
 8002600:	20000154 	.word	0x20000154
 8002604:	20000155 	.word	0x20000155
 8002608:	200002a4 	.word	0x200002a4
		case north:
			y--;
 800260c:	4b7d      	ldr	r3, [pc, #500]	; (8002804 <set_wall+0x638>)
 800260e:	f993 3000 	ldrsb.w	r3, [r3]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	b25a      	sxtb	r2, r3
 800261a:	4b7a      	ldr	r3, [pc, #488]	; (8002804 <set_wall+0x638>)
 800261c:	701a      	strb	r2, [r3, #0]
			if(rbl){
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d04c      	beq.n	80026be <set_wall+0x4f2>
				maze[y][x] |= left_wall;
 8002624:	4b77      	ldr	r3, [pc, #476]	; (8002804 <set_wall+0x638>)
 8002626:	f993 3000 	ldrsb.w	r3, [r3]
 800262a:	4619      	mov	r1, r3
 800262c:	4b76      	ldr	r3, [pc, #472]	; (8002808 <set_wall+0x63c>)
 800262e:	f993 3000 	ldrsb.w	r3, [r3]
 8002632:	4618      	mov	r0, r3
 8002634:	4a75      	ldr	r2, [pc, #468]	; (800280c <set_wall+0x640>)
 8002636:	460b      	mov	r3, r1
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	4403      	add	r3, r0
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4a6f      	ldr	r2, [pc, #444]	; (8002804 <set_wall+0x638>)
 8002646:	f992 2000 	ldrsb.w	r2, [r2]
 800264a:	4611      	mov	r1, r2
 800264c:	4a6e      	ldr	r2, [pc, #440]	; (8002808 <set_wall+0x63c>)
 800264e:	f992 2000 	ldrsb.w	r2, [r2]
 8002652:	4614      	mov	r4, r2
 8002654:	f043 0308 	orr.w	r3, r3, #8
 8002658:	b2d8      	uxtb	r0, r3
 800265a:	4a6c      	ldr	r2, [pc, #432]	; (800280c <set_wall+0x640>)
 800265c:	460b      	mov	r3, r1
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	4423      	add	r3, r4
 8002668:	4602      	mov	r2, r0
 800266a:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 800266c:	4b66      	ldr	r3, [pc, #408]	; (8002808 <set_wall+0x63c>)
 800266e:	f993 3000 	ldrsb.w	r3, [r3]
 8002672:	2b00      	cmp	r3, #0
 8002674:	dd23      	ble.n	80026be <set_wall+0x4f2>
 8002676:	4b63      	ldr	r3, [pc, #396]	; (8002804 <set_wall+0x638>)
 8002678:	f993 3000 	ldrsb.w	r3, [r3]
 800267c:	4618      	mov	r0, r3
 800267e:	4b62      	ldr	r3, [pc, #392]	; (8002808 <set_wall+0x63c>)
 8002680:	f993 3000 	ldrsb.w	r3, [r3]
 8002684:	1e5a      	subs	r2, r3, #1
 8002686:	4961      	ldr	r1, [pc, #388]	; (800280c <set_wall+0x640>)
 8002688:	4603      	mov	r3, r0
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4403      	add	r3, r0
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	440b      	add	r3, r1
 8002692:	4413      	add	r3, r2
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	4a5b      	ldr	r2, [pc, #364]	; (8002804 <set_wall+0x638>)
 8002698:	f992 2000 	ldrsb.w	r2, [r2]
 800269c:	4610      	mov	r0, r2
 800269e:	4a5a      	ldr	r2, [pc, #360]	; (8002808 <set_wall+0x63c>)
 80026a0:	f992 2000 	ldrsb.w	r2, [r2]
 80026a4:	3a01      	subs	r2, #1
 80026a6:	f043 0304 	orr.w	r3, r3, #4
 80026aa:	b2dc      	uxtb	r4, r3
 80026ac:	4957      	ldr	r1, [pc, #348]	; (800280c <set_wall+0x640>)
 80026ae:	4603      	mov	r3, r0
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4403      	add	r3, r0
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	440b      	add	r3, r1
 80026b8:	4413      	add	r3, r2
 80026ba:	4622      	mov	r2, r4
 80026bc:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 80026be:	79bb      	ldrb	r3, [r7, #6]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d04c      	beq.n	800275e <set_wall+0x592>
				maze[y][x] |= right_wall;
 80026c4:	4b4f      	ldr	r3, [pc, #316]	; (8002804 <set_wall+0x638>)
 80026c6:	f993 3000 	ldrsb.w	r3, [r3]
 80026ca:	4619      	mov	r1, r3
 80026cc:	4b4e      	ldr	r3, [pc, #312]	; (8002808 <set_wall+0x63c>)
 80026ce:	f993 3000 	ldrsb.w	r3, [r3]
 80026d2:	4618      	mov	r0, r3
 80026d4:	4a4d      	ldr	r2, [pc, #308]	; (800280c <set_wall+0x640>)
 80026d6:	460b      	mov	r3, r1
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	4403      	add	r3, r0
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4a47      	ldr	r2, [pc, #284]	; (8002804 <set_wall+0x638>)
 80026e6:	f992 2000 	ldrsb.w	r2, [r2]
 80026ea:	4611      	mov	r1, r2
 80026ec:	4a46      	ldr	r2, [pc, #280]	; (8002808 <set_wall+0x63c>)
 80026ee:	f992 2000 	ldrsb.w	r2, [r2]
 80026f2:	4614      	mov	r4, r2
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	b2d8      	uxtb	r0, r3
 80026fa:	4a44      	ldr	r2, [pc, #272]	; (800280c <set_wall+0x640>)
 80026fc:	460b      	mov	r3, r1
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	4423      	add	r3, r4
 8002708:	4602      	mov	r2, r0
 800270a:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 800270c:	4b3e      	ldr	r3, [pc, #248]	; (8002808 <set_wall+0x63c>)
 800270e:	f993 3000 	ldrsb.w	r3, [r3]
 8002712:	2b08      	cmp	r3, #8
 8002714:	dc23      	bgt.n	800275e <set_wall+0x592>
 8002716:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <set_wall+0x638>)
 8002718:	f993 3000 	ldrsb.w	r3, [r3]
 800271c:	4618      	mov	r0, r3
 800271e:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <set_wall+0x63c>)
 8002720:	f993 3000 	ldrsb.w	r3, [r3]
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	4939      	ldr	r1, [pc, #228]	; (800280c <set_wall+0x640>)
 8002728:	4603      	mov	r3, r0
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4403      	add	r3, r0
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	440b      	add	r3, r1
 8002732:	4413      	add	r3, r2
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	4a33      	ldr	r2, [pc, #204]	; (8002804 <set_wall+0x638>)
 8002738:	f992 2000 	ldrsb.w	r2, [r2]
 800273c:	4610      	mov	r0, r2
 800273e:	4a32      	ldr	r2, [pc, #200]	; (8002808 <set_wall+0x63c>)
 8002740:	f992 2000 	ldrsb.w	r2, [r2]
 8002744:	3201      	adds	r2, #1
 8002746:	f043 0308 	orr.w	r3, r3, #8
 800274a:	b2dc      	uxtb	r4, r3
 800274c:	492f      	ldr	r1, [pc, #188]	; (800280c <set_wall+0x640>)
 800274e:	4603      	mov	r3, r0
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4403      	add	r3, r0
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	440b      	add	r3, r1
 8002758:	4413      	add	r3, r2
 800275a:	4622      	mov	r2, r4
 800275c:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 800275e:	797b      	ldrb	r3, [r7, #5]
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8153 	beq.w	8002a0c <set_wall+0x840>
				maze[y][x] |= top_wall;
 8002766:	4b27      	ldr	r3, [pc, #156]	; (8002804 <set_wall+0x638>)
 8002768:	f993 3000 	ldrsb.w	r3, [r3]
 800276c:	4619      	mov	r1, r3
 800276e:	4b26      	ldr	r3, [pc, #152]	; (8002808 <set_wall+0x63c>)
 8002770:	f993 3000 	ldrsb.w	r3, [r3]
 8002774:	4618      	mov	r0, r3
 8002776:	4a25      	ldr	r2, [pc, #148]	; (800280c <set_wall+0x640>)
 8002778:	460b      	mov	r3, r1
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	4403      	add	r3, r0
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	4a1f      	ldr	r2, [pc, #124]	; (8002804 <set_wall+0x638>)
 8002788:	f992 2000 	ldrsb.w	r2, [r2]
 800278c:	4611      	mov	r1, r2
 800278e:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <set_wall+0x63c>)
 8002790:	f992 2000 	ldrsb.w	r2, [r2]
 8002794:	4614      	mov	r4, r2
 8002796:	f043 0302 	orr.w	r3, r3, #2
 800279a:	b2d8      	uxtb	r0, r3
 800279c:	4a1b      	ldr	r2, [pc, #108]	; (800280c <set_wall+0x640>)
 800279e:	460b      	mov	r3, r1
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	4423      	add	r3, r4
 80027aa:	4602      	mov	r2, r0
 80027ac:	701a      	strb	r2, [r3, #0]
				if(y > 0){ maze[y - 1][x] |= bottom_wall; }
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <set_wall+0x638>)
 80027b0:	f993 3000 	ldrsb.w	r3, [r3]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f340 8129 	ble.w	8002a0c <set_wall+0x840>
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <set_wall+0x638>)
 80027bc:	f993 3000 	ldrsb.w	r3, [r3]
 80027c0:	1e5a      	subs	r2, r3, #1
 80027c2:	4b11      	ldr	r3, [pc, #68]	; (8002808 <set_wall+0x63c>)
 80027c4:	f993 3000 	ldrsb.w	r3, [r3]
 80027c8:	4618      	mov	r0, r3
 80027ca:	4910      	ldr	r1, [pc, #64]	; (800280c <set_wall+0x640>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	440b      	add	r3, r1
 80027d6:	4403      	add	r3, r0
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <set_wall+0x638>)
 80027dc:	f992 2000 	ldrsb.w	r2, [r2]
 80027e0:	3a01      	subs	r2, #1
 80027e2:	4909      	ldr	r1, [pc, #36]	; (8002808 <set_wall+0x63c>)
 80027e4:	f991 1000 	ldrsb.w	r1, [r1]
 80027e8:	460c      	mov	r4, r1
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	b2d8      	uxtb	r0, r3
 80027f0:	4906      	ldr	r1, [pc, #24]	; (800280c <set_wall+0x640>)
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	440b      	add	r3, r1
 80027fc:	4423      	add	r3, r4
 80027fe:	4602      	mov	r2, r0
 8002800:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002802:	e103      	b.n	8002a0c <set_wall+0x840>
 8002804:	20000155 	.word	0x20000155
 8002808:	20000154 	.word	0x20000154
 800280c:	200002a4 	.word	0x200002a4
		case south:
			y++;
 8002810:	4b82      	ldr	r3, [pc, #520]	; (8002a1c <set_wall+0x850>)
 8002812:	f993 3000 	ldrsb.w	r3, [r3]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	3301      	adds	r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	b25a      	sxtb	r2, r3
 800281e:	4b7f      	ldr	r3, [pc, #508]	; (8002a1c <set_wall+0x850>)
 8002820:	701a      	strb	r2, [r3, #0]
			if(rbl){
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d04c      	beq.n	80028c2 <set_wall+0x6f6>
				maze[y][x] |= right_wall;
 8002828:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <set_wall+0x850>)
 800282a:	f993 3000 	ldrsb.w	r3, [r3]
 800282e:	4619      	mov	r1, r3
 8002830:	4b7b      	ldr	r3, [pc, #492]	; (8002a20 <set_wall+0x854>)
 8002832:	f993 3000 	ldrsb.w	r3, [r3]
 8002836:	4618      	mov	r0, r3
 8002838:	4a7a      	ldr	r2, [pc, #488]	; (8002a24 <set_wall+0x858>)
 800283a:	460b      	mov	r3, r1
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	4403      	add	r3, r0
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4a74      	ldr	r2, [pc, #464]	; (8002a1c <set_wall+0x850>)
 800284a:	f992 2000 	ldrsb.w	r2, [r2]
 800284e:	4611      	mov	r1, r2
 8002850:	4a73      	ldr	r2, [pc, #460]	; (8002a20 <set_wall+0x854>)
 8002852:	f992 2000 	ldrsb.w	r2, [r2]
 8002856:	4614      	mov	r4, r2
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	b2d8      	uxtb	r0, r3
 800285e:	4a71      	ldr	r2, [pc, #452]	; (8002a24 <set_wall+0x858>)
 8002860:	460b      	mov	r3, r1
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	4423      	add	r3, r4
 800286c:	4602      	mov	r2, r0
 800286e:	701a      	strb	r2, [r3, #0]
				if(x + 1 < grid_size){ maze[y][x + 1] |= left_wall; }
 8002870:	4b6b      	ldr	r3, [pc, #428]	; (8002a20 <set_wall+0x854>)
 8002872:	f993 3000 	ldrsb.w	r3, [r3]
 8002876:	2b08      	cmp	r3, #8
 8002878:	dc23      	bgt.n	80028c2 <set_wall+0x6f6>
 800287a:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <set_wall+0x850>)
 800287c:	f993 3000 	ldrsb.w	r3, [r3]
 8002880:	4618      	mov	r0, r3
 8002882:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <set_wall+0x854>)
 8002884:	f993 3000 	ldrsb.w	r3, [r3]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	4966      	ldr	r1, [pc, #408]	; (8002a24 <set_wall+0x858>)
 800288c:	4603      	mov	r3, r0
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4403      	add	r3, r0
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	440b      	add	r3, r1
 8002896:	4413      	add	r3, r2
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	4a60      	ldr	r2, [pc, #384]	; (8002a1c <set_wall+0x850>)
 800289c:	f992 2000 	ldrsb.w	r2, [r2]
 80028a0:	4610      	mov	r0, r2
 80028a2:	4a5f      	ldr	r2, [pc, #380]	; (8002a20 <set_wall+0x854>)
 80028a4:	f992 2000 	ldrsb.w	r2, [r2]
 80028a8:	3201      	adds	r2, #1
 80028aa:	f043 0308 	orr.w	r3, r3, #8
 80028ae:	b2dc      	uxtb	r4, r3
 80028b0:	495c      	ldr	r1, [pc, #368]	; (8002a24 <set_wall+0x858>)
 80028b2:	4603      	mov	r3, r0
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4403      	add	r3, r0
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	440b      	add	r3, r1
 80028bc:	4413      	add	r3, r2
 80028be:	4622      	mov	r2, r4
 80028c0:	701a      	strb	r2, [r3, #0]
			}
			if(rbr){
 80028c2:	79bb      	ldrb	r3, [r7, #6]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d04c      	beq.n	8002962 <set_wall+0x796>
				maze[y][x] |= left_wall;
 80028c8:	4b54      	ldr	r3, [pc, #336]	; (8002a1c <set_wall+0x850>)
 80028ca:	f993 3000 	ldrsb.w	r3, [r3]
 80028ce:	4619      	mov	r1, r3
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <set_wall+0x854>)
 80028d2:	f993 3000 	ldrsb.w	r3, [r3]
 80028d6:	4618      	mov	r0, r3
 80028d8:	4a52      	ldr	r2, [pc, #328]	; (8002a24 <set_wall+0x858>)
 80028da:	460b      	mov	r3, r1
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	4403      	add	r3, r0
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4a4c      	ldr	r2, [pc, #304]	; (8002a1c <set_wall+0x850>)
 80028ea:	f992 2000 	ldrsb.w	r2, [r2]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4a4b      	ldr	r2, [pc, #300]	; (8002a20 <set_wall+0x854>)
 80028f2:	f992 2000 	ldrsb.w	r2, [r2]
 80028f6:	4614      	mov	r4, r2
 80028f8:	f043 0308 	orr.w	r3, r3, #8
 80028fc:	b2d8      	uxtb	r0, r3
 80028fe:	4a49      	ldr	r2, [pc, #292]	; (8002a24 <set_wall+0x858>)
 8002900:	460b      	mov	r3, r1
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	4423      	add	r3, r4
 800290c:	4602      	mov	r2, r0
 800290e:	701a      	strb	r2, [r3, #0]
				if(x > 0){ maze[y][x - 1] |= right_wall; }
 8002910:	4b43      	ldr	r3, [pc, #268]	; (8002a20 <set_wall+0x854>)
 8002912:	f993 3000 	ldrsb.w	r3, [r3]
 8002916:	2b00      	cmp	r3, #0
 8002918:	dd23      	ble.n	8002962 <set_wall+0x796>
 800291a:	4b40      	ldr	r3, [pc, #256]	; (8002a1c <set_wall+0x850>)
 800291c:	f993 3000 	ldrsb.w	r3, [r3]
 8002920:	4618      	mov	r0, r3
 8002922:	4b3f      	ldr	r3, [pc, #252]	; (8002a20 <set_wall+0x854>)
 8002924:	f993 3000 	ldrsb.w	r3, [r3]
 8002928:	1e5a      	subs	r2, r3, #1
 800292a:	493e      	ldr	r1, [pc, #248]	; (8002a24 <set_wall+0x858>)
 800292c:	4603      	mov	r3, r0
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4403      	add	r3, r0
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	440b      	add	r3, r1
 8002936:	4413      	add	r3, r2
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	4a38      	ldr	r2, [pc, #224]	; (8002a1c <set_wall+0x850>)
 800293c:	f992 2000 	ldrsb.w	r2, [r2]
 8002940:	4610      	mov	r0, r2
 8002942:	4a37      	ldr	r2, [pc, #220]	; (8002a20 <set_wall+0x854>)
 8002944:	f992 2000 	ldrsb.w	r2, [r2]
 8002948:	3a01      	subs	r2, #1
 800294a:	f043 0304 	orr.w	r3, r3, #4
 800294e:	b2dc      	uxtb	r4, r3
 8002950:	4934      	ldr	r1, [pc, #208]	; (8002a24 <set_wall+0x858>)
 8002952:	4603      	mov	r3, r0
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4403      	add	r3, r0
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	440b      	add	r3, r1
 800295c:	4413      	add	r3, r2
 800295e:	4622      	mov	r2, r4
 8002960:	701a      	strb	r2, [r3, #0]
			}
			if(rbf){
 8002962:	797b      	ldrb	r3, [r7, #5]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d053      	beq.n	8002a10 <set_wall+0x844>
				maze[y][x] |= bottom_wall;
 8002968:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <set_wall+0x850>)
 800296a:	f993 3000 	ldrsb.w	r3, [r3]
 800296e:	4619      	mov	r1, r3
 8002970:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <set_wall+0x854>)
 8002972:	f993 3000 	ldrsb.w	r3, [r3]
 8002976:	4618      	mov	r0, r3
 8002978:	4a2a      	ldr	r2, [pc, #168]	; (8002a24 <set_wall+0x858>)
 800297a:	460b      	mov	r3, r1
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	4403      	add	r3, r0
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4a24      	ldr	r2, [pc, #144]	; (8002a1c <set_wall+0x850>)
 800298a:	f992 2000 	ldrsb.w	r2, [r2]
 800298e:	4611      	mov	r1, r2
 8002990:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <set_wall+0x854>)
 8002992:	f992 2000 	ldrsb.w	r2, [r2]
 8002996:	4614      	mov	r4, r2
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	b2d8      	uxtb	r0, r3
 800299e:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <set_wall+0x858>)
 80029a0:	460b      	mov	r3, r1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	4423      	add	r3, r4
 80029ac:	4602      	mov	r2, r0
 80029ae:	701a      	strb	r2, [r3, #0]
				if(y + 1 < grid_size){ maze[y + 1][x] |= top_wall; }
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <set_wall+0x850>)
 80029b2:	f993 3000 	ldrsb.w	r3, [r3]
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	dc2a      	bgt.n	8002a10 <set_wall+0x844>
 80029ba:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <set_wall+0x850>)
 80029bc:	f993 3000 	ldrsb.w	r3, [r3]
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <set_wall+0x854>)
 80029c4:	f993 3000 	ldrsb.w	r3, [r3]
 80029c8:	4618      	mov	r0, r3
 80029ca:	4916      	ldr	r1, [pc, #88]	; (8002a24 <set_wall+0x858>)
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	440b      	add	r3, r1
 80029d6:	4403      	add	r3, r0
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	4a10      	ldr	r2, [pc, #64]	; (8002a1c <set_wall+0x850>)
 80029dc:	f992 2000 	ldrsb.w	r2, [r2]
 80029e0:	3201      	adds	r2, #1
 80029e2:	490f      	ldr	r1, [pc, #60]	; (8002a20 <set_wall+0x854>)
 80029e4:	f991 1000 	ldrsb.w	r1, [r1]
 80029e8:	460c      	mov	r4, r1
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	b2d8      	uxtb	r0, r3
 80029f0:	490c      	ldr	r1, [pc, #48]	; (8002a24 <set_wall+0x858>)
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	440b      	add	r3, r1
 80029fc:	4423      	add	r3, r4
 80029fe:	4602      	mov	r2, r0
 8002a00:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a02:	e005      	b.n	8002a10 <set_wall+0x844>
			break;
 8002a04:	bf00      	nop
 8002a06:	e004      	b.n	8002a12 <set_wall+0x846>
			break;
 8002a08:	bf00      	nop
 8002a0a:	e002      	b.n	8002a12 <set_wall+0x846>
			break;
 8002a0c:	bf00      	nop
 8002a0e:	e000      	b.n	8002a12 <set_wall+0x846>
			break;
 8002a10:	bf00      	nop
	}
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc90      	pop	{r4, r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	20000155 	.word	0x20000155
 8002a20:	20000154 	.word	0x20000154
 8002a24:	200002a4 	.word	0x200002a4

08002a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a2c:	f001 f93c 	bl	8003ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a30:	f000 f888 	bl	8002b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a34:	f000 fa9e 	bl	8002f74 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a38:	f000 fa86 	bl	8002f48 <MX_DMA_Init>
  MX_ADC1_Init();
 8002a3c:	f000 f8de 	bl	8002bfc <MX_ADC1_Init>
  MX_TIM1_Init();
 8002a40:	f000 f946 	bl	8002cd0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002a44:	f000 f998 	bl	8002d78 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002a48:	f000 fa2c 	bl	8002ea4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4830      	ldr	r0, [pc, #192]	; (8002b10 <main+0xe8>)
 8002a50:	f002 fea6 	bl	80057a0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002a54:	2104      	movs	r1, #4
 8002a56:	482e      	ldr	r0, [pc, #184]	; (8002b10 <main+0xe8>)
 8002a58:	f002 fea2 	bl	80057a0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002a5c:	2108      	movs	r1, #8
 8002a5e:	482c      	ldr	r0, [pc, #176]	; (8002b10 <main+0xe8>)
 8002a60:	f002 fe9e 	bl	80057a0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002a64:	210c      	movs	r1, #12
 8002a66:	482a      	ldr	r0, [pc, #168]	; (8002b10 <main+0xe8>)
 8002a68:	f002 fe9a 	bl	80057a0 <HAL_TIM_PWM_Start>
  	HAL_TIM_Base_Start_IT(&htim1);
 8002a6c:	4829      	ldr	r0, [pc, #164]	; (8002b14 <main+0xec>)
 8002a6e:	f002 fded 	bl	800564c <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim3);
 8002a72:	4829      	ldr	r0, [pc, #164]	; (8002b18 <main+0xf0>)
 8002a74:	f002 fdea 	bl	800564c <HAL_TIM_Base_Start_IT>
	HAL_Delay(2000);
 8002a78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a7c:	f001 f976 	bl	8003d6c <HAL_Delay>
	mmode = 0;
 8002a80:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <main+0xf4>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
	status = 0;
 8002a86:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <main+0xf8>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
	current_speed = 0;
 8002a8c:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <main+0xfc>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, 8);
 8002a92:	2208      	movs	r2, #8
 8002a94:	4924      	ldr	r1, [pc, #144]	; (8002b28 <main+0x100>)
 8002a96:	4825      	ldr	r0, [pc, #148]	; (8002b2c <main+0x104>)
 8002a98:	f001 fa64 	bl	8003f64 <HAL_ADC_Start_DMA>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, htim2.Init.Period);
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <main+0xe8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <main+0xe8>)
 8002aa2:	68d2      	ldr	r2, [r2, #12]
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, htim2.Init.Period);
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <main+0xe8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a19      	ldr	r2, [pc, #100]	; (8002b10 <main+0xe8>)
 8002aac:	68d2      	ldr	r2, [r2, #12]
 8002aae:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, htim2.Init.Period);
 8002ab0:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <main+0xe8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <main+0xe8>)
 8002ab6:	68d2      	ldr	r2, [r2, #12]
 8002ab8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, htim2.Init.Period);
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <main+0xe8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <main+0xe8>)
 8002ac0:	68d2      	ldr	r2, [r2, #12]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (mmode == 1) {
 8002ac4:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <main+0xf4>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d10c      	bne.n	8002ae8 <main+0xc0>
			HAL_Delay(2000);
 8002ace:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ad2:	f001 f94b 	bl	8003d6c <HAL_Delay>
			go_straight(238, 1);
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	4815      	ldr	r0, [pc, #84]	; (8002b30 <main+0x108>)
 8002ada:	f000 ffa3 	bl	8003a24 <go_straight>
			start_fill();
 8002ade:	f7fe f8e5 	bl	8000cac <start_fill>
			mmode = 0;
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <main+0xf4>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
		}
		if (mmode == 2) {
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <main+0xf4>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d102      	bne.n	8002af8 <main+0xd0>
			mmode = 0;
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <main+0xf4>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
		}
		a = TIM1->CNT;
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <main+0x10c>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <main+0x110>)
 8002b00:	601a      	str	r2, [r3, #0]
		b = TIM3->CNT;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <main+0x114>)
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <main+0x118>)
 8002b0a:	601a      	str	r2, [r3, #0]
		if (mmode == 1) {
 8002b0c:	e7da      	b.n	8002ac4 <main+0x9c>
 8002b0e:	bf00      	nop
 8002b10:	20000214 	.word	0x20000214
 8002b14:	200001cc 	.word	0x200001cc
 8002b18:	2000025c 	.word	0x2000025c
 8002b1c:	20000375 	.word	0x20000375
 8002b20:	20000376 	.word	0x20000376
 8002b24:	20000374 	.word	0x20000374
 8002b28:	2000036c 	.word	0x2000036c
 8002b2c:	20000158 	.word	0x20000158
 8002b30:	436e0000 	.word	0x436e0000
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	20000378 	.word	0x20000378
 8002b3c:	40000400 	.word	0x40000400
 8002b40:	2000037c 	.word	0x2000037c

08002b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b094      	sub	sp, #80	; 0x50
 8002b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b4e:	2228      	movs	r2, #40	; 0x28
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f003 fd90 	bl	8006678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b74:	2301      	movs	r3, #1
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b82:	2301      	movs	r3, #1
 8002b84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b86:	2302      	movs	r3, #2
 8002b88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b90:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 f872 	bl	8004c84 <HAL_RCC_OscConfig>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002ba6:	f000 fa39 	bl	800301c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002baa:	230f      	movs	r3, #15
 8002bac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 fade 	bl	8005188 <HAL_RCC_ClockConfig>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002bd2:	f000 fa23 	bl	800301c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bde:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 fc2c 	bl	8005440 <HAL_RCCEx_PeriphCLKConfig>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002bee:	f000 fa15 	bl	800301c <Error_Handler>
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	3750      	adds	r7, #80	; 0x50
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <MX_ADC1_Init+0xcc>)
 8002c0e:	4a2f      	ldr	r2, [pc, #188]	; (8002ccc <MX_ADC1_Init+0xd0>)
 8002c10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002c12:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <MX_ADC1_Init+0xcc>)
 8002c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c1a:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <MX_ADC1_Init+0xcc>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c20:	4b29      	ldr	r3, [pc, #164]	; (8002cc8 <MX_ADC1_Init+0xcc>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c26:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <MX_ADC1_Init+0xcc>)
 8002c28:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002c2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c2e:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <MX_ADC1_Init+0xcc>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002c34:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <MX_ADC1_Init+0xcc>)
 8002c36:	2204      	movs	r2, #4
 8002c38:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c3a:	4823      	ldr	r0, [pc, #140]	; (8002cc8 <MX_ADC1_Init+0xcc>)
 8002c3c:	f001 f8ba 	bl	8003db4 <HAL_ADC_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002c46:	f000 f9e9 	bl	800301c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002c52:	2302      	movs	r3, #2
 8002c54:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	481b      	ldr	r0, [pc, #108]	; (8002cc8 <MX_ADC1_Init+0xcc>)
 8002c5c:	f001 fa7c 	bl	8004158 <HAL_ADC_ConfigChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002c66:	f000 f9d9 	bl	800301c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	4814      	ldr	r0, [pc, #80]	; (8002cc8 <MX_ADC1_Init+0xcc>)
 8002c78:	f001 fa6e 	bl	8004158 <HAL_ADC_ConfigChannel>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002c82:	f000 f9cb 	bl	800301c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002c86:	2304      	movs	r3, #4
 8002c88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	480d      	ldr	r0, [pc, #52]	; (8002cc8 <MX_ADC1_Init+0xcc>)
 8002c94:	f001 fa60 	bl	8004158 <HAL_ADC_ConfigChannel>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002c9e:	f000 f9bd 	bl	800301c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002ca2:	2305      	movs	r3, #5
 8002ca4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	4619      	mov	r1, r3
 8002cae:	4806      	ldr	r0, [pc, #24]	; (8002cc8 <MX_ADC1_Init+0xcc>)
 8002cb0:	f001 fa52 	bl	8004158 <HAL_ADC_ConfigChannel>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002cba:	f000 f9af 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000158 	.word	0x20000158
 8002ccc:	40012400 	.word	0x40012400

08002cd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002cd6:	f107 030c 	add.w	r3, r7, #12
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce6:	1d3b      	adds	r3, r7, #4
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002cf0:	4a20      	ldr	r2, [pc, #128]	; (8002d74 <MX_TIM1_Init+0xa4>)
 8002cf2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002cf4:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d0e:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d14:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d1a:	4815      	ldr	r0, [pc, #84]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002d1c:	f002 fc46 	bl	80055ac <HAL_TIM_Base_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002d26:	f000 f979 	bl	800301c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002d2a:	2307      	movs	r3, #7
 8002d2c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8002d2e:	2340      	movs	r3, #64	; 0x40
 8002d30:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 12;
 8002d32:	230c      	movs	r3, #12
 8002d34:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002d36:	f107 030c 	add.w	r3, r7, #12
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	480c      	ldr	r0, [pc, #48]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002d3e:	f003 f862 	bl	8005e06 <HAL_TIM_SlaveConfigSynchro>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002d48:	f000 f968 	bl	800301c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	4619      	mov	r1, r3
 8002d58:	4805      	ldr	r0, [pc, #20]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002d5a:	f003 fbf9 	bl	8006550 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002d64:	f000 f95a 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d68:	bf00      	nop
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200001cc 	.word	0x200001cc
 8002d74:	40012c00 	.word	0x40012c00

08002d78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08e      	sub	sp, #56	; 0x38
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d8c:	f107 0320 	add.w	r3, r7, #32
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
 8002da4:	615a      	str	r2, [r3, #20]
 8002da6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002da8:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002daa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8002db0:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002db2:	2263      	movs	r2, #99	; 0x63
 8002db4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db6:	4b3a      	ldr	r3, [pc, #232]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8002dbc:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002dbe:	f242 720f 	movw	r2, #9999	; 0x270f
 8002dc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc4:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002dca:	4b35      	ldr	r3, [pc, #212]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002dcc:	2280      	movs	r2, #128	; 0x80
 8002dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dd0:	4833      	ldr	r0, [pc, #204]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002dd2:	f002 fbeb 	bl	80055ac <HAL_TIM_Base_Init>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002ddc:	f000 f91e 	bl	800301c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dea:	4619      	mov	r1, r3
 8002dec:	482c      	ldr	r0, [pc, #176]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002dee:	f002 ff43 	bl	8005c78 <HAL_TIM_ConfigClockSource>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002df8:	f000 f910 	bl	800301c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002dfc:	4828      	ldr	r0, [pc, #160]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002dfe:	f002 fc77 	bl	80056f0 <HAL_TIM_PWM_Init>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002e08:	f000 f908 	bl	800301c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e14:	f107 0320 	add.w	r3, r7, #32
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4821      	ldr	r0, [pc, #132]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002e1c:	f003 fb98 	bl	8006550 <HAL_TIMEx_MasterConfigSynchronization>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002e26:	f000 f8f9 	bl	800301c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e2a:	2360      	movs	r3, #96	; 0x60
 8002e2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e3a:	1d3b      	adds	r3, r7, #4
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4817      	ldr	r0, [pc, #92]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002e42:	f002 fe57 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002e4c:	f000 f8e6 	bl	800301c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	2204      	movs	r2, #4
 8002e54:	4619      	mov	r1, r3
 8002e56:	4812      	ldr	r0, [pc, #72]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002e58:	f002 fe4c 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002e62:	f000 f8db 	bl	800301c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	2208      	movs	r2, #8
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	480c      	ldr	r0, [pc, #48]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002e6e:	f002 fe41 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002e78:	f000 f8d0 	bl	800301c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	220c      	movs	r2, #12
 8002e80:	4619      	mov	r1, r3
 8002e82:	4807      	ldr	r0, [pc, #28]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002e84:	f002 fe36 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002e8e:	f000 f8c5 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e92:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <MX_TIM2_Init+0x128>)
 8002e94:	f000 f9f0 	bl	8003278 <HAL_TIM_MspPostInit>

}
 8002e98:	bf00      	nop
 8002e9a:	3738      	adds	r7, #56	; 0x38
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20000214 	.word	0x20000214

08002ea4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002eaa:	f107 030c 	add.w	r3, r7, #12
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	60da      	str	r2, [r3, #12]
 8002eb8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ec2:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <MX_TIM3_Init+0x9c>)
 8002ec4:	4a1f      	ldr	r2, [pc, #124]	; (8002f44 <MX_TIM3_Init+0xa0>)
 8002ec6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <MX_TIM3_Init+0x9c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <MX_TIM3_Init+0x9c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ed4:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <MX_TIM3_Init+0x9c>)
 8002ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002edc:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <MX_TIM3_Init+0x9c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee2:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <MX_TIM3_Init+0x9c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ee8:	4815      	ldr	r0, [pc, #84]	; (8002f40 <MX_TIM3_Init+0x9c>)
 8002eea:	f002 fb5f 	bl	80055ac <HAL_TIM_Base_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ef4:	f000 f892 	bl	800301c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002ef8:	2307      	movs	r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8002efc:	2340      	movs	r3, #64	; 0x40
 8002efe:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 12;
 8002f00:	230c      	movs	r3, #12
 8002f02:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	4619      	mov	r1, r3
 8002f0a:	480d      	ldr	r0, [pc, #52]	; (8002f40 <MX_TIM3_Init+0x9c>)
 8002f0c:	f002 ff7b 	bl	8005e06 <HAL_TIM_SlaveConfigSynchro>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002f16:	f000 f881 	bl	800301c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4806      	ldr	r0, [pc, #24]	; (8002f40 <MX_TIM3_Init+0x9c>)
 8002f28:	f003 fb12 	bl	8006550 <HAL_TIMEx_MasterConfigSynchronization>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002f32:	f000 f873 	bl	800301c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f36:	bf00      	nop
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	2000025c 	.word	0x2000025c
 8002f44:	40000400 	.word	0x40000400

08002f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <MX_DMA_Init+0x28>)
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	4a07      	ldr	r2, [pc, #28]	; (8002f70 <MX_DMA_Init+0x28>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6153      	str	r3, [r2, #20]
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <MX_DMA_Init+0x28>)
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]

}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40021000 	.word	0x40021000

08002f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7a:	f107 0310 	add.w	r3, r7, #16
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f88:	4b21      	ldr	r3, [pc, #132]	; (8003010 <MX_GPIO_Init+0x9c>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	4a20      	ldr	r2, [pc, #128]	; (8003010 <MX_GPIO_Init+0x9c>)
 8002f8e:	f043 0320 	orr.w	r3, r3, #32
 8002f92:	6193      	str	r3, [r2, #24]
 8002f94:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <MX_GPIO_Init+0x9c>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <MX_GPIO_Init+0x9c>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	4a1a      	ldr	r2, [pc, #104]	; (8003010 <MX_GPIO_Init+0x9c>)
 8002fa6:	f043 0304 	orr.w	r3, r3, #4
 8002faa:	6193      	str	r3, [r2, #24]
 8002fac:	4b18      	ldr	r3, [pc, #96]	; (8003010 <MX_GPIO_Init+0x9c>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb8:	4b15      	ldr	r3, [pc, #84]	; (8003010 <MX_GPIO_Init+0x9c>)
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <MX_GPIO_Init+0x9c>)
 8002fbe:	f043 0308 	orr.w	r3, r3, #8
 8002fc2:	6193      	str	r3, [r2, #24]
 8002fc4:	4b12      	ldr	r3, [pc, #72]	; (8003010 <MX_GPIO_Init+0x9c>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fd4:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <MX_GPIO_Init+0xa0>)
 8002fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fdc:	f107 0310 	add.w	r3, r7, #16
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	480d      	ldr	r0, [pc, #52]	; (8003018 <MX_GPIO_Init+0xa4>)
 8002fe4:	f001 fca8 	bl	8004938 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2100      	movs	r1, #0
 8002fec:	2006      	movs	r0, #6
 8002fee:	f001 fb84 	bl	80046fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ff2:	2006      	movs	r0, #6
 8002ff4:	f001 fb9d 	bl	8004732 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	2007      	movs	r0, #7
 8002ffe:	f001 fb7c 	bl	80046fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003002:	2007      	movs	r0, #7
 8003004:	f001 fb95 	bl	8004732 <HAL_NVIC_EnableIRQ>

}
 8003008:	bf00      	nop
 800300a:	3720      	adds	r7, #32
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	10210000 	.word	0x10210000
 8003018:	40010c00 	.word	0x40010c00

0800301c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003020:	b672      	cpsid	i
}
 8003022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003024:	e7fe      	b.n	8003024 <Error_Handler+0x8>
	...

08003028 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <HAL_MspInit+0x5c>)
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	4a14      	ldr	r2, [pc, #80]	; (8003084 <HAL_MspInit+0x5c>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6193      	str	r3, [r2, #24]
 800303a:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_MspInit+0x5c>)
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_MspInit+0x5c>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <HAL_MspInit+0x5c>)
 800304c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003050:	61d3      	str	r3, [r2, #28]
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_MspInit+0x5c>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <HAL_MspInit+0x60>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <HAL_MspInit+0x60>)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	40021000 	.word	0x40021000
 8003088:	40010000 	.word	0x40010000

0800308c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 0310 	add.w	r3, r7, #16
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a28      	ldr	r2, [pc, #160]	; (8003148 <HAL_ADC_MspInit+0xbc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d149      	bne.n	8003140 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030ac:	4b27      	ldr	r3, [pc, #156]	; (800314c <HAL_ADC_MspInit+0xc0>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	4a26      	ldr	r2, [pc, #152]	; (800314c <HAL_ADC_MspInit+0xc0>)
 80030b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030b6:	6193      	str	r3, [r2, #24]
 80030b8:	4b24      	ldr	r3, [pc, #144]	; (800314c <HAL_ADC_MspInit+0xc0>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c4:	4b21      	ldr	r3, [pc, #132]	; (800314c <HAL_ADC_MspInit+0xc0>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	4a20      	ldr	r2, [pc, #128]	; (800314c <HAL_ADC_MspInit+0xc0>)
 80030ca:	f043 0304 	orr.w	r3, r3, #4
 80030ce:	6193      	str	r3, [r2, #24]
 80030d0:	4b1e      	ldr	r3, [pc, #120]	; (800314c <HAL_ADC_MspInit+0xc0>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80030dc:	233c      	movs	r3, #60	; 0x3c
 80030de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030e0:	2303      	movs	r3, #3
 80030e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e4:	f107 0310 	add.w	r3, r7, #16
 80030e8:	4619      	mov	r1, r3
 80030ea:	4819      	ldr	r0, [pc, #100]	; (8003150 <HAL_ADC_MspInit+0xc4>)
 80030ec:	f001 fc24 	bl	8004938 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80030f0:	4b18      	ldr	r3, [pc, #96]	; (8003154 <HAL_ADC_MspInit+0xc8>)
 80030f2:	4a19      	ldr	r2, [pc, #100]	; (8003158 <HAL_ADC_MspInit+0xcc>)
 80030f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030f6:	4b17      	ldr	r3, [pc, #92]	; (8003154 <HAL_ADC_MspInit+0xc8>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030fc:	4b15      	ldr	r3, [pc, #84]	; (8003154 <HAL_ADC_MspInit+0xc8>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <HAL_ADC_MspInit+0xc8>)
 8003104:	2280      	movs	r2, #128	; 0x80
 8003106:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_ADC_MspInit+0xc8>)
 800310a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800310e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <HAL_ADC_MspInit+0xc8>)
 8003112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003116:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_ADC_MspInit+0xc8>)
 800311a:	2220      	movs	r2, #32
 800311c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <HAL_ADC_MspInit+0xc8>)
 8003120:	2200      	movs	r2, #0
 8003122:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003124:	480b      	ldr	r0, [pc, #44]	; (8003154 <HAL_ADC_MspInit+0xc8>)
 8003126:	f001 fb1f 	bl	8004768 <HAL_DMA_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8003130:	f7ff ff74 	bl	800301c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a07      	ldr	r2, [pc, #28]	; (8003154 <HAL_ADC_MspInit+0xc8>)
 8003138:	621a      	str	r2, [r3, #32]
 800313a:	4a06      	ldr	r2, [pc, #24]	; (8003154 <HAL_ADC_MspInit+0xc8>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003140:	bf00      	nop
 8003142:	3720      	adds	r7, #32
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40012400 	.word	0x40012400
 800314c:	40021000 	.word	0x40021000
 8003150:	40010800 	.word	0x40010800
 8003154:	20000188 	.word	0x20000188
 8003158:	40020008 	.word	0x40020008

0800315c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 0320 	add.w	r3, r7, #32
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a3c      	ldr	r2, [pc, #240]	; (8003268 <HAL_TIM_Base_MspInit+0x10c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d12d      	bne.n	80031d8 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800317c:	4b3b      	ldr	r3, [pc, #236]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	4a3a      	ldr	r2, [pc, #232]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 8003182:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003186:	6193      	str	r3, [r2, #24]
 8003188:	4b38      	ldr	r3, [pc, #224]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003194:	4b35      	ldr	r3, [pc, #212]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	4a34      	ldr	r2, [pc, #208]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 800319a:	f043 0304 	orr.w	r3, r3, #4
 800319e:	6193      	str	r3, [r2, #24]
 80031a0:	4b32      	ldr	r3, [pc, #200]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ba:	f107 0320 	add.w	r3, r7, #32
 80031be:	4619      	mov	r1, r3
 80031c0:	482b      	ldr	r0, [pc, #172]	; (8003270 <HAL_TIM_Base_MspInit+0x114>)
 80031c2:	f001 fbb9 	bl	8004938 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2100      	movs	r1, #0
 80031ca:	2019      	movs	r0, #25
 80031cc:	f001 fa95 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80031d0:	2019      	movs	r0, #25
 80031d2:	f001 faae 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80031d6:	e042      	b.n	800325e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e0:	d10c      	bne.n	80031fc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031e2:	4b22      	ldr	r3, [pc, #136]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	4a21      	ldr	r2, [pc, #132]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	61d3      	str	r3, [r2, #28]
 80031ee:	4b1f      	ldr	r3, [pc, #124]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	697b      	ldr	r3, [r7, #20]
}
 80031fa:	e030      	b.n	800325e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <HAL_TIM_Base_MspInit+0x118>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d12b      	bne.n	800325e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003206:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	4a18      	ldr	r2, [pc, #96]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	61d3      	str	r3, [r2, #28]
 8003212:	4b16      	ldr	r3, [pc, #88]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	4a12      	ldr	r2, [pc, #72]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 8003224:	f043 0304 	orr.w	r3, r3, #4
 8003228:	6193      	str	r3, [r2, #24]
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <HAL_TIM_Base_MspInit+0x110>)
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003236:	2340      	movs	r3, #64	; 0x40
 8003238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003242:	f107 0320 	add.w	r3, r7, #32
 8003246:	4619      	mov	r1, r3
 8003248:	4809      	ldr	r0, [pc, #36]	; (8003270 <HAL_TIM_Base_MspInit+0x114>)
 800324a:	f001 fb75 	bl	8004938 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800324e:	2200      	movs	r2, #0
 8003250:	2100      	movs	r1, #0
 8003252:	201d      	movs	r0, #29
 8003254:	f001 fa51 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003258:	201d      	movs	r0, #29
 800325a:	f001 fa6a 	bl	8004732 <HAL_NVIC_EnableIRQ>
}
 800325e:	bf00      	nop
 8003260:	3730      	adds	r7, #48	; 0x30
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40012c00 	.word	0x40012c00
 800326c:	40021000 	.word	0x40021000
 8003270:	40010800 	.word	0x40010800
 8003274:	40000400 	.word	0x40000400

08003278 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003280:	f107 0314 	add.w	r3, r7, #20
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003296:	d142      	bne.n	800331e <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003298:	4b23      	ldr	r3, [pc, #140]	; (8003328 <HAL_TIM_MspPostInit+0xb0>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	4a22      	ldr	r2, [pc, #136]	; (8003328 <HAL_TIM_MspPostInit+0xb0>)
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	6193      	str	r3, [r2, #24]
 80032a4:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_TIM_MspPostInit+0xb0>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b0:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_TIM_MspPostInit+0xb0>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <HAL_TIM_MspPostInit+0xb0>)
 80032b6:	f043 0308 	orr.w	r3, r3, #8
 80032ba:	6193      	str	r3, [r2, #24]
 80032bc:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <HAL_TIM_MspPostInit+0xb0>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032c8:	2303      	movs	r3, #3
 80032ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032cc:	2302      	movs	r3, #2
 80032ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d0:	2302      	movs	r3, #2
 80032d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	4619      	mov	r1, r3
 80032da:	4814      	ldr	r0, [pc, #80]	; (800332c <HAL_TIM_MspPostInit+0xb4>)
 80032dc:	f001 fb2c 	bl	8004938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e6:	2302      	movs	r3, #2
 80032e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ea:	2302      	movs	r3, #2
 80032ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	4619      	mov	r1, r3
 80032f4:	480e      	ldr	r0, [pc, #56]	; (8003330 <HAL_TIM_MspPostInit+0xb8>)
 80032f6:	f001 fb1f 	bl	8004938 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_TIM_MspPostInit+0xbc>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
 8003318:	4a06      	ldr	r2, [pc, #24]	; (8003334 <HAL_TIM_MspPostInit+0xbc>)
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800331e:	bf00      	nop
 8003320:	3728      	adds	r7, #40	; 0x28
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	40010800 	.word	0x40010800
 8003330:	40010c00 	.word	0x40010c00
 8003334:	40010000 	.word	0x40010000

08003338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800333c:	e7fe      	b.n	800333c <NMI_Handler+0x4>

0800333e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800333e:	b480      	push	{r7}
 8003340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003342:	e7fe      	b.n	8003342 <HardFault_Handler+0x4>

08003344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003348:	e7fe      	b.n	8003348 <MemManage_Handler+0x4>

0800334a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800334a:	b480      	push	{r7}
 800334c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800334e:	e7fe      	b.n	800334e <BusFault_Handler+0x4>

08003350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003354:	e7fe      	b.n	8003354 <UsageFault_Handler+0x4>

08003356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr

08003362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800337e:	f000 fcd9 	bl	8003d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800338c:	2001      	movs	r0, #1
 800338e:	f001 fc57 	bl	8004c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	mmode = 1;
 8003392:	4b02      	ldr	r3, [pc, #8]	; (800339c <EXTI0_IRQHandler+0x14>)
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000375 	.word	0x20000375

080033a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80033a4:	2002      	movs	r0, #2
 80033a6:	f001 fc4b 	bl	8004c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	mmode = 2;
 80033aa:	4b02      	ldr	r3, [pc, #8]	; (80033b4 <EXTI1_IRQHandler+0x14>)
 80033ac:	2202      	movs	r2, #2
 80033ae:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000375 	.word	0x20000375

080033b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if(status == u_turn || status == turn_right_90 || status == turn_right_45 || status == straight){
 80033bc:	4b1f      	ldr	r3, [pc, #124]	; (800343c <TIM1_UP_IRQHandler+0x84>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	b25b      	sxtb	r3, r3
 80033c2:	f113 0f05 	cmn.w	r3, #5
 80033c6:	d011      	beq.n	80033ec <TIM1_UP_IRQHandler+0x34>
 80033c8:	4b1c      	ldr	r3, [pc, #112]	; (800343c <TIM1_UP_IRQHandler+0x84>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b25b      	sxtb	r3, r3
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d2:	d00b      	beq.n	80033ec <TIM1_UP_IRQHandler+0x34>
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <TIM1_UP_IRQHandler+0x84>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	b25b      	sxtb	r3, r3
 80033da:	f113 0f02 	cmn.w	r3, #2
 80033de:	d005      	beq.n	80033ec <TIM1_UP_IRQHandler+0x34>
 80033e0:	4b16      	ldr	r3, [pc, #88]	; (800343c <TIM1_UP_IRQHandler+0x84>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	b25b      	sxtb	r3, r3
 80033e6:	f113 0f06 	cmn.w	r3, #6
 80033ea:	d103      	bne.n	80033f4 <TIM1_UP_IRQHandler+0x3c>
		status = 0;
 80033ec:	4b13      	ldr	r3, [pc, #76]	; (800343c <TIM1_UP_IRQHandler+0x84>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	e01d      	b.n	8003430 <TIM1_UP_IRQHandler+0x78>
	} else {
		switch(status){
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <TIM1_UP_IRQHandler+0x84>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	b25b      	sxtb	r3, r3
 80033fa:	f113 0f04 	cmn.w	r3, #4
 80033fe:	d003      	beq.n	8003408 <TIM1_UP_IRQHandler+0x50>
 8003400:	f113 0f03 	cmn.w	r3, #3
 8003404:	d00a      	beq.n	800341c <TIM1_UP_IRQHandler+0x64>
 8003406:	e013      	b.n	8003430 <TIM1_UP_IRQHandler+0x78>
			case turn_left_90:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 8003408:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <TIM1_UP_IRQHandler+0x88>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <TIM1_UP_IRQHandler+0x88>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800341a:	e009      	b.n	8003430 <TIM1_UP_IRQHandler+0x78>
			case turn_left_45:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 800341c:	4b08      	ldr	r3, [pc, #32]	; (8003440 <TIM1_UP_IRQHandler+0x88>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003424:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <TIM1_UP_IRQHandler+0x88>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2200      	movs	r2, #0
 800342c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800342e:	bf00      	nop
		}
	}
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003430:	4804      	ldr	r0, [pc, #16]	; (8003444 <TIM1_UP_IRQHandler+0x8c>)
 8003432:	f002 fa57 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000376 	.word	0x20000376
 8003440:	20000214 	.word	0x20000214
 8003444:	200001cc 	.word	0x200001cc

08003448 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(status == turn_left_90 || status == turn_left_45){
 800344c:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <TIM3_IRQHandler+0xac>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	b25b      	sxtb	r3, r3
 8003452:	f113 0f04 	cmn.w	r3, #4
 8003456:	d005      	beq.n	8003464 <TIM3_IRQHandler+0x1c>
 8003458:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <TIM3_IRQHandler+0xac>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	b25b      	sxtb	r3, r3
 800345e:	f113 0f03 	cmn.w	r3, #3
 8003462:	d103      	bne.n	800346c <TIM3_IRQHandler+0x24>
		status = 0;
 8003464:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <TIM3_IRQHandler+0xac>)
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	e03e      	b.n	80034ea <TIM3_IRQHandler+0xa2>
	} else  {
		switch(status){
 800346c:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <TIM3_IRQHandler+0xac>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b25b      	sxtb	r3, r3
 8003472:	3306      	adds	r3, #6
 8003474:	2b05      	cmp	r3, #5
 8003476:	d838      	bhi.n	80034ea <TIM3_IRQHandler+0xa2>
 8003478:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <TIM3_IRQHandler+0x38>)
 800347a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347e:	bf00      	nop
 8003480:	080034d5 	.word	0x080034d5
 8003484:	08003499 	.word	0x08003499
 8003488:	080034eb 	.word	0x080034eb
 800348c:	080034eb 	.word	0x080034eb
 8003490:	080034c1 	.word	0x080034c1
 8003494:	080034ad 	.word	0x080034ad
			case u_turn:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 8003498:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <TIM3_IRQHandler+0xb0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034a0:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 500);
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <TIM3_IRQHandler+0xb0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034aa:	63da      	str	r2, [r3, #60]	; 0x3c
			case turn_right_90:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <TIM3_IRQHandler+0xb0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034b4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <TIM3_IRQHandler+0xb0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80034be:	e014      	b.n	80034ea <TIM3_IRQHandler+0xa2>
			case turn_right_45:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80034c0:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <TIM3_IRQHandler+0xb0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034c8:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <TIM3_IRQHandler+0xb0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2200      	movs	r2, #0
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 80034d2:	e00a      	b.n	80034ea <TIM3_IRQHandler+0xa2>
			case straight:
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <TIM3_IRQHandler+0xb0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034dc:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 500);
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <TIM3_IRQHandler+0xb0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 80034e8:	bf00      	nop
		}
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034ea:	4804      	ldr	r0, [pc, #16]	; (80034fc <TIM3_IRQHandler+0xb4>)
 80034ec:	f002 f9fa 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034f0:	bf00      	nop
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000376 	.word	0x20000376
 80034f8:	20000214 	.word	0x20000214
 80034fc:	2000025c 	.word	0x2000025c

08003500 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <u_turnf>:
const float turn90_arc_en = (float)halfSize_MicroMouse * M_PI * 4 * (90.0/360) * counts_per_1mm;
const float turn45_arc_en = (float)halfSize_MicroMouse * M_PI * 4 * (45.0/360) * counts_per_1mm;
const uint16_t kp = 3;
const uint16_t kd = 3;

void u_turnf(uint8_t *direction) {
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	switch(*direction){
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d81b      	bhi.n	8003554 <u_turnf+0x48>
 800351c:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <u_turnf+0x18>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003535 	.word	0x08003535
 8003528:	0800353d 	.word	0x0800353d
 800352c:	08003545 	.word	0x08003545
 8003530:	0800354d 	.word	0x0800354d
		case west:  *direction = east;   break;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	e00b      	b.n	8003554 <u_turnf+0x48>
		case east:  *direction = west;   break;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e007      	b.n	8003554 <u_turnf+0x48>
		case north: *direction = south;  break;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2203      	movs	r2, #3
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	e003      	b.n	8003554 <u_turnf+0x48>
		case south: *direction = north;  break;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	bf00      	nop
	}
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(uturn_arc_en));
 8003554:	4b52      	ldr	r3, [pc, #328]	; (80036a0 <u_turnf+0x194>)
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd f810 	bl	800057c <__aeabi_f2d>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	f003 f890 	bl	8006688 <round>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	494d      	ldr	r1, [pc, #308]	; (80036a4 <u_turnf+0x198>)
 800356e:	680c      	ldr	r4, [r1, #0]
 8003570:	4610      	mov	r0, r2
 8003572:	4619      	mov	r1, r3
 8003574:	f7fd fa6c 	bl	8000a50 <__aeabi_d2uiz>
 8003578:	4603      	mov	r3, r0
 800357a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800357c:	4b48      	ldr	r3, [pc, #288]	; (80036a0 <u_turnf+0x194>)
 800357e:	4618      	mov	r0, r3
 8003580:	f7fc fffc 	bl	800057c <__aeabi_f2d>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	f003 f87c 	bl	8006688 <round>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	f7fd fa5a 	bl	8000a50 <__aeabi_d2uiz>
 800359c:	4603      	mov	r3, r0
 800359e:	4a41      	ldr	r2, [pc, #260]	; (80036a4 <u_turnf+0x198>)
 80035a0:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(uturn_arc_en) * 5 / 10);
 80035a2:	4b3f      	ldr	r3, [pc, #252]	; (80036a0 <u_turnf+0x194>)
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc ffe9 	bl	800057c <__aeabi_f2d>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4610      	mov	r0, r2
 80035b0:	4619      	mov	r1, r3
 80035b2:	f003 f869 	bl	8006688 <round>
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <u_turnf+0x19c>)
 80035bc:	f7fd f836 	bl	800062c <__aeabi_dmul>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	4b37      	ldr	r3, [pc, #220]	; (80036ac <u_turnf+0x1a0>)
 80035ce:	f7fd f957 	bl	8000880 <__aeabi_ddiv>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4936      	ldr	r1, [pc, #216]	; (80036b0 <u_turnf+0x1a4>)
 80035d8:	680c      	ldr	r4, [r1, #0]
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
 80035de:	f7fd fa37 	bl	8000a50 <__aeabi_d2uiz>
 80035e2:	4603      	mov	r3, r0
 80035e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035e6:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <u_turnf+0x194>)
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fc ffc7 	bl	800057c <__aeabi_f2d>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	f003 f847 	bl	8006688 <round>
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <u_turnf+0x19c>)
 8003600:	f7fd f814 	bl	800062c <__aeabi_dmul>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	4b26      	ldr	r3, [pc, #152]	; (80036ac <u_turnf+0x1a0>)
 8003612:	f7fd f935 	bl	8000880 <__aeabi_ddiv>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	f7fd fa17 	bl	8000a50 <__aeabi_d2uiz>
 8003622:	4603      	mov	r3, r0
 8003624:	4a22      	ldr	r2, [pc, #136]	; (80036b0 <u_turnf+0x1a4>)
 8003626:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003628:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <u_turnf+0x198>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2200      	movs	r2, #0
 800362e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003630:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <u_turnf+0x1a4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2200      	movs	r2, #0
 8003636:	625a      	str	r2, [r3, #36]	; 0x24
	status = u_turn;
 8003638:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <u_turnf+0x1a8>)
 800363a:	22fb      	movs	r2, #251	; 0xfb
 800363c:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed_levels[current_speed][0]);
 800363e:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <u_turnf+0x1ac>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <u_turnf+0x1b0>)
 8003648:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 800364c:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <u_turnf+0x1b4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, speed_levels[current_speed][1]);
 8003652:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <u_turnf+0x1ac>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	4a18      	ldr	r2, [pc, #96]	; (80036bc <u_turnf+0x1b0>)
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	885a      	ldrh	r2, [r3, #2]
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <u_turnf+0x1b4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <u_turnf+0x1b4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800366e:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <u_turnf+0x1b4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2200      	movs	r2, #0
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
	while(status != 0);
 8003676:	bf00      	nop
 8003678:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <u_turnf+0x1a8>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	b25b      	sxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1fa      	bne.n	8003678 <u_turnf+0x16c>
	brake();
 8003682:	f000 fa39 	bl	8003af8 <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003686:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <u_turnf+0x198>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2200      	movs	r2, #0
 800368c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <u_turnf+0x1a4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	bd90      	pop	{r4, r7, pc}
 800369e:	bf00      	nop
 80036a0:	422a0000 	.word	0x422a0000
 80036a4:	200001cc 	.word	0x200001cc
 80036a8:	40140000 	.word	0x40140000
 80036ac:	40240000 	.word	0x40240000
 80036b0:	2000025c 	.word	0x2000025c
 80036b4:	20000376 	.word	0x20000376
 80036b8:	20000374 	.word	0x20000374
 80036bc:	08006738 	.word	0x08006738
 80036c0:	20000214 	.word	0x20000214

080036c4 <turn_left90>:
	brake();
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	__HAL_TIM_SET_COUNTER(&htim3, 0);
}

void turn_left90(uint8_t *direction) {
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	switch(*direction){
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d81b      	bhi.n	800370c <turn_left90+0x48>
 80036d4:	a201      	add	r2, pc, #4	; (adr r2, 80036dc <turn_left90+0x18>)
 80036d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036da:	bf00      	nop
 80036dc:	080036ed 	.word	0x080036ed
 80036e0:	080036f5 	.word	0x080036f5
 80036e4:	080036fd 	.word	0x080036fd
 80036e8:	08003705 	.word	0x08003705
		case west:  *direction = south; break;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2203      	movs	r2, #3
 80036f0:	701a      	strb	r2, [r3, #0]
 80036f2:	e00b      	b.n	800370c <turn_left90+0x48>
		case east:  *direction = north; break;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e007      	b.n	800370c <turn_left90+0x48>
		case north: *direction = west;  break;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	e003      	b.n	800370c <turn_left90+0x48>
		case south: *direction = east;  break;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	bf00      	nop
	}
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn90_arc_en));
 800370c:	4b50      	ldr	r3, [pc, #320]	; (8003850 <turn_left90+0x18c>)
 800370e:	4618      	mov	r0, r3
 8003710:	f7fc ff34 	bl	800057c <__aeabi_f2d>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	f002 ffb4 	bl	8006688 <round>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	494b      	ldr	r1, [pc, #300]	; (8003854 <turn_left90+0x190>)
 8003726:	680c      	ldr	r4, [r1, #0]
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	f7fd f990 	bl	8000a50 <__aeabi_d2uiz>
 8003730:	4603      	mov	r3, r0
 8003732:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003734:	4b46      	ldr	r3, [pc, #280]	; (8003850 <turn_left90+0x18c>)
 8003736:	4618      	mov	r0, r3
 8003738:	f7fc ff20 	bl	800057c <__aeabi_f2d>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	f002 ffa0 	bl	8006688 <round>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	f7fd f97e 	bl	8000a50 <__aeabi_d2uiz>
 8003754:	4603      	mov	r3, r0
 8003756:	4a3f      	ldr	r2, [pc, #252]	; (8003854 <turn_left90+0x190>)
 8003758:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(turn90_arc_en) * 5 / 10);
 800375a:	4b3d      	ldr	r3, [pc, #244]	; (8003850 <turn_left90+0x18c>)
 800375c:	4618      	mov	r0, r3
 800375e:	f7fc ff0d 	bl	800057c <__aeabi_f2d>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4610      	mov	r0, r2
 8003768:	4619      	mov	r1, r3
 800376a:	f002 ff8d 	bl	8006688 <round>
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	4b39      	ldr	r3, [pc, #228]	; (8003858 <turn_left90+0x194>)
 8003774:	f7fc ff5a 	bl	800062c <__aeabi_dmul>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4610      	mov	r0, r2
 800377e:	4619      	mov	r1, r3
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	4b35      	ldr	r3, [pc, #212]	; (800385c <turn_left90+0x198>)
 8003786:	f7fd f87b 	bl	8000880 <__aeabi_ddiv>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4934      	ldr	r1, [pc, #208]	; (8003860 <turn_left90+0x19c>)
 8003790:	680c      	ldr	r4, [r1, #0]
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	f7fd f95b 	bl	8000a50 <__aeabi_d2uiz>
 800379a:	4603      	mov	r3, r0
 800379c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800379e:	4b2c      	ldr	r3, [pc, #176]	; (8003850 <turn_left90+0x18c>)
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fc feeb 	bl	800057c <__aeabi_f2d>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	f002 ff6b 	bl	8006688 <round>
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	4b28      	ldr	r3, [pc, #160]	; (8003858 <turn_left90+0x194>)
 80037b8:	f7fc ff38 	bl	800062c <__aeabi_dmul>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4610      	mov	r0, r2
 80037c2:	4619      	mov	r1, r3
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	4b24      	ldr	r3, [pc, #144]	; (800385c <turn_left90+0x198>)
 80037ca:	f7fd f859 	bl	8000880 <__aeabi_ddiv>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4610      	mov	r0, r2
 80037d4:	4619      	mov	r1, r3
 80037d6:	f7fd f93b 	bl	8000a50 <__aeabi_d2uiz>
 80037da:	4603      	mov	r3, r0
 80037dc:	4a20      	ldr	r2, [pc, #128]	; (8003860 <turn_left90+0x19c>)
 80037de:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80037e0:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <turn_left90+0x19c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2200      	movs	r2, #0
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80037e8:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <turn_left90+0x190>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2200      	movs	r2, #0
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24
	status = turn_left_90;
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <turn_left90+0x1a0>)
 80037f2:	22fc      	movs	r2, #252	; 0xfc
 80037f4:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, htim2.Init.Period);
 80037f6:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <turn_left90+0x1a4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <turn_left90+0x1a4>)
 80037fc:	68d2      	ldr	r2, [r2, #12]
 80037fe:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, htim2.Init.Period);
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <turn_left90+0x1a4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a18      	ldr	r2, [pc, #96]	; (8003868 <turn_left90+0x1a4>)
 8003806:	68d2      	ldr	r2, [r2, #12]
 8003808:	639a      	str	r2, [r3, #56]	; 0x38

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, speed_levels[current_speed][1]);
 800380a:	4b18      	ldr	r3, [pc, #96]	; (800386c <turn_left90+0x1a8>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	4a17      	ldr	r2, [pc, #92]	; (8003870 <turn_left90+0x1ac>)
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	885a      	ldrh	r2, [r3, #2]
 8003818:	4b13      	ldr	r3, [pc, #76]	; (8003868 <turn_left90+0x1a4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <turn_left90+0x1a4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	63da      	str	r2, [r3, #60]	; 0x3c
	while(status != 0);
 8003826:	bf00      	nop
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <turn_left90+0x1a0>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b25b      	sxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1fa      	bne.n	8003828 <turn_left90+0x164>
	brake();
 8003832:	f000 f961 	bl	8003af8 <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <turn_left90+0x19c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <turn_left90+0x190>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2200      	movs	r2, #0
 8003844:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bd90      	pop	{r4, r7, pc}
 800384e:	bf00      	nop
 8003850:	422a0000 	.word	0x422a0000
 8003854:	2000025c 	.word	0x2000025c
 8003858:	40140000 	.word	0x40140000
 800385c:	40240000 	.word	0x40240000
 8003860:	200001cc 	.word	0x200001cc
 8003864:	20000376 	.word	0x20000376
 8003868:	20000214 	.word	0x20000214
 800386c:	20000374 	.word	0x20000374
 8003870:	08006738 	.word	0x08006738

08003874 <turn_right90>:

void turn_right90(uint8_t *direction) {
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	switch(*direction){
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d81b      	bhi.n	80038bc <turn_right90+0x48>
 8003884:	a201      	add	r2, pc, #4	; (adr r2, 800388c <turn_right90+0x18>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	0800389d 	.word	0x0800389d
 8003890:	080038a5 	.word	0x080038a5
 8003894:	080038ad 	.word	0x080038ad
 8003898:	080038b5 	.word	0x080038b5
		case west:  *direction = north; break;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	e00b      	b.n	80038bc <turn_right90+0x48>
		case east:  *direction = south; break;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2203      	movs	r2, #3
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	e007      	b.n	80038bc <turn_right90+0x48>
		case north: *direction = east;  break;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	e003      	b.n	80038bc <turn_right90+0x48>
		case south: *direction = west;  break;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	bf00      	nop
	}
	__HAL_TIM_SET_AUTORELOAD(&htim1, round(turn90_arc_en));
 80038bc:	4b50      	ldr	r3, [pc, #320]	; (8003a00 <turn_right90+0x18c>)
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fc fe5c 	bl	800057c <__aeabi_f2d>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4610      	mov	r0, r2
 80038ca:	4619      	mov	r1, r3
 80038cc:	f002 fedc 	bl	8006688 <round>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	494b      	ldr	r1, [pc, #300]	; (8003a04 <turn_right90+0x190>)
 80038d6:	680c      	ldr	r4, [r1, #0]
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	f7fd f8b8 	bl	8000a50 <__aeabi_d2uiz>
 80038e0:	4603      	mov	r3, r0
 80038e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038e4:	4b46      	ldr	r3, [pc, #280]	; (8003a00 <turn_right90+0x18c>)
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fc fe48 	bl	800057c <__aeabi_f2d>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	f002 fec8 	bl	8006688 <round>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	f7fd f8a6 	bl	8000a50 <__aeabi_d2uiz>
 8003904:	4603      	mov	r3, r0
 8003906:	4a3f      	ldr	r2, [pc, #252]	; (8003a04 <turn_right90+0x190>)
 8003908:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, round(turn90_arc_en) * 5 / 10);
 800390a:	4b3d      	ldr	r3, [pc, #244]	; (8003a00 <turn_right90+0x18c>)
 800390c:	4618      	mov	r0, r3
 800390e:	f7fc fe35 	bl	800057c <__aeabi_f2d>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4610      	mov	r0, r2
 8003918:	4619      	mov	r1, r3
 800391a:	f002 feb5 	bl	8006688 <round>
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	4b39      	ldr	r3, [pc, #228]	; (8003a08 <turn_right90+0x194>)
 8003924:	f7fc fe82 	bl	800062c <__aeabi_dmul>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4610      	mov	r0, r2
 800392e:	4619      	mov	r1, r3
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	4b35      	ldr	r3, [pc, #212]	; (8003a0c <turn_right90+0x198>)
 8003936:	f7fc ffa3 	bl	8000880 <__aeabi_ddiv>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4934      	ldr	r1, [pc, #208]	; (8003a10 <turn_right90+0x19c>)
 8003940:	680c      	ldr	r4, [r1, #0]
 8003942:	4610      	mov	r0, r2
 8003944:	4619      	mov	r1, r3
 8003946:	f7fd f883 	bl	8000a50 <__aeabi_d2uiz>
 800394a:	4603      	mov	r3, r0
 800394c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800394e:	4b2c      	ldr	r3, [pc, #176]	; (8003a00 <turn_right90+0x18c>)
 8003950:	4618      	mov	r0, r3
 8003952:	f7fc fe13 	bl	800057c <__aeabi_f2d>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4610      	mov	r0, r2
 800395c:	4619      	mov	r1, r3
 800395e:	f002 fe93 	bl	8006688 <round>
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	4b28      	ldr	r3, [pc, #160]	; (8003a08 <turn_right90+0x194>)
 8003968:	f7fc fe60 	bl	800062c <__aeabi_dmul>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <turn_right90+0x198>)
 800397a:	f7fc ff81 	bl	8000880 <__aeabi_ddiv>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4610      	mov	r0, r2
 8003984:	4619      	mov	r1, r3
 8003986:	f7fd f863 	bl	8000a50 <__aeabi_d2uiz>
 800398a:	4603      	mov	r3, r0
 800398c:	4a20      	ldr	r2, [pc, #128]	; (8003a10 <turn_right90+0x19c>)
 800398e:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003990:	4b1c      	ldr	r3, [pc, #112]	; (8003a04 <turn_right90+0x190>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2200      	movs	r2, #0
 8003996:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003998:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <turn_right90+0x19c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	625a      	str	r2, [r3, #36]	; 0x24
	status = turn_right_90;
 80039a0:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <turn_right90+0x1a0>)
 80039a2:	22ff      	movs	r2, #255	; 0xff
 80039a4:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, htim2.Init.Period);
 80039a6:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <turn_right90+0x1a4>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a1b      	ldr	r2, [pc, #108]	; (8003a18 <turn_right90+0x1a4>)
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, htim2.Init.Period);
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <turn_right90+0x1a4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <turn_right90+0x1a4>)
 80039b6:	68d2      	ldr	r2, [r2, #12]
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed_levels[current_speed][0]);
 80039ba:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <turn_right90+0x1a8>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <turn_right90+0x1ac>)
 80039c4:	f833 2022 	ldrh.w	r2, [r3, r2, lsl #2]
 80039c8:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <turn_right90+0x1a4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <turn_right90+0x1a4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2200      	movs	r2, #0
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38

	while(status != 0);
 80039d6:	bf00      	nop
 80039d8:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <turn_right90+0x1a0>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1fa      	bne.n	80039d8 <turn_right90+0x164>
	brake();
 80039e2:	f000 f889 	bl	8003af8 <brake>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <turn_right90+0x190>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80039ee:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <turn_right90+0x19c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2200      	movs	r2, #0
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd90      	pop	{r4, r7, pc}
 80039fe:	bf00      	nop
 8003a00:	422a0000 	.word	0x422a0000
 8003a04:	200001cc 	.word	0x200001cc
 8003a08:	40140000 	.word	0x40140000
 8003a0c:	40240000 	.word	0x40240000
 8003a10:	2000025c 	.word	0x2000025c
 8003a14:	20000376 	.word	0x20000376
 8003a18:	20000214 	.word	0x20000214
 8003a1c:	20000374 	.word	0x20000374
 8003a20:	08006738 	.word	0x08006738

08003a24 <go_straight>:

void go_straight(float distance, bool brakee) { //millimeter
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	70fb      	strb	r3, [r7, #3]
	uint16_t en = round(distance * counts_per_1mm);
 8003a30:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <go_straight+0xb8>)
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fc fb89 	bl	800014c <__aeabi_fmul>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fc fd9d 	bl	800057c <__aeabi_f2d>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f002 fe1d 	bl	8006688 <round>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4610      	mov	r0, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	f7fc fffb 	bl	8000a50 <__aeabi_d2uiz>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_AUTORELOAD(&htim1, en);
 8003a5e:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <go_straight+0xbc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	89fa      	ldrh	r2, [r7, #14]
 8003a64:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a66:	89fb      	ldrh	r3, [r7, #14]
 8003a68:	4a1d      	ldr	r2, [pc, #116]	; (8003ae0 <go_straight+0xbc>)
 8003a6a:	60d3      	str	r3, [r2, #12]
	if(brakee){
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d019      	beq.n	8003aa6 <go_straight+0x82>
		__HAL_TIM_SET_AUTORELOAD(&htim3, en * 7 / 10);
 8003a72:	89fa      	ldrh	r2, [r7, #14]
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ae4 <go_straight+0xc0>)
 8003a7c:	fb82 1203 	smull	r1, r2, r2, r3
 8003a80:	1092      	asrs	r2, r2, #2
 8003a82:	17db      	asrs	r3, r3, #31
 8003a84:	1ad2      	subs	r2, r2, r3
 8003a86:	4b18      	ldr	r3, [pc, #96]	; (8003ae8 <go_straight+0xc4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a8c:	89fa      	ldrh	r2, [r7, #14]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <go_straight+0xc0>)
 8003a96:	fb82 1203 	smull	r1, r2, r2, r3
 8003a9a:	1092      	asrs	r2, r2, #2
 8003a9c:	17db      	asrs	r3, r3, #31
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <go_straight+0xc4>)
 8003aa4:	60da      	str	r2, [r3, #12]
	}
	status = straight;
 8003aa6:	4b11      	ldr	r3, [pc, #68]	; (8003aec <go_straight+0xc8>)
 8003aa8:	22fa      	movs	r2, #250	; 0xfa
 8003aaa:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003aac:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <go_straight+0xcc>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <go_straight+0xcc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed_levels[0][0]);
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <go_straight+0xd0>)
 8003abe:	881a      	ldrh	r2, [r3, #0]
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <go_straight+0xcc>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	635a      	str	r2, [r3, #52]	; 0x34
	PID();
 8003ac6:	f000 f833 	bl	8003b30 <PID>
	if(brakee){
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <go_straight+0xb0>
		brake();
 8003ad0:	f000 f812 	bl	8003af8 <brake>
	}
}
 8003ad4:	bf00      	nop
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	3ecbb7e4 	.word	0x3ecbb7e4
 8003ae0:	200001cc 	.word	0x200001cc
 8003ae4:	66666667 	.word	0x66666667
 8003ae8:	2000025c 	.word	0x2000025c
 8003aec:	20000376 	.word	0x20000376
 8003af0:	20000214 	.word	0x20000214
 8003af4:	08006738 	.word	0x08006738

08003af8 <brake>:
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, speed_levels[0][0]);
	HAL_Delay(500);
	brake();
}

void brake(){
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, htim2.Init.Period);
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <brake+0x34>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <brake+0x34>)
 8003b02:	68d2      	ldr	r2, [r2, #12]
 8003b04:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, htim2.Init.Period);
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <brake+0x34>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a08      	ldr	r2, [pc, #32]	; (8003b2c <brake+0x34>)
 8003b0c:	68d2      	ldr	r2, [r2, #12]
 8003b0e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, htim2.Init.Period);
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <brake+0x34>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a05      	ldr	r2, [pc, #20]	; (8003b2c <brake+0x34>)
 8003b16:	68d2      	ldr	r2, [r2, #12]
 8003b18:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, htim2.Init.Period);
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <brake+0x34>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a03      	ldr	r2, [pc, #12]	; (8003b2c <brake+0x34>)
 8003b20:	68d2      	ldr	r2, [r2, #12]
 8003b22:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	20000214 	.word	0x20000214

08003b30 <PID>:

void PID(){
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
	int16_t Err, pErr = 0, P, D, total;
 8003b36:	2300      	movs	r3, #0
 8003b38:	81bb      	strh	r3, [r7, #12]
	while(status != 0){
 8003b3a:	e075      	b.n	8003c28 <PID+0xf8>
		if(left_sensor45 > leftWallValue && right_sensor45 > rightWallValue){
 8003b3c:	4b40      	ldr	r3, [pc, #256]	; (8003c40 <PID+0x110>)
 8003b3e:	889b      	ldrh	r3, [r3, #4]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b64      	cmp	r3, #100	; 0x64
 8003b44:	d910      	bls.n	8003b68 <PID+0x38>
 8003b46:	4b3e      	ldr	r3, [pc, #248]	; (8003c40 <PID+0x110>)
 8003b48:	885b      	ldrh	r3, [r3, #2]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b64      	cmp	r3, #100	; 0x64
 8003b4e:	d90b      	bls.n	8003b68 <PID+0x38>
			Err = left_sensor45 - right_sensor45 - 10;
 8003b50:	4b3b      	ldr	r3, [pc, #236]	; (8003c40 <PID+0x110>)
 8003b52:	889b      	ldrh	r3, [r3, #4]
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	4b3a      	ldr	r3, [pc, #232]	; (8003c40 <PID+0x110>)
 8003b58:	885b      	ldrh	r3, [r3, #2]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b0a      	subs	r3, #10
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	81fb      	strh	r3, [r7, #14]
 8003b66:	e023      	b.n	8003bb0 <PID+0x80>
		} else if(left_sensor45 > leftWallValue){
 8003b68:	4b35      	ldr	r3, [pc, #212]	; (8003c40 <PID+0x110>)
 8003b6a:	889b      	ldrh	r3, [r3, #4]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d906      	bls.n	8003b80 <PID+0x50>
			Err = left_sensor45 - leftWallValue;
 8003b72:	4b33      	ldr	r3, [pc, #204]	; (8003c40 <PID+0x110>)
 8003b74:	889b      	ldrh	r3, [r3, #4]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b64      	subs	r3, #100	; 0x64
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	81fb      	strh	r3, [r7, #14]
 8003b7e:	e017      	b.n	8003bb0 <PID+0x80>
		} else if(right_sensor45 > rightWallValue){
 8003b80:	4b2f      	ldr	r3, [pc, #188]	; (8003c40 <PID+0x110>)
 8003b82:	885b      	ldrh	r3, [r3, #2]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b64      	cmp	r3, #100	; 0x64
 8003b88:	d907      	bls.n	8003b9a <PID+0x6a>
			Err = rightWallValue - right_sensor45;
 8003b8a:	4b2d      	ldr	r3, [pc, #180]	; (8003c40 <PID+0x110>)
 8003b8c:	885b      	ldrh	r3, [r3, #2]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	81fb      	strh	r3, [r7, #14]
 8003b98:	e00a      	b.n	8003bb0 <PID+0x80>
		} else {
			Err = TIM3->CNT - TIM1->CNT;
 8003b9a:	4b2a      	ldr	r3, [pc, #168]	; (8003c44 <PID+0x114>)
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <PID+0x118>)
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	81fb      	strh	r3, [r7, #14]
			pErr = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	81bb      	strh	r3, [r7, #12]
		}
		P = kp * Err;
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	89fb      	ldrh	r3, [r7, #14]
 8003bb4:	fb02 f303 	mul.w	r3, r2, r3
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	817b      	strh	r3, [r7, #10]
		D = kd * (Err - pErr);
 8003bbc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003bc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2203      	movs	r2, #3
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	813b      	strh	r3, [r7, #8]
		pErr = Err;
 8003bd2:	89fb      	ldrh	r3, [r7, #14]
 8003bd4:	81bb      	strh	r3, [r7, #12]
		total = P + D;
 8003bd6:	897a      	ldrh	r2, [r7, #10]
 8003bd8:	893b      	ldrh	r3, [r7, #8]
 8003bda:	4413      	add	r3, r2
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8003be0:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <PID+0x11c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2200      	movs	r2, #0
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8003be8:	4b18      	ldr	r3, [pc, #96]	; (8003c4c <PID+0x11c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2200      	movs	r2, #0
 8003bee:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, speed_levels[current_speed][0] + total);
 8003bf0:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <PID+0x120>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <PID+0x124>)
 8003bfa:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c04:	441a      	add	r2, r3
 8003c06:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <PID+0x11c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, speed_levels[current_speed][1] - total);
 8003c0c:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <PID+0x120>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	4a10      	ldr	r2, [pc, #64]	; (8003c54 <PID+0x124>)
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	885b      	ldrh	r3, [r3, #2]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c20:	1ad2      	subs	r2, r2, r3
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <PID+0x11c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
	while(status != 0){
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <PID+0x128>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	b25b      	sxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d184      	bne.n	8003b3c <PID+0xc>
	}
}
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	2000036c 	.word	0x2000036c
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	20000214 	.word	0x20000214
 8003c50:	20000374 	.word	0x20000374
 8003c54:	08006738 	.word	0x08006738
 8003c58:	20000376 	.word	0x20000376

08003c5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c5c:	f7ff fc50 	bl	8003500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c60:	480b      	ldr	r0, [pc, #44]	; (8003c90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003c62:	490c      	ldr	r1, [pc, #48]	; (8003c94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003c64:	4a0c      	ldr	r2, [pc, #48]	; (8003c98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c68:	e002      	b.n	8003c70 <LoopCopyDataInit>

08003c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c6e:	3304      	adds	r3, #4

08003c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c74:	d3f9      	bcc.n	8003c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c76:	4a09      	ldr	r2, [pc, #36]	; (8003c9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003c78:	4c09      	ldr	r4, [pc, #36]	; (8003ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c7c:	e001      	b.n	8003c82 <LoopFillZerobss>

08003c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c80:	3204      	adds	r2, #4

08003c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c84:	d3fb      	bcc.n	8003c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c86:	f002 fcd3 	bl	8006630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c8a:	f7fe fecd 	bl	8002a28 <main>
  bx lr
 8003c8e:	4770      	bx	lr
  ldr r0, =_sdata
 8003c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003c98:	0800676c 	.word	0x0800676c
  ldr r2, =_sbss
 8003c9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003ca0:	20000384 	.word	0x20000384

08003ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ca4:	e7fe      	b.n	8003ca4 <ADC1_2_IRQHandler>
	...

08003ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cac:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <HAL_Init+0x28>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a07      	ldr	r2, [pc, #28]	; (8003cd0 <HAL_Init+0x28>)
 8003cb2:	f043 0310 	orr.w	r3, r3, #16
 8003cb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb8:	2003      	movs	r0, #3
 8003cba:	f000 fd13 	bl	80046e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cbe:	200f      	movs	r0, #15
 8003cc0:	f000 f808 	bl	8003cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cc4:	f7ff f9b0 	bl	8003028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40022000 	.word	0x40022000

08003cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cdc:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <HAL_InitTick+0x54>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_InitTick+0x58>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fd2b 	bl	800474e <HAL_SYSTICK_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e00e      	b.n	8003d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b0f      	cmp	r3, #15
 8003d06:	d80a      	bhi.n	8003d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d08:	2200      	movs	r2, #0
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	f000 fcf3 	bl	80046fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d14:	4a06      	ldr	r2, [pc, #24]	; (8003d30 <HAL_InitTick+0x5c>)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	20000008 	.word	0x20000008
 8003d30:	20000004 	.word	0x20000004

08003d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <HAL_IncTick+0x1c>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_IncTick+0x20>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4413      	add	r3, r2
 8003d44:	4a03      	ldr	r2, [pc, #12]	; (8003d54 <HAL_IncTick+0x20>)
 8003d46:	6013      	str	r3, [r2, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr
 8003d50:	20000008 	.word	0x20000008
 8003d54:	20000380 	.word	0x20000380

08003d58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d5c:	4b02      	ldr	r3, [pc, #8]	; (8003d68 <HAL_GetTick+0x10>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr
 8003d68:	20000380 	.word	0x20000380

08003d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d74:	f7ff fff0 	bl	8003d58 <HAL_GetTick>
 8003d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d005      	beq.n	8003d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <HAL_Delay+0x44>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d92:	bf00      	nop
 8003d94:	f7ff ffe0 	bl	8003d58 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d8f7      	bhi.n	8003d94 <HAL_Delay+0x28>
  {
  }
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000008 	.word	0x20000008

08003db4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e0be      	b.n	8003f54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff f94a 	bl	800308c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 faff 	bl	80043fc <ADC_ConversionStop_Disable>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f040 8099 	bne.w	8003f42 <HAL_ADC_Init+0x18e>
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f040 8095 	bne.w	8003f42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e20:	f023 0302 	bic.w	r3, r3, #2
 8003e24:	f043 0202 	orr.w	r2, r3, #2
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7b1b      	ldrb	r3, [r3, #12]
 8003e3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003e3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e4c:	d003      	beq.n	8003e56 <HAL_ADC_Init+0xa2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d102      	bne.n	8003e5c <HAL_ADC_Init+0xa8>
 8003e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e5a:	e000      	b.n	8003e5e <HAL_ADC_Init+0xaa>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	7d1b      	ldrb	r3, [r3, #20]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d119      	bne.n	8003ea0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	7b1b      	ldrb	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	035a      	lsls	r2, r3, #13
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	e00b      	b.n	8003ea0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	f043 0201 	orr.w	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <HAL_ADC_Init+0x1a8>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	68b9      	ldr	r1, [r7, #8]
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed0:	d003      	beq.n	8003eda <HAL_ADC_Init+0x126>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d104      	bne.n	8003ee4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	051b      	lsls	r3, r3, #20
 8003ee2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	4b18      	ldr	r3, [pc, #96]	; (8003f60 <HAL_ADC_Init+0x1ac>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d10b      	bne.n	8003f20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	f023 0303 	bic.w	r3, r3, #3
 8003f16:	f043 0201 	orr.w	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f1e:	e018      	b.n	8003f52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	f023 0312 	bic.w	r3, r3, #18
 8003f28:	f043 0210 	orr.w	r2, r3, #16
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	f043 0201 	orr.w	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003f40:	e007      	b.n	8003f52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	f043 0210 	orr.w	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	ffe1f7fd 	.word	0xffe1f7fd
 8003f60:	ff1f0efe 	.word	0xff1f0efe

08003f64 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a64      	ldr	r2, [pc, #400]	; (800410c <HAL_ADC_Start_DMA+0x1a8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_ADC_Start_DMA+0x24>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a63      	ldr	r2, [pc, #396]	; (8004110 <HAL_ADC_Start_DMA+0x1ac>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d106      	bne.n	8003f96 <HAL_ADC_Start_DMA+0x32>
 8003f88:	4b60      	ldr	r3, [pc, #384]	; (800410c <HAL_ADC_Start_DMA+0x1a8>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 80b3 	bne.w	80040fc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_ADC_Start_DMA+0x40>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e0ae      	b.n	8004102 <HAL_ADC_Start_DMA+0x19e>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f9cb 	bl	8004348 <ADC_Enable>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f040 809a 	bne.w	80040f2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a4e      	ldr	r2, [pc, #312]	; (8004110 <HAL_ADC_Start_DMA+0x1ac>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d105      	bne.n	8003fe8 <HAL_ADC_Start_DMA+0x84>
 8003fdc:	4b4b      	ldr	r3, [pc, #300]	; (800410c <HAL_ADC_Start_DMA+0x1a8>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d115      	bne.n	8004014 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d026      	beq.n	8004050 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800400a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004012:	e01d      	b.n	8004050 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a39      	ldr	r2, [pc, #228]	; (800410c <HAL_ADC_Start_DMA+0x1a8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d004      	beq.n	8004034 <HAL_ADC_Start_DMA+0xd0>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a38      	ldr	r2, [pc, #224]	; (8004110 <HAL_ADC_Start_DMA+0x1ac>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d10d      	bne.n	8004050 <HAL_ADC_Start_DMA+0xec>
 8004034:	4b35      	ldr	r3, [pc, #212]	; (800410c <HAL_ADC_Start_DMA+0x1a8>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004048:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d006      	beq.n	800406a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	f023 0206 	bic.w	r2, r3, #6
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c
 8004068:	e002      	b.n	8004070 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	4a25      	ldr	r2, [pc, #148]	; (8004114 <HAL_ADC_Start_DMA+0x1b0>)
 800407e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	4a24      	ldr	r2, [pc, #144]	; (8004118 <HAL_ADC_Start_DMA+0x1b4>)
 8004086:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	4a23      	ldr	r2, [pc, #140]	; (800411c <HAL_ADC_Start_DMA+0x1b8>)
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0202 	mvn.w	r2, #2
 8004098:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a18      	ldr	r0, [r3, #32]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	334c      	adds	r3, #76	; 0x4c
 80040b4:	4619      	mov	r1, r3
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f000 fbaf 	bl	800481c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80040c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80040cc:	d108      	bne.n	80040e0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80040dc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80040de:	e00f      	b.n	8004100 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80040ee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80040f0:	e006      	b.n	8004100 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80040fa:	e001      	b.n	8004100 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004100:	7dfb      	ldrb	r3, [r7, #23]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40012400 	.word	0x40012400
 8004110:	40012800 	.word	0x40012800
 8004114:	0800447f 	.word	0x0800447f
 8004118:	080044fb 	.word	0x080044fb
 800411c:	08004517 	.word	0x08004517

08004120 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr
	...

08004158 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x20>
 8004174:	2302      	movs	r3, #2
 8004176:	e0dc      	b.n	8004332 <HAL_ADC_ConfigChannel+0x1da>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b06      	cmp	r3, #6
 8004186:	d81c      	bhi.n	80041c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	3b05      	subs	r3, #5
 800419a:	221f      	movs	r2, #31
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	4019      	ands	r1, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	3b05      	subs	r3, #5
 80041b4:	fa00 f203 	lsl.w	r2, r0, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	635a      	str	r2, [r3, #52]	; 0x34
 80041c0:	e03c      	b.n	800423c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b0c      	cmp	r3, #12
 80041c8:	d81c      	bhi.n	8004204 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	3b23      	subs	r3, #35	; 0x23
 80041dc:	221f      	movs	r2, #31
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	4019      	ands	r1, r3
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	3b23      	subs	r3, #35	; 0x23
 80041f6:	fa00 f203 	lsl.w	r2, r0, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
 8004202:	e01b      	b.n	800423c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	3b41      	subs	r3, #65	; 0x41
 8004216:	221f      	movs	r2, #31
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	4019      	ands	r1, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	3b41      	subs	r3, #65	; 0x41
 8004230:	fa00 f203 	lsl.w	r2, r0, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b09      	cmp	r3, #9
 8004242:	d91c      	bls.n	800427e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68d9      	ldr	r1, [r3, #12]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4613      	mov	r3, r2
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	4413      	add	r3, r2
 8004254:	3b1e      	subs	r3, #30
 8004256:	2207      	movs	r2, #7
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	4019      	ands	r1, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6898      	ldr	r0, [r3, #8]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	3b1e      	subs	r3, #30
 8004270:	fa00 f203 	lsl.w	r2, r0, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	60da      	str	r2, [r3, #12]
 800427c:	e019      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6919      	ldr	r1, [r3, #16]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	4413      	add	r3, r2
 800428e:	2207      	movs	r2, #7
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	4019      	ands	r1, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	6898      	ldr	r0, [r3, #8]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4413      	add	r3, r2
 80042a6:	fa00 f203 	lsl.w	r2, r0, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	d003      	beq.n	80042c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80042be:	2b11      	cmp	r3, #17
 80042c0:	d132      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1d      	ldr	r2, [pc, #116]	; (800433c <HAL_ADC_ConfigChannel+0x1e4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d125      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d126      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80042e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d11a      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042f2:	4b13      	ldr	r3, [pc, #76]	; (8004340 <HAL_ADC_ConfigChannel+0x1e8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a13      	ldr	r2, [pc, #76]	; (8004344 <HAL_ADC_ConfigChannel+0x1ec>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	0c9a      	lsrs	r2, r3, #18
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004308:	e002      	b.n	8004310 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	3b01      	subs	r3, #1
 800430e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f9      	bne.n	800430a <HAL_ADC_ConfigChannel+0x1b2>
 8004316:	e007      	b.n	8004328 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	f043 0220 	orr.w	r2, r3, #32
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr
 800433c:	40012400 	.word	0x40012400
 8004340:	20000000 	.word	0x20000000
 8004344:	431bde83 	.word	0x431bde83

08004348 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b01      	cmp	r3, #1
 8004364:	d040      	beq.n	80043e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0201 	orr.w	r2, r2, #1
 8004374:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004376:	4b1f      	ldr	r3, [pc, #124]	; (80043f4 <ADC_Enable+0xac>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <ADC_Enable+0xb0>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	0c9b      	lsrs	r3, r3, #18
 8004382:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004384:	e002      	b.n	800438c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3b01      	subs	r3, #1
 800438a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f9      	bne.n	8004386 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004392:	f7ff fce1 	bl	8003d58 <HAL_GetTick>
 8004396:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004398:	e01f      	b.n	80043da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800439a:	f7ff fcdd 	bl	8003d58 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d918      	bls.n	80043da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d011      	beq.n	80043da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	f043 0210 	orr.w	r2, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	f043 0201 	orr.w	r2, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e007      	b.n	80043ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d1d8      	bne.n	800439a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000000 	.word	0x20000000
 80043f8:	431bde83 	.word	0x431bde83

080043fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b01      	cmp	r3, #1
 8004414:	d12e      	bne.n	8004474 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004426:	f7ff fc97 	bl	8003d58 <HAL_GetTick>
 800442a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800442c:	e01b      	b.n	8004466 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800442e:	f7ff fc93 	bl	8003d58 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d914      	bls.n	8004466 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b01      	cmp	r3, #1
 8004448:	d10d      	bne.n	8004466 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	f043 0210 	orr.w	r2, r3, #16
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	f043 0201 	orr.w	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e007      	b.n	8004476 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d0dc      	beq.n	800442e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004494:	2b00      	cmp	r3, #0
 8004496:	d127      	bne.n	80044e8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80044ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80044b2:	d115      	bne.n	80044e0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d111      	bne.n	80044e0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d105      	bne.n	80044e0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	f043 0201 	orr.w	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff fe1d 	bl	8004120 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80044e6:	e004      	b.n	80044f2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff fe12 	bl	8004132 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	f043 0204 	orr.w	r2, r3, #4
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff fe01 	bl	8004144 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <__NVIC_SetPriorityGrouping+0x44>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004568:	4013      	ands	r3, r2
 800456a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800457e:	4a04      	ldr	r2, [pc, #16]	; (8004590 <__NVIC_SetPriorityGrouping+0x44>)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	60d3      	str	r3, [r2, #12]
}
 8004584:	bf00      	nop
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	e000ed00 	.word	0xe000ed00

08004594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004598:	4b04      	ldr	r3, [pc, #16]	; (80045ac <__NVIC_GetPriorityGrouping+0x18>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	0a1b      	lsrs	r3, r3, #8
 800459e:	f003 0307 	and.w	r3, r3, #7
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	e000ed00 	.word	0xe000ed00

080045b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	db0b      	blt.n	80045da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	f003 021f 	and.w	r2, r3, #31
 80045c8:	4906      	ldr	r1, [pc, #24]	; (80045e4 <__NVIC_EnableIRQ+0x34>)
 80045ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	2001      	movs	r0, #1
 80045d2:	fa00 f202 	lsl.w	r2, r0, r2
 80045d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	e000e100 	.word	0xe000e100

080045e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	6039      	str	r1, [r7, #0]
 80045f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	db0a      	blt.n	8004612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	490c      	ldr	r1, [pc, #48]	; (8004634 <__NVIC_SetPriority+0x4c>)
 8004602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004606:	0112      	lsls	r2, r2, #4
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	440b      	add	r3, r1
 800460c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004610:	e00a      	b.n	8004628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	4908      	ldr	r1, [pc, #32]	; (8004638 <__NVIC_SetPriority+0x50>)
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	3b04      	subs	r3, #4
 8004620:	0112      	lsls	r2, r2, #4
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	440b      	add	r3, r1
 8004626:	761a      	strb	r2, [r3, #24]
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	e000e100 	.word	0xe000e100
 8004638:	e000ed00 	.word	0xe000ed00

0800463c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f1c3 0307 	rsb	r3, r3, #7
 8004656:	2b04      	cmp	r3, #4
 8004658:	bf28      	it	cs
 800465a:	2304      	movcs	r3, #4
 800465c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3304      	adds	r3, #4
 8004662:	2b06      	cmp	r3, #6
 8004664:	d902      	bls.n	800466c <NVIC_EncodePriority+0x30>
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	3b03      	subs	r3, #3
 800466a:	e000      	b.n	800466e <NVIC_EncodePriority+0x32>
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004670:	f04f 32ff 	mov.w	r2, #4294967295
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43da      	mvns	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	401a      	ands	r2, r3
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004684:	f04f 31ff 	mov.w	r1, #4294967295
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	43d9      	mvns	r1, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004694:	4313      	orrs	r3, r2
         );
}
 8004696:	4618      	mov	r0, r3
 8004698:	3724      	adds	r7, #36	; 0x24
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046b0:	d301      	bcc.n	80046b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046b2:	2301      	movs	r3, #1
 80046b4:	e00f      	b.n	80046d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046b6:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <SysTick_Config+0x40>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046be:	210f      	movs	r1, #15
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	f7ff ff90 	bl	80045e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <SysTick_Config+0x40>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ce:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <SysTick_Config+0x40>)
 80046d0:	2207      	movs	r2, #7
 80046d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	e000e010 	.word	0xe000e010

080046e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ff2d 	bl	800454c <__NVIC_SetPriorityGrouping>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b086      	sub	sp, #24
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800470c:	f7ff ff42 	bl	8004594 <__NVIC_GetPriorityGrouping>
 8004710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	6978      	ldr	r0, [r7, #20]
 8004718:	f7ff ff90 	bl	800463c <NVIC_EncodePriority>
 800471c:	4602      	mov	r2, r0
 800471e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff ff5f 	bl	80045e8 <__NVIC_SetPriority>
}
 800472a:	bf00      	nop
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	4603      	mov	r3, r0
 800473a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800473c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff ff35 	bl	80045b0 <__NVIC_EnableIRQ>
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff ffa2 	bl	80046a0 <SysTick_Config>
 800475c:	4603      	mov	r3, r0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e043      	b.n	8004806 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	4b22      	ldr	r3, [pc, #136]	; (8004810 <HAL_DMA_Init+0xa8>)
 8004786:	4413      	add	r3, r2
 8004788:	4a22      	ldr	r2, [pc, #136]	; (8004814 <HAL_DMA_Init+0xac>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	091b      	lsrs	r3, r3, #4
 8004790:	009a      	lsls	r2, r3, #2
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <HAL_DMA_Init+0xb0>)
 800479a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80047b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80047b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80047c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr
 8004810:	bffdfff8 	.word	0xbffdfff8
 8004814:	cccccccd 	.word	0xcccccccd
 8004818:	40020000 	.word	0x40020000

0800481c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_DMA_Start_IT+0x20>
 8004838:	2302      	movs	r3, #2
 800483a:	e04b      	b.n	80048d4 <HAL_DMA_Start_IT+0xb8>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d13a      	bne.n	80048c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0201 	bic.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f831 	bl	80048dc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d008      	beq.n	8004894 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 020e 	orr.w	r2, r2, #14
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e00f      	b.n	80048b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0204 	bic.w	r2, r2, #4
 80048a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 020a 	orr.w	r2, r2, #10
 80048b2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e005      	b.n	80048d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
 80048d0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	2101      	movs	r1, #1
 80048f4:	fa01 f202 	lsl.w	r2, r1, r2
 80048f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b10      	cmp	r3, #16
 8004908:	d108      	bne.n	800491c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800491a:	e007      	b.n	800492c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	60da      	str	r2, [r3, #12]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr
	...

08004938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004938:	b480      	push	{r7}
 800493a:	b08b      	sub	sp, #44	; 0x2c
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004942:	2300      	movs	r3, #0
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004946:	2300      	movs	r3, #0
 8004948:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800494a:	e169      	b.n	8004c20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800494c:	2201      	movs	r2, #1
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	429a      	cmp	r2, r3
 8004966:	f040 8158 	bne.w	8004c1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	4a9a      	ldr	r2, [pc, #616]	; (8004bd8 <HAL_GPIO_Init+0x2a0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d05e      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 8004974:	4a98      	ldr	r2, [pc, #608]	; (8004bd8 <HAL_GPIO_Init+0x2a0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d875      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 800497a:	4a98      	ldr	r2, [pc, #608]	; (8004bdc <HAL_GPIO_Init+0x2a4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d058      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 8004980:	4a96      	ldr	r2, [pc, #600]	; (8004bdc <HAL_GPIO_Init+0x2a4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d86f      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 8004986:	4a96      	ldr	r2, [pc, #600]	; (8004be0 <HAL_GPIO_Init+0x2a8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d052      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 800498c:	4a94      	ldr	r2, [pc, #592]	; (8004be0 <HAL_GPIO_Init+0x2a8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d869      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 8004992:	4a94      	ldr	r2, [pc, #592]	; (8004be4 <HAL_GPIO_Init+0x2ac>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d04c      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 8004998:	4a92      	ldr	r2, [pc, #584]	; (8004be4 <HAL_GPIO_Init+0x2ac>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d863      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 800499e:	4a92      	ldr	r2, [pc, #584]	; (8004be8 <HAL_GPIO_Init+0x2b0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d046      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
 80049a4:	4a90      	ldr	r2, [pc, #576]	; (8004be8 <HAL_GPIO_Init+0x2b0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d85d      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 80049aa:	2b12      	cmp	r3, #18
 80049ac:	d82a      	bhi.n	8004a04 <HAL_GPIO_Init+0xcc>
 80049ae:	2b12      	cmp	r3, #18
 80049b0:	d859      	bhi.n	8004a66 <HAL_GPIO_Init+0x12e>
 80049b2:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <HAL_GPIO_Init+0x80>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	08004a33 	.word	0x08004a33
 80049bc:	08004a0d 	.word	0x08004a0d
 80049c0:	08004a1f 	.word	0x08004a1f
 80049c4:	08004a61 	.word	0x08004a61
 80049c8:	08004a67 	.word	0x08004a67
 80049cc:	08004a67 	.word	0x08004a67
 80049d0:	08004a67 	.word	0x08004a67
 80049d4:	08004a67 	.word	0x08004a67
 80049d8:	08004a67 	.word	0x08004a67
 80049dc:	08004a67 	.word	0x08004a67
 80049e0:	08004a67 	.word	0x08004a67
 80049e4:	08004a67 	.word	0x08004a67
 80049e8:	08004a67 	.word	0x08004a67
 80049ec:	08004a67 	.word	0x08004a67
 80049f0:	08004a67 	.word	0x08004a67
 80049f4:	08004a67 	.word	0x08004a67
 80049f8:	08004a67 	.word	0x08004a67
 80049fc:	08004a15 	.word	0x08004a15
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	4a79      	ldr	r2, [pc, #484]	; (8004bec <HAL_GPIO_Init+0x2b4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a0a:	e02c      	b.n	8004a66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	623b      	str	r3, [r7, #32]
          break;
 8004a12:	e029      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	623b      	str	r3, [r7, #32]
          break;
 8004a1c:	e024      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	3308      	adds	r3, #8
 8004a24:	623b      	str	r3, [r7, #32]
          break;
 8004a26:	e01f      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	623b      	str	r3, [r7, #32]
          break;
 8004a30:	e01a      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	623b      	str	r3, [r7, #32]
          break;
 8004a3e:	e013      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a48:	2308      	movs	r3, #8
 8004a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	611a      	str	r2, [r3, #16]
          break;
 8004a52:	e009      	b.n	8004a68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a54:	2308      	movs	r3, #8
 8004a56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	615a      	str	r2, [r3, #20]
          break;
 8004a5e:	e003      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a60:	2300      	movs	r3, #0
 8004a62:	623b      	str	r3, [r7, #32]
          break;
 8004a64:	e000      	b.n	8004a68 <HAL_GPIO_Init+0x130>
          break;
 8004a66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	2bff      	cmp	r3, #255	; 0xff
 8004a6c:	d801      	bhi.n	8004a72 <HAL_GPIO_Init+0x13a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	e001      	b.n	8004a76 <HAL_GPIO_Init+0x13e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3304      	adds	r3, #4
 8004a76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2bff      	cmp	r3, #255	; 0xff
 8004a7c:	d802      	bhi.n	8004a84 <HAL_GPIO_Init+0x14c>
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	e002      	b.n	8004a8a <HAL_GPIO_Init+0x152>
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	3b08      	subs	r3, #8
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	210f      	movs	r1, #15
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	fa01 f303 	lsl.w	r3, r1, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	6a39      	ldr	r1, [r7, #32]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80b1 	beq.w	8004c1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004ab8:	4b4d      	ldr	r3, [pc, #308]	; (8004bf0 <HAL_GPIO_Init+0x2b8>)
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	4a4c      	ldr	r2, [pc, #304]	; (8004bf0 <HAL_GPIO_Init+0x2b8>)
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	6193      	str	r3, [r2, #24]
 8004ac4:	4b4a      	ldr	r3, [pc, #296]	; (8004bf0 <HAL_GPIO_Init+0x2b8>)
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ad0:	4a48      	ldr	r2, [pc, #288]	; (8004bf4 <HAL_GPIO_Init+0x2bc>)
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	089b      	lsrs	r3, r3, #2
 8004ad6:	3302      	adds	r3, #2
 8004ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004adc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	220f      	movs	r2, #15
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4013      	ands	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a40      	ldr	r2, [pc, #256]	; (8004bf8 <HAL_GPIO_Init+0x2c0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_GPIO_Init+0x1ec>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a3f      	ldr	r2, [pc, #252]	; (8004bfc <HAL_GPIO_Init+0x2c4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00d      	beq.n	8004b20 <HAL_GPIO_Init+0x1e8>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a3e      	ldr	r2, [pc, #248]	; (8004c00 <HAL_GPIO_Init+0x2c8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d007      	beq.n	8004b1c <HAL_GPIO_Init+0x1e4>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a3d      	ldr	r2, [pc, #244]	; (8004c04 <HAL_GPIO_Init+0x2cc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d101      	bne.n	8004b18 <HAL_GPIO_Init+0x1e0>
 8004b14:	2303      	movs	r3, #3
 8004b16:	e006      	b.n	8004b26 <HAL_GPIO_Init+0x1ee>
 8004b18:	2304      	movs	r3, #4
 8004b1a:	e004      	b.n	8004b26 <HAL_GPIO_Init+0x1ee>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e002      	b.n	8004b26 <HAL_GPIO_Init+0x1ee>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <HAL_GPIO_Init+0x1ee>
 8004b24:	2300      	movs	r3, #0
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	f002 0203 	and.w	r2, r2, #3
 8004b2c:	0092      	lsls	r2, r2, #2
 8004b2e:	4093      	lsls	r3, r2
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b36:	492f      	ldr	r1, [pc, #188]	; (8004bf4 <HAL_GPIO_Init+0x2bc>)
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	089b      	lsrs	r3, r3, #2
 8004b3c:	3302      	adds	r3, #2
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d006      	beq.n	8004b5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b50:	4b2d      	ldr	r3, [pc, #180]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	492c      	ldr	r1, [pc, #176]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	608b      	str	r3, [r1, #8]
 8004b5c:	e006      	b.n	8004b6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b5e:	4b2a      	ldr	r3, [pc, #168]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	4928      	ldr	r1, [pc, #160]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d006      	beq.n	8004b86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b78:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	4922      	ldr	r1, [pc, #136]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60cb      	str	r3, [r1, #12]
 8004b84:	e006      	b.n	8004b94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004b86:	4b20      	ldr	r3, [pc, #128]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	491e      	ldr	r1, [pc, #120]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d006      	beq.n	8004bae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004ba0:	4b19      	ldr	r3, [pc, #100]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	4918      	ldr	r1, [pc, #96]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]
 8004bac:	e006      	b.n	8004bbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004bae:	4b16      	ldr	r3, [pc, #88]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	4914      	ldr	r1, [pc, #80]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d021      	beq.n	8004c0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004bc8:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	490e      	ldr	r1, [pc, #56]	; (8004c08 <HAL_GPIO_Init+0x2d0>)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	600b      	str	r3, [r1, #0]
 8004bd4:	e021      	b.n	8004c1a <HAL_GPIO_Init+0x2e2>
 8004bd6:	bf00      	nop
 8004bd8:	10320000 	.word	0x10320000
 8004bdc:	10310000 	.word	0x10310000
 8004be0:	10220000 	.word	0x10220000
 8004be4:	10210000 	.word	0x10210000
 8004be8:	10120000 	.word	0x10120000
 8004bec:	10110000 	.word	0x10110000
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40010000 	.word	0x40010000
 8004bf8:	40010800 	.word	0x40010800
 8004bfc:	40010c00 	.word	0x40010c00
 8004c00:	40011000 	.word	0x40011000
 8004c04:	40011400 	.word	0x40011400
 8004c08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_GPIO_Init+0x304>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	43db      	mvns	r3, r3
 8004c14:	4909      	ldr	r1, [pc, #36]	; (8004c3c <HAL_GPIO_Init+0x304>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f47f ae8e 	bne.w	800494c <HAL_GPIO_Init+0x14>
  }
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	372c      	adds	r7, #44	; 0x2c
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	40010400 	.word	0x40010400

08004c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c4a:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d006      	beq.n	8004c64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c56:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c58:	88fb      	ldrh	r3, [r7, #6]
 8004c5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f806 	bl	8004c70 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c64:	bf00      	nop
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40010400 	.word	0x40010400

08004c70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e272      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 8087 	beq.w	8004db2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ca4:	4b92      	ldr	r3, [pc, #584]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d00c      	beq.n	8004cca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cb0:	4b8f      	ldr	r3, [pc, #572]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 030c 	and.w	r3, r3, #12
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d112      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x5e>
 8004cbc:	4b8c      	ldr	r3, [pc, #560]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc8:	d10b      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cca:	4b89      	ldr	r3, [pc, #548]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d06c      	beq.n	8004db0 <HAL_RCC_OscConfig+0x12c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d168      	bne.n	8004db0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e24c      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cea:	d106      	bne.n	8004cfa <HAL_RCC_OscConfig+0x76>
 8004cec:	4b80      	ldr	r3, [pc, #512]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a7f      	ldr	r2, [pc, #508]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	e02e      	b.n	8004d58 <HAL_RCC_OscConfig+0xd4>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0x98>
 8004d02:	4b7b      	ldr	r3, [pc, #492]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a7a      	ldr	r2, [pc, #488]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	4b78      	ldr	r3, [pc, #480]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a77      	ldr	r2, [pc, #476]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e01d      	b.n	8004d58 <HAL_RCC_OscConfig+0xd4>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCC_OscConfig+0xbc>
 8004d26:	4b72      	ldr	r3, [pc, #456]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a71      	ldr	r2, [pc, #452]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	4b6f      	ldr	r3, [pc, #444]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a6e      	ldr	r2, [pc, #440]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	e00b      	b.n	8004d58 <HAL_RCC_OscConfig+0xd4>
 8004d40:	4b6b      	ldr	r3, [pc, #428]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a6a      	ldr	r2, [pc, #424]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	4b68      	ldr	r3, [pc, #416]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a67      	ldr	r2, [pc, #412]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d013      	beq.n	8004d88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7fe fffa 	bl	8003d58 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d68:	f7fe fff6 	bl	8003d58 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	; 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e200      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7a:	4b5d      	ldr	r3, [pc, #372]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCC_OscConfig+0xe4>
 8004d86:	e014      	b.n	8004db2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d88:	f7fe ffe6 	bl	8003d58 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d90:	f7fe ffe2 	bl	8003d58 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	; 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e1ec      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da2:	4b53      	ldr	r3, [pc, #332]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x10c>
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d063      	beq.n	8004e86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dbe:	4b4c      	ldr	r3, [pc, #304]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dca:	4b49      	ldr	r3, [pc, #292]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d11c      	bne.n	8004e10 <HAL_RCC_OscConfig+0x18c>
 8004dd6:	4b46      	ldr	r3, [pc, #280]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d116      	bne.n	8004e10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de2:	4b43      	ldr	r3, [pc, #268]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <HAL_RCC_OscConfig+0x176>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e1c0      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfa:	4b3d      	ldr	r3, [pc, #244]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	4939      	ldr	r1, [pc, #228]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0e:	e03a      	b.n	8004e86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d020      	beq.n	8004e5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e18:	4b36      	ldr	r3, [pc, #216]	; (8004ef4 <HAL_RCC_OscConfig+0x270>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1e:	f7fe ff9b 	bl	8003d58 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e26:	f7fe ff97 	bl	8003d58 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e1a1      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e38:	4b2d      	ldr	r3, [pc, #180]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e44:	4b2a      	ldr	r3, [pc, #168]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4927      	ldr	r1, [pc, #156]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	600b      	str	r3, [r1, #0]
 8004e58:	e015      	b.n	8004e86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5a:	4b26      	ldr	r3, [pc, #152]	; (8004ef4 <HAL_RCC_OscConfig+0x270>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e60:	f7fe ff7a 	bl	8003d58 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e68:	f7fe ff76 	bl	8003d58 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e180      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d03a      	beq.n	8004f08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d019      	beq.n	8004ece <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e9a:	4b17      	ldr	r3, [pc, #92]	; (8004ef8 <HAL_RCC_OscConfig+0x274>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea0:	f7fe ff5a 	bl	8003d58 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea8:	f7fe ff56 	bl	8003d58 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e160      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eba:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	f000 fa9c 	bl	8005404 <RCC_Delay>
 8004ecc:	e01c      	b.n	8004f08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <HAL_RCC_OscConfig+0x274>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed4:	f7fe ff40 	bl	8003d58 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eda:	e00f      	b.n	8004efc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004edc:	f7fe ff3c 	bl	8003d58 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d908      	bls.n	8004efc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e146      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
 8004eee:	bf00      	nop
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	42420000 	.word	0x42420000
 8004ef8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004efc:	4b92      	ldr	r3, [pc, #584]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e9      	bne.n	8004edc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80a6 	beq.w	8005062 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f1a:	4b8b      	ldr	r3, [pc, #556]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10d      	bne.n	8004f42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f26:	4b88      	ldr	r3, [pc, #544]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	4a87      	ldr	r2, [pc, #540]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f30:	61d3      	str	r3, [r2, #28]
 8004f32:	4b85      	ldr	r3, [pc, #532]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f42:	4b82      	ldr	r3, [pc, #520]	; (800514c <HAL_RCC_OscConfig+0x4c8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d118      	bne.n	8004f80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f4e:	4b7f      	ldr	r3, [pc, #508]	; (800514c <HAL_RCC_OscConfig+0x4c8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a7e      	ldr	r2, [pc, #504]	; (800514c <HAL_RCC_OscConfig+0x4c8>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f5a:	f7fe fefd 	bl	8003d58 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f62:	f7fe fef9 	bl	8003d58 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b64      	cmp	r3, #100	; 0x64
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e103      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f74:	4b75      	ldr	r3, [pc, #468]	; (800514c <HAL_RCC_OscConfig+0x4c8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d106      	bne.n	8004f96 <HAL_RCC_OscConfig+0x312>
 8004f88:	4b6f      	ldr	r3, [pc, #444]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4a6e      	ldr	r2, [pc, #440]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6213      	str	r3, [r2, #32]
 8004f94:	e02d      	b.n	8004ff2 <HAL_RCC_OscConfig+0x36e>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x334>
 8004f9e:	4b6a      	ldr	r3, [pc, #424]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	4a69      	ldr	r2, [pc, #420]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	6213      	str	r3, [r2, #32]
 8004faa:	4b67      	ldr	r3, [pc, #412]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	4a66      	ldr	r2, [pc, #408]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fb0:	f023 0304 	bic.w	r3, r3, #4
 8004fb4:	6213      	str	r3, [r2, #32]
 8004fb6:	e01c      	b.n	8004ff2 <HAL_RCC_OscConfig+0x36e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b05      	cmp	r3, #5
 8004fbe:	d10c      	bne.n	8004fda <HAL_RCC_OscConfig+0x356>
 8004fc0:	4b61      	ldr	r3, [pc, #388]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	4a60      	ldr	r2, [pc, #384]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	6213      	str	r3, [r2, #32]
 8004fcc:	4b5e      	ldr	r3, [pc, #376]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	4a5d      	ldr	r2, [pc, #372]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fd2:	f043 0301 	orr.w	r3, r3, #1
 8004fd6:	6213      	str	r3, [r2, #32]
 8004fd8:	e00b      	b.n	8004ff2 <HAL_RCC_OscConfig+0x36e>
 8004fda:	4b5b      	ldr	r3, [pc, #364]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	4a5a      	ldr	r2, [pc, #360]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	6213      	str	r3, [r2, #32]
 8004fe6:	4b58      	ldr	r3, [pc, #352]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	4a57      	ldr	r2, [pc, #348]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8004fec:	f023 0304 	bic.w	r3, r3, #4
 8004ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d015      	beq.n	8005026 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffa:	f7fe fead 	bl	8003d58 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005000:	e00a      	b.n	8005018 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005002:	f7fe fea9 	bl	8003d58 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e0b1      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005018:	4b4b      	ldr	r3, [pc, #300]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0ee      	beq.n	8005002 <HAL_RCC_OscConfig+0x37e>
 8005024:	e014      	b.n	8005050 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005026:	f7fe fe97 	bl	8003d58 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800502c:	e00a      	b.n	8005044 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fe fe93 	bl	8003d58 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	; 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e09b      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005044:	4b40      	ldr	r3, [pc, #256]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1ee      	bne.n	800502e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d105      	bne.n	8005062 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005056:	4b3c      	ldr	r3, [pc, #240]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	4a3b      	ldr	r2, [pc, #236]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 800505c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005060:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 8087 	beq.w	800517a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800506c:	4b36      	ldr	r3, [pc, #216]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 030c 	and.w	r3, r3, #12
 8005074:	2b08      	cmp	r3, #8
 8005076:	d061      	beq.n	800513c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d146      	bne.n	800510e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005080:	4b33      	ldr	r3, [pc, #204]	; (8005150 <HAL_RCC_OscConfig+0x4cc>)
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005086:	f7fe fe67 	bl	8003d58 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508e:	f7fe fe63 	bl	8003d58 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e06d      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a0:	4b29      	ldr	r3, [pc, #164]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1f0      	bne.n	800508e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b4:	d108      	bne.n	80050c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050b6:	4b24      	ldr	r3, [pc, #144]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	4921      	ldr	r1, [pc, #132]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c8:	4b1f      	ldr	r3, [pc, #124]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a19      	ldr	r1, [r3, #32]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	430b      	orrs	r3, r1
 80050da:	491b      	ldr	r1, [pc, #108]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e0:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <HAL_RCC_OscConfig+0x4cc>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e6:	f7fe fe37 	bl	8003d58 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ee:	f7fe fe33 	bl	8003d58 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e03d      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005100:	4b11      	ldr	r3, [pc, #68]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <HAL_RCC_OscConfig+0x46a>
 800510c:	e035      	b.n	800517a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	4b10      	ldr	r3, [pc, #64]	; (8005150 <HAL_RCC_OscConfig+0x4cc>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005114:	f7fe fe20 	bl	8003d58 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511c:	f7fe fe1c 	bl	8003d58 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e026      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <HAL_RCC_OscConfig+0x4c4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x498>
 800513a:	e01e      	b.n	800517a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d107      	bne.n	8005154 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e019      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
 8005148:	40021000 	.word	0x40021000
 800514c:	40007000 	.word	0x40007000
 8005150:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005154:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <HAL_RCC_OscConfig+0x500>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	429a      	cmp	r2, r3
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005172:	429a      	cmp	r2, r3
 8005174:	d001      	beq.n	800517a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40021000 	.word	0x40021000

08005188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0d0      	b.n	800533e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800519c:	4b6a      	ldr	r3, [pc, #424]	; (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d910      	bls.n	80051cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051aa:	4b67      	ldr	r3, [pc, #412]	; (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f023 0207 	bic.w	r2, r3, #7
 80051b2:	4965      	ldr	r1, [pc, #404]	; (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ba:	4b63      	ldr	r3, [pc, #396]	; (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d001      	beq.n	80051cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e0b8      	b.n	800533e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d020      	beq.n	800521a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e4:	4b59      	ldr	r3, [pc, #356]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a58      	ldr	r2, [pc, #352]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051fc:	4b53      	ldr	r3, [pc, #332]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4a52      	ldr	r2, [pc, #328]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005202:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005206:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005208:	4b50      	ldr	r3, [pc, #320]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	494d      	ldr	r1, [pc, #308]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d040      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d107      	bne.n	800523e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800522e:	4b47      	ldr	r3, [pc, #284]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d115      	bne.n	8005266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e07f      	b.n	800533e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d107      	bne.n	8005256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005246:	4b41      	ldr	r3, [pc, #260]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d109      	bne.n	8005266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e073      	b.n	800533e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005256:	4b3d      	ldr	r3, [pc, #244]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e06b      	b.n	800533e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005266:	4b39      	ldr	r3, [pc, #228]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f023 0203 	bic.w	r2, r3, #3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	4936      	ldr	r1, [pc, #216]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005274:	4313      	orrs	r3, r2
 8005276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005278:	f7fe fd6e 	bl	8003d58 <HAL_GetTick>
 800527c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527e:	e00a      	b.n	8005296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005280:	f7fe fd6a 	bl	8003d58 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f241 3288 	movw	r2, #5000	; 0x1388
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e053      	b.n	800533e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005296:	4b2d      	ldr	r3, [pc, #180]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f003 020c 	and.w	r2, r3, #12
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d1eb      	bne.n	8005280 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052a8:	4b27      	ldr	r3, [pc, #156]	; (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d210      	bcs.n	80052d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b6:	4b24      	ldr	r3, [pc, #144]	; (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 0207 	bic.w	r2, r3, #7
 80052be:	4922      	ldr	r1, [pc, #136]	; (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c6:	4b20      	ldr	r3, [pc, #128]	; (8005348 <HAL_RCC_ClockConfig+0x1c0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e032      	b.n	800533e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e4:	4b19      	ldr	r3, [pc, #100]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	4916      	ldr	r1, [pc, #88]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d009      	beq.n	8005316 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005302:	4b12      	ldr	r3, [pc, #72]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	490e      	ldr	r1, [pc, #56]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 8005312:	4313      	orrs	r3, r2
 8005314:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005316:	f000 f821 	bl	800535c <HAL_RCC_GetSysClockFreq>
 800531a:	4602      	mov	r2, r0
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	091b      	lsrs	r3, r3, #4
 8005322:	f003 030f 	and.w	r3, r3, #15
 8005326:	490a      	ldr	r1, [pc, #40]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005328:	5ccb      	ldrb	r3, [r1, r3]
 800532a:	fa22 f303 	lsr.w	r3, r2, r3
 800532e:	4a09      	ldr	r2, [pc, #36]	; (8005354 <HAL_RCC_ClockConfig+0x1cc>)
 8005330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005332:	4b09      	ldr	r3, [pc, #36]	; (8005358 <HAL_RCC_ClockConfig+0x1d0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fccc 	bl	8003cd4 <HAL_InitTick>

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40022000 	.word	0x40022000
 800534c:	40021000 	.word	0x40021000
 8005350:	08006740 	.word	0x08006740
 8005354:	20000000 	.word	0x20000000
 8005358:	20000004 	.word	0x20000004

0800535c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	2300      	movs	r3, #0
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005376:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 030c 	and.w	r3, r3, #12
 8005382:	2b04      	cmp	r3, #4
 8005384:	d002      	beq.n	800538c <HAL_RCC_GetSysClockFreq+0x30>
 8005386:	2b08      	cmp	r3, #8
 8005388:	d003      	beq.n	8005392 <HAL_RCC_GetSysClockFreq+0x36>
 800538a:	e027      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800538c:	4b19      	ldr	r3, [pc, #100]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800538e:	613b      	str	r3, [r7, #16]
      break;
 8005390:	e027      	b.n	80053e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	0c9b      	lsrs	r3, r3, #18
 8005396:	f003 030f 	and.w	r3, r3, #15
 800539a:	4a17      	ldr	r2, [pc, #92]	; (80053f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800539c:	5cd3      	ldrb	r3, [r2, r3]
 800539e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d010      	beq.n	80053cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053aa:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	0c5b      	lsrs	r3, r3, #17
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	4a11      	ldr	r2, [pc, #68]	; (80053fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80053b6:	5cd3      	ldrb	r3, [r2, r3]
 80053b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a0d      	ldr	r2, [pc, #52]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80053be:	fb03 f202 	mul.w	r2, r3, r2
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e004      	b.n	80053d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a0c      	ldr	r2, [pc, #48]	; (8005400 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
 80053d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	613b      	str	r3, [r7, #16]
      break;
 80053da:	e002      	b.n	80053e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053dc:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80053de:	613b      	str	r3, [r7, #16]
      break;
 80053e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053e2:	693b      	ldr	r3, [r7, #16]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40021000 	.word	0x40021000
 80053f4:	007a1200 	.word	0x007a1200
 80053f8:	08006750 	.word	0x08006750
 80053fc:	08006760 	.word	0x08006760
 8005400:	003d0900 	.word	0x003d0900

08005404 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800540c:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <RCC_Delay+0x34>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a0a      	ldr	r2, [pc, #40]	; (800543c <RCC_Delay+0x38>)
 8005412:	fba2 2303 	umull	r2, r3, r2, r3
 8005416:	0a5b      	lsrs	r3, r3, #9
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	fb02 f303 	mul.w	r3, r2, r3
 800541e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005420:	bf00      	nop
  }
  while (Delay --);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1e5a      	subs	r2, r3, #1
 8005426:	60fa      	str	r2, [r7, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f9      	bne.n	8005420 <RCC_Delay+0x1c>
}
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr
 8005438:	20000000 	.word	0x20000000
 800543c:	10624dd3 	.word	0x10624dd3

08005440 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	613b      	str	r3, [r7, #16]
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d07d      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800545c:	2300      	movs	r3, #0
 800545e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005460:	4b4f      	ldr	r3, [pc, #316]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10d      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800546c:	4b4c      	ldr	r3, [pc, #304]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	4a4b      	ldr	r2, [pc, #300]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005476:	61d3      	str	r3, [r2, #28]
 8005478:	4b49      	ldr	r3, [pc, #292]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005484:	2301      	movs	r3, #1
 8005486:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005488:	4b46      	ldr	r3, [pc, #280]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005490:	2b00      	cmp	r3, #0
 8005492:	d118      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005494:	4b43      	ldr	r3, [pc, #268]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a42      	ldr	r2, [pc, #264]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800549a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054a0:	f7fe fc5a 	bl	8003d58 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a6:	e008      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a8:	f7fe fc56 	bl	8003d58 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b64      	cmp	r3, #100	; 0x64
 80054b4:	d901      	bls.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e06d      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ba:	4b3a      	ldr	r3, [pc, #232]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054c6:	4b36      	ldr	r3, [pc, #216]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d02e      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d027      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054e4:	4b2e      	ldr	r3, [pc, #184]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054ee:	4b2e      	ldr	r3, [pc, #184]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054f4:	4b2c      	ldr	r3, [pc, #176]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054fa:	4a29      	ldr	r2, [pc, #164]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d014      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550a:	f7fe fc25 	bl	8003d58 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005510:	e00a      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005512:	f7fe fc21 	bl	8003d58 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005520:	4293      	cmp	r3, r2
 8005522:	d901      	bls.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e036      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005528:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0ee      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005534:	4b1a      	ldr	r3, [pc, #104]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4917      	ldr	r1, [pc, #92]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005542:	4313      	orrs	r3, r2
 8005544:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005546:	7dfb      	ldrb	r3, [r7, #23]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d105      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800554c:	4b14      	ldr	r3, [pc, #80]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	4a13      	ldr	r2, [pc, #76]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005556:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005564:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	490b      	ldr	r1, [pc, #44]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005572:	4313      	orrs	r3, r2
 8005574:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b00      	cmp	r3, #0
 8005580:	d008      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005582:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	4904      	ldr	r1, [pc, #16]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005590:	4313      	orrs	r3, r2
 8005592:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	40021000 	.word	0x40021000
 80055a4:	40007000 	.word	0x40007000
 80055a8:	42420440 	.word	0x42420440

080055ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e041      	b.n	8005642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fd fdc2 	bl	800315c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3304      	adds	r3, #4
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f000 fc7a 	bl	8005ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	d001      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e03a      	b.n	80056da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <HAL_TIM_Base_Start_IT+0x98>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00e      	beq.n	80056a4 <HAL_TIM_Base_Start_IT+0x58>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568e:	d009      	beq.n	80056a4 <HAL_TIM_Base_Start_IT+0x58>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a14      	ldr	r2, [pc, #80]	; (80056e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <HAL_TIM_Base_Start_IT+0x58>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a13      	ldr	r2, [pc, #76]	; (80056ec <HAL_TIM_Base_Start_IT+0xa0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d111      	bne.n	80056c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b06      	cmp	r3, #6
 80056b4:	d010      	beq.n	80056d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0201 	orr.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c6:	e007      	b.n	80056d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr
 80056e4:	40012c00 	.word	0x40012c00
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800

080056f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e041      	b.n	8005786 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d106      	bne.n	800571c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f839 	bl	800578e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f000 fbd8 	bl	8005ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr

080057a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d109      	bne.n	80057c4 <HAL_TIM_PWM_Start+0x24>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	bf14      	ite	ne
 80057bc:	2301      	movne	r3, #1
 80057be:	2300      	moveq	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	e022      	b.n	800580a <HAL_TIM_PWM_Start+0x6a>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d109      	bne.n	80057de <HAL_TIM_PWM_Start+0x3e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	bf14      	ite	ne
 80057d6:	2301      	movne	r3, #1
 80057d8:	2300      	moveq	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	e015      	b.n	800580a <HAL_TIM_PWM_Start+0x6a>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d109      	bne.n	80057f8 <HAL_TIM_PWM_Start+0x58>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	bf14      	ite	ne
 80057f0:	2301      	movne	r3, #1
 80057f2:	2300      	moveq	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	e008      	b.n	800580a <HAL_TIM_PWM_Start+0x6a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	bf14      	ite	ne
 8005804:	2301      	movne	r3, #1
 8005806:	2300      	moveq	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e05e      	b.n	80058d0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d104      	bne.n	8005822 <HAL_TIM_PWM_Start+0x82>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005820:	e013      	b.n	800584a <HAL_TIM_PWM_Start+0xaa>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b04      	cmp	r3, #4
 8005826:	d104      	bne.n	8005832 <HAL_TIM_PWM_Start+0x92>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005830:	e00b      	b.n	800584a <HAL_TIM_PWM_Start+0xaa>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b08      	cmp	r3, #8
 8005836:	d104      	bne.n	8005842 <HAL_TIM_PWM_Start+0xa2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005840:	e003      	b.n	800584a <HAL_TIM_PWM_Start+0xaa>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2202      	movs	r2, #2
 8005846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2201      	movs	r2, #1
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fe57 	bl	8006506 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1e      	ldr	r2, [pc, #120]	; (80058d8 <HAL_TIM_PWM_Start+0x138>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d107      	bne.n	8005872 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005870:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <HAL_TIM_PWM_Start+0x138>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00e      	beq.n	800589a <HAL_TIM_PWM_Start+0xfa>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005884:	d009      	beq.n	800589a <HAL_TIM_PWM_Start+0xfa>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a14      	ldr	r2, [pc, #80]	; (80058dc <HAL_TIM_PWM_Start+0x13c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_TIM_PWM_Start+0xfa>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a12      	ldr	r2, [pc, #72]	; (80058e0 <HAL_TIM_PWM_Start+0x140>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d111      	bne.n	80058be <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b06      	cmp	r3, #6
 80058aa:	d010      	beq.n	80058ce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058bc:	e007      	b.n	80058ce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0201 	orr.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800

080058e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d122      	bne.n	8005940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b02      	cmp	r3, #2
 8005906:	d11b      	bne.n	8005940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0202 	mvn.w	r2, #2
 8005910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fac1 	bl	8005eae <HAL_TIM_IC_CaptureCallback>
 800592c:	e005      	b.n	800593a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fab4 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fac3 	bl	8005ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	2b04      	cmp	r3, #4
 800594c:	d122      	bne.n	8005994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b04      	cmp	r3, #4
 800595a:	d11b      	bne.n	8005994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0204 	mvn.w	r2, #4
 8005964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2202      	movs	r2, #2
 800596a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fa97 	bl	8005eae <HAL_TIM_IC_CaptureCallback>
 8005980:	e005      	b.n	800598e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fa8a 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fa99 	bl	8005ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d122      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d11b      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0208 	mvn.w	r2, #8
 80059b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2204      	movs	r2, #4
 80059be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fa6d 	bl	8005eae <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fa60 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fa6f 	bl	8005ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b10      	cmp	r3, #16
 80059f4:	d122      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d11b      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0210 	mvn.w	r2, #16
 8005a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2208      	movs	r2, #8
 8005a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa43 	bl	8005eae <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa36 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fa45 	bl	8005ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d10e      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d107      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0201 	mvn.w	r2, #1
 8005a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fa11 	bl	8005e8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d10e      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a80:	2b80      	cmp	r3, #128	; 0x80
 8005a82:	d107      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fdc5 	bl	800661e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d10e      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d107      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fa09 	bl	8005ed2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d10e      	bne.n	8005aec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d107      	bne.n	8005aec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0220 	mvn.w	r2, #32
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fd90 	bl	800660c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aec:	bf00      	nop
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e0ae      	b.n	8005c70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b0c      	cmp	r3, #12
 8005b1e:	f200 809f 	bhi.w	8005c60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b5d 	.word	0x08005b5d
 8005b2c:	08005c61 	.word	0x08005c61
 8005b30:	08005c61 	.word	0x08005c61
 8005b34:	08005c61 	.word	0x08005c61
 8005b38:	08005b9d 	.word	0x08005b9d
 8005b3c:	08005c61 	.word	0x08005c61
 8005b40:	08005c61 	.word	0x08005c61
 8005b44:	08005c61 	.word	0x08005c61
 8005b48:	08005bdf 	.word	0x08005bdf
 8005b4c:	08005c61 	.word	0x08005c61
 8005b50:	08005c61 	.word	0x08005c61
 8005b54:	08005c61 	.word	0x08005c61
 8005b58:	08005c1f 	.word	0x08005c1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fa20 	bl	8005fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0208 	orr.w	r2, r2, #8
 8005b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0204 	bic.w	r2, r2, #4
 8005b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6999      	ldr	r1, [r3, #24]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	691a      	ldr	r2, [r3, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	619a      	str	r2, [r3, #24]
      break;
 8005b9a:	e064      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fa66 	bl	8006074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6999      	ldr	r1, [r3, #24]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	021a      	lsls	r2, r3, #8
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	619a      	str	r2, [r3, #24]
      break;
 8005bdc:	e043      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68b9      	ldr	r1, [r7, #8]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 faaf 	bl	8006148 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0208 	orr.w	r2, r2, #8
 8005bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0204 	bic.w	r2, r2, #4
 8005c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69d9      	ldr	r1, [r3, #28]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	61da      	str	r2, [r3, #28]
      break;
 8005c1c:	e023      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 faf9 	bl	800621c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69d9      	ldr	r1, [r3, #28]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	021a      	lsls	r2, r3, #8
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	61da      	str	r2, [r3, #28]
      break;
 8005c5e:	e002      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	75fb      	strb	r3, [r7, #23]
      break;
 8005c64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_TIM_ConfigClockSource+0x1c>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e0b4      	b.n	8005dfe <HAL_TIM_ConfigClockSource+0x186>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ccc:	d03e      	beq.n	8005d4c <HAL_TIM_ConfigClockSource+0xd4>
 8005cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd2:	f200 8087 	bhi.w	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cda:	f000 8086 	beq.w	8005dea <HAL_TIM_ConfigClockSource+0x172>
 8005cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce2:	d87f      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce4:	2b70      	cmp	r3, #112	; 0x70
 8005ce6:	d01a      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0xa6>
 8005ce8:	2b70      	cmp	r3, #112	; 0x70
 8005cea:	d87b      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cec:	2b60      	cmp	r3, #96	; 0x60
 8005cee:	d050      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0x11a>
 8005cf0:	2b60      	cmp	r3, #96	; 0x60
 8005cf2:	d877      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b50      	cmp	r3, #80	; 0x50
 8005cf6:	d03c      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0xfa>
 8005cf8:	2b50      	cmp	r3, #80	; 0x50
 8005cfa:	d873      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	d058      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x13a>
 8005d00:	2b40      	cmp	r3, #64	; 0x40
 8005d02:	d86f      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d04:	2b30      	cmp	r3, #48	; 0x30
 8005d06:	d064      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d08:	2b30      	cmp	r3, #48	; 0x30
 8005d0a:	d86b      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d060      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d867      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d05c      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d18:	2b10      	cmp	r3, #16
 8005d1a:	d05a      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d1c:	e062      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6818      	ldr	r0, [r3, #0]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	6899      	ldr	r1, [r3, #8]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f000 fbcb 	bl	80064c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	609a      	str	r2, [r3, #8]
      break;
 8005d4a:	e04f      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	6899      	ldr	r1, [r3, #8]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f000 fbb4 	bl	80064c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d6e:	609a      	str	r2, [r3, #8]
      break;
 8005d70:	e03c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6859      	ldr	r1, [r3, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f000 fb2b 	bl	80063da <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2150      	movs	r1, #80	; 0x50
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fb82 	bl	8006494 <TIM_ITRx_SetConfig>
      break;
 8005d90:	e02c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6859      	ldr	r1, [r3, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f000 fb49 	bl	8006436 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2160      	movs	r1, #96	; 0x60
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fb72 	bl	8006494 <TIM_ITRx_SetConfig>
      break;
 8005db0:	e01c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6859      	ldr	r1, [r3, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f000 fb0b 	bl	80063da <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2140      	movs	r1, #64	; 0x40
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fb62 	bl	8006494 <TIM_ITRx_SetConfig>
      break;
 8005dd0:	e00c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4610      	mov	r0, r2
 8005dde:	f000 fb59 	bl	8006494 <TIM_ITRx_SetConfig>
      break;
 8005de2:	e003      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
      break;
 8005de8:	e000      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b082      	sub	sp, #8
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <HAL_TIM_SlaveConfigSynchro+0x18>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e031      	b.n	8005e82 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fa41 	bl	80062b8 <TIM_SlaveTimer_SetConfig>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d009      	beq.n	8005e50 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e018      	b.n	8005e82 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e6e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr

08005e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr

08005eae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr

08005ed2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr

08005ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a29      	ldr	r2, [pc, #164]	; (8005f9c <TIM_Base_SetConfig+0xb8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00b      	beq.n	8005f14 <TIM_Base_SetConfig+0x30>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f02:	d007      	beq.n	8005f14 <TIM_Base_SetConfig+0x30>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a26      	ldr	r2, [pc, #152]	; (8005fa0 <TIM_Base_SetConfig+0xbc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d003      	beq.n	8005f14 <TIM_Base_SetConfig+0x30>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a25      	ldr	r2, [pc, #148]	; (8005fa4 <TIM_Base_SetConfig+0xc0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d108      	bne.n	8005f26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <TIM_Base_SetConfig+0xb8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00b      	beq.n	8005f46 <TIM_Base_SetConfig+0x62>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f34:	d007      	beq.n	8005f46 <TIM_Base_SetConfig+0x62>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a19      	ldr	r2, [pc, #100]	; (8005fa0 <TIM_Base_SetConfig+0xbc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d003      	beq.n	8005f46 <TIM_Base_SetConfig+0x62>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a18      	ldr	r2, [pc, #96]	; (8005fa4 <TIM_Base_SetConfig+0xc0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d108      	bne.n	8005f58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a07      	ldr	r2, [pc, #28]	; (8005f9c <TIM_Base_SetConfig+0xb8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d103      	bne.n	8005f8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	615a      	str	r2, [r3, #20]
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800

08005fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f023 0201 	bic.w	r2, r3, #1
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 0302 	bic.w	r3, r3, #2
 8005ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <TIM_OC1_SetConfig+0xc8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d10c      	bne.n	800601e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f023 0308 	bic.w	r3, r3, #8
 800600a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f023 0304 	bic.w	r3, r3, #4
 800601c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a13      	ldr	r2, [pc, #76]	; (8006070 <TIM_OC1_SetConfig+0xc8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d111      	bne.n	800604a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800602c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	4313      	orrs	r3, r2
 8006048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	621a      	str	r2, [r3, #32]
}
 8006064:	bf00      	nop
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40012c00 	.word	0x40012c00

08006074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	f023 0210 	bic.w	r2, r3, #16
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	021b      	lsls	r3, r3, #8
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f023 0320 	bic.w	r3, r3, #32
 80060be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a1d      	ldr	r2, [pc, #116]	; (8006144 <TIM_OC2_SetConfig+0xd0>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d10d      	bne.n	80060f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a14      	ldr	r2, [pc, #80]	; (8006144 <TIM_OC2_SetConfig+0xd0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d113      	bne.n	8006120 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr
 8006144:	40012c00 	.word	0x40012c00

08006148 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0303 	bic.w	r3, r3, #3
 800617e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a1d      	ldr	r2, [pc, #116]	; (8006218 <TIM_OC3_SetConfig+0xd0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d10d      	bne.n	80061c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a14      	ldr	r2, [pc, #80]	; (8006218 <TIM_OC3_SetConfig+0xd0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d113      	bne.n	80061f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	621a      	str	r2, [r3, #32]
}
 800620c:	bf00      	nop
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40012c00 	.word	0x40012c00

0800621c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	021b      	lsls	r3, r3, #8
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4313      	orrs	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	031b      	lsls	r3, r3, #12
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a0f      	ldr	r2, [pc, #60]	; (80062b4 <TIM_OC4_SetConfig+0x98>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d109      	bne.n	8006290 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	019b      	lsls	r3, r3, #6
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bc80      	pop	{r7}
 80062b2:	4770      	bx	lr
 80062b4:	40012c00 	.word	0x40012c00

080062b8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f023 0307 	bic.w	r3, r3, #7
 80062e6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b70      	cmp	r3, #112	; 0x70
 8006300:	d01a      	beq.n	8006338 <TIM_SlaveTimer_SetConfig+0x80>
 8006302:	2b70      	cmp	r3, #112	; 0x70
 8006304:	d860      	bhi.n	80063c8 <TIM_SlaveTimer_SetConfig+0x110>
 8006306:	2b60      	cmp	r3, #96	; 0x60
 8006308:	d054      	beq.n	80063b4 <TIM_SlaveTimer_SetConfig+0xfc>
 800630a:	2b60      	cmp	r3, #96	; 0x60
 800630c:	d85c      	bhi.n	80063c8 <TIM_SlaveTimer_SetConfig+0x110>
 800630e:	2b50      	cmp	r3, #80	; 0x50
 8006310:	d046      	beq.n	80063a0 <TIM_SlaveTimer_SetConfig+0xe8>
 8006312:	2b50      	cmp	r3, #80	; 0x50
 8006314:	d858      	bhi.n	80063c8 <TIM_SlaveTimer_SetConfig+0x110>
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d019      	beq.n	800634e <TIM_SlaveTimer_SetConfig+0x96>
 800631a:	2b40      	cmp	r3, #64	; 0x40
 800631c:	d854      	bhi.n	80063c8 <TIM_SlaveTimer_SetConfig+0x110>
 800631e:	2b30      	cmp	r3, #48	; 0x30
 8006320:	d055      	beq.n	80063ce <TIM_SlaveTimer_SetConfig+0x116>
 8006322:	2b30      	cmp	r3, #48	; 0x30
 8006324:	d850      	bhi.n	80063c8 <TIM_SlaveTimer_SetConfig+0x110>
 8006326:	2b20      	cmp	r3, #32
 8006328:	d051      	beq.n	80063ce <TIM_SlaveTimer_SetConfig+0x116>
 800632a:	2b20      	cmp	r3, #32
 800632c:	d84c      	bhi.n	80063c8 <TIM_SlaveTimer_SetConfig+0x110>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d04d      	beq.n	80063ce <TIM_SlaveTimer_SetConfig+0x116>
 8006332:	2b10      	cmp	r3, #16
 8006334:	d04b      	beq.n	80063ce <TIM_SlaveTimer_SetConfig+0x116>
 8006336:	e047      	b.n	80063c8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	68d9      	ldr	r1, [r3, #12]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	f000 f8be 	bl	80064c8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800634c:	e040      	b.n	80063d0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b05      	cmp	r3, #5
 8006354:	d101      	bne.n	800635a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e03b      	b.n	80063d2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6a1a      	ldr	r2, [r3, #32]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0201 	bic.w	r2, r2, #1
 8006370:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006380:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	4313      	orrs	r3, r2
 800638c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	621a      	str	r2, [r3, #32]
      break;
 800639e:	e017      	b.n	80063d0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6818      	ldr	r0, [r3, #0]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	6899      	ldr	r1, [r3, #8]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	461a      	mov	r2, r3
 80063ae:	f000 f814 	bl	80063da <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80063b2:	e00d      	b.n	80063d0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	6899      	ldr	r1, [r3, #8]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	461a      	mov	r2, r3
 80063c2:	f000 f838 	bl	8006436 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80063c6:	e003      	b.n	80063d0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	75fb      	strb	r3, [r7, #23]
      break;
 80063cc:	e000      	b.n	80063d0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80063ce:	bf00      	nop
  }

  return status;
 80063d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063da:	b480      	push	{r7}
 80063dc:	b087      	sub	sp, #28
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	f023 0201 	bic.w	r2, r3, #1
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006404:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f023 030a 	bic.w	r3, r3, #10
 8006416:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	4313      	orrs	r3, r2
 800641e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	621a      	str	r2, [r3, #32]
}
 800642c:	bf00      	nop
 800642e:	371c      	adds	r7, #28
 8006430:	46bd      	mov	sp, r7
 8006432:	bc80      	pop	{r7}
 8006434:	4770      	bx	lr

08006436 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006436:	b480      	push	{r7}
 8006438:	b087      	sub	sp, #28
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	f023 0210 	bic.w	r2, r3, #16
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006460:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	031b      	lsls	r3, r3, #12
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006472:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	4313      	orrs	r3, r2
 800647c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	621a      	str	r2, [r3, #32]
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	bc80      	pop	{r7}
 8006492:	4770      	bx	lr

08006494 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f043 0307 	orr.w	r3, r3, #7
 80064b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	609a      	str	r2, [r3, #8]
}
 80064be:	bf00      	nop
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr

080064c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	021a      	lsls	r2, r3, #8
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	609a      	str	r2, [r3, #8]
}
 80064fc:	bf00      	nop
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr

08006506 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006506:	b480      	push	{r7}
 8006508:	b087      	sub	sp, #28
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	2201      	movs	r2, #1
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a1a      	ldr	r2, [r3, #32]
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	43db      	mvns	r3, r3
 8006528:	401a      	ands	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a1a      	ldr	r2, [r3, #32]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f003 031f 	and.w	r3, r3, #31
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	fa01 f303 	lsl.w	r3, r1, r3
 800653e:	431a      	orrs	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	621a      	str	r2, [r3, #32]
}
 8006544:	bf00      	nop
 8006546:	371c      	adds	r7, #28
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr
	...

08006550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006564:	2302      	movs	r3, #2
 8006566:	e046      	b.n	80065f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a16      	ldr	r2, [pc, #88]	; (8006600 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00e      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b4:	d009      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a12      	ldr	r2, [pc, #72]	; (8006604 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d004      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a10      	ldr	r2, [pc, #64]	; (8006608 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d10c      	bne.n	80065e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bc80      	pop	{r7}
 80065fe:	4770      	bx	lr
 8006600:	40012c00 	.word	0x40012c00
 8006604:	40000400 	.word	0x40000400
 8006608:	40000800 	.word	0x40000800

0800660c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	bc80      	pop	{r7}
 800661c:	4770      	bx	lr

0800661e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr

08006630 <__libc_init_array>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	2600      	movs	r6, #0
 8006634:	4d0c      	ldr	r5, [pc, #48]	; (8006668 <__libc_init_array+0x38>)
 8006636:	4c0d      	ldr	r4, [pc, #52]	; (800666c <__libc_init_array+0x3c>)
 8006638:	1b64      	subs	r4, r4, r5
 800663a:	10a4      	asrs	r4, r4, #2
 800663c:	42a6      	cmp	r6, r4
 800663e:	d109      	bne.n	8006654 <__libc_init_array+0x24>
 8006640:	f000 f86a 	bl	8006718 <_init>
 8006644:	2600      	movs	r6, #0
 8006646:	4d0a      	ldr	r5, [pc, #40]	; (8006670 <__libc_init_array+0x40>)
 8006648:	4c0a      	ldr	r4, [pc, #40]	; (8006674 <__libc_init_array+0x44>)
 800664a:	1b64      	subs	r4, r4, r5
 800664c:	10a4      	asrs	r4, r4, #2
 800664e:	42a6      	cmp	r6, r4
 8006650:	d105      	bne.n	800665e <__libc_init_array+0x2e>
 8006652:	bd70      	pop	{r4, r5, r6, pc}
 8006654:	f855 3b04 	ldr.w	r3, [r5], #4
 8006658:	4798      	blx	r3
 800665a:	3601      	adds	r6, #1
 800665c:	e7ee      	b.n	800663c <__libc_init_array+0xc>
 800665e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006662:	4798      	blx	r3
 8006664:	3601      	adds	r6, #1
 8006666:	e7f2      	b.n	800664e <__libc_init_array+0x1e>
 8006668:	08006764 	.word	0x08006764
 800666c:	08006764 	.word	0x08006764
 8006670:	08006764 	.word	0x08006764
 8006674:	08006768 	.word	0x08006768

08006678 <memset>:
 8006678:	4603      	mov	r3, r0
 800667a:	4402      	add	r2, r0
 800667c:	4293      	cmp	r3, r2
 800667e:	d100      	bne.n	8006682 <memset+0xa>
 8006680:	4770      	bx	lr
 8006682:	f803 1b01 	strb.w	r1, [r3], #1
 8006686:	e7f9      	b.n	800667c <memset+0x4>

08006688 <round>:
 8006688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800668e:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8006692:	2c13      	cmp	r4, #19
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4606      	mov	r6, r0
 800669a:	460d      	mov	r5, r1
 800669c:	dc19      	bgt.n	80066d2 <round+0x4a>
 800669e:	2c00      	cmp	r4, #0
 80066a0:	da09      	bge.n	80066b6 <round+0x2e>
 80066a2:	3401      	adds	r4, #1
 80066a4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80066a8:	d103      	bne.n	80066b2 <round+0x2a>
 80066aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80066ae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80066b2:	2200      	movs	r2, #0
 80066b4:	e02a      	b.n	800670c <round+0x84>
 80066b6:	4917      	ldr	r1, [pc, #92]	; (8006714 <round+0x8c>)
 80066b8:	4121      	asrs	r1, r4
 80066ba:	ea03 0001 	and.w	r0, r3, r1
 80066be:	4302      	orrs	r2, r0
 80066c0:	d010      	beq.n	80066e4 <round+0x5c>
 80066c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80066c6:	fa42 f404 	asr.w	r4, r2, r4
 80066ca:	4423      	add	r3, r4
 80066cc:	ea23 0301 	bic.w	r3, r3, r1
 80066d0:	e7ef      	b.n	80066b2 <round+0x2a>
 80066d2:	2c33      	cmp	r4, #51	; 0x33
 80066d4:	dd09      	ble.n	80066ea <round+0x62>
 80066d6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80066da:	d103      	bne.n	80066e4 <round+0x5c>
 80066dc:	f7f9 fdf0 	bl	80002c0 <__adddf3>
 80066e0:	4606      	mov	r6, r0
 80066e2:	460d      	mov	r5, r1
 80066e4:	4630      	mov	r0, r6
 80066e6:	4629      	mov	r1, r5
 80066e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066ea:	f04f 31ff 	mov.w	r1, #4294967295
 80066ee:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80066f2:	40f9      	lsrs	r1, r7
 80066f4:	4208      	tst	r0, r1
 80066f6:	d0f5      	beq.n	80066e4 <round+0x5c>
 80066f8:	2001      	movs	r0, #1
 80066fa:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80066fe:	fa00 f404 	lsl.w	r4, r0, r4
 8006702:	1912      	adds	r2, r2, r4
 8006704:	bf28      	it	cs
 8006706:	181b      	addcs	r3, r3, r0
 8006708:	ea22 0201 	bic.w	r2, r2, r1
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	e7e6      	b.n	80066e0 <round+0x58>
 8006712:	bf00      	nop
 8006714:	000fffff 	.word	0x000fffff

08006718 <_init>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr

08006724 <_fini>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr
